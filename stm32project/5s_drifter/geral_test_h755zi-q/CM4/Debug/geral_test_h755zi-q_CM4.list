
geral_test_h755zi-q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c4  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0810485c  0810485c  0000585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810489c  0810489c  0000589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081048a4  081048a4  000058a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  081048a8  081048a8  000058a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  10000000  081048ac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  10000010  081048bc  00006010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100000c4  081048bc  000060c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f63b  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001fec  00000000  00000000  0001567b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b30  00000000  00000000  00017668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000088a  00000000  00000000  00018198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039322  00000000  00000000  00018a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f0a0  00000000  00000000  00051d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001797d2  00000000  00000000  00060de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001da5b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d24  00000000  00000000  001da5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  001dd320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08104844 	.word	0x08104844

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08104844 	.word	0x08104844

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 81002ec:	f000 b988 	b.w	8100600 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	468e      	mov	lr, r1
 8100310:	4604      	mov	r4, r0
 8100312:	4688      	mov	r8, r1
 8100314:	2b00      	cmp	r3, #0
 8100316:	d14a      	bne.n	81003ae <__udivmoddi4+0xa6>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d962      	bls.n	81003e4 <__udivmoddi4+0xdc>
 810031e:	fab2 f682 	clz	r6, r2
 8100322:	b14e      	cbz	r6, 8100338 <__udivmoddi4+0x30>
 8100324:	f1c6 0320 	rsb	r3, r6, #32
 8100328:	fa01 f806 	lsl.w	r8, r1, r6
 810032c:	fa20 f303 	lsr.w	r3, r0, r3
 8100330:	40b7      	lsls	r7, r6
 8100332:	ea43 0808 	orr.w	r8, r3, r8
 8100336:	40b4      	lsls	r4, r6
 8100338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810033c:	fa1f fc87 	uxth.w	ip, r7
 8100340:	fbb8 f1fe 	udiv	r1, r8, lr
 8100344:	0c23      	lsrs	r3, r4, #16
 8100346:	fb0e 8811 	mls	r8, lr, r1, r8
 810034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810034e:	fb01 f20c 	mul.w	r2, r1, ip
 8100352:	429a      	cmp	r2, r3
 8100354:	d909      	bls.n	810036a <__udivmoddi4+0x62>
 8100356:	18fb      	adds	r3, r7, r3
 8100358:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 810035c:	f080 80ea 	bcs.w	8100534 <__udivmoddi4+0x22c>
 8100360:	429a      	cmp	r2, r3
 8100362:	f240 80e7 	bls.w	8100534 <__udivmoddi4+0x22c>
 8100366:	3902      	subs	r1, #2
 8100368:	443b      	add	r3, r7
 810036a:	1a9a      	subs	r2, r3, r2
 810036c:	b2a3      	uxth	r3, r4
 810036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8100372:	fb0e 2210 	mls	r2, lr, r0, r2
 8100376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810037a:	fb00 fc0c 	mul.w	ip, r0, ip
 810037e:	459c      	cmp	ip, r3
 8100380:	d909      	bls.n	8100396 <__udivmoddi4+0x8e>
 8100382:	18fb      	adds	r3, r7, r3
 8100384:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8100388:	f080 80d6 	bcs.w	8100538 <__udivmoddi4+0x230>
 810038c:	459c      	cmp	ip, r3
 810038e:	f240 80d3 	bls.w	8100538 <__udivmoddi4+0x230>
 8100392:	443b      	add	r3, r7
 8100394:	3802      	subs	r0, #2
 8100396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 810039a:	eba3 030c 	sub.w	r3, r3, ip
 810039e:	2100      	movs	r1, #0
 81003a0:	b11d      	cbz	r5, 81003aa <__udivmoddi4+0xa2>
 81003a2:	40f3      	lsrs	r3, r6
 81003a4:	2200      	movs	r2, #0
 81003a6:	e9c5 3200 	strd	r3, r2, [r5]
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	428b      	cmp	r3, r1
 81003b0:	d905      	bls.n	81003be <__udivmoddi4+0xb6>
 81003b2:	b10d      	cbz	r5, 81003b8 <__udivmoddi4+0xb0>
 81003b4:	e9c5 0100 	strd	r0, r1, [r5]
 81003b8:	2100      	movs	r1, #0
 81003ba:	4608      	mov	r0, r1
 81003bc:	e7f5      	b.n	81003aa <__udivmoddi4+0xa2>
 81003be:	fab3 f183 	clz	r1, r3
 81003c2:	2900      	cmp	r1, #0
 81003c4:	d146      	bne.n	8100454 <__udivmoddi4+0x14c>
 81003c6:	4573      	cmp	r3, lr
 81003c8:	d302      	bcc.n	81003d0 <__udivmoddi4+0xc8>
 81003ca:	4282      	cmp	r2, r0
 81003cc:	f200 8105 	bhi.w	81005da <__udivmoddi4+0x2d2>
 81003d0:	1a84      	subs	r4, r0, r2
 81003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 81003d6:	2001      	movs	r0, #1
 81003d8:	4690      	mov	r8, r2
 81003da:	2d00      	cmp	r5, #0
 81003dc:	d0e5      	beq.n	81003aa <__udivmoddi4+0xa2>
 81003de:	e9c5 4800 	strd	r4, r8, [r5]
 81003e2:	e7e2      	b.n	81003aa <__udivmoddi4+0xa2>
 81003e4:	2a00      	cmp	r2, #0
 81003e6:	f000 8090 	beq.w	810050a <__udivmoddi4+0x202>
 81003ea:	fab2 f682 	clz	r6, r2
 81003ee:	2e00      	cmp	r6, #0
 81003f0:	f040 80a4 	bne.w	810053c <__udivmoddi4+0x234>
 81003f4:	1a8a      	subs	r2, r1, r2
 81003f6:	0c03      	lsrs	r3, r0, #16
 81003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003fc:	b280      	uxth	r0, r0
 81003fe:	b2bc      	uxth	r4, r7
 8100400:	2101      	movs	r1, #1
 8100402:	fbb2 fcfe 	udiv	ip, r2, lr
 8100406:	fb0e 221c 	mls	r2, lr, ip, r2
 810040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810040e:	fb04 f20c 	mul.w	r2, r4, ip
 8100412:	429a      	cmp	r2, r3
 8100414:	d907      	bls.n	8100426 <__udivmoddi4+0x11e>
 8100416:	18fb      	adds	r3, r7, r3
 8100418:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 810041c:	d202      	bcs.n	8100424 <__udivmoddi4+0x11c>
 810041e:	429a      	cmp	r2, r3
 8100420:	f200 80e0 	bhi.w	81005e4 <__udivmoddi4+0x2dc>
 8100424:	46c4      	mov	ip, r8
 8100426:	1a9b      	subs	r3, r3, r2
 8100428:	fbb3 f2fe 	udiv	r2, r3, lr
 810042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8100430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100434:	fb02 f404 	mul.w	r4, r2, r4
 8100438:	429c      	cmp	r4, r3
 810043a:	d907      	bls.n	810044c <__udivmoddi4+0x144>
 810043c:	18fb      	adds	r3, r7, r3
 810043e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8100442:	d202      	bcs.n	810044a <__udivmoddi4+0x142>
 8100444:	429c      	cmp	r4, r3
 8100446:	f200 80ca 	bhi.w	81005de <__udivmoddi4+0x2d6>
 810044a:	4602      	mov	r2, r0
 810044c:	1b1b      	subs	r3, r3, r4
 810044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100452:	e7a5      	b.n	81003a0 <__udivmoddi4+0x98>
 8100454:	f1c1 0620 	rsb	r6, r1, #32
 8100458:	408b      	lsls	r3, r1
 810045a:	fa22 f706 	lsr.w	r7, r2, r6
 810045e:	431f      	orrs	r7, r3
 8100460:	fa0e f401 	lsl.w	r4, lr, r1
 8100464:	fa20 f306 	lsr.w	r3, r0, r6
 8100468:	fa2e fe06 	lsr.w	lr, lr, r6
 810046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100470:	4323      	orrs	r3, r4
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	fa1f fc87 	uxth.w	ip, r7
 810047a:	fbbe f0f9 	udiv	r0, lr, r9
 810047e:	0c1c      	lsrs	r4, r3, #16
 8100480:	fb09 ee10 	mls	lr, r9, r0, lr
 8100484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100488:	fb00 fe0c 	mul.w	lr, r0, ip
 810048c:	45a6      	cmp	lr, r4
 810048e:	fa02 f201 	lsl.w	r2, r2, r1
 8100492:	d909      	bls.n	81004a8 <__udivmoddi4+0x1a0>
 8100494:	193c      	adds	r4, r7, r4
 8100496:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 810049a:	f080 809c 	bcs.w	81005d6 <__udivmoddi4+0x2ce>
 810049e:	45a6      	cmp	lr, r4
 81004a0:	f240 8099 	bls.w	81005d6 <__udivmoddi4+0x2ce>
 81004a4:	3802      	subs	r0, #2
 81004a6:	443c      	add	r4, r7
 81004a8:	eba4 040e 	sub.w	r4, r4, lr
 81004ac:	fa1f fe83 	uxth.w	lr, r3
 81004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 81004b4:	fb09 4413 	mls	r4, r9, r3, r4
 81004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 81004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c0:	45a4      	cmp	ip, r4
 81004c2:	d908      	bls.n	81004d6 <__udivmoddi4+0x1ce>
 81004c4:	193c      	adds	r4, r7, r4
 81004c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 81004ca:	f080 8082 	bcs.w	81005d2 <__udivmoddi4+0x2ca>
 81004ce:	45a4      	cmp	ip, r4
 81004d0:	d97f      	bls.n	81005d2 <__udivmoddi4+0x2ca>
 81004d2:	3b02      	subs	r3, #2
 81004d4:	443c      	add	r4, r7
 81004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 81004da:	eba4 040c 	sub.w	r4, r4, ip
 81004de:	fba0 ec02 	umull	lr, ip, r0, r2
 81004e2:	4564      	cmp	r4, ip
 81004e4:	4673      	mov	r3, lr
 81004e6:	46e1      	mov	r9, ip
 81004e8:	d362      	bcc.n	81005b0 <__udivmoddi4+0x2a8>
 81004ea:	d05f      	beq.n	81005ac <__udivmoddi4+0x2a4>
 81004ec:	b15d      	cbz	r5, 8100506 <__udivmoddi4+0x1fe>
 81004ee:	ebb8 0203 	subs.w	r2, r8, r3
 81004f2:	eb64 0409 	sbc.w	r4, r4, r9
 81004f6:	fa04 f606 	lsl.w	r6, r4, r6
 81004fa:	fa22 f301 	lsr.w	r3, r2, r1
 81004fe:	431e      	orrs	r6, r3
 8100500:	40cc      	lsrs	r4, r1
 8100502:	e9c5 6400 	strd	r6, r4, [r5]
 8100506:	2100      	movs	r1, #0
 8100508:	e74f      	b.n	81003aa <__udivmoddi4+0xa2>
 810050a:	fbb1 fcf2 	udiv	ip, r1, r2
 810050e:	0c01      	lsrs	r1, r0, #16
 8100510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8100514:	b280      	uxth	r0, r0
 8100516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 810051a:	463b      	mov	r3, r7
 810051c:	4638      	mov	r0, r7
 810051e:	463c      	mov	r4, r7
 8100520:	46b8      	mov	r8, r7
 8100522:	46be      	mov	lr, r7
 8100524:	2620      	movs	r6, #32
 8100526:	fbb1 f1f7 	udiv	r1, r1, r7
 810052a:	eba2 0208 	sub.w	r2, r2, r8
 810052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8100532:	e766      	b.n	8100402 <__udivmoddi4+0xfa>
 8100534:	4601      	mov	r1, r0
 8100536:	e718      	b.n	810036a <__udivmoddi4+0x62>
 8100538:	4610      	mov	r0, r2
 810053a:	e72c      	b.n	8100396 <__udivmoddi4+0x8e>
 810053c:	f1c6 0220 	rsb	r2, r6, #32
 8100540:	fa2e f302 	lsr.w	r3, lr, r2
 8100544:	40b7      	lsls	r7, r6
 8100546:	40b1      	lsls	r1, r6
 8100548:	fa20 f202 	lsr.w	r2, r0, r2
 810054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100550:	430a      	orrs	r2, r1
 8100552:	fbb3 f8fe 	udiv	r8, r3, lr
 8100556:	b2bc      	uxth	r4, r7
 8100558:	fb0e 3318 	mls	r3, lr, r8, r3
 810055c:	0c11      	lsrs	r1, r2, #16
 810055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100562:	fb08 f904 	mul.w	r9, r8, r4
 8100566:	40b0      	lsls	r0, r6
 8100568:	4589      	cmp	r9, r1
 810056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 810056e:	b280      	uxth	r0, r0
 8100570:	d93e      	bls.n	81005f0 <__udivmoddi4+0x2e8>
 8100572:	1879      	adds	r1, r7, r1
 8100574:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8100578:	d201      	bcs.n	810057e <__udivmoddi4+0x276>
 810057a:	4589      	cmp	r9, r1
 810057c:	d81f      	bhi.n	81005be <__udivmoddi4+0x2b6>
 810057e:	eba1 0109 	sub.w	r1, r1, r9
 8100582:	fbb1 f9fe 	udiv	r9, r1, lr
 8100586:	fb09 f804 	mul.w	r8, r9, r4
 810058a:	fb0e 1119 	mls	r1, lr, r9, r1
 810058e:	b292      	uxth	r2, r2
 8100590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100594:	4542      	cmp	r2, r8
 8100596:	d229      	bcs.n	81005ec <__udivmoddi4+0x2e4>
 8100598:	18ba      	adds	r2, r7, r2
 810059a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 810059e:	d2c4      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a0:	4542      	cmp	r2, r8
 81005a2:	d2c2      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a4:	f1a9 0102 	sub.w	r1, r9, #2
 81005a8:	443a      	add	r2, r7
 81005aa:	e7be      	b.n	810052a <__udivmoddi4+0x222>
 81005ac:	45f0      	cmp	r8, lr
 81005ae:	d29d      	bcs.n	81004ec <__udivmoddi4+0x1e4>
 81005b0:	ebbe 0302 	subs.w	r3, lr, r2
 81005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 81005b8:	3801      	subs	r0, #1
 81005ba:	46e1      	mov	r9, ip
 81005bc:	e796      	b.n	81004ec <__udivmoddi4+0x1e4>
 81005be:	eba7 0909 	sub.w	r9, r7, r9
 81005c2:	4449      	add	r1, r9
 81005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 81005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 81005cc:	fb09 f804 	mul.w	r8, r9, r4
 81005d0:	e7db      	b.n	810058a <__udivmoddi4+0x282>
 81005d2:	4673      	mov	r3, lr
 81005d4:	e77f      	b.n	81004d6 <__udivmoddi4+0x1ce>
 81005d6:	4650      	mov	r0, sl
 81005d8:	e766      	b.n	81004a8 <__udivmoddi4+0x1a0>
 81005da:	4608      	mov	r0, r1
 81005dc:	e6fd      	b.n	81003da <__udivmoddi4+0xd2>
 81005de:	443b      	add	r3, r7
 81005e0:	3a02      	subs	r2, #2
 81005e2:	e733      	b.n	810044c <__udivmoddi4+0x144>
 81005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 81005e8:	443b      	add	r3, r7
 81005ea:	e71c      	b.n	8100426 <__udivmoddi4+0x11e>
 81005ec:	4649      	mov	r1, r9
 81005ee:	e79c      	b.n	810052a <__udivmoddi4+0x222>
 81005f0:	eba1 0109 	sub.w	r1, r1, r9
 81005f4:	46c4      	mov	ip, r8
 81005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81005fa:	fb09 f804 	mul.w	r8, r9, r4
 81005fe:	e7c4      	b.n	810058a <__udivmoddi4+0x282>

08100600 <__aeabi_idiv0>:
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop

08100604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100604:	b480      	push	{r7}
 8100606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100608:	4b09      	ldr	r3, [pc, #36]	@ (8100630 <SystemInit+0x2c>)
 810060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810060e:	4a08      	ldr	r2, [pc, #32]	@ (8100630 <SystemInit+0x2c>)
 8100610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100618:	4b05      	ldr	r3, [pc, #20]	@ (8100630 <SystemInit+0x2c>)
 810061a:	691b      	ldr	r3, [r3, #16]
 810061c:	4a04      	ldr	r2, [pc, #16]	@ (8100630 <SystemInit+0x2c>)
 810061e:	f043 0310 	orr.w	r3, r3, #16
 8100622:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100624:	bf00      	nop
 8100626:	46bd      	mov	sp, r7
 8100628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810062c:	4770      	bx	lr
 810062e:	bf00      	nop
 8100630:	e000ed00 	.word	0xe000ed00

08100634 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100634:	b480      	push	{r7}
 8100636:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100638:	4b09      	ldr	r3, [pc, #36]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063a:	68db      	ldr	r3, [r3, #12]
 810063c:	4a08      	ldr	r2, [pc, #32]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063e:	f023 0302 	bic.w	r3, r3, #2
 8100642:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100644:	bf00      	nop
 8100646:	4b06      	ldr	r3, [pc, #24]	@ (8100660 <ExitRun0Mode+0x2c>)
 8100648:	685b      	ldr	r3, [r3, #4]
 810064a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810064e:	2b00      	cmp	r3, #0
 8100650:	d0f9      	beq.n	8100646 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100652:	bf00      	nop
 8100654:	bf00      	nop
 8100656:	46bd      	mov	sp, r7
 8100658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810065c:	4770      	bx	lr
 810065e:	bf00      	nop
 8100660:	58024800 	.word	0x58024800

08100664 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8100664:	b480      	push	{r7}
 8100666:	b083      	sub	sp, #12
 8100668:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810066a:	4b0a      	ldr	r3, [pc, #40]	@ (8100694 <MX_GPIO_Init+0x30>)
 810066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100670:	4a08      	ldr	r2, [pc, #32]	@ (8100694 <MX_GPIO_Init+0x30>)
 8100672:	f043 0308 	orr.w	r3, r3, #8
 8100676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810067a:	4b06      	ldr	r3, [pc, #24]	@ (8100694 <MX_GPIO_Init+0x30>)
 810067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100680:	f003 0308 	and.w	r3, r3, #8
 8100684:	607b      	str	r3, [r7, #4]
 8100686:	687b      	ldr	r3, [r7, #4]

}
 8100688:	bf00      	nop
 810068a:	370c      	adds	r7, #12
 810068c:	46bd      	mov	sp, r7
 810068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100692:	4770      	bx	lr
 8100694:	58024400 	.word	0x58024400

08100698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100698:	b580      	push	{r7, lr}
 810069a:	b082      	sub	sp, #8
 810069c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810069e:	4b20      	ldr	r3, [pc, #128]	@ (8100720 <main+0x88>)
 81006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006a4:	4a1e      	ldr	r2, [pc, #120]	@ (8100720 <main+0x88>)
 81006a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81006aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006ae:	4b1c      	ldr	r3, [pc, #112]	@ (8100720 <main+0x88>)
 81006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81006b8:	607b      	str	r3, [r7, #4]
 81006ba:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006bc:	2001      	movs	r0, #1
 81006be:	f000 fce7 	bl	8101090 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81006c2:	f000 fd71 	bl	81011a8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81006c6:	2201      	movs	r2, #1
 81006c8:	2102      	movs	r1, #2
 81006ca:	2000      	movs	r0, #0
 81006cc:	f000 fcf2 	bl	81010b4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006d0:	4b14      	ldr	r3, [pc, #80]	@ (8100724 <main+0x8c>)
 81006d2:	681b      	ldr	r3, [r3, #0]
 81006d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81006d8:	2b70      	cmp	r3, #112	@ 0x70
 81006da:	d108      	bne.n	81006ee <main+0x56>
 81006dc:	4b12      	ldr	r3, [pc, #72]	@ (8100728 <main+0x90>)
 81006de:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006e2:	4a11      	ldr	r2, [pc, #68]	@ (8100728 <main+0x90>)
 81006e4:	f043 0301 	orr.w	r3, r3, #1
 81006e8:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006ec:	e007      	b.n	81006fe <main+0x66>
 81006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8100728 <main+0x90>)
 81006f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006f4:	4a0c      	ldr	r2, [pc, #48]	@ (8100728 <main+0x90>)
 81006f6:	f043 0301 	orr.w	r3, r3, #1
 81006fa:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006fe:	f000 f949 	bl	8100994 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100702:	f7ff ffaf 	bl	8100664 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8100706:	f000 f865 	bl	81007d4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit_IT(&huart2, "Hallo\n", 16);
 810070a:	2210      	movs	r2, #16
 810070c:	4907      	ldr	r1, [pc, #28]	@ (810072c <main+0x94>)
 810070e:	4808      	ldr	r0, [pc, #32]	@ (8100730 <main+0x98>)
 8100710:	f002 fdac 	bl	810326c <HAL_UART_Transmit_IT>
	  HAL_Delay(100);
 8100714:	2064      	movs	r0, #100	@ 0x64
 8100716:	f000 f9f1 	bl	8100afc <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2, "Hallo\n", 16);
 810071a:	bf00      	nop
 810071c:	e7f5      	b.n	810070a <main+0x72>
 810071e:	bf00      	nop
 8100720:	58024400 	.word	0x58024400
 8100724:	e000ed00 	.word	0xe000ed00
 8100728:	58026400 	.word	0x58026400
 810072c:	0810485c 	.word	0x0810485c
 8100730:	1000002c 	.word	0x1000002c

08100734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100734:	b480      	push	{r7}
 8100736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100738:	b672      	cpsid	i
}
 810073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810073c:	bf00      	nop
 810073e:	e7fd      	b.n	810073c <Error_Handler+0x8>

08100740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100740:	b480      	push	{r7}
 8100742:	b083      	sub	sp, #12
 8100744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100746:	4b0a      	ldr	r3, [pc, #40]	@ (8100770 <HAL_MspInit+0x30>)
 8100748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810074c:	4a08      	ldr	r2, [pc, #32]	@ (8100770 <HAL_MspInit+0x30>)
 810074e:	f043 0302 	orr.w	r3, r3, #2
 8100752:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100756:	4b06      	ldr	r3, [pc, #24]	@ (8100770 <HAL_MspInit+0x30>)
 8100758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810075c:	f003 0302 	and.w	r3, r3, #2
 8100760:	607b      	str	r3, [r7, #4]
 8100762:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100764:	bf00      	nop
 8100766:	370c      	adds	r7, #12
 8100768:	46bd      	mov	sp, r7
 810076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810076e:	4770      	bx	lr
 8100770:	58024400 	.word	0x58024400

08100774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100774:	b480      	push	{r7}
 8100776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100778:	bf00      	nop
 810077a:	e7fd      	b.n	8100778 <NMI_Handler+0x4>

0810077c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810077c:	b480      	push	{r7}
 810077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100780:	bf00      	nop
 8100782:	e7fd      	b.n	8100780 <HardFault_Handler+0x4>

08100784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100784:	b480      	push	{r7}
 8100786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100788:	bf00      	nop
 810078a:	e7fd      	b.n	8100788 <MemManage_Handler+0x4>

0810078c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810078c:	b480      	push	{r7}
 810078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100790:	bf00      	nop
 8100792:	e7fd      	b.n	8100790 <BusFault_Handler+0x4>

08100794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100794:	b480      	push	{r7}
 8100796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100798:	bf00      	nop
 810079a:	e7fd      	b.n	8100798 <UsageFault_Handler+0x4>

0810079c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810079c:	b480      	push	{r7}
 810079e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81007a0:	bf00      	nop
 81007a2:	46bd      	mov	sp, r7
 81007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007a8:	4770      	bx	lr

081007aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81007aa:	b480      	push	{r7}
 81007ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81007ae:	bf00      	nop
 81007b0:	46bd      	mov	sp, r7
 81007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007b6:	4770      	bx	lr

081007b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81007b8:	b480      	push	{r7}
 81007ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81007bc:	bf00      	nop
 81007be:	46bd      	mov	sp, r7
 81007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007c4:	4770      	bx	lr

081007c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81007c6:	b580      	push	{r7, lr}
 81007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81007ca:	f000 f977 	bl	8100abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81007ce:	bf00      	nop
 81007d0:	bd80      	pop	{r7, pc}
	...

081007d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 81007d4:	b580      	push	{r7, lr}
 81007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 81007d8:	4b22      	ldr	r3, [pc, #136]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 81007da:	4a23      	ldr	r2, [pc, #140]	@ (8100868 <MX_USART2_UART_Init+0x94>)
 81007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 81007de:	4b21      	ldr	r3, [pc, #132]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 81007e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 81007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 81007e8:	2200      	movs	r2, #0
 81007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 81007ec:	4b1d      	ldr	r3, [pc, #116]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 81007ee:	2200      	movs	r2, #0
 81007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 81007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 81007f4:	2200      	movs	r2, #0
 81007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 81007f8:	4b1a      	ldr	r3, [pc, #104]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 81007fa:	220c      	movs	r2, #12
 81007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81007fe:	4b19      	ldr	r3, [pc, #100]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 8100800:	2200      	movs	r2, #0
 8100802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8100804:	4b17      	ldr	r3, [pc, #92]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 8100806:	2200      	movs	r2, #0
 8100808:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810080a:	4b16      	ldr	r3, [pc, #88]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 810080c:	2200      	movs	r2, #0
 810080e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100810:	4b14      	ldr	r3, [pc, #80]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 8100812:	2200      	movs	r2, #0
 8100814:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100816:	4b13      	ldr	r3, [pc, #76]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 8100818:	2200      	movs	r2, #0
 810081a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 810081c:	4811      	ldr	r0, [pc, #68]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 810081e:	f002 fcd5 	bl	81031cc <HAL_UART_Init>
 8100822:	4603      	mov	r3, r0
 8100824:	2b00      	cmp	r3, #0
 8100826:	d001      	beq.n	810082c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8100828:	f7ff ff84 	bl	8100734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810082c:	2100      	movs	r1, #0
 810082e:	480d      	ldr	r0, [pc, #52]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 8100830:	f003 ff12 	bl	8104658 <HAL_UARTEx_SetTxFifoThreshold>
 8100834:	4603      	mov	r3, r0
 8100836:	2b00      	cmp	r3, #0
 8100838:	d001      	beq.n	810083e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 810083a:	f7ff ff7b 	bl	8100734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810083e:	2100      	movs	r1, #0
 8100840:	4808      	ldr	r0, [pc, #32]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 8100842:	f003 ff47 	bl	81046d4 <HAL_UARTEx_SetRxFifoThreshold>
 8100846:	4603      	mov	r3, r0
 8100848:	2b00      	cmp	r3, #0
 810084a:	d001      	beq.n	8100850 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 810084c:	f7ff ff72 	bl	8100734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8100850:	4804      	ldr	r0, [pc, #16]	@ (8100864 <MX_USART2_UART_Init+0x90>)
 8100852:	f003 fec8 	bl	81045e6 <HAL_UARTEx_DisableFifoMode>
 8100856:	4603      	mov	r3, r0
 8100858:	2b00      	cmp	r3, #0
 810085a:	d001      	beq.n	8100860 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 810085c:	f7ff ff6a 	bl	8100734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8100860:	bf00      	nop
 8100862:	bd80      	pop	{r7, pc}
 8100864:	1000002c 	.word	0x1000002c
 8100868:	40004400 	.word	0x40004400

0810086c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 810086c:	b580      	push	{r7, lr}
 810086e:	b0ba      	sub	sp, #232	@ 0xe8
 8100870:	af00      	add	r7, sp, #0
 8100872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100874:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100878:	2200      	movs	r2, #0
 810087a:	601a      	str	r2, [r3, #0]
 810087c:	605a      	str	r2, [r3, #4]
 810087e:	609a      	str	r2, [r3, #8]
 8100880:	60da      	str	r2, [r3, #12]
 8100882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100884:	f107 0310 	add.w	r3, r7, #16
 8100888:	22c0      	movs	r2, #192	@ 0xc0
 810088a:	2100      	movs	r1, #0
 810088c:	4618      	mov	r0, r3
 810088e:	f003 ffad 	bl	81047ec <memset>
  if(uartHandle->Instance==USART2)
 8100892:	687b      	ldr	r3, [r7, #4]
 8100894:	681b      	ldr	r3, [r3, #0]
 8100896:	4a26      	ldr	r2, [pc, #152]	@ (8100930 <HAL_UART_MspInit+0xc4>)
 8100898:	4293      	cmp	r3, r2
 810089a:	d145      	bne.n	8100928 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 810089c:	f04f 0202 	mov.w	r2, #2
 81008a0:	f04f 0300 	mov.w	r3, #0
 81008a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81008a8:	2300      	movs	r3, #0
 81008aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81008ae:	f107 0310 	add.w	r3, r7, #16
 81008b2:	4618      	mov	r0, r3
 81008b4:	f000 fe5e 	bl	8101574 <HAL_RCCEx_PeriphCLKConfig>
 81008b8:	4603      	mov	r3, r0
 81008ba:	2b00      	cmp	r3, #0
 81008bc:	d001      	beq.n	81008c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 81008be:	f7ff ff39 	bl	8100734 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 81008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8100934 <HAL_UART_MspInit+0xc8>)
 81008c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81008c8:	4a1a      	ldr	r2, [pc, #104]	@ (8100934 <HAL_UART_MspInit+0xc8>)
 81008ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81008ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81008d2:	4b18      	ldr	r3, [pc, #96]	@ (8100934 <HAL_UART_MspInit+0xc8>)
 81008d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81008d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81008dc:	60fb      	str	r3, [r7, #12]
 81008de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81008e0:	4b14      	ldr	r3, [pc, #80]	@ (8100934 <HAL_UART_MspInit+0xc8>)
 81008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008e6:	4a13      	ldr	r2, [pc, #76]	@ (8100934 <HAL_UART_MspInit+0xc8>)
 81008e8:	f043 0308 	orr.w	r3, r3, #8
 81008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008f0:	4b10      	ldr	r3, [pc, #64]	@ (8100934 <HAL_UART_MspInit+0xc8>)
 81008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008f6:	f003 0308 	and.w	r3, r3, #8
 81008fa:	60bb      	str	r3, [r7, #8]
 81008fc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 81008fe:	2360      	movs	r3, #96	@ 0x60
 8100900:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100904:	2302      	movs	r3, #2
 8100906:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810090a:	2300      	movs	r3, #0
 810090c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100910:	2300      	movs	r3, #0
 8100912:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8100916:	2307      	movs	r3, #7
 8100918:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810091c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100920:	4619      	mov	r1, r3
 8100922:	4805      	ldr	r0, [pc, #20]	@ (8100938 <HAL_UART_MspInit+0xcc>)
 8100924:	f000 fa04 	bl	8100d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8100928:	bf00      	nop
 810092a:	37e8      	adds	r7, #232	@ 0xe8
 810092c:	46bd      	mov	sp, r7
 810092e:	bd80      	pop	{r7, pc}
 8100930:	40004400 	.word	0x40004400
 8100934:	58024400 	.word	0x58024400
 8100938:	58020c00 	.word	0x58020c00

0810093c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810093c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8100978 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8100940:	f7ff fe78 	bl	8100634 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100944:	f7ff fe5e 	bl	8100604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100948:	480c      	ldr	r0, [pc, #48]	@ (810097c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810094a:	490d      	ldr	r1, [pc, #52]	@ (8100980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810094c:	4a0d      	ldr	r2, [pc, #52]	@ (8100984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100950:	e002      	b.n	8100958 <LoopCopyDataInit>

08100952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100956:	3304      	adds	r3, #4

08100958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810095c:	d3f9      	bcc.n	8100952 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810095e:	4a0a      	ldr	r2, [pc, #40]	@ (8100988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100960:	4c0a      	ldr	r4, [pc, #40]	@ (810098c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100964:	e001      	b.n	810096a <LoopFillZerobss>

08100966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100968:	3204      	adds	r2, #4

0810096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810096c:	d3fb      	bcc.n	8100966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810096e:	f003 ff45 	bl	81047fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100972:	f7ff fe91 	bl	8100698 <main>
  bx  lr
 8100976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100978:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810097c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100980:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100984:	081048ac 	.word	0x081048ac
  ldr r2, =_sbss
 8100988:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 810098c:	100000c4 	.word	0x100000c4

08100990 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100990:	e7fe      	b.n	8100990 <ADC3_IRQHandler>
	...

08100994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100994:	b580      	push	{r7, lr}
 8100996:	b082      	sub	sp, #8
 8100998:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810099a:	4b28      	ldr	r3, [pc, #160]	@ (8100a3c <HAL_Init+0xa8>)
 810099c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81009a0:	4a26      	ldr	r2, [pc, #152]	@ (8100a3c <HAL_Init+0xa8>)
 81009a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81009a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81009aa:	4b24      	ldr	r3, [pc, #144]	@ (8100a3c <HAL_Init+0xa8>)
 81009ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81009b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81009b4:	603b      	str	r3, [r7, #0]
 81009b6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81009b8:	4b21      	ldr	r3, [pc, #132]	@ (8100a40 <HAL_Init+0xac>)
 81009ba:	681b      	ldr	r3, [r3, #0]
 81009bc:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81009c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81009c4:	4a1e      	ldr	r2, [pc, #120]	@ (8100a40 <HAL_Init+0xac>)
 81009c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81009ca:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81009cc:	4b1c      	ldr	r3, [pc, #112]	@ (8100a40 <HAL_Init+0xac>)
 81009ce:	681b      	ldr	r3, [r3, #0]
 81009d0:	4a1b      	ldr	r2, [pc, #108]	@ (8100a40 <HAL_Init+0xac>)
 81009d2:	f043 0301 	orr.w	r3, r3, #1
 81009d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81009d8:	2003      	movs	r0, #3
 81009da:	f000 f965 	bl	8100ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81009de:	f000 fbf1 	bl	81011c4 <HAL_RCC_GetSysClockFreq>
 81009e2:	4602      	mov	r2, r0
 81009e4:	4b15      	ldr	r3, [pc, #84]	@ (8100a3c <HAL_Init+0xa8>)
 81009e6:	699b      	ldr	r3, [r3, #24]
 81009e8:	0a1b      	lsrs	r3, r3, #8
 81009ea:	f003 030f 	and.w	r3, r3, #15
 81009ee:	4915      	ldr	r1, [pc, #84]	@ (8100a44 <HAL_Init+0xb0>)
 81009f0:	5ccb      	ldrb	r3, [r1, r3]
 81009f2:	f003 031f 	and.w	r3, r3, #31
 81009f6:	fa22 f303 	lsr.w	r3, r2, r3
 81009fa:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8100a3c <HAL_Init+0xa8>)
 81009fe:	699b      	ldr	r3, [r3, #24]
 8100a00:	f003 030f 	and.w	r3, r3, #15
 8100a04:	4a0f      	ldr	r2, [pc, #60]	@ (8100a44 <HAL_Init+0xb0>)
 8100a06:	5cd3      	ldrb	r3, [r2, r3]
 8100a08:	f003 031f 	and.w	r3, r3, #31
 8100a0c:	687a      	ldr	r2, [r7, #4]
 8100a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8100a12:	4a0d      	ldr	r2, [pc, #52]	@ (8100a48 <HAL_Init+0xb4>)
 8100a14:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100a16:	4b0c      	ldr	r3, [pc, #48]	@ (8100a48 <HAL_Init+0xb4>)
 8100a18:	681b      	ldr	r3, [r3, #0]
 8100a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8100a4c <HAL_Init+0xb8>)
 8100a1c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100a1e:	2000      	movs	r0, #0
 8100a20:	f000 f816 	bl	8100a50 <HAL_InitTick>
 8100a24:	4603      	mov	r3, r0
 8100a26:	2b00      	cmp	r3, #0
 8100a28:	d001      	beq.n	8100a2e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100a2a:	2301      	movs	r3, #1
 8100a2c:	e002      	b.n	8100a34 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100a2e:	f7ff fe87 	bl	8100740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100a32:	2300      	movs	r3, #0
}
 8100a34:	4618      	mov	r0, r3
 8100a36:	3708      	adds	r7, #8
 8100a38:	46bd      	mov	sp, r7
 8100a3a:	bd80      	pop	{r7, pc}
 8100a3c:	58024400 	.word	0x58024400
 8100a40:	40024400 	.word	0x40024400
 8100a44:	08104864 	.word	0x08104864
 8100a48:	10000004 	.word	0x10000004
 8100a4c:	10000000 	.word	0x10000000

08100a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a50:	b580      	push	{r7, lr}
 8100a52:	b082      	sub	sp, #8
 8100a54:	af00      	add	r7, sp, #0
 8100a56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100a58:	4b15      	ldr	r3, [pc, #84]	@ (8100ab0 <HAL_InitTick+0x60>)
 8100a5a:	781b      	ldrb	r3, [r3, #0]
 8100a5c:	2b00      	cmp	r3, #0
 8100a5e:	d101      	bne.n	8100a64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100a60:	2301      	movs	r3, #1
 8100a62:	e021      	b.n	8100aa8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100a64:	4b13      	ldr	r3, [pc, #76]	@ (8100ab4 <HAL_InitTick+0x64>)
 8100a66:	681a      	ldr	r2, [r3, #0]
 8100a68:	4b11      	ldr	r3, [pc, #68]	@ (8100ab0 <HAL_InitTick+0x60>)
 8100a6a:	781b      	ldrb	r3, [r3, #0]
 8100a6c:	4619      	mov	r1, r3
 8100a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8100a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8100a7a:	4618      	mov	r0, r3
 8100a7c:	f000 f939 	bl	8100cf2 <HAL_SYSTICK_Config>
 8100a80:	4603      	mov	r3, r0
 8100a82:	2b00      	cmp	r3, #0
 8100a84:	d001      	beq.n	8100a8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100a86:	2301      	movs	r3, #1
 8100a88:	e00e      	b.n	8100aa8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100a8a:	687b      	ldr	r3, [r7, #4]
 8100a8c:	2b0f      	cmp	r3, #15
 8100a8e:	d80a      	bhi.n	8100aa6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100a90:	2200      	movs	r2, #0
 8100a92:	6879      	ldr	r1, [r7, #4]
 8100a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100a98:	f000 f911 	bl	8100cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100a9c:	4a06      	ldr	r2, [pc, #24]	@ (8100ab8 <HAL_InitTick+0x68>)
 8100a9e:	687b      	ldr	r3, [r7, #4]
 8100aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100aa2:	2300      	movs	r3, #0
 8100aa4:	e000      	b.n	8100aa8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100aa6:	2301      	movs	r3, #1
}
 8100aa8:	4618      	mov	r0, r3
 8100aaa:	3708      	adds	r7, #8
 8100aac:	46bd      	mov	sp, r7
 8100aae:	bd80      	pop	{r7, pc}
 8100ab0:	1000000c 	.word	0x1000000c
 8100ab4:	10000000 	.word	0x10000000
 8100ab8:	10000008 	.word	0x10000008

08100abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100abc:	b480      	push	{r7}
 8100abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100ac0:	4b06      	ldr	r3, [pc, #24]	@ (8100adc <HAL_IncTick+0x20>)
 8100ac2:	781b      	ldrb	r3, [r3, #0]
 8100ac4:	461a      	mov	r2, r3
 8100ac6:	4b06      	ldr	r3, [pc, #24]	@ (8100ae0 <HAL_IncTick+0x24>)
 8100ac8:	681b      	ldr	r3, [r3, #0]
 8100aca:	4413      	add	r3, r2
 8100acc:	4a04      	ldr	r2, [pc, #16]	@ (8100ae0 <HAL_IncTick+0x24>)
 8100ace:	6013      	str	r3, [r2, #0]
}
 8100ad0:	bf00      	nop
 8100ad2:	46bd      	mov	sp, r7
 8100ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ad8:	4770      	bx	lr
 8100ada:	bf00      	nop
 8100adc:	1000000c 	.word	0x1000000c
 8100ae0:	100000c0 	.word	0x100000c0

08100ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100ae4:	b480      	push	{r7}
 8100ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8100ae8:	4b03      	ldr	r3, [pc, #12]	@ (8100af8 <HAL_GetTick+0x14>)
 8100aea:	681b      	ldr	r3, [r3, #0]
}
 8100aec:	4618      	mov	r0, r3
 8100aee:	46bd      	mov	sp, r7
 8100af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100af4:	4770      	bx	lr
 8100af6:	bf00      	nop
 8100af8:	100000c0 	.word	0x100000c0

08100afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100afc:	b580      	push	{r7, lr}
 8100afe:	b084      	sub	sp, #16
 8100b00:	af00      	add	r7, sp, #0
 8100b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100b04:	f7ff ffee 	bl	8100ae4 <HAL_GetTick>
 8100b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100b0a:	687b      	ldr	r3, [r7, #4]
 8100b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100b0e:	68fb      	ldr	r3, [r7, #12]
 8100b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8100b14:	d005      	beq.n	8100b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100b16:	4b0a      	ldr	r3, [pc, #40]	@ (8100b40 <HAL_Delay+0x44>)
 8100b18:	781b      	ldrb	r3, [r3, #0]
 8100b1a:	461a      	mov	r2, r3
 8100b1c:	68fb      	ldr	r3, [r7, #12]
 8100b1e:	4413      	add	r3, r2
 8100b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100b22:	bf00      	nop
 8100b24:	f7ff ffde 	bl	8100ae4 <HAL_GetTick>
 8100b28:	4602      	mov	r2, r0
 8100b2a:	68bb      	ldr	r3, [r7, #8]
 8100b2c:	1ad3      	subs	r3, r2, r3
 8100b2e:	68fa      	ldr	r2, [r7, #12]
 8100b30:	429a      	cmp	r2, r3
 8100b32:	d8f7      	bhi.n	8100b24 <HAL_Delay+0x28>
  {
  }
}
 8100b34:	bf00      	nop
 8100b36:	bf00      	nop
 8100b38:	3710      	adds	r7, #16
 8100b3a:	46bd      	mov	sp, r7
 8100b3c:	bd80      	pop	{r7, pc}
 8100b3e:	bf00      	nop
 8100b40:	1000000c 	.word	0x1000000c

08100b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b44:	b480      	push	{r7}
 8100b46:	b085      	sub	sp, #20
 8100b48:	af00      	add	r7, sp, #0
 8100b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100b4c:	687b      	ldr	r3, [r7, #4]
 8100b4e:	f003 0307 	and.w	r3, r3, #7
 8100b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100b54:	4b0c      	ldr	r3, [pc, #48]	@ (8100b88 <__NVIC_SetPriorityGrouping+0x44>)
 8100b56:	68db      	ldr	r3, [r3, #12]
 8100b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100b5a:	68ba      	ldr	r2, [r7, #8]
 8100b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100b60:	4013      	ands	r3, r2
 8100b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100b64:	68fb      	ldr	r3, [r7, #12]
 8100b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100b68:	68bb      	ldr	r3, [r7, #8]
 8100b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100b76:	4a04      	ldr	r2, [pc, #16]	@ (8100b88 <__NVIC_SetPriorityGrouping+0x44>)
 8100b78:	68bb      	ldr	r3, [r7, #8]
 8100b7a:	60d3      	str	r3, [r2, #12]
}
 8100b7c:	bf00      	nop
 8100b7e:	3714      	adds	r7, #20
 8100b80:	46bd      	mov	sp, r7
 8100b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b86:	4770      	bx	lr
 8100b88:	e000ed00 	.word	0xe000ed00

08100b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100b8c:	b480      	push	{r7}
 8100b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100b90:	4b04      	ldr	r3, [pc, #16]	@ (8100ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8100b92:	68db      	ldr	r3, [r3, #12]
 8100b94:	0a1b      	lsrs	r3, r3, #8
 8100b96:	f003 0307 	and.w	r3, r3, #7
}
 8100b9a:	4618      	mov	r0, r3
 8100b9c:	46bd      	mov	sp, r7
 8100b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ba2:	4770      	bx	lr
 8100ba4:	e000ed00 	.word	0xe000ed00

08100ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100ba8:	b480      	push	{r7}
 8100baa:	b083      	sub	sp, #12
 8100bac:	af00      	add	r7, sp, #0
 8100bae:	4603      	mov	r3, r0
 8100bb0:	6039      	str	r1, [r7, #0]
 8100bb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bb8:	2b00      	cmp	r3, #0
 8100bba:	db0a      	blt.n	8100bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100bbc:	683b      	ldr	r3, [r7, #0]
 8100bbe:	b2da      	uxtb	r2, r3
 8100bc0:	490c      	ldr	r1, [pc, #48]	@ (8100bf4 <__NVIC_SetPriority+0x4c>)
 8100bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bc6:	0112      	lsls	r2, r2, #4
 8100bc8:	b2d2      	uxtb	r2, r2
 8100bca:	440b      	add	r3, r1
 8100bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100bd0:	e00a      	b.n	8100be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100bd2:	683b      	ldr	r3, [r7, #0]
 8100bd4:	b2da      	uxtb	r2, r3
 8100bd6:	4908      	ldr	r1, [pc, #32]	@ (8100bf8 <__NVIC_SetPriority+0x50>)
 8100bd8:	88fb      	ldrh	r3, [r7, #6]
 8100bda:	f003 030f 	and.w	r3, r3, #15
 8100bde:	3b04      	subs	r3, #4
 8100be0:	0112      	lsls	r2, r2, #4
 8100be2:	b2d2      	uxtb	r2, r2
 8100be4:	440b      	add	r3, r1
 8100be6:	761a      	strb	r2, [r3, #24]
}
 8100be8:	bf00      	nop
 8100bea:	370c      	adds	r7, #12
 8100bec:	46bd      	mov	sp, r7
 8100bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bf2:	4770      	bx	lr
 8100bf4:	e000e100 	.word	0xe000e100
 8100bf8:	e000ed00 	.word	0xe000ed00

08100bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100bfc:	b480      	push	{r7}
 8100bfe:	b089      	sub	sp, #36	@ 0x24
 8100c00:	af00      	add	r7, sp, #0
 8100c02:	60f8      	str	r0, [r7, #12]
 8100c04:	60b9      	str	r1, [r7, #8]
 8100c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100c08:	68fb      	ldr	r3, [r7, #12]
 8100c0a:	f003 0307 	and.w	r3, r3, #7
 8100c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100c10:	69fb      	ldr	r3, [r7, #28]
 8100c12:	f1c3 0307 	rsb	r3, r3, #7
 8100c16:	2b04      	cmp	r3, #4
 8100c18:	bf28      	it	cs
 8100c1a:	2304      	movcs	r3, #4
 8100c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100c1e:	69fb      	ldr	r3, [r7, #28]
 8100c20:	3304      	adds	r3, #4
 8100c22:	2b06      	cmp	r3, #6
 8100c24:	d902      	bls.n	8100c2c <NVIC_EncodePriority+0x30>
 8100c26:	69fb      	ldr	r3, [r7, #28]
 8100c28:	3b03      	subs	r3, #3
 8100c2a:	e000      	b.n	8100c2e <NVIC_EncodePriority+0x32>
 8100c2c:	2300      	movs	r3, #0
 8100c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8100c34:	69bb      	ldr	r3, [r7, #24]
 8100c36:	fa02 f303 	lsl.w	r3, r2, r3
 8100c3a:	43da      	mvns	r2, r3
 8100c3c:	68bb      	ldr	r3, [r7, #8]
 8100c3e:	401a      	ands	r2, r3
 8100c40:	697b      	ldr	r3, [r7, #20]
 8100c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100c44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8100c48:	697b      	ldr	r3, [r7, #20]
 8100c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8100c4e:	43d9      	mvns	r1, r3
 8100c50:	687b      	ldr	r3, [r7, #4]
 8100c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c54:	4313      	orrs	r3, r2
         );
}
 8100c56:	4618      	mov	r0, r3
 8100c58:	3724      	adds	r7, #36	@ 0x24
 8100c5a:	46bd      	mov	sp, r7
 8100c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c60:	4770      	bx	lr
	...

08100c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100c64:	b580      	push	{r7, lr}
 8100c66:	b082      	sub	sp, #8
 8100c68:	af00      	add	r7, sp, #0
 8100c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100c6c:	687b      	ldr	r3, [r7, #4]
 8100c6e:	3b01      	subs	r3, #1
 8100c70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100c74:	d301      	bcc.n	8100c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100c76:	2301      	movs	r3, #1
 8100c78:	e00f      	b.n	8100c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8100ca4 <SysTick_Config+0x40>)
 8100c7c:	687b      	ldr	r3, [r7, #4]
 8100c7e:	3b01      	subs	r3, #1
 8100c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100c82:	210f      	movs	r1, #15
 8100c84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100c88:	f7ff ff8e 	bl	8100ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100c8c:	4b05      	ldr	r3, [pc, #20]	@ (8100ca4 <SysTick_Config+0x40>)
 8100c8e:	2200      	movs	r2, #0
 8100c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100c92:	4b04      	ldr	r3, [pc, #16]	@ (8100ca4 <SysTick_Config+0x40>)
 8100c94:	2207      	movs	r2, #7
 8100c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100c98:	2300      	movs	r3, #0
}
 8100c9a:	4618      	mov	r0, r3
 8100c9c:	3708      	adds	r7, #8
 8100c9e:	46bd      	mov	sp, r7
 8100ca0:	bd80      	pop	{r7, pc}
 8100ca2:	bf00      	nop
 8100ca4:	e000e010 	.word	0xe000e010

08100ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ca8:	b580      	push	{r7, lr}
 8100caa:	b082      	sub	sp, #8
 8100cac:	af00      	add	r7, sp, #0
 8100cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100cb0:	6878      	ldr	r0, [r7, #4]
 8100cb2:	f7ff ff47 	bl	8100b44 <__NVIC_SetPriorityGrouping>
}
 8100cb6:	bf00      	nop
 8100cb8:	3708      	adds	r7, #8
 8100cba:	46bd      	mov	sp, r7
 8100cbc:	bd80      	pop	{r7, pc}

08100cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100cbe:	b580      	push	{r7, lr}
 8100cc0:	b086      	sub	sp, #24
 8100cc2:	af00      	add	r7, sp, #0
 8100cc4:	4603      	mov	r3, r0
 8100cc6:	60b9      	str	r1, [r7, #8]
 8100cc8:	607a      	str	r2, [r7, #4]
 8100cca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100ccc:	f7ff ff5e 	bl	8100b8c <__NVIC_GetPriorityGrouping>
 8100cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100cd2:	687a      	ldr	r2, [r7, #4]
 8100cd4:	68b9      	ldr	r1, [r7, #8]
 8100cd6:	6978      	ldr	r0, [r7, #20]
 8100cd8:	f7ff ff90 	bl	8100bfc <NVIC_EncodePriority>
 8100cdc:	4602      	mov	r2, r0
 8100cde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100ce2:	4611      	mov	r1, r2
 8100ce4:	4618      	mov	r0, r3
 8100ce6:	f7ff ff5f 	bl	8100ba8 <__NVIC_SetPriority>
}
 8100cea:	bf00      	nop
 8100cec:	3718      	adds	r7, #24
 8100cee:	46bd      	mov	sp, r7
 8100cf0:	bd80      	pop	{r7, pc}

08100cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100cf2:	b580      	push	{r7, lr}
 8100cf4:	b082      	sub	sp, #8
 8100cf6:	af00      	add	r7, sp, #0
 8100cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100cfa:	6878      	ldr	r0, [r7, #4]
 8100cfc:	f7ff ffb2 	bl	8100c64 <SysTick_Config>
 8100d00:	4603      	mov	r3, r0
}
 8100d02:	4618      	mov	r0, r3
 8100d04:	3708      	adds	r7, #8
 8100d06:	46bd      	mov	sp, r7
 8100d08:	bd80      	pop	{r7, pc}
	...

08100d0c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100d0c:	b480      	push	{r7}
 8100d0e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100d10:	4b06      	ldr	r3, [pc, #24]	@ (8100d2c <HAL_GetCurrentCPUID+0x20>)
 8100d12:	681b      	ldr	r3, [r3, #0]
 8100d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100d18:	2b70      	cmp	r3, #112	@ 0x70
 8100d1a:	d101      	bne.n	8100d20 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8100d1c:	2303      	movs	r3, #3
 8100d1e:	e000      	b.n	8100d22 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8100d20:	2301      	movs	r3, #1
  }
}
 8100d22:	4618      	mov	r0, r3
 8100d24:	46bd      	mov	sp, r7
 8100d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d2a:	4770      	bx	lr
 8100d2c:	e000ed00 	.word	0xe000ed00

08100d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8100d30:	b480      	push	{r7}
 8100d32:	b089      	sub	sp, #36	@ 0x24
 8100d34:	af00      	add	r7, sp, #0
 8100d36:	6078      	str	r0, [r7, #4]
 8100d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100d3a:	2300      	movs	r3, #0
 8100d3c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100d3e:	4b89      	ldr	r3, [pc, #548]	@ (8100f64 <HAL_GPIO_Init+0x234>)
 8100d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100d42:	e194      	b.n	810106e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100d44:	683b      	ldr	r3, [r7, #0]
 8100d46:	681a      	ldr	r2, [r3, #0]
 8100d48:	2101      	movs	r1, #1
 8100d4a:	69fb      	ldr	r3, [r7, #28]
 8100d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8100d50:	4013      	ands	r3, r2
 8100d52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100d54:	693b      	ldr	r3, [r7, #16]
 8100d56:	2b00      	cmp	r3, #0
 8100d58:	f000 8186 	beq.w	8101068 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100d5c:	683b      	ldr	r3, [r7, #0]
 8100d5e:	685b      	ldr	r3, [r3, #4]
 8100d60:	f003 0303 	and.w	r3, r3, #3
 8100d64:	2b01      	cmp	r3, #1
 8100d66:	d005      	beq.n	8100d74 <HAL_GPIO_Init+0x44>
 8100d68:	683b      	ldr	r3, [r7, #0]
 8100d6a:	685b      	ldr	r3, [r3, #4]
 8100d6c:	f003 0303 	and.w	r3, r3, #3
 8100d70:	2b02      	cmp	r3, #2
 8100d72:	d130      	bne.n	8100dd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100d74:	687b      	ldr	r3, [r7, #4]
 8100d76:	689b      	ldr	r3, [r3, #8]
 8100d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100d7a:	69fb      	ldr	r3, [r7, #28]
 8100d7c:	005b      	lsls	r3, r3, #1
 8100d7e:	2203      	movs	r2, #3
 8100d80:	fa02 f303 	lsl.w	r3, r2, r3
 8100d84:	43db      	mvns	r3, r3
 8100d86:	69ba      	ldr	r2, [r7, #24]
 8100d88:	4013      	ands	r3, r2
 8100d8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100d8c:	683b      	ldr	r3, [r7, #0]
 8100d8e:	68da      	ldr	r2, [r3, #12]
 8100d90:	69fb      	ldr	r3, [r7, #28]
 8100d92:	005b      	lsls	r3, r3, #1
 8100d94:	fa02 f303 	lsl.w	r3, r2, r3
 8100d98:	69ba      	ldr	r2, [r7, #24]
 8100d9a:	4313      	orrs	r3, r2
 8100d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100d9e:	687b      	ldr	r3, [r7, #4]
 8100da0:	69ba      	ldr	r2, [r7, #24]
 8100da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100da4:	687b      	ldr	r3, [r7, #4]
 8100da6:	685b      	ldr	r3, [r3, #4]
 8100da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100daa:	2201      	movs	r2, #1
 8100dac:	69fb      	ldr	r3, [r7, #28]
 8100dae:	fa02 f303 	lsl.w	r3, r2, r3
 8100db2:	43db      	mvns	r3, r3
 8100db4:	69ba      	ldr	r2, [r7, #24]
 8100db6:	4013      	ands	r3, r2
 8100db8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100dba:	683b      	ldr	r3, [r7, #0]
 8100dbc:	685b      	ldr	r3, [r3, #4]
 8100dbe:	091b      	lsrs	r3, r3, #4
 8100dc0:	f003 0201 	and.w	r2, r3, #1
 8100dc4:	69fb      	ldr	r3, [r7, #28]
 8100dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8100dca:	69ba      	ldr	r2, [r7, #24]
 8100dcc:	4313      	orrs	r3, r2
 8100dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100dd0:	687b      	ldr	r3, [r7, #4]
 8100dd2:	69ba      	ldr	r2, [r7, #24]
 8100dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100dd6:	683b      	ldr	r3, [r7, #0]
 8100dd8:	685b      	ldr	r3, [r3, #4]
 8100dda:	f003 0303 	and.w	r3, r3, #3
 8100dde:	2b03      	cmp	r3, #3
 8100de0:	d017      	beq.n	8100e12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100de2:	687b      	ldr	r3, [r7, #4]
 8100de4:	68db      	ldr	r3, [r3, #12]
 8100de6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100de8:	69fb      	ldr	r3, [r7, #28]
 8100dea:	005b      	lsls	r3, r3, #1
 8100dec:	2203      	movs	r2, #3
 8100dee:	fa02 f303 	lsl.w	r3, r2, r3
 8100df2:	43db      	mvns	r3, r3
 8100df4:	69ba      	ldr	r2, [r7, #24]
 8100df6:	4013      	ands	r3, r2
 8100df8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100dfa:	683b      	ldr	r3, [r7, #0]
 8100dfc:	689a      	ldr	r2, [r3, #8]
 8100dfe:	69fb      	ldr	r3, [r7, #28]
 8100e00:	005b      	lsls	r3, r3, #1
 8100e02:	fa02 f303 	lsl.w	r3, r2, r3
 8100e06:	69ba      	ldr	r2, [r7, #24]
 8100e08:	4313      	orrs	r3, r2
 8100e0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100e0c:	687b      	ldr	r3, [r7, #4]
 8100e0e:	69ba      	ldr	r2, [r7, #24]
 8100e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100e12:	683b      	ldr	r3, [r7, #0]
 8100e14:	685b      	ldr	r3, [r3, #4]
 8100e16:	f003 0303 	and.w	r3, r3, #3
 8100e1a:	2b02      	cmp	r3, #2
 8100e1c:	d123      	bne.n	8100e66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100e1e:	69fb      	ldr	r3, [r7, #28]
 8100e20:	08da      	lsrs	r2, r3, #3
 8100e22:	687b      	ldr	r3, [r7, #4]
 8100e24:	3208      	adds	r2, #8
 8100e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100e2c:	69fb      	ldr	r3, [r7, #28]
 8100e2e:	f003 0307 	and.w	r3, r3, #7
 8100e32:	009b      	lsls	r3, r3, #2
 8100e34:	220f      	movs	r2, #15
 8100e36:	fa02 f303 	lsl.w	r3, r2, r3
 8100e3a:	43db      	mvns	r3, r3
 8100e3c:	69ba      	ldr	r2, [r7, #24]
 8100e3e:	4013      	ands	r3, r2
 8100e40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100e42:	683b      	ldr	r3, [r7, #0]
 8100e44:	691a      	ldr	r2, [r3, #16]
 8100e46:	69fb      	ldr	r3, [r7, #28]
 8100e48:	f003 0307 	and.w	r3, r3, #7
 8100e4c:	009b      	lsls	r3, r3, #2
 8100e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8100e52:	69ba      	ldr	r2, [r7, #24]
 8100e54:	4313      	orrs	r3, r2
 8100e56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100e58:	69fb      	ldr	r3, [r7, #28]
 8100e5a:	08da      	lsrs	r2, r3, #3
 8100e5c:	687b      	ldr	r3, [r7, #4]
 8100e5e:	3208      	adds	r2, #8
 8100e60:	69b9      	ldr	r1, [r7, #24]
 8100e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100e66:	687b      	ldr	r3, [r7, #4]
 8100e68:	681b      	ldr	r3, [r3, #0]
 8100e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100e6c:	69fb      	ldr	r3, [r7, #28]
 8100e6e:	005b      	lsls	r3, r3, #1
 8100e70:	2203      	movs	r2, #3
 8100e72:	fa02 f303 	lsl.w	r3, r2, r3
 8100e76:	43db      	mvns	r3, r3
 8100e78:	69ba      	ldr	r2, [r7, #24]
 8100e7a:	4013      	ands	r3, r2
 8100e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100e7e:	683b      	ldr	r3, [r7, #0]
 8100e80:	685b      	ldr	r3, [r3, #4]
 8100e82:	f003 0203 	and.w	r2, r3, #3
 8100e86:	69fb      	ldr	r3, [r7, #28]
 8100e88:	005b      	lsls	r3, r3, #1
 8100e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e8e:	69ba      	ldr	r2, [r7, #24]
 8100e90:	4313      	orrs	r3, r2
 8100e92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100e94:	687b      	ldr	r3, [r7, #4]
 8100e96:	69ba      	ldr	r2, [r7, #24]
 8100e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100e9a:	683b      	ldr	r3, [r7, #0]
 8100e9c:	685b      	ldr	r3, [r3, #4]
 8100e9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8100ea2:	2b00      	cmp	r3, #0
 8100ea4:	f000 80e0 	beq.w	8101068 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8100f68 <HAL_GPIO_Init+0x238>)
 8100eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100eae:	4a2e      	ldr	r2, [pc, #184]	@ (8100f68 <HAL_GPIO_Init+0x238>)
 8100eb0:	f043 0302 	orr.w	r3, r3, #2
 8100eb4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8100f68 <HAL_GPIO_Init+0x238>)
 8100eba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100ebe:	f003 0302 	and.w	r3, r3, #2
 8100ec2:	60fb      	str	r3, [r7, #12]
 8100ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100ec6:	4a29      	ldr	r2, [pc, #164]	@ (8100f6c <HAL_GPIO_Init+0x23c>)
 8100ec8:	69fb      	ldr	r3, [r7, #28]
 8100eca:	089b      	lsrs	r3, r3, #2
 8100ecc:	3302      	adds	r3, #2
 8100ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100ed4:	69fb      	ldr	r3, [r7, #28]
 8100ed6:	f003 0303 	and.w	r3, r3, #3
 8100eda:	009b      	lsls	r3, r3, #2
 8100edc:	220f      	movs	r2, #15
 8100ede:	fa02 f303 	lsl.w	r3, r2, r3
 8100ee2:	43db      	mvns	r3, r3
 8100ee4:	69ba      	ldr	r2, [r7, #24]
 8100ee6:	4013      	ands	r3, r2
 8100ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100eea:	687b      	ldr	r3, [r7, #4]
 8100eec:	4a20      	ldr	r2, [pc, #128]	@ (8100f70 <HAL_GPIO_Init+0x240>)
 8100eee:	4293      	cmp	r3, r2
 8100ef0:	d052      	beq.n	8100f98 <HAL_GPIO_Init+0x268>
 8100ef2:	687b      	ldr	r3, [r7, #4]
 8100ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8100f74 <HAL_GPIO_Init+0x244>)
 8100ef6:	4293      	cmp	r3, r2
 8100ef8:	d031      	beq.n	8100f5e <HAL_GPIO_Init+0x22e>
 8100efa:	687b      	ldr	r3, [r7, #4]
 8100efc:	4a1e      	ldr	r2, [pc, #120]	@ (8100f78 <HAL_GPIO_Init+0x248>)
 8100efe:	4293      	cmp	r3, r2
 8100f00:	d02b      	beq.n	8100f5a <HAL_GPIO_Init+0x22a>
 8100f02:	687b      	ldr	r3, [r7, #4]
 8100f04:	4a1d      	ldr	r2, [pc, #116]	@ (8100f7c <HAL_GPIO_Init+0x24c>)
 8100f06:	4293      	cmp	r3, r2
 8100f08:	d025      	beq.n	8100f56 <HAL_GPIO_Init+0x226>
 8100f0a:	687b      	ldr	r3, [r7, #4]
 8100f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8100f80 <HAL_GPIO_Init+0x250>)
 8100f0e:	4293      	cmp	r3, r2
 8100f10:	d01f      	beq.n	8100f52 <HAL_GPIO_Init+0x222>
 8100f12:	687b      	ldr	r3, [r7, #4]
 8100f14:	4a1b      	ldr	r2, [pc, #108]	@ (8100f84 <HAL_GPIO_Init+0x254>)
 8100f16:	4293      	cmp	r3, r2
 8100f18:	d019      	beq.n	8100f4e <HAL_GPIO_Init+0x21e>
 8100f1a:	687b      	ldr	r3, [r7, #4]
 8100f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8100f88 <HAL_GPIO_Init+0x258>)
 8100f1e:	4293      	cmp	r3, r2
 8100f20:	d013      	beq.n	8100f4a <HAL_GPIO_Init+0x21a>
 8100f22:	687b      	ldr	r3, [r7, #4]
 8100f24:	4a19      	ldr	r2, [pc, #100]	@ (8100f8c <HAL_GPIO_Init+0x25c>)
 8100f26:	4293      	cmp	r3, r2
 8100f28:	d00d      	beq.n	8100f46 <HAL_GPIO_Init+0x216>
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	4a18      	ldr	r2, [pc, #96]	@ (8100f90 <HAL_GPIO_Init+0x260>)
 8100f2e:	4293      	cmp	r3, r2
 8100f30:	d007      	beq.n	8100f42 <HAL_GPIO_Init+0x212>
 8100f32:	687b      	ldr	r3, [r7, #4]
 8100f34:	4a17      	ldr	r2, [pc, #92]	@ (8100f94 <HAL_GPIO_Init+0x264>)
 8100f36:	4293      	cmp	r3, r2
 8100f38:	d101      	bne.n	8100f3e <HAL_GPIO_Init+0x20e>
 8100f3a:	2309      	movs	r3, #9
 8100f3c:	e02d      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f3e:	230a      	movs	r3, #10
 8100f40:	e02b      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f42:	2308      	movs	r3, #8
 8100f44:	e029      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f46:	2307      	movs	r3, #7
 8100f48:	e027      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f4a:	2306      	movs	r3, #6
 8100f4c:	e025      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f4e:	2305      	movs	r3, #5
 8100f50:	e023      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f52:	2304      	movs	r3, #4
 8100f54:	e021      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f56:	2303      	movs	r3, #3
 8100f58:	e01f      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f5a:	2302      	movs	r3, #2
 8100f5c:	e01d      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f5e:	2301      	movs	r3, #1
 8100f60:	e01b      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f62:	bf00      	nop
 8100f64:	580000c0 	.word	0x580000c0
 8100f68:	58024400 	.word	0x58024400
 8100f6c:	58000400 	.word	0x58000400
 8100f70:	58020000 	.word	0x58020000
 8100f74:	58020400 	.word	0x58020400
 8100f78:	58020800 	.word	0x58020800
 8100f7c:	58020c00 	.word	0x58020c00
 8100f80:	58021000 	.word	0x58021000
 8100f84:	58021400 	.word	0x58021400
 8100f88:	58021800 	.word	0x58021800
 8100f8c:	58021c00 	.word	0x58021c00
 8100f90:	58022000 	.word	0x58022000
 8100f94:	58022400 	.word	0x58022400
 8100f98:	2300      	movs	r3, #0
 8100f9a:	69fa      	ldr	r2, [r7, #28]
 8100f9c:	f002 0203 	and.w	r2, r2, #3
 8100fa0:	0092      	lsls	r2, r2, #2
 8100fa2:	4093      	lsls	r3, r2
 8100fa4:	69ba      	ldr	r2, [r7, #24]
 8100fa6:	4313      	orrs	r3, r2
 8100fa8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100faa:	4938      	ldr	r1, [pc, #224]	@ (810108c <HAL_GPIO_Init+0x35c>)
 8100fac:	69fb      	ldr	r3, [r7, #28]
 8100fae:	089b      	lsrs	r3, r3, #2
 8100fb0:	3302      	adds	r3, #2
 8100fb2:	69ba      	ldr	r2, [r7, #24]
 8100fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100fbc:	681b      	ldr	r3, [r3, #0]
 8100fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100fc0:	693b      	ldr	r3, [r7, #16]
 8100fc2:	43db      	mvns	r3, r3
 8100fc4:	69ba      	ldr	r2, [r7, #24]
 8100fc6:	4013      	ands	r3, r2
 8100fc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100fca:	683b      	ldr	r3, [r7, #0]
 8100fcc:	685b      	ldr	r3, [r3, #4]
 8100fce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8100fd2:	2b00      	cmp	r3, #0
 8100fd4:	d003      	beq.n	8100fde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100fd6:	69ba      	ldr	r2, [r7, #24]
 8100fd8:	693b      	ldr	r3, [r7, #16]
 8100fda:	4313      	orrs	r3, r2
 8100fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100fde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100fe2:	69bb      	ldr	r3, [r7, #24]
 8100fe4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100fea:	685b      	ldr	r3, [r3, #4]
 8100fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100fee:	693b      	ldr	r3, [r7, #16]
 8100ff0:	43db      	mvns	r3, r3
 8100ff2:	69ba      	ldr	r2, [r7, #24]
 8100ff4:	4013      	ands	r3, r2
 8100ff6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100ff8:	683b      	ldr	r3, [r7, #0]
 8100ffa:	685b      	ldr	r3, [r3, #4]
 8100ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101000:	2b00      	cmp	r3, #0
 8101002:	d003      	beq.n	810100c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101004:	69ba      	ldr	r2, [r7, #24]
 8101006:	693b      	ldr	r3, [r7, #16]
 8101008:	4313      	orrs	r3, r2
 810100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810100c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101010:	69bb      	ldr	r3, [r7, #24]
 8101012:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101014:	697b      	ldr	r3, [r7, #20]
 8101016:	685b      	ldr	r3, [r3, #4]
 8101018:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810101a:	693b      	ldr	r3, [r7, #16]
 810101c:	43db      	mvns	r3, r3
 810101e:	69ba      	ldr	r2, [r7, #24]
 8101020:	4013      	ands	r3, r2
 8101022:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101024:	683b      	ldr	r3, [r7, #0]
 8101026:	685b      	ldr	r3, [r3, #4]
 8101028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810102c:	2b00      	cmp	r3, #0
 810102e:	d003      	beq.n	8101038 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101030:	69ba      	ldr	r2, [r7, #24]
 8101032:	693b      	ldr	r3, [r7, #16]
 8101034:	4313      	orrs	r3, r2
 8101036:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101038:	697b      	ldr	r3, [r7, #20]
 810103a:	69ba      	ldr	r2, [r7, #24]
 810103c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810103e:	697b      	ldr	r3, [r7, #20]
 8101040:	681b      	ldr	r3, [r3, #0]
 8101042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101044:	693b      	ldr	r3, [r7, #16]
 8101046:	43db      	mvns	r3, r3
 8101048:	69ba      	ldr	r2, [r7, #24]
 810104a:	4013      	ands	r3, r2
 810104c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810104e:	683b      	ldr	r3, [r7, #0]
 8101050:	685b      	ldr	r3, [r3, #4]
 8101052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101056:	2b00      	cmp	r3, #0
 8101058:	d003      	beq.n	8101062 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810105a:	69ba      	ldr	r2, [r7, #24]
 810105c:	693b      	ldr	r3, [r7, #16]
 810105e:	4313      	orrs	r3, r2
 8101060:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101062:	697b      	ldr	r3, [r7, #20]
 8101064:	69ba      	ldr	r2, [r7, #24]
 8101066:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101068:	69fb      	ldr	r3, [r7, #28]
 810106a:	3301      	adds	r3, #1
 810106c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810106e:	683b      	ldr	r3, [r7, #0]
 8101070:	681a      	ldr	r2, [r3, #0]
 8101072:	69fb      	ldr	r3, [r7, #28]
 8101074:	fa22 f303 	lsr.w	r3, r2, r3
 8101078:	2b00      	cmp	r3, #0
 810107a:	f47f ae63 	bne.w	8100d44 <HAL_GPIO_Init+0x14>
  }
}
 810107e:	bf00      	nop
 8101080:	bf00      	nop
 8101082:	3724      	adds	r7, #36	@ 0x24
 8101084:	46bd      	mov	sp, r7
 8101086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810108a:	4770      	bx	lr
 810108c:	58000400 	.word	0x58000400

08101090 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101090:	b480      	push	{r7}
 8101092:	b083      	sub	sp, #12
 8101094:	af00      	add	r7, sp, #0
 8101096:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101098:	4b05      	ldr	r3, [pc, #20]	@ (81010b0 <HAL_HSEM_ActivateNotification+0x20>)
 810109a:	681a      	ldr	r2, [r3, #0]
 810109c:	4904      	ldr	r1, [pc, #16]	@ (81010b0 <HAL_HSEM_ActivateNotification+0x20>)
 810109e:	687b      	ldr	r3, [r7, #4]
 81010a0:	4313      	orrs	r3, r2
 81010a2:	600b      	str	r3, [r1, #0]
#endif
}
 81010a4:	bf00      	nop
 81010a6:	370c      	adds	r7, #12
 81010a8:	46bd      	mov	sp, r7
 81010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ae:	4770      	bx	lr
 81010b0:	58026510 	.word	0x58026510

081010b4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81010b4:	b580      	push	{r7, lr}
 81010b6:	b084      	sub	sp, #16
 81010b8:	af00      	add	r7, sp, #0
 81010ba:	60f8      	str	r0, [r7, #12]
 81010bc:	460b      	mov	r3, r1
 81010be:	607a      	str	r2, [r7, #4]
 81010c0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81010c2:	4b37      	ldr	r3, [pc, #220]	@ (81011a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010c4:	681b      	ldr	r3, [r3, #0]
 81010c6:	f023 0201 	bic.w	r2, r3, #1
 81010ca:	4935      	ldr	r1, [pc, #212]	@ (81011a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010cc:	68fb      	ldr	r3, [r7, #12]
 81010ce:	4313      	orrs	r3, r2
 81010d0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81010d2:	687b      	ldr	r3, [r7, #4]
 81010d4:	2b00      	cmp	r3, #0
 81010d6:	d123      	bne.n	8101120 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81010d8:	f7ff fe18 	bl	8100d0c <HAL_GetCurrentCPUID>
 81010dc:	4603      	mov	r3, r0
 81010de:	2b03      	cmp	r3, #3
 81010e0:	d158      	bne.n	8101194 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81010e2:	4b2f      	ldr	r3, [pc, #188]	@ (81011a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010e4:	691b      	ldr	r3, [r3, #16]
 81010e6:	4a2e      	ldr	r2, [pc, #184]	@ (81011a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010e8:	f023 0301 	bic.w	r3, r3, #1
 81010ec:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81010ee:	4b2d      	ldr	r3, [pc, #180]	@ (81011a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81010f0:	691b      	ldr	r3, [r3, #16]
 81010f2:	4a2c      	ldr	r2, [pc, #176]	@ (81011a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81010f4:	f043 0304 	orr.w	r3, r3, #4
 81010f8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81010fa:	f3bf 8f4f 	dsb	sy
}
 81010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101100:	f3bf 8f6f 	isb	sy
}
 8101104:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101106:	7afb      	ldrb	r3, [r7, #11]
 8101108:	2b01      	cmp	r3, #1
 810110a:	d101      	bne.n	8101110 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810110c:	bf30      	wfi
 810110e:	e000      	b.n	8101112 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101110:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101112:	4b24      	ldr	r3, [pc, #144]	@ (81011a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101114:	691b      	ldr	r3, [r3, #16]
 8101116:	4a23      	ldr	r2, [pc, #140]	@ (81011a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101118:	f023 0304 	bic.w	r3, r3, #4
 810111c:	6113      	str	r3, [r2, #16]
 810111e:	e03c      	b.n	810119a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101120:	687b      	ldr	r3, [r7, #4]
 8101122:	2b01      	cmp	r3, #1
 8101124:	d123      	bne.n	810116e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101126:	f7ff fdf1 	bl	8100d0c <HAL_GetCurrentCPUID>
 810112a:	4603      	mov	r3, r0
 810112c:	2b01      	cmp	r3, #1
 810112e:	d133      	bne.n	8101198 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101130:	4b1b      	ldr	r3, [pc, #108]	@ (81011a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101132:	695b      	ldr	r3, [r3, #20]
 8101134:	4a1a      	ldr	r2, [pc, #104]	@ (81011a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101136:	f023 0302 	bic.w	r3, r3, #2
 810113a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810113c:	4b19      	ldr	r3, [pc, #100]	@ (81011a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810113e:	691b      	ldr	r3, [r3, #16]
 8101140:	4a18      	ldr	r2, [pc, #96]	@ (81011a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101142:	f043 0304 	orr.w	r3, r3, #4
 8101146:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101148:	f3bf 8f4f 	dsb	sy
}
 810114c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810114e:	f3bf 8f6f 	isb	sy
}
 8101152:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101154:	7afb      	ldrb	r3, [r7, #11]
 8101156:	2b01      	cmp	r3, #1
 8101158:	d101      	bne.n	810115e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810115a:	bf30      	wfi
 810115c:	e000      	b.n	8101160 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810115e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101160:	4b10      	ldr	r3, [pc, #64]	@ (81011a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101162:	691b      	ldr	r3, [r3, #16]
 8101164:	4a0f      	ldr	r2, [pc, #60]	@ (81011a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101166:	f023 0304 	bic.w	r3, r3, #4
 810116a:	6113      	str	r3, [r2, #16]
 810116c:	e015      	b.n	810119a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810116e:	f7ff fdcd 	bl	8100d0c <HAL_GetCurrentCPUID>
 8101172:	4603      	mov	r3, r0
 8101174:	2b03      	cmp	r3, #3
 8101176:	d106      	bne.n	8101186 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101178:	4b09      	ldr	r3, [pc, #36]	@ (81011a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810117a:	691b      	ldr	r3, [r3, #16]
 810117c:	4a08      	ldr	r2, [pc, #32]	@ (81011a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810117e:	f023 0304 	bic.w	r3, r3, #4
 8101182:	6113      	str	r3, [r2, #16]
 8101184:	e009      	b.n	810119a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101186:	4b06      	ldr	r3, [pc, #24]	@ (81011a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101188:	695b      	ldr	r3, [r3, #20]
 810118a:	4a05      	ldr	r2, [pc, #20]	@ (81011a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810118c:	f023 0304 	bic.w	r3, r3, #4
 8101190:	6153      	str	r3, [r2, #20]
 8101192:	e002      	b.n	810119a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101194:	bf00      	nop
 8101196:	e000      	b.n	810119a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101198:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810119a:	3710      	adds	r7, #16
 810119c:	46bd      	mov	sp, r7
 810119e:	bd80      	pop	{r7, pc}
 81011a0:	58024800 	.word	0x58024800
 81011a4:	e000ed00 	.word	0xe000ed00

081011a8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81011a8:	b580      	push	{r7, lr}
 81011aa:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81011ac:	f7ff fdae 	bl	8100d0c <HAL_GetCurrentCPUID>
 81011b0:	4603      	mov	r3, r0
 81011b2:	2b03      	cmp	r3, #3
 81011b4:	d101      	bne.n	81011ba <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81011b6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81011b8:	e001      	b.n	81011be <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81011ba:	bf40      	sev
    __WFE ();
 81011bc:	bf20      	wfe
}
 81011be:	bf00      	nop
 81011c0:	bd80      	pop	{r7, pc}
	...

081011c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81011c4:	b480      	push	{r7}
 81011c6:	b089      	sub	sp, #36	@ 0x24
 81011c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81011ca:	4bb3      	ldr	r3, [pc, #716]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011cc:	691b      	ldr	r3, [r3, #16]
 81011ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81011d2:	2b18      	cmp	r3, #24
 81011d4:	f200 8155 	bhi.w	8101482 <HAL_RCC_GetSysClockFreq+0x2be>
 81011d8:	a201      	add	r2, pc, #4	@ (adr r2, 81011e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81011da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81011de:	bf00      	nop
 81011e0:	08101245 	.word	0x08101245
 81011e4:	08101483 	.word	0x08101483
 81011e8:	08101483 	.word	0x08101483
 81011ec:	08101483 	.word	0x08101483
 81011f0:	08101483 	.word	0x08101483
 81011f4:	08101483 	.word	0x08101483
 81011f8:	08101483 	.word	0x08101483
 81011fc:	08101483 	.word	0x08101483
 8101200:	0810126b 	.word	0x0810126b
 8101204:	08101483 	.word	0x08101483
 8101208:	08101483 	.word	0x08101483
 810120c:	08101483 	.word	0x08101483
 8101210:	08101483 	.word	0x08101483
 8101214:	08101483 	.word	0x08101483
 8101218:	08101483 	.word	0x08101483
 810121c:	08101483 	.word	0x08101483
 8101220:	08101271 	.word	0x08101271
 8101224:	08101483 	.word	0x08101483
 8101228:	08101483 	.word	0x08101483
 810122c:	08101483 	.word	0x08101483
 8101230:	08101483 	.word	0x08101483
 8101234:	08101483 	.word	0x08101483
 8101238:	08101483 	.word	0x08101483
 810123c:	08101483 	.word	0x08101483
 8101240:	08101277 	.word	0x08101277
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101244:	4b94      	ldr	r3, [pc, #592]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101246:	681b      	ldr	r3, [r3, #0]
 8101248:	f003 0320 	and.w	r3, r3, #32
 810124c:	2b00      	cmp	r3, #0
 810124e:	d009      	beq.n	8101264 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101250:	4b91      	ldr	r3, [pc, #580]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101252:	681b      	ldr	r3, [r3, #0]
 8101254:	08db      	lsrs	r3, r3, #3
 8101256:	f003 0303 	and.w	r3, r3, #3
 810125a:	4a90      	ldr	r2, [pc, #576]	@ (810149c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810125c:	fa22 f303 	lsr.w	r3, r2, r3
 8101260:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8101262:	e111      	b.n	8101488 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101264:	4b8d      	ldr	r3, [pc, #564]	@ (810149c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101266:	61bb      	str	r3, [r7, #24]
      break;
 8101268:	e10e      	b.n	8101488 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810126a:	4b8d      	ldr	r3, [pc, #564]	@ (81014a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810126c:	61bb      	str	r3, [r7, #24]
      break;
 810126e:	e10b      	b.n	8101488 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101270:	4b8c      	ldr	r3, [pc, #560]	@ (81014a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101272:	61bb      	str	r3, [r7, #24]
      break;
 8101274:	e108      	b.n	8101488 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101276:	4b88      	ldr	r3, [pc, #544]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810127a:	f003 0303 	and.w	r3, r3, #3
 810127e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101280:	4b85      	ldr	r3, [pc, #532]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101284:	091b      	lsrs	r3, r3, #4
 8101286:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810128a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810128c:	4b82      	ldr	r3, [pc, #520]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810128e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101290:	f003 0301 	and.w	r3, r3, #1
 8101294:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8101296:	4b80      	ldr	r3, [pc, #512]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810129a:	08db      	lsrs	r3, r3, #3
 810129c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81012a0:	68fa      	ldr	r2, [r7, #12]
 81012a2:	fb02 f303 	mul.w	r3, r2, r3
 81012a6:	ee07 3a90 	vmov	s15, r3
 81012aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81012b2:	693b      	ldr	r3, [r7, #16]
 81012b4:	2b00      	cmp	r3, #0
 81012b6:	f000 80e1 	beq.w	810147c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 81012ba:	697b      	ldr	r3, [r7, #20]
 81012bc:	2b02      	cmp	r3, #2
 81012be:	f000 8083 	beq.w	81013c8 <HAL_RCC_GetSysClockFreq+0x204>
 81012c2:	697b      	ldr	r3, [r7, #20]
 81012c4:	2b02      	cmp	r3, #2
 81012c6:	f200 80a1 	bhi.w	810140c <HAL_RCC_GetSysClockFreq+0x248>
 81012ca:	697b      	ldr	r3, [r7, #20]
 81012cc:	2b00      	cmp	r3, #0
 81012ce:	d003      	beq.n	81012d8 <HAL_RCC_GetSysClockFreq+0x114>
 81012d0:	697b      	ldr	r3, [r7, #20]
 81012d2:	2b01      	cmp	r3, #1
 81012d4:	d056      	beq.n	8101384 <HAL_RCC_GetSysClockFreq+0x1c0>
 81012d6:	e099      	b.n	810140c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81012d8:	4b6f      	ldr	r3, [pc, #444]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012da:	681b      	ldr	r3, [r3, #0]
 81012dc:	f003 0320 	and.w	r3, r3, #32
 81012e0:	2b00      	cmp	r3, #0
 81012e2:	d02d      	beq.n	8101340 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81012e4:	4b6c      	ldr	r3, [pc, #432]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012e6:	681b      	ldr	r3, [r3, #0]
 81012e8:	08db      	lsrs	r3, r3, #3
 81012ea:	f003 0303 	and.w	r3, r3, #3
 81012ee:	4a6b      	ldr	r2, [pc, #428]	@ (810149c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81012f0:	fa22 f303 	lsr.w	r3, r2, r3
 81012f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81012f6:	687b      	ldr	r3, [r7, #4]
 81012f8:	ee07 3a90 	vmov	s15, r3
 81012fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101300:	693b      	ldr	r3, [r7, #16]
 8101302:	ee07 3a90 	vmov	s15, r3
 8101306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810130a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810130e:	4b62      	ldr	r3, [pc, #392]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101316:	ee07 3a90 	vmov	s15, r3
 810131a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810131e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101322:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81014a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810132a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810132e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101336:	ee67 7a27 	vmul.f32	s15, s14, s15
 810133a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810133e:	e087      	b.n	8101450 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101340:	693b      	ldr	r3, [r7, #16]
 8101342:	ee07 3a90 	vmov	s15, r3
 8101346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810134a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81014ac <HAL_RCC_GetSysClockFreq+0x2e8>
 810134e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101352:	4b51      	ldr	r3, [pc, #324]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810135a:	ee07 3a90 	vmov	s15, r3
 810135e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101362:	ed97 6a02 	vldr	s12, [r7, #8]
 8101366:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81014a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810136a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810136e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810137e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101382:	e065      	b.n	8101450 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101384:	693b      	ldr	r3, [r7, #16]
 8101386:	ee07 3a90 	vmov	s15, r3
 810138a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810138e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81014b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101396:	4b40      	ldr	r3, [pc, #256]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810139a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810139e:	ee07 3a90 	vmov	s15, r3
 81013a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81013aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81014a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81013ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81013b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81013b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81013ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81013be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81013c6:	e043      	b.n	8101450 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81013c8:	693b      	ldr	r3, [r7, #16]
 81013ca:	ee07 3a90 	vmov	s15, r3
 81013ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81014b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 81013d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013da:	4b2f      	ldr	r3, [pc, #188]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81013de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81013e2:	ee07 3a90 	vmov	s15, r3
 81013e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81013ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81014a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81013f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81013f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81013fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81013fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101406:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810140a:	e021      	b.n	8101450 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810140c:	693b      	ldr	r3, [r7, #16]
 810140e:	ee07 3a90 	vmov	s15, r3
 8101412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101416:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81014b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810141a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810141e:	4b1e      	ldr	r3, [pc, #120]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101426:	ee07 3a90 	vmov	s15, r3
 810142a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810142e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101432:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81014a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810143a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810143e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101446:	ee67 7a27 	vmul.f32	s15, s14, s15
 810144a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810144e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101450:	4b11      	ldr	r3, [pc, #68]	@ (8101498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101454:	0a5b      	lsrs	r3, r3, #9
 8101456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810145a:	3301      	adds	r3, #1
 810145c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810145e:	683b      	ldr	r3, [r7, #0]
 8101460:	ee07 3a90 	vmov	s15, r3
 8101464:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101468:	edd7 6a07 	vldr	s13, [r7, #28]
 810146c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101474:	ee17 3a90 	vmov	r3, s15
 8101478:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810147a:	e005      	b.n	8101488 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810147c:	2300      	movs	r3, #0
 810147e:	61bb      	str	r3, [r7, #24]
      break;
 8101480:	e002      	b.n	8101488 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8101482:	4b07      	ldr	r3, [pc, #28]	@ (81014a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101484:	61bb      	str	r3, [r7, #24]
      break;
 8101486:	bf00      	nop
  }

  return sysclockfreq;
 8101488:	69bb      	ldr	r3, [r7, #24]
}
 810148a:	4618      	mov	r0, r3
 810148c:	3724      	adds	r7, #36	@ 0x24
 810148e:	46bd      	mov	sp, r7
 8101490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101494:	4770      	bx	lr
 8101496:	bf00      	nop
 8101498:	58024400 	.word	0x58024400
 810149c:	03d09000 	.word	0x03d09000
 81014a0:	003d0900 	.word	0x003d0900
 81014a4:	017d7840 	.word	0x017d7840
 81014a8:	46000000 	.word	0x46000000
 81014ac:	4c742400 	.word	0x4c742400
 81014b0:	4a742400 	.word	0x4a742400
 81014b4:	4bbebc20 	.word	0x4bbebc20

081014b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81014b8:	b580      	push	{r7, lr}
 81014ba:	b082      	sub	sp, #8
 81014bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81014be:	f7ff fe81 	bl	81011c4 <HAL_RCC_GetSysClockFreq>
 81014c2:	4602      	mov	r2, r0
 81014c4:	4b11      	ldr	r3, [pc, #68]	@ (810150c <HAL_RCC_GetHCLKFreq+0x54>)
 81014c6:	699b      	ldr	r3, [r3, #24]
 81014c8:	0a1b      	lsrs	r3, r3, #8
 81014ca:	f003 030f 	and.w	r3, r3, #15
 81014ce:	4910      	ldr	r1, [pc, #64]	@ (8101510 <HAL_RCC_GetHCLKFreq+0x58>)
 81014d0:	5ccb      	ldrb	r3, [r1, r3]
 81014d2:	f003 031f 	and.w	r3, r3, #31
 81014d6:	fa22 f303 	lsr.w	r3, r2, r3
 81014da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81014dc:	4b0b      	ldr	r3, [pc, #44]	@ (810150c <HAL_RCC_GetHCLKFreq+0x54>)
 81014de:	699b      	ldr	r3, [r3, #24]
 81014e0:	f003 030f 	and.w	r3, r3, #15
 81014e4:	4a0a      	ldr	r2, [pc, #40]	@ (8101510 <HAL_RCC_GetHCLKFreq+0x58>)
 81014e6:	5cd3      	ldrb	r3, [r2, r3]
 81014e8:	f003 031f 	and.w	r3, r3, #31
 81014ec:	687a      	ldr	r2, [r7, #4]
 81014ee:	fa22 f303 	lsr.w	r3, r2, r3
 81014f2:	4a08      	ldr	r2, [pc, #32]	@ (8101514 <HAL_RCC_GetHCLKFreq+0x5c>)
 81014f4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81014f6:	4b07      	ldr	r3, [pc, #28]	@ (8101514 <HAL_RCC_GetHCLKFreq+0x5c>)
 81014f8:	681b      	ldr	r3, [r3, #0]
 81014fa:	4a07      	ldr	r2, [pc, #28]	@ (8101518 <HAL_RCC_GetHCLKFreq+0x60>)
 81014fc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81014fe:	4b05      	ldr	r3, [pc, #20]	@ (8101514 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101500:	681b      	ldr	r3, [r3, #0]
}
 8101502:	4618      	mov	r0, r3
 8101504:	3708      	adds	r7, #8
 8101506:	46bd      	mov	sp, r7
 8101508:	bd80      	pop	{r7, pc}
 810150a:	bf00      	nop
 810150c:	58024400 	.word	0x58024400
 8101510:	08104864 	.word	0x08104864
 8101514:	10000004 	.word	0x10000004
 8101518:	10000000 	.word	0x10000000

0810151c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810151c:	b580      	push	{r7, lr}
 810151e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101520:	f7ff ffca 	bl	81014b8 <HAL_RCC_GetHCLKFreq>
 8101524:	4602      	mov	r2, r0
 8101526:	4b06      	ldr	r3, [pc, #24]	@ (8101540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101528:	69db      	ldr	r3, [r3, #28]
 810152a:	091b      	lsrs	r3, r3, #4
 810152c:	f003 0307 	and.w	r3, r3, #7
 8101530:	4904      	ldr	r1, [pc, #16]	@ (8101544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8101532:	5ccb      	ldrb	r3, [r1, r3]
 8101534:	f003 031f 	and.w	r3, r3, #31
 8101538:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810153c:	4618      	mov	r0, r3
 810153e:	bd80      	pop	{r7, pc}
 8101540:	58024400 	.word	0x58024400
 8101544:	08104864 	.word	0x08104864

08101548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101548:	b580      	push	{r7, lr}
 810154a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810154c:	f7ff ffb4 	bl	81014b8 <HAL_RCC_GetHCLKFreq>
 8101550:	4602      	mov	r2, r0
 8101552:	4b06      	ldr	r3, [pc, #24]	@ (810156c <HAL_RCC_GetPCLK2Freq+0x24>)
 8101554:	69db      	ldr	r3, [r3, #28]
 8101556:	0a1b      	lsrs	r3, r3, #8
 8101558:	f003 0307 	and.w	r3, r3, #7
 810155c:	4904      	ldr	r1, [pc, #16]	@ (8101570 <HAL_RCC_GetPCLK2Freq+0x28>)
 810155e:	5ccb      	ldrb	r3, [r1, r3]
 8101560:	f003 031f 	and.w	r3, r3, #31
 8101564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101568:	4618      	mov	r0, r3
 810156a:	bd80      	pop	{r7, pc}
 810156c:	58024400 	.word	0x58024400
 8101570:	08104864 	.word	0x08104864

08101574 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101578:	b0ca      	sub	sp, #296	@ 0x128
 810157a:	af00      	add	r7, sp, #0
 810157c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101580:	2300      	movs	r3, #0
 8101582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101586:	2300      	movs	r3, #0
 8101588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810158c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101594:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8101598:	2500      	movs	r5, #0
 810159a:	ea54 0305 	orrs.w	r3, r4, r5
 810159e:	d049      	beq.n	8101634 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81015a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81015a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81015a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81015aa:	d02f      	beq.n	810160c <HAL_RCCEx_PeriphCLKConfig+0x98>
 81015ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81015b0:	d828      	bhi.n	8101604 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81015b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81015b6:	d01a      	beq.n	81015ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81015b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81015bc:	d822      	bhi.n	8101604 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81015be:	2b00      	cmp	r3, #0
 81015c0:	d003      	beq.n	81015ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 81015c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81015c6:	d007      	beq.n	81015d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81015c8:	e01c      	b.n	8101604 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81015ca:	4bb8      	ldr	r3, [pc, #736]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81015cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81015ce:	4ab7      	ldr	r2, [pc, #732]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81015d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81015d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81015d6:	e01a      	b.n	810160e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81015d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81015dc:	3308      	adds	r3, #8
 81015de:	2102      	movs	r1, #2
 81015e0:	4618      	mov	r0, r3
 81015e2:	f001 fc8f 	bl	8102f04 <RCCEx_PLL2_Config>
 81015e6:	4603      	mov	r3, r0
 81015e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81015ec:	e00f      	b.n	810160e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81015ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81015f2:	3328      	adds	r3, #40	@ 0x28
 81015f4:	2102      	movs	r1, #2
 81015f6:	4618      	mov	r0, r3
 81015f8:	f001 fd36 	bl	8103068 <RCCEx_PLL3_Config>
 81015fc:	4603      	mov	r3, r0
 81015fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101602:	e004      	b.n	810160e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101604:	2301      	movs	r3, #1
 8101606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810160a:	e000      	b.n	810160e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810160c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810160e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101612:	2b00      	cmp	r3, #0
 8101614:	d10a      	bne.n	810162c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101616:	4ba5      	ldr	r3, [pc, #660]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810161a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810161e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101624:	4aa1      	ldr	r2, [pc, #644]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101626:	430b      	orrs	r3, r1
 8101628:	6513      	str	r3, [r2, #80]	@ 0x50
 810162a:	e003      	b.n	8101634 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810162c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101638:	e9d3 2300 	ldrd	r2, r3, [r3]
 810163c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8101640:	f04f 0900 	mov.w	r9, #0
 8101644:	ea58 0309 	orrs.w	r3, r8, r9
 8101648:	d047      	beq.n	81016da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810164a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810164e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101650:	2b04      	cmp	r3, #4
 8101652:	d82a      	bhi.n	81016aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8101654:	a201      	add	r2, pc, #4	@ (adr r2, 810165c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8101656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810165a:	bf00      	nop
 810165c:	08101671 	.word	0x08101671
 8101660:	0810167f 	.word	0x0810167f
 8101664:	08101695 	.word	0x08101695
 8101668:	081016b3 	.word	0x081016b3
 810166c:	081016b3 	.word	0x081016b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101670:	4b8e      	ldr	r3, [pc, #568]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101674:	4a8d      	ldr	r2, [pc, #564]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810167a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810167c:	e01a      	b.n	81016b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810167e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101682:	3308      	adds	r3, #8
 8101684:	2100      	movs	r1, #0
 8101686:	4618      	mov	r0, r3
 8101688:	f001 fc3c 	bl	8102f04 <RCCEx_PLL2_Config>
 810168c:	4603      	mov	r3, r0
 810168e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101692:	e00f      	b.n	81016b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101698:	3328      	adds	r3, #40	@ 0x28
 810169a:	2100      	movs	r1, #0
 810169c:	4618      	mov	r0, r3
 810169e:	f001 fce3 	bl	8103068 <RCCEx_PLL3_Config>
 81016a2:	4603      	mov	r3, r0
 81016a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81016a8:	e004      	b.n	81016b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81016aa:	2301      	movs	r3, #1
 81016ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81016b0:	e000      	b.n	81016b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81016b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81016b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81016b8:	2b00      	cmp	r3, #0
 81016ba:	d10a      	bne.n	81016d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81016bc:	4b7b      	ldr	r3, [pc, #492]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81016c0:	f023 0107 	bic.w	r1, r3, #7
 81016c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81016ca:	4a78      	ldr	r2, [pc, #480]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016cc:	430b      	orrs	r3, r1
 81016ce:	6513      	str	r3, [r2, #80]	@ 0x50
 81016d0:	e003      	b.n	81016da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81016d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81016d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81016da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81016e6:	f04f 0b00 	mov.w	fp, #0
 81016ea:	ea5a 030b 	orrs.w	r3, sl, fp
 81016ee:	d04c      	beq.n	810178a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81016f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81016f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81016f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81016fa:	d030      	beq.n	810175e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81016fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101700:	d829      	bhi.n	8101756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101702:	2bc0      	cmp	r3, #192	@ 0xc0
 8101704:	d02d      	beq.n	8101762 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8101706:	2bc0      	cmp	r3, #192	@ 0xc0
 8101708:	d825      	bhi.n	8101756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810170a:	2b80      	cmp	r3, #128	@ 0x80
 810170c:	d018      	beq.n	8101740 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810170e:	2b80      	cmp	r3, #128	@ 0x80
 8101710:	d821      	bhi.n	8101756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101712:	2b00      	cmp	r3, #0
 8101714:	d002      	beq.n	810171c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8101716:	2b40      	cmp	r3, #64	@ 0x40
 8101718:	d007      	beq.n	810172a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810171a:	e01c      	b.n	8101756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810171c:	4b63      	ldr	r3, [pc, #396]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810171e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101720:	4a62      	ldr	r2, [pc, #392]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101728:	e01c      	b.n	8101764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810172a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810172e:	3308      	adds	r3, #8
 8101730:	2100      	movs	r1, #0
 8101732:	4618      	mov	r0, r3
 8101734:	f001 fbe6 	bl	8102f04 <RCCEx_PLL2_Config>
 8101738:	4603      	mov	r3, r0
 810173a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810173e:	e011      	b.n	8101764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101744:	3328      	adds	r3, #40	@ 0x28
 8101746:	2100      	movs	r1, #0
 8101748:	4618      	mov	r0, r3
 810174a:	f001 fc8d 	bl	8103068 <RCCEx_PLL3_Config>
 810174e:	4603      	mov	r3, r0
 8101750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101754:	e006      	b.n	8101764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101756:	2301      	movs	r3, #1
 8101758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810175c:	e002      	b.n	8101764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810175e:	bf00      	nop
 8101760:	e000      	b.n	8101764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101768:	2b00      	cmp	r3, #0
 810176a:	d10a      	bne.n	8101782 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810176c:	4b4f      	ldr	r3, [pc, #316]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810176e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101770:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8101774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810177a:	4a4c      	ldr	r2, [pc, #304]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810177c:	430b      	orrs	r3, r1
 810177e:	6513      	str	r3, [r2, #80]	@ 0x50
 8101780:	e003      	b.n	810178a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810178a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101792:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8101796:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810179a:	2300      	movs	r3, #0
 810179c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81017a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81017a4:	460b      	mov	r3, r1
 81017a6:	4313      	orrs	r3, r2
 81017a8:	d053      	beq.n	8101852 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81017aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81017ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81017b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81017b6:	d035      	beq.n	8101824 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81017b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81017bc:	d82e      	bhi.n	810181c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81017be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81017c2:	d031      	beq.n	8101828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81017c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81017c8:	d828      	bhi.n	810181c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81017ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81017ce:	d01a      	beq.n	8101806 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81017d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81017d4:	d822      	bhi.n	810181c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81017d6:	2b00      	cmp	r3, #0
 81017d8:	d003      	beq.n	81017e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81017da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81017de:	d007      	beq.n	81017f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81017e0:	e01c      	b.n	810181c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81017e2:	4b32      	ldr	r3, [pc, #200]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81017e6:	4a31      	ldr	r2, [pc, #196]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81017ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81017ee:	e01c      	b.n	810182a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81017f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81017f4:	3308      	adds	r3, #8
 81017f6:	2100      	movs	r1, #0
 81017f8:	4618      	mov	r0, r3
 81017fa:	f001 fb83 	bl	8102f04 <RCCEx_PLL2_Config>
 81017fe:	4603      	mov	r3, r0
 8101800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101804:	e011      	b.n	810182a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810180a:	3328      	adds	r3, #40	@ 0x28
 810180c:	2100      	movs	r1, #0
 810180e:	4618      	mov	r0, r3
 8101810:	f001 fc2a 	bl	8103068 <RCCEx_PLL3_Config>
 8101814:	4603      	mov	r3, r0
 8101816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810181a:	e006      	b.n	810182a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810181c:	2301      	movs	r3, #1
 810181e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101822:	e002      	b.n	810182a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101824:	bf00      	nop
 8101826:	e000      	b.n	810182a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101828:	bf00      	nop
    }

    if (ret == HAL_OK)
 810182a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810182e:	2b00      	cmp	r3, #0
 8101830:	d10b      	bne.n	810184a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101832:	4b1e      	ldr	r3, [pc, #120]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101836:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810183a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810183e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101842:	4a1a      	ldr	r2, [pc, #104]	@ (81018ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101844:	430b      	orrs	r3, r1
 8101846:	6593      	str	r3, [r2, #88]	@ 0x58
 8101848:	e003      	b.n	8101852 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810184a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810184e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101856:	e9d3 2300 	ldrd	r2, r3, [r3]
 810185a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810185e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8101862:	2300      	movs	r3, #0
 8101864:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8101868:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810186c:	460b      	mov	r3, r1
 810186e:	4313      	orrs	r3, r2
 8101870:	d056      	beq.n	8101920 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8101872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101876:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810187a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810187e:	d038      	beq.n	81018f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8101880:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101884:	d831      	bhi.n	81018ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101886:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810188a:	d034      	beq.n	81018f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810188c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8101890:	d82b      	bhi.n	81018ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101896:	d01d      	beq.n	81018d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8101898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810189c:	d825      	bhi.n	81018ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 810189e:	2b00      	cmp	r3, #0
 81018a0:	d006      	beq.n	81018b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81018a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81018a6:	d00a      	beq.n	81018be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81018a8:	e01f      	b.n	81018ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 81018aa:	bf00      	nop
 81018ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81018b0:	4ba2      	ldr	r3, [pc, #648]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81018b4:	4aa1      	ldr	r2, [pc, #644]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81018b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81018ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81018bc:	e01c      	b.n	81018f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81018be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81018c2:	3308      	adds	r3, #8
 81018c4:	2100      	movs	r1, #0
 81018c6:	4618      	mov	r0, r3
 81018c8:	f001 fb1c 	bl	8102f04 <RCCEx_PLL2_Config>
 81018cc:	4603      	mov	r3, r0
 81018ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81018d2:	e011      	b.n	81018f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81018d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81018d8:	3328      	adds	r3, #40	@ 0x28
 81018da:	2100      	movs	r1, #0
 81018dc:	4618      	mov	r0, r3
 81018de:	f001 fbc3 	bl	8103068 <RCCEx_PLL3_Config>
 81018e2:	4603      	mov	r3, r0
 81018e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81018e8:	e006      	b.n	81018f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81018ea:	2301      	movs	r3, #1
 81018ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81018f0:	e002      	b.n	81018f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81018f2:	bf00      	nop
 81018f4:	e000      	b.n	81018f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81018f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81018f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81018fc:	2b00      	cmp	r3, #0
 81018fe:	d10b      	bne.n	8101918 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101900:	4b8e      	ldr	r3, [pc, #568]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101904:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8101908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810190c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101910:	4a8a      	ldr	r2, [pc, #552]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101912:	430b      	orrs	r3, r1
 8101914:	6593      	str	r3, [r2, #88]	@ 0x58
 8101916:	e003      	b.n	8101920 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810191c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101928:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810192c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8101930:	2300      	movs	r3, #0
 8101932:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8101936:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810193a:	460b      	mov	r3, r1
 810193c:	4313      	orrs	r3, r2
 810193e:	d03a      	beq.n	81019b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8101940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101946:	2b30      	cmp	r3, #48	@ 0x30
 8101948:	d01f      	beq.n	810198a <HAL_RCCEx_PeriphCLKConfig+0x416>
 810194a:	2b30      	cmp	r3, #48	@ 0x30
 810194c:	d819      	bhi.n	8101982 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810194e:	2b20      	cmp	r3, #32
 8101950:	d00c      	beq.n	810196c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8101952:	2b20      	cmp	r3, #32
 8101954:	d815      	bhi.n	8101982 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101956:	2b00      	cmp	r3, #0
 8101958:	d019      	beq.n	810198e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810195a:	2b10      	cmp	r3, #16
 810195c:	d111      	bne.n	8101982 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810195e:	4b77      	ldr	r3, [pc, #476]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101962:	4a76      	ldr	r2, [pc, #472]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101968:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810196a:	e011      	b.n	8101990 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810196c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101970:	3308      	adds	r3, #8
 8101972:	2102      	movs	r1, #2
 8101974:	4618      	mov	r0, r3
 8101976:	f001 fac5 	bl	8102f04 <RCCEx_PLL2_Config>
 810197a:	4603      	mov	r3, r0
 810197c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101980:	e006      	b.n	8101990 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101982:	2301      	movs	r3, #1
 8101984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101988:	e002      	b.n	8101990 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810198a:	bf00      	nop
 810198c:	e000      	b.n	8101990 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810198e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101994:	2b00      	cmp	r3, #0
 8101996:	d10a      	bne.n	81019ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101998:	4b68      	ldr	r3, [pc, #416]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810199a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810199c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 81019a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81019a6:	4a65      	ldr	r2, [pc, #404]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81019a8:	430b      	orrs	r3, r1
 81019aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81019ac:	e003      	b.n	81019b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81019ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81019b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81019b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81019be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81019c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81019c6:	2300      	movs	r3, #0
 81019c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81019cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81019d0:	460b      	mov	r3, r1
 81019d2:	4313      	orrs	r3, r2
 81019d4:	d051      	beq.n	8101a7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81019d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81019da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81019dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81019e0:	d035      	beq.n	8101a4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81019e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81019e6:	d82e      	bhi.n	8101a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81019e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81019ec:	d031      	beq.n	8101a52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81019ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81019f2:	d828      	bhi.n	8101a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81019f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81019f8:	d01a      	beq.n	8101a30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81019fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81019fe:	d822      	bhi.n	8101a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101a00:	2b00      	cmp	r3, #0
 8101a02:	d003      	beq.n	8101a0c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8101a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8101a08:	d007      	beq.n	8101a1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8101a0a:	e01c      	b.n	8101a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101a10:	4a4a      	ldr	r2, [pc, #296]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101a18:	e01c      	b.n	8101a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a1e:	3308      	adds	r3, #8
 8101a20:	2100      	movs	r1, #0
 8101a22:	4618      	mov	r0, r3
 8101a24:	f001 fa6e 	bl	8102f04 <RCCEx_PLL2_Config>
 8101a28:	4603      	mov	r3, r0
 8101a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101a2e:	e011      	b.n	8101a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a34:	3328      	adds	r3, #40	@ 0x28
 8101a36:	2100      	movs	r1, #0
 8101a38:	4618      	mov	r0, r3
 8101a3a:	f001 fb15 	bl	8103068 <RCCEx_PLL3_Config>
 8101a3e:	4603      	mov	r3, r0
 8101a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101a44:	e006      	b.n	8101a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101a46:	2301      	movs	r3, #1
 8101a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101a4c:	e002      	b.n	8101a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101a4e:	bf00      	nop
 8101a50:	e000      	b.n	8101a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101a58:	2b00      	cmp	r3, #0
 8101a5a:	d10a      	bne.n	8101a72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101a5c:	4b37      	ldr	r3, [pc, #220]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101a60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8101a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101a6a:	4a34      	ldr	r2, [pc, #208]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a6c:	430b      	orrs	r3, r1
 8101a6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8101a70:	e003      	b.n	8101a7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8101a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8101a8a:	2300      	movs	r3, #0
 8101a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8101a90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8101a94:	460b      	mov	r3, r1
 8101a96:	4313      	orrs	r3, r2
 8101a98:	d056      	beq.n	8101b48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8101a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101aa4:	d033      	beq.n	8101b0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101aa6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101aaa:	d82c      	bhi.n	8101b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101aac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101ab0:	d02f      	beq.n	8101b12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8101ab2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101ab6:	d826      	bhi.n	8101b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101ab8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101abc:	d02b      	beq.n	8101b16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8101abe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101ac2:	d820      	bhi.n	8101b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101ac8:	d012      	beq.n	8101af0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8101aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101ace:	d81a      	bhi.n	8101b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101ad0:	2b00      	cmp	r3, #0
 8101ad2:	d022      	beq.n	8101b1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8101ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101ad8:	d115      	bne.n	8101b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ade:	3308      	adds	r3, #8
 8101ae0:	2101      	movs	r1, #1
 8101ae2:	4618      	mov	r0, r3
 8101ae4:	f001 fa0e 	bl	8102f04 <RCCEx_PLL2_Config>
 8101ae8:	4603      	mov	r3, r0
 8101aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101aee:	e015      	b.n	8101b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101af4:	3328      	adds	r3, #40	@ 0x28
 8101af6:	2101      	movs	r1, #1
 8101af8:	4618      	mov	r0, r3
 8101afa:	f001 fab5 	bl	8103068 <RCCEx_PLL3_Config>
 8101afe:	4603      	mov	r3, r0
 8101b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101b04:	e00a      	b.n	8101b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101b06:	2301      	movs	r3, #1
 8101b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101b0c:	e006      	b.n	8101b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b0e:	bf00      	nop
 8101b10:	e004      	b.n	8101b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b12:	bf00      	nop
 8101b14:	e002      	b.n	8101b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b16:	bf00      	nop
 8101b18:	e000      	b.n	8101b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101b20:	2b00      	cmp	r3, #0
 8101b22:	d10d      	bne.n	8101b40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101b24:	4b05      	ldr	r3, [pc, #20]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101b28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8101b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101b32:	4a02      	ldr	r2, [pc, #8]	@ (8101b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101b34:	430b      	orrs	r3, r1
 8101b36:	6513      	str	r3, [r2, #80]	@ 0x50
 8101b38:	e006      	b.n	8101b48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8101b3a:	bf00      	nop
 8101b3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101b44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8101b54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8101b58:	2300      	movs	r3, #0
 8101b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8101b5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8101b62:	460b      	mov	r3, r1
 8101b64:	4313      	orrs	r3, r2
 8101b66:	d055      	beq.n	8101c14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8101b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8101b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101b74:	d033      	beq.n	8101bde <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8101b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101b7a:	d82c      	bhi.n	8101bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101b80:	d02f      	beq.n	8101be2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8101b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101b86:	d826      	bhi.n	8101bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101b88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101b8c:	d02b      	beq.n	8101be6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8101b8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101b92:	d820      	bhi.n	8101bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101b98:	d012      	beq.n	8101bc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8101b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101b9e:	d81a      	bhi.n	8101bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101ba0:	2b00      	cmp	r3, #0
 8101ba2:	d022      	beq.n	8101bea <HAL_RCCEx_PeriphCLKConfig+0x676>
 8101ba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101ba8:	d115      	bne.n	8101bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bae:	3308      	adds	r3, #8
 8101bb0:	2101      	movs	r1, #1
 8101bb2:	4618      	mov	r0, r3
 8101bb4:	f001 f9a6 	bl	8102f04 <RCCEx_PLL2_Config>
 8101bb8:	4603      	mov	r3, r0
 8101bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101bbe:	e015      	b.n	8101bec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bc4:	3328      	adds	r3, #40	@ 0x28
 8101bc6:	2101      	movs	r1, #1
 8101bc8:	4618      	mov	r0, r3
 8101bca:	f001 fa4d 	bl	8103068 <RCCEx_PLL3_Config>
 8101bce:	4603      	mov	r3, r0
 8101bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101bd4:	e00a      	b.n	8101bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8101bd6:	2301      	movs	r3, #1
 8101bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101bdc:	e006      	b.n	8101bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101bde:	bf00      	nop
 8101be0:	e004      	b.n	8101bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101be2:	bf00      	nop
 8101be4:	e002      	b.n	8101bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101be6:	bf00      	nop
 8101be8:	e000      	b.n	8101bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101bf0:	2b00      	cmp	r3, #0
 8101bf2:	d10b      	bne.n	8101c0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101bf4:	4ba4      	ldr	r3, [pc, #656]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101bf8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8101bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8101c04:	4aa0      	ldr	r2, [pc, #640]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101c06:	430b      	orrs	r3, r1
 8101c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8101c0a:	e003      	b.n	8101c14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8101c20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8101c24:	2300      	movs	r3, #0
 8101c26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8101c2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8101c2e:	460b      	mov	r3, r1
 8101c30:	4313      	orrs	r3, r2
 8101c32:	d037      	beq.n	8101ca4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8101c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101c3e:	d00e      	beq.n	8101c5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8101c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101c44:	d816      	bhi.n	8101c74 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8101c46:	2b00      	cmp	r3, #0
 8101c48:	d018      	beq.n	8101c7c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8101c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101c4e:	d111      	bne.n	8101c74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c50:	4b8d      	ldr	r3, [pc, #564]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101c54:	4a8c      	ldr	r2, [pc, #560]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101c5c:	e00f      	b.n	8101c7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c62:	3308      	adds	r3, #8
 8101c64:	2101      	movs	r1, #1
 8101c66:	4618      	mov	r0, r3
 8101c68:	f001 f94c 	bl	8102f04 <RCCEx_PLL2_Config>
 8101c6c:	4603      	mov	r3, r0
 8101c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101c72:	e004      	b.n	8101c7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101c74:	2301      	movs	r3, #1
 8101c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101c7a:	e000      	b.n	8101c7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8101c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c82:	2b00      	cmp	r3, #0
 8101c84:	d10a      	bne.n	8101c9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101c86:	4b80      	ldr	r3, [pc, #512]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101c8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8101c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101c94:	4a7c      	ldr	r2, [pc, #496]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101c96:	430b      	orrs	r3, r1
 8101c98:	6513      	str	r3, [r2, #80]	@ 0x50
 8101c9a:	e003      	b.n	8101ca4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101cac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8101cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8101cb4:	2300      	movs	r3, #0
 8101cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8101cba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8101cbe:	460b      	mov	r3, r1
 8101cc0:	4313      	orrs	r3, r2
 8101cc2:	d039      	beq.n	8101d38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8101cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101cca:	2b03      	cmp	r3, #3
 8101ccc:	d81c      	bhi.n	8101d08 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8101cce:	a201      	add	r2, pc, #4	@ (adr r2, 8101cd4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8101cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101cd4:	08101d11 	.word	0x08101d11
 8101cd8:	08101ce5 	.word	0x08101ce5
 8101cdc:	08101cf3 	.word	0x08101cf3
 8101ce0:	08101d11 	.word	0x08101d11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101ce4:	4b68      	ldr	r3, [pc, #416]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101ce8:	4a67      	ldr	r2, [pc, #412]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101cf0:	e00f      	b.n	8101d12 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cf6:	3308      	adds	r3, #8
 8101cf8:	2102      	movs	r1, #2
 8101cfa:	4618      	mov	r0, r3
 8101cfc:	f001 f902 	bl	8102f04 <RCCEx_PLL2_Config>
 8101d00:	4603      	mov	r3, r0
 8101d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101d06:	e004      	b.n	8101d12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101d08:	2301      	movs	r3, #1
 8101d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101d0e:	e000      	b.n	8101d12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8101d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d16:	2b00      	cmp	r3, #0
 8101d18:	d10a      	bne.n	8101d30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101d1e:	f023 0103 	bic.w	r1, r3, #3
 8101d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101d28:	4a57      	ldr	r2, [pc, #348]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d2a:	430b      	orrs	r3, r1
 8101d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101d2e:	e003      	b.n	8101d38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d40:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8101d44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8101d48:	2300      	movs	r3, #0
 8101d4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8101d4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8101d52:	460b      	mov	r3, r1
 8101d54:	4313      	orrs	r3, r2
 8101d56:	f000 809f 	beq.w	8101e98 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8101e8c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8101d5c:	681b      	ldr	r3, [r3, #0]
 8101d5e:	4a4b      	ldr	r2, [pc, #300]	@ (8101e8c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8101d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101d64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101d66:	f7fe febd 	bl	8100ae4 <HAL_GetTick>
 8101d6a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101d6e:	e00b      	b.n	8101d88 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101d70:	f7fe feb8 	bl	8100ae4 <HAL_GetTick>
 8101d74:	4602      	mov	r2, r0
 8101d76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8101d7a:	1ad3      	subs	r3, r2, r3
 8101d7c:	2b64      	cmp	r3, #100	@ 0x64
 8101d7e:	d903      	bls.n	8101d88 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8101d80:	2303      	movs	r3, #3
 8101d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101d86:	e005      	b.n	8101d94 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101d88:	4b40      	ldr	r3, [pc, #256]	@ (8101e8c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8101d8a:	681b      	ldr	r3, [r3, #0]
 8101d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101d90:	2b00      	cmp	r3, #0
 8101d92:	d0ed      	beq.n	8101d70 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8101d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d98:	2b00      	cmp	r3, #0
 8101d9a:	d179      	bne.n	8101e90 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8101da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101da4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101da8:	4053      	eors	r3, r2
 8101daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8101dae:	2b00      	cmp	r3, #0
 8101db0:	d015      	beq.n	8101dde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101db2:	4b35      	ldr	r3, [pc, #212]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8101dba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101dbe:	4b32      	ldr	r3, [pc, #200]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101dc2:	4a31      	ldr	r2, [pc, #196]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101dc8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101dca:	4b2f      	ldr	r3, [pc, #188]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101dce:	4a2e      	ldr	r2, [pc, #184]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8101dd4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101dd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101ddc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101dea:	d118      	bne.n	8101e1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101dec:	f7fe fe7a 	bl	8100ae4 <HAL_GetTick>
 8101df0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101df4:	e00d      	b.n	8101e12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101df6:	f7fe fe75 	bl	8100ae4 <HAL_GetTick>
 8101dfa:	4602      	mov	r2, r0
 8101dfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8101e00:	1ad2      	subs	r2, r2, r3
 8101e02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8101e06:	429a      	cmp	r2, r3
 8101e08:	d903      	bls.n	8101e12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8101e0a:	2303      	movs	r3, #3
 8101e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8101e10:	e005      	b.n	8101e1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101e12:	4b1d      	ldr	r3, [pc, #116]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101e16:	f003 0302 	and.w	r3, r3, #2
 8101e1a:	2b00      	cmp	r3, #0
 8101e1c:	d0eb      	beq.n	8101df6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8101e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e22:	2b00      	cmp	r3, #0
 8101e24:	d12b      	bne.n	8101e7e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8101e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8101e36:	d110      	bne.n	8101e5a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8101e38:	4b13      	ldr	r3, [pc, #76]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e3a:	691b      	ldr	r3, [r3, #16]
 8101e3c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8101e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101e48:	091b      	lsrs	r3, r3, #4
 8101e4a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8101e4e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8101e52:	4a0d      	ldr	r2, [pc, #52]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e54:	430b      	orrs	r3, r1
 8101e56:	6113      	str	r3, [r2, #16]
 8101e58:	e005      	b.n	8101e66 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8101e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e5c:	691b      	ldr	r3, [r3, #16]
 8101e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8101e64:	6113      	str	r3, [r2, #16]
 8101e66:	4b08      	ldr	r3, [pc, #32]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e68:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8101e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101e76:	4a04      	ldr	r2, [pc, #16]	@ (8101e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e78:	430b      	orrs	r3, r1
 8101e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8101e7c:	e00c      	b.n	8101e98 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8101e86:	e007      	b.n	8101e98 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8101e88:	58024400 	.word	0x58024400
 8101e8c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ea0:	f002 0301 	and.w	r3, r2, #1
 8101ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8101ea8:	2300      	movs	r3, #0
 8101eaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8101eae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8101eb2:	460b      	mov	r3, r1
 8101eb4:	4313      	orrs	r3, r2
 8101eb6:	f000 8089 	beq.w	8101fcc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8101eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ebe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8101ec0:	2b28      	cmp	r3, #40	@ 0x28
 8101ec2:	d86b      	bhi.n	8101f9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8101ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8101ecc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8101ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101eca:	bf00      	nop
 8101ecc:	08101fa5 	.word	0x08101fa5
 8101ed0:	08101f9d 	.word	0x08101f9d
 8101ed4:	08101f9d 	.word	0x08101f9d
 8101ed8:	08101f9d 	.word	0x08101f9d
 8101edc:	08101f9d 	.word	0x08101f9d
 8101ee0:	08101f9d 	.word	0x08101f9d
 8101ee4:	08101f9d 	.word	0x08101f9d
 8101ee8:	08101f9d 	.word	0x08101f9d
 8101eec:	08101f71 	.word	0x08101f71
 8101ef0:	08101f9d 	.word	0x08101f9d
 8101ef4:	08101f9d 	.word	0x08101f9d
 8101ef8:	08101f9d 	.word	0x08101f9d
 8101efc:	08101f9d 	.word	0x08101f9d
 8101f00:	08101f9d 	.word	0x08101f9d
 8101f04:	08101f9d 	.word	0x08101f9d
 8101f08:	08101f9d 	.word	0x08101f9d
 8101f0c:	08101f87 	.word	0x08101f87
 8101f10:	08101f9d 	.word	0x08101f9d
 8101f14:	08101f9d 	.word	0x08101f9d
 8101f18:	08101f9d 	.word	0x08101f9d
 8101f1c:	08101f9d 	.word	0x08101f9d
 8101f20:	08101f9d 	.word	0x08101f9d
 8101f24:	08101f9d 	.word	0x08101f9d
 8101f28:	08101f9d 	.word	0x08101f9d
 8101f2c:	08101fa5 	.word	0x08101fa5
 8101f30:	08101f9d 	.word	0x08101f9d
 8101f34:	08101f9d 	.word	0x08101f9d
 8101f38:	08101f9d 	.word	0x08101f9d
 8101f3c:	08101f9d 	.word	0x08101f9d
 8101f40:	08101f9d 	.word	0x08101f9d
 8101f44:	08101f9d 	.word	0x08101f9d
 8101f48:	08101f9d 	.word	0x08101f9d
 8101f4c:	08101fa5 	.word	0x08101fa5
 8101f50:	08101f9d 	.word	0x08101f9d
 8101f54:	08101f9d 	.word	0x08101f9d
 8101f58:	08101f9d 	.word	0x08101f9d
 8101f5c:	08101f9d 	.word	0x08101f9d
 8101f60:	08101f9d 	.word	0x08101f9d
 8101f64:	08101f9d 	.word	0x08101f9d
 8101f68:	08101f9d 	.word	0x08101f9d
 8101f6c:	08101fa5 	.word	0x08101fa5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f74:	3308      	adds	r3, #8
 8101f76:	2101      	movs	r1, #1
 8101f78:	4618      	mov	r0, r3
 8101f7a:	f000 ffc3 	bl	8102f04 <RCCEx_PLL2_Config>
 8101f7e:	4603      	mov	r3, r0
 8101f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8101f84:	e00f      	b.n	8101fa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f8a:	3328      	adds	r3, #40	@ 0x28
 8101f8c:	2101      	movs	r1, #1
 8101f8e:	4618      	mov	r0, r3
 8101f90:	f001 f86a 	bl	8103068 <RCCEx_PLL3_Config>
 8101f94:	4603      	mov	r3, r0
 8101f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8101f9a:	e004      	b.n	8101fa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101f9c:	2301      	movs	r3, #1
 8101f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101fa2:	e000      	b.n	8101fa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8101fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101faa:	2b00      	cmp	r3, #0
 8101fac:	d10a      	bne.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8101fae:	4bbf      	ldr	r3, [pc, #764]	@ (81022ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8101fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101fb2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8101fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8101fbc:	4abb      	ldr	r2, [pc, #748]	@ (81022ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8101fbe:	430b      	orrs	r3, r1
 8101fc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8101fc2:	e003      	b.n	8101fcc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8101fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fd4:	f002 0302 	and.w	r3, r2, #2
 8101fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8101fdc:	2300      	movs	r3, #0
 8101fde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8101fe2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8101fe6:	460b      	mov	r3, r1
 8101fe8:	4313      	orrs	r3, r2
 8101fea:	d041      	beq.n	8102070 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8101fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8101ff2:	2b05      	cmp	r3, #5
 8101ff4:	d824      	bhi.n	8102040 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8101ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8101ffc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8101ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101ffc:	08102049 	.word	0x08102049
 8102000:	08102015 	.word	0x08102015
 8102004:	0810202b 	.word	0x0810202b
 8102008:	08102049 	.word	0x08102049
 810200c:	08102049 	.word	0x08102049
 8102010:	08102049 	.word	0x08102049
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102018:	3308      	adds	r3, #8
 810201a:	2101      	movs	r1, #1
 810201c:	4618      	mov	r0, r3
 810201e:	f000 ff71 	bl	8102f04 <RCCEx_PLL2_Config>
 8102022:	4603      	mov	r3, r0
 8102024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102028:	e00f      	b.n	810204a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810202a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810202e:	3328      	adds	r3, #40	@ 0x28
 8102030:	2101      	movs	r1, #1
 8102032:	4618      	mov	r0, r3
 8102034:	f001 f818 	bl	8103068 <RCCEx_PLL3_Config>
 8102038:	4603      	mov	r3, r0
 810203a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810203e:	e004      	b.n	810204a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102040:	2301      	movs	r3, #1
 8102042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102046:	e000      	b.n	810204a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8102048:	bf00      	nop
    }

    if (ret == HAL_OK)
 810204a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810204e:	2b00      	cmp	r3, #0
 8102050:	d10a      	bne.n	8102068 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102052:	4b96      	ldr	r3, [pc, #600]	@ (81022ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102056:	f023 0107 	bic.w	r1, r3, #7
 810205a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810205e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102060:	4a92      	ldr	r2, [pc, #584]	@ (81022ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102062:	430b      	orrs	r3, r1
 8102064:	6553      	str	r3, [r2, #84]	@ 0x54
 8102066:	e003      	b.n	8102070 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810206c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102078:	f002 0304 	and.w	r3, r2, #4
 810207c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8102080:	2300      	movs	r3, #0
 8102082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8102086:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810208a:	460b      	mov	r3, r1
 810208c:	4313      	orrs	r3, r2
 810208e:	d044      	beq.n	810211a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102098:	2b05      	cmp	r3, #5
 810209a:	d825      	bhi.n	81020e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810209c:	a201      	add	r2, pc, #4	@ (adr r2, 81020a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81020a2:	bf00      	nop
 81020a4:	081020f1 	.word	0x081020f1
 81020a8:	081020bd 	.word	0x081020bd
 81020ac:	081020d3 	.word	0x081020d3
 81020b0:	081020f1 	.word	0x081020f1
 81020b4:	081020f1 	.word	0x081020f1
 81020b8:	081020f1 	.word	0x081020f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81020bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020c0:	3308      	adds	r3, #8
 81020c2:	2101      	movs	r1, #1
 81020c4:	4618      	mov	r0, r3
 81020c6:	f000 ff1d 	bl	8102f04 <RCCEx_PLL2_Config>
 81020ca:	4603      	mov	r3, r0
 81020cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81020d0:	e00f      	b.n	81020f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81020d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020d6:	3328      	adds	r3, #40	@ 0x28
 81020d8:	2101      	movs	r1, #1
 81020da:	4618      	mov	r0, r3
 81020dc:	f000 ffc4 	bl	8103068 <RCCEx_PLL3_Config>
 81020e0:	4603      	mov	r3, r0
 81020e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81020e6:	e004      	b.n	81020f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81020e8:	2301      	movs	r3, #1
 81020ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81020ee:	e000      	b.n	81020f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81020f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81020f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81020f6:	2b00      	cmp	r3, #0
 81020f8:	d10b      	bne.n	8102112 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81020fa:	4b6c      	ldr	r3, [pc, #432]	@ (81022ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81020fe:	f023 0107 	bic.w	r1, r3, #7
 8102102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810210a:	4a68      	ldr	r2, [pc, #416]	@ (81022ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810210c:	430b      	orrs	r3, r1
 810210e:	6593      	str	r3, [r2, #88]	@ 0x58
 8102110:	e003      	b.n	810211a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810211a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102122:	f002 0320 	and.w	r3, r2, #32
 8102126:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810212a:	2300      	movs	r3, #0
 810212c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8102130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8102134:	460b      	mov	r3, r1
 8102136:	4313      	orrs	r3, r2
 8102138:	d055      	beq.n	81021e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810213a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102146:	d033      	beq.n	81021b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8102148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810214c:	d82c      	bhi.n	81021a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810214e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102152:	d02f      	beq.n	81021b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8102154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102158:	d826      	bhi.n	81021a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810215a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810215e:	d02b      	beq.n	81021b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8102160:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102164:	d820      	bhi.n	81021a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810216a:	d012      	beq.n	8102192 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810216c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102170:	d81a      	bhi.n	81021a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102172:	2b00      	cmp	r3, #0
 8102174:	d022      	beq.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8102176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810217a:	d115      	bne.n	81021a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810217c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102180:	3308      	adds	r3, #8
 8102182:	2100      	movs	r1, #0
 8102184:	4618      	mov	r0, r3
 8102186:	f000 febd 	bl	8102f04 <RCCEx_PLL2_Config>
 810218a:	4603      	mov	r3, r0
 810218c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102190:	e015      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102196:	3328      	adds	r3, #40	@ 0x28
 8102198:	2102      	movs	r1, #2
 810219a:	4618      	mov	r0, r3
 810219c:	f000 ff64 	bl	8103068 <RCCEx_PLL3_Config>
 81021a0:	4603      	mov	r3, r0
 81021a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81021a6:	e00a      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81021a8:	2301      	movs	r3, #1
 81021aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81021ae:	e006      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81021b0:	bf00      	nop
 81021b2:	e004      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81021b4:	bf00      	nop
 81021b6:	e002      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81021b8:	bf00      	nop
 81021ba:	e000      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81021bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81021be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021c2:	2b00      	cmp	r3, #0
 81021c4:	d10b      	bne.n	81021de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81021c6:	4b39      	ldr	r3, [pc, #228]	@ (81022ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81021c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81021ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81021ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81021d6:	4a35      	ldr	r2, [pc, #212]	@ (81022ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81021d8:	430b      	orrs	r3, r1
 81021da:	6553      	str	r3, [r2, #84]	@ 0x54
 81021dc:	e003      	b.n	81021e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81021e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81021ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81021f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81021f6:	2300      	movs	r3, #0
 81021f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81021fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8102200:	460b      	mov	r3, r1
 8102202:	4313      	orrs	r3, r2
 8102204:	d058      	beq.n	81022b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8102206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810220a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810220e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102212:	d033      	beq.n	810227c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8102214:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102218:	d82c      	bhi.n	8102274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810221a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810221e:	d02f      	beq.n	8102280 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8102220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102224:	d826      	bhi.n	8102274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102226:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810222a:	d02b      	beq.n	8102284 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810222c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102230:	d820      	bhi.n	8102274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102232:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102236:	d012      	beq.n	810225e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8102238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810223c:	d81a      	bhi.n	8102274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810223e:	2b00      	cmp	r3, #0
 8102240:	d022      	beq.n	8102288 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8102242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8102246:	d115      	bne.n	8102274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810224c:	3308      	adds	r3, #8
 810224e:	2100      	movs	r1, #0
 8102250:	4618      	mov	r0, r3
 8102252:	f000 fe57 	bl	8102f04 <RCCEx_PLL2_Config>
 8102256:	4603      	mov	r3, r0
 8102258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810225c:	e015      	b.n	810228a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810225e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102262:	3328      	adds	r3, #40	@ 0x28
 8102264:	2102      	movs	r1, #2
 8102266:	4618      	mov	r0, r3
 8102268:	f000 fefe 	bl	8103068 <RCCEx_PLL3_Config>
 810226c:	4603      	mov	r3, r0
 810226e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102272:	e00a      	b.n	810228a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102274:	2301      	movs	r3, #1
 8102276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810227a:	e006      	b.n	810228a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810227c:	bf00      	nop
 810227e:	e004      	b.n	810228a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102280:	bf00      	nop
 8102282:	e002      	b.n	810228a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102284:	bf00      	nop
 8102286:	e000      	b.n	810228a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102288:	bf00      	nop
    }

    if (ret == HAL_OK)
 810228a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810228e:	2b00      	cmp	r3, #0
 8102290:	d10e      	bne.n	81022b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102292:	4b06      	ldr	r3, [pc, #24]	@ (81022ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102296:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810229a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810229e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81022a2:	4a02      	ldr	r2, [pc, #8]	@ (81022ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81022a4:	430b      	orrs	r3, r1
 81022a6:	6593      	str	r3, [r2, #88]	@ 0x58
 81022a8:	e006      	b.n	81022b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81022aa:	bf00      	nop
 81022ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81022b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81022c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81022c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81022c8:	2300      	movs	r3, #0
 81022ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81022ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81022d2:	460b      	mov	r3, r1
 81022d4:	4313      	orrs	r3, r2
 81022d6:	d055      	beq.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81022d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81022e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81022e4:	d033      	beq.n	810234e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81022e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81022ea:	d82c      	bhi.n	8102346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81022ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81022f0:	d02f      	beq.n	8102352 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81022f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81022f6:	d826      	bhi.n	8102346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81022f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81022fc:	d02b      	beq.n	8102356 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81022fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102302:	d820      	bhi.n	8102346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102304:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102308:	d012      	beq.n	8102330 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810230a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810230e:	d81a      	bhi.n	8102346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102310:	2b00      	cmp	r3, #0
 8102312:	d022      	beq.n	810235a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8102314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102318:	d115      	bne.n	8102346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810231a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810231e:	3308      	adds	r3, #8
 8102320:	2100      	movs	r1, #0
 8102322:	4618      	mov	r0, r3
 8102324:	f000 fdee 	bl	8102f04 <RCCEx_PLL2_Config>
 8102328:	4603      	mov	r3, r0
 810232a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810232e:	e015      	b.n	810235c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102334:	3328      	adds	r3, #40	@ 0x28
 8102336:	2102      	movs	r1, #2
 8102338:	4618      	mov	r0, r3
 810233a:	f000 fe95 	bl	8103068 <RCCEx_PLL3_Config>
 810233e:	4603      	mov	r3, r0
 8102340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102344:	e00a      	b.n	810235c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102346:	2301      	movs	r3, #1
 8102348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810234c:	e006      	b.n	810235c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810234e:	bf00      	nop
 8102350:	e004      	b.n	810235c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102352:	bf00      	nop
 8102354:	e002      	b.n	810235c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102356:	bf00      	nop
 8102358:	e000      	b.n	810235c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810235a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810235c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102360:	2b00      	cmp	r3, #0
 8102362:	d10b      	bne.n	810237c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102364:	4ba1      	ldr	r3, [pc, #644]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102368:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810236c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102374:	4a9d      	ldr	r2, [pc, #628]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102376:	430b      	orrs	r3, r1
 8102378:	6593      	str	r3, [r2, #88]	@ 0x58
 810237a:	e003      	b.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810237c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102388:	e9d3 2300 	ldrd	r2, r3, [r3]
 810238c:	f002 0308 	and.w	r3, r2, #8
 8102390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8102394:	2300      	movs	r3, #0
 8102396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810239a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810239e:	460b      	mov	r3, r1
 81023a0:	4313      	orrs	r3, r2
 81023a2:	d01e      	beq.n	81023e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81023a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81023ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81023b0:	d10c      	bne.n	81023cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81023b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023b6:	3328      	adds	r3, #40	@ 0x28
 81023b8:	2102      	movs	r1, #2
 81023ba:	4618      	mov	r0, r3
 81023bc:	f000 fe54 	bl	8103068 <RCCEx_PLL3_Config>
 81023c0:	4603      	mov	r3, r0
 81023c2:	2b00      	cmp	r3, #0
 81023c4:	d002      	beq.n	81023cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81023c6:	2301      	movs	r3, #1
 81023c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81023cc:	4b87      	ldr	r3, [pc, #540]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81023ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81023d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81023d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81023dc:	4a83      	ldr	r2, [pc, #524]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81023de:	430b      	orrs	r3, r1
 81023e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81023e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023ea:	f002 0310 	and.w	r3, r2, #16
 81023ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81023f2:	2300      	movs	r3, #0
 81023f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81023f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81023fc:	460b      	mov	r3, r1
 81023fe:	4313      	orrs	r3, r2
 8102400:	d01e      	beq.n	8102440 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8102402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102406:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810240a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810240e:	d10c      	bne.n	810242a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102414:	3328      	adds	r3, #40	@ 0x28
 8102416:	2102      	movs	r1, #2
 8102418:	4618      	mov	r0, r3
 810241a:	f000 fe25 	bl	8103068 <RCCEx_PLL3_Config>
 810241e:	4603      	mov	r3, r0
 8102420:	2b00      	cmp	r3, #0
 8102422:	d002      	beq.n	810242a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8102424:	2301      	movs	r3, #1
 8102426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810242a:	4b70      	ldr	r3, [pc, #448]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810242c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810242e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102436:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810243a:	4a6c      	ldr	r2, [pc, #432]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810243c:	430b      	orrs	r3, r1
 810243e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102448:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810244c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8102450:	2300      	movs	r3, #0
 8102452:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8102456:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810245a:	460b      	mov	r3, r1
 810245c:	4313      	orrs	r3, r2
 810245e:	d03e      	beq.n	81024de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8102460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102464:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810246c:	d022      	beq.n	81024b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810246e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102472:	d81b      	bhi.n	81024ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8102474:	2b00      	cmp	r3, #0
 8102476:	d003      	beq.n	8102480 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8102478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810247c:	d00b      	beq.n	8102496 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810247e:	e015      	b.n	81024ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102484:	3308      	adds	r3, #8
 8102486:	2100      	movs	r1, #0
 8102488:	4618      	mov	r0, r3
 810248a:	f000 fd3b 	bl	8102f04 <RCCEx_PLL2_Config>
 810248e:	4603      	mov	r3, r0
 8102490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102494:	e00f      	b.n	81024b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810249a:	3328      	adds	r3, #40	@ 0x28
 810249c:	2102      	movs	r1, #2
 810249e:	4618      	mov	r0, r3
 81024a0:	f000 fde2 	bl	8103068 <RCCEx_PLL3_Config>
 81024a4:	4603      	mov	r3, r0
 81024a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81024aa:	e004      	b.n	81024b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81024ac:	2301      	movs	r3, #1
 81024ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81024b2:	e000      	b.n	81024b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81024b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81024b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81024ba:	2b00      	cmp	r3, #0
 81024bc:	d10b      	bne.n	81024d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81024be:	4b4b      	ldr	r3, [pc, #300]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81024c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81024c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81024ce:	4a47      	ldr	r2, [pc, #284]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81024d0:	430b      	orrs	r3, r1
 81024d2:	6593      	str	r3, [r2, #88]	@ 0x58
 81024d4:	e003      	b.n	81024de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81024da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81024de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81024ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 81024ec:	2300      	movs	r3, #0
 81024ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81024f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81024f4:	460b      	mov	r3, r1
 81024f6:	4313      	orrs	r3, r2
 81024f8:	d03b      	beq.n	8102572 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81024fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102502:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102506:	d01f      	beq.n	8102548 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8102508:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810250c:	d818      	bhi.n	8102540 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810250e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102512:	d003      	beq.n	810251c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8102514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102518:	d007      	beq.n	810252a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810251a:	e011      	b.n	8102540 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810251c:	4b33      	ldr	r3, [pc, #204]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810251e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102520:	4a32      	ldr	r2, [pc, #200]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8102528:	e00f      	b.n	810254a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810252a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810252e:	3328      	adds	r3, #40	@ 0x28
 8102530:	2101      	movs	r1, #1
 8102532:	4618      	mov	r0, r3
 8102534:	f000 fd98 	bl	8103068 <RCCEx_PLL3_Config>
 8102538:	4603      	mov	r3, r0
 810253a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810253e:	e004      	b.n	810254a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102540:	2301      	movs	r3, #1
 8102542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102546:	e000      	b.n	810254a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8102548:	bf00      	nop
    }

    if (ret == HAL_OK)
 810254a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810254e:	2b00      	cmp	r3, #0
 8102550:	d10b      	bne.n	810256a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102552:	4b26      	ldr	r3, [pc, #152]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102556:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810255a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102562:	4a22      	ldr	r2, [pc, #136]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102564:	430b      	orrs	r3, r1
 8102566:	6553      	str	r3, [r2, #84]	@ 0x54
 8102568:	e003      	b.n	8102572 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810256a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810256e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102576:	e9d3 2300 	ldrd	r2, r3, [r3]
 810257a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810257e:	673b      	str	r3, [r7, #112]	@ 0x70
 8102580:	2300      	movs	r3, #0
 8102582:	677b      	str	r3, [r7, #116]	@ 0x74
 8102584:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8102588:	460b      	mov	r3, r1
 810258a:	4313      	orrs	r3, r2
 810258c:	d034      	beq.n	81025f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810258e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102594:	2b00      	cmp	r3, #0
 8102596:	d003      	beq.n	81025a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8102598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810259c:	d007      	beq.n	81025ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810259e:	e011      	b.n	81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81025a0:	4b12      	ldr	r3, [pc, #72]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81025a4:	4a11      	ldr	r2, [pc, #68]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81025a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81025aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81025ac:	e00e      	b.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81025ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025b2:	3308      	adds	r3, #8
 81025b4:	2102      	movs	r1, #2
 81025b6:	4618      	mov	r0, r3
 81025b8:	f000 fca4 	bl	8102f04 <RCCEx_PLL2_Config>
 81025bc:	4603      	mov	r3, r0
 81025be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81025c2:	e003      	b.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81025c4:	2301      	movs	r3, #1
 81025c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81025ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81025cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025d0:	2b00      	cmp	r3, #0
 81025d2:	d10d      	bne.n	81025f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81025d4:	4b05      	ldr	r3, [pc, #20]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81025d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81025d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81025dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81025e2:	4a02      	ldr	r2, [pc, #8]	@ (81025ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81025e4:	430b      	orrs	r3, r1
 81025e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81025e8:	e006      	b.n	81025f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81025ea:	bf00      	nop
 81025ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81025f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102600:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8102604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8102606:	2300      	movs	r3, #0
 8102608:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810260a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810260e:	460b      	mov	r3, r1
 8102610:	4313      	orrs	r3, r2
 8102612:	d00c      	beq.n	810262e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102618:	3328      	adds	r3, #40	@ 0x28
 810261a:	2102      	movs	r1, #2
 810261c:	4618      	mov	r0, r3
 810261e:	f000 fd23 	bl	8103068 <RCCEx_PLL3_Config>
 8102622:	4603      	mov	r3, r0
 8102624:	2b00      	cmp	r3, #0
 8102626:	d002      	beq.n	810262e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8102628:	2301      	movs	r3, #1
 810262a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810262e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102636:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810263a:	663b      	str	r3, [r7, #96]	@ 0x60
 810263c:	2300      	movs	r3, #0
 810263e:	667b      	str	r3, [r7, #100]	@ 0x64
 8102640:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8102644:	460b      	mov	r3, r1
 8102646:	4313      	orrs	r3, r2
 8102648:	d038      	beq.n	81026bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810264a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810264e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102656:	d018      	beq.n	810268a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8102658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810265c:	d811      	bhi.n	8102682 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810265e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102662:	d014      	beq.n	810268e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8102664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102668:	d80b      	bhi.n	8102682 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810266a:	2b00      	cmp	r3, #0
 810266c:	d011      	beq.n	8102692 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810266e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102672:	d106      	bne.n	8102682 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102674:	4bc3      	ldr	r3, [pc, #780]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102678:	4ac2      	ldr	r2, [pc, #776]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810267a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810267e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8102680:	e008      	b.n	8102694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102682:	2301      	movs	r3, #1
 8102684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102688:	e004      	b.n	8102694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810268a:	bf00      	nop
 810268c:	e002      	b.n	8102694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810268e:	bf00      	nop
 8102690:	e000      	b.n	8102694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102698:	2b00      	cmp	r3, #0
 810269a:	d10b      	bne.n	81026b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810269c:	4bb9      	ldr	r3, [pc, #740]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810269e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81026a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81026a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81026ac:	4ab5      	ldr	r2, [pc, #724]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81026ae:	430b      	orrs	r3, r1
 81026b0:	6553      	str	r3, [r2, #84]	@ 0x54
 81026b2:	e003      	b.n	81026bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81026bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81026c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 81026ca:	2300      	movs	r3, #0
 81026cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81026ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81026d2:	460b      	mov	r3, r1
 81026d4:	4313      	orrs	r3, r2
 81026d6:	d009      	beq.n	81026ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81026d8:	4baa      	ldr	r3, [pc, #680]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81026da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81026dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81026e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81026e6:	4aa7      	ldr	r2, [pc, #668]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81026e8:	430b      	orrs	r3, r1
 81026ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81026ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81026f8:	653b      	str	r3, [r7, #80]	@ 0x50
 81026fa:	2300      	movs	r3, #0
 81026fc:	657b      	str	r3, [r7, #84]	@ 0x54
 81026fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8102702:	460b      	mov	r3, r1
 8102704:	4313      	orrs	r3, r2
 8102706:	d00a      	beq.n	810271e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102708:	4b9e      	ldr	r3, [pc, #632]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810270a:	691b      	ldr	r3, [r3, #16]
 810270c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8102710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102714:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102718:	4a9a      	ldr	r2, [pc, #616]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810271a:	430b      	orrs	r3, r1
 810271c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810271e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102726:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810272a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810272c:	2300      	movs	r3, #0
 810272e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8102730:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8102734:	460b      	mov	r3, r1
 8102736:	4313      	orrs	r3, r2
 8102738:	d009      	beq.n	810274e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810273a:	4b92      	ldr	r3, [pc, #584]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810273c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810273e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8102742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102748:	4a8e      	ldr	r2, [pc, #568]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810274a:	430b      	orrs	r3, r1
 810274c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810274e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102756:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810275a:	643b      	str	r3, [r7, #64]	@ 0x40
 810275c:	2300      	movs	r3, #0
 810275e:	647b      	str	r3, [r7, #68]	@ 0x44
 8102760:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8102764:	460b      	mov	r3, r1
 8102766:	4313      	orrs	r3, r2
 8102768:	d00e      	beq.n	8102788 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810276a:	4b86      	ldr	r3, [pc, #536]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810276c:	691b      	ldr	r3, [r3, #16]
 810276e:	4a85      	ldr	r2, [pc, #532]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102770:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8102774:	6113      	str	r3, [r2, #16]
 8102776:	4b83      	ldr	r3, [pc, #524]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102778:	6919      	ldr	r1, [r3, #16]
 810277a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810277e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102782:	4a80      	ldr	r2, [pc, #512]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102784:	430b      	orrs	r3, r1
 8102786:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102790:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8102794:	63bb      	str	r3, [r7, #56]	@ 0x38
 8102796:	2300      	movs	r3, #0
 8102798:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810279a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810279e:	460b      	mov	r3, r1
 81027a0:	4313      	orrs	r3, r2
 81027a2:	d009      	beq.n	81027b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81027a4:	4b77      	ldr	r3, [pc, #476]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81027a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81027a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81027ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027b2:	4a74      	ldr	r2, [pc, #464]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81027b4:	430b      	orrs	r3, r1
 81027b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81027b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81027c4:	633b      	str	r3, [r7, #48]	@ 0x30
 81027c6:	2300      	movs	r3, #0
 81027c8:	637b      	str	r3, [r7, #52]	@ 0x34
 81027ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81027ce:	460b      	mov	r3, r1
 81027d0:	4313      	orrs	r3, r2
 81027d2:	d00a      	beq.n	81027ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81027d4:	4b6b      	ldr	r3, [pc, #428]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81027dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81027e4:	4a67      	ldr	r2, [pc, #412]	@ (8102984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81027e6:	430b      	orrs	r3, r1
 81027e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81027ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027f2:	2100      	movs	r1, #0
 81027f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 81027f6:	f003 0301 	and.w	r3, r3, #1
 81027fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81027fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8102800:	460b      	mov	r3, r1
 8102802:	4313      	orrs	r3, r2
 8102804:	d011      	beq.n	810282a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810280a:	3308      	adds	r3, #8
 810280c:	2100      	movs	r1, #0
 810280e:	4618      	mov	r0, r3
 8102810:	f000 fb78 	bl	8102f04 <RCCEx_PLL2_Config>
 8102814:	4603      	mov	r3, r0
 8102816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810281a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810281e:	2b00      	cmp	r3, #0
 8102820:	d003      	beq.n	810282a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810282a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102832:	2100      	movs	r1, #0
 8102834:	6239      	str	r1, [r7, #32]
 8102836:	f003 0302 	and.w	r3, r3, #2
 810283a:	627b      	str	r3, [r7, #36]	@ 0x24
 810283c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8102840:	460b      	mov	r3, r1
 8102842:	4313      	orrs	r3, r2
 8102844:	d011      	beq.n	810286a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810284a:	3308      	adds	r3, #8
 810284c:	2101      	movs	r1, #1
 810284e:	4618      	mov	r0, r3
 8102850:	f000 fb58 	bl	8102f04 <RCCEx_PLL2_Config>
 8102854:	4603      	mov	r3, r0
 8102856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810285a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810285e:	2b00      	cmp	r3, #0
 8102860:	d003      	beq.n	810286a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810286a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102872:	2100      	movs	r1, #0
 8102874:	61b9      	str	r1, [r7, #24]
 8102876:	f003 0304 	and.w	r3, r3, #4
 810287a:	61fb      	str	r3, [r7, #28]
 810287c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8102880:	460b      	mov	r3, r1
 8102882:	4313      	orrs	r3, r2
 8102884:	d011      	beq.n	81028aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810288a:	3308      	adds	r3, #8
 810288c:	2102      	movs	r1, #2
 810288e:	4618      	mov	r0, r3
 8102890:	f000 fb38 	bl	8102f04 <RCCEx_PLL2_Config>
 8102894:	4603      	mov	r3, r0
 8102896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810289a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810289e:	2b00      	cmp	r3, #0
 81028a0:	d003      	beq.n	81028aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81028aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028b2:	2100      	movs	r1, #0
 81028b4:	6139      	str	r1, [r7, #16]
 81028b6:	f003 0308 	and.w	r3, r3, #8
 81028ba:	617b      	str	r3, [r7, #20]
 81028bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81028c0:	460b      	mov	r3, r1
 81028c2:	4313      	orrs	r3, r2
 81028c4:	d011      	beq.n	81028ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81028c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028ca:	3328      	adds	r3, #40	@ 0x28
 81028cc:	2100      	movs	r1, #0
 81028ce:	4618      	mov	r0, r3
 81028d0:	f000 fbca 	bl	8103068 <RCCEx_PLL3_Config>
 81028d4:	4603      	mov	r3, r0
 81028d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81028da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028de:	2b00      	cmp	r3, #0
 81028e0:	d003      	beq.n	81028ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81028ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028f2:	2100      	movs	r1, #0
 81028f4:	60b9      	str	r1, [r7, #8]
 81028f6:	f003 0310 	and.w	r3, r3, #16
 81028fa:	60fb      	str	r3, [r7, #12]
 81028fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8102900:	460b      	mov	r3, r1
 8102902:	4313      	orrs	r3, r2
 8102904:	d011      	beq.n	810292a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810290a:	3328      	adds	r3, #40	@ 0x28
 810290c:	2101      	movs	r1, #1
 810290e:	4618      	mov	r0, r3
 8102910:	f000 fbaa 	bl	8103068 <RCCEx_PLL3_Config>
 8102914:	4603      	mov	r3, r0
 8102916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810291a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810291e:	2b00      	cmp	r3, #0
 8102920:	d003      	beq.n	810292a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810292a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102932:	2100      	movs	r1, #0
 8102934:	6039      	str	r1, [r7, #0]
 8102936:	f003 0320 	and.w	r3, r3, #32
 810293a:	607b      	str	r3, [r7, #4]
 810293c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8102940:	460b      	mov	r3, r1
 8102942:	4313      	orrs	r3, r2
 8102944:	d011      	beq.n	810296a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810294a:	3328      	adds	r3, #40	@ 0x28
 810294c:	2102      	movs	r1, #2
 810294e:	4618      	mov	r0, r3
 8102950:	f000 fb8a 	bl	8103068 <RCCEx_PLL3_Config>
 8102954:	4603      	mov	r3, r0
 8102956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810295a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810295e:	2b00      	cmp	r3, #0
 8102960:	d003      	beq.n	810296a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810296a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810296e:	2b00      	cmp	r3, #0
 8102970:	d101      	bne.n	8102976 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8102972:	2300      	movs	r3, #0
 8102974:	e000      	b.n	8102978 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8102976:	2301      	movs	r3, #1
}
 8102978:	4618      	mov	r0, r3
 810297a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810297e:	46bd      	mov	sp, r7
 8102980:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8102984:	58024400 	.word	0x58024400

08102988 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8102988:	b580      	push	{r7, lr}
 810298a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810298c:	f7fe fd94 	bl	81014b8 <HAL_RCC_GetHCLKFreq>
 8102990:	4602      	mov	r2, r0
 8102992:	4b06      	ldr	r3, [pc, #24]	@ (81029ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102994:	6a1b      	ldr	r3, [r3, #32]
 8102996:	091b      	lsrs	r3, r3, #4
 8102998:	f003 0307 	and.w	r3, r3, #7
 810299c:	4904      	ldr	r1, [pc, #16]	@ (81029b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810299e:	5ccb      	ldrb	r3, [r1, r3]
 81029a0:	f003 031f 	and.w	r3, r3, #31
 81029a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81029a8:	4618      	mov	r0, r3
 81029aa:	bd80      	pop	{r7, pc}
 81029ac:	58024400 	.word	0x58024400
 81029b0:	08104864 	.word	0x08104864

081029b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81029b4:	b480      	push	{r7}
 81029b6:	b089      	sub	sp, #36	@ 0x24
 81029b8:	af00      	add	r7, sp, #0
 81029ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81029bc:	4ba1      	ldr	r3, [pc, #644]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81029c0:	f003 0303 	and.w	r3, r3, #3
 81029c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81029c6:	4b9f      	ldr	r3, [pc, #636]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81029ca:	0b1b      	lsrs	r3, r3, #12
 81029cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81029d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81029d2:	4b9c      	ldr	r3, [pc, #624]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81029d6:	091b      	lsrs	r3, r3, #4
 81029d8:	f003 0301 	and.w	r3, r3, #1
 81029dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81029de:	4b99      	ldr	r3, [pc, #612]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81029e2:	08db      	lsrs	r3, r3, #3
 81029e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81029e8:	693a      	ldr	r2, [r7, #16]
 81029ea:	fb02 f303 	mul.w	r3, r2, r3
 81029ee:	ee07 3a90 	vmov	s15, r3
 81029f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81029fa:	697b      	ldr	r3, [r7, #20]
 81029fc:	2b00      	cmp	r3, #0
 81029fe:	f000 8111 	beq.w	8102c24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102a02:	69bb      	ldr	r3, [r7, #24]
 8102a04:	2b02      	cmp	r3, #2
 8102a06:	f000 8083 	beq.w	8102b10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8102a0a:	69bb      	ldr	r3, [r7, #24]
 8102a0c:	2b02      	cmp	r3, #2
 8102a0e:	f200 80a1 	bhi.w	8102b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102a12:	69bb      	ldr	r3, [r7, #24]
 8102a14:	2b00      	cmp	r3, #0
 8102a16:	d003      	beq.n	8102a20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8102a18:	69bb      	ldr	r3, [r7, #24]
 8102a1a:	2b01      	cmp	r3, #1
 8102a1c:	d056      	beq.n	8102acc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102a1e:	e099      	b.n	8102b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102a20:	4b88      	ldr	r3, [pc, #544]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a22:	681b      	ldr	r3, [r3, #0]
 8102a24:	f003 0320 	and.w	r3, r3, #32
 8102a28:	2b00      	cmp	r3, #0
 8102a2a:	d02d      	beq.n	8102a88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102a2c:	4b85      	ldr	r3, [pc, #532]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	08db      	lsrs	r3, r3, #3
 8102a32:	f003 0303 	and.w	r3, r3, #3
 8102a36:	4a84      	ldr	r2, [pc, #528]	@ (8102c48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8102a38:	fa22 f303 	lsr.w	r3, r2, r3
 8102a3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102a3e:	68bb      	ldr	r3, [r7, #8]
 8102a40:	ee07 3a90 	vmov	s15, r3
 8102a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a48:	697b      	ldr	r3, [r7, #20]
 8102a4a:	ee07 3a90 	vmov	s15, r3
 8102a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a56:	4b7b      	ldr	r3, [pc, #492]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a5e:	ee07 3a90 	vmov	s15, r3
 8102a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8102a6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8102c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8102a86:	e087      	b.n	8102b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102a88:	697b      	ldr	r3, [r7, #20]
 8102a8a:	ee07 3a90 	vmov	s15, r3
 8102a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8102c50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8102a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102aa2:	ee07 3a90 	vmov	s15, r3
 8102aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8102aae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8102c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102aca:	e065      	b.n	8102b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102acc:	697b      	ldr	r3, [r7, #20]
 8102ace:	ee07 3a90 	vmov	s15, r3
 8102ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102ade:	4b59      	ldr	r3, [pc, #356]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102ae6:	ee07 3a90 	vmov	s15, r3
 8102aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8102af2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8102c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b0e:	e043      	b.n	8102b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102b10:	697b      	ldr	r3, [r7, #20]
 8102b12:	ee07 3a90 	vmov	s15, r3
 8102b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8102c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8102b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b22:	4b48      	ldr	r3, [pc, #288]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b2a:	ee07 3a90 	vmov	s15, r3
 8102b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8102b36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8102c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b52:	e021      	b.n	8102b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102b54:	697b      	ldr	r3, [r7, #20]
 8102b56:	ee07 3a90 	vmov	s15, r3
 8102b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b66:	4b37      	ldr	r3, [pc, #220]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b6e:	ee07 3a90 	vmov	s15, r3
 8102b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8102b7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8102c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8102b98:	4b2a      	ldr	r3, [pc, #168]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102b9c:	0a5b      	lsrs	r3, r3, #9
 8102b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102ba2:	ee07 3a90 	vmov	s15, r3
 8102ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102baa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8102bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102bbe:	ee17 2a90 	vmov	r2, s15
 8102bc2:	687b      	ldr	r3, [r7, #4]
 8102bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8102bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102bca:	0c1b      	lsrs	r3, r3, #16
 8102bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102bd0:	ee07 3a90 	vmov	s15, r3
 8102bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8102be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102bec:	ee17 2a90 	vmov	r2, s15
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8102bf4:	4b13      	ldr	r3, [pc, #76]	@ (8102c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102bf8:	0e1b      	lsrs	r3, r3, #24
 8102bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102bfe:	ee07 3a90 	vmov	s15, r3
 8102c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8102c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102c1a:	ee17 2a90 	vmov	r2, s15
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8102c22:	e008      	b.n	8102c36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8102c24:	687b      	ldr	r3, [r7, #4]
 8102c26:	2200      	movs	r2, #0
 8102c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	2200      	movs	r2, #0
 8102c2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	2200      	movs	r2, #0
 8102c34:	609a      	str	r2, [r3, #8]
}
 8102c36:	bf00      	nop
 8102c38:	3724      	adds	r7, #36	@ 0x24
 8102c3a:	46bd      	mov	sp, r7
 8102c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c40:	4770      	bx	lr
 8102c42:	bf00      	nop
 8102c44:	58024400 	.word	0x58024400
 8102c48:	03d09000 	.word	0x03d09000
 8102c4c:	46000000 	.word	0x46000000
 8102c50:	4c742400 	.word	0x4c742400
 8102c54:	4a742400 	.word	0x4a742400
 8102c58:	4bbebc20 	.word	0x4bbebc20

08102c5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8102c5c:	b480      	push	{r7}
 8102c5e:	b089      	sub	sp, #36	@ 0x24
 8102c60:	af00      	add	r7, sp, #0
 8102c62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102c64:	4ba1      	ldr	r3, [pc, #644]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102c68:	f003 0303 	and.w	r3, r3, #3
 8102c6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8102c6e:	4b9f      	ldr	r3, [pc, #636]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102c72:	0d1b      	lsrs	r3, r3, #20
 8102c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102c78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8102c7a:	4b9c      	ldr	r3, [pc, #624]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c7e:	0a1b      	lsrs	r3, r3, #8
 8102c80:	f003 0301 	and.w	r3, r3, #1
 8102c84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8102c86:	4b99      	ldr	r3, [pc, #612]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102c8a:	08db      	lsrs	r3, r3, #3
 8102c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102c90:	693a      	ldr	r2, [r7, #16]
 8102c92:	fb02 f303 	mul.w	r3, r2, r3
 8102c96:	ee07 3a90 	vmov	s15, r3
 8102c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8102ca2:	697b      	ldr	r3, [r7, #20]
 8102ca4:	2b00      	cmp	r3, #0
 8102ca6:	f000 8111 	beq.w	8102ecc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8102caa:	69bb      	ldr	r3, [r7, #24]
 8102cac:	2b02      	cmp	r3, #2
 8102cae:	f000 8083 	beq.w	8102db8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8102cb2:	69bb      	ldr	r3, [r7, #24]
 8102cb4:	2b02      	cmp	r3, #2
 8102cb6:	f200 80a1 	bhi.w	8102dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8102cba:	69bb      	ldr	r3, [r7, #24]
 8102cbc:	2b00      	cmp	r3, #0
 8102cbe:	d003      	beq.n	8102cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8102cc0:	69bb      	ldr	r3, [r7, #24]
 8102cc2:	2b01      	cmp	r3, #1
 8102cc4:	d056      	beq.n	8102d74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8102cc6:	e099      	b.n	8102dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102cc8:	4b88      	ldr	r3, [pc, #544]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102cca:	681b      	ldr	r3, [r3, #0]
 8102ccc:	f003 0320 	and.w	r3, r3, #32
 8102cd0:	2b00      	cmp	r3, #0
 8102cd2:	d02d      	beq.n	8102d30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102cd4:	4b85      	ldr	r3, [pc, #532]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102cd6:	681b      	ldr	r3, [r3, #0]
 8102cd8:	08db      	lsrs	r3, r3, #3
 8102cda:	f003 0303 	and.w	r3, r3, #3
 8102cde:	4a84      	ldr	r2, [pc, #528]	@ (8102ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8102ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8102ce4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102ce6:	68bb      	ldr	r3, [r7, #8]
 8102ce8:	ee07 3a90 	vmov	s15, r3
 8102cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102cf0:	697b      	ldr	r3, [r7, #20]
 8102cf2:	ee07 3a90 	vmov	s15, r3
 8102cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d06:	ee07 3a90 	vmov	s15, r3
 8102d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102d12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8102ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8102d2e:	e087      	b.n	8102e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102d30:	697b      	ldr	r3, [r7, #20]
 8102d32:	ee07 3a90 	vmov	s15, r3
 8102d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8102ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8102d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d42:	4b6a      	ldr	r3, [pc, #424]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d4a:	ee07 3a90 	vmov	s15, r3
 8102d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8102d56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8102ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102d72:	e065      	b.n	8102e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102d74:	697b      	ldr	r3, [r7, #20]
 8102d76:	ee07 3a90 	vmov	s15, r3
 8102d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d86:	4b59      	ldr	r3, [pc, #356]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d8e:	ee07 3a90 	vmov	s15, r3
 8102d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8102d9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8102ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102db6:	e043      	b.n	8102e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102db8:	697b      	ldr	r3, [r7, #20]
 8102dba:	ee07 3a90 	vmov	s15, r3
 8102dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102dc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8102f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8102dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102dca:	4b48      	ldr	r3, [pc, #288]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102dd2:	ee07 3a90 	vmov	s15, r3
 8102dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8102dde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8102ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102dfa:	e021      	b.n	8102e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102dfc:	697b      	ldr	r3, [r7, #20]
 8102dfe:	ee07 3a90 	vmov	s15, r3
 8102e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e0e:	4b37      	ldr	r3, [pc, #220]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e16:	ee07 3a90 	vmov	s15, r3
 8102e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102e22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8102ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102e3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8102e40:	4b2a      	ldr	r3, [pc, #168]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102e44:	0a5b      	lsrs	r3, r3, #9
 8102e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102e4a:	ee07 3a90 	vmov	s15, r3
 8102e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102e66:	ee17 2a90 	vmov	r2, s15
 8102e6a:	687b      	ldr	r3, [r7, #4]
 8102e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8102e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102e72:	0c1b      	lsrs	r3, r3, #16
 8102e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102e78:	ee07 3a90 	vmov	s15, r3
 8102e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102e94:	ee17 2a90 	vmov	r2, s15
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8102e9c:	4b13      	ldr	r3, [pc, #76]	@ (8102eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102ea0:	0e1b      	lsrs	r3, r3, #24
 8102ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102ea6:	ee07 3a90 	vmov	s15, r3
 8102eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8102eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ec2:	ee17 2a90 	vmov	r2, s15
 8102ec6:	687b      	ldr	r3, [r7, #4]
 8102ec8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8102eca:	e008      	b.n	8102ede <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	2200      	movs	r2, #0
 8102ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	2200      	movs	r2, #0
 8102ed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	2200      	movs	r2, #0
 8102edc:	609a      	str	r2, [r3, #8]
}
 8102ede:	bf00      	nop
 8102ee0:	3724      	adds	r7, #36	@ 0x24
 8102ee2:	46bd      	mov	sp, r7
 8102ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ee8:	4770      	bx	lr
 8102eea:	bf00      	nop
 8102eec:	58024400 	.word	0x58024400
 8102ef0:	03d09000 	.word	0x03d09000
 8102ef4:	46000000 	.word	0x46000000
 8102ef8:	4c742400 	.word	0x4c742400
 8102efc:	4a742400 	.word	0x4a742400
 8102f00:	4bbebc20 	.word	0x4bbebc20

08102f04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102f04:	b580      	push	{r7, lr}
 8102f06:	b084      	sub	sp, #16
 8102f08:	af00      	add	r7, sp, #0
 8102f0a:	6078      	str	r0, [r7, #4]
 8102f0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102f0e:	2300      	movs	r3, #0
 8102f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102f12:	4b54      	ldr	r3, [pc, #336]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102f16:	f003 0303 	and.w	r3, r3, #3
 8102f1a:	2b03      	cmp	r3, #3
 8102f1c:	d101      	bne.n	8102f22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102f1e:	2301      	movs	r3, #1
 8102f20:	e09b      	b.n	810305a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102f22:	4b50      	ldr	r3, [pc, #320]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102f24:	681b      	ldr	r3, [r3, #0]
 8102f26:	4a4f      	ldr	r2, [pc, #316]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102f28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8102f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102f2e:	f7fd fdd9 	bl	8100ae4 <HAL_GetTick>
 8102f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102f34:	e008      	b.n	8102f48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8102f36:	f7fd fdd5 	bl	8100ae4 <HAL_GetTick>
 8102f3a:	4602      	mov	r2, r0
 8102f3c:	68bb      	ldr	r3, [r7, #8]
 8102f3e:	1ad3      	subs	r3, r2, r3
 8102f40:	2b02      	cmp	r3, #2
 8102f42:	d901      	bls.n	8102f48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102f44:	2303      	movs	r3, #3
 8102f46:	e088      	b.n	810305a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102f48:	4b46      	ldr	r3, [pc, #280]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102f4a:	681b      	ldr	r3, [r3, #0]
 8102f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8102f50:	2b00      	cmp	r3, #0
 8102f52:	d1f0      	bne.n	8102f36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102f54:	4b43      	ldr	r3, [pc, #268]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102f58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8102f5c:	687b      	ldr	r3, [r7, #4]
 8102f5e:	681b      	ldr	r3, [r3, #0]
 8102f60:	031b      	lsls	r3, r3, #12
 8102f62:	4940      	ldr	r1, [pc, #256]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102f64:	4313      	orrs	r3, r2
 8102f66:	628b      	str	r3, [r1, #40]	@ 0x28
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	685b      	ldr	r3, [r3, #4]
 8102f6c:	3b01      	subs	r3, #1
 8102f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	689b      	ldr	r3, [r3, #8]
 8102f76:	3b01      	subs	r3, #1
 8102f78:	025b      	lsls	r3, r3, #9
 8102f7a:	b29b      	uxth	r3, r3
 8102f7c:	431a      	orrs	r2, r3
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	68db      	ldr	r3, [r3, #12]
 8102f82:	3b01      	subs	r3, #1
 8102f84:	041b      	lsls	r3, r3, #16
 8102f86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8102f8a:	431a      	orrs	r2, r3
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	691b      	ldr	r3, [r3, #16]
 8102f90:	3b01      	subs	r3, #1
 8102f92:	061b      	lsls	r3, r3, #24
 8102f94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8102f98:	4932      	ldr	r1, [pc, #200]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102f9a:	4313      	orrs	r3, r2
 8102f9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102f9e:	4b31      	ldr	r3, [pc, #196]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fa2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	695b      	ldr	r3, [r3, #20]
 8102faa:	492e      	ldr	r1, [pc, #184]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102fac:	4313      	orrs	r3, r2
 8102fae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fb4:	f023 0220 	bic.w	r2, r3, #32
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	699b      	ldr	r3, [r3, #24]
 8102fbc:	4929      	ldr	r1, [pc, #164]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102fbe:	4313      	orrs	r3, r2
 8102fc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102fc2:	4b28      	ldr	r3, [pc, #160]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fc6:	4a27      	ldr	r2, [pc, #156]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102fc8:	f023 0310 	bic.w	r3, r3, #16
 8102fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102fce:	4b25      	ldr	r3, [pc, #148]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102fd6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8102fda:	687a      	ldr	r2, [r7, #4]
 8102fdc:	69d2      	ldr	r2, [r2, #28]
 8102fde:	00d2      	lsls	r2, r2, #3
 8102fe0:	4920      	ldr	r1, [pc, #128]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102fe2:	4313      	orrs	r3, r2
 8102fe4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fea:	4a1e      	ldr	r2, [pc, #120]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102fec:	f043 0310 	orr.w	r3, r3, #16
 8102ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8102ff2:	683b      	ldr	r3, [r7, #0]
 8102ff4:	2b00      	cmp	r3, #0
 8102ff6:	d106      	bne.n	8103006 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102ffc:	4a19      	ldr	r2, [pc, #100]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8102ffe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8103002:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103004:	e00f      	b.n	8103026 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103006:	683b      	ldr	r3, [r7, #0]
 8103008:	2b01      	cmp	r3, #1
 810300a:	d106      	bne.n	810301a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810300c:	4b15      	ldr	r3, [pc, #84]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 810300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103010:	4a14      	ldr	r2, [pc, #80]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8103012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8103016:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103018:	e005      	b.n	8103026 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810301a:	4b12      	ldr	r3, [pc, #72]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 810301c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810301e:	4a11      	ldr	r2, [pc, #68]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8103020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103024:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103026:	4b0f      	ldr	r3, [pc, #60]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 8103028:	681b      	ldr	r3, [r3, #0]
 810302a:	4a0e      	ldr	r2, [pc, #56]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 810302c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8103030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103032:	f7fd fd57 	bl	8100ae4 <HAL_GetTick>
 8103036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103038:	e008      	b.n	810304c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810303a:	f7fd fd53 	bl	8100ae4 <HAL_GetTick>
 810303e:	4602      	mov	r2, r0
 8103040:	68bb      	ldr	r3, [r7, #8]
 8103042:	1ad3      	subs	r3, r2, r3
 8103044:	2b02      	cmp	r3, #2
 8103046:	d901      	bls.n	810304c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103048:	2303      	movs	r3, #3
 810304a:	e006      	b.n	810305a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810304c:	4b05      	ldr	r3, [pc, #20]	@ (8103064 <RCCEx_PLL2_Config+0x160>)
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103054:	2b00      	cmp	r3, #0
 8103056:	d0f0      	beq.n	810303a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103058:	7bfb      	ldrb	r3, [r7, #15]
}
 810305a:	4618      	mov	r0, r3
 810305c:	3710      	adds	r7, #16
 810305e:	46bd      	mov	sp, r7
 8103060:	bd80      	pop	{r7, pc}
 8103062:	bf00      	nop
 8103064:	58024400 	.word	0x58024400

08103068 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103068:	b580      	push	{r7, lr}
 810306a:	b084      	sub	sp, #16
 810306c:	af00      	add	r7, sp, #0
 810306e:	6078      	str	r0, [r7, #4]
 8103070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103072:	2300      	movs	r3, #0
 8103074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103076:	4b54      	ldr	r3, [pc, #336]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810307a:	f003 0303 	and.w	r3, r3, #3
 810307e:	2b03      	cmp	r3, #3
 8103080:	d101      	bne.n	8103086 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103082:	2301      	movs	r3, #1
 8103084:	e09b      	b.n	81031be <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103086:	4b50      	ldr	r3, [pc, #320]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103088:	681b      	ldr	r3, [r3, #0]
 810308a:	4a4f      	ldr	r2, [pc, #316]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 810308c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8103090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103092:	f7fd fd27 	bl	8100ae4 <HAL_GetTick>
 8103096:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103098:	e008      	b.n	81030ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810309a:	f7fd fd23 	bl	8100ae4 <HAL_GetTick>
 810309e:	4602      	mov	r2, r0
 81030a0:	68bb      	ldr	r3, [r7, #8]
 81030a2:	1ad3      	subs	r3, r2, r3
 81030a4:	2b02      	cmp	r3, #2
 81030a6:	d901      	bls.n	81030ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81030a8:	2303      	movs	r3, #3
 81030aa:	e088      	b.n	81031be <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81030ac:	4b46      	ldr	r3, [pc, #280]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81030b4:	2b00      	cmp	r3, #0
 81030b6:	d1f0      	bne.n	810309a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81030b8:	4b43      	ldr	r3, [pc, #268]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 81030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81030bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	051b      	lsls	r3, r3, #20
 81030c6:	4940      	ldr	r1, [pc, #256]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 81030c8:	4313      	orrs	r3, r2
 81030ca:	628b      	str	r3, [r1, #40]	@ 0x28
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	685b      	ldr	r3, [r3, #4]
 81030d0:	3b01      	subs	r3, #1
 81030d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	689b      	ldr	r3, [r3, #8]
 81030da:	3b01      	subs	r3, #1
 81030dc:	025b      	lsls	r3, r3, #9
 81030de:	b29b      	uxth	r3, r3
 81030e0:	431a      	orrs	r2, r3
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	68db      	ldr	r3, [r3, #12]
 81030e6:	3b01      	subs	r3, #1
 81030e8:	041b      	lsls	r3, r3, #16
 81030ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81030ee:	431a      	orrs	r2, r3
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	691b      	ldr	r3, [r3, #16]
 81030f4:	3b01      	subs	r3, #1
 81030f6:	061b      	lsls	r3, r3, #24
 81030f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81030fc:	4932      	ldr	r1, [pc, #200]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 81030fe:	4313      	orrs	r3, r2
 8103100:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103102:	4b31      	ldr	r3, [pc, #196]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103106:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	695b      	ldr	r3, [r3, #20]
 810310e:	492e      	ldr	r1, [pc, #184]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103110:	4313      	orrs	r3, r2
 8103112:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103114:	4b2c      	ldr	r3, [pc, #176]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103118:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	699b      	ldr	r3, [r3, #24]
 8103120:	4929      	ldr	r1, [pc, #164]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103122:	4313      	orrs	r3, r2
 8103124:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103126:	4b28      	ldr	r3, [pc, #160]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810312a:	4a27      	ldr	r2, [pc, #156]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 810312c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8103130:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103132:	4b25      	ldr	r3, [pc, #148]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103136:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810313a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810313e:	687a      	ldr	r2, [r7, #4]
 8103140:	69d2      	ldr	r2, [r2, #28]
 8103142:	00d2      	lsls	r2, r2, #3
 8103144:	4920      	ldr	r1, [pc, #128]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103146:	4313      	orrs	r3, r2
 8103148:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810314a:	4b1f      	ldr	r3, [pc, #124]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 810314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810314e:	4a1e      	ldr	r2, [pc, #120]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103154:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103156:	683b      	ldr	r3, [r7, #0]
 8103158:	2b00      	cmp	r3, #0
 810315a:	d106      	bne.n	810316a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810315c:	4b1a      	ldr	r3, [pc, #104]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 810315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103160:	4a19      	ldr	r2, [pc, #100]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103162:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8103166:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103168:	e00f      	b.n	810318a <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810316a:	683b      	ldr	r3, [r7, #0]
 810316c:	2b01      	cmp	r3, #1
 810316e:	d106      	bne.n	810317e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103170:	4b15      	ldr	r3, [pc, #84]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103174:	4a14      	ldr	r2, [pc, #80]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103176:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810317a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810317c:	e005      	b.n	810318a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810317e:	4b12      	ldr	r3, [pc, #72]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103182:	4a11      	ldr	r2, [pc, #68]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103184:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103188:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810318a:	4b0f      	ldr	r3, [pc, #60]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 810318c:	681b      	ldr	r3, [r3, #0]
 810318e:	4a0e      	ldr	r2, [pc, #56]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 8103190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8103194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103196:	f7fd fca5 	bl	8100ae4 <HAL_GetTick>
 810319a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810319c:	e008      	b.n	81031b0 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810319e:	f7fd fca1 	bl	8100ae4 <HAL_GetTick>
 81031a2:	4602      	mov	r2, r0
 81031a4:	68bb      	ldr	r3, [r7, #8]
 81031a6:	1ad3      	subs	r3, r2, r3
 81031a8:	2b02      	cmp	r3, #2
 81031aa:	d901      	bls.n	81031b0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81031ac:	2303      	movs	r3, #3
 81031ae:	e006      	b.n	81031be <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81031b0:	4b05      	ldr	r3, [pc, #20]	@ (81031c8 <RCCEx_PLL3_Config+0x160>)
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81031b8:	2b00      	cmp	r3, #0
 81031ba:	d0f0      	beq.n	810319e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 81031be:	4618      	mov	r0, r3
 81031c0:	3710      	adds	r7, #16
 81031c2:	46bd      	mov	sp, r7
 81031c4:	bd80      	pop	{r7, pc}
 81031c6:	bf00      	nop
 81031c8:	58024400 	.word	0x58024400

081031cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81031cc:	b580      	push	{r7, lr}
 81031ce:	b082      	sub	sp, #8
 81031d0:	af00      	add	r7, sp, #0
 81031d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	2b00      	cmp	r3, #0
 81031d8:	d101      	bne.n	81031de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81031da:	2301      	movs	r3, #1
 81031dc:	e042      	b.n	8103264 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81031e4:	2b00      	cmp	r3, #0
 81031e6:	d106      	bne.n	81031f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	2200      	movs	r2, #0
 81031ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81031f0:	6878      	ldr	r0, [r7, #4]
 81031f2:	f7fd fb3b 	bl	810086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	2224      	movs	r2, #36	@ 0x24
 81031fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 81031fe:	687b      	ldr	r3, [r7, #4]
 8103200:	681b      	ldr	r3, [r3, #0]
 8103202:	681a      	ldr	r2, [r3, #0]
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	681b      	ldr	r3, [r3, #0]
 8103208:	f022 0201 	bic.w	r2, r2, #1
 810320c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810320e:	687b      	ldr	r3, [r7, #4]
 8103210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103212:	2b00      	cmp	r3, #0
 8103214:	d002      	beq.n	810321c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8103216:	6878      	ldr	r0, [r7, #4]
 8103218:	f000 fe24 	bl	8103e64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810321c:	6878      	ldr	r0, [r7, #4]
 810321e:	f000 f8b9 	bl	8103394 <UART_SetConfig>
 8103222:	4603      	mov	r3, r0
 8103224:	2b01      	cmp	r3, #1
 8103226:	d101      	bne.n	810322c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8103228:	2301      	movs	r3, #1
 810322a:	e01b      	b.n	8103264 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810322c:	687b      	ldr	r3, [r7, #4]
 810322e:	681b      	ldr	r3, [r3, #0]
 8103230:	685a      	ldr	r2, [r3, #4]
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810323a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	681b      	ldr	r3, [r3, #0]
 8103240:	689a      	ldr	r2, [r3, #8]
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	681b      	ldr	r3, [r3, #0]
 8103246:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810324a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	681b      	ldr	r3, [r3, #0]
 8103250:	681a      	ldr	r2, [r3, #0]
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	f042 0201 	orr.w	r2, r2, #1
 810325a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810325c:	6878      	ldr	r0, [r7, #4]
 810325e:	f000 fea3 	bl	8103fa8 <UART_CheckIdleState>
 8103262:	4603      	mov	r3, r0
}
 8103264:	4618      	mov	r0, r3
 8103266:	3708      	adds	r7, #8
 8103268:	46bd      	mov	sp, r7
 810326a:	bd80      	pop	{r7, pc}

0810326c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 810326c:	b480      	push	{r7}
 810326e:	b091      	sub	sp, #68	@ 0x44
 8103270:	af00      	add	r7, sp, #0
 8103272:	60f8      	str	r0, [r7, #12]
 8103274:	60b9      	str	r1, [r7, #8]
 8103276:	4613      	mov	r3, r2
 8103278:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810327a:	68fb      	ldr	r3, [r7, #12]
 810327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103280:	2b20      	cmp	r3, #32
 8103282:	d178      	bne.n	8103376 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8103284:	68bb      	ldr	r3, [r7, #8]
 8103286:	2b00      	cmp	r3, #0
 8103288:	d002      	beq.n	8103290 <HAL_UART_Transmit_IT+0x24>
 810328a:	88fb      	ldrh	r3, [r7, #6]
 810328c:	2b00      	cmp	r3, #0
 810328e:	d101      	bne.n	8103294 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8103290:	2301      	movs	r3, #1
 8103292:	e071      	b.n	8103378 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8103294:	68fb      	ldr	r3, [r7, #12]
 8103296:	68ba      	ldr	r2, [r7, #8]
 8103298:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 810329a:	68fb      	ldr	r3, [r7, #12]
 810329c:	88fa      	ldrh	r2, [r7, #6]
 810329e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 81032a2:	68fb      	ldr	r3, [r7, #12]
 81032a4:	88fa      	ldrh	r2, [r7, #6]
 81032a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 81032aa:	68fb      	ldr	r3, [r7, #12]
 81032ac:	2200      	movs	r2, #0
 81032ae:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81032b0:	68fb      	ldr	r3, [r7, #12]
 81032b2:	2200      	movs	r2, #0
 81032b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81032b8:	68fb      	ldr	r3, [r7, #12]
 81032ba:	2221      	movs	r2, #33	@ 0x21
 81032bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 81032c0:	68fb      	ldr	r3, [r7, #12]
 81032c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81032c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81032c8:	d12a      	bne.n	8103320 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81032ca:	68fb      	ldr	r3, [r7, #12]
 81032cc:	689b      	ldr	r3, [r3, #8]
 81032ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81032d2:	d107      	bne.n	81032e4 <HAL_UART_Transmit_IT+0x78>
 81032d4:	68fb      	ldr	r3, [r7, #12]
 81032d6:	691b      	ldr	r3, [r3, #16]
 81032d8:	2b00      	cmp	r3, #0
 81032da:	d103      	bne.n	81032e4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 81032dc:	68fb      	ldr	r3, [r7, #12]
 81032de:	4a29      	ldr	r2, [pc, #164]	@ (8103384 <HAL_UART_Transmit_IT+0x118>)
 81032e0:	679a      	str	r2, [r3, #120]	@ 0x78
 81032e2:	e002      	b.n	81032ea <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 81032e4:	68fb      	ldr	r3, [r7, #12]
 81032e6:	4a28      	ldr	r2, [pc, #160]	@ (8103388 <HAL_UART_Transmit_IT+0x11c>)
 81032e8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 81032ea:	68fb      	ldr	r3, [r7, #12]
 81032ec:	681b      	ldr	r3, [r3, #0]
 81032ee:	3308      	adds	r3, #8
 81032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81032f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81032f4:	e853 3f00 	ldrex	r3, [r3]
 81032f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 81032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81032fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8103300:	63bb      	str	r3, [r7, #56]	@ 0x38
 8103302:	68fb      	ldr	r3, [r7, #12]
 8103304:	681b      	ldr	r3, [r3, #0]
 8103306:	3308      	adds	r3, #8
 8103308:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810330a:	637a      	str	r2, [r7, #52]	@ 0x34
 810330c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810330e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8103310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8103312:	e841 2300 	strex	r3, r2, [r1]
 8103316:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8103318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810331a:	2b00      	cmp	r3, #0
 810331c:	d1e5      	bne.n	81032ea <HAL_UART_Transmit_IT+0x7e>
 810331e:	e028      	b.n	8103372 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8103320:	68fb      	ldr	r3, [r7, #12]
 8103322:	689b      	ldr	r3, [r3, #8]
 8103324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103328:	d107      	bne.n	810333a <HAL_UART_Transmit_IT+0xce>
 810332a:	68fb      	ldr	r3, [r7, #12]
 810332c:	691b      	ldr	r3, [r3, #16]
 810332e:	2b00      	cmp	r3, #0
 8103330:	d103      	bne.n	810333a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8103332:	68fb      	ldr	r3, [r7, #12]
 8103334:	4a15      	ldr	r2, [pc, #84]	@ (810338c <HAL_UART_Transmit_IT+0x120>)
 8103336:	679a      	str	r2, [r3, #120]	@ 0x78
 8103338:	e002      	b.n	8103340 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 810333a:	68fb      	ldr	r3, [r7, #12]
 810333c:	4a14      	ldr	r2, [pc, #80]	@ (8103390 <HAL_UART_Transmit_IT+0x124>)
 810333e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8103340:	68fb      	ldr	r3, [r7, #12]
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103346:	697b      	ldr	r3, [r7, #20]
 8103348:	e853 3f00 	ldrex	r3, [r3]
 810334c:	613b      	str	r3, [r7, #16]
   return(result);
 810334e:	693b      	ldr	r3, [r7, #16]
 8103350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8103354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103356:	68fb      	ldr	r3, [r7, #12]
 8103358:	681b      	ldr	r3, [r3, #0]
 810335a:	461a      	mov	r2, r3
 810335c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810335e:	623b      	str	r3, [r7, #32]
 8103360:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103362:	69f9      	ldr	r1, [r7, #28]
 8103364:	6a3a      	ldr	r2, [r7, #32]
 8103366:	e841 2300 	strex	r3, r2, [r1]
 810336a:	61bb      	str	r3, [r7, #24]
   return(result);
 810336c:	69bb      	ldr	r3, [r7, #24]
 810336e:	2b00      	cmp	r3, #0
 8103370:	d1e6      	bne.n	8103340 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8103372:	2300      	movs	r3, #0
 8103374:	e000      	b.n	8103378 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8103376:	2302      	movs	r3, #2
  }
}
 8103378:	4618      	mov	r0, r3
 810337a:	3744      	adds	r7, #68	@ 0x44
 810337c:	46bd      	mov	sp, r7
 810337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103382:	4770      	bx	lr
 8103384:	081044fd 	.word	0x081044fd
 8103388:	0810441d 	.word	0x0810441d
 810338c:	0810435b 	.word	0x0810435b
 8103390:	081042a3 	.word	0x081042a3

08103394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8103394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103398:	b092      	sub	sp, #72	@ 0x48
 810339a:	af00      	add	r7, sp, #0
 810339c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810339e:	2300      	movs	r3, #0
 81033a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81033a4:	697b      	ldr	r3, [r7, #20]
 81033a6:	689a      	ldr	r2, [r3, #8]
 81033a8:	697b      	ldr	r3, [r7, #20]
 81033aa:	691b      	ldr	r3, [r3, #16]
 81033ac:	431a      	orrs	r2, r3
 81033ae:	697b      	ldr	r3, [r7, #20]
 81033b0:	695b      	ldr	r3, [r3, #20]
 81033b2:	431a      	orrs	r2, r3
 81033b4:	697b      	ldr	r3, [r7, #20]
 81033b6:	69db      	ldr	r3, [r3, #28]
 81033b8:	4313      	orrs	r3, r2
 81033ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81033bc:	697b      	ldr	r3, [r7, #20]
 81033be:	681b      	ldr	r3, [r3, #0]
 81033c0:	681a      	ldr	r2, [r3, #0]
 81033c2:	4bbd      	ldr	r3, [pc, #756]	@ (81036b8 <UART_SetConfig+0x324>)
 81033c4:	4013      	ands	r3, r2
 81033c6:	697a      	ldr	r2, [r7, #20]
 81033c8:	6812      	ldr	r2, [r2, #0]
 81033ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81033cc:	430b      	orrs	r3, r1
 81033ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81033d0:	697b      	ldr	r3, [r7, #20]
 81033d2:	681b      	ldr	r3, [r3, #0]
 81033d4:	685b      	ldr	r3, [r3, #4]
 81033d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81033da:	697b      	ldr	r3, [r7, #20]
 81033dc:	68da      	ldr	r2, [r3, #12]
 81033de:	697b      	ldr	r3, [r7, #20]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	430a      	orrs	r2, r1
 81033e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81033e6:	697b      	ldr	r3, [r7, #20]
 81033e8:	699b      	ldr	r3, [r3, #24]
 81033ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81033ec:	697b      	ldr	r3, [r7, #20]
 81033ee:	681b      	ldr	r3, [r3, #0]
 81033f0:	4ab2      	ldr	r2, [pc, #712]	@ (81036bc <UART_SetConfig+0x328>)
 81033f2:	4293      	cmp	r3, r2
 81033f4:	d004      	beq.n	8103400 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81033f6:	697b      	ldr	r3, [r7, #20]
 81033f8:	6a1b      	ldr	r3, [r3, #32]
 81033fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81033fc:	4313      	orrs	r3, r2
 81033fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8103400:	697b      	ldr	r3, [r7, #20]
 8103402:	681b      	ldr	r3, [r3, #0]
 8103404:	689b      	ldr	r3, [r3, #8]
 8103406:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810340a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810340e:	697a      	ldr	r2, [r7, #20]
 8103410:	6812      	ldr	r2, [r2, #0]
 8103412:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8103414:	430b      	orrs	r3, r1
 8103416:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8103418:	697b      	ldr	r3, [r7, #20]
 810341a:	681b      	ldr	r3, [r3, #0]
 810341c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810341e:	f023 010f 	bic.w	r1, r3, #15
 8103422:	697b      	ldr	r3, [r7, #20]
 8103424:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8103426:	697b      	ldr	r3, [r7, #20]
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	430a      	orrs	r2, r1
 810342c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810342e:	697b      	ldr	r3, [r7, #20]
 8103430:	681b      	ldr	r3, [r3, #0]
 8103432:	4aa3      	ldr	r2, [pc, #652]	@ (81036c0 <UART_SetConfig+0x32c>)
 8103434:	4293      	cmp	r3, r2
 8103436:	d177      	bne.n	8103528 <UART_SetConfig+0x194>
 8103438:	4ba2      	ldr	r3, [pc, #648]	@ (81036c4 <UART_SetConfig+0x330>)
 810343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810343c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103440:	2b28      	cmp	r3, #40	@ 0x28
 8103442:	d86d      	bhi.n	8103520 <UART_SetConfig+0x18c>
 8103444:	a201      	add	r2, pc, #4	@ (adr r2, 810344c <UART_SetConfig+0xb8>)
 8103446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810344a:	bf00      	nop
 810344c:	081034f1 	.word	0x081034f1
 8103450:	08103521 	.word	0x08103521
 8103454:	08103521 	.word	0x08103521
 8103458:	08103521 	.word	0x08103521
 810345c:	08103521 	.word	0x08103521
 8103460:	08103521 	.word	0x08103521
 8103464:	08103521 	.word	0x08103521
 8103468:	08103521 	.word	0x08103521
 810346c:	081034f9 	.word	0x081034f9
 8103470:	08103521 	.word	0x08103521
 8103474:	08103521 	.word	0x08103521
 8103478:	08103521 	.word	0x08103521
 810347c:	08103521 	.word	0x08103521
 8103480:	08103521 	.word	0x08103521
 8103484:	08103521 	.word	0x08103521
 8103488:	08103521 	.word	0x08103521
 810348c:	08103501 	.word	0x08103501
 8103490:	08103521 	.word	0x08103521
 8103494:	08103521 	.word	0x08103521
 8103498:	08103521 	.word	0x08103521
 810349c:	08103521 	.word	0x08103521
 81034a0:	08103521 	.word	0x08103521
 81034a4:	08103521 	.word	0x08103521
 81034a8:	08103521 	.word	0x08103521
 81034ac:	08103509 	.word	0x08103509
 81034b0:	08103521 	.word	0x08103521
 81034b4:	08103521 	.word	0x08103521
 81034b8:	08103521 	.word	0x08103521
 81034bc:	08103521 	.word	0x08103521
 81034c0:	08103521 	.word	0x08103521
 81034c4:	08103521 	.word	0x08103521
 81034c8:	08103521 	.word	0x08103521
 81034cc:	08103511 	.word	0x08103511
 81034d0:	08103521 	.word	0x08103521
 81034d4:	08103521 	.word	0x08103521
 81034d8:	08103521 	.word	0x08103521
 81034dc:	08103521 	.word	0x08103521
 81034e0:	08103521 	.word	0x08103521
 81034e4:	08103521 	.word	0x08103521
 81034e8:	08103521 	.word	0x08103521
 81034ec:	08103519 	.word	0x08103519
 81034f0:	2301      	movs	r3, #1
 81034f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81034f6:	e220      	b.n	810393a <UART_SetConfig+0x5a6>
 81034f8:	2304      	movs	r3, #4
 81034fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81034fe:	e21c      	b.n	810393a <UART_SetConfig+0x5a6>
 8103500:	2308      	movs	r3, #8
 8103502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103506:	e218      	b.n	810393a <UART_SetConfig+0x5a6>
 8103508:	2310      	movs	r3, #16
 810350a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810350e:	e214      	b.n	810393a <UART_SetConfig+0x5a6>
 8103510:	2320      	movs	r3, #32
 8103512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103516:	e210      	b.n	810393a <UART_SetConfig+0x5a6>
 8103518:	2340      	movs	r3, #64	@ 0x40
 810351a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810351e:	e20c      	b.n	810393a <UART_SetConfig+0x5a6>
 8103520:	2380      	movs	r3, #128	@ 0x80
 8103522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103526:	e208      	b.n	810393a <UART_SetConfig+0x5a6>
 8103528:	697b      	ldr	r3, [r7, #20]
 810352a:	681b      	ldr	r3, [r3, #0]
 810352c:	4a66      	ldr	r2, [pc, #408]	@ (81036c8 <UART_SetConfig+0x334>)
 810352e:	4293      	cmp	r3, r2
 8103530:	d130      	bne.n	8103594 <UART_SetConfig+0x200>
 8103532:	4b64      	ldr	r3, [pc, #400]	@ (81036c4 <UART_SetConfig+0x330>)
 8103534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103536:	f003 0307 	and.w	r3, r3, #7
 810353a:	2b05      	cmp	r3, #5
 810353c:	d826      	bhi.n	810358c <UART_SetConfig+0x1f8>
 810353e:	a201      	add	r2, pc, #4	@ (adr r2, 8103544 <UART_SetConfig+0x1b0>)
 8103540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103544:	0810355d 	.word	0x0810355d
 8103548:	08103565 	.word	0x08103565
 810354c:	0810356d 	.word	0x0810356d
 8103550:	08103575 	.word	0x08103575
 8103554:	0810357d 	.word	0x0810357d
 8103558:	08103585 	.word	0x08103585
 810355c:	2300      	movs	r3, #0
 810355e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103562:	e1ea      	b.n	810393a <UART_SetConfig+0x5a6>
 8103564:	2304      	movs	r3, #4
 8103566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810356a:	e1e6      	b.n	810393a <UART_SetConfig+0x5a6>
 810356c:	2308      	movs	r3, #8
 810356e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103572:	e1e2      	b.n	810393a <UART_SetConfig+0x5a6>
 8103574:	2310      	movs	r3, #16
 8103576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810357a:	e1de      	b.n	810393a <UART_SetConfig+0x5a6>
 810357c:	2320      	movs	r3, #32
 810357e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103582:	e1da      	b.n	810393a <UART_SetConfig+0x5a6>
 8103584:	2340      	movs	r3, #64	@ 0x40
 8103586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810358a:	e1d6      	b.n	810393a <UART_SetConfig+0x5a6>
 810358c:	2380      	movs	r3, #128	@ 0x80
 810358e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103592:	e1d2      	b.n	810393a <UART_SetConfig+0x5a6>
 8103594:	697b      	ldr	r3, [r7, #20]
 8103596:	681b      	ldr	r3, [r3, #0]
 8103598:	4a4c      	ldr	r2, [pc, #304]	@ (81036cc <UART_SetConfig+0x338>)
 810359a:	4293      	cmp	r3, r2
 810359c:	d130      	bne.n	8103600 <UART_SetConfig+0x26c>
 810359e:	4b49      	ldr	r3, [pc, #292]	@ (81036c4 <UART_SetConfig+0x330>)
 81035a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81035a2:	f003 0307 	and.w	r3, r3, #7
 81035a6:	2b05      	cmp	r3, #5
 81035a8:	d826      	bhi.n	81035f8 <UART_SetConfig+0x264>
 81035aa:	a201      	add	r2, pc, #4	@ (adr r2, 81035b0 <UART_SetConfig+0x21c>)
 81035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035b0:	081035c9 	.word	0x081035c9
 81035b4:	081035d1 	.word	0x081035d1
 81035b8:	081035d9 	.word	0x081035d9
 81035bc:	081035e1 	.word	0x081035e1
 81035c0:	081035e9 	.word	0x081035e9
 81035c4:	081035f1 	.word	0x081035f1
 81035c8:	2300      	movs	r3, #0
 81035ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035ce:	e1b4      	b.n	810393a <UART_SetConfig+0x5a6>
 81035d0:	2304      	movs	r3, #4
 81035d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035d6:	e1b0      	b.n	810393a <UART_SetConfig+0x5a6>
 81035d8:	2308      	movs	r3, #8
 81035da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035de:	e1ac      	b.n	810393a <UART_SetConfig+0x5a6>
 81035e0:	2310      	movs	r3, #16
 81035e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035e6:	e1a8      	b.n	810393a <UART_SetConfig+0x5a6>
 81035e8:	2320      	movs	r3, #32
 81035ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035ee:	e1a4      	b.n	810393a <UART_SetConfig+0x5a6>
 81035f0:	2340      	movs	r3, #64	@ 0x40
 81035f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035f6:	e1a0      	b.n	810393a <UART_SetConfig+0x5a6>
 81035f8:	2380      	movs	r3, #128	@ 0x80
 81035fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035fe:	e19c      	b.n	810393a <UART_SetConfig+0x5a6>
 8103600:	697b      	ldr	r3, [r7, #20]
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	4a32      	ldr	r2, [pc, #200]	@ (81036d0 <UART_SetConfig+0x33c>)
 8103606:	4293      	cmp	r3, r2
 8103608:	d130      	bne.n	810366c <UART_SetConfig+0x2d8>
 810360a:	4b2e      	ldr	r3, [pc, #184]	@ (81036c4 <UART_SetConfig+0x330>)
 810360c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810360e:	f003 0307 	and.w	r3, r3, #7
 8103612:	2b05      	cmp	r3, #5
 8103614:	d826      	bhi.n	8103664 <UART_SetConfig+0x2d0>
 8103616:	a201      	add	r2, pc, #4	@ (adr r2, 810361c <UART_SetConfig+0x288>)
 8103618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810361c:	08103635 	.word	0x08103635
 8103620:	0810363d 	.word	0x0810363d
 8103624:	08103645 	.word	0x08103645
 8103628:	0810364d 	.word	0x0810364d
 810362c:	08103655 	.word	0x08103655
 8103630:	0810365d 	.word	0x0810365d
 8103634:	2300      	movs	r3, #0
 8103636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810363a:	e17e      	b.n	810393a <UART_SetConfig+0x5a6>
 810363c:	2304      	movs	r3, #4
 810363e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103642:	e17a      	b.n	810393a <UART_SetConfig+0x5a6>
 8103644:	2308      	movs	r3, #8
 8103646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810364a:	e176      	b.n	810393a <UART_SetConfig+0x5a6>
 810364c:	2310      	movs	r3, #16
 810364e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103652:	e172      	b.n	810393a <UART_SetConfig+0x5a6>
 8103654:	2320      	movs	r3, #32
 8103656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810365a:	e16e      	b.n	810393a <UART_SetConfig+0x5a6>
 810365c:	2340      	movs	r3, #64	@ 0x40
 810365e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103662:	e16a      	b.n	810393a <UART_SetConfig+0x5a6>
 8103664:	2380      	movs	r3, #128	@ 0x80
 8103666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810366a:	e166      	b.n	810393a <UART_SetConfig+0x5a6>
 810366c:	697b      	ldr	r3, [r7, #20]
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	4a18      	ldr	r2, [pc, #96]	@ (81036d4 <UART_SetConfig+0x340>)
 8103672:	4293      	cmp	r3, r2
 8103674:	d140      	bne.n	81036f8 <UART_SetConfig+0x364>
 8103676:	4b13      	ldr	r3, [pc, #76]	@ (81036c4 <UART_SetConfig+0x330>)
 8103678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810367a:	f003 0307 	and.w	r3, r3, #7
 810367e:	2b05      	cmp	r3, #5
 8103680:	d836      	bhi.n	81036f0 <UART_SetConfig+0x35c>
 8103682:	a201      	add	r2, pc, #4	@ (adr r2, 8103688 <UART_SetConfig+0x2f4>)
 8103684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103688:	081036a1 	.word	0x081036a1
 810368c:	081036a9 	.word	0x081036a9
 8103690:	081036b1 	.word	0x081036b1
 8103694:	081036d9 	.word	0x081036d9
 8103698:	081036e1 	.word	0x081036e1
 810369c:	081036e9 	.word	0x081036e9
 81036a0:	2300      	movs	r3, #0
 81036a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036a6:	e148      	b.n	810393a <UART_SetConfig+0x5a6>
 81036a8:	2304      	movs	r3, #4
 81036aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036ae:	e144      	b.n	810393a <UART_SetConfig+0x5a6>
 81036b0:	2308      	movs	r3, #8
 81036b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036b6:	e140      	b.n	810393a <UART_SetConfig+0x5a6>
 81036b8:	cfff69f3 	.word	0xcfff69f3
 81036bc:	58000c00 	.word	0x58000c00
 81036c0:	40011000 	.word	0x40011000
 81036c4:	58024400 	.word	0x58024400
 81036c8:	40004400 	.word	0x40004400
 81036cc:	40004800 	.word	0x40004800
 81036d0:	40004c00 	.word	0x40004c00
 81036d4:	40005000 	.word	0x40005000
 81036d8:	2310      	movs	r3, #16
 81036da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036de:	e12c      	b.n	810393a <UART_SetConfig+0x5a6>
 81036e0:	2320      	movs	r3, #32
 81036e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036e6:	e128      	b.n	810393a <UART_SetConfig+0x5a6>
 81036e8:	2340      	movs	r3, #64	@ 0x40
 81036ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036ee:	e124      	b.n	810393a <UART_SetConfig+0x5a6>
 81036f0:	2380      	movs	r3, #128	@ 0x80
 81036f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036f6:	e120      	b.n	810393a <UART_SetConfig+0x5a6>
 81036f8:	697b      	ldr	r3, [r7, #20]
 81036fa:	681b      	ldr	r3, [r3, #0]
 81036fc:	4acb      	ldr	r2, [pc, #812]	@ (8103a2c <UART_SetConfig+0x698>)
 81036fe:	4293      	cmp	r3, r2
 8103700:	d176      	bne.n	81037f0 <UART_SetConfig+0x45c>
 8103702:	4bcb      	ldr	r3, [pc, #812]	@ (8103a30 <UART_SetConfig+0x69c>)
 8103704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810370a:	2b28      	cmp	r3, #40	@ 0x28
 810370c:	d86c      	bhi.n	81037e8 <UART_SetConfig+0x454>
 810370e:	a201      	add	r2, pc, #4	@ (adr r2, 8103714 <UART_SetConfig+0x380>)
 8103710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103714:	081037b9 	.word	0x081037b9
 8103718:	081037e9 	.word	0x081037e9
 810371c:	081037e9 	.word	0x081037e9
 8103720:	081037e9 	.word	0x081037e9
 8103724:	081037e9 	.word	0x081037e9
 8103728:	081037e9 	.word	0x081037e9
 810372c:	081037e9 	.word	0x081037e9
 8103730:	081037e9 	.word	0x081037e9
 8103734:	081037c1 	.word	0x081037c1
 8103738:	081037e9 	.word	0x081037e9
 810373c:	081037e9 	.word	0x081037e9
 8103740:	081037e9 	.word	0x081037e9
 8103744:	081037e9 	.word	0x081037e9
 8103748:	081037e9 	.word	0x081037e9
 810374c:	081037e9 	.word	0x081037e9
 8103750:	081037e9 	.word	0x081037e9
 8103754:	081037c9 	.word	0x081037c9
 8103758:	081037e9 	.word	0x081037e9
 810375c:	081037e9 	.word	0x081037e9
 8103760:	081037e9 	.word	0x081037e9
 8103764:	081037e9 	.word	0x081037e9
 8103768:	081037e9 	.word	0x081037e9
 810376c:	081037e9 	.word	0x081037e9
 8103770:	081037e9 	.word	0x081037e9
 8103774:	081037d1 	.word	0x081037d1
 8103778:	081037e9 	.word	0x081037e9
 810377c:	081037e9 	.word	0x081037e9
 8103780:	081037e9 	.word	0x081037e9
 8103784:	081037e9 	.word	0x081037e9
 8103788:	081037e9 	.word	0x081037e9
 810378c:	081037e9 	.word	0x081037e9
 8103790:	081037e9 	.word	0x081037e9
 8103794:	081037d9 	.word	0x081037d9
 8103798:	081037e9 	.word	0x081037e9
 810379c:	081037e9 	.word	0x081037e9
 81037a0:	081037e9 	.word	0x081037e9
 81037a4:	081037e9 	.word	0x081037e9
 81037a8:	081037e9 	.word	0x081037e9
 81037ac:	081037e9 	.word	0x081037e9
 81037b0:	081037e9 	.word	0x081037e9
 81037b4:	081037e1 	.word	0x081037e1
 81037b8:	2301      	movs	r3, #1
 81037ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037be:	e0bc      	b.n	810393a <UART_SetConfig+0x5a6>
 81037c0:	2304      	movs	r3, #4
 81037c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037c6:	e0b8      	b.n	810393a <UART_SetConfig+0x5a6>
 81037c8:	2308      	movs	r3, #8
 81037ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037ce:	e0b4      	b.n	810393a <UART_SetConfig+0x5a6>
 81037d0:	2310      	movs	r3, #16
 81037d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037d6:	e0b0      	b.n	810393a <UART_SetConfig+0x5a6>
 81037d8:	2320      	movs	r3, #32
 81037da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037de:	e0ac      	b.n	810393a <UART_SetConfig+0x5a6>
 81037e0:	2340      	movs	r3, #64	@ 0x40
 81037e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037e6:	e0a8      	b.n	810393a <UART_SetConfig+0x5a6>
 81037e8:	2380      	movs	r3, #128	@ 0x80
 81037ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037ee:	e0a4      	b.n	810393a <UART_SetConfig+0x5a6>
 81037f0:	697b      	ldr	r3, [r7, #20]
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	4a8f      	ldr	r2, [pc, #572]	@ (8103a34 <UART_SetConfig+0x6a0>)
 81037f6:	4293      	cmp	r3, r2
 81037f8:	d130      	bne.n	810385c <UART_SetConfig+0x4c8>
 81037fa:	4b8d      	ldr	r3, [pc, #564]	@ (8103a30 <UART_SetConfig+0x69c>)
 81037fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81037fe:	f003 0307 	and.w	r3, r3, #7
 8103802:	2b05      	cmp	r3, #5
 8103804:	d826      	bhi.n	8103854 <UART_SetConfig+0x4c0>
 8103806:	a201      	add	r2, pc, #4	@ (adr r2, 810380c <UART_SetConfig+0x478>)
 8103808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810380c:	08103825 	.word	0x08103825
 8103810:	0810382d 	.word	0x0810382d
 8103814:	08103835 	.word	0x08103835
 8103818:	0810383d 	.word	0x0810383d
 810381c:	08103845 	.word	0x08103845
 8103820:	0810384d 	.word	0x0810384d
 8103824:	2300      	movs	r3, #0
 8103826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810382a:	e086      	b.n	810393a <UART_SetConfig+0x5a6>
 810382c:	2304      	movs	r3, #4
 810382e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103832:	e082      	b.n	810393a <UART_SetConfig+0x5a6>
 8103834:	2308      	movs	r3, #8
 8103836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810383a:	e07e      	b.n	810393a <UART_SetConfig+0x5a6>
 810383c:	2310      	movs	r3, #16
 810383e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103842:	e07a      	b.n	810393a <UART_SetConfig+0x5a6>
 8103844:	2320      	movs	r3, #32
 8103846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810384a:	e076      	b.n	810393a <UART_SetConfig+0x5a6>
 810384c:	2340      	movs	r3, #64	@ 0x40
 810384e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103852:	e072      	b.n	810393a <UART_SetConfig+0x5a6>
 8103854:	2380      	movs	r3, #128	@ 0x80
 8103856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810385a:	e06e      	b.n	810393a <UART_SetConfig+0x5a6>
 810385c:	697b      	ldr	r3, [r7, #20]
 810385e:	681b      	ldr	r3, [r3, #0]
 8103860:	4a75      	ldr	r2, [pc, #468]	@ (8103a38 <UART_SetConfig+0x6a4>)
 8103862:	4293      	cmp	r3, r2
 8103864:	d130      	bne.n	81038c8 <UART_SetConfig+0x534>
 8103866:	4b72      	ldr	r3, [pc, #456]	@ (8103a30 <UART_SetConfig+0x69c>)
 8103868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810386a:	f003 0307 	and.w	r3, r3, #7
 810386e:	2b05      	cmp	r3, #5
 8103870:	d826      	bhi.n	81038c0 <UART_SetConfig+0x52c>
 8103872:	a201      	add	r2, pc, #4	@ (adr r2, 8103878 <UART_SetConfig+0x4e4>)
 8103874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103878:	08103891 	.word	0x08103891
 810387c:	08103899 	.word	0x08103899
 8103880:	081038a1 	.word	0x081038a1
 8103884:	081038a9 	.word	0x081038a9
 8103888:	081038b1 	.word	0x081038b1
 810388c:	081038b9 	.word	0x081038b9
 8103890:	2300      	movs	r3, #0
 8103892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103896:	e050      	b.n	810393a <UART_SetConfig+0x5a6>
 8103898:	2304      	movs	r3, #4
 810389a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810389e:	e04c      	b.n	810393a <UART_SetConfig+0x5a6>
 81038a0:	2308      	movs	r3, #8
 81038a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81038a6:	e048      	b.n	810393a <UART_SetConfig+0x5a6>
 81038a8:	2310      	movs	r3, #16
 81038aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81038ae:	e044      	b.n	810393a <UART_SetConfig+0x5a6>
 81038b0:	2320      	movs	r3, #32
 81038b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81038b6:	e040      	b.n	810393a <UART_SetConfig+0x5a6>
 81038b8:	2340      	movs	r3, #64	@ 0x40
 81038ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81038be:	e03c      	b.n	810393a <UART_SetConfig+0x5a6>
 81038c0:	2380      	movs	r3, #128	@ 0x80
 81038c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81038c6:	e038      	b.n	810393a <UART_SetConfig+0x5a6>
 81038c8:	697b      	ldr	r3, [r7, #20]
 81038ca:	681b      	ldr	r3, [r3, #0]
 81038cc:	4a5b      	ldr	r2, [pc, #364]	@ (8103a3c <UART_SetConfig+0x6a8>)
 81038ce:	4293      	cmp	r3, r2
 81038d0:	d130      	bne.n	8103934 <UART_SetConfig+0x5a0>
 81038d2:	4b57      	ldr	r3, [pc, #348]	@ (8103a30 <UART_SetConfig+0x69c>)
 81038d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81038d6:	f003 0307 	and.w	r3, r3, #7
 81038da:	2b05      	cmp	r3, #5
 81038dc:	d826      	bhi.n	810392c <UART_SetConfig+0x598>
 81038de:	a201      	add	r2, pc, #4	@ (adr r2, 81038e4 <UART_SetConfig+0x550>)
 81038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81038e4:	081038fd 	.word	0x081038fd
 81038e8:	08103905 	.word	0x08103905
 81038ec:	0810390d 	.word	0x0810390d
 81038f0:	08103915 	.word	0x08103915
 81038f4:	0810391d 	.word	0x0810391d
 81038f8:	08103925 	.word	0x08103925
 81038fc:	2302      	movs	r3, #2
 81038fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103902:	e01a      	b.n	810393a <UART_SetConfig+0x5a6>
 8103904:	2304      	movs	r3, #4
 8103906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810390a:	e016      	b.n	810393a <UART_SetConfig+0x5a6>
 810390c:	2308      	movs	r3, #8
 810390e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103912:	e012      	b.n	810393a <UART_SetConfig+0x5a6>
 8103914:	2310      	movs	r3, #16
 8103916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810391a:	e00e      	b.n	810393a <UART_SetConfig+0x5a6>
 810391c:	2320      	movs	r3, #32
 810391e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103922:	e00a      	b.n	810393a <UART_SetConfig+0x5a6>
 8103924:	2340      	movs	r3, #64	@ 0x40
 8103926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810392a:	e006      	b.n	810393a <UART_SetConfig+0x5a6>
 810392c:	2380      	movs	r3, #128	@ 0x80
 810392e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103932:	e002      	b.n	810393a <UART_SetConfig+0x5a6>
 8103934:	2380      	movs	r3, #128	@ 0x80
 8103936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810393a:	697b      	ldr	r3, [r7, #20]
 810393c:	681b      	ldr	r3, [r3, #0]
 810393e:	4a3f      	ldr	r2, [pc, #252]	@ (8103a3c <UART_SetConfig+0x6a8>)
 8103940:	4293      	cmp	r3, r2
 8103942:	f040 80f8 	bne.w	8103b36 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8103946:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810394a:	2b20      	cmp	r3, #32
 810394c:	dc46      	bgt.n	81039dc <UART_SetConfig+0x648>
 810394e:	2b02      	cmp	r3, #2
 8103950:	f2c0 8082 	blt.w	8103a58 <UART_SetConfig+0x6c4>
 8103954:	3b02      	subs	r3, #2
 8103956:	2b1e      	cmp	r3, #30
 8103958:	d87e      	bhi.n	8103a58 <UART_SetConfig+0x6c4>
 810395a:	a201      	add	r2, pc, #4	@ (adr r2, 8103960 <UART_SetConfig+0x5cc>)
 810395c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103960:	081039e3 	.word	0x081039e3
 8103964:	08103a59 	.word	0x08103a59
 8103968:	081039eb 	.word	0x081039eb
 810396c:	08103a59 	.word	0x08103a59
 8103970:	08103a59 	.word	0x08103a59
 8103974:	08103a59 	.word	0x08103a59
 8103978:	081039fb 	.word	0x081039fb
 810397c:	08103a59 	.word	0x08103a59
 8103980:	08103a59 	.word	0x08103a59
 8103984:	08103a59 	.word	0x08103a59
 8103988:	08103a59 	.word	0x08103a59
 810398c:	08103a59 	.word	0x08103a59
 8103990:	08103a59 	.word	0x08103a59
 8103994:	08103a59 	.word	0x08103a59
 8103998:	08103a0b 	.word	0x08103a0b
 810399c:	08103a59 	.word	0x08103a59
 81039a0:	08103a59 	.word	0x08103a59
 81039a4:	08103a59 	.word	0x08103a59
 81039a8:	08103a59 	.word	0x08103a59
 81039ac:	08103a59 	.word	0x08103a59
 81039b0:	08103a59 	.word	0x08103a59
 81039b4:	08103a59 	.word	0x08103a59
 81039b8:	08103a59 	.word	0x08103a59
 81039bc:	08103a59 	.word	0x08103a59
 81039c0:	08103a59 	.word	0x08103a59
 81039c4:	08103a59 	.word	0x08103a59
 81039c8:	08103a59 	.word	0x08103a59
 81039cc:	08103a59 	.word	0x08103a59
 81039d0:	08103a59 	.word	0x08103a59
 81039d4:	08103a59 	.word	0x08103a59
 81039d8:	08103a4b 	.word	0x08103a4b
 81039dc:	2b40      	cmp	r3, #64	@ 0x40
 81039de:	d037      	beq.n	8103a50 <UART_SetConfig+0x6bc>
 81039e0:	e03a      	b.n	8103a58 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81039e2:	f7fe ffd1 	bl	8102988 <HAL_RCCEx_GetD3PCLK1Freq>
 81039e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81039e8:	e03c      	b.n	8103a64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81039ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81039ee:	4618      	mov	r0, r3
 81039f0:	f7fe ffe0 	bl	81029b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81039f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81039f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81039f8:	e034      	b.n	8103a64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81039fa:	f107 0318 	add.w	r3, r7, #24
 81039fe:	4618      	mov	r0, r3
 8103a00:	f7ff f92c 	bl	8102c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103a04:	69fb      	ldr	r3, [r7, #28]
 8103a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103a08:	e02c      	b.n	8103a64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103a0a:	4b09      	ldr	r3, [pc, #36]	@ (8103a30 <UART_SetConfig+0x69c>)
 8103a0c:	681b      	ldr	r3, [r3, #0]
 8103a0e:	f003 0320 	and.w	r3, r3, #32
 8103a12:	2b00      	cmp	r3, #0
 8103a14:	d016      	beq.n	8103a44 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103a16:	4b06      	ldr	r3, [pc, #24]	@ (8103a30 <UART_SetConfig+0x69c>)
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	08db      	lsrs	r3, r3, #3
 8103a1c:	f003 0303 	and.w	r3, r3, #3
 8103a20:	4a07      	ldr	r2, [pc, #28]	@ (8103a40 <UART_SetConfig+0x6ac>)
 8103a22:	fa22 f303 	lsr.w	r3, r2, r3
 8103a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103a28:	e01c      	b.n	8103a64 <UART_SetConfig+0x6d0>
 8103a2a:	bf00      	nop
 8103a2c:	40011400 	.word	0x40011400
 8103a30:	58024400 	.word	0x58024400
 8103a34:	40007800 	.word	0x40007800
 8103a38:	40007c00 	.word	0x40007c00
 8103a3c:	58000c00 	.word	0x58000c00
 8103a40:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8103a44:	4b9d      	ldr	r3, [pc, #628]	@ (8103cbc <UART_SetConfig+0x928>)
 8103a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103a48:	e00c      	b.n	8103a64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103a4a:	4b9d      	ldr	r3, [pc, #628]	@ (8103cc0 <UART_SetConfig+0x92c>)
 8103a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103a4e:	e009      	b.n	8103a64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103a50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8103a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103a56:	e005      	b.n	8103a64 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8103a58:	2300      	movs	r3, #0
 8103a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8103a5c:	2301      	movs	r3, #1
 8103a5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8103a62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8103a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103a66:	2b00      	cmp	r3, #0
 8103a68:	f000 81de 	beq.w	8103e28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8103a6c:	697b      	ldr	r3, [r7, #20]
 8103a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103a70:	4a94      	ldr	r2, [pc, #592]	@ (8103cc4 <UART_SetConfig+0x930>)
 8103a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103a76:	461a      	mov	r2, r3
 8103a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103a7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8103a7e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103a80:	697b      	ldr	r3, [r7, #20]
 8103a82:	685a      	ldr	r2, [r3, #4]
 8103a84:	4613      	mov	r3, r2
 8103a86:	005b      	lsls	r3, r3, #1
 8103a88:	4413      	add	r3, r2
 8103a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103a8c:	429a      	cmp	r2, r3
 8103a8e:	d305      	bcc.n	8103a9c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8103a90:	697b      	ldr	r3, [r7, #20]
 8103a92:	685b      	ldr	r3, [r3, #4]
 8103a94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103a98:	429a      	cmp	r2, r3
 8103a9a:	d903      	bls.n	8103aa4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8103a9c:	2301      	movs	r3, #1
 8103a9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8103aa2:	e1c1      	b.n	8103e28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103aa6:	2200      	movs	r2, #0
 8103aa8:	60bb      	str	r3, [r7, #8]
 8103aaa:	60fa      	str	r2, [r7, #12]
 8103aac:	697b      	ldr	r3, [r7, #20]
 8103aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103ab0:	4a84      	ldr	r2, [pc, #528]	@ (8103cc4 <UART_SetConfig+0x930>)
 8103ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103ab6:	b29b      	uxth	r3, r3
 8103ab8:	2200      	movs	r2, #0
 8103aba:	603b      	str	r3, [r7, #0]
 8103abc:	607a      	str	r2, [r7, #4]
 8103abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103ac2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8103ac6:	f7fc fc07 	bl	81002d8 <__aeabi_uldivmod>
 8103aca:	4602      	mov	r2, r0
 8103acc:	460b      	mov	r3, r1
 8103ace:	4610      	mov	r0, r2
 8103ad0:	4619      	mov	r1, r3
 8103ad2:	f04f 0200 	mov.w	r2, #0
 8103ad6:	f04f 0300 	mov.w	r3, #0
 8103ada:	020b      	lsls	r3, r1, #8
 8103adc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8103ae0:	0202      	lsls	r2, r0, #8
 8103ae2:	6979      	ldr	r1, [r7, #20]
 8103ae4:	6849      	ldr	r1, [r1, #4]
 8103ae6:	0849      	lsrs	r1, r1, #1
 8103ae8:	2000      	movs	r0, #0
 8103aea:	460c      	mov	r4, r1
 8103aec:	4605      	mov	r5, r0
 8103aee:	eb12 0804 	adds.w	r8, r2, r4
 8103af2:	eb43 0905 	adc.w	r9, r3, r5
 8103af6:	697b      	ldr	r3, [r7, #20]
 8103af8:	685b      	ldr	r3, [r3, #4]
 8103afa:	2200      	movs	r2, #0
 8103afc:	469a      	mov	sl, r3
 8103afe:	4693      	mov	fp, r2
 8103b00:	4652      	mov	r2, sl
 8103b02:	465b      	mov	r3, fp
 8103b04:	4640      	mov	r0, r8
 8103b06:	4649      	mov	r1, r9
 8103b08:	f7fc fbe6 	bl	81002d8 <__aeabi_uldivmod>
 8103b0c:	4602      	mov	r2, r0
 8103b0e:	460b      	mov	r3, r1
 8103b10:	4613      	mov	r3, r2
 8103b12:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8103b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103b1a:	d308      	bcc.n	8103b2e <UART_SetConfig+0x79a>
 8103b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103b22:	d204      	bcs.n	8103b2e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8103b24:	697b      	ldr	r3, [r7, #20]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8103b2a:	60da      	str	r2, [r3, #12]
 8103b2c:	e17c      	b.n	8103e28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8103b2e:	2301      	movs	r3, #1
 8103b30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8103b34:	e178      	b.n	8103e28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8103b36:	697b      	ldr	r3, [r7, #20]
 8103b38:	69db      	ldr	r3, [r3, #28]
 8103b3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103b3e:	f040 80c5 	bne.w	8103ccc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8103b42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8103b46:	2b20      	cmp	r3, #32
 8103b48:	dc48      	bgt.n	8103bdc <UART_SetConfig+0x848>
 8103b4a:	2b00      	cmp	r3, #0
 8103b4c:	db7b      	blt.n	8103c46 <UART_SetConfig+0x8b2>
 8103b4e:	2b20      	cmp	r3, #32
 8103b50:	d879      	bhi.n	8103c46 <UART_SetConfig+0x8b2>
 8103b52:	a201      	add	r2, pc, #4	@ (adr r2, 8103b58 <UART_SetConfig+0x7c4>)
 8103b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b58:	08103be3 	.word	0x08103be3
 8103b5c:	08103beb 	.word	0x08103beb
 8103b60:	08103c47 	.word	0x08103c47
 8103b64:	08103c47 	.word	0x08103c47
 8103b68:	08103bf3 	.word	0x08103bf3
 8103b6c:	08103c47 	.word	0x08103c47
 8103b70:	08103c47 	.word	0x08103c47
 8103b74:	08103c47 	.word	0x08103c47
 8103b78:	08103c03 	.word	0x08103c03
 8103b7c:	08103c47 	.word	0x08103c47
 8103b80:	08103c47 	.word	0x08103c47
 8103b84:	08103c47 	.word	0x08103c47
 8103b88:	08103c47 	.word	0x08103c47
 8103b8c:	08103c47 	.word	0x08103c47
 8103b90:	08103c47 	.word	0x08103c47
 8103b94:	08103c47 	.word	0x08103c47
 8103b98:	08103c13 	.word	0x08103c13
 8103b9c:	08103c47 	.word	0x08103c47
 8103ba0:	08103c47 	.word	0x08103c47
 8103ba4:	08103c47 	.word	0x08103c47
 8103ba8:	08103c47 	.word	0x08103c47
 8103bac:	08103c47 	.word	0x08103c47
 8103bb0:	08103c47 	.word	0x08103c47
 8103bb4:	08103c47 	.word	0x08103c47
 8103bb8:	08103c47 	.word	0x08103c47
 8103bbc:	08103c47 	.word	0x08103c47
 8103bc0:	08103c47 	.word	0x08103c47
 8103bc4:	08103c47 	.word	0x08103c47
 8103bc8:	08103c47 	.word	0x08103c47
 8103bcc:	08103c47 	.word	0x08103c47
 8103bd0:	08103c47 	.word	0x08103c47
 8103bd4:	08103c47 	.word	0x08103c47
 8103bd8:	08103c39 	.word	0x08103c39
 8103bdc:	2b40      	cmp	r3, #64	@ 0x40
 8103bde:	d02e      	beq.n	8103c3e <UART_SetConfig+0x8aa>
 8103be0:	e031      	b.n	8103c46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103be2:	f7fd fc9b 	bl	810151c <HAL_RCC_GetPCLK1Freq>
 8103be6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103be8:	e033      	b.n	8103c52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103bea:	f7fd fcad 	bl	8101548 <HAL_RCC_GetPCLK2Freq>
 8103bee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103bf0:	e02f      	b.n	8103c52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103bf6:	4618      	mov	r0, r3
 8103bf8:	f7fe fedc 	bl	81029b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c00:	e027      	b.n	8103c52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103c02:	f107 0318 	add.w	r3, r7, #24
 8103c06:	4618      	mov	r0, r3
 8103c08:	f7ff f828 	bl	8102c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103c0c:	69fb      	ldr	r3, [r7, #28]
 8103c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c10:	e01f      	b.n	8103c52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103c12:	4b2d      	ldr	r3, [pc, #180]	@ (8103cc8 <UART_SetConfig+0x934>)
 8103c14:	681b      	ldr	r3, [r3, #0]
 8103c16:	f003 0320 	and.w	r3, r3, #32
 8103c1a:	2b00      	cmp	r3, #0
 8103c1c:	d009      	beq.n	8103c32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8103cc8 <UART_SetConfig+0x934>)
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	08db      	lsrs	r3, r3, #3
 8103c24:	f003 0303 	and.w	r3, r3, #3
 8103c28:	4a24      	ldr	r2, [pc, #144]	@ (8103cbc <UART_SetConfig+0x928>)
 8103c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8103c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103c30:	e00f      	b.n	8103c52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8103c32:	4b22      	ldr	r3, [pc, #136]	@ (8103cbc <UART_SetConfig+0x928>)
 8103c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c36:	e00c      	b.n	8103c52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103c38:	4b21      	ldr	r3, [pc, #132]	@ (8103cc0 <UART_SetConfig+0x92c>)
 8103c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c3c:	e009      	b.n	8103c52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8103c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c44:	e005      	b.n	8103c52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8103c46:	2300      	movs	r3, #0
 8103c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8103c4a:	2301      	movs	r3, #1
 8103c4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8103c50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8103c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103c54:	2b00      	cmp	r3, #0
 8103c56:	f000 80e7 	beq.w	8103e28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103c5a:	697b      	ldr	r3, [r7, #20]
 8103c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103c5e:	4a19      	ldr	r2, [pc, #100]	@ (8103cc4 <UART_SetConfig+0x930>)
 8103c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103c64:	461a      	mov	r2, r3
 8103c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8103c6c:	005a      	lsls	r2, r3, #1
 8103c6e:	697b      	ldr	r3, [r7, #20]
 8103c70:	685b      	ldr	r3, [r3, #4]
 8103c72:	085b      	lsrs	r3, r3, #1
 8103c74:	441a      	add	r2, r3
 8103c76:	697b      	ldr	r3, [r7, #20]
 8103c78:	685b      	ldr	r3, [r3, #4]
 8103c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8103c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c82:	2b0f      	cmp	r3, #15
 8103c84:	d916      	bls.n	8103cb4 <UART_SetConfig+0x920>
 8103c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103c8c:	d212      	bcs.n	8103cb4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8103c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c90:	b29b      	uxth	r3, r3
 8103c92:	f023 030f 	bic.w	r3, r3, #15
 8103c96:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8103c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c9a:	085b      	lsrs	r3, r3, #1
 8103c9c:	b29b      	uxth	r3, r3
 8103c9e:	f003 0307 	and.w	r3, r3, #7
 8103ca2:	b29a      	uxth	r2, r3
 8103ca4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8103ca6:	4313      	orrs	r3, r2
 8103ca8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8103caa:	697b      	ldr	r3, [r7, #20]
 8103cac:	681b      	ldr	r3, [r3, #0]
 8103cae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8103cb0:	60da      	str	r2, [r3, #12]
 8103cb2:	e0b9      	b.n	8103e28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8103cb4:	2301      	movs	r3, #1
 8103cb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8103cba:	e0b5      	b.n	8103e28 <UART_SetConfig+0xa94>
 8103cbc:	03d09000 	.word	0x03d09000
 8103cc0:	003d0900 	.word	0x003d0900
 8103cc4:	08104874 	.word	0x08104874
 8103cc8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8103ccc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8103cd0:	2b20      	cmp	r3, #32
 8103cd2:	dc49      	bgt.n	8103d68 <UART_SetConfig+0x9d4>
 8103cd4:	2b00      	cmp	r3, #0
 8103cd6:	db7c      	blt.n	8103dd2 <UART_SetConfig+0xa3e>
 8103cd8:	2b20      	cmp	r3, #32
 8103cda:	d87a      	bhi.n	8103dd2 <UART_SetConfig+0xa3e>
 8103cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8103ce4 <UART_SetConfig+0x950>)
 8103cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ce2:	bf00      	nop
 8103ce4:	08103d6f 	.word	0x08103d6f
 8103ce8:	08103d77 	.word	0x08103d77
 8103cec:	08103dd3 	.word	0x08103dd3
 8103cf0:	08103dd3 	.word	0x08103dd3
 8103cf4:	08103d7f 	.word	0x08103d7f
 8103cf8:	08103dd3 	.word	0x08103dd3
 8103cfc:	08103dd3 	.word	0x08103dd3
 8103d00:	08103dd3 	.word	0x08103dd3
 8103d04:	08103d8f 	.word	0x08103d8f
 8103d08:	08103dd3 	.word	0x08103dd3
 8103d0c:	08103dd3 	.word	0x08103dd3
 8103d10:	08103dd3 	.word	0x08103dd3
 8103d14:	08103dd3 	.word	0x08103dd3
 8103d18:	08103dd3 	.word	0x08103dd3
 8103d1c:	08103dd3 	.word	0x08103dd3
 8103d20:	08103dd3 	.word	0x08103dd3
 8103d24:	08103d9f 	.word	0x08103d9f
 8103d28:	08103dd3 	.word	0x08103dd3
 8103d2c:	08103dd3 	.word	0x08103dd3
 8103d30:	08103dd3 	.word	0x08103dd3
 8103d34:	08103dd3 	.word	0x08103dd3
 8103d38:	08103dd3 	.word	0x08103dd3
 8103d3c:	08103dd3 	.word	0x08103dd3
 8103d40:	08103dd3 	.word	0x08103dd3
 8103d44:	08103dd3 	.word	0x08103dd3
 8103d48:	08103dd3 	.word	0x08103dd3
 8103d4c:	08103dd3 	.word	0x08103dd3
 8103d50:	08103dd3 	.word	0x08103dd3
 8103d54:	08103dd3 	.word	0x08103dd3
 8103d58:	08103dd3 	.word	0x08103dd3
 8103d5c:	08103dd3 	.word	0x08103dd3
 8103d60:	08103dd3 	.word	0x08103dd3
 8103d64:	08103dc5 	.word	0x08103dc5
 8103d68:	2b40      	cmp	r3, #64	@ 0x40
 8103d6a:	d02e      	beq.n	8103dca <UART_SetConfig+0xa36>
 8103d6c:	e031      	b.n	8103dd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103d6e:	f7fd fbd5 	bl	810151c <HAL_RCC_GetPCLK1Freq>
 8103d72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103d74:	e033      	b.n	8103dde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103d76:	f7fd fbe7 	bl	8101548 <HAL_RCC_GetPCLK2Freq>
 8103d7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103d7c:	e02f      	b.n	8103dde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103d82:	4618      	mov	r0, r3
 8103d84:	f7fe fe16 	bl	81029b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103d8c:	e027      	b.n	8103dde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103d8e:	f107 0318 	add.w	r3, r7, #24
 8103d92:	4618      	mov	r0, r3
 8103d94:	f7fe ff62 	bl	8102c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103d98:	69fb      	ldr	r3, [r7, #28]
 8103d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103d9c:	e01f      	b.n	8103dde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8103e54 <UART_SetConfig+0xac0>)
 8103da0:	681b      	ldr	r3, [r3, #0]
 8103da2:	f003 0320 	and.w	r3, r3, #32
 8103da6:	2b00      	cmp	r3, #0
 8103da8:	d009      	beq.n	8103dbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103daa:	4b2a      	ldr	r3, [pc, #168]	@ (8103e54 <UART_SetConfig+0xac0>)
 8103dac:	681b      	ldr	r3, [r3, #0]
 8103dae:	08db      	lsrs	r3, r3, #3
 8103db0:	f003 0303 	and.w	r3, r3, #3
 8103db4:	4a28      	ldr	r2, [pc, #160]	@ (8103e58 <UART_SetConfig+0xac4>)
 8103db6:	fa22 f303 	lsr.w	r3, r2, r3
 8103dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103dbc:	e00f      	b.n	8103dde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8103dbe:	4b26      	ldr	r3, [pc, #152]	@ (8103e58 <UART_SetConfig+0xac4>)
 8103dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103dc2:	e00c      	b.n	8103dde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103dc4:	4b25      	ldr	r3, [pc, #148]	@ (8103e5c <UART_SetConfig+0xac8>)
 8103dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103dc8:	e009      	b.n	8103dde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8103dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103dd0:	e005      	b.n	8103dde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8103dd2:	2300      	movs	r3, #0
 8103dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8103dd6:	2301      	movs	r3, #1
 8103dd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8103ddc:	bf00      	nop
    }

    if (pclk != 0U)
 8103dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103de0:	2b00      	cmp	r3, #0
 8103de2:	d021      	beq.n	8103e28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103de4:	697b      	ldr	r3, [r7, #20]
 8103de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103de8:	4a1d      	ldr	r2, [pc, #116]	@ (8103e60 <UART_SetConfig+0xacc>)
 8103dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103dee:	461a      	mov	r2, r3
 8103df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103df2:	fbb3 f2f2 	udiv	r2, r3, r2
 8103df6:	697b      	ldr	r3, [r7, #20]
 8103df8:	685b      	ldr	r3, [r3, #4]
 8103dfa:	085b      	lsrs	r3, r3, #1
 8103dfc:	441a      	add	r2, r3
 8103dfe:	697b      	ldr	r3, [r7, #20]
 8103e00:	685b      	ldr	r3, [r3, #4]
 8103e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8103e06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103e0a:	2b0f      	cmp	r3, #15
 8103e0c:	d909      	bls.n	8103e22 <UART_SetConfig+0xa8e>
 8103e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103e14:	d205      	bcs.n	8103e22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8103e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103e18:	b29a      	uxth	r2, r3
 8103e1a:	697b      	ldr	r3, [r7, #20]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	60da      	str	r2, [r3, #12]
 8103e20:	e002      	b.n	8103e28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8103e22:	2301      	movs	r3, #1
 8103e24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8103e28:	697b      	ldr	r3, [r7, #20]
 8103e2a:	2201      	movs	r2, #1
 8103e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8103e30:	697b      	ldr	r3, [r7, #20]
 8103e32:	2201      	movs	r2, #1
 8103e34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8103e38:	697b      	ldr	r3, [r7, #20]
 8103e3a:	2200      	movs	r2, #0
 8103e3c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8103e3e:	697b      	ldr	r3, [r7, #20]
 8103e40:	2200      	movs	r2, #0
 8103e42:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8103e44:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8103e48:	4618      	mov	r0, r3
 8103e4a:	3748      	adds	r7, #72	@ 0x48
 8103e4c:	46bd      	mov	sp, r7
 8103e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103e52:	bf00      	nop
 8103e54:	58024400 	.word	0x58024400
 8103e58:	03d09000 	.word	0x03d09000
 8103e5c:	003d0900 	.word	0x003d0900
 8103e60:	08104874 	.word	0x08104874

08103e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8103e64:	b480      	push	{r7}
 8103e66:	b083      	sub	sp, #12
 8103e68:	af00      	add	r7, sp, #0
 8103e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103e70:	f003 0308 	and.w	r3, r3, #8
 8103e74:	2b00      	cmp	r3, #0
 8103e76:	d00a      	beq.n	8103e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	681b      	ldr	r3, [r3, #0]
 8103e7c:	685b      	ldr	r3, [r3, #4]
 8103e7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	430a      	orrs	r2, r1
 8103e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8103e8e:	687b      	ldr	r3, [r7, #4]
 8103e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103e92:	f003 0301 	and.w	r3, r3, #1
 8103e96:	2b00      	cmp	r3, #0
 8103e98:	d00a      	beq.n	8103eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	685b      	ldr	r3, [r3, #4]
 8103ea0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	681b      	ldr	r3, [r3, #0]
 8103eac:	430a      	orrs	r2, r1
 8103eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8103eb0:	687b      	ldr	r3, [r7, #4]
 8103eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103eb4:	f003 0302 	and.w	r3, r3, #2
 8103eb8:	2b00      	cmp	r3, #0
 8103eba:	d00a      	beq.n	8103ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8103ebc:	687b      	ldr	r3, [r7, #4]
 8103ebe:	681b      	ldr	r3, [r3, #0]
 8103ec0:	685b      	ldr	r3, [r3, #4]
 8103ec2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8103eca:	687b      	ldr	r3, [r7, #4]
 8103ecc:	681b      	ldr	r3, [r3, #0]
 8103ece:	430a      	orrs	r2, r1
 8103ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103ed6:	f003 0304 	and.w	r3, r3, #4
 8103eda:	2b00      	cmp	r3, #0
 8103edc:	d00a      	beq.n	8103ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	685b      	ldr	r3, [r3, #4]
 8103ee4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8103ee8:	687b      	ldr	r3, [r7, #4]
 8103eea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103eec:	687b      	ldr	r3, [r7, #4]
 8103eee:	681b      	ldr	r3, [r3, #0]
 8103ef0:	430a      	orrs	r2, r1
 8103ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103ef8:	f003 0310 	and.w	r3, r3, #16
 8103efc:	2b00      	cmp	r3, #0
 8103efe:	d00a      	beq.n	8103f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8103f00:	687b      	ldr	r3, [r7, #4]
 8103f02:	681b      	ldr	r3, [r3, #0]
 8103f04:	689b      	ldr	r3, [r3, #8]
 8103f06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8103f0a:	687b      	ldr	r3, [r7, #4]
 8103f0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	681b      	ldr	r3, [r3, #0]
 8103f12:	430a      	orrs	r2, r1
 8103f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8103f16:	687b      	ldr	r3, [r7, #4]
 8103f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f1a:	f003 0320 	and.w	r3, r3, #32
 8103f1e:	2b00      	cmp	r3, #0
 8103f20:	d00a      	beq.n	8103f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	681b      	ldr	r3, [r3, #0]
 8103f26:	689b      	ldr	r3, [r3, #8]
 8103f28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	430a      	orrs	r2, r1
 8103f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8103f38:	687b      	ldr	r3, [r7, #4]
 8103f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103f40:	2b00      	cmp	r3, #0
 8103f42:	d01a      	beq.n	8103f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	681b      	ldr	r3, [r3, #0]
 8103f48:	685b      	ldr	r3, [r3, #4]
 8103f4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	681b      	ldr	r3, [r3, #0]
 8103f56:	430a      	orrs	r2, r1
 8103f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8103f5a:	687b      	ldr	r3, [r7, #4]
 8103f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103f62:	d10a      	bne.n	8103f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	681b      	ldr	r3, [r3, #0]
 8103f68:	685b      	ldr	r3, [r3, #4]
 8103f6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	430a      	orrs	r2, r1
 8103f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8103f7a:	687b      	ldr	r3, [r7, #4]
 8103f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103f82:	2b00      	cmp	r3, #0
 8103f84:	d00a      	beq.n	8103f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	681b      	ldr	r3, [r3, #0]
 8103f8a:	685b      	ldr	r3, [r3, #4]
 8103f8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	430a      	orrs	r2, r1
 8103f9a:	605a      	str	r2, [r3, #4]
  }
}
 8103f9c:	bf00      	nop
 8103f9e:	370c      	adds	r7, #12
 8103fa0:	46bd      	mov	sp, r7
 8103fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fa6:	4770      	bx	lr

08103fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8103fa8:	b580      	push	{r7, lr}
 8103faa:	b098      	sub	sp, #96	@ 0x60
 8103fac:	af02      	add	r7, sp, #8
 8103fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103fb0:	687b      	ldr	r3, [r7, #4]
 8103fb2:	2200      	movs	r2, #0
 8103fb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8103fb8:	f7fc fd94 	bl	8100ae4 <HAL_GetTick>
 8103fbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8103fbe:	687b      	ldr	r3, [r7, #4]
 8103fc0:	681b      	ldr	r3, [r3, #0]
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	f003 0308 	and.w	r3, r3, #8
 8103fc8:	2b08      	cmp	r3, #8
 8103fca:	d12f      	bne.n	810402c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103fcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8103fd0:	9300      	str	r3, [sp, #0]
 8103fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8103fd4:	2200      	movs	r2, #0
 8103fd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8103fda:	6878      	ldr	r0, [r7, #4]
 8103fdc:	f000 f88e 	bl	81040fc <UART_WaitOnFlagUntilTimeout>
 8103fe0:	4603      	mov	r3, r0
 8103fe2:	2b00      	cmp	r3, #0
 8103fe4:	d022      	beq.n	810402c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8103fe6:	687b      	ldr	r3, [r7, #4]
 8103fe8:	681b      	ldr	r3, [r3, #0]
 8103fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103fee:	e853 3f00 	ldrex	r3, [r3]
 8103ff2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8103ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8103ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	681b      	ldr	r3, [r3, #0]
 8104000:	461a      	mov	r2, r3
 8104002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104004:	647b      	str	r3, [r7, #68]	@ 0x44
 8104006:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104008:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810400a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810400c:	e841 2300 	strex	r3, r2, [r1]
 8104010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8104012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104014:	2b00      	cmp	r3, #0
 8104016:	d1e6      	bne.n	8103fe6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	2220      	movs	r2, #32
 810401c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8104020:	687b      	ldr	r3, [r7, #4]
 8104022:	2200      	movs	r2, #0
 8104024:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8104028:	2303      	movs	r3, #3
 810402a:	e063      	b.n	81040f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810402c:	687b      	ldr	r3, [r7, #4]
 810402e:	681b      	ldr	r3, [r3, #0]
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	f003 0304 	and.w	r3, r3, #4
 8104036:	2b04      	cmp	r3, #4
 8104038:	d149      	bne.n	81040ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810403a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810403e:	9300      	str	r3, [sp, #0]
 8104040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104042:	2200      	movs	r2, #0
 8104044:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8104048:	6878      	ldr	r0, [r7, #4]
 810404a:	f000 f857 	bl	81040fc <UART_WaitOnFlagUntilTimeout>
 810404e:	4603      	mov	r3, r0
 8104050:	2b00      	cmp	r3, #0
 8104052:	d03c      	beq.n	81040ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	681b      	ldr	r3, [r3, #0]
 8104058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810405c:	e853 3f00 	ldrex	r3, [r3]
 8104060:	623b      	str	r3, [r7, #32]
   return(result);
 8104062:	6a3b      	ldr	r3, [r7, #32]
 8104064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8104068:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	681b      	ldr	r3, [r3, #0]
 810406e:	461a      	mov	r2, r3
 8104070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104072:	633b      	str	r3, [r7, #48]	@ 0x30
 8104074:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8104078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810407a:	e841 2300 	strex	r3, r2, [r1]
 810407e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8104080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104082:	2b00      	cmp	r3, #0
 8104084:	d1e6      	bne.n	8104054 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	681b      	ldr	r3, [r3, #0]
 810408a:	3308      	adds	r3, #8
 810408c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810408e:	693b      	ldr	r3, [r7, #16]
 8104090:	e853 3f00 	ldrex	r3, [r3]
 8104094:	60fb      	str	r3, [r7, #12]
   return(result);
 8104096:	68fb      	ldr	r3, [r7, #12]
 8104098:	f023 0301 	bic.w	r3, r3, #1
 810409c:	64bb      	str	r3, [r7, #72]	@ 0x48
 810409e:	687b      	ldr	r3, [r7, #4]
 81040a0:	681b      	ldr	r3, [r3, #0]
 81040a2:	3308      	adds	r3, #8
 81040a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81040a6:	61fa      	str	r2, [r7, #28]
 81040a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81040aa:	69b9      	ldr	r1, [r7, #24]
 81040ac:	69fa      	ldr	r2, [r7, #28]
 81040ae:	e841 2300 	strex	r3, r2, [r1]
 81040b2:	617b      	str	r3, [r7, #20]
   return(result);
 81040b4:	697b      	ldr	r3, [r7, #20]
 81040b6:	2b00      	cmp	r3, #0
 81040b8:	d1e5      	bne.n	8104086 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	2220      	movs	r2, #32
 81040be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	2200      	movs	r2, #0
 81040c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81040ca:	2303      	movs	r3, #3
 81040cc:	e012      	b.n	81040f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	2220      	movs	r2, #32
 81040d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	2220      	movs	r2, #32
 81040da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81040de:	687b      	ldr	r3, [r7, #4]
 81040e0:	2200      	movs	r2, #0
 81040e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81040e4:	687b      	ldr	r3, [r7, #4]
 81040e6:	2200      	movs	r2, #0
 81040e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	2200      	movs	r2, #0
 81040ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81040f2:	2300      	movs	r3, #0
}
 81040f4:	4618      	mov	r0, r3
 81040f6:	3758      	adds	r7, #88	@ 0x58
 81040f8:	46bd      	mov	sp, r7
 81040fa:	bd80      	pop	{r7, pc}

081040fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81040fc:	b580      	push	{r7, lr}
 81040fe:	b084      	sub	sp, #16
 8104100:	af00      	add	r7, sp, #0
 8104102:	60f8      	str	r0, [r7, #12]
 8104104:	60b9      	str	r1, [r7, #8]
 8104106:	603b      	str	r3, [r7, #0]
 8104108:	4613      	mov	r3, r2
 810410a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810410c:	e04f      	b.n	81041ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810410e:	69bb      	ldr	r3, [r7, #24]
 8104110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8104114:	d04b      	beq.n	81041ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104116:	f7fc fce5 	bl	8100ae4 <HAL_GetTick>
 810411a:	4602      	mov	r2, r0
 810411c:	683b      	ldr	r3, [r7, #0]
 810411e:	1ad3      	subs	r3, r2, r3
 8104120:	69ba      	ldr	r2, [r7, #24]
 8104122:	429a      	cmp	r2, r3
 8104124:	d302      	bcc.n	810412c <UART_WaitOnFlagUntilTimeout+0x30>
 8104126:	69bb      	ldr	r3, [r7, #24]
 8104128:	2b00      	cmp	r3, #0
 810412a:	d101      	bne.n	8104130 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810412c:	2303      	movs	r3, #3
 810412e:	e04e      	b.n	81041ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8104130:	68fb      	ldr	r3, [r7, #12]
 8104132:	681b      	ldr	r3, [r3, #0]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	f003 0304 	and.w	r3, r3, #4
 810413a:	2b00      	cmp	r3, #0
 810413c:	d037      	beq.n	81041ae <UART_WaitOnFlagUntilTimeout+0xb2>
 810413e:	68bb      	ldr	r3, [r7, #8]
 8104140:	2b80      	cmp	r3, #128	@ 0x80
 8104142:	d034      	beq.n	81041ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8104144:	68bb      	ldr	r3, [r7, #8]
 8104146:	2b40      	cmp	r3, #64	@ 0x40
 8104148:	d031      	beq.n	81041ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810414a:	68fb      	ldr	r3, [r7, #12]
 810414c:	681b      	ldr	r3, [r3, #0]
 810414e:	69db      	ldr	r3, [r3, #28]
 8104150:	f003 0308 	and.w	r3, r3, #8
 8104154:	2b08      	cmp	r3, #8
 8104156:	d110      	bne.n	810417a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8104158:	68fb      	ldr	r3, [r7, #12]
 810415a:	681b      	ldr	r3, [r3, #0]
 810415c:	2208      	movs	r2, #8
 810415e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8104160:	68f8      	ldr	r0, [r7, #12]
 8104162:	f000 f838 	bl	81041d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8104166:	68fb      	ldr	r3, [r7, #12]
 8104168:	2208      	movs	r2, #8
 810416a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810416e:	68fb      	ldr	r3, [r7, #12]
 8104170:	2200      	movs	r2, #0
 8104172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8104176:	2301      	movs	r3, #1
 8104178:	e029      	b.n	81041ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810417a:	68fb      	ldr	r3, [r7, #12]
 810417c:	681b      	ldr	r3, [r3, #0]
 810417e:	69db      	ldr	r3, [r3, #28]
 8104180:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8104184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104188:	d111      	bne.n	81041ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810418a:	68fb      	ldr	r3, [r7, #12]
 810418c:	681b      	ldr	r3, [r3, #0]
 810418e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8104192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8104194:	68f8      	ldr	r0, [r7, #12]
 8104196:	f000 f81e 	bl	81041d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810419a:	68fb      	ldr	r3, [r7, #12]
 810419c:	2220      	movs	r2, #32
 810419e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81041a2:	68fb      	ldr	r3, [r7, #12]
 81041a4:	2200      	movs	r2, #0
 81041a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81041aa:	2303      	movs	r3, #3
 81041ac:	e00f      	b.n	81041ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81041ae:	68fb      	ldr	r3, [r7, #12]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	69da      	ldr	r2, [r3, #28]
 81041b4:	68bb      	ldr	r3, [r7, #8]
 81041b6:	4013      	ands	r3, r2
 81041b8:	68ba      	ldr	r2, [r7, #8]
 81041ba:	429a      	cmp	r2, r3
 81041bc:	bf0c      	ite	eq
 81041be:	2301      	moveq	r3, #1
 81041c0:	2300      	movne	r3, #0
 81041c2:	b2db      	uxtb	r3, r3
 81041c4:	461a      	mov	r2, r3
 81041c6:	79fb      	ldrb	r3, [r7, #7]
 81041c8:	429a      	cmp	r2, r3
 81041ca:	d0a0      	beq.n	810410e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81041cc:	2300      	movs	r3, #0
}
 81041ce:	4618      	mov	r0, r3
 81041d0:	3710      	adds	r7, #16
 81041d2:	46bd      	mov	sp, r7
 81041d4:	bd80      	pop	{r7, pc}

081041d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81041d6:	b480      	push	{r7}
 81041d8:	b095      	sub	sp, #84	@ 0x54
 81041da:	af00      	add	r7, sp, #0
 81041dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81041de:	687b      	ldr	r3, [r7, #4]
 81041e0:	681b      	ldr	r3, [r3, #0]
 81041e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81041e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81041e6:	e853 3f00 	ldrex	r3, [r3]
 81041ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81041ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81041ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81041f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	461a      	mov	r2, r3
 81041fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81041fc:	643b      	str	r3, [r7, #64]	@ 0x40
 81041fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104200:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8104202:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8104204:	e841 2300 	strex	r3, r2, [r1]
 8104208:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810420a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810420c:	2b00      	cmp	r3, #0
 810420e:	d1e6      	bne.n	81041de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	681b      	ldr	r3, [r3, #0]
 8104214:	3308      	adds	r3, #8
 8104216:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104218:	6a3b      	ldr	r3, [r7, #32]
 810421a:	e853 3f00 	ldrex	r3, [r3]
 810421e:	61fb      	str	r3, [r7, #28]
   return(result);
 8104220:	69fb      	ldr	r3, [r7, #28]
 8104222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104226:	f023 0301 	bic.w	r3, r3, #1
 810422a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	3308      	adds	r3, #8
 8104232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8104234:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8104236:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104238:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810423a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810423c:	e841 2300 	strex	r3, r2, [r1]
 8104240:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8104242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104244:	2b00      	cmp	r3, #0
 8104246:	d1e3      	bne.n	8104210 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810424c:	2b01      	cmp	r3, #1
 810424e:	d118      	bne.n	8104282 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	681b      	ldr	r3, [r3, #0]
 8104254:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104256:	68fb      	ldr	r3, [r7, #12]
 8104258:	e853 3f00 	ldrex	r3, [r3]
 810425c:	60bb      	str	r3, [r7, #8]
   return(result);
 810425e:	68bb      	ldr	r3, [r7, #8]
 8104260:	f023 0310 	bic.w	r3, r3, #16
 8104264:	647b      	str	r3, [r7, #68]	@ 0x44
 8104266:	687b      	ldr	r3, [r7, #4]
 8104268:	681b      	ldr	r3, [r3, #0]
 810426a:	461a      	mov	r2, r3
 810426c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810426e:	61bb      	str	r3, [r7, #24]
 8104270:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104272:	6979      	ldr	r1, [r7, #20]
 8104274:	69ba      	ldr	r2, [r7, #24]
 8104276:	e841 2300 	strex	r3, r2, [r1]
 810427a:	613b      	str	r3, [r7, #16]
   return(result);
 810427c:	693b      	ldr	r3, [r7, #16]
 810427e:	2b00      	cmp	r3, #0
 8104280:	d1e6      	bne.n	8104250 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8104282:	687b      	ldr	r3, [r7, #4]
 8104284:	2220      	movs	r2, #32
 8104286:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810428a:	687b      	ldr	r3, [r7, #4]
 810428c:	2200      	movs	r2, #0
 810428e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8104290:	687b      	ldr	r3, [r7, #4]
 8104292:	2200      	movs	r2, #0
 8104294:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8104296:	bf00      	nop
 8104298:	3754      	adds	r7, #84	@ 0x54
 810429a:	46bd      	mov	sp, r7
 810429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042a0:	4770      	bx	lr

081042a2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 81042a2:	b480      	push	{r7}
 81042a4:	b08f      	sub	sp, #60	@ 0x3c
 81042a6:	af00      	add	r7, sp, #0
 81042a8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81042b0:	2b21      	cmp	r3, #33	@ 0x21
 81042b2:	d14c      	bne.n	810434e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81042ba:	b29b      	uxth	r3, r3
 81042bc:	2b00      	cmp	r3, #0
 81042be:	d132      	bne.n	8104326 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	681b      	ldr	r3, [r3, #0]
 81042c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81042c6:	6a3b      	ldr	r3, [r7, #32]
 81042c8:	e853 3f00 	ldrex	r3, [r3]
 81042cc:	61fb      	str	r3, [r7, #28]
   return(result);
 81042ce:	69fb      	ldr	r3, [r7, #28]
 81042d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81042d4:	637b      	str	r3, [r7, #52]	@ 0x34
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	681b      	ldr	r3, [r3, #0]
 81042da:	461a      	mov	r2, r3
 81042dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81042de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81042e0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81042e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81042e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81042e6:	e841 2300 	strex	r3, r2, [r1]
 81042ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 81042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81042ee:	2b00      	cmp	r3, #0
 81042f0:	d1e6      	bne.n	81042c0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81042f8:	68fb      	ldr	r3, [r7, #12]
 81042fa:	e853 3f00 	ldrex	r3, [r3]
 81042fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8104300:	68bb      	ldr	r3, [r7, #8]
 8104302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8104306:	633b      	str	r3, [r7, #48]	@ 0x30
 8104308:	687b      	ldr	r3, [r7, #4]
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	461a      	mov	r2, r3
 810430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104310:	61bb      	str	r3, [r7, #24]
 8104312:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104314:	6979      	ldr	r1, [r7, #20]
 8104316:	69ba      	ldr	r2, [r7, #24]
 8104318:	e841 2300 	strex	r3, r2, [r1]
 810431c:	613b      	str	r3, [r7, #16]
   return(result);
 810431e:	693b      	ldr	r3, [r7, #16]
 8104320:	2b00      	cmp	r3, #0
 8104322:	d1e6      	bne.n	81042f2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8104324:	e013      	b.n	810434e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8104326:	687b      	ldr	r3, [r7, #4]
 8104328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810432a:	781a      	ldrb	r2, [r3, #0]
 810432c:	687b      	ldr	r3, [r7, #4]
 810432e:	681b      	ldr	r3, [r3, #0]
 8104330:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8104332:	687b      	ldr	r3, [r7, #4]
 8104334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104336:	1c5a      	adds	r2, r3, #1
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8104342:	b29b      	uxth	r3, r3
 8104344:	3b01      	subs	r3, #1
 8104346:	b29a      	uxth	r2, r3
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 810434e:	bf00      	nop
 8104350:	373c      	adds	r7, #60	@ 0x3c
 8104352:	46bd      	mov	sp, r7
 8104354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104358:	4770      	bx	lr

0810435a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 810435a:	b480      	push	{r7}
 810435c:	b091      	sub	sp, #68	@ 0x44
 810435e:	af00      	add	r7, sp, #0
 8104360:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104368:	2b21      	cmp	r3, #33	@ 0x21
 810436a:	d151      	bne.n	8104410 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 810436c:	687b      	ldr	r3, [r7, #4]
 810436e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8104372:	b29b      	uxth	r3, r3
 8104374:	2b00      	cmp	r3, #0
 8104376:	d132      	bne.n	81043de <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104380:	e853 3f00 	ldrex	r3, [r3]
 8104384:	623b      	str	r3, [r7, #32]
   return(result);
 8104386:	6a3b      	ldr	r3, [r7, #32]
 8104388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810438c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	681b      	ldr	r3, [r3, #0]
 8104392:	461a      	mov	r2, r3
 8104394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104396:	633b      	str	r3, [r7, #48]	@ 0x30
 8104398:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810439a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810439c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810439e:	e841 2300 	strex	r3, r2, [r1]
 81043a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 81043a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81043a6:	2b00      	cmp	r3, #0
 81043a8:	d1e6      	bne.n	8104378 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	681b      	ldr	r3, [r3, #0]
 81043ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81043b0:	693b      	ldr	r3, [r7, #16]
 81043b2:	e853 3f00 	ldrex	r3, [r3]
 81043b6:	60fb      	str	r3, [r7, #12]
   return(result);
 81043b8:	68fb      	ldr	r3, [r7, #12]
 81043ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81043be:	637b      	str	r3, [r7, #52]	@ 0x34
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	461a      	mov	r2, r3
 81043c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81043c8:	61fb      	str	r3, [r7, #28]
 81043ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81043cc:	69b9      	ldr	r1, [r7, #24]
 81043ce:	69fa      	ldr	r2, [r7, #28]
 81043d0:	e841 2300 	strex	r3, r2, [r1]
 81043d4:	617b      	str	r3, [r7, #20]
   return(result);
 81043d6:	697b      	ldr	r3, [r7, #20]
 81043d8:	2b00      	cmp	r3, #0
 81043da:	d1e6      	bne.n	81043aa <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 81043dc:	e018      	b.n	8104410 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81043e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 81043e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81043e6:	881b      	ldrh	r3, [r3, #0]
 81043e8:	461a      	mov	r2, r3
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81043f2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81043f8:	1c9a      	adds	r2, r3, #2
 81043fa:	687b      	ldr	r3, [r7, #4]
 81043fc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8104404:	b29b      	uxth	r3, r3
 8104406:	3b01      	subs	r3, #1
 8104408:	b29a      	uxth	r2, r3
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8104410:	bf00      	nop
 8104412:	3744      	adds	r7, #68	@ 0x44
 8104414:	46bd      	mov	sp, r7
 8104416:	f85d 7b04 	ldr.w	r7, [sp], #4
 810441a:	4770      	bx	lr

0810441c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810441c:	b480      	push	{r7}
 810441e:	b091      	sub	sp, #68	@ 0x44
 8104420:	af00      	add	r7, sp, #0
 8104422:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8104424:	687b      	ldr	r3, [r7, #4]
 8104426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810442a:	2b21      	cmp	r3, #33	@ 0x21
 810442c:	d160      	bne.n	81044f0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104434:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8104436:	e057      	b.n	81044e8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810443e:	b29b      	uxth	r3, r3
 8104440:	2b00      	cmp	r3, #0
 8104442:	d133      	bne.n	81044ac <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	3308      	adds	r3, #8
 810444a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810444e:	e853 3f00 	ldrex	r3, [r3]
 8104452:	623b      	str	r3, [r7, #32]
   return(result);
 8104454:	6a3b      	ldr	r3, [r7, #32]
 8104456:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 810445a:	63bb      	str	r3, [r7, #56]	@ 0x38
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	3308      	adds	r3, #8
 8104462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8104464:	633a      	str	r2, [r7, #48]	@ 0x30
 8104466:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104468:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810446a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810446c:	e841 2300 	strex	r3, r2, [r1]
 8104470:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8104472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104474:	2b00      	cmp	r3, #0
 8104476:	d1e5      	bne.n	8104444 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8104478:	687b      	ldr	r3, [r7, #4]
 810447a:	681b      	ldr	r3, [r3, #0]
 810447c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810447e:	693b      	ldr	r3, [r7, #16]
 8104480:	e853 3f00 	ldrex	r3, [r3]
 8104484:	60fb      	str	r3, [r7, #12]
   return(result);
 8104486:	68fb      	ldr	r3, [r7, #12]
 8104488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810448c:	637b      	str	r3, [r7, #52]	@ 0x34
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	681b      	ldr	r3, [r3, #0]
 8104492:	461a      	mov	r2, r3
 8104494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104496:	61fb      	str	r3, [r7, #28]
 8104498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810449a:	69b9      	ldr	r1, [r7, #24]
 810449c:	69fa      	ldr	r2, [r7, #28]
 810449e:	e841 2300 	strex	r3, r2, [r1]
 81044a2:	617b      	str	r3, [r7, #20]
   return(result);
 81044a4:	697b      	ldr	r3, [r7, #20]
 81044a6:	2b00      	cmp	r3, #0
 81044a8:	d1e6      	bne.n	8104478 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 81044aa:	e021      	b.n	81044f0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	69db      	ldr	r3, [r3, #28]
 81044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81044b6:	2b00      	cmp	r3, #0
 81044b8:	d013      	beq.n	81044e2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 81044ba:	687b      	ldr	r3, [r7, #4]
 81044bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81044be:	781a      	ldrb	r2, [r3, #0]
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81044ca:	1c5a      	adds	r2, r3, #1
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81044d6:	b29b      	uxth	r3, r3
 81044d8:	3b01      	subs	r3, #1
 81044da:	b29a      	uxth	r2, r3
 81044dc:	687b      	ldr	r3, [r7, #4]
 81044de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 81044e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81044e4:	3b01      	subs	r3, #1
 81044e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 81044e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81044ea:	2b00      	cmp	r3, #0
 81044ec:	d1a4      	bne.n	8104438 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 81044ee:	e7ff      	b.n	81044f0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 81044f0:	bf00      	nop
 81044f2:	3744      	adds	r7, #68	@ 0x44
 81044f4:	46bd      	mov	sp, r7
 81044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044fa:	4770      	bx	lr

081044fc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 81044fc:	b480      	push	{r7}
 81044fe:	b091      	sub	sp, #68	@ 0x44
 8104500:	af00      	add	r7, sp, #0
 8104502:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810450a:	2b21      	cmp	r3, #33	@ 0x21
 810450c:	d165      	bne.n	81045da <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104514:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8104516:	e05c      	b.n	81045d2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810451e:	b29b      	uxth	r3, r3
 8104520:	2b00      	cmp	r3, #0
 8104522:	d133      	bne.n	810458c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	3308      	adds	r3, #8
 810452a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810452c:	6a3b      	ldr	r3, [r7, #32]
 810452e:	e853 3f00 	ldrex	r3, [r3]
 8104532:	61fb      	str	r3, [r7, #28]
   return(result);
 8104534:	69fb      	ldr	r3, [r7, #28]
 8104536:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 810453a:	637b      	str	r3, [r7, #52]	@ 0x34
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	3308      	adds	r3, #8
 8104542:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8104544:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8104546:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104548:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810454a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810454c:	e841 2300 	strex	r3, r2, [r1]
 8104550:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8104552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104554:	2b00      	cmp	r3, #0
 8104556:	d1e5      	bne.n	8104524 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	681b      	ldr	r3, [r3, #0]
 810455c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810455e:	68fb      	ldr	r3, [r7, #12]
 8104560:	e853 3f00 	ldrex	r3, [r3]
 8104564:	60bb      	str	r3, [r7, #8]
   return(result);
 8104566:	68bb      	ldr	r3, [r7, #8]
 8104568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810456c:	633b      	str	r3, [r7, #48]	@ 0x30
 810456e:	687b      	ldr	r3, [r7, #4]
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	461a      	mov	r2, r3
 8104574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104576:	61bb      	str	r3, [r7, #24]
 8104578:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810457a:	6979      	ldr	r1, [r7, #20]
 810457c:	69ba      	ldr	r2, [r7, #24]
 810457e:	e841 2300 	strex	r3, r2, [r1]
 8104582:	613b      	str	r3, [r7, #16]
   return(result);
 8104584:	693b      	ldr	r3, [r7, #16]
 8104586:	2b00      	cmp	r3, #0
 8104588:	d1e6      	bne.n	8104558 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 810458a:	e026      	b.n	81045da <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	69db      	ldr	r3, [r3, #28]
 8104592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104596:	2b00      	cmp	r3, #0
 8104598:	d018      	beq.n	81045cc <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810459e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 81045a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81045a2:	881b      	ldrh	r3, [r3, #0]
 81045a4:	461a      	mov	r2, r3
 81045a6:	687b      	ldr	r3, [r7, #4]
 81045a8:	681b      	ldr	r3, [r3, #0]
 81045aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81045ae:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 81045b0:	687b      	ldr	r3, [r7, #4]
 81045b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81045b4:	1c9a      	adds	r2, r3, #2
 81045b6:	687b      	ldr	r3, [r7, #4]
 81045b8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81045c0:	b29b      	uxth	r3, r3
 81045c2:	3b01      	subs	r3, #1
 81045c4:	b29a      	uxth	r2, r3
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 81045cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81045ce:	3b01      	subs	r3, #1
 81045d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 81045d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81045d4:	2b00      	cmp	r3, #0
 81045d6:	d19f      	bne.n	8104518 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 81045d8:	e7ff      	b.n	81045da <UART_TxISR_16BIT_FIFOEN+0xde>
 81045da:	bf00      	nop
 81045dc:	3744      	adds	r7, #68	@ 0x44
 81045de:	46bd      	mov	sp, r7
 81045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045e4:	4770      	bx	lr

081045e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81045e6:	b480      	push	{r7}
 81045e8:	b085      	sub	sp, #20
 81045ea:	af00      	add	r7, sp, #0
 81045ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81045f4:	2b01      	cmp	r3, #1
 81045f6:	d101      	bne.n	81045fc <HAL_UARTEx_DisableFifoMode+0x16>
 81045f8:	2302      	movs	r3, #2
 81045fa:	e027      	b.n	810464c <HAL_UARTEx_DisableFifoMode+0x66>
 81045fc:	687b      	ldr	r3, [r7, #4]
 81045fe:	2201      	movs	r2, #1
 8104600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	2224      	movs	r2, #36	@ 0x24
 8104608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810460c:	687b      	ldr	r3, [r7, #4]
 810460e:	681b      	ldr	r3, [r3, #0]
 8104610:	681b      	ldr	r3, [r3, #0]
 8104612:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	681b      	ldr	r3, [r3, #0]
 8104618:	681a      	ldr	r2, [r3, #0]
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	681b      	ldr	r3, [r3, #0]
 810461e:	f022 0201 	bic.w	r2, r2, #1
 8104622:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8104624:	68fb      	ldr	r3, [r7, #12]
 8104626:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810462a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	2200      	movs	r2, #0
 8104630:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8104632:	687b      	ldr	r3, [r7, #4]
 8104634:	681b      	ldr	r3, [r3, #0]
 8104636:	68fa      	ldr	r2, [r7, #12]
 8104638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810463a:	687b      	ldr	r3, [r7, #4]
 810463c:	2220      	movs	r2, #32
 810463e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	2200      	movs	r2, #0
 8104646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810464a:	2300      	movs	r3, #0
}
 810464c:	4618      	mov	r0, r3
 810464e:	3714      	adds	r7, #20
 8104650:	46bd      	mov	sp, r7
 8104652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104656:	4770      	bx	lr

08104658 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8104658:	b580      	push	{r7, lr}
 810465a:	b084      	sub	sp, #16
 810465c:	af00      	add	r7, sp, #0
 810465e:	6078      	str	r0, [r7, #4]
 8104660:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8104668:	2b01      	cmp	r3, #1
 810466a:	d101      	bne.n	8104670 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810466c:	2302      	movs	r3, #2
 810466e:	e02d      	b.n	81046cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8104670:	687b      	ldr	r3, [r7, #4]
 8104672:	2201      	movs	r2, #1
 8104674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	2224      	movs	r2, #36	@ 0x24
 810467c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104680:	687b      	ldr	r3, [r7, #4]
 8104682:	681b      	ldr	r3, [r3, #0]
 8104684:	681b      	ldr	r3, [r3, #0]
 8104686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	681b      	ldr	r3, [r3, #0]
 810468c:	681a      	ldr	r2, [r3, #0]
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	681b      	ldr	r3, [r3, #0]
 8104692:	f022 0201 	bic.w	r2, r2, #1
 8104696:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8104698:	687b      	ldr	r3, [r7, #4]
 810469a:	681b      	ldr	r3, [r3, #0]
 810469c:	689b      	ldr	r3, [r3, #8]
 810469e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	681b      	ldr	r3, [r3, #0]
 81046a6:	683a      	ldr	r2, [r7, #0]
 81046a8:	430a      	orrs	r2, r1
 81046aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81046ac:	6878      	ldr	r0, [r7, #4]
 81046ae:	f000 f84f 	bl	8104750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	681b      	ldr	r3, [r3, #0]
 81046b6:	68fa      	ldr	r2, [r7, #12]
 81046b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	2220      	movs	r2, #32
 81046be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	2200      	movs	r2, #0
 81046c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81046ca:	2300      	movs	r3, #0
}
 81046cc:	4618      	mov	r0, r3
 81046ce:	3710      	adds	r7, #16
 81046d0:	46bd      	mov	sp, r7
 81046d2:	bd80      	pop	{r7, pc}

081046d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81046d4:	b580      	push	{r7, lr}
 81046d6:	b084      	sub	sp, #16
 81046d8:	af00      	add	r7, sp, #0
 81046da:	6078      	str	r0, [r7, #4]
 81046dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81046e4:	2b01      	cmp	r3, #1
 81046e6:	d101      	bne.n	81046ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81046e8:	2302      	movs	r3, #2
 81046ea:	e02d      	b.n	8104748 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81046ec:	687b      	ldr	r3, [r7, #4]
 81046ee:	2201      	movs	r2, #1
 81046f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	2224      	movs	r2, #36	@ 0x24
 81046f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	681b      	ldr	r3, [r3, #0]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104704:	687b      	ldr	r3, [r7, #4]
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	681a      	ldr	r2, [r3, #0]
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	681b      	ldr	r3, [r3, #0]
 810470e:	f022 0201 	bic.w	r2, r2, #1
 8104712:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8104714:	687b      	ldr	r3, [r7, #4]
 8104716:	681b      	ldr	r3, [r3, #0]
 8104718:	689b      	ldr	r3, [r3, #8]
 810471a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	681b      	ldr	r3, [r3, #0]
 8104722:	683a      	ldr	r2, [r7, #0]
 8104724:	430a      	orrs	r2, r1
 8104726:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104728:	6878      	ldr	r0, [r7, #4]
 810472a:	f000 f811 	bl	8104750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	68fa      	ldr	r2, [r7, #12]
 8104734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	2220      	movs	r2, #32
 810473a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	2200      	movs	r2, #0
 8104742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104746:	2300      	movs	r3, #0
}
 8104748:	4618      	mov	r0, r3
 810474a:	3710      	adds	r7, #16
 810474c:	46bd      	mov	sp, r7
 810474e:	bd80      	pop	{r7, pc}

08104750 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8104750:	b480      	push	{r7}
 8104752:	b085      	sub	sp, #20
 8104754:	af00      	add	r7, sp, #0
 8104756:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8104758:	687b      	ldr	r3, [r7, #4]
 810475a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810475c:	2b00      	cmp	r3, #0
 810475e:	d108      	bne.n	8104772 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8104760:	687b      	ldr	r3, [r7, #4]
 8104762:	2201      	movs	r2, #1
 8104764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	2201      	movs	r2, #1
 810476c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8104770:	e031      	b.n	81047d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8104772:	2310      	movs	r3, #16
 8104774:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8104776:	2310      	movs	r3, #16
 8104778:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	681b      	ldr	r3, [r3, #0]
 810477e:	689b      	ldr	r3, [r3, #8]
 8104780:	0e5b      	lsrs	r3, r3, #25
 8104782:	b2db      	uxtb	r3, r3
 8104784:	f003 0307 	and.w	r3, r3, #7
 8104788:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810478a:	687b      	ldr	r3, [r7, #4]
 810478c:	681b      	ldr	r3, [r3, #0]
 810478e:	689b      	ldr	r3, [r3, #8]
 8104790:	0f5b      	lsrs	r3, r3, #29
 8104792:	b2db      	uxtb	r3, r3
 8104794:	f003 0307 	and.w	r3, r3, #7
 8104798:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810479a:	7bbb      	ldrb	r3, [r7, #14]
 810479c:	7b3a      	ldrb	r2, [r7, #12]
 810479e:	4911      	ldr	r1, [pc, #68]	@ (81047e4 <UARTEx_SetNbDataToProcess+0x94>)
 81047a0:	5c8a      	ldrb	r2, [r1, r2]
 81047a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81047a6:	7b3a      	ldrb	r2, [r7, #12]
 81047a8:	490f      	ldr	r1, [pc, #60]	@ (81047e8 <UARTEx_SetNbDataToProcess+0x98>)
 81047aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81047ac:	fb93 f3f2 	sdiv	r3, r3, r2
 81047b0:	b29a      	uxth	r2, r3
 81047b2:	687b      	ldr	r3, [r7, #4]
 81047b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81047b8:	7bfb      	ldrb	r3, [r7, #15]
 81047ba:	7b7a      	ldrb	r2, [r7, #13]
 81047bc:	4909      	ldr	r1, [pc, #36]	@ (81047e4 <UARTEx_SetNbDataToProcess+0x94>)
 81047be:	5c8a      	ldrb	r2, [r1, r2]
 81047c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 81047c4:	7b7a      	ldrb	r2, [r7, #13]
 81047c6:	4908      	ldr	r1, [pc, #32]	@ (81047e8 <UARTEx_SetNbDataToProcess+0x98>)
 81047c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81047ca:	fb93 f3f2 	sdiv	r3, r3, r2
 81047ce:	b29a      	uxth	r2, r3
 81047d0:	687b      	ldr	r3, [r7, #4]
 81047d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 81047d6:	bf00      	nop
 81047d8:	3714      	adds	r7, #20
 81047da:	46bd      	mov	sp, r7
 81047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047e0:	4770      	bx	lr
 81047e2:	bf00      	nop
 81047e4:	0810488c 	.word	0x0810488c
 81047e8:	08104894 	.word	0x08104894

081047ec <memset>:
 81047ec:	4402      	add	r2, r0
 81047ee:	4603      	mov	r3, r0
 81047f0:	4293      	cmp	r3, r2
 81047f2:	d100      	bne.n	81047f6 <memset+0xa>
 81047f4:	4770      	bx	lr
 81047f6:	f803 1b01 	strb.w	r1, [r3], #1
 81047fa:	e7f9      	b.n	81047f0 <memset+0x4>

081047fc <__libc_init_array>:
 81047fc:	b570      	push	{r4, r5, r6, lr}
 81047fe:	4d0d      	ldr	r5, [pc, #52]	@ (8104834 <__libc_init_array+0x38>)
 8104800:	4c0d      	ldr	r4, [pc, #52]	@ (8104838 <__libc_init_array+0x3c>)
 8104802:	1b64      	subs	r4, r4, r5
 8104804:	10a4      	asrs	r4, r4, #2
 8104806:	2600      	movs	r6, #0
 8104808:	42a6      	cmp	r6, r4
 810480a:	d109      	bne.n	8104820 <__libc_init_array+0x24>
 810480c:	4d0b      	ldr	r5, [pc, #44]	@ (810483c <__libc_init_array+0x40>)
 810480e:	4c0c      	ldr	r4, [pc, #48]	@ (8104840 <__libc_init_array+0x44>)
 8104810:	f000 f818 	bl	8104844 <_init>
 8104814:	1b64      	subs	r4, r4, r5
 8104816:	10a4      	asrs	r4, r4, #2
 8104818:	2600      	movs	r6, #0
 810481a:	42a6      	cmp	r6, r4
 810481c:	d105      	bne.n	810482a <__libc_init_array+0x2e>
 810481e:	bd70      	pop	{r4, r5, r6, pc}
 8104820:	f855 3b04 	ldr.w	r3, [r5], #4
 8104824:	4798      	blx	r3
 8104826:	3601      	adds	r6, #1
 8104828:	e7ee      	b.n	8104808 <__libc_init_array+0xc>
 810482a:	f855 3b04 	ldr.w	r3, [r5], #4
 810482e:	4798      	blx	r3
 8104830:	3601      	adds	r6, #1
 8104832:	e7f2      	b.n	810481a <__libc_init_array+0x1e>
 8104834:	081048a4 	.word	0x081048a4
 8104838:	081048a4 	.word	0x081048a4
 810483c:	081048a4 	.word	0x081048a4
 8104840:	081048a8 	.word	0x081048a8

08104844 <_init>:
 8104844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104846:	bf00      	nop
 8104848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810484a:	bc08      	pop	{r3}
 810484c:	469e      	mov	lr, r3
 810484e:	4770      	bx	lr

08104850 <_fini>:
 8104850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104852:	bf00      	nop
 8104854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104856:	bc08      	pop	{r3}
 8104858:	469e      	mov	lr, r3
 810485a:	4770      	bx	lr
