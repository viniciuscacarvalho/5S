
geral_test_h755zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010490  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  08010730  08010730  00011730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e2c  08010e2c  000121d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010e2c  08010e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e34  08010e34  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e34  08010e34  00011e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010e38  08010e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  08010e3c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033d0  240001d8  08011014  000121d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240035a8  08011014  000125a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022088  00000000  00000000  00012206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004537  00000000  00000000  0003428e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  000387c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001396  00000000  00000000  0003a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040941  00000000  00000000  0003b506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e16  00000000  00000000  0007be47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019b41b  00000000  00000000  000a0c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023c078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d68  00000000  00000000  0023c0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00243e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010718 	.word	0x08010718

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08010718 	.word	0x08010718

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b49      	ldr	r3, [pc, #292]	@ (8000bd0 <SystemInit+0x12c>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a48      	ldr	r2, [pc, #288]	@ (8000bd0 <SystemInit+0x12c>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000ab8:	4b45      	ldr	r3, [pc, #276]	@ (8000bd0 <SystemInit+0x12c>)
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	4a44      	ldr	r2, [pc, #272]	@ (8000bd0 <SystemInit+0x12c>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac4:	4b43      	ldr	r3, [pc, #268]	@ (8000bd4 <SystemInit+0x130>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	d807      	bhi.n	8000ae0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad0:	4b40      	ldr	r3, [pc, #256]	@ (8000bd4 <SystemInit+0x130>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f023 030f 	bic.w	r3, r3, #15
 8000ad8:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd4 <SystemInit+0x130>)
 8000ada:	f043 0307 	orr.w	r3, r3, #7
 8000ade:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <SystemInit+0x134>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd8 <SystemInit+0x134>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aec:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd8 <SystemInit+0x134>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000af2:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <SystemInit+0x134>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4938      	ldr	r1, [pc, #224]	@ (8000bd8 <SystemInit+0x134>)
 8000af8:	4b38      	ldr	r3, [pc, #224]	@ (8000bdc <SystemInit+0x138>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000afe:	4b35      	ldr	r3, [pc, #212]	@ (8000bd4 <SystemInit+0x130>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d007      	beq.n	8000b1a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b0a:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <SystemInit+0x130>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f023 030f 	bic.w	r3, r3, #15
 8000b12:	4a30      	ldr	r2, [pc, #192]	@ (8000bd4 <SystemInit+0x130>)
 8000b14:	f043 0307 	orr.w	r3, r3, #7
 8000b18:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <SystemInit+0x134>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b20:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <SystemInit+0x134>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b26:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd8 <SystemInit+0x134>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <SystemInit+0x134>)
 8000b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8000be0 <SystemInit+0x13c>)
 8000b30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b32:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <SystemInit+0x134>)
 8000b34:	4a2b      	ldr	r2, [pc, #172]	@ (8000be4 <SystemInit+0x140>)
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <SystemInit+0x134>)
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000be8 <SystemInit+0x144>)
 8000b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <SystemInit+0x134>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <SystemInit+0x134>)
 8000b46:	4a28      	ldr	r2, [pc, #160]	@ (8000be8 <SystemInit+0x144>)
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b4a:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <SystemInit+0x134>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b50:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <SystemInit+0x134>)
 8000b52:	4a25      	ldr	r2, [pc, #148]	@ (8000be8 <SystemInit+0x144>)
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <SystemInit+0x134>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <SystemInit+0x134>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd8 <SystemInit+0x134>)
 8000b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <SystemInit+0x134>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <SystemInit+0x148>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b72:	4a1e      	ldr	r2, [pc, #120]	@ (8000bec <SystemInit+0x148>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <SystemInit+0x14c>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <SystemInit+0x150>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b86:	d202      	bcs.n	8000b8e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <SystemInit+0x154>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <SystemInit+0x134>)
 8000b90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d113      	bne.n	8000bc4 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <SystemInit+0x134>)
 8000b9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <SystemInit+0x134>)
 8000ba4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ba8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <SystemInit+0x158>)
 8000bae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bb2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <SystemInit+0x134>)
 8000bb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bba:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <SystemInit+0x134>)
 8000bbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bc0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	52002000 	.word	0x52002000
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000be0:	02020200 	.word	0x02020200
 8000be4:	01ff0000 	.word	0x01ff0000
 8000be8:	01010280 	.word	0x01010280
 8000bec:	580000c0 	.word	0x580000c0
 8000bf0:	5c001000 	.word	0x5c001000
 8000bf4:	ffff0000 	.word	0xffff0000
 8000bf8:	51008108 	.word	0x51008108
 8000bfc:	52004000 	.word	0x52004000

08000c00 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c0a:	f023 0302 	bic.w	r3, r3, #2
 8000c0e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c10:	bf00      	nop
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f9      	beq.n	8000c12 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	58024800 	.word	0x58024800

08000c30 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c54:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c56:	4a32      	ldr	r2, [pc, #200]	@ (8000d20 <MX_ADC1_Init+0xf0>)
 8000c58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c5a:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c5c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c64:	2210      	movs	r2, #16
 8000c66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c74:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c80:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c92:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c98:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb8:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cba:	f001 f8d5 	bl	8001e68 <HAL_ADC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000cc4:	f000 fada 	bl	800127c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4812      	ldr	r0, [pc, #72]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cd4:	f001 fe8c 	bl	80029f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cde:	f000 facd 	bl	800127c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_ADC1_Init+0xf4>)
 8000ce4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cee:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000d06:	f001 fa51 	bl	80021ac <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d10:	f000 fab4 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	@ 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	240001f4 	.word	0x240001f4
 8000d20:	40022000 	.word	0x40022000
 8000d24:	3ef08000 	.word	0x3ef08000

08000d28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	22c0      	movs	r2, #192	@ 0xc0
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f00c f9de 	bl	800d10a <memset>
  if(adcHandle->Instance==ADC1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a2b      	ldr	r2, [pc, #172]	@ (8000e00 <HAL_ADC_MspInit+0xd8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d14f      	bne.n	8000df8 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d58:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d64:	2304      	movs	r3, #4
 8000d66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000d68:	230a      	movs	r3, #10
 8000d6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d78:	23c0      	movs	r3, #192	@ 0xc0
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 fd72 	bl	8005878 <HAL_RCCEx_PeriphCLKConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000d9a:	f000 fa6f 	bl	800127c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da4:	4a17      	ldr	r2, [pc, #92]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000da6:	f043 0320 	orr.w	r3, r3, #32
 8000daa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db4:	f003 0320 	and.w	r3, r3, #32
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	4a10      	ldr	r2, [pc, #64]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dda:	2308      	movs	r3, #8
 8000ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000df4:	f002 fd4e 	bl	8003894 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000df8:	bf00      	nop
 8000dfa:	37e8      	adds	r7, #232	@ 0xe8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40022000 	.word	0x40022000
 8000e04:	58024400 	.word	0x58024400
 8000e08:	58020000 	.word	0x58020000

08000e0c <MX_GPIO_Init>:
     PG11   ------> ETH_TX_EN
     PG12   ------> USART6_RTS
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b59      	ldr	r3, [pc, #356]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e28:	4a57      	ldr	r2, [pc, #348]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e32:	4b55      	ldr	r3, [pc, #340]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b51      	ldr	r3, [pc, #324]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e46:	4a50      	ldr	r2, [pc, #320]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e50:	4b4d      	ldr	r3, [pc, #308]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e64:	4a48      	ldr	r2, [pc, #288]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6e:	4b46      	ldr	r3, [pc, #280]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7c:	4b42      	ldr	r3, [pc, #264]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e82:	4a41      	ldr	r2, [pc, #260]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea0:	4a39      	ldr	r2, [pc, #228]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eaa:	4b37      	ldr	r3, [pc, #220]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000eb8:	2332      	movs	r3, #50	@ 0x32
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec8:	230b      	movs	r3, #11
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	482e      	ldr	r0, [pc, #184]	@ (8000f8c <MX_GPIO_Init+0x180>)
 8000ed4:	f002 fcde 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ed8:	2386      	movs	r3, #134	@ 0x86
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee8:	230b      	movs	r3, #11
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4827      	ldr	r0, [pc, #156]	@ (8000f90 <MX_GPIO_Init+0x184>)
 8000ef4:	f002 fcce 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ef8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0a:	230b      	movs	r3, #11
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	481f      	ldr	r0, [pc, #124]	@ (8000f94 <MX_GPIO_Init+0x188>)
 8000f16:	f002 fcbd 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f1a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4816      	ldr	r0, [pc, #88]	@ (8000f90 <MX_GPIO_Init+0x184>)
 8000f38:	f002 fcac 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8000f3c:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <MX_GPIO_Init+0x18c>)
 8000f5a:	f002 fc9b 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f5e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f70:	230b      	movs	r3, #11
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <MX_GPIO_Init+0x18c>)
 8000f7c:	f002 fc8a 	bl	8003894 <HAL_GPIO_Init>

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	@ 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020800 	.word	0x58020800
 8000f90:	58020000 	.word	0x58020000
 8000f94:	58020400 	.word	0x58020400
 8000f98:	58021800 	.word	0x58021800

08000f9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <MX_I2C1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <MX_I2C1_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd8:	f002 fe3a 	bl	8003c50 <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 f94b 	bl	800127c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fea:	f003 fb6d 	bl	80046c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 f942 	bl	800127c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000ffc:	f003 fbaf 	bl	800475e <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 f939 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	24000258 	.word	0x24000258
 8001014:	40005400 	.word	0x40005400
 8001018:	00707cbb 	.word	0x00707cbb

0800101c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0ba      	sub	sp, #232	@ 0xe8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	22c0      	movs	r2, #192	@ 0xc0
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f00c f864 	bl	800d10a <memset>
  if(i2cHandle->Instance==I2C1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <HAL_I2C_MspInit+0xc8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d146      	bne.n	80010da <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800104c:	f04f 0208 	mov.w	r2, #8
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fc08 	bl	8005878 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800106e:	f000 f905 	bl	800127c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001090:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001094:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001098:	2312      	movs	r3, #18
 800109a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010aa:	2304      	movs	r3, #4
 80010ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	@ (80010ec <HAL_I2C_MspInit+0xd0>)
 80010b8:	f002 fbec 	bl	8003894 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 80010be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010c2:	4a09      	ldr	r2, [pc, #36]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 80010ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010da:	bf00      	nop
 80010dc:	37e8      	adds	r7, #232	@ 0xe8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40005400 	.word	0x40005400
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58020400 	.word	0x58020400

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80010f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010fa:	607b      	str	r3, [r7, #4]
  //}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f000 fc34 	bl	8001968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f83e 	bl	8001180 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001104:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <main+0x8c>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110a:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <main+0x8c>)
 800110c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001114:	4b19      	ldr	r3, [pc, #100]	@ (800117c <main+0x8c>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001122:	2000      	movs	r0, #0
 8001124:	f002 fd66 	bl	8003bf4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f002 fd7c 	bl	8003c28 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001130:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001134:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001136:	bf00      	nop
 8001138:	4b10      	ldr	r3, [pc, #64]	@ (800117c <main+0x8c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d104      	bne.n	800114e <main+0x5e>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	1e5a      	subs	r2, r3, #1
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	dcf4      	bgt.n	8001138 <main+0x48>
if ( timeout < 0 )
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	da01      	bge.n	8001158 <main+0x68>
{
Error_Handler();
 8001154:	f000 f892 	bl	800127c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f7ff fe58 	bl	8000e0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800115c:	f000 fac2 	bl	80016e4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001160:	f7ff fd66 	bl	8000c30 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001164:	f000 fa72 	bl	800164c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001168:	f7ff ff18 	bl	8000f9c <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 800116c:	f000 f88c 	bl	8001288 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */
  manager_init();
 8001170:	f00a ff60 	bl	800c034 <manager_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  manager_update();
 8001174:	f00a ff6e 	bl	800c054 <manager_update>
 8001178:	e7fc      	b.n	8001174 <main+0x84>
 800117a:	bf00      	nop
 800117c:	58024400 	.word	0x58024400

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b09c      	sub	sp, #112	@ 0x70
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118a:	224c      	movs	r2, #76	@ 0x4c
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f00b ffbb 	bl	800d10a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2220      	movs	r2, #32
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f00b ffb5 	bl	800d10a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011a0:	2004      	movs	r0, #4
 80011a2:	f003 fb29 	bl	80047f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <SystemClock_Config+0xf4>)
 80011ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ae:	4a31      	ldr	r2, [pc, #196]	@ (8001274 <SystemClock_Config+0xf4>)
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <SystemClock_Config+0xf4>)
 80011b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001278 <SystemClock_Config+0xf8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001278 <SystemClock_Config+0xf8>)
 80011ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <SystemClock_Config+0xf8>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011dc:	bf00      	nop
 80011de:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <SystemClock_Config+0xf8>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011ea:	d1f8      	bne.n	80011de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2340      	movs	r3, #64	@ 0x40
 80011f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fc:	2300      	movs	r3, #0
 80011fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001200:	2304      	movs	r3, #4
 8001202:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001204:	230a      	movs	r3, #10
 8001206:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001208:	2302      	movs	r3, #2
 800120a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800120c:	2302      	movs	r3, #2
 800120e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001214:	230c      	movs	r3, #12
 8001216:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001218:	2302      	movs	r3, #2
 800121a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fb41 	bl	80048ac <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001230:	f000 f824 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	233f      	movs	r3, #63	@ 0x3f
 8001236:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001248:	2340      	movs	r3, #64	@ 0x40
 800124a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800124c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001250:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2101      	movs	r1, #1
 800125a:	4618      	mov	r0, r3
 800125c:	f003 ff80 	bl	8005160 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001266:	f000 f809 	bl	800127c <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3770      	adds	r7, #112	@ 0x70
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	58000400 	.word	0x58000400
 8001278:	58024800 	.word	0x58024800

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <Error_Handler+0x8>

08001288 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_SDMMC1_SD_Init+0x40>)
 800128e:	4a0f      	ldr	r2, [pc, #60]	@ (80012cc <MX_SDMMC1_SD_Init+0x44>)
 8001290:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <MX_SDMMC1_SD_Init+0x40>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <MX_SDMMC1_SD_Init+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <MX_SDMMC1_SD_Init+0x40>)
 80012a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012a4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <MX_SDMMC1_SD_Init+0x40>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_SDMMC1_SD_Init+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_SDMMC1_SD_Init+0x40>)
 80012b4:	f006 ffde 	bl	8008274 <HAL_SD_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80012be:	f7ff ffdd 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	240002ac 	.word	0x240002ac
 80012cc:	52007000 	.word	0x52007000

080012d0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0bc      	sub	sp, #240	@ 0xf0
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	22c0      	movs	r2, #192	@ 0xc0
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00b ff0a 	bl	800d10a <memset>
  if(sdHandle->Instance==SDMMC1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a38      	ldr	r2, [pc, #224]	@ (80013dc <HAL_SD_MspInit+0x10c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d169      	bne.n	80013d4 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001300:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800130c:	2300      	movs	r3, #0
 800130e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4618      	mov	r0, r3
 8001316:	f004 faaf 	bl	8005878 <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001320:	f7ff ffac 	bl	800127c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001324:	4b2e      	ldr	r3, [pc, #184]	@ (80013e0 <HAL_SD_MspInit+0x110>)
 8001326:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800132a:	4a2d      	ldr	r2, [pc, #180]	@ (80013e0 <HAL_SD_MspInit+0x110>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001330:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001334:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <HAL_SD_MspInit+0x110>)
 8001336:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800133a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <HAL_SD_MspInit+0x110>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	4a25      	ldr	r2, [pc, #148]	@ (80013e0 <HAL_SD_MspInit+0x110>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001352:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <HAL_SD_MspInit+0x110>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001360:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <HAL_SD_MspInit+0x110>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	4a1e      	ldr	r2, [pc, #120]	@ (80013e0 <HAL_SD_MspInit+0x110>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <HAL_SD_MspInit+0x110>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800137e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001398:	230c      	movs	r3, #12
 800139a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013a2:	4619      	mov	r1, r3
 80013a4:	480f      	ldr	r0, [pc, #60]	@ (80013e4 <HAL_SD_MspInit+0x114>)
 80013a6:	f002 fa75 	bl	8003894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013aa:	2304      	movs	r3, #4
 80013ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80013c2:	230c      	movs	r3, #12
 80013c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <HAL_SD_MspInit+0x118>)
 80013d0:	f002 fa60 	bl	8003894 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80013d4:	bf00      	nop
 80013d6:	37f0      	adds	r7, #240	@ 0xf0
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	52007000 	.word	0x52007000
 80013e0:	58024400 	.word	0x58024400
 80013e4:	58020800 	.word	0x58020800
 80013e8:	58020c00 	.word	0x58020c00

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_MspInit+0x30>)
 80013f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013f8:	4a08      	ldr	r2, [pc, #32]	@ (800141c <HAL_MspInit+0x30>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_MspInit+0x30>)
 8001404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	58024400 	.word	0x58024400

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <NMI_Handler+0x4>

08001428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <MemManage_Handler+0x4>

08001438 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <UsageFault_Handler+0x4>

08001448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extended_tick++;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <SysTick_Handler+0x20>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	1c50      	adds	r0, r2, #1
 8001480:	f143 0100 	adc.w	r1, r3, #0
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <SysTick_Handler+0x20>)
 8001486:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148a:	f000 fadf 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	24000328 	.word	0x24000328

08001498 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <USART1_IRQHandler+0x10>)
 800149e:	f008 f991 	bl	80097c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	24000334 	.word	0x24000334

080014ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <USART3_IRQHandler+0x10>)
 80014b2:	f008 f987 	bl	80097c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	240003c8 	.word	0x240003c8

080014c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return 1;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_kill>:

int _kill(int pid, int sig)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014da:	f00b fe69 	bl	800d1b0 <__errno>
 80014de:	4603      	mov	r3, r0
 80014e0:	2216      	movs	r2, #22
 80014e2:	601a      	str	r2, [r3, #0]
  return -1;
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_exit>:

void _exit (int status)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ffe7 	bl	80014d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001502:	bf00      	nop
 8001504:	e7fd      	b.n	8001502 <_exit+0x12>

08001506 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e00a      	b.n	800152e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001518:	f3af 8000 	nop.w
 800151c:	4601      	mov	r1, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	60ba      	str	r2, [r7, #8]
 8001524:	b2ca      	uxtb	r2, r1
 8001526:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	dbf0      	blt.n	8001518 <_read+0x12>
  }

  return len;
 8001536:	687b      	ldr	r3, [r7, #4]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e009      	b.n	8001566 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	429a      	cmp	r2, r3
 800156c:	dbf1      	blt.n	8001552 <_write+0x12>
  }
  return len;
 800156e:	687b      	ldr	r3, [r7, #4]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_close>:

int _close(int file)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a0:	605a      	str	r2, [r3, #4]
  return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_isatty>:

int _isatty(int file)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b085      	sub	sp, #20
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e8:	4a14      	ldr	r2, [pc, #80]	@ (800163c <_sbrk+0x5c>)
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <_sbrk+0x60>)
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <_sbrk+0x64>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <_sbrk+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	429a      	cmp	r2, r3
 800160e:	d207      	bcs.n	8001620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001610:	f00b fdce 	bl	800d1b0 <__errno>
 8001614:	4603      	mov	r3, r0
 8001616:	220c      	movs	r2, #12
 8001618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800161e:	e009      	b.n	8001634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <_sbrk+0x64>)
 8001630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	24080000 	.word	0x24080000
 8001640:	00000400 	.word	0x00000400
 8001644:	24000330 	.word	0x24000330
 8001648:	240035a8 	.word	0x240035a8

0800164c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001650:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 8001652:	4a23      	ldr	r2, [pc, #140]	@ (80016e0 <MX_USART1_UART_Init+0x94>)
 8001654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001656:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 8001658:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800165c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800166a:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001682:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800168e:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001694:	4811      	ldr	r0, [pc, #68]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 8001696:	f007 fe5b 	bl	8009350 <HAL_UART_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016a0:	f7ff fdec 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a4:	2100      	movs	r1, #0
 80016a6:	480d      	ldr	r0, [pc, #52]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 80016a8:	f009 fe40 	bl	800b32c <HAL_UARTEx_SetTxFifoThreshold>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016b2:	f7ff fde3 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b6:	2100      	movs	r1, #0
 80016b8:	4808      	ldr	r0, [pc, #32]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 80016ba:	f009 fe75 	bl	800b3a8 <HAL_UARTEx_SetRxFifoThreshold>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016c4:	f7ff fdda 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	@ (80016dc <MX_USART1_UART_Init+0x90>)
 80016ca:	f009 fdf6 	bl	800b2ba <HAL_UARTEx_DisableFifoMode>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016d4:	f7ff fdd2 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	24000334 	.word	0x24000334
 80016e0:	40011000 	.word	0x40011000

080016e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016e8:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 80016ea:	4a23      	ldr	r2, [pc, #140]	@ (8001778 <MX_USART3_UART_Init+0x94>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ee:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001726:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800172c:	4811      	ldr	r0, [pc, #68]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 800172e:	f007 fe0f 	bl	8009350 <HAL_UART_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001738:	f7ff fda0 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173c:	2100      	movs	r1, #0
 800173e:	480d      	ldr	r0, [pc, #52]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 8001740:	f009 fdf4 	bl	800b32c <HAL_UARTEx_SetTxFifoThreshold>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800174a:	f7ff fd97 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	4808      	ldr	r0, [pc, #32]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 8001752:	f009 fe29 	bl	800b3a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800175c:	f7ff fd8e 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	@ (8001774 <MX_USART3_UART_Init+0x90>)
 8001762:	f009 fdaa 	bl	800b2ba <HAL_UARTEx_DisableFifoMode>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800176c:	f7ff fd86 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	240003c8 	.word	0x240003c8
 8001778:	40004800 	.word	0x40004800

0800177c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0bc      	sub	sp, #240	@ 0xf0
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001794:	f107 0318 	add.w	r3, r7, #24
 8001798:	22c0      	movs	r2, #192	@ 0xc0
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f00b fcb4 	bl	800d10a <memset>
  if(uartHandle->Instance==USART1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a55      	ldr	r2, [pc, #340]	@ (80018fc <HAL_UART_MspInit+0x180>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d14e      	bne.n	800184a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017ac:	f04f 0201 	mov.w	r2, #1
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017be:	f107 0318 	add.w	r3, r7, #24
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 f858 	bl	8005878 <HAL_RCCEx_PeriphCLKConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017ce:	f7ff fd55 	bl	800127c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001900 <HAL_UART_MspInit+0x184>)
 80017d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017d8:	4a49      	ldr	r2, [pc, #292]	@ (8001900 <HAL_UART_MspInit+0x184>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <HAL_UART_MspInit+0x184>)
 80017e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b43      	ldr	r3, [pc, #268]	@ (8001900 <HAL_UART_MspInit+0x184>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f6:	4a42      	ldr	r2, [pc, #264]	@ (8001900 <HAL_UART_MspInit+0x184>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001800:	4b3f      	ldr	r3, [pc, #252]	@ (8001900 <HAL_UART_MspInit+0x184>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800180e:	23c0      	movs	r3, #192	@ 0xc0
 8001810:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001826:	2307      	movs	r3, #7
 8001828:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001830:	4619      	mov	r1, r3
 8001832:	4834      	ldr	r0, [pc, #208]	@ (8001904 <HAL_UART_MspInit+0x188>)
 8001834:	f002 f82e 	bl	8003894 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	2025      	movs	r0, #37	@ 0x25
 800183e:	f001 fa90 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001842:	2025      	movs	r0, #37	@ 0x25
 8001844:	f001 faa7 	bl	8002d96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001848:	e053      	b.n	80018f2 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a2e      	ldr	r2, [pc, #184]	@ (8001908 <HAL_UART_MspInit+0x18c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d14e      	bne.n	80018f2 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001854:	f04f 0202 	mov.w	r2, #2
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001866:	f107 0318 	add.w	r3, r7, #24
 800186a:	4618      	mov	r0, r3
 800186c:	f004 f804 	bl	8005878 <HAL_RCCEx_PeriphCLKConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8001876:	f7ff fd01 	bl	800127c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800187a:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <HAL_UART_MspInit+0x184>)
 800187c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001880:	4a1f      	ldr	r2, [pc, #124]	@ (8001900 <HAL_UART_MspInit+0x184>)
 8001882:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001886:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <HAL_UART_MspInit+0x184>)
 800188c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_UART_MspInit+0x184>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189e:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <HAL_UART_MspInit+0x184>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_UART_MspInit+0x184>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018d0:	2307      	movs	r3, #7
 80018d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018da:	4619      	mov	r1, r3
 80018dc:	480b      	ldr	r0, [pc, #44]	@ (800190c <HAL_UART_MspInit+0x190>)
 80018de:	f001 ffd9 	bl	8003894 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2027      	movs	r0, #39	@ 0x27
 80018e8:	f001 fa3b 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018ec:	2027      	movs	r0, #39	@ 0x27
 80018ee:	f001 fa52 	bl	8002d96 <HAL_NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	37f0      	adds	r7, #240	@ 0xf0
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40011000 	.word	0x40011000
 8001900:	58024400 	.word	0x58024400
 8001904:	58020400 	.word	0x58020400
 8001908:	40004800 	.word	0x40004800
 800190c:	58020c00 	.word	0x58020c00

08001910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001910:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800194c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001914:	f7ff f974 	bl	8000c00 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001918:	f7ff f8c4 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800191e:	490d      	ldr	r1, [pc, #52]	@ (8001954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001934:	4c0a      	ldr	r4, [pc, #40]	@ (8001960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001942:	f00b fc3b 	bl	800d1bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001946:	f7ff fbd3 	bl	80010f0 <main>
  bx  lr
 800194a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800194c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001950:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001954:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001958:	08010e3c 	.word	0x08010e3c
  ldr r2, =_sbss
 800195c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001960:	240035a8 	.word	0x240035a8

08001964 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC3_IRQHandler>
	...

08001968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196e:	2003      	movs	r0, #3
 8001970:	f001 f9ec 	bl	8002d4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001974:	f003 fdaa 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <HAL_Init+0x68>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	4913      	ldr	r1, [pc, #76]	@ (80019d4 <HAL_Init+0x6c>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001992:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <HAL_Init+0x68>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	4a0e      	ldr	r2, [pc, #56]	@ (80019d4 <HAL_Init+0x6c>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	4a0b      	ldr	r2, [pc, #44]	@ (80019d8 <HAL_Init+0x70>)
 80019aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019ac:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <HAL_Init+0x74>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b2:	200f      	movs	r0, #15
 80019b4:	f000 f814 	bl	80019e0 <HAL_InitTick>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e002      	b.n	80019c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019c2:	f7ff fd13 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	58024400 	.word	0x58024400
 80019d4:	080109cc 	.word	0x080109cc
 80019d8:	24000004 	.word	0x24000004
 80019dc:	24000000 	.word	0x24000000

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019e8:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <HAL_InitTick+0x60>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e021      	b.n	8001a38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <HAL_InitTick+0x64>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <HAL_InitTick+0x60>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f001 f9d1 	bl	8002db2 <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a28:	f001 f99b 	bl	8002d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	@ (8001a48 <HAL_InitTick+0x68>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2400000c 	.word	0x2400000c
 8001a44:	24000000 	.word	0x24000000
 8001a48:	24000008 	.word	0x24000008

08001a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_IncTick+0x20>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_IncTick+0x24>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <HAL_IncTick+0x24>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	2400000c 	.word	0x2400000c
 8001a70:	2400045c 	.word	0x2400045c

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b03      	ldr	r3, [pc, #12]	@ (8001a88 <HAL_GetTick+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2400045c 	.word	0x2400045c

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff ffee 	bl	8001a74 <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_Delay+0x44>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2400000c 	.word	0x2400000c

08001ad4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ad8:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <HAL_GetREVID+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0c1b      	lsrs	r3, r3, #16
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	5c001000 	.word	0x5c001000

08001aec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	609a      	str	r2, [r3, #8]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d107      	bne.n	8001b78 <LL_ADC_SetChannelPreselection+0x24>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	0e9b      	lsrs	r3, r3, #26
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	2201      	movs	r2, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	e015      	b.n	8001ba4 <LL_ADC_SetChannelPreselection+0x50>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001b8e:	2320      	movs	r3, #32
 8001b90:	e003      	b.n	8001b9a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	69d2      	ldr	r2, [r2, #28]
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001bae:	bf00      	nop
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b087      	sub	sp, #28
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3360      	adds	r3, #96	@ 0x60
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	430b      	orrs	r3, r1
 8001be8:	431a      	orrs	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001bee:	bf00      	nop
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3360      	adds	r3, #96	@ 0x60
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	601a      	str	r2, [r3, #0]
  }
}
 8001c56:	bf00      	nop
 8001c58:	371c      	adds	r7, #28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b087      	sub	sp, #28
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3330      	adds	r3, #48	@ 0x30
 8001c72:	461a      	mov	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	4413      	add	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	211f      	movs	r1, #31
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0e9b      	lsrs	r3, r3, #26
 8001c9a:	f003 011f 	and.w	r1, r3, #31
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3314      	adds	r3, #20
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	0e5b      	lsrs	r3, r3, #25
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	0d1b      	lsrs	r3, r3, #20
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2107      	movs	r1, #7
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	0d1b      	lsrs	r3, r3, #20
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0318 	and.w	r3, r3, #24
 8001d32:	4908      	ldr	r1, [pc, #32]	@ (8001d54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d34:	40d9      	lsrs	r1, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	400b      	ands	r3, r1
 8001d3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	000fffff 	.word	0x000fffff

08001d58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6093      	str	r3, [r2, #8]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	5fffffc0 	.word	0x5fffffc0

08001d7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d90:	d101      	bne.n	8001d96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	6fffffc0 	.word	0x6fffffc0

08001dcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001de0:	d101      	bne.n	8001de6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <LL_ADC_IsEnabled+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_ADC_IsEnabled+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d101      	bne.n	8001e58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b089      	sub	sp, #36	@ 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e18f      	b.n	80021a2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7fe ff49 	bl	8000d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff67 	bl	8001d7c <LL_ADC_IsDeepPowerDownEnabled>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff4d 	bl	8001d58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff82 	bl	8001dcc <LL_ADC_IsInternalRegulatorEnabled>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d114      	bne.n	8001ef8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff66 	bl	8001da4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed8:	4b87      	ldr	r3, [pc, #540]	@ (80020f8 <HAL_ADC_Init+0x290>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	4a87      	ldr	r2, [pc, #540]	@ (80020fc <HAL_ADC_Init+0x294>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001eea:	e002      	b.n	8001ef2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f9      	bne.n	8001eec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff65 	bl	8001dcc <LL_ADC_IsInternalRegulatorEnabled>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10d      	bne.n	8001f24 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0c:	f043 0210 	orr.w	r2, r3, #16
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff76 	bl	8001e1a <LL_ADC_REG_IsConversionOngoing>
 8001f2e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f040 8129 	bne.w	8002190 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f040 8125 	bne.w	8002190 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f4e:	f043 0202 	orr.w	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff4a 	bl	8001df4 <LL_ADC_IsEnabled>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d136      	bne.n	8001fd4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a65      	ldr	r2, [pc, #404]	@ (8002100 <HAL_ADC_Init+0x298>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d004      	beq.n	8001f7a <HAL_ADC_Init+0x112>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a63      	ldr	r2, [pc, #396]	@ (8002104 <HAL_ADC_Init+0x29c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10e      	bne.n	8001f98 <HAL_ADC_Init+0x130>
 8001f7a:	4861      	ldr	r0, [pc, #388]	@ (8002100 <HAL_ADC_Init+0x298>)
 8001f7c:	f7ff ff3a 	bl	8001df4 <LL_ADC_IsEnabled>
 8001f80:	4604      	mov	r4, r0
 8001f82:	4860      	ldr	r0, [pc, #384]	@ (8002104 <HAL_ADC_Init+0x29c>)
 8001f84:	f7ff ff36 	bl	8001df4 <LL_ADC_IsEnabled>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4323      	orrs	r3, r4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e008      	b.n	8001faa <HAL_ADC_Init+0x142>
 8001f98:	485b      	ldr	r0, [pc, #364]	@ (8002108 <HAL_ADC_Init+0x2a0>)
 8001f9a:	f7ff ff2b 	bl	8001df4 <LL_ADC_IsEnabled>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d012      	beq.n	8001fd4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a53      	ldr	r2, [pc, #332]	@ (8002100 <HAL_ADC_Init+0x298>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_ADC_Init+0x15a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a51      	ldr	r2, [pc, #324]	@ (8002104 <HAL_ADC_Init+0x29c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_Init+0x15e>
 8001fc2:	4a52      	ldr	r2, [pc, #328]	@ (800210c <HAL_ADC_Init+0x2a4>)
 8001fc4:	e000      	b.n	8001fc8 <HAL_ADC_Init+0x160>
 8001fc6:	4a52      	ldr	r2, [pc, #328]	@ (8002110 <HAL_ADC_Init+0x2a8>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f7ff fd8c 	bl	8001aec <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001fd4:	f7ff fd7e 	bl	8001ad4 <HAL_GetREVID>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d914      	bls.n	800200c <HAL_ADC_Init+0x1a4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b10      	cmp	r3, #16
 8001fe8:	d110      	bne.n	800200c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7d5b      	ldrb	r3, [r3, #21]
 8001fee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ff4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ffa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7f1b      	ldrb	r3, [r3, #28]
 8002000:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002002:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002004:	f043 030c 	orr.w	r3, r3, #12
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	e00d      	b.n	8002028 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7d5b      	ldrb	r3, [r3, #21]
 8002010:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002016:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800201c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7f1b      	ldrb	r3, [r3, #28]
 8002022:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7f1b      	ldrb	r3, [r3, #28]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d106      	bne.n	800203e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	3b01      	subs	r3, #1
 8002036:	045b      	lsls	r3, r3, #17
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002052:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4b2c      	ldr	r3, [pc, #176]	@ (8002114 <HAL_ADC_Init+0x2ac>)
 8002062:	4013      	ands	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	69b9      	ldr	r1, [r7, #24]
 800206a:	430b      	orrs	r3, r1
 800206c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fed1 	bl	8001e1a <LL_ADC_REG_IsConversionOngoing>
 8002078:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fede 	bl	8001e40 <LL_ADC_INJ_IsConversionOngoing>
 8002084:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d15f      	bne.n	800214c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d15c      	bne.n	800214c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7d1b      	ldrb	r3, [r3, #20]
 8002096:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <HAL_ADC_Init+0x2b0>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d130      	bne.n	8002120 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	4b14      	ldr	r3, [pc, #80]	@ (800211c <HAL_ADC_Init+0x2b4>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020d2:	3a01      	subs	r2, #1
 80020d4:	0411      	lsls	r1, r2, #16
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020e0:	4311      	orrs	r1, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020e6:	430a      	orrs	r2, r1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	611a      	str	r2, [r3, #16]
 80020f4:	e01c      	b.n	8002130 <HAL_ADC_Init+0x2c8>
 80020f6:	bf00      	nop
 80020f8:	24000000 	.word	0x24000000
 80020fc:	053e2d63 	.word	0x053e2d63
 8002100:	40022000 	.word	0x40022000
 8002104:	40022100 	.word	0x40022100
 8002108:	58026000 	.word	0x58026000
 800210c:	40022300 	.word	0x40022300
 8002110:	58026300 	.word	0x58026300
 8002114:	fff0c003 	.word	0xfff0c003
 8002118:	ffffbffc 	.word	0xffffbffc
 800211c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fb20 	bl	800278c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d10c      	bne.n	800216e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f023 010f 	bic.w	r1, r3, #15
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	1e5a      	subs	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
 800216c:	e007      	b.n	800217e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 020f 	bic.w	r2, r2, #15
 800217c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002182:	f023 0303 	bic.w	r3, r3, #3
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	@ 0x54
 800218e:	e007      	b.n	80021a0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002194:	f043 0210 	orr.w	r2, r3, #16
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	@ 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd90      	pop	{r4, r7, pc}
 80021aa:	bf00      	nop

080021ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b08d      	sub	sp, #52	@ 0x34
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a65      	ldr	r2, [pc, #404]	@ (800235c <HAL_ADC_ConfigChannel+0x1b0>)
 80021c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x2a>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e2c7      	b.n	8002766 <HAL_ADC_ConfigChannel+0x5ba>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fe19 	bl	8001e1a <LL_ADC_REG_IsConversionOngoing>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 82ac 	bne.w	8002748 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db2c      	blt.n	8002252 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002200:	2b00      	cmp	r3, #0
 8002202:	d108      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x6a>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2201      	movs	r2, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	e016      	b.n	8002244 <HAL_ADC_ConfigChannel+0x98>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	613b      	str	r3, [r7, #16]
  return result;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800222e:	2320      	movs	r3, #32
 8002230:	e003      	b.n	800223a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	2201      	movs	r2, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	69d1      	ldr	r1, [r2, #28]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	430b      	orrs	r3, r1
 8002250:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	f7ff fcff 	bl	8001c62 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fdd6 	bl	8001e1a <LL_ADC_REG_IsConversionOngoing>
 800226e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fde3 	bl	8001e40 <LL_ADC_INJ_IsConversionOngoing>
 800227a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 80b8 	bne.w	80023f4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 80b4 	bne.w	80023f4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	461a      	mov	r2, r3
 800229a:	f7ff fd0e 	bl	8001cba <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800229e:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <HAL_ADC_ConfigChannel+0x1b4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80022a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022aa:	d10b      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x118>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	e01d      	b.n	8002300 <HAL_ADC_ConfigChannel+0x154>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10b      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x13e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	e00a      	b.n	8002300 <HAL_ADC_ConfigChannel+0x154>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b04      	cmp	r3, #4
 8002308:	d02c      	beq.n	8002364 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6919      	ldr	r1, [r3, #16]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f7ff fc4f 	bl	8001bba <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6919      	ldr	r1, [r3, #16]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7e5b      	ldrb	r3, [r3, #25]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d102      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x186>
 800232c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002330:	e000      	b.n	8002334 <HAL_ADC_ConfigChannel+0x188>
 8002332:	2300      	movs	r3, #0
 8002334:	461a      	mov	r2, r3
 8002336:	f7ff fc79 	bl	8001c2c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6919      	ldr	r1, [r3, #16]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	7e1b      	ldrb	r3, [r3, #24]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d102      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x1a4>
 800234a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800234e:	e000      	b.n	8002352 <HAL_ADC_ConfigChannel+0x1a6>
 8002350:	2300      	movs	r3, #0
 8002352:	461a      	mov	r2, r3
 8002354:	f7ff fc51 	bl	8001bfa <LL_ADC_SetDataRightShift>
 8002358:	e04c      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x248>
 800235a:	bf00      	nop
 800235c:	47ff0000 	.word	0x47ff0000
 8002360:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002386:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800238e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	069b      	lsls	r3, r3, #26
 8002398:	429a      	cmp	r2, r3
 800239a:	d107      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023aa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	069b      	lsls	r3, r3, #26
 80023bc:	429a      	cmp	r2, r3
 80023be:	d107      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023ce:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	069b      	lsls	r3, r3, #26
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d107      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fcfb 	bl	8001df4 <LL_ADC_IsEnabled>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 81aa 	bne.w	800275a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	461a      	mov	r2, r3
 8002414:	f7ff fc7c 	bl	8001d10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a87      	ldr	r2, [pc, #540]	@ (800263c <HAL_ADC_ConfigChannel+0x490>)
 800241e:	4293      	cmp	r3, r2
 8002420:	f040 809a 	bne.w	8002558 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4984      	ldr	r1, [pc, #528]	@ (8002640 <HAL_ADC_ConfigChannel+0x494>)
 800242e:	428b      	cmp	r3, r1
 8002430:	d147      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x316>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4983      	ldr	r1, [pc, #524]	@ (8002644 <HAL_ADC_ConfigChannel+0x498>)
 8002438:	428b      	cmp	r3, r1
 800243a:	d040      	beq.n	80024be <HAL_ADC_ConfigChannel+0x312>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4981      	ldr	r1, [pc, #516]	@ (8002648 <HAL_ADC_ConfigChannel+0x49c>)
 8002442:	428b      	cmp	r3, r1
 8002444:	d039      	beq.n	80024ba <HAL_ADC_ConfigChannel+0x30e>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4980      	ldr	r1, [pc, #512]	@ (800264c <HAL_ADC_ConfigChannel+0x4a0>)
 800244c:	428b      	cmp	r3, r1
 800244e:	d032      	beq.n	80024b6 <HAL_ADC_ConfigChannel+0x30a>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	497e      	ldr	r1, [pc, #504]	@ (8002650 <HAL_ADC_ConfigChannel+0x4a4>)
 8002456:	428b      	cmp	r3, r1
 8002458:	d02b      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x306>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	497d      	ldr	r1, [pc, #500]	@ (8002654 <HAL_ADC_ConfigChannel+0x4a8>)
 8002460:	428b      	cmp	r3, r1
 8002462:	d024      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x302>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	497b      	ldr	r1, [pc, #492]	@ (8002658 <HAL_ADC_ConfigChannel+0x4ac>)
 800246a:	428b      	cmp	r3, r1
 800246c:	d01d      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x2fe>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	497a      	ldr	r1, [pc, #488]	@ (800265c <HAL_ADC_ConfigChannel+0x4b0>)
 8002474:	428b      	cmp	r3, r1
 8002476:	d016      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x2fa>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4978      	ldr	r1, [pc, #480]	@ (8002660 <HAL_ADC_ConfigChannel+0x4b4>)
 800247e:	428b      	cmp	r3, r1
 8002480:	d00f      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x2f6>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4977      	ldr	r1, [pc, #476]	@ (8002664 <HAL_ADC_ConfigChannel+0x4b8>)
 8002488:	428b      	cmp	r3, r1
 800248a:	d008      	beq.n	800249e <HAL_ADC_ConfigChannel+0x2f2>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4975      	ldr	r1, [pc, #468]	@ (8002668 <HAL_ADC_ConfigChannel+0x4bc>)
 8002492:	428b      	cmp	r3, r1
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x2ee>
 8002496:	4b75      	ldr	r3, [pc, #468]	@ (800266c <HAL_ADC_ConfigChannel+0x4c0>)
 8002498:	e05a      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800249a:	2300      	movs	r3, #0
 800249c:	e058      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800249e:	4b74      	ldr	r3, [pc, #464]	@ (8002670 <HAL_ADC_ConfigChannel+0x4c4>)
 80024a0:	e056      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024a2:	4b74      	ldr	r3, [pc, #464]	@ (8002674 <HAL_ADC_ConfigChannel+0x4c8>)
 80024a4:	e054      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002660 <HAL_ADC_ConfigChannel+0x4b4>)
 80024a8:	e052      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024aa:	4b6c      	ldr	r3, [pc, #432]	@ (800265c <HAL_ADC_ConfigChannel+0x4b0>)
 80024ac:	e050      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024ae:	4b72      	ldr	r3, [pc, #456]	@ (8002678 <HAL_ADC_ConfigChannel+0x4cc>)
 80024b0:	e04e      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024b2:	4b72      	ldr	r3, [pc, #456]	@ (800267c <HAL_ADC_ConfigChannel+0x4d0>)
 80024b4:	e04c      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024b6:	4b72      	ldr	r3, [pc, #456]	@ (8002680 <HAL_ADC_ConfigChannel+0x4d4>)
 80024b8:	e04a      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024ba:	4b72      	ldr	r3, [pc, #456]	@ (8002684 <HAL_ADC_ConfigChannel+0x4d8>)
 80024bc:	e048      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024be:	2301      	movs	r3, #1
 80024c0:	e046      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4970      	ldr	r1, [pc, #448]	@ (8002688 <HAL_ADC_ConfigChannel+0x4dc>)
 80024c8:	428b      	cmp	r3, r1
 80024ca:	d140      	bne.n	800254e <HAL_ADC_ConfigChannel+0x3a2>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	495c      	ldr	r1, [pc, #368]	@ (8002644 <HAL_ADC_ConfigChannel+0x498>)
 80024d2:	428b      	cmp	r3, r1
 80024d4:	d039      	beq.n	800254a <HAL_ADC_ConfigChannel+0x39e>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	495b      	ldr	r1, [pc, #364]	@ (8002648 <HAL_ADC_ConfigChannel+0x49c>)
 80024dc:	428b      	cmp	r3, r1
 80024de:	d032      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x39a>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4959      	ldr	r1, [pc, #356]	@ (800264c <HAL_ADC_ConfigChannel+0x4a0>)
 80024e6:	428b      	cmp	r3, r1
 80024e8:	d02b      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x396>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4958      	ldr	r1, [pc, #352]	@ (8002650 <HAL_ADC_ConfigChannel+0x4a4>)
 80024f0:	428b      	cmp	r3, r1
 80024f2:	d024      	beq.n	800253e <HAL_ADC_ConfigChannel+0x392>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4956      	ldr	r1, [pc, #344]	@ (8002654 <HAL_ADC_ConfigChannel+0x4a8>)
 80024fa:	428b      	cmp	r3, r1
 80024fc:	d01d      	beq.n	800253a <HAL_ADC_ConfigChannel+0x38e>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4955      	ldr	r1, [pc, #340]	@ (8002658 <HAL_ADC_ConfigChannel+0x4ac>)
 8002504:	428b      	cmp	r3, r1
 8002506:	d016      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x38a>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4953      	ldr	r1, [pc, #332]	@ (800265c <HAL_ADC_ConfigChannel+0x4b0>)
 800250e:	428b      	cmp	r3, r1
 8002510:	d00f      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x386>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4952      	ldr	r1, [pc, #328]	@ (8002660 <HAL_ADC_ConfigChannel+0x4b4>)
 8002518:	428b      	cmp	r3, r1
 800251a:	d008      	beq.n	800252e <HAL_ADC_ConfigChannel+0x382>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4951      	ldr	r1, [pc, #324]	@ (8002668 <HAL_ADC_ConfigChannel+0x4bc>)
 8002522:	428b      	cmp	r3, r1
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x37e>
 8002526:	4b51      	ldr	r3, [pc, #324]	@ (800266c <HAL_ADC_ConfigChannel+0x4c0>)
 8002528:	e012      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800252a:	2300      	movs	r3, #0
 800252c:	e010      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800252e:	4b51      	ldr	r3, [pc, #324]	@ (8002674 <HAL_ADC_ConfigChannel+0x4c8>)
 8002530:	e00e      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 8002532:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_ADC_ConfigChannel+0x4b4>)
 8002534:	e00c      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 8002536:	4b49      	ldr	r3, [pc, #292]	@ (800265c <HAL_ADC_ConfigChannel+0x4b0>)
 8002538:	e00a      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800253a:	4b4f      	ldr	r3, [pc, #316]	@ (8002678 <HAL_ADC_ConfigChannel+0x4cc>)
 800253c:	e008      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800253e:	4b4f      	ldr	r3, [pc, #316]	@ (800267c <HAL_ADC_ConfigChannel+0x4d0>)
 8002540:	e006      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 8002542:	4b4f      	ldr	r3, [pc, #316]	@ (8002680 <HAL_ADC_ConfigChannel+0x4d4>)
 8002544:	e004      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 8002546:	4b4f      	ldr	r3, [pc, #316]	@ (8002684 <HAL_ADC_ConfigChannel+0x4d8>)
 8002548:	e002      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800254e:	2300      	movs	r3, #0
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f7ff fafe 	bl	8001b54 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f280 80fc 	bge.w	800275a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a36      	ldr	r2, [pc, #216]	@ (8002640 <HAL_ADC_ConfigChannel+0x494>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d004      	beq.n	8002576 <HAL_ADC_ConfigChannel+0x3ca>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a45      	ldr	r2, [pc, #276]	@ (8002688 <HAL_ADC_ConfigChannel+0x4dc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x3ce>
 8002576:	4b45      	ldr	r3, [pc, #276]	@ (800268c <HAL_ADC_ConfigChannel+0x4e0>)
 8002578:	e000      	b.n	800257c <HAL_ADC_ConfigChannel+0x3d0>
 800257a:	4b45      	ldr	r3, [pc, #276]	@ (8002690 <HAL_ADC_ConfigChannel+0x4e4>)
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fadb 	bl	8001b38 <LL_ADC_GetCommonPathInternalCh>
 8002582:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2d      	ldr	r2, [pc, #180]	@ (8002640 <HAL_ADC_ConfigChannel+0x494>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x3ec>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a3d      	ldr	r2, [pc, #244]	@ (8002688 <HAL_ADC_ConfigChannel+0x4dc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d10e      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x40a>
 8002598:	4829      	ldr	r0, [pc, #164]	@ (8002640 <HAL_ADC_ConfigChannel+0x494>)
 800259a:	f7ff fc2b 	bl	8001df4 <LL_ADC_IsEnabled>
 800259e:	4604      	mov	r4, r0
 80025a0:	4839      	ldr	r0, [pc, #228]	@ (8002688 <HAL_ADC_ConfigChannel+0x4dc>)
 80025a2:	f7ff fc27 	bl	8001df4 <LL_ADC_IsEnabled>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4323      	orrs	r3, r4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	e008      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x41c>
 80025b6:	4837      	ldr	r0, [pc, #220]	@ (8002694 <HAL_ADC_ConfigChannel+0x4e8>)
 80025b8:	f7ff fc1c 	bl	8001df4 <LL_ADC_IsEnabled>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80b3 	beq.w	8002734 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a31      	ldr	r2, [pc, #196]	@ (8002698 <HAL_ADC_ConfigChannel+0x4ec>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d165      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x4f8>
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d160      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002694 <HAL_ADC_ConfigChannel+0x4e8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	f040 80b6 	bne.w	800275a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a13      	ldr	r2, [pc, #76]	@ (8002640 <HAL_ADC_ConfigChannel+0x494>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <HAL_ADC_ConfigChannel+0x456>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <HAL_ADC_ConfigChannel+0x4dc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x45a>
 8002602:	4a22      	ldr	r2, [pc, #136]	@ (800268c <HAL_ADC_ConfigChannel+0x4e0>)
 8002604:	e000      	b.n	8002608 <HAL_ADC_ConfigChannel+0x45c>
 8002606:	4a22      	ldr	r2, [pc, #136]	@ (8002690 <HAL_ADC_ConfigChannel+0x4e4>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800260e:	4619      	mov	r1, r3
 8002610:	4610      	mov	r0, r2
 8002612:	f7ff fa7e 	bl	8001b12 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002616:	4b21      	ldr	r3, [pc, #132]	@ (800269c <HAL_ADC_ConfigChannel+0x4f0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	099b      	lsrs	r3, r3, #6
 800261c:	4a20      	ldr	r2, [pc, #128]	@ (80026a0 <HAL_ADC_ConfigChannel+0x4f4>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	3301      	adds	r3, #1
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800262a:	e002      	b.n	8002632 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3b01      	subs	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002638:	e08f      	b.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
 800263a:	bf00      	nop
 800263c:	47ff0000 	.word	0x47ff0000
 8002640:	40022000 	.word	0x40022000
 8002644:	04300002 	.word	0x04300002
 8002648:	08600004 	.word	0x08600004
 800264c:	0c900008 	.word	0x0c900008
 8002650:	10c00010 	.word	0x10c00010
 8002654:	14f00020 	.word	0x14f00020
 8002658:	2a000400 	.word	0x2a000400
 800265c:	2e300800 	.word	0x2e300800
 8002660:	32601000 	.word	0x32601000
 8002664:	43210000 	.word	0x43210000
 8002668:	4b840000 	.word	0x4b840000
 800266c:	4fb80000 	.word	0x4fb80000
 8002670:	47520000 	.word	0x47520000
 8002674:	36902000 	.word	0x36902000
 8002678:	25b00200 	.word	0x25b00200
 800267c:	21800100 	.word	0x21800100
 8002680:	1d500080 	.word	0x1d500080
 8002684:	19200040 	.word	0x19200040
 8002688:	40022100 	.word	0x40022100
 800268c:	40022300 	.word	0x40022300
 8002690:	58026300 	.word	0x58026300
 8002694:	58026000 	.word	0x58026000
 8002698:	cb840000 	.word	0xcb840000
 800269c:	24000000 	.word	0x24000000
 80026a0:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a31      	ldr	r2, [pc, #196]	@ (8002770 <HAL_ADC_ConfigChannel+0x5c4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d11e      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x540>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d119      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002774 <HAL_ADC_ConfigChannel+0x5c8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d14b      	bne.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002778 <HAL_ADC_ConfigChannel+0x5cc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d004      	beq.n	80026d6 <HAL_ADC_ConfigChannel+0x52a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2a      	ldr	r2, [pc, #168]	@ (800277c <HAL_ADC_ConfigChannel+0x5d0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x52e>
 80026d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002780 <HAL_ADC_ConfigChannel+0x5d4>)
 80026d8:	e000      	b.n	80026dc <HAL_ADC_ConfigChannel+0x530>
 80026da:	4a2a      	ldr	r2, [pc, #168]	@ (8002784 <HAL_ADC_ConfigChannel+0x5d8>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026e2:	4619      	mov	r1, r3
 80026e4:	4610      	mov	r0, r2
 80026e6:	f7ff fa14 	bl	8001b12 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ea:	e036      	b.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a25      	ldr	r2, [pc, #148]	@ (8002788 <HAL_ADC_ConfigChannel+0x5dc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d131      	bne.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12c      	bne.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1b      	ldr	r2, [pc, #108]	@ (8002774 <HAL_ADC_ConfigChannel+0x5c8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d127      	bne.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1a      	ldr	r2, [pc, #104]	@ (8002778 <HAL_ADC_ConfigChannel+0x5cc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d004      	beq.n	800271e <HAL_ADC_ConfigChannel+0x572>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a18      	ldr	r2, [pc, #96]	@ (800277c <HAL_ADC_ConfigChannel+0x5d0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x576>
 800271e:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <HAL_ADC_ConfigChannel+0x5d4>)
 8002720:	e000      	b.n	8002724 <HAL_ADC_ConfigChannel+0x578>
 8002722:	4a18      	ldr	r2, [pc, #96]	@ (8002784 <HAL_ADC_ConfigChannel+0x5d8>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f7ff f9f0 	bl	8001b12 <LL_ADC_SetCommonPathInternalCh>
 8002732:	e012      	b.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	f043 0220 	orr.w	r2, r3, #32
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002746:	e008      	b.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002762:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002766:	4618      	mov	r0, r3
 8002768:	3734      	adds	r7, #52	@ 0x34
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	c7520000 	.word	0xc7520000
 8002774:	58026000 	.word	0x58026000
 8002778:	40022000 	.word	0x40022000
 800277c:	40022100 	.word	0x40022100
 8002780:	40022300 	.word	0x40022300
 8002784:	58026300 	.word	0x58026300
 8002788:	cfb80000 	.word	0xcfb80000

0800278c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a7a      	ldr	r2, [pc, #488]	@ (8002984 <ADC_ConfigureBoostMode+0x1f8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <ADC_ConfigureBoostMode+0x1c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a79      	ldr	r2, [pc, #484]	@ (8002988 <ADC_ConfigureBoostMode+0x1fc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d109      	bne.n	80027bc <ADC_ConfigureBoostMode+0x30>
 80027a8:	4b78      	ldr	r3, [pc, #480]	@ (800298c <ADC_ConfigureBoostMode+0x200>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e008      	b.n	80027ce <ADC_ConfigureBoostMode+0x42>
 80027bc:	4b74      	ldr	r3, [pc, #464]	@ (8002990 <ADC_ConfigureBoostMode+0x204>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01c      	beq.n	800280c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027d2:	f002 fff5 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 80027d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027e0:	d010      	beq.n	8002804 <ADC_ConfigureBoostMode+0x78>
 80027e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027e6:	d873      	bhi.n	80028d0 <ADC_ConfigureBoostMode+0x144>
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ec:	d002      	beq.n	80027f4 <ADC_ConfigureBoostMode+0x68>
 80027ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027f2:	d16d      	bne.n	80028d0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	60fb      	str	r3, [r7, #12]
        break;
 8002802:	e068      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	60fb      	str	r3, [r7, #12]
        break;
 800280a:	e064      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800280c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	f004 fa3a 	bl	8006c8c <HAL_RCCEx_GetPeriphCLKFreq>
 8002818:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002822:	d051      	beq.n	80028c8 <ADC_ConfigureBoostMode+0x13c>
 8002824:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002828:	d854      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 800282a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800282e:	d047      	beq.n	80028c0 <ADC_ConfigureBoostMode+0x134>
 8002830:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002834:	d84e      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 8002836:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800283a:	d03d      	beq.n	80028b8 <ADC_ConfigureBoostMode+0x12c>
 800283c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002840:	d848      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 8002842:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002846:	d033      	beq.n	80028b0 <ADC_ConfigureBoostMode+0x124>
 8002848:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800284c:	d842      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 800284e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002852:	d029      	beq.n	80028a8 <ADC_ConfigureBoostMode+0x11c>
 8002854:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002858:	d83c      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 800285a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800285e:	d01a      	beq.n	8002896 <ADC_ConfigureBoostMode+0x10a>
 8002860:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002864:	d836      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 8002866:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800286a:	d014      	beq.n	8002896 <ADC_ConfigureBoostMode+0x10a>
 800286c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002870:	d830      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 8002872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002876:	d00e      	beq.n	8002896 <ADC_ConfigureBoostMode+0x10a>
 8002878:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800287c:	d82a      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 800287e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002882:	d008      	beq.n	8002896 <ADC_ConfigureBoostMode+0x10a>
 8002884:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002888:	d824      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 800288a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800288e:	d002      	beq.n	8002896 <ADC_ConfigureBoostMode+0x10a>
 8002890:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002894:	d11e      	bne.n	80028d4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0c9b      	lsrs	r3, r3, #18
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	60fb      	str	r3, [r7, #12]
        break;
 80028a6:	e016      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]
        break;
 80028ae:	e012      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	60fb      	str	r3, [r7, #12]
        break;
 80028b6:	e00e      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	099b      	lsrs	r3, r3, #6
 80028bc:	60fb      	str	r3, [r7, #12]
        break;
 80028be:	e00a      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	09db      	lsrs	r3, r3, #7
 80028c4:	60fb      	str	r3, [r7, #12]
        break;
 80028c6:	e006      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	60fb      	str	r3, [r7, #12]
        break;
 80028ce:	e002      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80028d0:	bf00      	nop
 80028d2:	e000      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80028d4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80028d6:	f7ff f8fd 	bl	8001ad4 <HAL_GetREVID>
 80028da:	4603      	mov	r3, r0
 80028dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d815      	bhi.n	8002910 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002994 <ADC_ConfigureBoostMode+0x208>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d908      	bls.n	80028fe <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028fa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028fc:	e03e      	b.n	800297c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800290c:	609a      	str	r2, [r3, #8]
}
 800290e:	e035      	b.n	800297c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a1f      	ldr	r2, [pc, #124]	@ (8002998 <ADC_ConfigureBoostMode+0x20c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d808      	bhi.n	8002930 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800292c:	609a      	str	r2, [r3, #8]
}
 800292e:	e025      	b.n	800297c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a1a      	ldr	r2, [pc, #104]	@ (800299c <ADC_ConfigureBoostMode+0x210>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d80a      	bhi.n	800294e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	e016      	b.n	800297c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4a13      	ldr	r2, [pc, #76]	@ (80029a0 <ADC_ConfigureBoostMode+0x214>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d80a      	bhi.n	800296c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002968:	609a      	str	r2, [r3, #8]
}
 800296a:	e007      	b.n	800297c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40022000 	.word	0x40022000
 8002988:	40022100 	.word	0x40022100
 800298c:	40022300 	.word	0x40022300
 8002990:	58026300 	.word	0x58026300
 8002994:	01312d00 	.word	0x01312d00
 8002998:	005f5e10 	.word	0x005f5e10
 800299c:	00bebc20 	.word	0x00bebc20
 80029a0:	017d7840 	.word	0x017d7840

080029a4 <LL_ADC_IsEnabled>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <LL_ADC_IsEnabled+0x18>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <LL_ADC_IsEnabled+0x1a>
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_ADC_REG_IsConversionOngoing>:
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d101      	bne.n	80029e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b09f      	sub	sp, #124	@ 0x7c
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e0be      	b.n	8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a5c      	ldr	r2, [pc, #368]	@ (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d102      	bne.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a28:	4b5b      	ldr	r3, [pc, #364]	@ (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	e001      	b.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3c:	f043 0220 	orr.w	r2, r3, #32
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e09d      	b.n	8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ffb9 	bl	80029ca <LL_ADC_REG_IsConversionOngoing>
 8002a58:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ffb3 	bl	80029ca <LL_ADC_REG_IsConversionOngoing>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d17f      	bne.n	8002b6a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d17c      	bne.n	8002b6a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a47      	ldr	r2, [pc, #284]	@ (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a46      	ldr	r2, [pc, #280]	@ (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d101      	bne.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002a84:	4b45      	ldr	r3, [pc, #276]	@ (8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002a86:	e000      	b.n	8002a8a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002a88:	4b45      	ldr	r3, [pc, #276]	@ (8002ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002a8a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d039      	beq.n	8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a3a      	ldr	r2, [pc, #232]	@ (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a38      	ldr	r2, [pc, #224]	@ (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002aba:	4836      	ldr	r0, [pc, #216]	@ (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002abc:	f7ff ff72 	bl	80029a4 <LL_ADC_IsEnabled>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	4835      	ldr	r0, [pc, #212]	@ (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ac4:	f7ff ff6e 	bl	80029a4 <LL_ADC_IsEnabled>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4323      	orrs	r3, r4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e008      	b.n	8002aea <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002ad8:	4832      	ldr	r0, [pc, #200]	@ (8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002ada:	f7ff ff63 	bl	80029a4 <LL_ADC_IsEnabled>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d047      	beq.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	6811      	ldr	r1, [r2, #0]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	6892      	ldr	r2, [r2, #8]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	431a      	orrs	r2, r3
 8002b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b04:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b06:	e03a      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b12:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1e      	ldr	r2, [pc, #120]	@ (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1d      	ldr	r2, [pc, #116]	@ (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10e      	bne.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002b28:	481a      	ldr	r0, [pc, #104]	@ (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b2a:	f7ff ff3b 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b2e:	4604      	mov	r4, r0
 8002b30:	4819      	ldr	r0, [pc, #100]	@ (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b32:	f7ff ff37 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4323      	orrs	r3, r4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf0c      	ite	eq
 8002b3e:	2301      	moveq	r3, #1
 8002b40:	2300      	movne	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	e008      	b.n	8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002b46:	4817      	ldr	r0, [pc, #92]	@ (8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b48:	f7ff ff2c 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	bf0c      	ite	eq
 8002b52:	2301      	moveq	r3, #1
 8002b54:	2300      	movne	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d010      	beq.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b66:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b68:	e009      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002b7c:	e000      	b.n	8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b7e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b88:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	377c      	adds	r7, #124	@ 0x7c
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd90      	pop	{r4, r7, pc}
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40022100 	.word	0x40022100
 8002b9c:	40022300 	.word	0x40022300
 8002ba0:	58026300 	.word	0x58026300
 8002ba4:	58026000 	.word	0x58026000
 8002ba8:	fffff0e0 	.word	0xfffff0e0

08002bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <__NVIC_SetPriorityGrouping+0x40>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bda:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <__NVIC_SetPriorityGrouping+0x40>)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	60d3      	str	r3, [r2, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00
 8002bf0:	05fa0000 	.word	0x05fa0000

08002bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <__NVIC_GetPriorityGrouping+0x18>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 0307 	and.w	r3, r3, #7
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	db0b      	blt.n	8002c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	4907      	ldr	r1, [pc, #28]	@ (8002c48 <__NVIC_EnableIRQ+0x38>)
 8002c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2001      	movs	r0, #1
 8002c32:	fa00 f202 	lsl.w	r2, r0, r2
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	e000e100 	.word	0xe000e100

08002c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	6039      	str	r1, [r7, #0]
 8002c56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	db0a      	blt.n	8002c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	490c      	ldr	r1, [pc, #48]	@ (8002c98 <__NVIC_SetPriority+0x4c>)
 8002c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c6a:	0112      	lsls	r2, r2, #4
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c74:	e00a      	b.n	8002c8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4908      	ldr	r1, [pc, #32]	@ (8002c9c <__NVIC_SetPriority+0x50>)
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	3b04      	subs	r3, #4
 8002c84:	0112      	lsls	r2, r2, #4
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	440b      	add	r3, r1
 8002c8a:	761a      	strb	r2, [r3, #24]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000e100 	.word	0xe000e100
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	@ 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f1c3 0307 	rsb	r3, r3, #7
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	bf28      	it	cs
 8002cbe:	2304      	movcs	r3, #4
 8002cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d902      	bls.n	8002cd0 <NVIC_EncodePriority+0x30>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3b03      	subs	r3, #3
 8002cce:	e000      	b.n	8002cd2 <NVIC_EncodePriority+0x32>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	43d9      	mvns	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	4313      	orrs	r3, r2
         );
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	@ 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d18:	d301      	bcc.n	8002d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00f      	b.n	8002d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d48 <SysTick_Config+0x40>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d26:	210f      	movs	r1, #15
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d2c:	f7ff ff8e 	bl	8002c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <SysTick_Config+0x40>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d36:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <SysTick_Config+0x40>)
 8002d38:	2207      	movs	r2, #7
 8002d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	e000e010 	.word	0xe000e010

08002d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ff29 	bl	8002bac <__NVIC_SetPriorityGrouping>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d70:	f7ff ff40 	bl	8002bf4 <__NVIC_GetPriorityGrouping>
 8002d74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f7ff ff90 	bl	8002ca0 <NVIC_EncodePriority>
 8002d80:	4602      	mov	r2, r0
 8002d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff5f 	bl	8002c4c <__NVIC_SetPriority>
}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff33 	bl	8002c10 <__NVIC_EnableIRQ>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ffa4 	bl	8002d08 <SysTick_Config>
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7fe fe4e 	bl	8001a74 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e2dc      	b.n	800339e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d008      	beq.n	8002e02 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2280      	movs	r2, #128	@ 0x80
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e2cd      	b.n	800339e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a76      	ldr	r2, [pc, #472]	@ (8002fe0 <HAL_DMA_Abort+0x214>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d04a      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a74      	ldr	r2, [pc, #464]	@ (8002fe4 <HAL_DMA_Abort+0x218>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d045      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a73      	ldr	r2, [pc, #460]	@ (8002fe8 <HAL_DMA_Abort+0x21c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d040      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a71      	ldr	r2, [pc, #452]	@ (8002fec <HAL_DMA_Abort+0x220>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d03b      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a70      	ldr	r2, [pc, #448]	@ (8002ff0 <HAL_DMA_Abort+0x224>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d036      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a6e      	ldr	r2, [pc, #440]	@ (8002ff4 <HAL_DMA_Abort+0x228>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d031      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a6d      	ldr	r2, [pc, #436]	@ (8002ff8 <HAL_DMA_Abort+0x22c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d02c      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8002ffc <HAL_DMA_Abort+0x230>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d027      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6a      	ldr	r2, [pc, #424]	@ (8003000 <HAL_DMA_Abort+0x234>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a68      	ldr	r2, [pc, #416]	@ (8003004 <HAL_DMA_Abort+0x238>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01d      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a67      	ldr	r2, [pc, #412]	@ (8003008 <HAL_DMA_Abort+0x23c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d018      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a65      	ldr	r2, [pc, #404]	@ (800300c <HAL_DMA_Abort+0x240>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a64      	ldr	r2, [pc, #400]	@ (8003010 <HAL_DMA_Abort+0x244>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00e      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a62      	ldr	r2, [pc, #392]	@ (8003014 <HAL_DMA_Abort+0x248>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a61      	ldr	r2, [pc, #388]	@ (8003018 <HAL_DMA_Abort+0x24c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <HAL_DMA_Abort+0xd6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5f      	ldr	r2, [pc, #380]	@ (800301c <HAL_DMA_Abort+0x250>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_DMA_Abort+0xda>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_DMA_Abort+0xdc>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 021e 	bic.w	r2, r2, #30
 8002eba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e00a      	b.n	8002eea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 020e 	bic.w	r2, r2, #14
 8002ee2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a3c      	ldr	r2, [pc, #240]	@ (8002fe0 <HAL_DMA_Abort+0x214>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d072      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fe4 <HAL_DMA_Abort+0x218>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d06d      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a39      	ldr	r2, [pc, #228]	@ (8002fe8 <HAL_DMA_Abort+0x21c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d068      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a37      	ldr	r2, [pc, #220]	@ (8002fec <HAL_DMA_Abort+0x220>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d063      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a36      	ldr	r2, [pc, #216]	@ (8002ff0 <HAL_DMA_Abort+0x224>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d05e      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a34      	ldr	r2, [pc, #208]	@ (8002ff4 <HAL_DMA_Abort+0x228>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d059      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a33      	ldr	r2, [pc, #204]	@ (8002ff8 <HAL_DMA_Abort+0x22c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d054      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a31      	ldr	r2, [pc, #196]	@ (8002ffc <HAL_DMA_Abort+0x230>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d04f      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a30      	ldr	r2, [pc, #192]	@ (8003000 <HAL_DMA_Abort+0x234>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d04a      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a2e      	ldr	r2, [pc, #184]	@ (8003004 <HAL_DMA_Abort+0x238>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d045      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2d      	ldr	r2, [pc, #180]	@ (8003008 <HAL_DMA_Abort+0x23c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d040      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800300c <HAL_DMA_Abort+0x240>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d03b      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2a      	ldr	r2, [pc, #168]	@ (8003010 <HAL_DMA_Abort+0x244>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d036      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a28      	ldr	r2, [pc, #160]	@ (8003014 <HAL_DMA_Abort+0x248>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d031      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a27      	ldr	r2, [pc, #156]	@ (8003018 <HAL_DMA_Abort+0x24c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d02c      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a25      	ldr	r2, [pc, #148]	@ (800301c <HAL_DMA_Abort+0x250>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d027      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a24      	ldr	r2, [pc, #144]	@ (8003020 <HAL_DMA_Abort+0x254>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a22      	ldr	r2, [pc, #136]	@ (8003024 <HAL_DMA_Abort+0x258>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a21      	ldr	r2, [pc, #132]	@ (8003028 <HAL_DMA_Abort+0x25c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1f      	ldr	r2, [pc, #124]	@ (800302c <HAL_DMA_Abort+0x260>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003030 <HAL_DMA_Abort+0x264>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003034 <HAL_DMA_Abort+0x268>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1b      	ldr	r2, [pc, #108]	@ (8003038 <HAL_DMA_Abort+0x26c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_DMA_Abort+0x20e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a19      	ldr	r2, [pc, #100]	@ (800303c <HAL_DMA_Abort+0x270>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d132      	bne.n	8003040 <HAL_DMA_Abort+0x274>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e031      	b.n	8003042 <HAL_DMA_Abort+0x276>
 8002fde:	bf00      	nop
 8002fe0:	40020010 	.word	0x40020010
 8002fe4:	40020028 	.word	0x40020028
 8002fe8:	40020040 	.word	0x40020040
 8002fec:	40020058 	.word	0x40020058
 8002ff0:	40020070 	.word	0x40020070
 8002ff4:	40020088 	.word	0x40020088
 8002ff8:	400200a0 	.word	0x400200a0
 8002ffc:	400200b8 	.word	0x400200b8
 8003000:	40020410 	.word	0x40020410
 8003004:	40020428 	.word	0x40020428
 8003008:	40020440 	.word	0x40020440
 800300c:	40020458 	.word	0x40020458
 8003010:	40020470 	.word	0x40020470
 8003014:	40020488 	.word	0x40020488
 8003018:	400204a0 	.word	0x400204a0
 800301c:	400204b8 	.word	0x400204b8
 8003020:	58025408 	.word	0x58025408
 8003024:	5802541c 	.word	0x5802541c
 8003028:	58025430 	.word	0x58025430
 800302c:	58025444 	.word	0x58025444
 8003030:	58025458 	.word	0x58025458
 8003034:	5802546c 	.word	0x5802546c
 8003038:	58025480 	.word	0x58025480
 800303c:	58025494 	.word	0x58025494
 8003040:	2300      	movs	r3, #0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003050:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003054:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a6d      	ldr	r2, [pc, #436]	@ (8003210 <HAL_DMA_Abort+0x444>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d04a      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a6b      	ldr	r2, [pc, #428]	@ (8003214 <HAL_DMA_Abort+0x448>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d045      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a6a      	ldr	r2, [pc, #424]	@ (8003218 <HAL_DMA_Abort+0x44c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d040      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a68      	ldr	r2, [pc, #416]	@ (800321c <HAL_DMA_Abort+0x450>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d03b      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a67      	ldr	r2, [pc, #412]	@ (8003220 <HAL_DMA_Abort+0x454>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d036      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a65      	ldr	r2, [pc, #404]	@ (8003224 <HAL_DMA_Abort+0x458>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d031      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a64      	ldr	r2, [pc, #400]	@ (8003228 <HAL_DMA_Abort+0x45c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d02c      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a62      	ldr	r2, [pc, #392]	@ (800322c <HAL_DMA_Abort+0x460>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d027      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a61      	ldr	r2, [pc, #388]	@ (8003230 <HAL_DMA_Abort+0x464>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d022      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a5f      	ldr	r2, [pc, #380]	@ (8003234 <HAL_DMA_Abort+0x468>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01d      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a5e      	ldr	r2, [pc, #376]	@ (8003238 <HAL_DMA_Abort+0x46c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d018      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a5c      	ldr	r2, [pc, #368]	@ (800323c <HAL_DMA_Abort+0x470>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003240 <HAL_DMA_Abort+0x474>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00e      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a59      	ldr	r2, [pc, #356]	@ (8003244 <HAL_DMA_Abort+0x478>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d009      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a58      	ldr	r2, [pc, #352]	@ (8003248 <HAL_DMA_Abort+0x47c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d004      	beq.n	80030f6 <HAL_DMA_Abort+0x32a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a56      	ldr	r2, [pc, #344]	@ (800324c <HAL_DMA_Abort+0x480>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d108      	bne.n	8003108 <HAL_DMA_Abort+0x33c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e007      	b.n	8003118 <HAL_DMA_Abort+0x34c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003118:	e013      	b.n	8003142 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800311a:	f7fe fcab 	bl	8001a74 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b05      	cmp	r3, #5
 8003126:	d90c      	bls.n	8003142 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2203      	movs	r2, #3
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e12d      	b.n	800339e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e5      	bne.n	800311a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2f      	ldr	r2, [pc, #188]	@ (8003210 <HAL_DMA_Abort+0x444>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04a      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a2d      	ldr	r2, [pc, #180]	@ (8003214 <HAL_DMA_Abort+0x448>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d045      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2c      	ldr	r2, [pc, #176]	@ (8003218 <HAL_DMA_Abort+0x44c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d040      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2a      	ldr	r2, [pc, #168]	@ (800321c <HAL_DMA_Abort+0x450>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d03b      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a29      	ldr	r2, [pc, #164]	@ (8003220 <HAL_DMA_Abort+0x454>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d036      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a27      	ldr	r2, [pc, #156]	@ (8003224 <HAL_DMA_Abort+0x458>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a26      	ldr	r2, [pc, #152]	@ (8003228 <HAL_DMA_Abort+0x45c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02c      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a24      	ldr	r2, [pc, #144]	@ (800322c <HAL_DMA_Abort+0x460>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d027      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a23      	ldr	r2, [pc, #140]	@ (8003230 <HAL_DMA_Abort+0x464>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a21      	ldr	r2, [pc, #132]	@ (8003234 <HAL_DMA_Abort+0x468>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a20      	ldr	r2, [pc, #128]	@ (8003238 <HAL_DMA_Abort+0x46c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1e      	ldr	r2, [pc, #120]	@ (800323c <HAL_DMA_Abort+0x470>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003240 <HAL_DMA_Abort+0x474>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003244 <HAL_DMA_Abort+0x478>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1a      	ldr	r2, [pc, #104]	@ (8003248 <HAL_DMA_Abort+0x47c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_Abort+0x422>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a18      	ldr	r2, [pc, #96]	@ (800324c <HAL_DMA_Abort+0x480>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_DMA_Abort+0x426>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_DMA_Abort+0x428>
 80031f2:	2300      	movs	r3, #0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d02b      	beq.n	8003250 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	223f      	movs	r2, #63	@ 0x3f
 8003208:	409a      	lsls	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	e02a      	b.n	8003266 <HAL_DMA_Abort+0x49a>
 8003210:	40020010 	.word	0x40020010
 8003214:	40020028 	.word	0x40020028
 8003218:	40020040 	.word	0x40020040
 800321c:	40020058 	.word	0x40020058
 8003220:	40020070 	.word	0x40020070
 8003224:	40020088 	.word	0x40020088
 8003228:	400200a0 	.word	0x400200a0
 800322c:	400200b8 	.word	0x400200b8
 8003230:	40020410 	.word	0x40020410
 8003234:	40020428 	.word	0x40020428
 8003238:	40020440 	.word	0x40020440
 800323c:	40020458 	.word	0x40020458
 8003240:	40020470 	.word	0x40020470
 8003244:	40020488 	.word	0x40020488
 8003248:	400204a0 	.word	0x400204a0
 800324c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003254:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2201      	movs	r2, #1
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a4f      	ldr	r2, [pc, #316]	@ (80033a8 <HAL_DMA_Abort+0x5dc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d072      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a4d      	ldr	r2, [pc, #308]	@ (80033ac <HAL_DMA_Abort+0x5e0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d06d      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a4c      	ldr	r2, [pc, #304]	@ (80033b0 <HAL_DMA_Abort+0x5e4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d068      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a4a      	ldr	r2, [pc, #296]	@ (80033b4 <HAL_DMA_Abort+0x5e8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d063      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a49      	ldr	r2, [pc, #292]	@ (80033b8 <HAL_DMA_Abort+0x5ec>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d05e      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a47      	ldr	r2, [pc, #284]	@ (80033bc <HAL_DMA_Abort+0x5f0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d059      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a46      	ldr	r2, [pc, #280]	@ (80033c0 <HAL_DMA_Abort+0x5f4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d054      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a44      	ldr	r2, [pc, #272]	@ (80033c4 <HAL_DMA_Abort+0x5f8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d04f      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a43      	ldr	r2, [pc, #268]	@ (80033c8 <HAL_DMA_Abort+0x5fc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d04a      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a41      	ldr	r2, [pc, #260]	@ (80033cc <HAL_DMA_Abort+0x600>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d045      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a40      	ldr	r2, [pc, #256]	@ (80033d0 <HAL_DMA_Abort+0x604>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d040      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a3e      	ldr	r2, [pc, #248]	@ (80033d4 <HAL_DMA_Abort+0x608>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d03b      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a3d      	ldr	r2, [pc, #244]	@ (80033d8 <HAL_DMA_Abort+0x60c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d036      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a3b      	ldr	r2, [pc, #236]	@ (80033dc <HAL_DMA_Abort+0x610>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d031      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a3a      	ldr	r2, [pc, #232]	@ (80033e0 <HAL_DMA_Abort+0x614>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d02c      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a38      	ldr	r2, [pc, #224]	@ (80033e4 <HAL_DMA_Abort+0x618>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d027      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a37      	ldr	r2, [pc, #220]	@ (80033e8 <HAL_DMA_Abort+0x61c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a35      	ldr	r2, [pc, #212]	@ (80033ec <HAL_DMA_Abort+0x620>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01d      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a34      	ldr	r2, [pc, #208]	@ (80033f0 <HAL_DMA_Abort+0x624>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d018      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a32      	ldr	r2, [pc, #200]	@ (80033f4 <HAL_DMA_Abort+0x628>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a31      	ldr	r2, [pc, #196]	@ (80033f8 <HAL_DMA_Abort+0x62c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00e      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2f      	ldr	r2, [pc, #188]	@ (80033fc <HAL_DMA_Abort+0x630>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2e      	ldr	r2, [pc, #184]	@ (8003400 <HAL_DMA_Abort+0x634>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_DMA_Abort+0x58a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2c      	ldr	r2, [pc, #176]	@ (8003404 <HAL_DMA_Abort+0x638>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_DMA_Abort+0x58e>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_DMA_Abort+0x590>
 800335a:	2300      	movs	r3, #0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d015      	beq.n	800338c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003368:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00c      	beq.n	800338c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800337c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003380:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800338a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40020010 	.word	0x40020010
 80033ac:	40020028 	.word	0x40020028
 80033b0:	40020040 	.word	0x40020040
 80033b4:	40020058 	.word	0x40020058
 80033b8:	40020070 	.word	0x40020070
 80033bc:	40020088 	.word	0x40020088
 80033c0:	400200a0 	.word	0x400200a0
 80033c4:	400200b8 	.word	0x400200b8
 80033c8:	40020410 	.word	0x40020410
 80033cc:	40020428 	.word	0x40020428
 80033d0:	40020440 	.word	0x40020440
 80033d4:	40020458 	.word	0x40020458
 80033d8:	40020470 	.word	0x40020470
 80033dc:	40020488 	.word	0x40020488
 80033e0:	400204a0 	.word	0x400204a0
 80033e4:	400204b8 	.word	0x400204b8
 80033e8:	58025408 	.word	0x58025408
 80033ec:	5802541c 	.word	0x5802541c
 80033f0:	58025430 	.word	0x58025430
 80033f4:	58025444 	.word	0x58025444
 80033f8:	58025458 	.word	0x58025458
 80033fc:	5802546c 	.word	0x5802546c
 8003400:	58025480 	.word	0x58025480
 8003404:	58025494 	.word	0x58025494

08003408 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e237      	b.n	800388a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d004      	beq.n	8003430 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2280      	movs	r2, #128	@ 0x80
 800342a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e22c      	b.n	800388a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a5c      	ldr	r2, [pc, #368]	@ (80035a8 <HAL_DMA_Abort_IT+0x1a0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d04a      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a5b      	ldr	r2, [pc, #364]	@ (80035ac <HAL_DMA_Abort_IT+0x1a4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d045      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a59      	ldr	r2, [pc, #356]	@ (80035b0 <HAL_DMA_Abort_IT+0x1a8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d040      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a58      	ldr	r2, [pc, #352]	@ (80035b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d03b      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a56      	ldr	r2, [pc, #344]	@ (80035b8 <HAL_DMA_Abort_IT+0x1b0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d036      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a55      	ldr	r2, [pc, #340]	@ (80035bc <HAL_DMA_Abort_IT+0x1b4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d031      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a53      	ldr	r2, [pc, #332]	@ (80035c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d02c      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a52      	ldr	r2, [pc, #328]	@ (80035c4 <HAL_DMA_Abort_IT+0x1bc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d027      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a50      	ldr	r2, [pc, #320]	@ (80035c8 <HAL_DMA_Abort_IT+0x1c0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d022      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a4f      	ldr	r2, [pc, #316]	@ (80035cc <HAL_DMA_Abort_IT+0x1c4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d01d      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a4d      	ldr	r2, [pc, #308]	@ (80035d0 <HAL_DMA_Abort_IT+0x1c8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d018      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a4c      	ldr	r2, [pc, #304]	@ (80035d4 <HAL_DMA_Abort_IT+0x1cc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d013      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a4a      	ldr	r2, [pc, #296]	@ (80035d8 <HAL_DMA_Abort_IT+0x1d0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00e      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a49      	ldr	r2, [pc, #292]	@ (80035dc <HAL_DMA_Abort_IT+0x1d4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d009      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a47      	ldr	r2, [pc, #284]	@ (80035e0 <HAL_DMA_Abort_IT+0x1d8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a46      	ldr	r2, [pc, #280]	@ (80035e4 <HAL_DMA_Abort_IT+0x1dc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_DMA_Abort_IT+0xcc>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_DMA_Abort_IT+0xce>
 80034d4:	2300      	movs	r3, #0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8086 	beq.w	80035e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2204      	movs	r2, #4
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a2f      	ldr	r2, [pc, #188]	@ (80035a8 <HAL_DMA_Abort_IT+0x1a0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d04a      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2e      	ldr	r2, [pc, #184]	@ (80035ac <HAL_DMA_Abort_IT+0x1a4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d045      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2c      	ldr	r2, [pc, #176]	@ (80035b0 <HAL_DMA_Abort_IT+0x1a8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d040      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2b      	ldr	r2, [pc, #172]	@ (80035b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d03b      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a29      	ldr	r2, [pc, #164]	@ (80035b8 <HAL_DMA_Abort_IT+0x1b0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d036      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a28      	ldr	r2, [pc, #160]	@ (80035bc <HAL_DMA_Abort_IT+0x1b4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d031      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a26      	ldr	r2, [pc, #152]	@ (80035c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d02c      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a25      	ldr	r2, [pc, #148]	@ (80035c4 <HAL_DMA_Abort_IT+0x1bc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d027      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a23      	ldr	r2, [pc, #140]	@ (80035c8 <HAL_DMA_Abort_IT+0x1c0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d022      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a22      	ldr	r2, [pc, #136]	@ (80035cc <HAL_DMA_Abort_IT+0x1c4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d01d      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a20      	ldr	r2, [pc, #128]	@ (80035d0 <HAL_DMA_Abort_IT+0x1c8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d018      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1f      	ldr	r2, [pc, #124]	@ (80035d4 <HAL_DMA_Abort_IT+0x1cc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d013      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1d      	ldr	r2, [pc, #116]	@ (80035d8 <HAL_DMA_Abort_IT+0x1d0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00e      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1c      	ldr	r2, [pc, #112]	@ (80035dc <HAL_DMA_Abort_IT+0x1d4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d009      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1a      	ldr	r2, [pc, #104]	@ (80035e0 <HAL_DMA_Abort_IT+0x1d8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <HAL_DMA_Abort_IT+0x17c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a19      	ldr	r2, [pc, #100]	@ (80035e4 <HAL_DMA_Abort_IT+0x1dc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d108      	bne.n	8003596 <HAL_DMA_Abort_IT+0x18e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e178      	b.n	8003888 <HAL_DMA_Abort_IT+0x480>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e16f      	b.n	8003888 <HAL_DMA_Abort_IT+0x480>
 80035a8:	40020010 	.word	0x40020010
 80035ac:	40020028 	.word	0x40020028
 80035b0:	40020040 	.word	0x40020040
 80035b4:	40020058 	.word	0x40020058
 80035b8:	40020070 	.word	0x40020070
 80035bc:	40020088 	.word	0x40020088
 80035c0:	400200a0 	.word	0x400200a0
 80035c4:	400200b8 	.word	0x400200b8
 80035c8:	40020410 	.word	0x40020410
 80035cc:	40020428 	.word	0x40020428
 80035d0:	40020440 	.word	0x40020440
 80035d4:	40020458 	.word	0x40020458
 80035d8:	40020470 	.word	0x40020470
 80035dc:	40020488 	.word	0x40020488
 80035e0:	400204a0 	.word	0x400204a0
 80035e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 020e 	bic.w	r2, r2, #14
 80035f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6c      	ldr	r2, [pc, #432]	@ (80037b0 <HAL_DMA_Abort_IT+0x3a8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d04a      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a6b      	ldr	r2, [pc, #428]	@ (80037b4 <HAL_DMA_Abort_IT+0x3ac>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d045      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a69      	ldr	r2, [pc, #420]	@ (80037b8 <HAL_DMA_Abort_IT+0x3b0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d040      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a68      	ldr	r2, [pc, #416]	@ (80037bc <HAL_DMA_Abort_IT+0x3b4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d03b      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a66      	ldr	r2, [pc, #408]	@ (80037c0 <HAL_DMA_Abort_IT+0x3b8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d036      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a65      	ldr	r2, [pc, #404]	@ (80037c4 <HAL_DMA_Abort_IT+0x3bc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d031      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a63      	ldr	r2, [pc, #396]	@ (80037c8 <HAL_DMA_Abort_IT+0x3c0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d02c      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a62      	ldr	r2, [pc, #392]	@ (80037cc <HAL_DMA_Abort_IT+0x3c4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d027      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a60      	ldr	r2, [pc, #384]	@ (80037d0 <HAL_DMA_Abort_IT+0x3c8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d022      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a5f      	ldr	r2, [pc, #380]	@ (80037d4 <HAL_DMA_Abort_IT+0x3cc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d01d      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a5d      	ldr	r2, [pc, #372]	@ (80037d8 <HAL_DMA_Abort_IT+0x3d0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d018      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5c      	ldr	r2, [pc, #368]	@ (80037dc <HAL_DMA_Abort_IT+0x3d4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a5a      	ldr	r2, [pc, #360]	@ (80037e0 <HAL_DMA_Abort_IT+0x3d8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00e      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a59      	ldr	r2, [pc, #356]	@ (80037e4 <HAL_DMA_Abort_IT+0x3dc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d009      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a57      	ldr	r2, [pc, #348]	@ (80037e8 <HAL_DMA_Abort_IT+0x3e0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_DMA_Abort_IT+0x290>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a56      	ldr	r2, [pc, #344]	@ (80037ec <HAL_DMA_Abort_IT+0x3e4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d108      	bne.n	80036aa <HAL_DMA_Abort_IT+0x2a2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e007      	b.n	80036ba <HAL_DMA_Abort_IT+0x2b2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a3c      	ldr	r2, [pc, #240]	@ (80037b0 <HAL_DMA_Abort_IT+0x3a8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d072      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a3a      	ldr	r2, [pc, #232]	@ (80037b4 <HAL_DMA_Abort_IT+0x3ac>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d06d      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a39      	ldr	r2, [pc, #228]	@ (80037b8 <HAL_DMA_Abort_IT+0x3b0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d068      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a37      	ldr	r2, [pc, #220]	@ (80037bc <HAL_DMA_Abort_IT+0x3b4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d063      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a36      	ldr	r2, [pc, #216]	@ (80037c0 <HAL_DMA_Abort_IT+0x3b8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d05e      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a34      	ldr	r2, [pc, #208]	@ (80037c4 <HAL_DMA_Abort_IT+0x3bc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d059      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a33      	ldr	r2, [pc, #204]	@ (80037c8 <HAL_DMA_Abort_IT+0x3c0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d054      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a31      	ldr	r2, [pc, #196]	@ (80037cc <HAL_DMA_Abort_IT+0x3c4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d04f      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a30      	ldr	r2, [pc, #192]	@ (80037d0 <HAL_DMA_Abort_IT+0x3c8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d04a      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2e      	ldr	r2, [pc, #184]	@ (80037d4 <HAL_DMA_Abort_IT+0x3cc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d045      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2d      	ldr	r2, [pc, #180]	@ (80037d8 <HAL_DMA_Abort_IT+0x3d0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d040      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2b      	ldr	r2, [pc, #172]	@ (80037dc <HAL_DMA_Abort_IT+0x3d4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d03b      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2a      	ldr	r2, [pc, #168]	@ (80037e0 <HAL_DMA_Abort_IT+0x3d8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d036      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a28      	ldr	r2, [pc, #160]	@ (80037e4 <HAL_DMA_Abort_IT+0x3dc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d031      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a27      	ldr	r2, [pc, #156]	@ (80037e8 <HAL_DMA_Abort_IT+0x3e0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d02c      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a25      	ldr	r2, [pc, #148]	@ (80037ec <HAL_DMA_Abort_IT+0x3e4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d027      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a24      	ldr	r2, [pc, #144]	@ (80037f0 <HAL_DMA_Abort_IT+0x3e8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d022      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a22      	ldr	r2, [pc, #136]	@ (80037f4 <HAL_DMA_Abort_IT+0x3ec>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01d      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a21      	ldr	r2, [pc, #132]	@ (80037f8 <HAL_DMA_Abort_IT+0x3f0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d018      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1f      	ldr	r2, [pc, #124]	@ (80037fc <HAL_DMA_Abort_IT+0x3f4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1e      	ldr	r2, [pc, #120]	@ (8003800 <HAL_DMA_Abort_IT+0x3f8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00e      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1c      	ldr	r2, [pc, #112]	@ (8003804 <HAL_DMA_Abort_IT+0x3fc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d009      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1b      	ldr	r2, [pc, #108]	@ (8003808 <HAL_DMA_Abort_IT+0x400>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_DMA_Abort_IT+0x3a2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a19      	ldr	r2, [pc, #100]	@ (800380c <HAL_DMA_Abort_IT+0x404>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d132      	bne.n	8003810 <HAL_DMA_Abort_IT+0x408>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e031      	b.n	8003812 <HAL_DMA_Abort_IT+0x40a>
 80037ae:	bf00      	nop
 80037b0:	40020010 	.word	0x40020010
 80037b4:	40020028 	.word	0x40020028
 80037b8:	40020040 	.word	0x40020040
 80037bc:	40020058 	.word	0x40020058
 80037c0:	40020070 	.word	0x40020070
 80037c4:	40020088 	.word	0x40020088
 80037c8:	400200a0 	.word	0x400200a0
 80037cc:	400200b8 	.word	0x400200b8
 80037d0:	40020410 	.word	0x40020410
 80037d4:	40020428 	.word	0x40020428
 80037d8:	40020440 	.word	0x40020440
 80037dc:	40020458 	.word	0x40020458
 80037e0:	40020470 	.word	0x40020470
 80037e4:	40020488 	.word	0x40020488
 80037e8:	400204a0 	.word	0x400204a0
 80037ec:	400204b8 	.word	0x400204b8
 80037f0:	58025408 	.word	0x58025408
 80037f4:	5802541c 	.word	0x5802541c
 80037f8:	58025430 	.word	0x58025430
 80037fc:	58025444 	.word	0x58025444
 8003800:	58025458 	.word	0x58025458
 8003804:	5802546c 	.word	0x5802546c
 8003808:	58025480 	.word	0x58025480
 800380c:	58025494 	.word	0x58025494
 8003810:	2300      	movs	r3, #0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d028      	beq.n	8003868 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003824:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003844:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00c      	beq.n	8003868 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003858:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800385c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003866:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop

08003894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003894:	b480      	push	{r7}
 8003896:	b089      	sub	sp, #36	@ 0x24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038a2:	4b89      	ldr	r3, [pc, #548]	@ (8003ac8 <HAL_GPIO_Init+0x234>)
 80038a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038a6:	e194      	b.n	8003bd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2101      	movs	r1, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8186 	beq.w	8003bcc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d005      	beq.n	80038d8 <HAL_GPIO_Init+0x44>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d130      	bne.n	800393a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	2203      	movs	r2, #3
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800390e:	2201      	movs	r2, #1
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	f003 0201 	and.w	r2, r3, #1
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b03      	cmp	r3, #3
 8003944:	d017      	beq.n	8003976 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	2203      	movs	r2, #3
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d123      	bne.n	80039ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	08da      	lsrs	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	220f      	movs	r2, #15
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4013      	ands	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	08da      	lsrs	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3208      	adds	r2, #8
 80039c4:	69b9      	ldr	r1, [r7, #24]
 80039c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2203      	movs	r2, #3
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 0203 	and.w	r2, r3, #3
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80e0 	beq.w	8003bcc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003acc <HAL_GPIO_Init+0x238>)
 8003a0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a12:	4a2e      	ldr	r2, [pc, #184]	@ (8003acc <HAL_GPIO_Init+0x238>)
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003acc <HAL_GPIO_Init+0x238>)
 8003a1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a2a:	4a29      	ldr	r2, [pc, #164]	@ (8003ad0 <HAL_GPIO_Init+0x23c>)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	089b      	lsrs	r3, r3, #2
 8003a30:	3302      	adds	r3, #2
 8003a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	220f      	movs	r2, #15
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a20      	ldr	r2, [pc, #128]	@ (8003ad4 <HAL_GPIO_Init+0x240>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d052      	beq.n	8003afc <HAL_GPIO_Init+0x268>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad8 <HAL_GPIO_Init+0x244>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d031      	beq.n	8003ac2 <HAL_GPIO_Init+0x22e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1e      	ldr	r2, [pc, #120]	@ (8003adc <HAL_GPIO_Init+0x248>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02b      	beq.n	8003abe <HAL_GPIO_Init+0x22a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <HAL_GPIO_Init+0x24c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d025      	beq.n	8003aba <HAL_GPIO_Init+0x226>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae4 <HAL_GPIO_Init+0x250>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01f      	beq.n	8003ab6 <HAL_GPIO_Init+0x222>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae8 <HAL_GPIO_Init+0x254>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d019      	beq.n	8003ab2 <HAL_GPIO_Init+0x21e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1a      	ldr	r2, [pc, #104]	@ (8003aec <HAL_GPIO_Init+0x258>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_Init+0x21a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a19      	ldr	r2, [pc, #100]	@ (8003af0 <HAL_GPIO_Init+0x25c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00d      	beq.n	8003aaa <HAL_GPIO_Init+0x216>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <HAL_GPIO_Init+0x260>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <HAL_GPIO_Init+0x212>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a17      	ldr	r2, [pc, #92]	@ (8003af8 <HAL_GPIO_Init+0x264>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_GPIO_Init+0x20e>
 8003a9e:	2309      	movs	r3, #9
 8003aa0:	e02d      	b.n	8003afe <HAL_GPIO_Init+0x26a>
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	e02b      	b.n	8003afe <HAL_GPIO_Init+0x26a>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	e029      	b.n	8003afe <HAL_GPIO_Init+0x26a>
 8003aaa:	2307      	movs	r3, #7
 8003aac:	e027      	b.n	8003afe <HAL_GPIO_Init+0x26a>
 8003aae:	2306      	movs	r3, #6
 8003ab0:	e025      	b.n	8003afe <HAL_GPIO_Init+0x26a>
 8003ab2:	2305      	movs	r3, #5
 8003ab4:	e023      	b.n	8003afe <HAL_GPIO_Init+0x26a>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e021      	b.n	8003afe <HAL_GPIO_Init+0x26a>
 8003aba:	2303      	movs	r3, #3
 8003abc:	e01f      	b.n	8003afe <HAL_GPIO_Init+0x26a>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e01d      	b.n	8003afe <HAL_GPIO_Init+0x26a>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e01b      	b.n	8003afe <HAL_GPIO_Init+0x26a>
 8003ac6:	bf00      	nop
 8003ac8:	58000080 	.word	0x58000080
 8003acc:	58024400 	.word	0x58024400
 8003ad0:	58000400 	.word	0x58000400
 8003ad4:	58020000 	.word	0x58020000
 8003ad8:	58020400 	.word	0x58020400
 8003adc:	58020800 	.word	0x58020800
 8003ae0:	58020c00 	.word	0x58020c00
 8003ae4:	58021000 	.word	0x58021000
 8003ae8:	58021400 	.word	0x58021400
 8003aec:	58021800 	.word	0x58021800
 8003af0:	58021c00 	.word	0x58021c00
 8003af4:	58022000 	.word	0x58022000
 8003af8:	58022400 	.word	0x58022400
 8003afc:	2300      	movs	r3, #0
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	f002 0203 	and.w	r2, r2, #3
 8003b04:	0092      	lsls	r2, r2, #2
 8003b06:	4093      	lsls	r3, r2
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b0e:	4938      	ldr	r1, [pc, #224]	@ (8003bf0 <HAL_GPIO_Init+0x35c>)
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	089b      	lsrs	r3, r3, #2
 8003b14:	3302      	adds	r3, #2
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f47f ae63 	bne.w	80038a8 <HAL_GPIO_Init+0x14>
  }
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	3724      	adds	r7, #36	@ 0x24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	58000400 	.word	0x58000400

08003bf4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003bfc:	4a08      	ldr	r2, [pc, #32]	@ (8003c20 <HAL_HSEM_FastTake+0x2c>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3320      	adds	r3, #32
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	4a07      	ldr	r2, [pc, #28]	@ (8003c24 <HAL_HSEM_FastTake+0x30>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e000      	b.n	8003c12 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	58026400 	.word	0x58026400
 8003c24:	80000300 	.word	0x80000300

08003c28 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003c32:	4906      	ldr	r1, [pc, #24]	@ (8003c4c <HAL_HSEM_Release+0x24>)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	58026400 	.word	0x58026400

08003c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e08b      	b.n	8003d7a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd f9d0 	bl	800101c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2224      	movs	r2, #36	@ 0x24
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ca0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	e006      	b.n	8003cd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003cd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d108      	bne.n	8003cf2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cee:	605a      	str	r2, [r3, #4]
 8003cf0:	e007      	b.n	8003d02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d84 <HAL_I2C_Init+0x134>)
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69d9      	ldr	r1, [r3, #28]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1a      	ldr	r2, [r3, #32]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	02008000 	.word	0x02008000

08003d88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	461a      	mov	r2, r3
 8003d94:	460b      	mov	r3, r1
 8003d96:	817b      	strh	r3, [r7, #10]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	f040 80fd 	bne.w	8003fa4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_I2C_Master_Transmit+0x30>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e0f6      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x21e>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dc0:	f7fd fe58 	bl	8001a74 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2319      	movs	r3, #25
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fa82 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0e1      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2221      	movs	r2, #33	@ 0x21
 8003de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2210      	movs	r2, #16
 8003dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	893a      	ldrh	r2, [r7, #8]
 8003e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2bff      	cmp	r3, #255	@ 0xff
 8003e12:	d906      	bls.n	8003e22 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	22ff      	movs	r2, #255	@ 0xff
 8003e18:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003e1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	e007      	b.n	8003e32 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003e2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e30:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d024      	beq.n	8003e84 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	8979      	ldrh	r1, [r7, #10]
 8003e76:	4b4e      	ldr	r3, [pc, #312]	@ (8003fb0 <HAL_I2C_Master_Transmit+0x228>)
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fbf1 	bl	8004664 <I2C_TransferConfig>
 8003e82:	e066      	b.n	8003f52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	8979      	ldrh	r1, [r7, #10]
 8003e8c:	4b48      	ldr	r3, [pc, #288]	@ (8003fb0 <HAL_I2C_Master_Transmit+0x228>)
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fbe6 	bl	8004664 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e98:	e05b      	b.n	8003f52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	6a39      	ldr	r1, [r7, #32]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fa75 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e07b      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	781a      	ldrb	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d034      	beq.n	8003f52 <HAL_I2C_Master_Transmit+0x1ca>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d130      	bne.n	8003f52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2180      	movs	r1, #128	@ 0x80
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f9ee 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e04d      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2bff      	cmp	r3, #255	@ 0xff
 8003f12:	d90e      	bls.n	8003f32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	22ff      	movs	r2, #255	@ 0xff
 8003f18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	8979      	ldrh	r1, [r7, #10]
 8003f22:	2300      	movs	r3, #0
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fb9a 	bl	8004664 <I2C_TransferConfig>
 8003f30:	e00f      	b.n	8003f52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	8979      	ldrh	r1, [r7, #10]
 8003f44:	2300      	movs	r3, #0
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fb89 	bl	8004664 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d19e      	bne.n	8003e9a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	6a39      	ldr	r1, [r7, #32]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fa5b 	bl	800441c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e01a      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2220      	movs	r2, #32
 8003f76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb4 <HAL_I2C_Master_Transmit+0x22c>)
 8003f84:	400b      	ands	r3, r1
 8003f86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	80002000 	.word	0x80002000
 8003fb4:	fe00e800 	.word	0xfe00e800

08003fb8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	817b      	strh	r3, [r7, #10]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	813b      	strh	r3, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	f040 80fd 	bne.w	80041da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_I2C_Mem_Read+0x34>
 8003fe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ff2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0f1      	b.n	80041dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_I2C_Mem_Read+0x4e>
 8004002:	2302      	movs	r3, #2
 8004004:	e0ea      	b.n	80041dc <HAL_I2C_Mem_Read+0x224>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800400e:	f7fd fd31 	bl	8001a74 <HAL_GetTick>
 8004012:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2319      	movs	r3, #25
 800401a:	2201      	movs	r2, #1
 800401c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f95b 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0d5      	b.n	80041dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2222      	movs	r2, #34	@ 0x22
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2240      	movs	r2, #64	@ 0x40
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004050:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004058:	88f8      	ldrh	r0, [r7, #6]
 800405a:	893a      	ldrh	r2, [r7, #8]
 800405c:	8979      	ldrh	r1, [r7, #10]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	4603      	mov	r3, r0
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f8bf 	bl	80041ec <I2C_RequestMemoryRead>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0ad      	b.n	80041dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2bff      	cmp	r3, #255	@ 0xff
 8004088:	d90e      	bls.n	80040a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	22ff      	movs	r2, #255	@ 0xff
 800408e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004094:	b2da      	uxtb	r2, r3
 8004096:	8979      	ldrh	r1, [r7, #10]
 8004098:	4b52      	ldr	r3, [pc, #328]	@ (80041e4 <HAL_I2C_Mem_Read+0x22c>)
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fadf 	bl	8004664 <I2C_TransferConfig>
 80040a6:	e00f      	b.n	80040c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	8979      	ldrh	r1, [r7, #10]
 80040ba:	4b4a      	ldr	r3, [pc, #296]	@ (80041e4 <HAL_I2C_Mem_Read+0x22c>)
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 face 	bl	8004664 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ce:	2200      	movs	r2, #0
 80040d0:	2104      	movs	r1, #4
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f902 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e07c      	b.n	80041dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d034      	beq.n	8004188 <HAL_I2C_Mem_Read+0x1d0>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	d130      	bne.n	8004188 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412c:	2200      	movs	r2, #0
 800412e:	2180      	movs	r1, #128	@ 0x80
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f8d3 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e04d      	b.n	80041dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2bff      	cmp	r3, #255	@ 0xff
 8004148:	d90e      	bls.n	8004168 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	22ff      	movs	r2, #255	@ 0xff
 800414e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004154:	b2da      	uxtb	r2, r3
 8004156:	8979      	ldrh	r1, [r7, #10]
 8004158:	2300      	movs	r3, #0
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fa7f 	bl	8004664 <I2C_TransferConfig>
 8004166:	e00f      	b.n	8004188 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004176:	b2da      	uxtb	r2, r3
 8004178:	8979      	ldrh	r1, [r7, #10]
 800417a:	2300      	movs	r3, #0
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fa6e 	bl	8004664 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d19a      	bne.n	80040c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f940 	bl	800441c <I2C_WaitOnSTOPFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e01a      	b.n	80041dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2220      	movs	r2, #32
 80041ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6859      	ldr	r1, [r3, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_I2C_Mem_Read+0x230>)
 80041ba:	400b      	ands	r3, r1
 80041bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	80002400 	.word	0x80002400
 80041e8:	fe00e800 	.word	0xfe00e800

080041ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	817b      	strh	r3, [r7, #10]
 80041fe:	460b      	mov	r3, r1
 8004200:	813b      	strh	r3, [r7, #8]
 8004202:	4613      	mov	r3, r2
 8004204:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	8979      	ldrh	r1, [r7, #10]
 800420c:	4b20      	ldr	r3, [pc, #128]	@ (8004290 <I2C_RequestMemoryRead+0xa4>)
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2300      	movs	r3, #0
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fa26 	bl	8004664 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	69b9      	ldr	r1, [r7, #24]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f8b6 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e02c      	b.n	8004286 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004232:	893b      	ldrh	r3, [r7, #8]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	629a      	str	r2, [r3, #40]	@ 0x28
 800423c:	e015      	b.n	800426a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800423e:	893b      	ldrh	r3, [r7, #8]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	b29b      	uxth	r3, r3
 8004244:	b2da      	uxtb	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	69b9      	ldr	r1, [r7, #24]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f89c 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e012      	b.n	8004286 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004260:	893b      	ldrh	r3, [r7, #8]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2200      	movs	r2, #0
 8004272:	2140      	movs	r1, #64	@ 0x40
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f831 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	80002000 	.word	0x80002000

08004294 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d103      	bne.n	80042b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2200      	movs	r2, #0
 80042b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d007      	beq.n	80042d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	619a      	str	r2, [r3, #24]
  }
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ec:	e03b      	b.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f8d6 	bl	80044a4 <I2C_IsErrorOccurred>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e041      	b.n	8004386 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004308:	d02d      	beq.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430a:	f7fd fbb3 	bl	8001a74 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <I2C_WaitOnFlagUntilTimeout+0x44>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d122      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	429a      	cmp	r2, r3
 800433c:	d113      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e00f      	b.n	8004386 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699a      	ldr	r2, [r3, #24]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4013      	ands	r3, r2
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	429a      	cmp	r2, r3
 8004382:	d0b4      	beq.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800439a:	e033      	b.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f87f 	bl	80044a4 <I2C_IsErrorOccurred>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e031      	b.n	8004414 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043b6:	d025      	beq.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b8:	f7fd fb5c 	bl	8001a74 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d302      	bcc.n	80043ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d11a      	bne.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d013      	beq.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e0:	f043 0220 	orr.w	r2, r3, #32
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e007      	b.n	8004414 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	d1c4      	bne.n	800439c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004428:	e02f      	b.n	800448a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f838 	bl	80044a4 <I2C_IsErrorOccurred>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e02d      	b.n	800449a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443e:	f7fd fb19 	bl	8001a74 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d11a      	bne.n	800448a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b20      	cmp	r3, #32
 8004460:	d013      	beq.n	800448a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e007      	b.n	800449a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b20      	cmp	r3, #32
 8004496:	d1c8      	bne.n	800442a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	@ 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d068      	beq.n	80045a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2210      	movs	r2, #16
 80044d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044d8:	e049      	b.n	800456e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044e0:	d045      	beq.n	800456e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044e2:	f7fd fac7 	bl	8001a74 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <I2C_IsErrorOccurred+0x54>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d13a      	bne.n	800456e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004502:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800450a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800451a:	d121      	bne.n	8004560 <I2C_IsErrorOccurred+0xbc>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004522:	d01d      	beq.n	8004560 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	2b20      	cmp	r3, #32
 8004528:	d01a      	beq.n	8004560 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004538:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800453a:	f7fd fa9b 	bl	8001a74 <HAL_GetTick>
 800453e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004540:	e00e      	b.n	8004560 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004542:	f7fd fa97 	bl	8001a74 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b19      	cmp	r3, #25
 800454e:	d907      	bls.n	8004560 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	f043 0320 	orr.w	r3, r3, #32
 8004556:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800455e:	e006      	b.n	800456e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b20      	cmp	r3, #32
 800456c:	d1e9      	bne.n	8004542 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b20      	cmp	r3, #32
 800457a:	d003      	beq.n	8004584 <I2C_IsErrorOccurred+0xe0>
 800457c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0aa      	beq.n	80044da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2220      	movs	r2, #32
 8004592:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	f043 0302 	orr.w	r3, r3, #2
 80045fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01c      	beq.n	8004652 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff fe3b 	bl	8004294 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b0d      	ldr	r3, [pc, #52]	@ (8004660 <I2C_IsErrorOccurred+0x1bc>)
 800462a:	400b      	ands	r3, r1
 800462c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004656:	4618      	mov	r0, r3
 8004658:	3728      	adds	r7, #40	@ 0x28
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	fe00e800 	.word	0xfe00e800

08004664 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	817b      	strh	r3, [r7, #10]
 8004672:	4613      	mov	r3, r2
 8004674:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004676:	897b      	ldrh	r3, [r7, #10]
 8004678:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800467c:	7a7b      	ldrb	r3, [r7, #9]
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004684:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	4313      	orrs	r3, r2
 800468e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004692:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	0d5b      	lsrs	r3, r3, #21
 800469e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80046a2:	4b08      	ldr	r3, [pc, #32]	@ (80046c4 <I2C_TransferConfig+0x60>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	43db      	mvns	r3, r3
 80046a8:	ea02 0103 	and.w	r1, r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	03ff63ff 	.word	0x03ff63ff

080046c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d138      	bne.n	8004750 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e032      	b.n	8004752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	@ 0x24
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800471a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b20      	cmp	r3, #32
 8004772:	d139      	bne.n	80047e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800477e:	2302      	movs	r3, #2
 8004780:	e033      	b.n	80047ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2224      	movs	r2, #36	@ 0x24
 800478e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80047b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
	...

080047f8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004800:	4b29      	ldr	r3, [pc, #164]	@ (80048a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	2b06      	cmp	r3, #6
 800480a:	d00a      	beq.n	8004822 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800480c:	4b26      	ldr	r3, [pc, #152]	@ (80048a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	429a      	cmp	r2, r3
 8004818:	d001      	beq.n	800481e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e040      	b.n	80048a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e03e      	b.n	80048a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004822:	4b21      	ldr	r3, [pc, #132]	@ (80048a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800482a:	491f      	ldr	r1, [pc, #124]	@ (80048a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4313      	orrs	r3, r2
 8004830:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004832:	f7fd f91f 	bl	8001a74 <HAL_GetTick>
 8004836:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004838:	e009      	b.n	800484e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800483a:	f7fd f91b 	bl	8001a74 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004848:	d901      	bls.n	800484e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e028      	b.n	80048a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800484e:	4b16      	ldr	r3, [pc, #88]	@ (80048a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800485a:	d1ee      	bne.n	800483a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b1e      	cmp	r3, #30
 8004860:	d008      	beq.n	8004874 <HAL_PWREx_ConfigSupply+0x7c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b2e      	cmp	r3, #46	@ 0x2e
 8004866:	d005      	beq.n	8004874 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b1d      	cmp	r3, #29
 800486c:	d002      	beq.n	8004874 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b2d      	cmp	r3, #45	@ 0x2d
 8004872:	d114      	bne.n	800489e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004874:	f7fd f8fe 	bl	8001a74 <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800487a:	e009      	b.n	8004890 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800487c:	f7fd f8fa 	bl	8001a74 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800488a:	d901      	bls.n	8004890 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e007      	b.n	80048a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004890:	4b05      	ldr	r3, [pc, #20]	@ (80048a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800489c:	d1ee      	bne.n	800487c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	58024800 	.word	0x58024800

080048ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08c      	sub	sp, #48	@ 0x30
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f000 bc48 	b.w	8005150 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8088 	beq.w	80049de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ce:	4b99      	ldr	r3, [pc, #612]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048d8:	4b96      	ldr	r3, [pc, #600]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d007      	beq.n	80048f4 <HAL_RCC_OscConfig+0x48>
 80048e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e6:	2b18      	cmp	r3, #24
 80048e8:	d111      	bne.n	800490e <HAL_RCC_OscConfig+0x62>
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d10c      	bne.n	800490e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d06d      	beq.n	80049dc <HAL_RCC_OscConfig+0x130>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d169      	bne.n	80049dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	f000 bc21 	b.w	8005150 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004916:	d106      	bne.n	8004926 <HAL_RCC_OscConfig+0x7a>
 8004918:	4b86      	ldr	r3, [pc, #536]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a85      	ldr	r2, [pc, #532]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 800491e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	e02e      	b.n	8004984 <HAL_RCC_OscConfig+0xd8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10c      	bne.n	8004948 <HAL_RCC_OscConfig+0x9c>
 800492e:	4b81      	ldr	r3, [pc, #516]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a80      	ldr	r2, [pc, #512]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a7d      	ldr	r2, [pc, #500]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004940:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e01d      	b.n	8004984 <HAL_RCC_OscConfig+0xd8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004950:	d10c      	bne.n	800496c <HAL_RCC_OscConfig+0xc0>
 8004952:	4b78      	ldr	r3, [pc, #480]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a77      	ldr	r2, [pc, #476]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	4b75      	ldr	r3, [pc, #468]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a74      	ldr	r2, [pc, #464]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e00b      	b.n	8004984 <HAL_RCC_OscConfig+0xd8>
 800496c:	4b71      	ldr	r3, [pc, #452]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a70      	ldr	r2, [pc, #448]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	4b6e      	ldr	r3, [pc, #440]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a6d      	ldr	r2, [pc, #436]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 800497e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d013      	beq.n	80049b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fd f872 	bl	8001a74 <HAL_GetTick>
 8004990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004994:	f7fd f86e 	bl	8001a74 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	@ 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e3d4      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049a6:	4b63      	ldr	r3, [pc, #396]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0xe8>
 80049b2:	e014      	b.n	80049de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd f85e 	bl	8001a74 <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fd f85a 	bl	8001a74 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	@ 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e3c0      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049ce:	4b59      	ldr	r3, [pc, #356]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x110>
 80049da:	e000      	b.n	80049de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80ca 	beq.w	8004b80 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ec:	4b51      	ldr	r3, [pc, #324]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 80049f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <HAL_RCC_OscConfig+0x166>
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	2b18      	cmp	r3, #24
 8004a06:	d156      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x20a>
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d151      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a12:	4b48      	ldr	r3, [pc, #288]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_RCC_OscConfig+0x17e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e392      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a2a:	4b42      	ldr	r3, [pc, #264]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 0219 	bic.w	r2, r3, #25
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	493f      	ldr	r1, [pc, #252]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fd f81a 	bl	8001a74 <HAL_GetTick>
 8004a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a44:	f7fd f816 	bl	8001a74 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e37c      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a56:	4b37      	ldr	r3, [pc, #220]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a62:	f7fd f837 	bl	8001ad4 <HAL_GetREVID>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d817      	bhi.n	8004aa0 <HAL_RCC_OscConfig+0x1f4>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b40      	cmp	r3, #64	@ 0x40
 8004a76:	d108      	bne.n	8004a8a <HAL_RCC_OscConfig+0x1de>
 8004a78:	4b2e      	ldr	r3, [pc, #184]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004a80:	4a2c      	ldr	r2, [pc, #176]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a86:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a88:	e07a      	b.n	8004b80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	031b      	lsls	r3, r3, #12
 8004a98:	4926      	ldr	r1, [pc, #152]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a9e:	e06f      	b.n	8004b80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa0:	4b24      	ldr	r3, [pc, #144]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	4921      	ldr	r1, [pc, #132]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab4:	e064      	b.n	8004b80 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d047      	beq.n	8004b4e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004abe:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 0219 	bic.w	r2, r3, #25
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	491a      	ldr	r1, [pc, #104]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fc ffd0 	bl	8001a74 <HAL_GetTick>
 8004ad4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fc ffcc 	bl	8001a74 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e332      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aea:	4b12      	ldr	r3, [pc, #72]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af6:	f7fc ffed 	bl	8001ad4 <HAL_GetREVID>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d819      	bhi.n	8004b38 <HAL_RCC_OscConfig+0x28c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b40      	cmp	r3, #64	@ 0x40
 8004b0a:	d108      	bne.n	8004b1e <HAL_RCC_OscConfig+0x272>
 8004b0c:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b14:	4a07      	ldr	r2, [pc, #28]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b1a:	6053      	str	r3, [r2, #4]
 8004b1c:	e030      	b.n	8004b80 <HAL_RCC_OscConfig+0x2d4>
 8004b1e:	4b05      	ldr	r3, [pc, #20]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	031b      	lsls	r3, r3, #12
 8004b2c:	4901      	ldr	r1, [pc, #4]	@ (8004b34 <HAL_RCC_OscConfig+0x288>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	604b      	str	r3, [r1, #4]
 8004b32:	e025      	b.n	8004b80 <HAL_RCC_OscConfig+0x2d4>
 8004b34:	58024400 	.word	0x58024400
 8004b38:	4b9a      	ldr	r3, [pc, #616]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	4997      	ldr	r1, [pc, #604]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	604b      	str	r3, [r1, #4]
 8004b4c:	e018      	b.n	8004b80 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4e:	4b95      	ldr	r3, [pc, #596]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a94      	ldr	r2, [pc, #592]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fc ff8b 	bl	8001a74 <HAL_GetTick>
 8004b5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b62:	f7fc ff87 	bl	8001a74 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e2ed      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b74:	4b8b      	ldr	r3, [pc, #556]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f0      	bne.n	8004b62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80a9 	beq.w	8004ce0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b8e:	4b85      	ldr	r3, [pc, #532]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b98:	4b82      	ldr	r3, [pc, #520]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d007      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x308>
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b18      	cmp	r3, #24
 8004ba8:	d13a      	bne.n	8004c20 <HAL_RCC_OscConfig+0x374>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d135      	bne.n	8004c20 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_OscConfig+0x320>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	2b80      	cmp	r3, #128	@ 0x80
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e2c1      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bcc:	f7fc ff82 	bl	8001ad4 <HAL_GetREVID>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d817      	bhi.n	8004c0a <HAL_RCC_OscConfig+0x35e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d108      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x348>
 8004be2:	4b70      	ldr	r3, [pc, #448]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004bea:	4a6e      	ldr	r2, [pc, #440]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004bec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bf0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bf2:	e075      	b.n	8004ce0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	069b      	lsls	r3, r3, #26
 8004c02:	4968      	ldr	r1, [pc, #416]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c08:	e06a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c0a:	4b66      	ldr	r3, [pc, #408]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	061b      	lsls	r3, r3, #24
 8004c18:	4962      	ldr	r1, [pc, #392]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c1e:	e05f      	b.n	8004ce0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d042      	beq.n	8004cae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c28:	4b5e      	ldr	r3, [pc, #376]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a5d      	ldr	r2, [pc, #372]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fc ff1e 	bl	8001a74 <HAL_GetTick>
 8004c38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c3c:	f7fc ff1a 	bl	8001a74 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e280      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c4e:	4b55      	ldr	r3, [pc, #340]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c5a:	f7fc ff3b 	bl	8001ad4 <HAL_GetREVID>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d817      	bhi.n	8004c98 <HAL_RCC_OscConfig+0x3ec>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d108      	bne.n	8004c82 <HAL_RCC_OscConfig+0x3d6>
 8004c70:	4b4c      	ldr	r3, [pc, #304]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c78:	4a4a      	ldr	r2, [pc, #296]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004c7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c7e:	6053      	str	r3, [r2, #4]
 8004c80:	e02e      	b.n	8004ce0 <HAL_RCC_OscConfig+0x434>
 8004c82:	4b48      	ldr	r3, [pc, #288]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	069b      	lsls	r3, r3, #26
 8004c90:	4944      	ldr	r1, [pc, #272]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	604b      	str	r3, [r1, #4]
 8004c96:	e023      	b.n	8004ce0 <HAL_RCC_OscConfig+0x434>
 8004c98:	4b42      	ldr	r3, [pc, #264]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	493f      	ldr	r1, [pc, #252]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60cb      	str	r3, [r1, #12]
 8004cac:	e018      	b.n	8004ce0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004cae:	4b3d      	ldr	r3, [pc, #244]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a3c      	ldr	r2, [pc, #240]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cba:	f7fc fedb 	bl	8001a74 <HAL_GetTick>
 8004cbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004cc2:	f7fc fed7 	bl	8001a74 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e23d      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cd4:	4b33      	ldr	r3, [pc, #204]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d036      	beq.n	8004d5a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d019      	beq.n	8004d28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7fc feb8 	bl	8001a74 <HAL_GetTick>
 8004d04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d08:	f7fc feb4 	bl	8001a74 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e21a      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d1a:	4b22      	ldr	r3, [pc, #136]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x45c>
 8004d26:	e018      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d28:	4b1e      	ldr	r3, [pc, #120]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d34:	f7fc fe9e 	bl	8001a74 <HAL_GetTick>
 8004d38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3c:	f7fc fe9a 	bl	8001a74 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e200      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d4e:	4b15      	ldr	r3, [pc, #84]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d039      	beq.n	8004dda <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01c      	beq.n	8004da8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a0c      	ldr	r2, [pc, #48]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004d74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d7a:	f7fc fe7b 	bl	8001a74 <HAL_GetTick>
 8004d7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d82:	f7fc fe77 	bl	8001a74 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e1dd      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d94:	4b03      	ldr	r3, [pc, #12]	@ (8004da4 <HAL_RCC_OscConfig+0x4f8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x4d6>
 8004da0:	e01b      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
 8004da2:	bf00      	nop
 8004da4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004da8:	4b9b      	ldr	r3, [pc, #620]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a9a      	ldr	r2, [pc, #616]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004dae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004db2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004db4:	f7fc fe5e 	bl	8001a74 <HAL_GetTick>
 8004db8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dbc:	f7fc fe5a 	bl	8001a74 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e1c0      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dce:	4b92      	ldr	r3, [pc, #584]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8081 	beq.w	8004eea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004de8:	4b8c      	ldr	r3, [pc, #560]	@ (800501c <HAL_RCC_OscConfig+0x770>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a8b      	ldr	r2, [pc, #556]	@ (800501c <HAL_RCC_OscConfig+0x770>)
 8004dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004df4:	f7fc fe3e 	bl	8001a74 <HAL_GetTick>
 8004df8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfc:	f7fc fe3a 	bl	8001a74 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	@ 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e1a0      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e0e:	4b83      	ldr	r3, [pc, #524]	@ (800501c <HAL_RCC_OscConfig+0x770>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d106      	bne.n	8004e30 <HAL_RCC_OscConfig+0x584>
 8004e22:	4b7d      	ldr	r3, [pc, #500]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e26:	4a7c      	ldr	r2, [pc, #496]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e2e:	e02d      	b.n	8004e8c <HAL_RCC_OscConfig+0x5e0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10c      	bne.n	8004e52 <HAL_RCC_OscConfig+0x5a6>
 8004e38:	4b77      	ldr	r3, [pc, #476]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3c:	4a76      	ldr	r2, [pc, #472]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
 8004e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e44:	4b74      	ldr	r3, [pc, #464]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e48:	4a73      	ldr	r2, [pc, #460]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e4a:	f023 0304 	bic.w	r3, r3, #4
 8004e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e50:	e01c      	b.n	8004e8c <HAL_RCC_OscConfig+0x5e0>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b05      	cmp	r3, #5
 8004e58:	d10c      	bne.n	8004e74 <HAL_RCC_OscConfig+0x5c8>
 8004e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5e:	4a6e      	ldr	r2, [pc, #440]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e60:	f043 0304 	orr.w	r3, r3, #4
 8004e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e66:	4b6c      	ldr	r3, [pc, #432]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6a:	4a6b      	ldr	r2, [pc, #428]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e72:	e00b      	b.n	8004e8c <HAL_RCC_OscConfig+0x5e0>
 8004e74:	4b68      	ldr	r3, [pc, #416]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e78:	4a67      	ldr	r2, [pc, #412]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e7a:	f023 0301 	bic.w	r3, r3, #1
 8004e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e80:	4b65      	ldr	r3, [pc, #404]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e84:	4a64      	ldr	r2, [pc, #400]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004e86:	f023 0304 	bic.w	r3, r3, #4
 8004e8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d015      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e94:	f7fc fdee 	bl	8001a74 <HAL_GetTick>
 8004e98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9c:	f7fc fdea 	bl	8001a74 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e14e      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb2:	4b59      	ldr	r3, [pc, #356]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0ee      	beq.n	8004e9c <HAL_RCC_OscConfig+0x5f0>
 8004ebe:	e014      	b.n	8004eea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fc fdd8 	bl	8001a74 <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f7fc fdd4 	bl	8001a74 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e138      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ede:	4b4e      	ldr	r3, [pc, #312]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1ee      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 812d 	beq.w	800514e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ef4:	4b48      	ldr	r3, [pc, #288]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004efc:	2b18      	cmp	r3, #24
 8004efe:	f000 80bd 	beq.w	800507c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	f040 809e 	bne.w	8005048 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0c:	4b42      	ldr	r3, [pc, #264]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a41      	ldr	r2, [pc, #260]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fc fdac 	bl	8001a74 <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fc fda8 	bl	8001a74 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e10e      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f32:	4b39      	ldr	r3, [pc, #228]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f3e:	4b36      	ldr	r3, [pc, #216]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004f40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f42:	4b37      	ldr	r3, [pc, #220]	@ (8005020 <HAL_RCC_OscConfig+0x774>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f4e:	0112      	lsls	r2, r2, #4
 8004f50:	430a      	orrs	r2, r1
 8004f52:	4931      	ldr	r1, [pc, #196]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f66:	3b01      	subs	r3, #1
 8004f68:	025b      	lsls	r3, r3, #9
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	3b01      	subs	r3, #1
 8004f74:	041b      	lsls	r3, r3, #16
 8004f76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f80:	3b01      	subs	r3, #1
 8004f82:	061b      	lsls	r3, r3, #24
 8004f84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f88:	4923      	ldr	r1, [pc, #140]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004f8e:	4b22      	ldr	r3, [pc, #136]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f92:	4a21      	ldr	r2, [pc, #132]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f9e:	4b21      	ldr	r3, [pc, #132]	@ (8005024 <HAL_RCC_OscConfig+0x778>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004fa6:	00d2      	lsls	r2, r2, #3
 8004fa8:	491b      	ldr	r1, [pc, #108]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fae:	4b1a      	ldr	r3, [pc, #104]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	f023 020c 	bic.w	r2, r3, #12
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	4917      	ldr	r1, [pc, #92]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fc0:	4b15      	ldr	r3, [pc, #84]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc4:	f023 0202 	bic.w	r2, r3, #2
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fcc:	4912      	ldr	r1, [pc, #72]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fd2:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd6:	4a10      	ldr	r2, [pc, #64]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fde:	4b0e      	ldr	r3, [pc, #56]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fea:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	4a0a      	ldr	r2, [pc, #40]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ff6:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	4a07      	ldr	r2, [pc, #28]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005002:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a04      	ldr	r2, [pc, #16]	@ (8005018 <HAL_RCC_OscConfig+0x76c>)
 8005008:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800500c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fc fd31 	bl	8001a74 <HAL_GetTick>
 8005012:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005014:	e011      	b.n	800503a <HAL_RCC_OscConfig+0x78e>
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
 800501c:	58024800 	.word	0x58024800
 8005020:	fffffc0c 	.word	0xfffffc0c
 8005024:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fc fd24 	bl	8001a74 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e08a      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800503a:	4b47      	ldr	r3, [pc, #284]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x77c>
 8005046:	e082      	b.n	800514e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005048:	4b43      	ldr	r3, [pc, #268]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a42      	ldr	r2, [pc, #264]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 800504e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005054:	f7fc fd0e 	bl	8001a74 <HAL_GetTick>
 8005058:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505c:	f7fc fd0a 	bl	8001a74 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e070      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800506e:	4b3a      	ldr	r3, [pc, #232]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x7b0>
 800507a:	e068      	b.n	800514e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800507c:	4b36      	ldr	r3, [pc, #216]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005082:	4b35      	ldr	r3, [pc, #212]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 8005084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005086:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508c:	2b01      	cmp	r3, #1
 800508e:	d031      	beq.n	80050f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f003 0203 	and.w	r2, r3, #3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800509a:	429a      	cmp	r2, r3
 800509c:	d12a      	bne.n	80050f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	091b      	lsrs	r3, r3, #4
 80050a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d122      	bne.n	80050f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d11a      	bne.n	80050f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	0a5b      	lsrs	r3, r3, #9
 80050c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d111      	bne.n	80050f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	0c1b      	lsrs	r3, r3, #16
 80050d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d108      	bne.n	80050f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	0e1b      	lsrs	r3, r3, #24
 80050e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d001      	beq.n	80050f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e02b      	b.n	8005150 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80050f8:	4b17      	ldr	r3, [pc, #92]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 80050fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fc:	08db      	lsrs	r3, r3, #3
 80050fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005102:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	429a      	cmp	r2, r3
 800510c:	d01f      	beq.n	800514e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800510e:	4b12      	ldr	r3, [pc, #72]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	4a11      	ldr	r2, [pc, #68]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 8005114:	f023 0301 	bic.w	r3, r3, #1
 8005118:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800511a:	f7fc fcab 	bl	8001a74 <HAL_GetTick>
 800511e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005120:	bf00      	nop
 8005122:	f7fc fca7 	bl	8001a74 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	4293      	cmp	r3, r2
 800512c:	d0f9      	beq.n	8005122 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800512e:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 8005130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005132:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <HAL_RCC_OscConfig+0x8b0>)
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800513a:	00d2      	lsls	r2, r2, #3
 800513c:	4906      	ldr	r1, [pc, #24]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 800513e:	4313      	orrs	r3, r2
 8005140:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005142:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 8005144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005146:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <HAL_RCC_OscConfig+0x8ac>)
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3730      	adds	r7, #48	@ 0x30
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	58024400 	.word	0x58024400
 800515c:	ffff0007 	.word	0xffff0007

08005160 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e19c      	b.n	80054ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005174:	4b8a      	ldr	r3, [pc, #552]	@ (80053a0 <HAL_RCC_ClockConfig+0x240>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d910      	bls.n	80051a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005182:	4b87      	ldr	r3, [pc, #540]	@ (80053a0 <HAL_RCC_ClockConfig+0x240>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f023 020f 	bic.w	r2, r3, #15
 800518a:	4985      	ldr	r1, [pc, #532]	@ (80053a0 <HAL_RCC_ClockConfig+0x240>)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	4313      	orrs	r3, r2
 8005190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005192:	4b83      	ldr	r3, [pc, #524]	@ (80053a0 <HAL_RCC_ClockConfig+0x240>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e184      	b.n	80054ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d010      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	4b7b      	ldr	r3, [pc, #492]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051bc:	429a      	cmp	r2, r3
 80051be:	d908      	bls.n	80051d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051c0:	4b78      	ldr	r3, [pc, #480]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	4975      	ldr	r1, [pc, #468]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d010      	beq.n	8005200 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695a      	ldr	r2, [r3, #20]
 80051e2:	4b70      	ldr	r3, [pc, #448]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d908      	bls.n	8005200 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051ee:	4b6d      	ldr	r3, [pc, #436]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	496a      	ldr	r1, [pc, #424]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	d010      	beq.n	800522e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	4b64      	ldr	r3, [pc, #400]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005218:	429a      	cmp	r2, r3
 800521a:	d908      	bls.n	800522e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800521c:	4b61      	ldr	r3, [pc, #388]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	495e      	ldr	r1, [pc, #376]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 800522a:	4313      	orrs	r3, r2
 800522c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b00      	cmp	r3, #0
 8005238:	d010      	beq.n	800525c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	4b59      	ldr	r3, [pc, #356]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005246:	429a      	cmp	r2, r3
 8005248:	d908      	bls.n	800525c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800524a:	4b56      	ldr	r3, [pc, #344]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	4953      	ldr	r1, [pc, #332]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 8005258:	4313      	orrs	r3, r2
 800525a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d010      	beq.n	800528a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	4b4d      	ldr	r3, [pc, #308]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	429a      	cmp	r2, r3
 8005276:	d908      	bls.n	800528a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005278:	4b4a      	ldr	r3, [pc, #296]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f023 020f 	bic.w	r2, r3, #15
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4947      	ldr	r1, [pc, #284]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 8005286:	4313      	orrs	r3, r2
 8005288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d055      	beq.n	8005342 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005296:	4b43      	ldr	r3, [pc, #268]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	4940      	ldr	r1, [pc, #256]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d107      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052b0:	4b3c      	ldr	r3, [pc, #240]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d121      	bne.n	8005300 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0f6      	b.n	80054ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d107      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052c8:	4b36      	ldr	r3, [pc, #216]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d115      	bne.n	8005300 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0ea      	b.n	80054ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d107      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052e0:	4b30      	ldr	r3, [pc, #192]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0de      	b.n	80054ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052f0:	4b2c      	ldr	r3, [pc, #176]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0d6      	b.n	80054ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005300:	4b28      	ldr	r3, [pc, #160]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f023 0207 	bic.w	r2, r3, #7
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4925      	ldr	r1, [pc, #148]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 800530e:	4313      	orrs	r3, r2
 8005310:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005312:	f7fc fbaf 	bl	8001a74 <HAL_GetTick>
 8005316:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005318:	e00a      	b.n	8005330 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800531a:	f7fc fbab 	bl	8001a74 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005328:	4293      	cmp	r3, r2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e0be      	b.n	80054ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005330:	4b1c      	ldr	r3, [pc, #112]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	429a      	cmp	r2, r3
 8005340:	d1eb      	bne.n	800531a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d010      	beq.n	8005370 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	4b14      	ldr	r3, [pc, #80]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	429a      	cmp	r2, r3
 800535c:	d208      	bcs.n	8005370 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800535e:	4b11      	ldr	r3, [pc, #68]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f023 020f 	bic.w	r2, r3, #15
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	490e      	ldr	r1, [pc, #56]	@ (80053a4 <HAL_RCC_ClockConfig+0x244>)
 800536c:	4313      	orrs	r3, r2
 800536e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005370:	4b0b      	ldr	r3, [pc, #44]	@ (80053a0 <HAL_RCC_ClockConfig+0x240>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d214      	bcs.n	80053a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b08      	ldr	r3, [pc, #32]	@ (80053a0 <HAL_RCC_ClockConfig+0x240>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 020f 	bic.w	r2, r3, #15
 8005386:	4906      	ldr	r1, [pc, #24]	@ (80053a0 <HAL_RCC_ClockConfig+0x240>)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b04      	ldr	r3, [pc, #16]	@ (80053a0 <HAL_RCC_ClockConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d005      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e086      	b.n	80054ae <HAL_RCC_ClockConfig+0x34e>
 80053a0:	52002000 	.word	0x52002000
 80053a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d010      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	4b3f      	ldr	r3, [pc, #252]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d208      	bcs.n	80053d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053c4:	4b3c      	ldr	r3, [pc, #240]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	4939      	ldr	r1, [pc, #228]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d010      	beq.n	8005404 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	4b34      	ldr	r3, [pc, #208]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d208      	bcs.n	8005404 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053f2:	4b31      	ldr	r3, [pc, #196]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	492e      	ldr	r1, [pc, #184]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 8005400:	4313      	orrs	r3, r2
 8005402:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	4b28      	ldr	r3, [pc, #160]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800541c:	429a      	cmp	r2, r3
 800541e:	d208      	bcs.n	8005432 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005420:	4b25      	ldr	r3, [pc, #148]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	4922      	ldr	r1, [pc, #136]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 800542e:	4313      	orrs	r3, r2
 8005430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d010      	beq.n	8005460 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	4b1d      	ldr	r3, [pc, #116]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800544a:	429a      	cmp	r2, r3
 800544c:	d208      	bcs.n	8005460 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800544e:	4b1a      	ldr	r3, [pc, #104]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	4917      	ldr	r1, [pc, #92]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 800545c:	4313      	orrs	r3, r2
 800545e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005460:	f000 f834 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 8005464:	4602      	mov	r2, r0
 8005466:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	4912      	ldr	r1, [pc, #72]	@ (80054bc <HAL_RCC_ClockConfig+0x35c>)
 8005472:	5ccb      	ldrb	r3, [r1, r3]
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
 800547c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800547e:	4b0e      	ldr	r3, [pc, #56]	@ (80054b8 <HAL_RCC_ClockConfig+0x358>)
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	4a0d      	ldr	r2, [pc, #52]	@ (80054bc <HAL_RCC_ClockConfig+0x35c>)
 8005488:	5cd3      	ldrb	r3, [r2, r3]
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
 8005494:	4a0a      	ldr	r2, [pc, #40]	@ (80054c0 <HAL_RCC_ClockConfig+0x360>)
 8005496:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005498:	4a0a      	ldr	r2, [pc, #40]	@ (80054c4 <HAL_RCC_ClockConfig+0x364>)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800549e:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <HAL_RCC_ClockConfig+0x368>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fc fa9c 	bl	80019e0 <HAL_InitTick>
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	58024400 	.word	0x58024400
 80054bc:	080109cc 	.word	0x080109cc
 80054c0:	24000004 	.word	0x24000004
 80054c4:	24000000 	.word	0x24000000
 80054c8:	24000008 	.word	0x24000008

080054cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b089      	sub	sp, #36	@ 0x24
 80054d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054d2:	4bb3      	ldr	r3, [pc, #716]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054da:	2b18      	cmp	r3, #24
 80054dc:	f200 8155 	bhi.w	800578a <HAL_RCC_GetSysClockFreq+0x2be>
 80054e0:	a201      	add	r2, pc, #4	@ (adr r2, 80054e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e6:	bf00      	nop
 80054e8:	0800554d 	.word	0x0800554d
 80054ec:	0800578b 	.word	0x0800578b
 80054f0:	0800578b 	.word	0x0800578b
 80054f4:	0800578b 	.word	0x0800578b
 80054f8:	0800578b 	.word	0x0800578b
 80054fc:	0800578b 	.word	0x0800578b
 8005500:	0800578b 	.word	0x0800578b
 8005504:	0800578b 	.word	0x0800578b
 8005508:	08005573 	.word	0x08005573
 800550c:	0800578b 	.word	0x0800578b
 8005510:	0800578b 	.word	0x0800578b
 8005514:	0800578b 	.word	0x0800578b
 8005518:	0800578b 	.word	0x0800578b
 800551c:	0800578b 	.word	0x0800578b
 8005520:	0800578b 	.word	0x0800578b
 8005524:	0800578b 	.word	0x0800578b
 8005528:	08005579 	.word	0x08005579
 800552c:	0800578b 	.word	0x0800578b
 8005530:	0800578b 	.word	0x0800578b
 8005534:	0800578b 	.word	0x0800578b
 8005538:	0800578b 	.word	0x0800578b
 800553c:	0800578b 	.word	0x0800578b
 8005540:	0800578b 	.word	0x0800578b
 8005544:	0800578b 	.word	0x0800578b
 8005548:	0800557f 	.word	0x0800557f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800554c:	4b94      	ldr	r3, [pc, #592]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d009      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005558:	4b91      	ldr	r3, [pc, #580]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	08db      	lsrs	r3, r3, #3
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	4a90      	ldr	r2, [pc, #576]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
 8005568:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800556a:	e111      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800556c:	4b8d      	ldr	r3, [pc, #564]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800556e:	61bb      	str	r3, [r7, #24]
      break;
 8005570:	e10e      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005572:	4b8d      	ldr	r3, [pc, #564]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005574:	61bb      	str	r3, [r7, #24]
      break;
 8005576:	e10b      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005578:	4b8c      	ldr	r3, [pc, #560]	@ (80057ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800557a:	61bb      	str	r3, [r7, #24]
      break;
 800557c:	e108      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800557e:	4b88      	ldr	r3, [pc, #544]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005588:	4b85      	ldr	r3, [pc, #532]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800558a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005592:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005594:	4b82      	ldr	r3, [pc, #520]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800559e:	4b80      	ldr	r3, [pc, #512]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a2:	08db      	lsrs	r3, r3, #3
 80055a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80e1 	beq.w	8005784 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	f000 8083 	beq.w	80056d0 <HAL_RCC_GetSysClockFreq+0x204>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	f200 80a1 	bhi.w	8005714 <HAL_RCC_GetSysClockFreq+0x248>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_RCC_GetSysClockFreq+0x114>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d056      	beq.n	800568c <HAL_RCC_GetSysClockFreq+0x1c0>
 80055de:	e099      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e0:	4b6f      	ldr	r3, [pc, #444]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d02d      	beq.n	8005648 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055ec:	4b6c      	ldr	r3, [pc, #432]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	08db      	lsrs	r3, r3, #3
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	4a6b      	ldr	r2, [pc, #428]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
 80055fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	ee07 3a90 	vmov	s15, r3
 800560e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005616:	4b62      	ldr	r3, [pc, #392]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005626:	ed97 6a02 	vldr	s12, [r7, #8]
 800562a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80057b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800562e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800563a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005642:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005646:	e087      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005652:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80057b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565a:	4b51      	ldr	r3, [pc, #324]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566a:	ed97 6a02 	vldr	s12, [r7, #8]
 800566e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80057b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800567a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800567e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800568a:	e065      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80057b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800569a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569e:	4b40      	ldr	r3, [pc, #256]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80056b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80057b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056ce:	e043      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80057bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80056de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e2:	4b2f      	ldr	r3, [pc, #188]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80056f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80057b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800570a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005712:	e021      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80057b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005726:	4b1e      	ldr	r3, [pc, #120]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005736:	ed97 6a02 	vldr	s12, [r7, #8]
 800573a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80057b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800573e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800574a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800574e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005752:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005756:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005758:	4b11      	ldr	r3, [pc, #68]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575c:	0a5b      	lsrs	r3, r3, #9
 800575e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005762:	3301      	adds	r3, #1
 8005764:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	ee07 3a90 	vmov	s15, r3
 800576c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005770:	edd7 6a07 	vldr	s13, [r7, #28]
 8005774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800577c:	ee17 3a90 	vmov	r3, s15
 8005780:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005782:	e005      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
      break;
 8005788:	e002      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800578a:	4b07      	ldr	r3, [pc, #28]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800578c:	61bb      	str	r3, [r7, #24]
      break;
 800578e:	bf00      	nop
  }

  return sysclockfreq;
 8005790:	69bb      	ldr	r3, [r7, #24]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3724      	adds	r7, #36	@ 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	58024400 	.word	0x58024400
 80057a4:	03d09000 	.word	0x03d09000
 80057a8:	003d0900 	.word	0x003d0900
 80057ac:	017d7840 	.word	0x017d7840
 80057b0:	46000000 	.word	0x46000000
 80057b4:	4c742400 	.word	0x4c742400
 80057b8:	4a742400 	.word	0x4a742400
 80057bc:	4bbebc20 	.word	0x4bbebc20

080057c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057c6:	f7ff fe81 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 80057ca:	4602      	mov	r2, r0
 80057cc:	4b10      	ldr	r3, [pc, #64]	@ (8005810 <HAL_RCC_GetHCLKFreq+0x50>)
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	490f      	ldr	r1, [pc, #60]	@ (8005814 <HAL_RCC_GetHCLKFreq+0x54>)
 80057d8:	5ccb      	ldrb	r3, [r1, r3]
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	fa22 f303 	lsr.w	r3, r2, r3
 80057e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005810 <HAL_RCC_GetHCLKFreq+0x50>)
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	4a09      	ldr	r2, [pc, #36]	@ (8005814 <HAL_RCC_GetHCLKFreq+0x54>)
 80057ee:	5cd3      	ldrb	r3, [r2, r3]
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	fa22 f303 	lsr.w	r3, r2, r3
 80057fa:	4a07      	ldr	r2, [pc, #28]	@ (8005818 <HAL_RCC_GetHCLKFreq+0x58>)
 80057fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057fe:	4a07      	ldr	r2, [pc, #28]	@ (800581c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005804:	4b04      	ldr	r3, [pc, #16]	@ (8005818 <HAL_RCC_GetHCLKFreq+0x58>)
 8005806:	681b      	ldr	r3, [r3, #0]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	58024400 	.word	0x58024400
 8005814:	080109cc 	.word	0x080109cc
 8005818:	24000004 	.word	0x24000004
 800581c:	24000000 	.word	0x24000000

08005820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005824:	f7ff ffcc 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 8005828:	4602      	mov	r2, r0
 800582a:	4b06      	ldr	r3, [pc, #24]	@ (8005844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	091b      	lsrs	r3, r3, #4
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	4904      	ldr	r1, [pc, #16]	@ (8005848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005836:	5ccb      	ldrb	r3, [r1, r3]
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	58024400 	.word	0x58024400
 8005848:	080109cc 	.word	0x080109cc

0800584c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005850:	f7ff ffb6 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 8005854:	4602      	mov	r2, r0
 8005856:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	0a1b      	lsrs	r3, r3, #8
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	4904      	ldr	r1, [pc, #16]	@ (8005874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005862:	5ccb      	ldrb	r3, [r1, r3]
 8005864:	f003 031f 	and.w	r3, r3, #31
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800586c:	4618      	mov	r0, r3
 800586e:	bd80      	pop	{r7, pc}
 8005870:	58024400 	.word	0x58024400
 8005874:	080109cc 	.word	0x080109cc

08005878 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800587c:	b0ca      	sub	sp, #296	@ 0x128
 800587e:	af00      	add	r7, sp, #0
 8005880:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005884:	2300      	movs	r3, #0
 8005886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800588a:	2300      	movs	r3, #0
 800588c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800589c:	2500      	movs	r5, #0
 800589e:	ea54 0305 	orrs.w	r3, r4, r5
 80058a2:	d049      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058ae:	d02f      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80058b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058b4:	d828      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058ba:	d01a      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80058bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058c0:	d822      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80058c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ca:	d007      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058cc:	e01c      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ce:	4bb8      	ldr	r3, [pc, #736]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	4ab7      	ldr	r2, [pc, #732]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058da:	e01a      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e0:	3308      	adds	r3, #8
 80058e2:	2102      	movs	r1, #2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f002 fb61 	bl	8007fac <RCCEx_PLL2_Config>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058f0:	e00f      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f6:	3328      	adds	r3, #40	@ 0x28
 80058f8:	2102      	movs	r1, #2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f002 fc08 	bl	8008110 <RCCEx_PLL3_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005906:	e004      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800590e:	e000      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800591a:	4ba5      	ldr	r3, [pc, #660]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800591c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005928:	4aa1      	ldr	r2, [pc, #644]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800592a:	430b      	orrs	r3, r1
 800592c:	6513      	str	r3, [r2, #80]	@ 0x50
 800592e:	e003      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005934:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005944:	f04f 0900 	mov.w	r9, #0
 8005948:	ea58 0309 	orrs.w	r3, r8, r9
 800594c:	d047      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800594e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005954:	2b04      	cmp	r3, #4
 8005956:	d82a      	bhi.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005958:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	08005975 	.word	0x08005975
 8005964:	08005983 	.word	0x08005983
 8005968:	08005999 	.word	0x08005999
 800596c:	080059b7 	.word	0x080059b7
 8005970:	080059b7 	.word	0x080059b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005974:	4b8e      	ldr	r3, [pc, #568]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	4a8d      	ldr	r2, [pc, #564]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800597a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800597e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005980:	e01a      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005986:	3308      	adds	r3, #8
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f002 fb0e 	bl	8007fac <RCCEx_PLL2_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005996:	e00f      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	3328      	adds	r3, #40	@ 0x28
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f002 fbb5 	bl	8008110 <RCCEx_PLL3_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059ac:	e004      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059b4:	e000      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80059b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10a      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059c0:	4b7b      	ldr	r3, [pc, #492]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059c4:	f023 0107 	bic.w	r1, r3, #7
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ce:	4a78      	ldr	r2, [pc, #480]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059d0:	430b      	orrs	r3, r1
 80059d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80059d4:	e003      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80059de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80059ea:	f04f 0b00 	mov.w	fp, #0
 80059ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80059f2:	d04c      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80059f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059fe:	d030      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a04:	d829      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a08:	d02d      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005a0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a0c:	d825      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a0e:	2b80      	cmp	r3, #128	@ 0x80
 8005a10:	d018      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005a12:	2b80      	cmp	r3, #128	@ 0x80
 8005a14:	d821      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005a1a:	2b40      	cmp	r3, #64	@ 0x40
 8005a1c:	d007      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005a1e:	e01c      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a20:	4b63      	ldr	r3, [pc, #396]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	4a62      	ldr	r2, [pc, #392]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a2c:	e01c      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	3308      	adds	r3, #8
 8005a34:	2100      	movs	r1, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	f002 fab8 	bl	8007fac <RCCEx_PLL2_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a42:	e011      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a48:	3328      	adds	r3, #40	@ 0x28
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f002 fb5f 	bl	8008110 <RCCEx_PLL3_Config>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a58:	e006      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a60:	e002      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a62:	bf00      	nop
 8005a64:	e000      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a70:	4b4f      	ldr	r3, [pc, #316]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a74:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a7e:	4a4c      	ldr	r2, [pc, #304]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a84:	e003      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a96:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005a9a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005aa4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	d053      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ab6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005aba:	d035      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005abc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ac0:	d82e      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ac2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ac6:	d031      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005ac8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005acc:	d828      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ad2:	d01a      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005ad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ad8:	d822      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005ade:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ae2:	d007      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005ae4:	e01c      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae6:	4b32      	ldr	r3, [pc, #200]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aea:	4a31      	ldr	r2, [pc, #196]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005af2:	e01c      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af8:	3308      	adds	r3, #8
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f002 fa55 	bl	8007fac <RCCEx_PLL2_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b08:	e011      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0e:	3328      	adds	r3, #40	@ 0x28
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f002 fafc 	bl	8008110 <RCCEx_PLL3_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b1e:	e006      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b26:	e002      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b28:	bf00      	nop
 8005b2a:	e000      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b36:	4b1e      	ldr	r3, [pc, #120]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b46:	4a1a      	ldr	r2, [pc, #104]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b4c:	e003      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005b62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b66:	2300      	movs	r3, #0
 8005b68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005b6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005b70:	460b      	mov	r3, r1
 8005b72:	4313      	orrs	r3, r2
 8005b74:	d056      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b82:	d038      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005b84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b88:	d831      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b8e:	d034      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005b90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b94:	d82b      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b9a:	d01d      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005b9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ba0:	d825      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d006      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005ba6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005baa:	d00a      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005bac:	e01f      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bb4:	4ba2      	ldr	r3, [pc, #648]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb8:	4aa1      	ldr	r2, [pc, #644]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bc0:	e01c      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f002 f9ee 	bl	8007fac <RCCEx_PLL2_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005bd6:	e011      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bdc:	3328      	adds	r3, #40	@ 0x28
 8005bde:	2100      	movs	r1, #0
 8005be0:	4618      	mov	r0, r3
 8005be2:	f002 fa95 	bl	8008110 <RCCEx_PLL3_Config>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bec:	e006      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bf4:	e002      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005bf6:	bf00      	nop
 8005bf8:	e000      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10b      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c04:	4b8e      	ldr	r3, [pc, #568]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c08:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c14:	4a8a      	ldr	r2, [pc, #552]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c16:	430b      	orrs	r3, r1
 8005c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c1a:	e003      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4313      	orrs	r3, r2
 8005c42:	d03a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4a:	2b30      	cmp	r3, #48	@ 0x30
 8005c4c:	d01f      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005c4e:	2b30      	cmp	r3, #48	@ 0x30
 8005c50:	d819      	bhi.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d00c      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d815      	bhi.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d019      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d111      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c62:	4b77      	ldr	r3, [pc, #476]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c66:	4a76      	ldr	r2, [pc, #472]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c6e:	e011      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c74:	3308      	adds	r3, #8
 8005c76:	2102      	movs	r1, #2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f002 f997 	bl	8007fac <RCCEx_PLL2_Config>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c84:	e006      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c8c:	e002      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c8e:	bf00      	nop
 8005c90:	e000      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c9c:	4b68      	ldr	r3, [pc, #416]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005caa:	4a65      	ldr	r2, [pc, #404]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cac:	430b      	orrs	r3, r1
 8005cae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cb0:	e003      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005cc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005cd0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	d051      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ce4:	d035      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005ce6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cea:	d82e      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005cec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cf0:	d031      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005cf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cf6:	d828      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cfc:	d01a      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d02:	d822      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0c:	d007      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005d0e:	e01c      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d10:	4b4b      	ldr	r3, [pc, #300]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d14:	4a4a      	ldr	r2, [pc, #296]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d1c:	e01c      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d22:	3308      	adds	r3, #8
 8005d24:	2100      	movs	r1, #0
 8005d26:	4618      	mov	r0, r3
 8005d28:	f002 f940 	bl	8007fac <RCCEx_PLL2_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d32:	e011      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d38:	3328      	adds	r3, #40	@ 0x28
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f002 f9e7 	bl	8008110 <RCCEx_PLL3_Config>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d48:	e006      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d50:	e002      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d52:	bf00      	nop
 8005d54:	e000      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d60:	4b37      	ldr	r3, [pc, #220]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d6e:	4a34      	ldr	r2, [pc, #208]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d70:	430b      	orrs	r3, r1
 8005d72:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d74:	e003      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	d056      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005da8:	d033      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005daa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dae:	d82c      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005db0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005db4:	d02f      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005db6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dba:	d826      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005dbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dc0:	d02b      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005dc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dc6:	d820      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005dc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dcc:	d012      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005dce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dd2:	d81a      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d022      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ddc:	d115      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de2:	3308      	adds	r3, #8
 8005de4:	2101      	movs	r1, #1
 8005de6:	4618      	mov	r0, r3
 8005de8:	f002 f8e0 	bl	8007fac <RCCEx_PLL2_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005df2:	e015      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df8:	3328      	adds	r3, #40	@ 0x28
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f002 f987 	bl	8008110 <RCCEx_PLL3_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e08:	e00a      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e10:	e006      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e12:	bf00      	nop
 8005e14:	e004      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e16:	bf00      	nop
 8005e18:	e002      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10d      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e28:	4b05      	ldr	r3, [pc, #20]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e36:	4a02      	ldr	r2, [pc, #8]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e3c:	e006      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e3e:	bf00      	nop
 8005e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005e58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e62:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	d055      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e78:	d033      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e7e:	d82c      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e84:	d02f      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e8a:	d826      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e90:	d02b      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005e92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e96:	d820      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e9c:	d012      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ea2:	d81a      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d022      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005ea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005eac:	d115      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f002 f878 	bl	8007fac <RCCEx_PLL2_Config>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ec2:	e015      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	3328      	adds	r3, #40	@ 0x28
 8005eca:	2101      	movs	r1, #1
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f002 f91f 	bl	8008110 <RCCEx_PLL3_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ed8:	e00a      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ee0:	e006      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ee2:	bf00      	nop
 8005ee4:	e004      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ee6:	bf00      	nop
 8005ee8:	e002      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10b      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ef8:	4ba3      	ldr	r3, [pc, #652]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f08:	4a9f      	ldr	r2, [pc, #636]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f0e:	e003      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005f24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f32:	460b      	mov	r3, r1
 8005f34:	4313      	orrs	r3, r2
 8005f36:	d037      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f42:	d00e      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f48:	d816      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d018      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005f4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f52:	d111      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f54:	4b8c      	ldr	r3, [pc, #560]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	4a8b      	ldr	r2, [pc, #556]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f60:	e00f      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f66:	3308      	adds	r3, #8
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f002 f81e 	bl	8007fac <RCCEx_PLL2_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f76:	e004      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f7e:	e000      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f8a:	4b7f      	ldr	r3, [pc, #508]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f98:	4a7b      	ldr	r2, [pc, #492]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f9e:	e003      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005fbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	d039      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d81c      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	08006015 	.word	0x08006015
 8005fdc:	08005fe9 	.word	0x08005fe9
 8005fe0:	08005ff7 	.word	0x08005ff7
 8005fe4:	08006015 	.word	0x08006015
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe8:	4b67      	ldr	r3, [pc, #412]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	4a66      	ldr	r2, [pc, #408]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ff4:	e00f      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	2102      	movs	r1, #2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 ffd4 	bl	8007fac <RCCEx_PLL2_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800600a:	e004      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006012:	e000      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800601e:	4b5a      	ldr	r3, [pc, #360]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006022:	f023 0103 	bic.w	r1, r3, #3
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800602c:	4a56      	ldr	r2, [pc, #344]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800602e:	430b      	orrs	r3, r1
 8006030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006032:	e003      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006038:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800603c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006048:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006052:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006056:	460b      	mov	r3, r1
 8006058:	4313      	orrs	r3, r2
 800605a:	f000 809f 	beq.w	800619c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800605e:	4b4b      	ldr	r3, [pc, #300]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a4a      	ldr	r2, [pc, #296]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006068:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800606a:	f7fb fd03 	bl	8001a74 <HAL_GetTick>
 800606e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006072:	e00b      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006074:	f7fb fcfe 	bl	8001a74 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b64      	cmp	r3, #100	@ 0x64
 8006082:	d903      	bls.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800608a:	e005      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800608c:	4b3f      	ldr	r3, [pc, #252]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0ed      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609c:	2b00      	cmp	r3, #0
 800609e:	d179      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060a0:	4b39      	ldr	r3, [pc, #228]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060ac:	4053      	eors	r3, r2
 80060ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d015      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060b6:	4b34      	ldr	r3, [pc, #208]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060c2:	4b31      	ldr	r3, [pc, #196]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c6:	4a30      	ldr	r2, [pc, #192]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060cc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ce:	4b2e      	ldr	r3, [pc, #184]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d2:	4a2d      	ldr	r2, [pc, #180]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060da:	4a2b      	ldr	r2, [pc, #172]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060e0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ee:	d118      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f0:	f7fb fcc0 	bl	8001a74 <HAL_GetTick>
 80060f4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060f8:	e00d      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fa:	f7fb fcbb 	bl	8001a74 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006104:	1ad2      	subs	r2, r2, r3
 8006106:	f241 3388 	movw	r3, #5000	@ 0x1388
 800610a:	429a      	cmp	r2, r3
 800610c:	d903      	bls.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006114:	e005      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006116:	4b1c      	ldr	r3, [pc, #112]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0eb      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006126:	2b00      	cmp	r3, #0
 8006128:	d129      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800613a:	d10e      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800613c:	4b12      	ldr	r3, [pc, #72]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006148:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800614c:	091a      	lsrs	r2, r3, #4
 800614e:	4b10      	ldr	r3, [pc, #64]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006150:	4013      	ands	r3, r2
 8006152:	4a0d      	ldr	r2, [pc, #52]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006154:	430b      	orrs	r3, r1
 8006156:	6113      	str	r3, [r2, #16]
 8006158:	e005      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800615a:	4b0b      	ldr	r3, [pc, #44]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	4a0a      	ldr	r2, [pc, #40]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006160:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006164:	6113      	str	r3, [r2, #16]
 8006166:	4b08      	ldr	r3, [pc, #32]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006168:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800616a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006176:	4a04      	ldr	r2, [pc, #16]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006178:	430b      	orrs	r3, r1
 800617a:	6713      	str	r3, [r2, #112]	@ 0x70
 800617c:	e00e      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800617e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006186:	e009      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006188:	58024400 	.word	0x58024400
 800618c:	58024800 	.word	0x58024800
 8006190:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f002 0301 	and.w	r3, r2, #1
 80061a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061ac:	2300      	movs	r3, #0
 80061ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f000 8089 	beq.w	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80061be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061c4:	2b28      	cmp	r3, #40	@ 0x28
 80061c6:	d86b      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80061c8:	a201      	add	r2, pc, #4	@ (adr r2, 80061d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080062a9 	.word	0x080062a9
 80061d4:	080062a1 	.word	0x080062a1
 80061d8:	080062a1 	.word	0x080062a1
 80061dc:	080062a1 	.word	0x080062a1
 80061e0:	080062a1 	.word	0x080062a1
 80061e4:	080062a1 	.word	0x080062a1
 80061e8:	080062a1 	.word	0x080062a1
 80061ec:	080062a1 	.word	0x080062a1
 80061f0:	08006275 	.word	0x08006275
 80061f4:	080062a1 	.word	0x080062a1
 80061f8:	080062a1 	.word	0x080062a1
 80061fc:	080062a1 	.word	0x080062a1
 8006200:	080062a1 	.word	0x080062a1
 8006204:	080062a1 	.word	0x080062a1
 8006208:	080062a1 	.word	0x080062a1
 800620c:	080062a1 	.word	0x080062a1
 8006210:	0800628b 	.word	0x0800628b
 8006214:	080062a1 	.word	0x080062a1
 8006218:	080062a1 	.word	0x080062a1
 800621c:	080062a1 	.word	0x080062a1
 8006220:	080062a1 	.word	0x080062a1
 8006224:	080062a1 	.word	0x080062a1
 8006228:	080062a1 	.word	0x080062a1
 800622c:	080062a1 	.word	0x080062a1
 8006230:	080062a9 	.word	0x080062a9
 8006234:	080062a1 	.word	0x080062a1
 8006238:	080062a1 	.word	0x080062a1
 800623c:	080062a1 	.word	0x080062a1
 8006240:	080062a1 	.word	0x080062a1
 8006244:	080062a1 	.word	0x080062a1
 8006248:	080062a1 	.word	0x080062a1
 800624c:	080062a1 	.word	0x080062a1
 8006250:	080062a9 	.word	0x080062a9
 8006254:	080062a1 	.word	0x080062a1
 8006258:	080062a1 	.word	0x080062a1
 800625c:	080062a1 	.word	0x080062a1
 8006260:	080062a1 	.word	0x080062a1
 8006264:	080062a1 	.word	0x080062a1
 8006268:	080062a1 	.word	0x080062a1
 800626c:	080062a1 	.word	0x080062a1
 8006270:	080062a9 	.word	0x080062a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006278:	3308      	adds	r3, #8
 800627a:	2101      	movs	r1, #1
 800627c:	4618      	mov	r0, r3
 800627e:	f001 fe95 	bl	8007fac <RCCEx_PLL2_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006288:	e00f      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628e:	3328      	adds	r3, #40	@ 0x28
 8006290:	2101      	movs	r1, #1
 8006292:	4618      	mov	r0, r3
 8006294:	f001 ff3c 	bl	8008110 <RCCEx_PLL3_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800629e:	e004      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062a6:	e000      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80062a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062b2:	4bbf      	ldr	r3, [pc, #764]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80062ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062c0:	4abb      	ldr	r2, [pc, #748]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062c2:	430b      	orrs	r3, r1
 80062c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80062c6:	e003      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f002 0302 	and.w	r3, r2, #2
 80062dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062e0:	2300      	movs	r3, #0
 80062e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80062ea:	460b      	mov	r3, r1
 80062ec:	4313      	orrs	r3, r2
 80062ee:	d041      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062f6:	2b05      	cmp	r3, #5
 80062f8:	d824      	bhi.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80062fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	0800634d 	.word	0x0800634d
 8006304:	08006319 	.word	0x08006319
 8006308:	0800632f 	.word	0x0800632f
 800630c:	0800634d 	.word	0x0800634d
 8006310:	0800634d 	.word	0x0800634d
 8006314:	0800634d 	.word	0x0800634d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631c:	3308      	adds	r3, #8
 800631e:	2101      	movs	r1, #1
 8006320:	4618      	mov	r0, r3
 8006322:	f001 fe43 	bl	8007fac <RCCEx_PLL2_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800632c:	e00f      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006332:	3328      	adds	r3, #40	@ 0x28
 8006334:	2101      	movs	r1, #1
 8006336:	4618      	mov	r0, r3
 8006338:	f001 feea 	bl	8008110 <RCCEx_PLL3_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006342:	e004      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800634a:	e000      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800634c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006356:	4b96      	ldr	r3, [pc, #600]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635a:	f023 0107 	bic.w	r1, r3, #7
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006364:	4a92      	ldr	r2, [pc, #584]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006366:	430b      	orrs	r3, r1
 8006368:	6553      	str	r3, [r2, #84]	@ 0x54
 800636a:	e003      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006370:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f002 0304 	and.w	r3, r2, #4
 8006380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006384:	2300      	movs	r3, #0
 8006386:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800638a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800638e:	460b      	mov	r3, r1
 8006390:	4313      	orrs	r3, r2
 8006392:	d044      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800639c:	2b05      	cmp	r3, #5
 800639e:	d825      	bhi.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80063a0:	a201      	add	r2, pc, #4	@ (adr r2, 80063a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	080063f5 	.word	0x080063f5
 80063ac:	080063c1 	.word	0x080063c1
 80063b0:	080063d7 	.word	0x080063d7
 80063b4:	080063f5 	.word	0x080063f5
 80063b8:	080063f5 	.word	0x080063f5
 80063bc:	080063f5 	.word	0x080063f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c4:	3308      	adds	r3, #8
 80063c6:	2101      	movs	r1, #1
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 fdef 	bl	8007fac <RCCEx_PLL2_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063d4:	e00f      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063da:	3328      	adds	r3, #40	@ 0x28
 80063dc:	2101      	movs	r1, #1
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 fe96 	bl	8008110 <RCCEx_PLL3_Config>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063ea:	e004      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063f2:	e000      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80063f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063fe:	4b6c      	ldr	r3, [pc, #432]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006402:	f023 0107 	bic.w	r1, r3, #7
 8006406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800640e:	4a68      	ldr	r2, [pc, #416]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006410:	430b      	orrs	r3, r1
 8006412:	6593      	str	r3, [r2, #88]	@ 0x58
 8006414:	e003      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800641a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f002 0320 	and.w	r3, r2, #32
 800642a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800642e:	2300      	movs	r3, #0
 8006430:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006434:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006438:	460b      	mov	r3, r1
 800643a:	4313      	orrs	r3, r2
 800643c:	d055      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800643e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800644a:	d033      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800644c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006450:	d82c      	bhi.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006456:	d02f      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800645c:	d826      	bhi.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800645e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006462:	d02b      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006464:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006468:	d820      	bhi.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800646a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800646e:	d012      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006474:	d81a      	bhi.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d022      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800647a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800647e:	d115      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006484:	3308      	adds	r3, #8
 8006486:	2100      	movs	r1, #0
 8006488:	4618      	mov	r0, r3
 800648a:	f001 fd8f 	bl	8007fac <RCCEx_PLL2_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006494:	e015      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649a:	3328      	adds	r3, #40	@ 0x28
 800649c:	2102      	movs	r1, #2
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 fe36 	bl	8008110 <RCCEx_PLL3_Config>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064aa:	e00a      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064b2:	e006      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064b4:	bf00      	nop
 80064b6:	e004      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064b8:	bf00      	nop
 80064ba:	e002      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064bc:	bf00      	nop
 80064be:	e000      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10b      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064ca:	4b39      	ldr	r3, [pc, #228]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064da:	4a35      	ldr	r2, [pc, #212]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064dc:	430b      	orrs	r3, r1
 80064de:	6553      	str	r3, [r2, #84]	@ 0x54
 80064e0:	e003      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80064f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064fa:	2300      	movs	r3, #0
 80064fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006500:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006504:	460b      	mov	r3, r1
 8006506:	4313      	orrs	r3, r2
 8006508:	d058      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800650a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006512:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006516:	d033      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006518:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800651c:	d82c      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006522:	d02f      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006528:	d826      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800652a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800652e:	d02b      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006530:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006534:	d820      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006536:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800653a:	d012      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800653c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006540:	d81a      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d022      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800654a:	d115      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006550:	3308      	adds	r3, #8
 8006552:	2100      	movs	r1, #0
 8006554:	4618      	mov	r0, r3
 8006556:	f001 fd29 	bl	8007fac <RCCEx_PLL2_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006560:	e015      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006566:	3328      	adds	r3, #40	@ 0x28
 8006568:	2102      	movs	r1, #2
 800656a:	4618      	mov	r0, r3
 800656c:	f001 fdd0 	bl	8008110 <RCCEx_PLL3_Config>
 8006570:	4603      	mov	r3, r0
 8006572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006576:	e00a      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800657e:	e006      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006580:	bf00      	nop
 8006582:	e004      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006584:	bf00      	nop
 8006586:	e002      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006588:	bf00      	nop
 800658a:	e000      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800658c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10e      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006596:	4b06      	ldr	r3, [pc, #24]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065a6:	4a02      	ldr	r2, [pc, #8]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065a8:	430b      	orrs	r3, r1
 80065aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80065ac:	e006      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80065ae:	bf00      	nop
 80065b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80065c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065cc:	2300      	movs	r3, #0
 80065ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80065d6:	460b      	mov	r3, r1
 80065d8:	4313      	orrs	r3, r2
 80065da:	d055      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065e8:	d033      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80065ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065ee:	d82c      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065f4:	d02f      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80065f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065fa:	d826      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006600:	d02b      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006602:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006606:	d820      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800660c:	d012      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800660e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006612:	d81a      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d022      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800661c:	d115      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006622:	3308      	adds	r3, #8
 8006624:	2100      	movs	r1, #0
 8006626:	4618      	mov	r0, r3
 8006628:	f001 fcc0 	bl	8007fac <RCCEx_PLL2_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006632:	e015      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006638:	3328      	adds	r3, #40	@ 0x28
 800663a:	2102      	movs	r1, #2
 800663c:	4618      	mov	r0, r3
 800663e:	f001 fd67 	bl	8008110 <RCCEx_PLL3_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006648:	e00a      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006650:	e006      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006652:	bf00      	nop
 8006654:	e004      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006656:	bf00      	nop
 8006658:	e002      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800665a:	bf00      	nop
 800665c:	e000      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800665e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006668:	4ba1      	ldr	r3, [pc, #644]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800666a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800666c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006674:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006678:	4a9d      	ldr	r2, [pc, #628]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800667a:	430b      	orrs	r3, r1
 800667c:	6593      	str	r3, [r2, #88]	@ 0x58
 800667e:	e003      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f002 0308 	and.w	r3, r2, #8
 8006694:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800669e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d01e      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066b4:	d10c      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ba:	3328      	adds	r3, #40	@ 0x28
 80066bc:	2102      	movs	r1, #2
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 fd26 	bl	8008110 <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066d0:	4b87      	ldr	r3, [pc, #540]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066e0:	4a83      	ldr	r2, [pc, #524]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066e2:	430b      	orrs	r3, r1
 80066e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f002 0310 	and.w	r3, r2, #16
 80066f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066f6:	2300      	movs	r3, #0
 80066f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006700:	460b      	mov	r3, r1
 8006702:	4313      	orrs	r3, r2
 8006704:	d01e      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800670e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006712:	d10c      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006718:	3328      	adds	r3, #40	@ 0x28
 800671a:	2102      	movs	r1, #2
 800671c:	4618      	mov	r0, r3
 800671e:	f001 fcf7 	bl	8008110 <RCCEx_PLL3_Config>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800672e:	4b70      	ldr	r3, [pc, #448]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006732:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800673e:	4a6c      	ldr	r2, [pc, #432]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006740:	430b      	orrs	r3, r1
 8006742:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006750:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006754:	2300      	movs	r3, #0
 8006756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800675a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800675e:	460b      	mov	r3, r1
 8006760:	4313      	orrs	r3, r2
 8006762:	d03e      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006768:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800676c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006770:	d022      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006772:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006776:	d81b      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006780:	d00b      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006782:	e015      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006788:	3308      	adds	r3, #8
 800678a:	2100      	movs	r1, #0
 800678c:	4618      	mov	r0, r3
 800678e:	f001 fc0d 	bl	8007fac <RCCEx_PLL2_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006798:	e00f      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679e:	3328      	adds	r3, #40	@ 0x28
 80067a0:	2102      	movs	r1, #2
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 fcb4 	bl	8008110 <RCCEx_PLL3_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067ae:	e004      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067b6:	e000      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80067b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10b      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067c2:	4b4b      	ldr	r3, [pc, #300]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80067ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067d2:	4a47      	ldr	r2, [pc, #284]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067d4:	430b      	orrs	r3, r1
 80067d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80067d8:	e003      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80067ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067f0:	2300      	movs	r3, #0
 80067f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80067f8:	460b      	mov	r3, r1
 80067fa:	4313      	orrs	r3, r2
 80067fc:	d03b      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006806:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800680a:	d01f      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800680c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006810:	d818      	bhi.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006816:	d003      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006818:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800681c:	d007      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800681e:	e011      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006820:	4b33      	ldr	r3, [pc, #204]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006824:	4a32      	ldr	r2, [pc, #200]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800682a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800682c:	e00f      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800682e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006832:	3328      	adds	r3, #40	@ 0x28
 8006834:	2101      	movs	r1, #1
 8006836:	4618      	mov	r0, r3
 8006838:	f001 fc6a 	bl	8008110 <RCCEx_PLL3_Config>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006842:	e004      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800684a:	e000      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800684c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800684e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10b      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006856:	4b26      	ldr	r3, [pc, #152]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006866:	4a22      	ldr	r2, [pc, #136]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006868:	430b      	orrs	r3, r1
 800686a:	6553      	str	r3, [r2, #84]	@ 0x54
 800686c:	e003      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006882:	673b      	str	r3, [r7, #112]	@ 0x70
 8006884:	2300      	movs	r3, #0
 8006886:	677b      	str	r3, [r7, #116]	@ 0x74
 8006888:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800688c:	460b      	mov	r3, r1
 800688e:	4313      	orrs	r3, r2
 8006890:	d034      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800689c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a0:	d007      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80068a2:	e011      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a4:	4b12      	ldr	r3, [pc, #72]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a8:	4a11      	ldr	r2, [pc, #68]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068b0:	e00e      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b6:	3308      	adds	r3, #8
 80068b8:	2102      	movs	r1, #2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 fb76 	bl	8007fac <RCCEx_PLL2_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068c6:	e003      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10d      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068d8:	4b05      	ldr	r3, [pc, #20]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e6:	4a02      	ldr	r2, [pc, #8]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068e8:	430b      	orrs	r3, r1
 80068ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068ec:	e006      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80068ee:	bf00      	nop
 80068f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800690a:	2300      	movs	r3, #0
 800690c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800690e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d00c      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691c:	3328      	adds	r3, #40	@ 0x28
 800691e:	2102      	movs	r1, #2
 8006920:	4618      	mov	r0, r3
 8006922:	f001 fbf5 	bl	8008110 <RCCEx_PLL3_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800693e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006940:	2300      	movs	r3, #0
 8006942:	667b      	str	r3, [r7, #100]	@ 0x64
 8006944:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006948:	460b      	mov	r3, r1
 800694a:	4313      	orrs	r3, r2
 800694c:	d038      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800695a:	d018      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800695c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006960:	d811      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006962:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006966:	d014      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800696c:	d80b      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d011      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006976:	d106      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006978:	4bc3      	ldr	r3, [pc, #780]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	4ac2      	ldr	r2, [pc, #776]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800697e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006984:	e008      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800698c:	e004      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800698e:	bf00      	nop
 8006990:	e002      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006992:	bf00      	nop
 8006994:	e000      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10b      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069a0:	4bb9      	ldr	r3, [pc, #740]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069b0:	4ab5      	ldr	r2, [pc, #724]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069b2:	430b      	orrs	r3, r1
 80069b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80069b6:	e003      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80069cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069ce:	2300      	movs	r3, #0
 80069d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80069d6:	460b      	mov	r3, r1
 80069d8:	4313      	orrs	r3, r2
 80069da:	d009      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069dc:	4baa      	ldr	r3, [pc, #680]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80069e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ea:	4aa7      	ldr	r2, [pc, #668]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069ec:	430b      	orrs	r3, r1
 80069ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80069f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80069fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80069fe:	2300      	movs	r3, #0
 8006a00:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006a06:	460b      	mov	r3, r1
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	d00a      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006a0c:	4b9e      	ldr	r3, [pc, #632]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a1c:	4a9a      	ldr	r2, [pc, #616]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a30:	2300      	movs	r3, #0
 8006a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a34:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	d009      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a3e:	4b92      	ldr	r3, [pc, #584]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a42:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a4c:	4a8e      	ldr	r2, [pc, #568]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006a5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a60:	2300      	movs	r3, #0
 8006a62:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a64:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	d00e      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a6e:	4b86      	ldr	r3, [pc, #536]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	4a85      	ldr	r2, [pc, #532]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a78:	6113      	str	r3, [r2, #16]
 8006a7a:	4b83      	ldr	r3, [pc, #524]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a7c:	6919      	ldr	r1, [r3, #16]
 8006a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a86:	4a80      	ldr	r2, [pc, #512]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a88:	430b      	orrs	r3, r1
 8006a8a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006a98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	d009      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006aa8:	4b77      	ldr	r3, [pc, #476]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab6:	4a74      	ldr	r2, [pc, #464]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aca:	2300      	movs	r3, #0
 8006acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ace:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	d00a      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ad8:	4b6b      	ldr	r3, [pc, #428]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006adc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ae8:	4a67      	ldr	r2, [pc, #412]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aea:	430b      	orrs	r3, r1
 8006aec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	2100      	movs	r1, #0
 8006af8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006b04:	460b      	mov	r3, r1
 8006b06:	4313      	orrs	r3, r2
 8006b08:	d011      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0e:	3308      	adds	r3, #8
 8006b10:	2100      	movs	r1, #0
 8006b12:	4618      	mov	r0, r3
 8006b14:	f001 fa4a 	bl	8007fac <RCCEx_PLL2_Config>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	2100      	movs	r1, #0
 8006b38:	6239      	str	r1, [r7, #32]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b44:	460b      	mov	r3, r1
 8006b46:	4313      	orrs	r3, r2
 8006b48:	d011      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4e:	3308      	adds	r3, #8
 8006b50:	2101      	movs	r1, #1
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 fa2a 	bl	8007fac <RCCEx_PLL2_Config>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	2100      	movs	r1, #0
 8006b78:	61b9      	str	r1, [r7, #24]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b84:	460b      	mov	r3, r1
 8006b86:	4313      	orrs	r3, r2
 8006b88:	d011      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8e:	3308      	adds	r3, #8
 8006b90:	2102      	movs	r1, #2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 fa0a 	bl	8007fac <RCCEx_PLL2_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	6139      	str	r1, [r7, #16]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	d011      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bce:	3328      	adds	r3, #40	@ 0x28
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 fa9c 	bl	8008110 <RCCEx_PLL3_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	f003 0310 	and.w	r3, r3, #16
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c04:	460b      	mov	r3, r1
 8006c06:	4313      	orrs	r3, r2
 8006c08:	d011      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0e:	3328      	adds	r3, #40	@ 0x28
 8006c10:	2101      	movs	r1, #1
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 fa7c 	bl	8008110 <RCCEx_PLL3_Config>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	2100      	movs	r1, #0
 8006c38:	6039      	str	r1, [r7, #0]
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	607b      	str	r3, [r7, #4]
 8006c40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c44:	460b      	mov	r3, r1
 8006c46:	4313      	orrs	r3, r2
 8006c48:	d011      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4e:	3328      	adds	r3, #40	@ 0x28
 8006c50:	2102      	movs	r1, #2
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 fa5c 	bl	8008110 <RCCEx_PLL3_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006c6e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e000      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006c82:	46bd      	mov	sp, r7
 8006c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c88:	58024400 	.word	0x58024400

08006c8c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b090      	sub	sp, #64	@ 0x40
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c9a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006c9e:	430b      	orrs	r3, r1
 8006ca0:	f040 8094 	bne.w	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006ca4:	4b9e      	ldr	r3, [pc, #632]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	f200 8087 	bhi.w	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006cd1 	.word	0x08006cd1
 8006cc0:	08006cf9 	.word	0x08006cf9
 8006cc4:	08006d21 	.word	0x08006d21
 8006cc8:	08006dbd 	.word	0x08006dbd
 8006ccc:	08006d49 	.word	0x08006d49
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cd0:	4b93      	ldr	r3, [pc, #588]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cdc:	d108      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 f810 	bl	8007d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cec:	f000 bd45 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf4:	f000 bd41 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cf8:	4b89      	ldr	r3, [pc, #548]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d04:	d108      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d06:	f107 0318 	add.w	r3, r7, #24
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fd54 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d14:	f000 bd31 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d1c:	f000 bd2d 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d20:	4b7f      	ldr	r3, [pc, #508]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d2c:	d108      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d2e:	f107 030c 	add.w	r3, r7, #12
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fe94 	bl	8007a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d3c:	f000 bd1d 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d44:	f000 bd19 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d48:	4b75      	ldr	r3, [pc, #468]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d50:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d52:	4b73      	ldr	r3, [pc, #460]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d10c      	bne.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d109      	bne.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d64:	4b6e      	ldr	r3, [pc, #440]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	08db      	lsrs	r3, r3, #3
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	4a6d      	ldr	r2, [pc, #436]	@ (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d70:	fa22 f303 	lsr.w	r3, r2, r3
 8006d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d76:	e01f      	b.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d78:	4b69      	ldr	r3, [pc, #420]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d84:	d106      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d8c:	d102      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d8e:	4b66      	ldr	r3, [pc, #408]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d92:	e011      	b.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d94:	4b62      	ldr	r3, [pc, #392]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006da0:	d106      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006da8:	d102      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006daa:	4b60      	ldr	r3, [pc, #384]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dae:	e003      	b.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006db4:	f000 bce1 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006db8:	f000 bcdf 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc0:	f000 bcdb 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc8:	f000 bcd7 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006dd4:	430b      	orrs	r3, r1
 8006dd6:	f040 80ad 	bne.w	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006dda:	4b51      	ldr	r3, [pc, #324]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dde:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006de2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dea:	d056      	beq.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df2:	f200 8090 	bhi.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dfa:	f000 8088 	beq.w	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e02:	f200 8088 	bhi.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	2b80      	cmp	r3, #128	@ 0x80
 8006e0a:	d032      	beq.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	2b80      	cmp	r3, #128	@ 0x80
 8006e10:	f200 8081 	bhi.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	2b40      	cmp	r3, #64	@ 0x40
 8006e1e:	d014      	beq.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006e20:	e079      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e22:	4b3f      	ldr	r3, [pc, #252]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e2e:	d108      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 ff67 	bl	8007d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e3e:	f000 bc9c 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e46:	f000 bc98 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e4a:	4b35      	ldr	r3, [pc, #212]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e56:	d108      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e58:	f107 0318 	add.w	r3, r7, #24
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fcab 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e66:	f000 bc88 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e6e:	f000 bc84 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e72:	4b2b      	ldr	r3, [pc, #172]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e7e:	d108      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e80:	f107 030c 	add.w	r3, r7, #12
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fdeb 	bl	8007a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e8e:	f000 bc74 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e96:	f000 bc70 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e9a:	4b21      	ldr	r3, [pc, #132]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ea2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d10c      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	08db      	lsrs	r3, r3, #3
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	4a18      	ldr	r2, [pc, #96]	@ (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ec8:	e01f      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eca:	4b15      	ldr	r3, [pc, #84]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ed6:	d106      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ede:	d102      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ee0:	4b11      	ldr	r3, [pc, #68]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ee4:	e011      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ef2:	d106      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006efa:	d102      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006efc:	4b0b      	ldr	r3, [pc, #44]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f00:	e003      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f06:	f000 bc38 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f0a:	f000 bc36 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f0e:	4b08      	ldr	r3, [pc, #32]	@ (8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f12:	f000 bc32 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1a:	f000 bc2e 	b.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f1e:	bf00      	nop
 8006f20:	58024400 	.word	0x58024400
 8006f24:	03d09000 	.word	0x03d09000
 8006f28:	003d0900 	.word	0x003d0900
 8006f2c:	017d7840 	.word	0x017d7840
 8006f30:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f38:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	f040 809c 	bne.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006f42:	4b9e      	ldr	r3, [pc, #632]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f46:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006f4a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f52:	d054      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f5a:	f200 808b 	bhi.w	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f64:	f000 8083 	beq.w	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f6e:	f200 8081 	bhi.w	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f78:	d02f      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f80:	d878      	bhi.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f8e:	d012      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006f90:	e070      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f92:	4b8a      	ldr	r3, [pc, #552]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f9e:	d107      	bne.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 feaf 	bl	8007d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fae:	e3e4      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fb4:	e3e1      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fb6:	4b81      	ldr	r3, [pc, #516]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fc2:	d107      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fc4:	f107 0318 	add.w	r3, r7, #24
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fbf5 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fd2:	e3d2      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fd8:	e3cf      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fda:	4b78      	ldr	r3, [pc, #480]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fe6:	d107      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fe8:	f107 030c 	add.w	r3, r7, #12
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fd37 	bl	8007a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ff6:	e3c0      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ffc:	e3bd      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ffe:	4b6f      	ldr	r3, [pc, #444]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007002:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007008:	4b6c      	ldr	r3, [pc, #432]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b04      	cmp	r3, #4
 8007012:	d10c      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800701a:	4b68      	ldr	r3, [pc, #416]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	08db      	lsrs	r3, r3, #3
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	4a66      	ldr	r2, [pc, #408]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007026:	fa22 f303 	lsr.w	r3, r2, r3
 800702a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800702c:	e01e      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800702e:	4b63      	ldr	r3, [pc, #396]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800703a:	d106      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800703c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007042:	d102      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007044:	4b5f      	ldr	r3, [pc, #380]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007048:	e010      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800704a:	4b5c      	ldr	r3, [pc, #368]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007056:	d106      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800705e:	d102      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007060:	4b59      	ldr	r3, [pc, #356]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007064:	e002      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800706a:	e386      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800706c:	e385      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800706e:	4b57      	ldr	r3, [pc, #348]	@ (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007072:	e382      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007078:	e37f      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800707a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800707e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007082:	430b      	orrs	r3, r1
 8007084:	f040 80a7 	bne.w	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007088:	4b4c      	ldr	r3, [pc, #304]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800708a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007090:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007098:	d055      	beq.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070a0:	f200 8096 	bhi.w	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80070a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070aa:	f000 8084 	beq.w	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070b4:	f200 808c 	bhi.w	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80070b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070be:	d030      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070c6:	f200 8083 	bhi.w	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d004      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070d6:	d012      	beq.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80070d8:	e07a      	b.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070da:	4b38      	ldr	r3, [pc, #224]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070e6:	d107      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fe0b 	bl	8007d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f6:	e340      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070fc:	e33d      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070fe:	4b2f      	ldr	r3, [pc, #188]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800710a:	d107      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800710c:	f107 0318 	add.w	r3, r7, #24
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fb51 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800711a:	e32e      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007120:	e32b      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007122:	4b26      	ldr	r3, [pc, #152]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800712a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800712e:	d107      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fc93 	bl	8007a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800713e:	e31c      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007144:	e319      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007146:	4b1d      	ldr	r3, [pc, #116]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800714a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800714e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007150:	4b1a      	ldr	r3, [pc, #104]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b04      	cmp	r3, #4
 800715a:	d10c      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800715c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007162:	4b16      	ldr	r3, [pc, #88]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	08db      	lsrs	r3, r3, #3
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	4a14      	ldr	r2, [pc, #80]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800716e:	fa22 f303 	lsr.w	r3, r2, r3
 8007172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007174:	e01e      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007176:	4b11      	ldr	r3, [pc, #68]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800717e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007182:	d106      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007186:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800718a:	d102      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800718c:	4b0d      	ldr	r3, [pc, #52]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800718e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007190:	e010      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007192:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800719a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800719e:	d106      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80071a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071a6:	d102      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071a8:	4b07      	ldr	r3, [pc, #28]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80071aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071ac:	e002      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80071b2:	e2e2      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071b4:	e2e1      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071b6:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80071b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ba:	e2de      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071bc:	58024400 	.word	0x58024400
 80071c0:	03d09000 	.word	0x03d09000
 80071c4:	003d0900 	.word	0x003d0900
 80071c8:	017d7840 	.word	0x017d7840
 80071cc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d4:	e2d1      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80071d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071da:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80071de:	430b      	orrs	r3, r1
 80071e0:	f040 809c 	bne.w	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80071e4:	4b93      	ldr	r3, [pc, #588]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80071ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80071ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071f4:	d054      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80071f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071fc:	f200 808b 	bhi.w	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007202:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007206:	f000 8083 	beq.w	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800720a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007210:	f200 8081 	bhi.w	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800721a:	d02f      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800721c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007222:	d878      	bhi.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007226:	2b00      	cmp	r3, #0
 8007228:	d004      	beq.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800722a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007230:	d012      	beq.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007232:	e070      	b.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007234:	4b7f      	ldr	r3, [pc, #508]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800723c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007240:	d107      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fd5e 	bl	8007d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007250:	e293      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007256:	e290      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007258:	4b76      	ldr	r3, [pc, #472]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007264:	d107      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007266:	f107 0318 	add.w	r3, r7, #24
 800726a:	4618      	mov	r0, r3
 800726c:	f000 faa4 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007274:	e281      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800727a:	e27e      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800727c:	4b6d      	ldr	r3, [pc, #436]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007288:	d107      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800728a:	f107 030c 	add.w	r3, r7, #12
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fbe6 	bl	8007a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007298:	e26f      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800729e:	e26c      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072a0:	4b64      	ldr	r3, [pc, #400]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072a8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072aa:	4b62      	ldr	r3, [pc, #392]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d10c      	bne.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80072b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d109      	bne.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072bc:	4b5d      	ldr	r3, [pc, #372]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	08db      	lsrs	r3, r3, #3
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	4a5c      	ldr	r2, [pc, #368]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80072c8:	fa22 f303 	lsr.w	r3, r2, r3
 80072cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ce:	e01e      	b.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072d0:	4b58      	ldr	r3, [pc, #352]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072dc:	d106      	bne.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80072de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e4:	d102      	bne.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072e6:	4b55      	ldr	r3, [pc, #340]	@ (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80072e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ea:	e010      	b.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072ec:	4b51      	ldr	r3, [pc, #324]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072f8:	d106      	bne.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80072fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007300:	d102      	bne.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007302:	4b4f      	ldr	r3, [pc, #316]	@ (8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007306:	e002      	b.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800730c:	e235      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800730e:	e234      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007310:	4b4c      	ldr	r3, [pc, #304]	@ (8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007314:	e231      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800731a:	e22e      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800731c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007320:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007324:	430b      	orrs	r3, r1
 8007326:	f040 808f 	bne.w	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800732a:	4b42      	ldr	r3, [pc, #264]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800732c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007332:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800733a:	d06b      	beq.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800733c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007342:	d874      	bhi.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007346:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800734a:	d056      	beq.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800734c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007352:	d86c      	bhi.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007356:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800735a:	d03b      	beq.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800735c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007362:	d864      	bhi.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800736a:	d021      	beq.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007372:	d85c      	bhi.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007376:	2b00      	cmp	r3, #0
 8007378:	d004      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800737a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007380:	d004      	beq.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007382:	e054      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007384:	f7fe fa4c 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 8007388:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800738a:	e1f6      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800738c:	4b29      	ldr	r3, [pc, #164]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007398:	d107      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800739a:	f107 0318 	add.w	r3, r7, #24
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fa0a 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073a8:	e1e7      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ae:	e1e4      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073b0:	4b20      	ldr	r3, [pc, #128]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073bc:	d107      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073be:	f107 030c 	add.w	r3, r7, #12
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fb4c 	bl	8007a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073cc:	e1d5      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d2:	e1d2      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073d4:	4b17      	ldr	r3, [pc, #92]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d109      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073e0:	4b14      	ldr	r3, [pc, #80]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	08db      	lsrs	r3, r3, #3
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	4a13      	ldr	r2, [pc, #76]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80073ec:	fa22 f303 	lsr.w	r3, r2, r3
 80073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073f2:	e1c2      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f8:	e1bf      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80073fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007406:	d102      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007408:	4b0c      	ldr	r3, [pc, #48]	@ (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800740a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800740c:	e1b5      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007412:	e1b2      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007414:	4b07      	ldr	r3, [pc, #28]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800741c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007420:	d102      	bne.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007422:	4b07      	ldr	r3, [pc, #28]	@ (8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007426:	e1a8      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800742c:	e1a5      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007432:	e1a2      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007434:	58024400 	.word	0x58024400
 8007438:	03d09000 	.word	0x03d09000
 800743c:	003d0900 	.word	0x003d0900
 8007440:	017d7840 	.word	0x017d7840
 8007444:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007450:	430b      	orrs	r3, r1
 8007452:	d173      	bne.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007454:	4b9c      	ldr	r3, [pc, #624]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800745c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800745e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007464:	d02f      	beq.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800746c:	d863      	bhi.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800746e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800747a:	d012      	beq.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800747c:	e05b      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800747e:	4b92      	ldr	r3, [pc, #584]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800748a:	d107      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800748c:	f107 0318 	add.w	r3, r7, #24
 8007490:	4618      	mov	r0, r3
 8007492:	f000 f991 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800749a:	e16e      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074a0:	e16b      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074a2:	4b89      	ldr	r3, [pc, #548]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074ae:	d107      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074b0:	f107 030c 	add.w	r3, r7, #12
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fad3 	bl	8007a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074be:	e15c      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c4:	e159      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074c6:	4b80      	ldr	r3, [pc, #512]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074d0:	4b7d      	ldr	r3, [pc, #500]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d10c      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80074dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e2:	4b79      	ldr	r3, [pc, #484]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	08db      	lsrs	r3, r3, #3
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	4a77      	ldr	r2, [pc, #476]	@ (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80074ee:	fa22 f303 	lsr.w	r3, r2, r3
 80074f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074f4:	e01e      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074f6:	4b74      	ldr	r3, [pc, #464]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007502:	d106      	bne.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800750a:	d102      	bne.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800750c:	4b70      	ldr	r3, [pc, #448]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800750e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007510:	e010      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007512:	4b6d      	ldr	r3, [pc, #436]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800751a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800751e:	d106      	bne.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007522:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007526:	d102      	bne.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007528:	4b6a      	ldr	r3, [pc, #424]	@ (80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800752a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800752c:	e002      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800752e:	2300      	movs	r3, #0
 8007530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007532:	e122      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007534:	e121      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800753a:	e11e      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800753c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007540:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007544:	430b      	orrs	r3, r1
 8007546:	d133      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007548:	4b5f      	ldr	r3, [pc, #380]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800754a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800754c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007550:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007554:	2b00      	cmp	r3, #0
 8007556:	d004      	beq.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800755e:	d012      	beq.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007560:	e023      	b.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007562:	4b59      	ldr	r3, [pc, #356]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800756a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800756e:	d107      	bne.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fbc7 	bl	8007d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800757e:	e0fc      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007584:	e0f9      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007586:	4b50      	ldr	r3, [pc, #320]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800758e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007592:	d107      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007594:	f107 0318 	add.w	r3, r7, #24
 8007598:	4618      	mov	r0, r3
 800759a:	f000 f90d 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075a2:	e0ea      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a8:	e0e7      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ae:	e0e4      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80075b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80075b8:	430b      	orrs	r3, r1
 80075ba:	f040 808d 	bne.w	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80075be:	4b42      	ldr	r3, [pc, #264]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80075c6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80075c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075ce:	d06b      	beq.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80075d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075d6:	d874      	bhi.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80075d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075de:	d056      	beq.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80075e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075e6:	d86c      	bhi.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80075e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075ee:	d03b      	beq.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80075f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075f6:	d864      	bhi.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80075f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075fe:	d021      	beq.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007606:	d85c      	bhi.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760a:	2b00      	cmp	r3, #0
 800760c:	d004      	beq.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800760e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007614:	d004      	beq.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007616:	e054      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007618:	f000 f8b8 	bl	800778c <HAL_RCCEx_GetD3PCLK1Freq>
 800761c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800761e:	e0ac      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007620:	4b29      	ldr	r3, [pc, #164]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007628:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800762c:	d107      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800762e:	f107 0318 	add.w	r3, r7, #24
 8007632:	4618      	mov	r0, r3
 8007634:	f000 f8c0 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800763c:	e09d      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007642:	e09a      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007644:	4b20      	ldr	r3, [pc, #128]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800764c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007650:	d107      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007652:	f107 030c 	add.w	r3, r7, #12
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fa02 	bl	8007a60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007660:	e08b      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007666:	e088      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007668:	4b17      	ldr	r3, [pc, #92]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b04      	cmp	r3, #4
 8007672:	d109      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007674:	4b14      	ldr	r3, [pc, #80]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	08db      	lsrs	r3, r3, #3
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	4a13      	ldr	r2, [pc, #76]	@ (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007680:	fa22 f303 	lsr.w	r3, r2, r3
 8007684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007686:	e078      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768c:	e075      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800768e:	4b0e      	ldr	r3, [pc, #56]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800769a:	d102      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800769c:	4b0c      	ldr	r3, [pc, #48]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076a0:	e06b      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a6:	e068      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076a8:	4b07      	ldr	r3, [pc, #28]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076b4:	d102      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80076b6:	4b07      	ldr	r3, [pc, #28]	@ (80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80076b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076ba:	e05e      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c0:	e05b      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c6:	e058      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076c8:	58024400 	.word	0x58024400
 80076cc:	03d09000 	.word	0x03d09000
 80076d0:	003d0900 	.word	0x003d0900
 80076d4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80076d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076dc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80076e0:	430b      	orrs	r3, r1
 80076e2:	d148      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80076e4:	4b27      	ldr	r3, [pc, #156]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80076e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f4:	d02a      	beq.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80076f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076fc:	d838      	bhi.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80076fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800770a:	d00d      	beq.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800770c:	e030      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800770e:	4b1d      	ldr	r3, [pc, #116]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800771a:	d102      	bne.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800771c:	4b1a      	ldr	r3, [pc, #104]	@ (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800771e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007720:	e02b      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007722:	2300      	movs	r3, #0
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007726:	e028      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007728:	4b16      	ldr	r3, [pc, #88]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007730:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007734:	d107      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fae4 	bl	8007d08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007744:	e019      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800774a:	e016      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800774c:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007758:	d107      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800775a:	f107 0318 	add.w	r3, r7, #24
 800775e:	4618      	mov	r0, r3
 8007760:	f000 f82a 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007768:	e007      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800776e:	e004      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007774:	e001      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800777a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800777c:	4618      	mov	r0, r3
 800777e:	3740      	adds	r7, #64	@ 0x40
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	58024400 	.word	0x58024400
 8007788:	017d7840 	.word	0x017d7840

0800778c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007790:	f7fe f816 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 8007794:	4602      	mov	r2, r0
 8007796:	4b06      	ldr	r3, [pc, #24]	@ (80077b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	091b      	lsrs	r3, r3, #4
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	4904      	ldr	r1, [pc, #16]	@ (80077b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80077a2:	5ccb      	ldrb	r3, [r1, r3]
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	58024400 	.word	0x58024400
 80077b4:	080109cc 	.word	0x080109cc

080077b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b089      	sub	sp, #36	@ 0x24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077c0:	4ba1      	ldr	r3, [pc, #644]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c4:	f003 0303 	and.w	r3, r3, #3
 80077c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80077ca:	4b9f      	ldr	r3, [pc, #636]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ce:	0b1b      	lsrs	r3, r3, #12
 80077d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077d6:	4b9c      	ldr	r3, [pc, #624]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077da:	091b      	lsrs	r3, r3, #4
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80077e2:	4b99      	ldr	r3, [pc, #612]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e6:	08db      	lsrs	r3, r3, #3
 80077e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	fb02 f303 	mul.w	r3, r2, r3
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8111 	beq.w	8007a28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b02      	cmp	r3, #2
 800780a:	f000 8083 	beq.w	8007914 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b02      	cmp	r3, #2
 8007812:	f200 80a1 	bhi.w	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d056      	beq.n	80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007822:	e099      	b.n	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007824:	4b88      	ldr	r3, [pc, #544]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	d02d      	beq.n	800788c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007830:	4b85      	ldr	r3, [pc, #532]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	08db      	lsrs	r3, r3, #3
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	4a84      	ldr	r2, [pc, #528]	@ (8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800783c:	fa22 f303 	lsr.w	r3, r2, r3
 8007840:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	ee07 3a90 	vmov	s15, r3
 8007848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800785c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786a:	ed97 6a03 	vldr	s12, [r7, #12]
 800786e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800787e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007886:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800788a:	e087      	b.n	800799c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007896:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800789a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789e:	4b6a      	ldr	r3, [pc, #424]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ce:	e065      	b.n	800799c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e2:	4b59      	ldr	r3, [pc, #356]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007912:	e043      	b.n	800799c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007926:	4b48      	ldr	r3, [pc, #288]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	ed97 6a03 	vldr	s12, [r7, #12]
 800793a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007956:	e021      	b.n	800799c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007962:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800796a:	4b37      	ldr	r3, [pc, #220]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800796c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797a:	ed97 6a03 	vldr	s12, [r7, #12]
 800797e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800798a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800798e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800799a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800799c:	4b2a      	ldr	r3, [pc, #168]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800799e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a0:	0a5b      	lsrs	r3, r3, #9
 80079a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079c2:	ee17 2a90 	vmov	r2, s15
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80079ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ce:	0c1b      	lsrs	r3, r3, #16
 80079d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079d4:	ee07 3a90 	vmov	s15, r3
 80079d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80079e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079f0:	ee17 2a90 	vmov	r2, s15
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80079f8:	4b13      	ldr	r3, [pc, #76]	@ (8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fc:	0e1b      	lsrs	r3, r3, #24
 80079fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a1e:	ee17 2a90 	vmov	r2, s15
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a26:	e008      	b.n	8007a3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	609a      	str	r2, [r3, #8]
}
 8007a3a:	bf00      	nop
 8007a3c:	3724      	adds	r7, #36	@ 0x24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	58024400 	.word	0x58024400
 8007a4c:	03d09000 	.word	0x03d09000
 8007a50:	46000000 	.word	0x46000000
 8007a54:	4c742400 	.word	0x4c742400
 8007a58:	4a742400 	.word	0x4a742400
 8007a5c:	4bbebc20 	.word	0x4bbebc20

08007a60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b089      	sub	sp, #36	@ 0x24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a68:	4ba1      	ldr	r3, [pc, #644]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6c:	f003 0303 	and.w	r3, r3, #3
 8007a70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a72:	4b9f      	ldr	r3, [pc, #636]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a76:	0d1b      	lsrs	r3, r3, #20
 8007a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a7e:	4b9c      	ldr	r3, [pc, #624]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a8a:	4b99      	ldr	r3, [pc, #612]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a8e:	08db      	lsrs	r3, r3, #3
 8007a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	fb02 f303 	mul.w	r3, r2, r3
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 8111 	beq.w	8007cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	f000 8083 	beq.w	8007bbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	f200 80a1 	bhi.w	8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d056      	beq.n	8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007aca:	e099      	b.n	8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007acc:	4b88      	ldr	r3, [pc, #544]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d02d      	beq.n	8007b34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ad8:	4b85      	ldr	r3, [pc, #532]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	08db      	lsrs	r3, r3, #3
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	4a84      	ldr	r2, [pc, #528]	@ (8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	ee07 3a90 	vmov	s15, r3
 8007af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b02:	4b7b      	ldr	r3, [pc, #492]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b32:	e087      	b.n	8007c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b46:	4b6a      	ldr	r3, [pc, #424]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b76:	e065      	b.n	8007c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8a:	4b59      	ldr	r3, [pc, #356]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bba:	e043      	b.n	8007c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bce:	4b48      	ldr	r3, [pc, #288]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007be2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bfe:	e021      	b.n	8007c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c12:	4b37      	ldr	r3, [pc, #220]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c44:	4b2a      	ldr	r3, [pc, #168]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c48:	0a5b      	lsrs	r3, r3, #9
 8007c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c6a:	ee17 2a90 	vmov	r2, s15
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c72:	4b1f      	ldr	r3, [pc, #124]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c76:	0c1b      	lsrs	r3, r3, #16
 8007c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c98:	ee17 2a90 	vmov	r2, s15
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007ca0:	4b13      	ldr	r3, [pc, #76]	@ (8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca4:	0e1b      	lsrs	r3, r3, #24
 8007ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc6:	ee17 2a90 	vmov	r2, s15
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007cce:	e008      	b.n	8007ce2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	609a      	str	r2, [r3, #8]
}
 8007ce2:	bf00      	nop
 8007ce4:	3724      	adds	r7, #36	@ 0x24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	58024400 	.word	0x58024400
 8007cf4:	03d09000 	.word	0x03d09000
 8007cf8:	46000000 	.word	0x46000000
 8007cfc:	4c742400 	.word	0x4c742400
 8007d00:	4a742400 	.word	0x4a742400
 8007d04:	4bbebc20 	.word	0x4bbebc20

08007d08 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b089      	sub	sp, #36	@ 0x24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d10:	4ba0      	ldr	r3, [pc, #640]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d14:	f003 0303 	and.w	r3, r3, #3
 8007d18:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007d1a:	4b9e      	ldr	r3, [pc, #632]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1e:	091b      	lsrs	r3, r3, #4
 8007d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d24:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d26:	4b9b      	ldr	r3, [pc, #620]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007d30:	4b98      	ldr	r3, [pc, #608]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d34:	08db      	lsrs	r3, r3, #3
 8007d36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
 8007d40:	ee07 3a90 	vmov	s15, r3
 8007d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d48:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 8111 	beq.w	8007f76 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	f000 8083 	beq.w	8007e62 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	f200 80a1 	bhi.w	8007ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d056      	beq.n	8007e1e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007d70:	e099      	b.n	8007ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d72:	4b88      	ldr	r3, [pc, #544]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0320 	and.w	r3, r3, #32
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d02d      	beq.n	8007dda <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d7e:	4b85      	ldr	r3, [pc, #532]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	08db      	lsrs	r3, r3, #3
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	4a83      	ldr	r2, [pc, #524]	@ (8007f98 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	ee07 3a90 	vmov	s15, r3
 8007da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da8:	4b7a      	ldr	r3, [pc, #488]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db0:	ee07 3a90 	vmov	s15, r3
 8007db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dbc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007f9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007dd8:	e087      	b.n	8007eea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	ee07 3a90 	vmov	s15, r3
 8007de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dec:	4b69      	ldr	r3, [pc, #420]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df4:	ee07 3a90 	vmov	s15, r3
 8007df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e00:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007f9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e1c:	e065      	b.n	8007eea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	ee07 3a90 	vmov	s15, r3
 8007e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e28:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e30:	4b58      	ldr	r3, [pc, #352]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e44:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007f9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e60:	e043      	b.n	8007eea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	ee07 3a90 	vmov	s15, r3
 8007e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e74:	4b47      	ldr	r3, [pc, #284]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e84:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e88:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007f9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ea4:	e021      	b.n	8007eea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	ee07 3a90 	vmov	s15, r3
 8007eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eb8:	4b36      	ldr	r3, [pc, #216]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec0:	ee07 3a90 	vmov	s15, r3
 8007ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ecc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007f9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ed8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ee8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007eea:	4b2a      	ldr	r3, [pc, #168]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eee:	0a5b      	lsrs	r3, r3, #9
 8007ef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f10:	ee17 2a90 	vmov	r2, s15
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007f18:	4b1e      	ldr	r3, [pc, #120]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f1c:	0c1b      	lsrs	r3, r3, #16
 8007f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f3e:	ee17 2a90 	vmov	r2, s15
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007f46:	4b13      	ldr	r3, [pc, #76]	@ (8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4a:	0e1b      	lsrs	r3, r3, #24
 8007f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f50:	ee07 3a90 	vmov	s15, r3
 8007f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f6c:	ee17 2a90 	vmov	r2, s15
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f74:	e008      	b.n	8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	609a      	str	r2, [r3, #8]
}
 8007f88:	bf00      	nop
 8007f8a:	3724      	adds	r7, #36	@ 0x24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	58024400 	.word	0x58024400
 8007f98:	03d09000 	.word	0x03d09000
 8007f9c:	46000000 	.word	0x46000000
 8007fa0:	4c742400 	.word	0x4c742400
 8007fa4:	4a742400 	.word	0x4a742400
 8007fa8:	4bbebc20 	.word	0x4bbebc20

08007fac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fba:	4b53      	ldr	r3, [pc, #332]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbe:	f003 0303 	and.w	r3, r3, #3
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d101      	bne.n	8007fca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e099      	b.n	80080fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fca:	4b4f      	ldr	r3, [pc, #316]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a4e      	ldr	r2, [pc, #312]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8007fd0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fd6:	f7f9 fd4d 	bl	8001a74 <HAL_GetTick>
 8007fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fdc:	e008      	b.n	8007ff0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fde:	f7f9 fd49 	bl	8001a74 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d901      	bls.n	8007ff0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e086      	b.n	80080fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ff0:	4b45      	ldr	r3, [pc, #276]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1f0      	bne.n	8007fde <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ffc:	4b42      	ldr	r3, [pc, #264]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008000:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	031b      	lsls	r3, r3, #12
 800800a:	493f      	ldr	r1, [pc, #252]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 800800c:	4313      	orrs	r3, r2
 800800e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	3b01      	subs	r3, #1
 8008016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	3b01      	subs	r3, #1
 8008020:	025b      	lsls	r3, r3, #9
 8008022:	b29b      	uxth	r3, r3
 8008024:	431a      	orrs	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	3b01      	subs	r3, #1
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	3b01      	subs	r3, #1
 800803a:	061b      	lsls	r3, r3, #24
 800803c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008040:	4931      	ldr	r1, [pc, #196]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8008042:	4313      	orrs	r3, r2
 8008044:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008046:	4b30      	ldr	r3, [pc, #192]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8008048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	492d      	ldr	r1, [pc, #180]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8008054:	4313      	orrs	r3, r2
 8008056:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008058:	4b2b      	ldr	r3, [pc, #172]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 800805a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805c:	f023 0220 	bic.w	r2, r3, #32
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	4928      	ldr	r1, [pc, #160]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8008066:	4313      	orrs	r3, r2
 8008068:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800806a:	4b27      	ldr	r3, [pc, #156]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 800806c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806e:	4a26      	ldr	r2, [pc, #152]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8008070:	f023 0310 	bic.w	r3, r3, #16
 8008074:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008076:	4b24      	ldr	r3, [pc, #144]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8008078:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800807a:	4b24      	ldr	r3, [pc, #144]	@ (800810c <RCCEx_PLL2_Config+0x160>)
 800807c:	4013      	ands	r3, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	69d2      	ldr	r2, [r2, #28]
 8008082:	00d2      	lsls	r2, r2, #3
 8008084:	4920      	ldr	r1, [pc, #128]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8008086:	4313      	orrs	r3, r2
 8008088:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800808a:	4b1f      	ldr	r3, [pc, #124]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 800808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808e:	4a1e      	ldr	r2, [pc, #120]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 8008090:	f043 0310 	orr.w	r3, r3, #16
 8008094:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d106      	bne.n	80080aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800809c:	4b1a      	ldr	r3, [pc, #104]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 800809e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a0:	4a19      	ldr	r2, [pc, #100]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 80080a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080a8:	e00f      	b.n	80080ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d106      	bne.n	80080be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080b0:	4b15      	ldr	r3, [pc, #84]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 80080b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b4:	4a14      	ldr	r2, [pc, #80]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 80080b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080bc:	e005      	b.n	80080ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080be:	4b12      	ldr	r3, [pc, #72]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 80080c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c2:	4a11      	ldr	r2, [pc, #68]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 80080c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 80080d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080d6:	f7f9 fccd 	bl	8001a74 <HAL_GetTick>
 80080da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080dc:	e008      	b.n	80080f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080de:	f7f9 fcc9 	bl	8001a74 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d901      	bls.n	80080f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e006      	b.n	80080fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080f0:	4b05      	ldr	r3, [pc, #20]	@ (8008108 <RCCEx_PLL2_Config+0x15c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0f0      	beq.n	80080de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	58024400 	.word	0x58024400
 800810c:	ffff0007 	.word	0xffff0007

08008110 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800811e:	4b53      	ldr	r3, [pc, #332]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	2b03      	cmp	r3, #3
 8008128:	d101      	bne.n	800812e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e099      	b.n	8008262 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800812e:	4b4f      	ldr	r3, [pc, #316]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a4e      	ldr	r2, [pc, #312]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008134:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800813a:	f7f9 fc9b 	bl	8001a74 <HAL_GetTick>
 800813e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008140:	e008      	b.n	8008154 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008142:	f7f9 fc97 	bl	8001a74 <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	2b02      	cmp	r3, #2
 800814e:	d901      	bls.n	8008154 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e086      	b.n	8008262 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008154:	4b45      	ldr	r3, [pc, #276]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1f0      	bne.n	8008142 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008160:	4b42      	ldr	r3, [pc, #264]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008164:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	051b      	lsls	r3, r3, #20
 800816e:	493f      	ldr	r1, [pc, #252]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008170:	4313      	orrs	r3, r2
 8008172:	628b      	str	r3, [r1, #40]	@ 0x28
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	3b01      	subs	r3, #1
 800817a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	3b01      	subs	r3, #1
 8008184:	025b      	lsls	r3, r3, #9
 8008186:	b29b      	uxth	r3, r3
 8008188:	431a      	orrs	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	3b01      	subs	r3, #1
 8008190:	041b      	lsls	r3, r3, #16
 8008192:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008196:	431a      	orrs	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	3b01      	subs	r3, #1
 800819e:	061b      	lsls	r3, r3, #24
 80081a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081a4:	4931      	ldr	r1, [pc, #196]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081aa:	4b30      	ldr	r3, [pc, #192]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 80081ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	492d      	ldr	r1, [pc, #180]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081bc:	4b2b      	ldr	r3, [pc, #172]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 80081be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	4928      	ldr	r1, [pc, #160]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081ce:	4b27      	ldr	r3, [pc, #156]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 80081d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d2:	4a26      	ldr	r2, [pc, #152]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 80081d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081da:	4b24      	ldr	r3, [pc, #144]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 80081dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081de:	4b24      	ldr	r3, [pc, #144]	@ (8008270 <RCCEx_PLL3_Config+0x160>)
 80081e0:	4013      	ands	r3, r2
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	69d2      	ldr	r2, [r2, #28]
 80081e6:	00d2      	lsls	r2, r2, #3
 80081e8:	4920      	ldr	r1, [pc, #128]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081ee:	4b1f      	ldr	r3, [pc, #124]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f2:	4a1e      	ldr	r2, [pc, #120]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 80081f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d106      	bne.n	800820e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008200:	4b1a      	ldr	r3, [pc, #104]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008204:	4a19      	ldr	r2, [pc, #100]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008206:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800820a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800820c:	e00f      	b.n	800822e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d106      	bne.n	8008222 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008214:	4b15      	ldr	r3, [pc, #84]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008218:	4a14      	ldr	r2, [pc, #80]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 800821a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800821e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008220:	e005      	b.n	800822e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008222:	4b12      	ldr	r3, [pc, #72]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008226:	4a11      	ldr	r2, [pc, #68]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008228:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800822c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800822e:	4b0f      	ldr	r3, [pc, #60]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a0e      	ldr	r2, [pc, #56]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800823a:	f7f9 fc1b 	bl	8001a74 <HAL_GetTick>
 800823e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008240:	e008      	b.n	8008254 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008242:	f7f9 fc17 	bl	8001a74 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	2b02      	cmp	r3, #2
 800824e:	d901      	bls.n	8008254 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e006      	b.n	8008262 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008254:	4b05      	ldr	r3, [pc, #20]	@ (800826c <RCCEx_PLL3_Config+0x15c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0f0      	beq.n	8008242 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008260:	7bfb      	ldrb	r3, [r7, #15]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	58024400 	.word	0x58024400
 8008270:	ffff0007 	.word	0xffff0007

08008274 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	@ 0x28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e075      	b.n	8008372 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d105      	bne.n	800829e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7f9 f819 	bl	80012d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2204      	movs	r2, #4
 80082a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f868 	bl	800837c <HAL_SD_InitCard>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e05d      	b.n	8008372 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80082b6:	f107 0308 	add.w	r3, r7, #8
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fa9d 	bl	80087fc <HAL_SD_GetCardStatus>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e052      	b.n	8008372 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80082cc:	7e3b      	ldrb	r3, [r7, #24]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80082d2:	7e7b      	ldrb	r3, [r7, #25]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d10a      	bne.n	80082f6 <HAL_SD_Init+0x82>
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d102      	bne.n	80082ec <HAL_SD_Init+0x78>
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d004      	beq.n	80082f6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80082f4:	e00b      	b.n	800830e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d104      	bne.n	8008308 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008304:	659a      	str	r2, [r3, #88]	@ 0x58
 8008306:	e002      	b.n	800830e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fb2f 	bl	8008978 <HAL_SD_ConfigWideBusOperation>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e026      	b.n	8008372 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008324:	f7f9 fba6 	bl	8001a74 <HAL_GetTick>
 8008328:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800832a:	e011      	b.n	8008350 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800832c:	f7f9 fba2 	bl	8001a74 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800833a:	d109      	bne.n	8008350 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008342:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e010      	b.n	8008372 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fc23 	bl	8008b9c <HAL_SD_GetCardState>
 8008356:	4603      	mov	r3, r0
 8008358:	2b04      	cmp	r3, #4
 800835a:	d1e7      	bne.n	800832c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3728      	adds	r7, #40	@ 0x28
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800837c:	b590      	push	{r4, r7, lr}
 800837e:	b08d      	sub	sp, #52	@ 0x34
 8008380:	af02      	add	r7, sp, #8
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008388:	2300      	movs	r3, #0
 800838a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800838c:	2300      	movs	r3, #0
 800838e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008390:	2300      	movs	r3, #0
 8008392:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008394:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008398:	f04f 0100 	mov.w	r1, #0
 800839c:	f7fe fc76 	bl	8006c8c <HAL_RCCEx_GetPeriphCLKFreq>
 80083a0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d109      	bne.n	80083bc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80083b6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e070      	b.n	800849e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80083bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083be:	0a1b      	lsrs	r3, r3, #8
 80083c0:	4a39      	ldr	r2, [pc, #228]	@ (80084a8 <HAL_SD_InitCard+0x12c>)
 80083c2:	fba2 2303 	umull	r2, r3, r2, r3
 80083c6:	091b      	lsrs	r3, r3, #4
 80083c8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681c      	ldr	r4, [r3, #0]
 80083ce:	466a      	mov	r2, sp
 80083d0:	f107 0318 	add.w	r3, r7, #24
 80083d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80083d8:	e882 0003 	stmia.w	r2, {r0, r1}
 80083dc:	f107 030c 	add.w	r3, r7, #12
 80083e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083e2:	4620      	mov	r0, r4
 80083e4:	f003 f86c 	bl	800b4c0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f003 f89e 	bl	800b52e <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008402:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800840a:	4a28      	ldr	r2, [pc, #160]	@ (80084ac <HAL_SD_InitCard+0x130>)
 800840c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008412:	3301      	adds	r3, #1
 8008414:	4618      	mov	r0, r3
 8008416:	f7f9 fb39 	bl	8001a8c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fcac 	bl	8008d78 <SD_PowerON>
 8008420:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	431a      	orrs	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e02e      	b.n	800849e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fbcb 	bl	8008bdc <SD_InitCard>
 8008446:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	431a      	orrs	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e01b      	b.n	800849e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800846e:	4618      	mov	r0, r3
 8008470:	f003 f8f2 	bl	800b658 <SDMMC_CmdBlockLength>
 8008474:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00f      	beq.n	800849c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a0b      	ldr	r2, [pc, #44]	@ (80084b0 <HAL_SD_InitCard+0x134>)
 8008482:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e000      	b.n	800849e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	372c      	adds	r7, #44	@ 0x2c
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd90      	pop	{r4, r7, pc}
 80084a6:	bf00      	nop
 80084a8:	014f8b59 	.word	0x014f8b59
 80084ac:	00012110 	.word	0x00012110
 80084b0:	1fe00fff 	.word	0x1fe00fff

080084b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084c2:	0f9b      	lsrs	r3, r3, #30
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084ce:	0e9b      	lsrs	r3, r3, #26
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	f003 030f 	and.w	r3, r3, #15
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084e0:	0e1b      	lsrs	r3, r3, #24
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	f003 0303 	and.w	r3, r3, #3
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084f2:	0c1b      	lsrs	r3, r3, #16
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084fe:	0a1b      	lsrs	r3, r3, #8
 8008500:	b2da      	uxtb	r2, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800850a:	b2da      	uxtb	r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008514:	0d1b      	lsrs	r3, r3, #20
 8008516:	b29a      	uxth	r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008520:	0c1b      	lsrs	r3, r3, #16
 8008522:	b2db      	uxtb	r3, r3
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	b2da      	uxtb	r2, r3
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008532:	0bdb      	lsrs	r3, r3, #15
 8008534:	b2db      	uxtb	r3, r3
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	b2da      	uxtb	r2, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008544:	0b9b      	lsrs	r3, r3, #14
 8008546:	b2db      	uxtb	r3, r3
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	b2da      	uxtb	r2, r3
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008556:	0b5b      	lsrs	r3, r3, #13
 8008558:	b2db      	uxtb	r3, r3
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	b2da      	uxtb	r2, r3
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008568:	0b1b      	lsrs	r3, r3, #12
 800856a:	b2db      	uxtb	r3, r3
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	b2da      	uxtb	r2, r3
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2200      	movs	r2, #0
 800857a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008580:	2b00      	cmp	r3, #0
 8008582:	d163      	bne.n	800864c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008588:	009a      	lsls	r2, r3, #2
 800858a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800858e:	4013      	ands	r3, r2
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008594:	0f92      	lsrs	r2, r2, #30
 8008596:	431a      	orrs	r2, r3
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085a0:	0edb      	lsrs	r3, r3, #27
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085b2:	0e1b      	lsrs	r3, r3, #24
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085c4:	0d5b      	lsrs	r3, r3, #21
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085d6:	0c9b      	lsrs	r3, r3, #18
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	f003 0307 	and.w	r3, r3, #7
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085e8:	0bdb      	lsrs	r3, r3, #15
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	7e1b      	ldrb	r3, [r3, #24]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	3302      	adds	r3, #2
 800860c:	2201      	movs	r2, #1
 800860e:	fa02 f303 	lsl.w	r3, r2, r3
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008616:	fb03 f202 	mul.w	r2, r3, r2
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	7a1b      	ldrb	r3, [r3, #8]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f003 030f 	and.w	r3, r3, #15
 8008628:	2201      	movs	r2, #1
 800862a:	409a      	lsls	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008638:	0a52      	lsrs	r2, r2, #9
 800863a:	fb03 f202 	mul.w	r2, r3, r2
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008648:	655a      	str	r2, [r3, #84]	@ 0x54
 800864a:	e031      	b.n	80086b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008650:	2b01      	cmp	r3, #1
 8008652:	d11d      	bne.n	8008690 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008658:	041b      	lsls	r3, r3, #16
 800865a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008662:	0c1b      	lsrs	r3, r3, #16
 8008664:	431a      	orrs	r2, r3
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	3301      	adds	r3, #1
 8008670:	029a      	lsls	r2, r3, #10
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008684:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	655a      	str	r2, [r3, #84]	@ 0x54
 800868e:	e00f      	b.n	80086b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a58      	ldr	r2, [pc, #352]	@ (80087f8 <HAL_SD_GetCardCSD+0x344>)
 8008696:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800869c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e09d      	b.n	80087ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086b4:	0b9b      	lsrs	r3, r3, #14
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086c6:	09db      	lsrs	r3, r3, #7
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086e8:	0fdb      	lsrs	r3, r3, #31
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086f4:	0f5b      	lsrs	r3, r3, #29
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f003 0303 	and.w	r3, r3, #3
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008706:	0e9b      	lsrs	r3, r3, #26
 8008708:	b2db      	uxtb	r3, r3
 800870a:	f003 0307 	and.w	r3, r3, #7
 800870e:	b2da      	uxtb	r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008718:	0d9b      	lsrs	r3, r3, #22
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	b2da      	uxtb	r2, r3
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800872a:	0d5b      	lsrs	r3, r3, #21
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	b2da      	uxtb	r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008746:	0c1b      	lsrs	r3, r3, #16
 8008748:	b2db      	uxtb	r3, r3
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	b2da      	uxtb	r2, r3
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800875a:	0bdb      	lsrs	r3, r3, #15
 800875c:	b2db      	uxtb	r3, r3
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	b2da      	uxtb	r2, r3
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800876e:	0b9b      	lsrs	r3, r3, #14
 8008770:	b2db      	uxtb	r3, r3
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	b2da      	uxtb	r2, r3
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008782:	0b5b      	lsrs	r3, r3, #13
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	b2da      	uxtb	r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008796:	0b1b      	lsrs	r3, r3, #12
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087aa:	0a9b      	lsrs	r3, r3, #10
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	f003 0303 	and.w	r3, r3, #3
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087be:	0a1b      	lsrs	r3, r3, #8
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	1fe00fff 	.word	0x1fe00fff

080087fc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b094      	sub	sp, #80	@ 0x50
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b03      	cmp	r3, #3
 8008816:	d101      	bne.n	800881c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e0a7      	b.n	800896c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800881c:	f107 0308 	add.w	r3, r7, #8
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fb36 	bl	8008e94 <SD_SendSDStatus>
 8008828:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800882a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800882c:	2b00      	cmp	r3, #0
 800882e:	d011      	beq.n	8008854 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a4f      	ldr	r2, [pc, #316]	@ (8008974 <HAL_SD_GetCardStatus+0x178>)
 8008836:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800883c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800883e:	431a      	orrs	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008852:	e070      	b.n	8008936 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	099b      	lsrs	r3, r3, #6
 8008858:	b2db      	uxtb	r3, r3
 800885a:	f003 0303 	and.w	r3, r3, #3
 800885e:	b2da      	uxtb	r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	b2db      	uxtb	r3, r3
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	b2da      	uxtb	r2, r3
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	b29b      	uxth	r3, r3
 800887a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800887e:	b29a      	uxth	r2, r3
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	0e1b      	lsrs	r3, r3, #24
 8008884:	b29b      	uxth	r3, r3
 8008886:	4313      	orrs	r3, r2
 8008888:	b29a      	uxth	r2, r3
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	061a      	lsls	r2, r3, #24
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	021b      	lsls	r3, r3, #8
 8008896:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800889a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	0a1b      	lsrs	r3, r3, #8
 80088a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088a4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	0e1b      	lsrs	r3, r3, #24
 80088aa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	0a1b      	lsrs	r3, r3, #8
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	0d1b      	lsrs	r3, r3, #20
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	0c1b      	lsrs	r3, r3, #16
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80088dc:	b29a      	uxth	r2, r3
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	4313      	orrs	r3, r2
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	0a9b      	lsrs	r3, r3, #10
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	0a1b      	lsrs	r3, r3, #8
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	b2da      	uxtb	r2, r3
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	091b      	lsrs	r3, r3, #4
 8008912:	b2db      	uxtb	r3, r3
 8008914:	f003 030f 	and.w	r3, r3, #15
 8008918:	b2da      	uxtb	r2, r3
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	b2db      	uxtb	r3, r3
 8008922:	f003 030f 	and.w	r3, r3, #15
 8008926:	b2da      	uxtb	r2, r3
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	0e1b      	lsrs	r3, r3, #24
 8008930:	b2da      	uxtb	r2, r3
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800893e:	4618      	mov	r0, r3
 8008940:	f002 fe8a 	bl	800b658 <SDMMC_CmdBlockLength>
 8008944:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00d      	beq.n	8008968 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a08      	ldr	r2, [pc, #32]	@ (8008974 <HAL_SD_GetCardStatus+0x178>)
 8008952:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008958:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8008968:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800896c:	4618      	mov	r0, r3
 800896e:	3750      	adds	r7, #80	@ 0x50
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	1fe00fff 	.word	0x1fe00fff

08008978 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008978:	b590      	push	{r4, r7, lr}
 800897a:	b08d      	sub	sp, #52	@ 0x34
 800897c:	af02      	add	r7, sp, #8
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2203      	movs	r2, #3
 800898c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008994:	2b03      	cmp	r3, #3
 8008996:	d02e      	beq.n	80089f6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800899e:	d106      	bne.n	80089ae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80089ac:	e029      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089b4:	d10a      	bne.n	80089cc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fb64 	bl	8009084 <SD_WideBus_Enable>
 80089bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	431a      	orrs	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80089ca:	e01a      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10a      	bne.n	80089e8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fba1 	bl	800911a <SD_WideBus_Disable>
 80089d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80089e6:	e00c      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80089f4:	e005      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089fa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d007      	beq.n	8008a1a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a5f      	ldr	r2, [pc, #380]	@ (8008b8c <HAL_SD_ConfigWideBusOperation+0x214>)
 8008a10:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a18:	e096      	b.n	8008b48 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008a1a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008a1e:	f04f 0100 	mov.w	r1, #0
 8008a22:	f7fe f933 	bl	8006c8c <HAL_RCCEx_GetPeriphCLKFreq>
 8008a26:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 8083 	beq.w	8008b36 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	695a      	ldr	r2, [r3, #20]
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	4950      	ldr	r1, [pc, #320]	@ (8008b90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008a4e:	fba1 1303 	umull	r1, r3, r1, r3
 8008a52:	0e1b      	lsrs	r3, r3, #24
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d303      	bcc.n	8008a60 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	61bb      	str	r3, [r7, #24]
 8008a5e:	e05a      	b.n	8008b16 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a68:	d103      	bne.n	8008a72 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	61bb      	str	r3, [r7, #24]
 8008a70:	e051      	b.n	8008b16 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a7a:	d126      	bne.n	8008aca <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10e      	bne.n	8008aa2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4a43      	ldr	r2, [pc, #268]	@ (8008b94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d906      	bls.n	8008a9a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	4a40      	ldr	r2, [pc, #256]	@ (8008b90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008a90:	fba2 2303 	umull	r2, r3, r2, r3
 8008a94:	0e5b      	lsrs	r3, r3, #25
 8008a96:	61bb      	str	r3, [r7, #24]
 8008a98:	e03d      	b.n	8008b16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	61bb      	str	r3, [r7, #24]
 8008aa0:	e039      	b.n	8008b16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aae:	4a39      	ldr	r2, [pc, #228]	@ (8008b94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d906      	bls.n	8008ac2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	4a36      	ldr	r2, [pc, #216]	@ (8008b90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8008abc:	0e5b      	lsrs	r3, r3, #25
 8008abe:	61bb      	str	r3, [r7, #24]
 8008ac0:	e029      	b.n	8008b16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	61bb      	str	r3, [r7, #24]
 8008ac8:	e025      	b.n	8008b16 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10e      	bne.n	8008af0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4a30      	ldr	r2, [pc, #192]	@ (8008b98 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d906      	bls.n	8008ae8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	4a2c      	ldr	r2, [pc, #176]	@ (8008b90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008ade:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae2:	0e1b      	lsrs	r3, r3, #24
 8008ae4:	61bb      	str	r3, [r7, #24]
 8008ae6:	e016      	b.n	8008b16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	e012      	b.n	8008b16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afc:	4a26      	ldr	r2, [pc, #152]	@ (8008b98 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d906      	bls.n	8008b10 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	4a22      	ldr	r2, [pc, #136]	@ (8008b90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b06:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0a:	0e1b      	lsrs	r3, r3, #24
 8008b0c:	61bb      	str	r3, [r7, #24]
 8008b0e:	e002      	b.n	8008b16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681c      	ldr	r4, [r3, #0]
 8008b1a:	466a      	mov	r2, sp
 8008b1c:	f107 0314 	add.w	r3, r7, #20
 8008b20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b24:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b28:	f107 0308 	add.w	r3, r7, #8
 8008b2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f002 fcc6 	bl	800b4c0 <SDMMC_Init>
 8008b34:	e008      	b.n	8008b48 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b3a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008b50:	4618      	mov	r0, r3
 8008b52:	f002 fd81 	bl	800b658 <SDMMC_CmdBlockLength>
 8008b56:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00c      	beq.n	8008b78 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a0a      	ldr	r2, [pc, #40]	@ (8008b8c <HAL_SD_ConfigWideBusOperation+0x214>)
 8008b64:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	372c      	adds	r7, #44	@ 0x2c
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd90      	pop	{r4, r7, pc}
 8008b8c:	1fe00fff 	.word	0x1fe00fff
 8008b90:	55e63b89 	.word	0x55e63b89
 8008b94:	02faf080 	.word	0x02faf080
 8008b98:	017d7840 	.word	0x017d7840

08008b9c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008ba8:	f107 030c 	add.w	r3, r7, #12
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa40 	bl	8009034 <SD_SendStatus>
 8008bb4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d005      	beq.n	8008bc8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	0a5b      	lsrs	r3, r3, #9
 8008bcc:	f003 030f 	and.w	r3, r3, #15
 8008bd0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008bd2:	693b      	ldr	r3, [r7, #16]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b090      	sub	sp, #64	@ 0x40
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008be8:	f7f8 ff44 	bl	8001a74 <HAL_GetTick>
 8008bec:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f002 fcac 	bl	800b550 <SDMMC_GetPowerState>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d102      	bne.n	8008c04 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bfe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008c02:	e0b5      	b.n	8008d70 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d02e      	beq.n	8008c6a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f002 fe2d 	bl	800b870 <SDMMC_CmdSendCID>
 8008c16:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <SD_InitCard+0x46>
    {
      return errorstate;
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c20:	e0a6      	b.n	8008d70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2100      	movs	r1, #0
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f002 fcd6 	bl	800b5da <SDMMC_GetResponse>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2104      	movs	r1, #4
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f002 fccd 	bl	800b5da <SDMMC_GetResponse>
 8008c40:	4602      	mov	r2, r0
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2108      	movs	r1, #8
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f002 fcc4 	bl	800b5da <SDMMC_GetResponse>
 8008c52:	4602      	mov	r2, r0
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	210c      	movs	r1, #12
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f002 fcbb 	bl	800b5da <SDMMC_GetResponse>
 8008c64:	4602      	mov	r2, r0
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d01d      	beq.n	8008cae <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008c72:	e019      	b.n	8008ca8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f107 020a 	add.w	r2, r7, #10
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f002 fe35 	bl	800b8ee <SDMMC_CmdSetRelAdd>
 8008c84:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8e:	e06f      	b.n	8008d70 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008c90:	f7f8 fef0 	bl	8001a74 <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d902      	bls.n	8008ca8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008ca2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008ca6:	e063      	b.n	8008d70 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008ca8:	897b      	ldrh	r3, [r7, #10]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0e2      	beq.n	8008c74 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d036      	beq.n	8008d24 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008cb6:	897b      	ldrh	r3, [r7, #10]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc6:	041b      	lsls	r3, r3, #16
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	f002 fdef 	bl	800b8ae <SDMMC_CmdSendCSD>
 8008cd0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <SD_InitCard+0x100>
    {
      return errorstate;
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cda:	e049      	b.n	8008d70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f002 fc79 	bl	800b5da <SDMMC_GetResponse>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2104      	movs	r1, #4
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f002 fc70 	bl	800b5da <SDMMC_GetResponse>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2108      	movs	r1, #8
 8008d06:	4618      	mov	r0, r3
 8008d08:	f002 fc67 	bl	800b5da <SDMMC_GetResponse>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	210c      	movs	r1, #12
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f002 fc5e 	bl	800b5da <SDMMC_GetResponse>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2104      	movs	r1, #4
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f002 fc55 	bl	800b5da <SDMMC_GetResponse>
 8008d30:	4603      	mov	r3, r0
 8008d32:	0d1a      	lsrs	r2, r3, #20
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d38:	f107 030c 	add.w	r3, r7, #12
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff fbb8 	bl	80084b4 <HAL_SD_GetCardCSD>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d002      	beq.n	8008d50 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d4a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008d4e:	e00f      	b.n	8008d70 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d58:	041b      	lsls	r3, r3, #16
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	f002 fc9e 	bl	800b69e <SDMMC_CmdSelDesel>
 8008d62:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <SD_InitCard+0x192>
  {
    return errorstate;
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6c:	e000      	b.n	8008d70 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3740      	adds	r7, #64	@ 0x40
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f002 fca7 	bl	800b6e4 <SDMMC_CmdGoIdleState>
 8008d96:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	e072      	b.n	8008e88 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f002 fcba 	bl	800b720 <SDMMC_CmdOperCond>
 8008dac:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008db4:	d10d      	bne.n	8008dd2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f002 fc8f 	bl	800b6e4 <SDMMC_CmdGoIdleState>
 8008dc6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <SD_PowerON+0x60>
    {
      return errorstate;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	e05a      	b.n	8008e88 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d137      	bne.n	8008e50 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2100      	movs	r1, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f002 fcba 	bl	800b760 <SDMMC_CmdAppCommand>
 8008dec:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d02d      	beq.n	8008e50 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008df4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008df8:	e046      	b.n	8008e88 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f002 fcad 	bl	800b760 <SDMMC_CmdAppCommand>
 8008e06:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <SD_PowerON+0x9a>
    {
      return errorstate;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	e03a      	b.n	8008e88 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	491e      	ldr	r1, [pc, #120]	@ (8008e90 <SD_PowerON+0x118>)
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f002 fcc4 	bl	800b7a6 <SDMMC_CmdAppOperCommand>
 8008e1e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008e2a:	e02d      	b.n	8008e88 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2100      	movs	r1, #0
 8008e32:	4618      	mov	r0, r3
 8008e34:	f002 fbd1 	bl	800b5da <SDMMC_GetResponse>
 8008e38:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	0fdb      	lsrs	r3, r3, #31
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d101      	bne.n	8008e46 <SD_PowerON+0xce>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e000      	b.n	8008e48 <SD_PowerON+0xd0>
 8008e46:	2300      	movs	r3, #0
 8008e48:	613b      	str	r3, [r7, #16]

    count++;
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d802      	bhi.n	8008e60 <SD_PowerON+0xe8>
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0cc      	beq.n	8008dfa <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d902      	bls.n	8008e70 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008e6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008e6e:	e00b      	b.n	8008e88 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	c1100000 	.word	0xc1100000

08008e94 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08c      	sub	sp, #48	@ 0x30
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e9e:	f7f8 fde9 	bl	8001a74 <HAL_GetTick>
 8008ea2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2100      	movs	r1, #0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f002 fb93 	bl	800b5da <SDMMC_GetResponse>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ebe:	d102      	bne.n	8008ec6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ec4:	e0b0      	b.n	8009028 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2140      	movs	r1, #64	@ 0x40
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f002 fbc3 	bl	800b658 <SDMMC_CmdBlockLength>
 8008ed2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	e0a0      	b.n	8009028 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	f002 fc34 	bl	800b760 <SDMMC_CmdAppCommand>
 8008ef8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	e08d      	b.n	8009028 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f10:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008f12:	2340      	movs	r3, #64	@ 0x40
 8008f14:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008f16:	2360      	movs	r3, #96	@ 0x60
 8008f18:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f22:	2301      	movs	r3, #1
 8008f24:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f107 0208 	add.w	r2, r7, #8
 8008f2e:	4611      	mov	r1, r2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f002 fb65 	bl	800b600 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f002 fd1c 	bl	800b978 <SDMMC_CmdStatusRegister>
 8008f40:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d02b      	beq.n	8008fa0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	e069      	b.n	8009028 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d013      	beq.n	8008f8a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008f62:	2300      	movs	r3, #0
 8008f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f66:	e00d      	b.n	8008f84 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f002 fad1 	bl	800b514 <SDMMC_ReadFIFO>
 8008f72:	4602      	mov	r2, r0
 8008f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f76:	601a      	str	r2, [r3, #0]
        pData++;
 8008f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f80:	3301      	adds	r3, #1
 8008f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f86:	2b07      	cmp	r3, #7
 8008f88:	d9ee      	bls.n	8008f68 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008f8a:	f7f8 fd73 	bl	8001a74 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f98:	d102      	bne.n	8008fa0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f9a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008f9e:	e043      	b.n	8009028 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fa6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0d2      	beq.n	8008f54 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb4:	f003 0308 	and.w	r3, r3, #8
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008fbc:	2308      	movs	r3, #8
 8008fbe:	e033      	b.n	8009028 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008fce:	2302      	movs	r3, #2
 8008fd0:	e02a      	b.n	8009028 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d017      	beq.n	8009010 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008fe0:	2320      	movs	r3, #32
 8008fe2:	e021      	b.n	8009028 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f002 fa93 	bl	800b514 <SDMMC_ReadFIFO>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff2:	601a      	str	r2, [r3, #0]
    pData++;
 8008ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008ffa:	f7f8 fd3b 	bl	8001a74 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009008:	d102      	bne.n	8009010 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800900a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800900e:	e00b      	b.n	8009028 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009016:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e2      	bne.n	8008fe4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a03      	ldr	r2, [pc, #12]	@ (8009030 <SD_SendSDStatus+0x19c>)
 8009024:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3730      	adds	r7, #48	@ 0x30
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	18000f3a 	.word	0x18000f3a

08009034 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d102      	bne.n	800904a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009044:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009048:	e018      	b.n	800907c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009052:	041b      	lsls	r3, r3, #16
 8009054:	4619      	mov	r1, r3
 8009056:	4610      	mov	r0, r2
 8009058:	f002 fc6b 	bl	800b932 <SDMMC_CmdSendStatus>
 800905c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	e009      	b.n	800907c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2100      	movs	r1, #0
 800906e:	4618      	mov	r0, r3
 8009070:	f002 fab3 	bl	800b5da <SDMMC_GetResponse>
 8009074:	4602      	mov	r2, r0
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800908c:	2300      	movs	r3, #0
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	2300      	movs	r3, #0
 8009092:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2100      	movs	r1, #0
 800909a:	4618      	mov	r0, r3
 800909c:	f002 fa9d 	bl	800b5da <SDMMC_GetResponse>
 80090a0:	4603      	mov	r3, r0
 80090a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090aa:	d102      	bne.n	80090b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090b0:	e02f      	b.n	8009112 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80090b2:	f107 030c 	add.w	r3, r7, #12
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f879 	bl	80091b0 <SD_FindSCR>
 80090be:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	e023      	b.n	8009112 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d01c      	beq.n	800910e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090dc:	041b      	lsls	r3, r3, #16
 80090de:	4619      	mov	r1, r3
 80090e0:	4610      	mov	r0, r2
 80090e2:	f002 fb3d 	bl	800b760 <SDMMC_CmdAppCommand>
 80090e6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	e00f      	b.n	8009112 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2102      	movs	r1, #2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f002 fb74 	bl	800b7e6 <SDMMC_CmdBusWidth>
 80090fe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	e003      	b.n	8009112 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800910a:	2300      	movs	r3, #0
 800910c:	e001      	b.n	8009112 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800910e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b086      	sub	sp, #24
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	2300      	movs	r3, #0
 8009128:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2100      	movs	r1, #0
 8009130:	4618      	mov	r0, r3
 8009132:	f002 fa52 	bl	800b5da <SDMMC_GetResponse>
 8009136:	4603      	mov	r3, r0
 8009138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800913c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009140:	d102      	bne.n	8009148 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009142:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009146:	e02f      	b.n	80091a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009148:	f107 030c 	add.w	r3, r7, #12
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f82e 	bl	80091b0 <SD_FindSCR>
 8009154:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	e023      	b.n	80091a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d01c      	beq.n	80091a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009172:	041b      	lsls	r3, r3, #16
 8009174:	4619      	mov	r1, r3
 8009176:	4610      	mov	r0, r2
 8009178:	f002 faf2 	bl	800b760 <SDMMC_CmdAppCommand>
 800917c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	e00f      	b.n	80091a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2100      	movs	r1, #0
 800918e:	4618      	mov	r0, r3
 8009190:	f002 fb29 	bl	800b7e6 <SDMMC_CmdBusWidth>
 8009194:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	e003      	b.n	80091a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80091a0:	2300      	movs	r3, #0
 80091a2:	e001      	b.n	80091a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08e      	sub	sp, #56	@ 0x38
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80091ba:	f7f8 fc5b 	bl	8001a74 <HAL_GetTick>
 80091be:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80091c4:	2300      	movs	r3, #0
 80091c6:	60bb      	str	r3, [r7, #8]
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2108      	movs	r1, #8
 80091d6:	4618      	mov	r0, r3
 80091d8:	f002 fa3e 	bl	800b658 <SDMMC_CmdBlockLength>
 80091dc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80091de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80091e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e6:	e0ad      	b.n	8009344 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091f0:	041b      	lsls	r3, r3, #16
 80091f2:	4619      	mov	r1, r3
 80091f4:	4610      	mov	r0, r2
 80091f6:	f002 fab3 	bl	800b760 <SDMMC_CmdAppCommand>
 80091fa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009204:	e09e      	b.n	8009344 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800920a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800920c:	2308      	movs	r3, #8
 800920e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009210:	2330      	movs	r3, #48	@ 0x30
 8009212:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009214:	2302      	movs	r3, #2
 8009216:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009218:	2300      	movs	r3, #0
 800921a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800921c:	2301      	movs	r3, #1
 800921e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f107 0210 	add.w	r2, r7, #16
 8009228:	4611      	mov	r1, r2
 800922a:	4618      	mov	r0, r3
 800922c:	f002 f9e8 	bl	800b600 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4618      	mov	r0, r3
 8009236:	f002 faf9 	bl	800b82c <SDMMC_CmdSendSCR>
 800923a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800923c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923e:	2b00      	cmp	r3, #0
 8009240:	d027      	beq.n	8009292 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009244:	e07e      	b.n	8009344 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800924c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d113      	bne.n	800927c <SD_FindSCR+0xcc>
 8009254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009256:	2b00      	cmp	r3, #0
 8009258:	d110      	bne.n	800927c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4618      	mov	r0, r3
 8009260:	f002 f958 	bl	800b514 <SDMMC_ReadFIFO>
 8009264:	4603      	mov	r3, r0
 8009266:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4618      	mov	r0, r3
 800926e:	f002 f951 	bl	800b514 <SDMMC_ReadFIFO>
 8009272:	4603      	mov	r3, r0
 8009274:	60fb      	str	r3, [r7, #12]
      index++;
 8009276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009278:	3301      	adds	r3, #1
 800927a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800927c:	f7f8 fbfa 	bl	8001a74 <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800928a:	d102      	bne.n	8009292 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800928c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009290:	e058      	b.n	8009344 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009298:	f240 532a 	movw	r3, #1322	@ 0x52a
 800929c:	4013      	ands	r3, r2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0d1      	beq.n	8009246 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092a8:	f003 0308 	and.w	r3, r3, #8
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d005      	beq.n	80092bc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2208      	movs	r2, #8
 80092b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80092b8:	2308      	movs	r3, #8
 80092ba:	e043      	b.n	8009344 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d005      	beq.n	80092d6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2202      	movs	r2, #2
 80092d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80092d2:	2302      	movs	r3, #2
 80092d4:	e036      	b.n	8009344 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092dc:	f003 0320 	and.w	r3, r3, #32
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2220      	movs	r2, #32
 80092ea:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80092ec:	2320      	movs	r3, #32
 80092ee:	e029      	b.n	8009344 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a15      	ldr	r2, [pc, #84]	@ (800934c <SD_FindSCR+0x19c>)
 80092f6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	061a      	lsls	r2, r3, #24
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	021b      	lsls	r3, r3, #8
 8009300:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009304:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	0a1b      	lsrs	r3, r3, #8
 800930a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800930e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	0e1b      	lsrs	r3, r3, #24
 8009314:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8009316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009318:	601a      	str	r2, [r3, #0]
    scr++;
 800931a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931c:	3304      	adds	r3, #4
 800931e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	061a      	lsls	r2, r3, #24
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	021b      	lsls	r3, r3, #8
 8009328:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800932c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	0a1b      	lsrs	r3, r3, #8
 8009332:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009336:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	0e1b      	lsrs	r3, r3, #24
 800933c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800933e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009340:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3738      	adds	r7, #56	@ 0x38
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	18000f3a 	.word	0x18000f3a

08009350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e042      	b.n	80093e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009368:	2b00      	cmp	r3, #0
 800936a:	d106      	bne.n	800937a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7f8 fa01 	bl	800177c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2224      	movs	r2, #36	@ 0x24
 800937e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 0201 	bic.w	r2, r2, #1
 8009390:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f001 fb70 	bl	800aa80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fe05 	bl	8009fb0 <UART_SetConfig>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d101      	bne.n	80093b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e01b      	b.n	80093e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80093be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 0201 	orr.w	r2, r2, #1
 80093de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 fbef 	bl	800abc4 <UART_CheckIdleState>
 80093e6:	4603      	mov	r3, r0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08a      	sub	sp, #40	@ 0x28
 80093f4:	af02      	add	r7, sp, #8
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	4613      	mov	r3, r2
 80093fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009406:	2b20      	cmp	r3, #32
 8009408:	d17b      	bne.n	8009502 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <HAL_UART_Transmit+0x26>
 8009410:	88fb      	ldrh	r3, [r7, #6]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e074      	b.n	8009504 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2221      	movs	r2, #33	@ 0x21
 8009426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800942a:	f7f8 fb23 	bl	8001a74 <HAL_GetTick>
 800942e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	88fa      	ldrh	r2, [r7, #6]
 8009434:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	88fa      	ldrh	r2, [r7, #6]
 800943c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009448:	d108      	bne.n	800945c <HAL_UART_Transmit+0x6c>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d104      	bne.n	800945c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009452:	2300      	movs	r3, #0
 8009454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	61bb      	str	r3, [r7, #24]
 800945a:	e003      	b.n	8009464 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009460:	2300      	movs	r3, #0
 8009462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009464:	e030      	b.n	80094c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2200      	movs	r2, #0
 800946e:	2180      	movs	r1, #128	@ 0x80
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f001 fc51 	bl	800ad18 <UART_WaitOnFlagUntilTimeout>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2220      	movs	r2, #32
 8009480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e03d      	b.n	8009504 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10b      	bne.n	80094a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800949c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	3302      	adds	r3, #2
 80094a2:	61bb      	str	r3, [r7, #24]
 80094a4:	e007      	b.n	80094b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	781a      	ldrb	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	3301      	adds	r3, #1
 80094b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094bc:	b29b      	uxth	r3, r3
 80094be:	3b01      	subs	r3, #1
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1c8      	bne.n	8009466 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2200      	movs	r2, #0
 80094dc:	2140      	movs	r1, #64	@ 0x40
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f001 fc1a 	bl	800ad18 <UART_WaitOnFlagUntilTimeout>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e006      	b.n	8009504 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	e000      	b.n	8009504 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009502:	2302      	movs	r3, #2
  }
}
 8009504:	4618      	mov	r0, r3
 8009506:	3720      	adds	r7, #32
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08a      	sub	sp, #40	@ 0x28
 8009510:	af02      	add	r7, sp, #8
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	4613      	mov	r3, r2
 800951a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009522:	2b20      	cmp	r3, #32
 8009524:	f040 80b5 	bne.w	8009692 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d002      	beq.n	8009534 <HAL_UART_Receive+0x28>
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e0ad      	b.n	8009694 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2222      	movs	r2, #34	@ 0x22
 8009544:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800954e:	f7f8 fa91 	bl	8001a74 <HAL_GetTick>
 8009552:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	88fa      	ldrh	r2, [r7, #6]
 8009558:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800956c:	d10e      	bne.n	800958c <HAL_UART_Receive+0x80>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d105      	bne.n	8009582 <HAL_UART_Receive+0x76>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800957c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009580:	e02d      	b.n	80095de <HAL_UART_Receive+0xd2>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	22ff      	movs	r2, #255	@ 0xff
 8009586:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800958a:	e028      	b.n	80095de <HAL_UART_Receive+0xd2>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10d      	bne.n	80095b0 <HAL_UART_Receive+0xa4>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d104      	bne.n	80095a6 <HAL_UART_Receive+0x9a>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	22ff      	movs	r2, #255	@ 0xff
 80095a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095a4:	e01b      	b.n	80095de <HAL_UART_Receive+0xd2>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	227f      	movs	r2, #127	@ 0x7f
 80095aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095ae:	e016      	b.n	80095de <HAL_UART_Receive+0xd2>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095b8:	d10d      	bne.n	80095d6 <HAL_UART_Receive+0xca>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d104      	bne.n	80095cc <HAL_UART_Receive+0xc0>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	227f      	movs	r2, #127	@ 0x7f
 80095c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095ca:	e008      	b.n	80095de <HAL_UART_Receive+0xd2>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	223f      	movs	r2, #63	@ 0x3f
 80095d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095d4:	e003      	b.n	80095de <HAL_UART_Receive+0xd2>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095ee:	d108      	bne.n	8009602 <HAL_UART_Receive+0xf6>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d104      	bne.n	8009602 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	61bb      	str	r3, [r7, #24]
 8009600:	e003      	b.n	800960a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009606:	2300      	movs	r3, #0
 8009608:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800960a:	e036      	b.n	800967a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2200      	movs	r2, #0
 8009614:	2120      	movs	r1, #32
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f001 fb7e 	bl	800ad18 <UART_WaitOnFlagUntilTimeout>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2220      	movs	r2, #32
 8009626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e032      	b.n	8009694 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10c      	bne.n	800964e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800963a:	b29a      	uxth	r2, r3
 800963c:	8a7b      	ldrh	r3, [r7, #18]
 800963e:	4013      	ands	r3, r2
 8009640:	b29a      	uxth	r2, r3
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	3302      	adds	r3, #2
 800964a:	61bb      	str	r3, [r7, #24]
 800964c:	e00c      	b.n	8009668 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009654:	b2da      	uxtb	r2, r3
 8009656:	8a7b      	ldrh	r3, [r7, #18]
 8009658:	b2db      	uxtb	r3, r3
 800965a:	4013      	ands	r3, r2
 800965c:	b2da      	uxtb	r2, r3
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	3301      	adds	r3, #1
 8009666:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800966e:	b29b      	uxth	r3, r3
 8009670:	3b01      	subs	r3, #1
 8009672:	b29a      	uxth	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009680:	b29b      	uxth	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1c2      	bne.n	800960c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2220      	movs	r2, #32
 800968a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	e000      	b.n	8009694 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8009692:	2302      	movs	r3, #2
  }
}
 8009694:	4618      	mov	r0, r3
 8009696:	3720      	adds	r7, #32
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800969c:	b480      	push	{r7}
 800969e:	b091      	sub	sp, #68	@ 0x44
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4613      	mov	r3, r2
 80096a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096b0:	2b20      	cmp	r3, #32
 80096b2:	d178      	bne.n	80097a6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d002      	beq.n	80096c0 <HAL_UART_Transmit_IT+0x24>
 80096ba:	88fb      	ldrh	r3, [r7, #6]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e071      	b.n	80097a8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	88fa      	ldrh	r2, [r7, #6]
 80096ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	88fa      	ldrh	r2, [r7, #6]
 80096d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2221      	movs	r2, #33	@ 0x21
 80096ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096f8:	d12a      	bne.n	8009750 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009702:	d107      	bne.n	8009714 <HAL_UART_Transmit_IT+0x78>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d103      	bne.n	8009714 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4a29      	ldr	r2, [pc, #164]	@ (80097b4 <HAL_UART_Transmit_IT+0x118>)
 8009710:	679a      	str	r2, [r3, #120]	@ 0x78
 8009712:	e002      	b.n	800971a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4a28      	ldr	r2, [pc, #160]	@ (80097b8 <HAL_UART_Transmit_IT+0x11c>)
 8009718:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3308      	adds	r3, #8
 8009720:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009730:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3308      	adds	r3, #8
 8009738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800973a:	637a      	str	r2, [r7, #52]	@ 0x34
 800973c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009742:	e841 2300 	strex	r3, r2, [r1]
 8009746:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e5      	bne.n	800971a <HAL_UART_Transmit_IT+0x7e>
 800974e:	e028      	b.n	80097a2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009758:	d107      	bne.n	800976a <HAL_UART_Transmit_IT+0xce>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d103      	bne.n	800976a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4a15      	ldr	r2, [pc, #84]	@ (80097bc <HAL_UART_Transmit_IT+0x120>)
 8009766:	679a      	str	r2, [r3, #120]	@ 0x78
 8009768:	e002      	b.n	8009770 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4a14      	ldr	r2, [pc, #80]	@ (80097c0 <HAL_UART_Transmit_IT+0x124>)
 800976e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	613b      	str	r3, [r7, #16]
   return(result);
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800978e:	623b      	str	r3, [r7, #32]
 8009790:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	69f9      	ldr	r1, [r7, #28]
 8009794:	6a3a      	ldr	r2, [r7, #32]
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	61bb      	str	r3, [r7, #24]
   return(result);
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e6      	bne.n	8009770 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	e000      	b.n	80097a8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80097a6:	2302      	movs	r3, #2
  }
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3744      	adds	r7, #68	@ 0x44
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	0800b13f 	.word	0x0800b13f
 80097b8:	0800b05f 	.word	0x0800b05f
 80097bc:	0800af9d 	.word	0x0800af9d
 80097c0:	0800aee5 	.word	0x0800aee5

080097c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b0ba      	sub	sp, #232	@ 0xe8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80097ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80097ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80097f2:	4013      	ands	r3, r2
 80097f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80097f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d11b      	bne.n	8009838 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009804:	f003 0320 	and.w	r3, r3, #32
 8009808:	2b00      	cmp	r3, #0
 800980a:	d015      	beq.n	8009838 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800980c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b00      	cmp	r3, #0
 8009816:	d105      	bne.n	8009824 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800981c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d009      	beq.n	8009838 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 8393 	beq.w	8009f54 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	4798      	blx	r3
      }
      return;
 8009836:	e38d      	b.n	8009f54 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 8123 	beq.w	8009a88 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009842:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009846:	4b8d      	ldr	r3, [pc, #564]	@ (8009a7c <HAL_UART_IRQHandler+0x2b8>)
 8009848:	4013      	ands	r3, r2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800984e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009852:	4b8b      	ldr	r3, [pc, #556]	@ (8009a80 <HAL_UART_IRQHandler+0x2bc>)
 8009854:	4013      	ands	r3, r2
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 8116 	beq.w	8009a88 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800985c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	2b00      	cmp	r3, #0
 8009866:	d011      	beq.n	800988c <HAL_UART_IRQHandler+0xc8>
 8009868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800986c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00b      	beq.n	800988c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2201      	movs	r2, #1
 800987a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009882:	f043 0201 	orr.w	r2, r3, #1
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800988c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009890:	f003 0302 	and.w	r3, r3, #2
 8009894:	2b00      	cmp	r3, #0
 8009896:	d011      	beq.n	80098bc <HAL_UART_IRQHandler+0xf8>
 8009898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00b      	beq.n	80098bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2202      	movs	r2, #2
 80098aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098b2:	f043 0204 	orr.w	r2, r3, #4
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098c0:	f003 0304 	and.w	r3, r3, #4
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d011      	beq.n	80098ec <HAL_UART_IRQHandler+0x128>
 80098c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00b      	beq.n	80098ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2204      	movs	r2, #4
 80098da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098e2:	f043 0202 	orr.w	r2, r3, #2
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80098ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f0:	f003 0308 	and.w	r3, r3, #8
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d017      	beq.n	8009928 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098fc:	f003 0320 	and.w	r3, r3, #32
 8009900:	2b00      	cmp	r3, #0
 8009902:	d105      	bne.n	8009910 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009904:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009908:	4b5c      	ldr	r3, [pc, #368]	@ (8009a7c <HAL_UART_IRQHandler+0x2b8>)
 800990a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00b      	beq.n	8009928 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2208      	movs	r2, #8
 8009916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800991e:	f043 0208 	orr.w	r2, r3, #8
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800992c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009930:	2b00      	cmp	r3, #0
 8009932:	d012      	beq.n	800995a <HAL_UART_IRQHandler+0x196>
 8009934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009938:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00c      	beq.n	800995a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009948:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009950:	f043 0220 	orr.w	r2, r3, #32
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 82f9 	beq.w	8009f58 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b00      	cmp	r3, #0
 8009970:	d013      	beq.n	800999a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009976:	f003 0320 	and.w	r3, r3, #32
 800997a:	2b00      	cmp	r3, #0
 800997c:	d105      	bne.n	800998a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800997e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d007      	beq.n	800999a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ae:	2b40      	cmp	r3, #64	@ 0x40
 80099b0:	d005      	beq.n	80099be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80099b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80099b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d054      	beq.n	8009a68 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f001 fa18 	bl	800adf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ce:	2b40      	cmp	r3, #64	@ 0x40
 80099d0:	d146      	bne.n	8009a60 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80099e0:	e853 3f00 	ldrex	r3, [r3]
 80099e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80099e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80099ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3308      	adds	r3, #8
 80099fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80099fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1d9      	bne.n	80099d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d017      	beq.n	8009a58 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a2e:	4a15      	ldr	r2, [pc, #84]	@ (8009a84 <HAL_UART_IRQHandler+0x2c0>)
 8009a30:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7f9 fce5 	bl	8003408 <HAL_DMA_Abort_IT>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d019      	beq.n	8009a78 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009a52:	4610      	mov	r0, r2
 8009a54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a56:	e00f      	b.n	8009a78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fa93 	bl	8009f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a5e:	e00b      	b.n	8009a78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fa8f 	bl	8009f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a66:	e007      	b.n	8009a78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fa8b 	bl	8009f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009a76:	e26f      	b.n	8009f58 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a78:	bf00      	nop
    return;
 8009a7a:	e26d      	b.n	8009f58 <HAL_UART_IRQHandler+0x794>
 8009a7c:	10000001 	.word	0x10000001
 8009a80:	04000120 	.word	0x04000120
 8009a84:	0800aec1 	.word	0x0800aec1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	f040 8203 	bne.w	8009e98 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a96:	f003 0310 	and.w	r3, r3, #16
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 81fc 	beq.w	8009e98 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f000 81f5 	beq.w	8009e98 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2210      	movs	r2, #16
 8009ab4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac0:	2b40      	cmp	r3, #64	@ 0x40
 8009ac2:	f040 816d 	bne.w	8009da0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4aa4      	ldr	r2, [pc, #656]	@ (8009d60 <HAL_UART_IRQHandler+0x59c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d068      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4aa1      	ldr	r2, [pc, #644]	@ (8009d64 <HAL_UART_IRQHandler+0x5a0>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d061      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a9f      	ldr	r2, [pc, #636]	@ (8009d68 <HAL_UART_IRQHandler+0x5a4>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d05a      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a9c      	ldr	r2, [pc, #624]	@ (8009d6c <HAL_UART_IRQHandler+0x5a8>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d053      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a9a      	ldr	r2, [pc, #616]	@ (8009d70 <HAL_UART_IRQHandler+0x5ac>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d04c      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a97      	ldr	r2, [pc, #604]	@ (8009d74 <HAL_UART_IRQHandler+0x5b0>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d045      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a95      	ldr	r2, [pc, #596]	@ (8009d78 <HAL_UART_IRQHandler+0x5b4>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d03e      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a92      	ldr	r2, [pc, #584]	@ (8009d7c <HAL_UART_IRQHandler+0x5b8>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d037      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a90      	ldr	r2, [pc, #576]	@ (8009d80 <HAL_UART_IRQHandler+0x5bc>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d030      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a8d      	ldr	r2, [pc, #564]	@ (8009d84 <HAL_UART_IRQHandler+0x5c0>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d029      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a8b      	ldr	r2, [pc, #556]	@ (8009d88 <HAL_UART_IRQHandler+0x5c4>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d022      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a88      	ldr	r2, [pc, #544]	@ (8009d8c <HAL_UART_IRQHandler+0x5c8>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d01b      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a86      	ldr	r2, [pc, #536]	@ (8009d90 <HAL_UART_IRQHandler+0x5cc>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d014      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a83      	ldr	r2, [pc, #524]	@ (8009d94 <HAL_UART_IRQHandler+0x5d0>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d00d      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a81      	ldr	r2, [pc, #516]	@ (8009d98 <HAL_UART_IRQHandler+0x5d4>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d006      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x3e2>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a7e      	ldr	r2, [pc, #504]	@ (8009d9c <HAL_UART_IRQHandler+0x5d8>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d106      	bne.n	8009bb4 <HAL_UART_IRQHandler+0x3f0>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	e005      	b.n	8009bc0 <HAL_UART_IRQHandler+0x3fc>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009bc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 80ad 	beq.w	8009d28 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	f080 80a5 	bcs.w	8009d28 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009be4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bf4:	f000 8087 	beq.w	8009d06 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c04:	e853 3f00 	ldrex	r3, [r3]
 8009c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009c2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1da      	bne.n	8009bf8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3308      	adds	r3, #8
 8009c48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c4c:	e853 3f00 	ldrex	r3, [r3]
 8009c50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c54:	f023 0301 	bic.w	r3, r3, #1
 8009c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3308      	adds	r3, #8
 8009c62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e1      	bne.n	8009c42 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3308      	adds	r3, #8
 8009c84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c88:	e853 3f00 	ldrex	r3, [r3]
 8009c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ca2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009ca8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009caa:	e841 2300 	strex	r3, r2, [r1]
 8009cae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e3      	bne.n	8009c7e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ccc:	e853 3f00 	ldrex	r3, [r3]
 8009cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cd4:	f023 0310 	bic.w	r3, r3, #16
 8009cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ce8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009cec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e4      	bne.n	8009cc4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7f9 f863 	bl	8002dcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2202      	movs	r2, #2
 8009d0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f939 	bl	8009f98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009d26:	e119      	b.n	8009f5c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d32:	429a      	cmp	r2, r3
 8009d34:	f040 8112 	bne.w	8009f5c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d44:	f040 810a 	bne.w	8009f5c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f91e 	bl	8009f98 <HAL_UARTEx_RxEventCallback>
      return;
 8009d5c:	e0fe      	b.n	8009f5c <HAL_UART_IRQHandler+0x798>
 8009d5e:	bf00      	nop
 8009d60:	40020010 	.word	0x40020010
 8009d64:	40020028 	.word	0x40020028
 8009d68:	40020040 	.word	0x40020040
 8009d6c:	40020058 	.word	0x40020058
 8009d70:	40020070 	.word	0x40020070
 8009d74:	40020088 	.word	0x40020088
 8009d78:	400200a0 	.word	0x400200a0
 8009d7c:	400200b8 	.word	0x400200b8
 8009d80:	40020410 	.word	0x40020410
 8009d84:	40020428 	.word	0x40020428
 8009d88:	40020440 	.word	0x40020440
 8009d8c:	40020458 	.word	0x40020458
 8009d90:	40020470 	.word	0x40020470
 8009d94:	40020488 	.word	0x40020488
 8009d98:	400204a0 	.word	0x400204a0
 8009d9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 80cf 	beq.w	8009f60 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 80ca 	beq.w	8009f60 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ddc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009de0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	461a      	mov	r2, r3
 8009dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8009df0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009df4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009df6:	e841 2300 	strex	r3, r2, [r1]
 8009dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1e4      	bne.n	8009dcc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3308      	adds	r3, #8
 8009e08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	623b      	str	r3, [r7, #32]
   return(result);
 8009e12:	6a3a      	ldr	r2, [r7, #32]
 8009e14:	4b55      	ldr	r3, [pc, #340]	@ (8009f6c <HAL_UART_IRQHandler+0x7a8>)
 8009e16:	4013      	ands	r3, r2
 8009e18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3308      	adds	r3, #8
 8009e22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009e26:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e3      	bne.n	8009e02 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2220      	movs	r2, #32
 8009e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	e853 3f00 	ldrex	r3, [r3]
 8009e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f023 0310 	bic.w	r3, r3, #16
 8009e62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e74:	69b9      	ldr	r1, [r7, #24]
 8009e76:	69fa      	ldr	r2, [r7, #28]
 8009e78:	e841 2300 	strex	r3, r2, [r1]
 8009e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e4      	bne.n	8009e4e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f881 	bl	8009f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e96:	e063      	b.n	8009f60 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00e      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x6fe>
 8009ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d008      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f001 f9df 	bl	800b27e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ec0:	e051      	b.n	8009f66 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d014      	beq.n	8009ef8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d105      	bne.n	8009ee6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d008      	beq.n	8009ef8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d03a      	beq.n	8009f64 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	4798      	blx	r3
    }
    return;
 8009ef6:	e035      	b.n	8009f64 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d009      	beq.n	8009f18 <HAL_UART_IRQHandler+0x754>
 8009f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d003      	beq.n	8009f18 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 f989 	bl	800b228 <UART_EndTransmit_IT>
    return;
 8009f16:	e026      	b.n	8009f66 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d009      	beq.n	8009f38 <HAL_UART_IRQHandler+0x774>
 8009f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 f9b8 	bl	800b2a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f36:	e016      	b.n	8009f66 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d010      	beq.n	8009f66 <HAL_UART_IRQHandler+0x7a2>
 8009f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	da0c      	bge.n	8009f66 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 f9a0 	bl	800b292 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f52:	e008      	b.n	8009f66 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009f54:	bf00      	nop
 8009f56:	e006      	b.n	8009f66 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009f58:	bf00      	nop
 8009f5a:	e004      	b.n	8009f66 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009f5c:	bf00      	nop
 8009f5e:	e002      	b.n	8009f66 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009f60:	bf00      	nop
 8009f62:	e000      	b.n	8009f66 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009f64:	bf00      	nop
  }
}
 8009f66:	37e8      	adds	r7, #232	@ 0xe8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	effffffe 	.word	0xeffffffe

08009f70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fb4:	b092      	sub	sp, #72	@ 0x48
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	69db      	ldr	r3, [r3, #28]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	4bbe      	ldr	r3, [pc, #760]	@ (800a2d8 <UART_SetConfig+0x328>)
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	6812      	ldr	r2, [r2, #0]
 8009fe6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009fe8:	430b      	orrs	r3, r1
 8009fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	68da      	ldr	r2, [r3, #12]
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4ab3      	ldr	r2, [pc, #716]	@ (800a2dc <UART_SetConfig+0x32c>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d004      	beq.n	800a01c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a018:	4313      	orrs	r3, r2
 800a01a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	689a      	ldr	r2, [r3, #8]
 800a022:	4baf      	ldr	r3, [pc, #700]	@ (800a2e0 <UART_SetConfig+0x330>)
 800a024:	4013      	ands	r3, r2
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	6812      	ldr	r2, [r2, #0]
 800a02a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a02c:	430b      	orrs	r3, r1
 800a02e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a036:	f023 010f 	bic.w	r1, r3, #15
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4aa6      	ldr	r2, [pc, #664]	@ (800a2e4 <UART_SetConfig+0x334>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d177      	bne.n	800a140 <UART_SetConfig+0x190>
 800a050:	4ba5      	ldr	r3, [pc, #660]	@ (800a2e8 <UART_SetConfig+0x338>)
 800a052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a054:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a058:	2b28      	cmp	r3, #40	@ 0x28
 800a05a:	d86d      	bhi.n	800a138 <UART_SetConfig+0x188>
 800a05c:	a201      	add	r2, pc, #4	@ (adr r2, 800a064 <UART_SetConfig+0xb4>)
 800a05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a062:	bf00      	nop
 800a064:	0800a109 	.word	0x0800a109
 800a068:	0800a139 	.word	0x0800a139
 800a06c:	0800a139 	.word	0x0800a139
 800a070:	0800a139 	.word	0x0800a139
 800a074:	0800a139 	.word	0x0800a139
 800a078:	0800a139 	.word	0x0800a139
 800a07c:	0800a139 	.word	0x0800a139
 800a080:	0800a139 	.word	0x0800a139
 800a084:	0800a111 	.word	0x0800a111
 800a088:	0800a139 	.word	0x0800a139
 800a08c:	0800a139 	.word	0x0800a139
 800a090:	0800a139 	.word	0x0800a139
 800a094:	0800a139 	.word	0x0800a139
 800a098:	0800a139 	.word	0x0800a139
 800a09c:	0800a139 	.word	0x0800a139
 800a0a0:	0800a139 	.word	0x0800a139
 800a0a4:	0800a119 	.word	0x0800a119
 800a0a8:	0800a139 	.word	0x0800a139
 800a0ac:	0800a139 	.word	0x0800a139
 800a0b0:	0800a139 	.word	0x0800a139
 800a0b4:	0800a139 	.word	0x0800a139
 800a0b8:	0800a139 	.word	0x0800a139
 800a0bc:	0800a139 	.word	0x0800a139
 800a0c0:	0800a139 	.word	0x0800a139
 800a0c4:	0800a121 	.word	0x0800a121
 800a0c8:	0800a139 	.word	0x0800a139
 800a0cc:	0800a139 	.word	0x0800a139
 800a0d0:	0800a139 	.word	0x0800a139
 800a0d4:	0800a139 	.word	0x0800a139
 800a0d8:	0800a139 	.word	0x0800a139
 800a0dc:	0800a139 	.word	0x0800a139
 800a0e0:	0800a139 	.word	0x0800a139
 800a0e4:	0800a129 	.word	0x0800a129
 800a0e8:	0800a139 	.word	0x0800a139
 800a0ec:	0800a139 	.word	0x0800a139
 800a0f0:	0800a139 	.word	0x0800a139
 800a0f4:	0800a139 	.word	0x0800a139
 800a0f8:	0800a139 	.word	0x0800a139
 800a0fc:	0800a139 	.word	0x0800a139
 800a100:	0800a139 	.word	0x0800a139
 800a104:	0800a131 	.word	0x0800a131
 800a108:	2301      	movs	r3, #1
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10e:	e222      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a110:	2304      	movs	r3, #4
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a116:	e21e      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a118:	2308      	movs	r3, #8
 800a11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11e:	e21a      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a120:	2310      	movs	r3, #16
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a126:	e216      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a128:	2320      	movs	r3, #32
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12e:	e212      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a130:	2340      	movs	r3, #64	@ 0x40
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a136:	e20e      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a138:	2380      	movs	r3, #128	@ 0x80
 800a13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13e:	e20a      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a69      	ldr	r2, [pc, #420]	@ (800a2ec <UART_SetConfig+0x33c>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d130      	bne.n	800a1ac <UART_SetConfig+0x1fc>
 800a14a:	4b67      	ldr	r3, [pc, #412]	@ (800a2e8 <UART_SetConfig+0x338>)
 800a14c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a14e:	f003 0307 	and.w	r3, r3, #7
 800a152:	2b05      	cmp	r3, #5
 800a154:	d826      	bhi.n	800a1a4 <UART_SetConfig+0x1f4>
 800a156:	a201      	add	r2, pc, #4	@ (adr r2, 800a15c <UART_SetConfig+0x1ac>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a175 	.word	0x0800a175
 800a160:	0800a17d 	.word	0x0800a17d
 800a164:	0800a185 	.word	0x0800a185
 800a168:	0800a18d 	.word	0x0800a18d
 800a16c:	0800a195 	.word	0x0800a195
 800a170:	0800a19d 	.word	0x0800a19d
 800a174:	2300      	movs	r3, #0
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17a:	e1ec      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a17c:	2304      	movs	r3, #4
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a182:	e1e8      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a184:	2308      	movs	r3, #8
 800a186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18a:	e1e4      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a18c:	2310      	movs	r3, #16
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a192:	e1e0      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a194:	2320      	movs	r3, #32
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19a:	e1dc      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a19c:	2340      	movs	r3, #64	@ 0x40
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a2:	e1d8      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a1a4:	2380      	movs	r3, #128	@ 0x80
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1aa:	e1d4      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a4f      	ldr	r2, [pc, #316]	@ (800a2f0 <UART_SetConfig+0x340>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d130      	bne.n	800a218 <UART_SetConfig+0x268>
 800a1b6:	4b4c      	ldr	r3, [pc, #304]	@ (800a2e8 <UART_SetConfig+0x338>)
 800a1b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	2b05      	cmp	r3, #5
 800a1c0:	d826      	bhi.n	800a210 <UART_SetConfig+0x260>
 800a1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c8 <UART_SetConfig+0x218>)
 800a1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c8:	0800a1e1 	.word	0x0800a1e1
 800a1cc:	0800a1e9 	.word	0x0800a1e9
 800a1d0:	0800a1f1 	.word	0x0800a1f1
 800a1d4:	0800a1f9 	.word	0x0800a1f9
 800a1d8:	0800a201 	.word	0x0800a201
 800a1dc:	0800a209 	.word	0x0800a209
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e6:	e1b6      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a1e8:	2304      	movs	r3, #4
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ee:	e1b2      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a1f0:	2308      	movs	r3, #8
 800a1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f6:	e1ae      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a1f8:	2310      	movs	r3, #16
 800a1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fe:	e1aa      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a200:	2320      	movs	r3, #32
 800a202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a206:	e1a6      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a208:	2340      	movs	r3, #64	@ 0x40
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20e:	e1a2      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a210:	2380      	movs	r3, #128	@ 0x80
 800a212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a216:	e19e      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a35      	ldr	r2, [pc, #212]	@ (800a2f4 <UART_SetConfig+0x344>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d130      	bne.n	800a284 <UART_SetConfig+0x2d4>
 800a222:	4b31      	ldr	r3, [pc, #196]	@ (800a2e8 <UART_SetConfig+0x338>)
 800a224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	2b05      	cmp	r3, #5
 800a22c:	d826      	bhi.n	800a27c <UART_SetConfig+0x2cc>
 800a22e:	a201      	add	r2, pc, #4	@ (adr r2, 800a234 <UART_SetConfig+0x284>)
 800a230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a234:	0800a24d 	.word	0x0800a24d
 800a238:	0800a255 	.word	0x0800a255
 800a23c:	0800a25d 	.word	0x0800a25d
 800a240:	0800a265 	.word	0x0800a265
 800a244:	0800a26d 	.word	0x0800a26d
 800a248:	0800a275 	.word	0x0800a275
 800a24c:	2300      	movs	r3, #0
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a252:	e180      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a254:	2304      	movs	r3, #4
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25a:	e17c      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a25c:	2308      	movs	r3, #8
 800a25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a262:	e178      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a264:	2310      	movs	r3, #16
 800a266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26a:	e174      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a26c:	2320      	movs	r3, #32
 800a26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a272:	e170      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a274:	2340      	movs	r3, #64	@ 0x40
 800a276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27a:	e16c      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a27c:	2380      	movs	r3, #128	@ 0x80
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a282:	e168      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a1b      	ldr	r2, [pc, #108]	@ (800a2f8 <UART_SetConfig+0x348>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d142      	bne.n	800a314 <UART_SetConfig+0x364>
 800a28e:	4b16      	ldr	r3, [pc, #88]	@ (800a2e8 <UART_SetConfig+0x338>)
 800a290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a292:	f003 0307 	and.w	r3, r3, #7
 800a296:	2b05      	cmp	r3, #5
 800a298:	d838      	bhi.n	800a30c <UART_SetConfig+0x35c>
 800a29a:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <UART_SetConfig+0x2f0>)
 800a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a0:	0800a2b9 	.word	0x0800a2b9
 800a2a4:	0800a2c1 	.word	0x0800a2c1
 800a2a8:	0800a2c9 	.word	0x0800a2c9
 800a2ac:	0800a2d1 	.word	0x0800a2d1
 800a2b0:	0800a2fd 	.word	0x0800a2fd
 800a2b4:	0800a305 	.word	0x0800a305
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2be:	e14a      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a2c0:	2304      	movs	r3, #4
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c6:	e146      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a2c8:	2308      	movs	r3, #8
 800a2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ce:	e142      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d6:	e13e      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a2d8:	cfff69f3 	.word	0xcfff69f3
 800a2dc:	58000c00 	.word	0x58000c00
 800a2e0:	11fff4ff 	.word	0x11fff4ff
 800a2e4:	40011000 	.word	0x40011000
 800a2e8:	58024400 	.word	0x58024400
 800a2ec:	40004400 	.word	0x40004400
 800a2f0:	40004800 	.word	0x40004800
 800a2f4:	40004c00 	.word	0x40004c00
 800a2f8:	40005000 	.word	0x40005000
 800a2fc:	2320      	movs	r3, #32
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a302:	e128      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a304:	2340      	movs	r3, #64	@ 0x40
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30a:	e124      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a30c:	2380      	movs	r3, #128	@ 0x80
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a312:	e120      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4acb      	ldr	r2, [pc, #812]	@ (800a648 <UART_SetConfig+0x698>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d176      	bne.n	800a40c <UART_SetConfig+0x45c>
 800a31e:	4bcb      	ldr	r3, [pc, #812]	@ (800a64c <UART_SetConfig+0x69c>)
 800a320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a326:	2b28      	cmp	r3, #40	@ 0x28
 800a328:	d86c      	bhi.n	800a404 <UART_SetConfig+0x454>
 800a32a:	a201      	add	r2, pc, #4	@ (adr r2, 800a330 <UART_SetConfig+0x380>)
 800a32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a330:	0800a3d5 	.word	0x0800a3d5
 800a334:	0800a405 	.word	0x0800a405
 800a338:	0800a405 	.word	0x0800a405
 800a33c:	0800a405 	.word	0x0800a405
 800a340:	0800a405 	.word	0x0800a405
 800a344:	0800a405 	.word	0x0800a405
 800a348:	0800a405 	.word	0x0800a405
 800a34c:	0800a405 	.word	0x0800a405
 800a350:	0800a3dd 	.word	0x0800a3dd
 800a354:	0800a405 	.word	0x0800a405
 800a358:	0800a405 	.word	0x0800a405
 800a35c:	0800a405 	.word	0x0800a405
 800a360:	0800a405 	.word	0x0800a405
 800a364:	0800a405 	.word	0x0800a405
 800a368:	0800a405 	.word	0x0800a405
 800a36c:	0800a405 	.word	0x0800a405
 800a370:	0800a3e5 	.word	0x0800a3e5
 800a374:	0800a405 	.word	0x0800a405
 800a378:	0800a405 	.word	0x0800a405
 800a37c:	0800a405 	.word	0x0800a405
 800a380:	0800a405 	.word	0x0800a405
 800a384:	0800a405 	.word	0x0800a405
 800a388:	0800a405 	.word	0x0800a405
 800a38c:	0800a405 	.word	0x0800a405
 800a390:	0800a3ed 	.word	0x0800a3ed
 800a394:	0800a405 	.word	0x0800a405
 800a398:	0800a405 	.word	0x0800a405
 800a39c:	0800a405 	.word	0x0800a405
 800a3a0:	0800a405 	.word	0x0800a405
 800a3a4:	0800a405 	.word	0x0800a405
 800a3a8:	0800a405 	.word	0x0800a405
 800a3ac:	0800a405 	.word	0x0800a405
 800a3b0:	0800a3f5 	.word	0x0800a3f5
 800a3b4:	0800a405 	.word	0x0800a405
 800a3b8:	0800a405 	.word	0x0800a405
 800a3bc:	0800a405 	.word	0x0800a405
 800a3c0:	0800a405 	.word	0x0800a405
 800a3c4:	0800a405 	.word	0x0800a405
 800a3c8:	0800a405 	.word	0x0800a405
 800a3cc:	0800a405 	.word	0x0800a405
 800a3d0:	0800a3fd 	.word	0x0800a3fd
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3da:	e0bc      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a3dc:	2304      	movs	r3, #4
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e2:	e0b8      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a3e4:	2308      	movs	r3, #8
 800a3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ea:	e0b4      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a3ec:	2310      	movs	r3, #16
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f2:	e0b0      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a3f4:	2320      	movs	r3, #32
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fa:	e0ac      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a3fc:	2340      	movs	r3, #64	@ 0x40
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a402:	e0a8      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a404:	2380      	movs	r3, #128	@ 0x80
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40a:	e0a4      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a8f      	ldr	r2, [pc, #572]	@ (800a650 <UART_SetConfig+0x6a0>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d130      	bne.n	800a478 <UART_SetConfig+0x4c8>
 800a416:	4b8d      	ldr	r3, [pc, #564]	@ (800a64c <UART_SetConfig+0x69c>)
 800a418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a41a:	f003 0307 	and.w	r3, r3, #7
 800a41e:	2b05      	cmp	r3, #5
 800a420:	d826      	bhi.n	800a470 <UART_SetConfig+0x4c0>
 800a422:	a201      	add	r2, pc, #4	@ (adr r2, 800a428 <UART_SetConfig+0x478>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a441 	.word	0x0800a441
 800a42c:	0800a449 	.word	0x0800a449
 800a430:	0800a451 	.word	0x0800a451
 800a434:	0800a459 	.word	0x0800a459
 800a438:	0800a461 	.word	0x0800a461
 800a43c:	0800a469 	.word	0x0800a469
 800a440:	2300      	movs	r3, #0
 800a442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a446:	e086      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a448:	2304      	movs	r3, #4
 800a44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44e:	e082      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a450:	2308      	movs	r3, #8
 800a452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a456:	e07e      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a458:	2310      	movs	r3, #16
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45e:	e07a      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a460:	2320      	movs	r3, #32
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a466:	e076      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a468:	2340      	movs	r3, #64	@ 0x40
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46e:	e072      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a470:	2380      	movs	r3, #128	@ 0x80
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a476:	e06e      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a75      	ldr	r2, [pc, #468]	@ (800a654 <UART_SetConfig+0x6a4>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d130      	bne.n	800a4e4 <UART_SetConfig+0x534>
 800a482:	4b72      	ldr	r3, [pc, #456]	@ (800a64c <UART_SetConfig+0x69c>)
 800a484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a486:	f003 0307 	and.w	r3, r3, #7
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	d826      	bhi.n	800a4dc <UART_SetConfig+0x52c>
 800a48e:	a201      	add	r2, pc, #4	@ (adr r2, 800a494 <UART_SetConfig+0x4e4>)
 800a490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a494:	0800a4ad 	.word	0x0800a4ad
 800a498:	0800a4b5 	.word	0x0800a4b5
 800a49c:	0800a4bd 	.word	0x0800a4bd
 800a4a0:	0800a4c5 	.word	0x0800a4c5
 800a4a4:	0800a4cd 	.word	0x0800a4cd
 800a4a8:	0800a4d5 	.word	0x0800a4d5
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b2:	e050      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ba:	e04c      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a4bc:	2308      	movs	r3, #8
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	e048      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a4c4:	2310      	movs	r3, #16
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ca:	e044      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a4cc:	2320      	movs	r3, #32
 800a4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d2:	e040      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a4d4:	2340      	movs	r3, #64	@ 0x40
 800a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4da:	e03c      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a4dc:	2380      	movs	r3, #128	@ 0x80
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e038      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a5b      	ldr	r2, [pc, #364]	@ (800a658 <UART_SetConfig+0x6a8>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d130      	bne.n	800a550 <UART_SetConfig+0x5a0>
 800a4ee:	4b57      	ldr	r3, [pc, #348]	@ (800a64c <UART_SetConfig+0x69c>)
 800a4f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	2b05      	cmp	r3, #5
 800a4f8:	d826      	bhi.n	800a548 <UART_SetConfig+0x598>
 800a4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a500 <UART_SetConfig+0x550>)
 800a4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a500:	0800a519 	.word	0x0800a519
 800a504:	0800a521 	.word	0x0800a521
 800a508:	0800a529 	.word	0x0800a529
 800a50c:	0800a531 	.word	0x0800a531
 800a510:	0800a539 	.word	0x0800a539
 800a514:	0800a541 	.word	0x0800a541
 800a518:	2302      	movs	r3, #2
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51e:	e01a      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a520:	2304      	movs	r3, #4
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a526:	e016      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a528:	2308      	movs	r3, #8
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52e:	e012      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a530:	2310      	movs	r3, #16
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a536:	e00e      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a538:	2320      	movs	r3, #32
 800a53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53e:	e00a      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a540:	2340      	movs	r3, #64	@ 0x40
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a546:	e006      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a548:	2380      	movs	r3, #128	@ 0x80
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54e:	e002      	b.n	800a556 <UART_SetConfig+0x5a6>
 800a550:	2380      	movs	r3, #128	@ 0x80
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a3f      	ldr	r2, [pc, #252]	@ (800a658 <UART_SetConfig+0x6a8>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	f040 80f8 	bne.w	800a752 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a562:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a566:	2b20      	cmp	r3, #32
 800a568:	dc46      	bgt.n	800a5f8 <UART_SetConfig+0x648>
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	f2c0 8082 	blt.w	800a674 <UART_SetConfig+0x6c4>
 800a570:	3b02      	subs	r3, #2
 800a572:	2b1e      	cmp	r3, #30
 800a574:	d87e      	bhi.n	800a674 <UART_SetConfig+0x6c4>
 800a576:	a201      	add	r2, pc, #4	@ (adr r2, 800a57c <UART_SetConfig+0x5cc>)
 800a578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57c:	0800a5ff 	.word	0x0800a5ff
 800a580:	0800a675 	.word	0x0800a675
 800a584:	0800a607 	.word	0x0800a607
 800a588:	0800a675 	.word	0x0800a675
 800a58c:	0800a675 	.word	0x0800a675
 800a590:	0800a675 	.word	0x0800a675
 800a594:	0800a617 	.word	0x0800a617
 800a598:	0800a675 	.word	0x0800a675
 800a59c:	0800a675 	.word	0x0800a675
 800a5a0:	0800a675 	.word	0x0800a675
 800a5a4:	0800a675 	.word	0x0800a675
 800a5a8:	0800a675 	.word	0x0800a675
 800a5ac:	0800a675 	.word	0x0800a675
 800a5b0:	0800a675 	.word	0x0800a675
 800a5b4:	0800a627 	.word	0x0800a627
 800a5b8:	0800a675 	.word	0x0800a675
 800a5bc:	0800a675 	.word	0x0800a675
 800a5c0:	0800a675 	.word	0x0800a675
 800a5c4:	0800a675 	.word	0x0800a675
 800a5c8:	0800a675 	.word	0x0800a675
 800a5cc:	0800a675 	.word	0x0800a675
 800a5d0:	0800a675 	.word	0x0800a675
 800a5d4:	0800a675 	.word	0x0800a675
 800a5d8:	0800a675 	.word	0x0800a675
 800a5dc:	0800a675 	.word	0x0800a675
 800a5e0:	0800a675 	.word	0x0800a675
 800a5e4:	0800a675 	.word	0x0800a675
 800a5e8:	0800a675 	.word	0x0800a675
 800a5ec:	0800a675 	.word	0x0800a675
 800a5f0:	0800a675 	.word	0x0800a675
 800a5f4:	0800a667 	.word	0x0800a667
 800a5f8:	2b40      	cmp	r3, #64	@ 0x40
 800a5fa:	d037      	beq.n	800a66c <UART_SetConfig+0x6bc>
 800a5fc:	e03a      	b.n	800a674 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a5fe:	f7fd f8c5 	bl	800778c <HAL_RCCEx_GetD3PCLK1Freq>
 800a602:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a604:	e03c      	b.n	800a680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fd f8d4 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a614:	e034      	b.n	800a680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a616:	f107 0318 	add.w	r3, r7, #24
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fd fa20 	bl	8007a60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a624:	e02c      	b.n	800a680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a626:	4b09      	ldr	r3, [pc, #36]	@ (800a64c <UART_SetConfig+0x69c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 0320 	and.w	r3, r3, #32
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d016      	beq.n	800a660 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a632:	4b06      	ldr	r3, [pc, #24]	@ (800a64c <UART_SetConfig+0x69c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	08db      	lsrs	r3, r3, #3
 800a638:	f003 0303 	and.w	r3, r3, #3
 800a63c:	4a07      	ldr	r2, [pc, #28]	@ (800a65c <UART_SetConfig+0x6ac>)
 800a63e:	fa22 f303 	lsr.w	r3, r2, r3
 800a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a644:	e01c      	b.n	800a680 <UART_SetConfig+0x6d0>
 800a646:	bf00      	nop
 800a648:	40011400 	.word	0x40011400
 800a64c:	58024400 	.word	0x58024400
 800a650:	40007800 	.word	0x40007800
 800a654:	40007c00 	.word	0x40007c00
 800a658:	58000c00 	.word	0x58000c00
 800a65c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a660:	4b9d      	ldr	r3, [pc, #628]	@ (800a8d8 <UART_SetConfig+0x928>)
 800a662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a664:	e00c      	b.n	800a680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a666:	4b9d      	ldr	r3, [pc, #628]	@ (800a8dc <UART_SetConfig+0x92c>)
 800a668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66a:	e009      	b.n	800a680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a66c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a672:	e005      	b.n	800a680 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a674:	2300      	movs	r3, #0
 800a676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a67e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 81de 	beq.w	800aa44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68c:	4a94      	ldr	r2, [pc, #592]	@ (800a8e0 <UART_SetConfig+0x930>)
 800a68e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a692:	461a      	mov	r2, r3
 800a694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a696:	fbb3 f3f2 	udiv	r3, r3, r2
 800a69a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	4413      	add	r3, r2
 800a6a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d305      	bcc.n	800a6b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d903      	bls.n	800a6c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a6be:	e1c1      	b.n	800aa44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	60bb      	str	r3, [r7, #8]
 800a6c6:	60fa      	str	r2, [r7, #12]
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6cc:	4a84      	ldr	r2, [pc, #528]	@ (800a8e0 <UART_SetConfig+0x930>)
 800a6ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	603b      	str	r3, [r7, #0]
 800a6d8:	607a      	str	r2, [r7, #4]
 800a6da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6e2:	f7f6 f811 	bl	8000708 <__aeabi_uldivmod>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	f04f 0200 	mov.w	r2, #0
 800a6f2:	f04f 0300 	mov.w	r3, #0
 800a6f6:	020b      	lsls	r3, r1, #8
 800a6f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a6fc:	0202      	lsls	r2, r0, #8
 800a6fe:	6979      	ldr	r1, [r7, #20]
 800a700:	6849      	ldr	r1, [r1, #4]
 800a702:	0849      	lsrs	r1, r1, #1
 800a704:	2000      	movs	r0, #0
 800a706:	460c      	mov	r4, r1
 800a708:	4605      	mov	r5, r0
 800a70a:	eb12 0804 	adds.w	r8, r2, r4
 800a70e:	eb43 0905 	adc.w	r9, r3, r5
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	469a      	mov	sl, r3
 800a71a:	4693      	mov	fp, r2
 800a71c:	4652      	mov	r2, sl
 800a71e:	465b      	mov	r3, fp
 800a720:	4640      	mov	r0, r8
 800a722:	4649      	mov	r1, r9
 800a724:	f7f5 fff0 	bl	8000708 <__aeabi_uldivmod>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	4613      	mov	r3, r2
 800a72e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a732:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a736:	d308      	bcc.n	800a74a <UART_SetConfig+0x79a>
 800a738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a73e:	d204      	bcs.n	800a74a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a746:	60da      	str	r2, [r3, #12]
 800a748:	e17c      	b.n	800aa44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a750:	e178      	b.n	800aa44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a75a:	f040 80c5 	bne.w	800a8e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a75e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a762:	2b20      	cmp	r3, #32
 800a764:	dc48      	bgt.n	800a7f8 <UART_SetConfig+0x848>
 800a766:	2b00      	cmp	r3, #0
 800a768:	db7b      	blt.n	800a862 <UART_SetConfig+0x8b2>
 800a76a:	2b20      	cmp	r3, #32
 800a76c:	d879      	bhi.n	800a862 <UART_SetConfig+0x8b2>
 800a76e:	a201      	add	r2, pc, #4	@ (adr r2, 800a774 <UART_SetConfig+0x7c4>)
 800a770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a774:	0800a7ff 	.word	0x0800a7ff
 800a778:	0800a807 	.word	0x0800a807
 800a77c:	0800a863 	.word	0x0800a863
 800a780:	0800a863 	.word	0x0800a863
 800a784:	0800a80f 	.word	0x0800a80f
 800a788:	0800a863 	.word	0x0800a863
 800a78c:	0800a863 	.word	0x0800a863
 800a790:	0800a863 	.word	0x0800a863
 800a794:	0800a81f 	.word	0x0800a81f
 800a798:	0800a863 	.word	0x0800a863
 800a79c:	0800a863 	.word	0x0800a863
 800a7a0:	0800a863 	.word	0x0800a863
 800a7a4:	0800a863 	.word	0x0800a863
 800a7a8:	0800a863 	.word	0x0800a863
 800a7ac:	0800a863 	.word	0x0800a863
 800a7b0:	0800a863 	.word	0x0800a863
 800a7b4:	0800a82f 	.word	0x0800a82f
 800a7b8:	0800a863 	.word	0x0800a863
 800a7bc:	0800a863 	.word	0x0800a863
 800a7c0:	0800a863 	.word	0x0800a863
 800a7c4:	0800a863 	.word	0x0800a863
 800a7c8:	0800a863 	.word	0x0800a863
 800a7cc:	0800a863 	.word	0x0800a863
 800a7d0:	0800a863 	.word	0x0800a863
 800a7d4:	0800a863 	.word	0x0800a863
 800a7d8:	0800a863 	.word	0x0800a863
 800a7dc:	0800a863 	.word	0x0800a863
 800a7e0:	0800a863 	.word	0x0800a863
 800a7e4:	0800a863 	.word	0x0800a863
 800a7e8:	0800a863 	.word	0x0800a863
 800a7ec:	0800a863 	.word	0x0800a863
 800a7f0:	0800a863 	.word	0x0800a863
 800a7f4:	0800a855 	.word	0x0800a855
 800a7f8:	2b40      	cmp	r3, #64	@ 0x40
 800a7fa:	d02e      	beq.n	800a85a <UART_SetConfig+0x8aa>
 800a7fc:	e031      	b.n	800a862 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7fe:	f7fb f80f 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 800a802:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a804:	e033      	b.n	800a86e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a806:	f7fb f821 	bl	800584c <HAL_RCC_GetPCLK2Freq>
 800a80a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a80c:	e02f      	b.n	800a86e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a80e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a812:	4618      	mov	r0, r3
 800a814:	f7fc ffd0 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a81c:	e027      	b.n	800a86e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a81e:	f107 0318 	add.w	r3, r7, #24
 800a822:	4618      	mov	r0, r3
 800a824:	f7fd f91c 	bl	8007a60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a82c:	e01f      	b.n	800a86e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a82e:	4b2d      	ldr	r3, [pc, #180]	@ (800a8e4 <UART_SetConfig+0x934>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d009      	beq.n	800a84e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a83a:	4b2a      	ldr	r3, [pc, #168]	@ (800a8e4 <UART_SetConfig+0x934>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	08db      	lsrs	r3, r3, #3
 800a840:	f003 0303 	and.w	r3, r3, #3
 800a844:	4a24      	ldr	r2, [pc, #144]	@ (800a8d8 <UART_SetConfig+0x928>)
 800a846:	fa22 f303 	lsr.w	r3, r2, r3
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a84c:	e00f      	b.n	800a86e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a84e:	4b22      	ldr	r3, [pc, #136]	@ (800a8d8 <UART_SetConfig+0x928>)
 800a850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a852:	e00c      	b.n	800a86e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a854:	4b21      	ldr	r3, [pc, #132]	@ (800a8dc <UART_SetConfig+0x92c>)
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a858:	e009      	b.n	800a86e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a85a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a860:	e005      	b.n	800a86e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a862:	2300      	movs	r3, #0
 800a864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a86c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a86e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80e7 	beq.w	800aa44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87a:	4a19      	ldr	r2, [pc, #100]	@ (800a8e0 <UART_SetConfig+0x930>)
 800a87c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a880:	461a      	mov	r2, r3
 800a882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a884:	fbb3 f3f2 	udiv	r3, r3, r2
 800a888:	005a      	lsls	r2, r3, #1
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	085b      	lsrs	r3, r3, #1
 800a890:	441a      	add	r2, r3
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	fbb2 f3f3 	udiv	r3, r2, r3
 800a89a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89e:	2b0f      	cmp	r3, #15
 800a8a0:	d916      	bls.n	800a8d0 <UART_SetConfig+0x920>
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8a8:	d212      	bcs.n	800a8d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	f023 030f 	bic.w	r3, r3, #15
 800a8b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b6:	085b      	lsrs	r3, r3, #1
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	f003 0307 	and.w	r3, r3, #7
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a8cc:	60da      	str	r2, [r3, #12]
 800a8ce:	e0b9      	b.n	800aa44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a8d6:	e0b5      	b.n	800aa44 <UART_SetConfig+0xa94>
 800a8d8:	03d09000 	.word	0x03d09000
 800a8dc:	003d0900 	.word	0x003d0900
 800a8e0:	080109dc 	.word	0x080109dc
 800a8e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a8ec:	2b20      	cmp	r3, #32
 800a8ee:	dc49      	bgt.n	800a984 <UART_SetConfig+0x9d4>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	db7c      	blt.n	800a9ee <UART_SetConfig+0xa3e>
 800a8f4:	2b20      	cmp	r3, #32
 800a8f6:	d87a      	bhi.n	800a9ee <UART_SetConfig+0xa3e>
 800a8f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a900 <UART_SetConfig+0x950>)
 800a8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fe:	bf00      	nop
 800a900:	0800a98b 	.word	0x0800a98b
 800a904:	0800a993 	.word	0x0800a993
 800a908:	0800a9ef 	.word	0x0800a9ef
 800a90c:	0800a9ef 	.word	0x0800a9ef
 800a910:	0800a99b 	.word	0x0800a99b
 800a914:	0800a9ef 	.word	0x0800a9ef
 800a918:	0800a9ef 	.word	0x0800a9ef
 800a91c:	0800a9ef 	.word	0x0800a9ef
 800a920:	0800a9ab 	.word	0x0800a9ab
 800a924:	0800a9ef 	.word	0x0800a9ef
 800a928:	0800a9ef 	.word	0x0800a9ef
 800a92c:	0800a9ef 	.word	0x0800a9ef
 800a930:	0800a9ef 	.word	0x0800a9ef
 800a934:	0800a9ef 	.word	0x0800a9ef
 800a938:	0800a9ef 	.word	0x0800a9ef
 800a93c:	0800a9ef 	.word	0x0800a9ef
 800a940:	0800a9bb 	.word	0x0800a9bb
 800a944:	0800a9ef 	.word	0x0800a9ef
 800a948:	0800a9ef 	.word	0x0800a9ef
 800a94c:	0800a9ef 	.word	0x0800a9ef
 800a950:	0800a9ef 	.word	0x0800a9ef
 800a954:	0800a9ef 	.word	0x0800a9ef
 800a958:	0800a9ef 	.word	0x0800a9ef
 800a95c:	0800a9ef 	.word	0x0800a9ef
 800a960:	0800a9ef 	.word	0x0800a9ef
 800a964:	0800a9ef 	.word	0x0800a9ef
 800a968:	0800a9ef 	.word	0x0800a9ef
 800a96c:	0800a9ef 	.word	0x0800a9ef
 800a970:	0800a9ef 	.word	0x0800a9ef
 800a974:	0800a9ef 	.word	0x0800a9ef
 800a978:	0800a9ef 	.word	0x0800a9ef
 800a97c:	0800a9ef 	.word	0x0800a9ef
 800a980:	0800a9e1 	.word	0x0800a9e1
 800a984:	2b40      	cmp	r3, #64	@ 0x40
 800a986:	d02e      	beq.n	800a9e6 <UART_SetConfig+0xa36>
 800a988:	e031      	b.n	800a9ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a98a:	f7fa ff49 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 800a98e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a990:	e033      	b.n	800a9fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a992:	f7fa ff5b 	bl	800584c <HAL_RCC_GetPCLK2Freq>
 800a996:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a998:	e02f      	b.n	800a9fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a99a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fc ff0a 	bl	80077b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a8:	e027      	b.n	800a9fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9aa:	f107 0318 	add.w	r3, r7, #24
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fd f856 	bl	8007a60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b8:	e01f      	b.n	800a9fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9ba:	4b2d      	ldr	r3, [pc, #180]	@ (800aa70 <UART_SetConfig+0xac0>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0320 	and.w	r3, r3, #32
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d009      	beq.n	800a9da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9c6:	4b2a      	ldr	r3, [pc, #168]	@ (800aa70 <UART_SetConfig+0xac0>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	08db      	lsrs	r3, r3, #3
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	4a28      	ldr	r2, [pc, #160]	@ (800aa74 <UART_SetConfig+0xac4>)
 800a9d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9d8:	e00f      	b.n	800a9fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a9da:	4b26      	ldr	r3, [pc, #152]	@ (800aa74 <UART_SetConfig+0xac4>)
 800a9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9de:	e00c      	b.n	800a9fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9e0:	4b25      	ldr	r3, [pc, #148]	@ (800aa78 <UART_SetConfig+0xac8>)
 800a9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e4:	e009      	b.n	800a9fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ec:	e005      	b.n	800a9fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a9f8:	bf00      	nop
    }

    if (pclk != 0U)
 800a9fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d021      	beq.n	800aa44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa04:	4a1d      	ldr	r2, [pc, #116]	@ (800aa7c <UART_SetConfig+0xacc>)
 800aa06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	085b      	lsrs	r3, r3, #1
 800aa18:	441a      	add	r2, r3
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa26:	2b0f      	cmp	r3, #15
 800aa28:	d909      	bls.n	800aa3e <UART_SetConfig+0xa8e>
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa30:	d205      	bcs.n	800aa3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	60da      	str	r2, [r3, #12]
 800aa3c:	e002      	b.n	800aa44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	2200      	movs	r2, #0
 800aa58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aa60:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3748      	adds	r7, #72	@ 0x48
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa6e:	bf00      	nop
 800aa70:	58024400 	.word	0x58024400
 800aa74:	03d09000 	.word	0x03d09000
 800aa78:	003d0900 	.word	0x003d0900
 800aa7c:	080109dc 	.word	0x080109dc

0800aa80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa8c:	f003 0308 	and.w	r3, r3, #8
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00a      	beq.n	800aaaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00a      	beq.n	800aacc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	430a      	orrs	r2, r1
 800aaca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00a      	beq.n	800aaee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf2:	f003 0304 	and.w	r3, r3, #4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00a      	beq.n	800ab10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	430a      	orrs	r2, r1
 800ab0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab14:	f003 0310 	and.w	r3, r3, #16
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00a      	beq.n	800ab32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	430a      	orrs	r2, r1
 800ab30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00a      	beq.n	800ab54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	430a      	orrs	r2, r1
 800ab52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d01a      	beq.n	800ab96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab7e:	d10a      	bne.n	800ab96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	430a      	orrs	r2, r1
 800ab94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00a      	beq.n	800abb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	430a      	orrs	r2, r1
 800abb6:	605a      	str	r2, [r3, #4]
  }
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b098      	sub	sp, #96	@ 0x60
 800abc8:	af02      	add	r7, sp, #8
 800abca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abd4:	f7f6 ff4e 	bl	8001a74 <HAL_GetTick>
 800abd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0308 	and.w	r3, r3, #8
 800abe4:	2b08      	cmp	r3, #8
 800abe6:	d12f      	bne.n	800ac48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abe8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abf0:	2200      	movs	r2, #0
 800abf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f88e 	bl	800ad18 <UART_WaitOnFlagUntilTimeout>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d022      	beq.n	800ac48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0a:	e853 3f00 	ldrex	r3, [r3]
 800ac0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac16:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac20:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac28:	e841 2300 	strex	r3, r2, [r1]
 800ac2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e6      	bne.n	800ac02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2220      	movs	r2, #32
 800ac38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac44:	2303      	movs	r3, #3
 800ac46:	e063      	b.n	800ad10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f003 0304 	and.w	r3, r3, #4
 800ac52:	2b04      	cmp	r3, #4
 800ac54:	d149      	bne.n	800acea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f857 	bl	800ad18 <UART_WaitOnFlagUntilTimeout>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d03c      	beq.n	800acea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac78:	e853 3f00 	ldrex	r3, [r3]
 800ac7c:	623b      	str	r3, [r7, #32]
   return(result);
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac96:	e841 2300 	strex	r3, r2, [r1]
 800ac9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1e6      	bne.n	800ac70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3308      	adds	r3, #8
 800aca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	e853 3f00 	ldrex	r3, [r3]
 800acb0:	60fb      	str	r3, [r7, #12]
   return(result);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f023 0301 	bic.w	r3, r3, #1
 800acb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3308      	adds	r3, #8
 800acc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acc2:	61fa      	str	r2, [r7, #28]
 800acc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc6:	69b9      	ldr	r1, [r7, #24]
 800acc8:	69fa      	ldr	r2, [r7, #28]
 800acca:	e841 2300 	strex	r3, r2, [r1]
 800acce:	617b      	str	r3, [r7, #20]
   return(result);
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1e5      	bne.n	800aca2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2220      	movs	r2, #32
 800acda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e012      	b.n	800ad10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2220      	movs	r2, #32
 800acee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3758      	adds	r7, #88	@ 0x58
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	4613      	mov	r3, r2
 800ad26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad28:	e04f      	b.n	800adca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad30:	d04b      	beq.n	800adca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad32:	f7f6 fe9f 	bl	8001a74 <HAL_GetTick>
 800ad36:	4602      	mov	r2, r0
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	69ba      	ldr	r2, [r7, #24]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d302      	bcc.n	800ad48 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e04e      	b.n	800adea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 0304 	and.w	r3, r3, #4
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d037      	beq.n	800adca <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b80      	cmp	r3, #128	@ 0x80
 800ad5e:	d034      	beq.n	800adca <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2b40      	cmp	r3, #64	@ 0x40
 800ad64:	d031      	beq.n	800adca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	69db      	ldr	r3, [r3, #28]
 800ad6c:	f003 0308 	and.w	r3, r3, #8
 800ad70:	2b08      	cmp	r3, #8
 800ad72:	d110      	bne.n	800ad96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2208      	movs	r2, #8
 800ad7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f000 f839 	bl	800adf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2208      	movs	r2, #8
 800ad86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e029      	b.n	800adea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ada0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ada4:	d111      	bne.n	800adca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800adae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 f81f 	bl	800adf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2220      	movs	r2, #32
 800adba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e00f      	b.n	800adea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	69da      	ldr	r2, [r3, #28]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	4013      	ands	r3, r2
 800add4:	68ba      	ldr	r2, [r7, #8]
 800add6:	429a      	cmp	r2, r3
 800add8:	bf0c      	ite	eq
 800adda:	2301      	moveq	r3, #1
 800addc:	2300      	movne	r3, #0
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	461a      	mov	r2, r3
 800ade2:	79fb      	ldrb	r3, [r7, #7]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d0a0      	beq.n	800ad2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b095      	sub	sp, #84	@ 0x54
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae04:	e853 3f00 	ldrex	r3, [r3]
 800ae08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	461a      	mov	r2, r3
 800ae18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae22:	e841 2300 	strex	r3, r2, [r1]
 800ae26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1e6      	bne.n	800adfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	3308      	adds	r3, #8
 800ae34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae36:	6a3b      	ldr	r3, [r7, #32]
 800ae38:	e853 3f00 	ldrex	r3, [r3]
 800ae3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae3e:	69fa      	ldr	r2, [r7, #28]
 800ae40:	4b1e      	ldr	r3, [pc, #120]	@ (800aebc <UART_EndRxTransfer+0xc8>)
 800ae42:	4013      	ands	r3, r2
 800ae44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae56:	e841 2300 	strex	r3, r2, [r1]
 800ae5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1e5      	bne.n	800ae2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d118      	bne.n	800ae9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	e853 3f00 	ldrex	r3, [r3]
 800ae76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f023 0310 	bic.w	r3, r3, #16
 800ae7e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	461a      	mov	r2, r3
 800ae86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae88:	61bb      	str	r3, [r7, #24]
 800ae8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8c:	6979      	ldr	r1, [r7, #20]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	e841 2300 	strex	r3, r2, [r1]
 800ae94:	613b      	str	r3, [r7, #16]
   return(result);
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1e6      	bne.n	800ae6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2220      	movs	r2, #32
 800aea0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aeb0:	bf00      	nop
 800aeb2:	3754      	adds	r7, #84	@ 0x54
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr
 800aebc:	effffffe 	.word	0xeffffffe

0800aec0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aecc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f7ff f854 	bl	8009f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aedc:	bf00      	nop
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b08f      	sub	sp, #60	@ 0x3c
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aef2:	2b21      	cmp	r3, #33	@ 0x21
 800aef4:	d14c      	bne.n	800af90 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d132      	bne.n	800af68 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	e853 3f00 	ldrex	r3, [r3]
 800af0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af16:	637b      	str	r3, [r7, #52]	@ 0x34
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af22:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af28:	e841 2300 	strex	r3, r2, [r1]
 800af2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1e6      	bne.n	800af02 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	e853 3f00 	ldrex	r3, [r3]
 800af40:	60bb      	str	r3, [r7, #8]
   return(result);
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af48:	633b      	str	r3, [r7, #48]	@ 0x30
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af52:	61bb      	str	r3, [r7, #24]
 800af54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af56:	6979      	ldr	r1, [r7, #20]
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	e841 2300 	strex	r3, r2, [r1]
 800af5e:	613b      	str	r3, [r7, #16]
   return(result);
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1e6      	bne.n	800af34 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800af66:	e013      	b.n	800af90 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af6c:	781a      	ldrb	r2, [r3, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af84:	b29b      	uxth	r3, r3
 800af86:	3b01      	subs	r3, #1
 800af88:	b29a      	uxth	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800af90:	bf00      	nop
 800af92:	373c      	adds	r7, #60	@ 0x3c
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b091      	sub	sp, #68	@ 0x44
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afaa:	2b21      	cmp	r3, #33	@ 0x21
 800afac:	d151      	bne.n	800b052 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d132      	bne.n	800b020 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc2:	e853 3f00 	ldrex	r3, [r3]
 800afc6:	623b      	str	r3, [r7, #32]
   return(result);
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	461a      	mov	r2, r3
 800afd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd8:	633b      	str	r3, [r7, #48]	@ 0x30
 800afda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afe0:	e841 2300 	strex	r3, r2, [r1]
 800afe4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1e6      	bne.n	800afba <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	e853 3f00 	ldrex	r3, [r3]
 800aff8:	60fb      	str	r3, [r7, #12]
   return(result);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b000:	637b      	str	r3, [r7, #52]	@ 0x34
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b00a:	61fb      	str	r3, [r7, #28]
 800b00c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00e:	69b9      	ldr	r1, [r7, #24]
 800b010:	69fa      	ldr	r2, [r7, #28]
 800b012:	e841 2300 	strex	r3, r2, [r1]
 800b016:	617b      	str	r3, [r7, #20]
   return(result);
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1e6      	bne.n	800afec <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b01e:	e018      	b.n	800b052 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b024:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	461a      	mov	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b034:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b03a:	1c9a      	adds	r2, r3, #2
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b046:	b29b      	uxth	r3, r3
 800b048:	3b01      	subs	r3, #1
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b052:	bf00      	nop
 800b054:	3744      	adds	r7, #68	@ 0x44
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b05e:	b480      	push	{r7}
 800b060:	b091      	sub	sp, #68	@ 0x44
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b06c:	2b21      	cmp	r3, #33	@ 0x21
 800b06e:	d160      	bne.n	800b132 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b076:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b078:	e057      	b.n	800b12a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b080:	b29b      	uxth	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d133      	bne.n	800b0ee <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3308      	adds	r3, #8
 800b08c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b090:	e853 3f00 	ldrex	r3, [r3]
 800b094:	623b      	str	r3, [r7, #32]
   return(result);
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b09c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ae:	e841 2300 	strex	r3, r2, [r1]
 800b0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1e5      	bne.n	800b086 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	e853 3f00 	ldrex	r3, [r3]
 800b0c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d8:	61fb      	str	r3, [r7, #28]
 800b0da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0dc:	69b9      	ldr	r1, [r7, #24]
 800b0de:	69fa      	ldr	r2, [r7, #28]
 800b0e0:	e841 2300 	strex	r3, r2, [r1]
 800b0e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e6      	bne.n	800b0ba <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b0ec:	e021      	b.n	800b132 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d013      	beq.n	800b124 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b100:	781a      	ldrb	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b10c:	1c5a      	adds	r2, r3, #1
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b118:	b29b      	uxth	r3, r3
 800b11a:	3b01      	subs	r3, #1
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b124:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b126:	3b01      	subs	r3, #1
 800b128:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b12a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1a4      	bne.n	800b07a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b130:	e7ff      	b.n	800b132 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800b132:	bf00      	nop
 800b134:	3744      	adds	r7, #68	@ 0x44
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b13e:	b480      	push	{r7}
 800b140:	b091      	sub	sp, #68	@ 0x44
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b14c:	2b21      	cmp	r3, #33	@ 0x21
 800b14e:	d165      	bne.n	800b21c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b156:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b158:	e05c      	b.n	800b214 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b160:	b29b      	uxth	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d133      	bne.n	800b1ce <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	3308      	adds	r3, #8
 800b16c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	e853 3f00 	ldrex	r3, [r3]
 800b174:	61fb      	str	r3, [r7, #28]
   return(result);
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b17c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	3308      	adds	r3, #8
 800b184:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b188:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b18c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e5      	bne.n	800b166 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	e853 3f00 	ldrex	r3, [r3]
 800b1a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	61bb      	str	r3, [r7, #24]
 800b1ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1bc:	6979      	ldr	r1, [r7, #20]
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	e841 2300 	strex	r3, r2, [r1]
 800b1c4:	613b      	str	r3, [r7, #16]
   return(result);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1e6      	bne.n	800b19a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b1cc:	e026      	b.n	800b21c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d018      	beq.n	800b20e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1e0:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1f0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1f6:	1c9a      	adds	r2, r3, #2
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b202:	b29b      	uxth	r3, r3
 800b204:	3b01      	subs	r3, #1
 800b206:	b29a      	uxth	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b20e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b210:	3b01      	subs	r3, #1
 800b212:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b214:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b216:	2b00      	cmp	r3, #0
 800b218:	d19f      	bne.n	800b15a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b21a:	e7ff      	b.n	800b21c <UART_TxISR_16BIT_FIFOEN+0xde>
 800b21c:	bf00      	nop
 800b21e:	3744      	adds	r7, #68	@ 0x44
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b088      	sub	sp, #32
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b244:	61fb      	str	r3, [r7, #28]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	61bb      	str	r3, [r7, #24]
 800b250:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	6979      	ldr	r1, [r7, #20]
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	e841 2300 	strex	r3, r2, [r1]
 800b25a:	613b      	str	r3, [r7, #16]
   return(result);
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1e6      	bne.n	800b230 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2220      	movs	r2, #32
 800b266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7fe fe7d 	bl	8009f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b276:	bf00      	nop
 800b278:	3720      	adds	r7, #32
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b27e:	b480      	push	{r7}
 800b280:	b083      	sub	sp, #12
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b286:	bf00      	nop
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b292:	b480      	push	{r7}
 800b294:	b083      	sub	sp, #12
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b29a:	bf00      	nop
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b083      	sub	sp, #12
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b2ae:	bf00      	nop
 800b2b0:	370c      	adds	r7, #12
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b085      	sub	sp, #20
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d101      	bne.n	800b2d0 <HAL_UARTEx_DisableFifoMode+0x16>
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	e027      	b.n	800b320 <HAL_UARTEx_DisableFifoMode+0x66>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2224      	movs	r2, #36	@ 0x24
 800b2dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0201 	bic.w	r2, r2, #1
 800b2f6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b2fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2220      	movs	r2, #32
 800b312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d101      	bne.n	800b344 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b340:	2302      	movs	r3, #2
 800b342:	e02d      	b.n	800b3a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2224      	movs	r2, #36	@ 0x24
 800b350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f022 0201 	bic.w	r2, r2, #1
 800b36a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	430a      	orrs	r2, r1
 800b37e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f84f 	bl	800b424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2220      	movs	r2, #32
 800b392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d101      	bne.n	800b3c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b3bc:	2302      	movs	r3, #2
 800b3be:	e02d      	b.n	800b41c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2224      	movs	r2, #36	@ 0x24
 800b3cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f022 0201 	bic.w	r2, r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f811 	bl	800b424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2220      	movs	r2, #32
 800b40e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b430:	2b00      	cmp	r3, #0
 800b432:	d108      	bne.n	800b446 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b444:	e031      	b.n	800b4aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b446:	2310      	movs	r3, #16
 800b448:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b44a:	2310      	movs	r3, #16
 800b44c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	0e5b      	lsrs	r3, r3, #25
 800b456:	b2db      	uxtb	r3, r3
 800b458:	f003 0307 	and.w	r3, r3, #7
 800b45c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	0f5b      	lsrs	r3, r3, #29
 800b466:	b2db      	uxtb	r3, r3
 800b468:	f003 0307 	and.w	r3, r3, #7
 800b46c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b46e:	7bbb      	ldrb	r3, [r7, #14]
 800b470:	7b3a      	ldrb	r2, [r7, #12]
 800b472:	4911      	ldr	r1, [pc, #68]	@ (800b4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b474:	5c8a      	ldrb	r2, [r1, r2]
 800b476:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b47a:	7b3a      	ldrb	r2, [r7, #12]
 800b47c:	490f      	ldr	r1, [pc, #60]	@ (800b4bc <UARTEx_SetNbDataToProcess+0x98>)
 800b47e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b480:	fb93 f3f2 	sdiv	r3, r3, r2
 800b484:	b29a      	uxth	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	7b7a      	ldrb	r2, [r7, #13]
 800b490:	4909      	ldr	r1, [pc, #36]	@ (800b4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b492:	5c8a      	ldrb	r2, [r1, r2]
 800b494:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b498:	7b7a      	ldrb	r2, [r7, #13]
 800b49a:	4908      	ldr	r1, [pc, #32]	@ (800b4bc <UARTEx_SetNbDataToProcess+0x98>)
 800b49c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b49e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b4aa:	bf00      	nop
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	080109f4 	.word	0x080109f4
 800b4bc:	080109fc 	.word	0x080109fc

0800b4c0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b4c0:	b084      	sub	sp, #16
 800b4c2:	b480      	push	{r7}
 800b4c4:	b085      	sub	sp, #20
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	f107 001c 	add.w	r0, r7, #28
 800b4ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b4d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b4da:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b4de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b4e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b4e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685a      	ldr	r2, [r3, #4]
 800b4f2:	4b07      	ldr	r3, [pc, #28]	@ (800b510 <SDMMC_Init+0x50>)
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	431a      	orrs	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3714      	adds	r7, #20
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	b004      	add	sp, #16
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	ffc02c00 	.word	0xffc02c00

0800b514 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b522:	4618      	mov	r0, r3
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b52e:	b480      	push	{r7}
 800b530:	b083      	sub	sp, #12
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f043 0203 	orr.w	r2, r3, #3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0303 	and.w	r3, r3, #3
}
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b58a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b590:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b596:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68da      	ldr	r2, [r3, #12]
 800b5a2:	4b06      	ldr	r3, [pc, #24]	@ (800b5bc <SDMMC_SendCommand+0x50>)
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3714      	adds	r7, #20
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	fffee0c0 	.word	0xfffee0c0

0800b5c0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	b2db      	uxtb	r3, r3
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr

0800b5da <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b5da:	b480      	push	{r7}
 800b5dc:	b085      	sub	sp, #20
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
 800b5e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	3314      	adds	r3, #20
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b626:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b62c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b632:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	4313      	orrs	r3, r2
 800b638:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	431a      	orrs	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b64a:	2300      	movs	r3, #0

}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b088      	sub	sp, #32
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b666:	2310      	movs	r3, #16
 800b668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b66a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b66e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b670:	2300      	movs	r3, #0
 800b672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b678:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b67a:	f107 0308 	add.w	r3, r7, #8
 800b67e:	4619      	mov	r1, r3
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7ff ff73 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b68a:	2110      	movs	r1, #16
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f995 	bl	800b9bc <SDMMC_GetCmdResp1>
 800b692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b694:	69fb      	ldr	r3, [r7, #28]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3720      	adds	r7, #32
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b088      	sub	sp, #32
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b6ac:	2307      	movs	r3, #7
 800b6ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6c0:	f107 0308 	add.w	r3, r7, #8
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7ff ff50 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b6cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6d0:	2107      	movs	r1, #7
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f972 	bl	800b9bc <SDMMC_GetCmdResp1>
 800b6d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6da:	69fb      	ldr	r3, [r7, #28]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3720      	adds	r7, #32
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b088      	sub	sp, #32
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b702:	f107 0308 	add.w	r3, r7, #8
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff ff2f 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fb96 	bl	800be40 <SDMMC_GetCmdError>
 800b714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b716:	69fb      	ldr	r3, [r7, #28]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3720      	adds	r7, #32
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b088      	sub	sp, #32
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b728:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b72c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b72e:	2308      	movs	r3, #8
 800b730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b732:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b738:	2300      	movs	r3, #0
 800b73a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b73c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b742:	f107 0308 	add.w	r3, r7, #8
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7ff ff0f 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fb28 	bl	800bda4 <SDMMC_GetCmdResp7>
 800b754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b756:	69fb      	ldr	r3, [r7, #28]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3720      	adds	r7, #32
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b76e:	2337      	movs	r3, #55	@ 0x37
 800b770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b778:	2300      	movs	r3, #0
 800b77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b77c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b780:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b782:	f107 0308 	add.w	r3, r7, #8
 800b786:	4619      	mov	r1, r3
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7ff feef 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b78e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b792:	2137      	movs	r1, #55	@ 0x37
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f911 	bl	800b9bc <SDMMC_GetCmdResp1>
 800b79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b79c:	69fb      	ldr	r3, [r7, #28]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3720      	adds	r7, #32
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b088      	sub	sp, #32
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b7b4:	2329      	movs	r3, #41	@ 0x29
 800b7b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b7bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7c8:	f107 0308 	add.w	r3, r7, #8
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff fecc 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fa2d 	bl	800bc34 <SDMMC_GetCmdResp3>
 800b7da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7dc:	69fb      	ldr	r3, [r7, #28]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3720      	adds	r7, #32
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b088      	sub	sp, #32
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b7f4:	2306      	movs	r3, #6
 800b7f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b7fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7fe:	2300      	movs	r3, #0
 800b800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b806:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b808:	f107 0308 	add.w	r3, r7, #8
 800b80c:	4619      	mov	r1, r3
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff feac 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b814:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b818:	2106      	movs	r1, #6
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f8ce 	bl	800b9bc <SDMMC_GetCmdResp1>
 800b820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b822:	69fb      	ldr	r3, [r7, #28]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3720      	adds	r7, #32
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b088      	sub	sp, #32
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b838:	2333      	movs	r3, #51	@ 0x33
 800b83a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b83c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b842:	2300      	movs	r3, #0
 800b844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b84a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b84c:	f107 0308 	add.w	r3, r7, #8
 800b850:	4619      	mov	r1, r3
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f7ff fe8a 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b85c:	2133      	movs	r1, #51	@ 0x33
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f8ac 	bl	800b9bc <SDMMC_GetCmdResp1>
 800b864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b866:	69fb      	ldr	r3, [r7, #28]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3720      	adds	r7, #32
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b878:	2300      	movs	r3, #0
 800b87a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b87c:	2302      	movs	r3, #2
 800b87e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b880:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b886:	2300      	movs	r3, #0
 800b888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b88a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b88e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b890:	f107 0308 	add.w	r3, r7, #8
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff fe68 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f97f 	bl	800bba0 <SDMMC_GetCmdResp2>
 800b8a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3720      	adds	r7, #32
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b088      	sub	sp, #32
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b8bc:	2309      	movs	r3, #9
 800b8be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b8c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b8c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8d0:	f107 0308 	add.w	r3, r7, #8
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff fe48 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f95f 	bl	800bba0 <SDMMC_GetCmdResp2>
 800b8e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8e4:	69fb      	ldr	r3, [r7, #28]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3720      	adds	r7, #32
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b088      	sub	sp, #32
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b900:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b906:	2300      	movs	r3, #0
 800b908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b90a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b90e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b910:	f107 0308 	add.w	r3, r7, #8
 800b914:	4619      	mov	r1, r3
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7ff fe28 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	2103      	movs	r1, #3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f9c7 	bl	800bcb4 <SDMMC_GetCmdResp6>
 800b926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b928:	69fb      	ldr	r3, [r7, #28]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3720      	adds	r7, #32
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b088      	sub	sp, #32
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b940:	230d      	movs	r3, #13
 800b942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b944:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b94a:	2300      	movs	r3, #0
 800b94c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b94e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b954:	f107 0308 	add.w	r3, r7, #8
 800b958:	4619      	mov	r1, r3
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7ff fe06 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b960:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b964:	210d      	movs	r1, #13
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f828 	bl	800b9bc <SDMMC_GetCmdResp1>
 800b96c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b96e:	69fb      	ldr	r3, [r7, #28]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3720      	adds	r7, #32
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b088      	sub	sp, #32
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b980:	2300      	movs	r3, #0
 800b982:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b984:	230d      	movs	r3, #13
 800b986:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b98c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b996:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b998:	f107 0308 	add.w	r3, r7, #8
 800b99c:	4619      	mov	r1, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7ff fde4 	bl	800b56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b9a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9a8:	210d      	movs	r1, #13
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f806 	bl	800b9bc <SDMMC_GetCmdResp1>
 800b9b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9b2:	69fb      	ldr	r3, [r7, #28]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3720      	adds	r7, #32
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b9ca:	4b70      	ldr	r3, [pc, #448]	@ (800bb8c <SDMMC_GetCmdResp1+0x1d0>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a70      	ldr	r2, [pc, #448]	@ (800bb90 <SDMMC_GetCmdResp1+0x1d4>)
 800b9d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d4:	0a5a      	lsrs	r2, r3, #9
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	fb02 f303 	mul.w	r3, r2, r3
 800b9dc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	1e5a      	subs	r2, r3, #1
 800b9e2:	61fa      	str	r2, [r7, #28]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d102      	bne.n	800b9ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b9ec:	e0c9      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	4b67      	ldr	r3, [pc, #412]	@ (800bb94 <SDMMC_GetCmdResp1+0x1d8>)
 800b9f8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0ef      	beq.n	800b9de <SDMMC_GetCmdResp1+0x22>
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1ea      	bne.n	800b9de <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba0c:	f003 0304 	and.w	r3, r3, #4
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d004      	beq.n	800ba1e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2204      	movs	r2, #4
 800ba18:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba1a:	2304      	movs	r3, #4
 800ba1c:	e0b1      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d004      	beq.n	800ba34 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba30:	2301      	movs	r3, #1
 800ba32:	e0a6      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	4a58      	ldr	r2, [pc, #352]	@ (800bb98 <SDMMC_GetCmdResp1+0x1dc>)
 800ba38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f7ff fdc0 	bl	800b5c0 <SDMMC_GetCommandResponse>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461a      	mov	r2, r3
 800ba44:	7afb      	ldrb	r3, [r7, #11]
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d001      	beq.n	800ba4e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e099      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba4e:	2100      	movs	r1, #0
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f7ff fdc2 	bl	800b5da <SDMMC_GetResponse>
 800ba56:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	4b50      	ldr	r3, [pc, #320]	@ (800bb9c <SDMMC_GetCmdResp1+0x1e0>)
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ba62:	2300      	movs	r3, #0
 800ba64:	e08d      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	da02      	bge.n	800ba72 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ba6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ba70:	e087      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ba7c:	2340      	movs	r3, #64	@ 0x40
 800ba7e:	e080      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d001      	beq.n	800ba8e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ba8a:	2380      	movs	r3, #128	@ 0x80
 800ba8c:	e079      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ba98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba9c:	e071      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800baa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800baac:	e069      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800babc:	e061      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bac8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bacc:	e059      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800badc:	e051      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800baec:	e049      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800baf8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bafc:	e041      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d002      	beq.n	800bb0e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bb08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb0c:	e039      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800bb1c:	e031      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb28:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800bb2c:	e029      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bb3c:	e021      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb48:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bb4c:	e019      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800bb5c:	e011      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bb68:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800bb6c:	e009      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f003 0308 	and.w	r3, r3, #8
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bb78:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800bb7c:	e001      	b.n	800bb82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3720      	adds	r7, #32
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	24000000 	.word	0x24000000
 800bb90:	10624dd3 	.word	0x10624dd3
 800bb94:	00200045 	.word	0x00200045
 800bb98:	002000c5 	.word	0x002000c5
 800bb9c:	fdffe008 	.word	0xfdffe008

0800bba0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bba8:	4b1f      	ldr	r3, [pc, #124]	@ (800bc28 <SDMMC_GetCmdResp2+0x88>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a1f      	ldr	r2, [pc, #124]	@ (800bc2c <SDMMC_GetCmdResp2+0x8c>)
 800bbae:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb2:	0a5b      	lsrs	r3, r3, #9
 800bbb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbb8:	fb02 f303 	mul.w	r3, r2, r3
 800bbbc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	1e5a      	subs	r2, r3, #1
 800bbc2:	60fa      	str	r2, [r7, #12]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d102      	bne.n	800bbce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbc8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bbcc:	e026      	b.n	800bc1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbd2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d0ef      	beq.n	800bbbe <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1ea      	bne.n	800bbbe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbec:	f003 0304 	and.w	r3, r3, #4
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d004      	beq.n	800bbfe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2204      	movs	r2, #4
 800bbf8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbfa:	2304      	movs	r3, #4
 800bbfc:	e00e      	b.n	800bc1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d004      	beq.n	800bc14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc10:	2301      	movs	r3, #1
 800bc12:	e003      	b.n	800bc1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a06      	ldr	r2, [pc, #24]	@ (800bc30 <SDMMC_GetCmdResp2+0x90>)
 800bc18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	24000000 	.word	0x24000000
 800bc2c:	10624dd3 	.word	0x10624dd3
 800bc30:	002000c5 	.word	0x002000c5

0800bc34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc3c:	4b1a      	ldr	r3, [pc, #104]	@ (800bca8 <SDMMC_GetCmdResp3+0x74>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a1a      	ldr	r2, [pc, #104]	@ (800bcac <SDMMC_GetCmdResp3+0x78>)
 800bc42:	fba2 2303 	umull	r2, r3, r2, r3
 800bc46:	0a5b      	lsrs	r3, r3, #9
 800bc48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc4c:	fb02 f303 	mul.w	r3, r2, r3
 800bc50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	1e5a      	subs	r2, r3, #1
 800bc56:	60fa      	str	r2, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bc60:	e01b      	b.n	800bc9a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc66:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d0ef      	beq.n	800bc52 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1ea      	bne.n	800bc52 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc80:	f003 0304 	and.w	r3, r3, #4
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d004      	beq.n	800bc92 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2204      	movs	r2, #4
 800bc8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc8e:	2304      	movs	r3, #4
 800bc90:	e003      	b.n	800bc9a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a06      	ldr	r2, [pc, #24]	@ (800bcb0 <SDMMC_GetCmdResp3+0x7c>)
 800bc96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	24000000 	.word	0x24000000
 800bcac:	10624dd3 	.word	0x10624dd3
 800bcb0:	002000c5 	.word	0x002000c5

0800bcb4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b088      	sub	sp, #32
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bcc2:	4b35      	ldr	r3, [pc, #212]	@ (800bd98 <SDMMC_GetCmdResp6+0xe4>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a35      	ldr	r2, [pc, #212]	@ (800bd9c <SDMMC_GetCmdResp6+0xe8>)
 800bcc8:	fba2 2303 	umull	r2, r3, r2, r3
 800bccc:	0a5b      	lsrs	r3, r3, #9
 800bcce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcd2:	fb02 f303 	mul.w	r3, r2, r3
 800bcd6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	1e5a      	subs	r2, r3, #1
 800bcdc:	61fa      	str	r2, [r7, #28]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d102      	bne.n	800bce8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bce2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bce6:	e052      	b.n	800bd8e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcec:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d0ef      	beq.n	800bcd8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1ea      	bne.n	800bcd8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd06:	f003 0304 	and.w	r3, r3, #4
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d004      	beq.n	800bd18 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2204      	movs	r2, #4
 800bd12:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd14:	2304      	movs	r3, #4
 800bd16:	e03a      	b.n	800bd8e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd1c:	f003 0301 	and.w	r3, r3, #1
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d004      	beq.n	800bd2e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2201      	movs	r2, #1
 800bd28:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e02f      	b.n	800bd8e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f7ff fc46 	bl	800b5c0 <SDMMC_GetCommandResponse>
 800bd34:	4603      	mov	r3, r0
 800bd36:	461a      	mov	r2, r3
 800bd38:	7afb      	ldrb	r3, [r7, #11]
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d001      	beq.n	800bd42 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e025      	b.n	800bd8e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	4a16      	ldr	r2, [pc, #88]	@ (800bda0 <SDMMC_GetCmdResp6+0xec>)
 800bd46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bd48:	2100      	movs	r1, #0
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f7ff fc45 	bl	800b5da <SDMMC_GetResponse>
 800bd50:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d106      	bne.n	800bd6a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	0c1b      	lsrs	r3, r3, #16
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bd66:	2300      	movs	r3, #0
 800bd68:	e011      	b.n	800bd8e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d002      	beq.n	800bd7a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bd78:	e009      	b.n	800bd8e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd88:	e001      	b.n	800bd8e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bd8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3720      	adds	r7, #32
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	24000000 	.word	0x24000000
 800bd9c:	10624dd3 	.word	0x10624dd3
 800bda0:	002000c5 	.word	0x002000c5

0800bda4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bdac:	4b22      	ldr	r3, [pc, #136]	@ (800be38 <SDMMC_GetCmdResp7+0x94>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a22      	ldr	r2, [pc, #136]	@ (800be3c <SDMMC_GetCmdResp7+0x98>)
 800bdb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb6:	0a5b      	lsrs	r3, r3, #9
 800bdb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bdbc:	fb02 f303 	mul.w	r3, r2, r3
 800bdc0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	1e5a      	subs	r2, r3, #1
 800bdc6:	60fa      	str	r2, [r7, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d102      	bne.n	800bdd2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bdd0:	e02c      	b.n	800be2c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdd6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d0ef      	beq.n	800bdc2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1ea      	bne.n	800bdc2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdf0:	f003 0304 	and.w	r3, r3, #4
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d004      	beq.n	800be02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2204      	movs	r2, #4
 800bdfc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdfe:	2304      	movs	r3, #4
 800be00:	e014      	b.n	800be2c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d004      	beq.n	800be18 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2201      	movs	r2, #1
 800be12:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be14:	2301      	movs	r3, #1
 800be16:	e009      	b.n	800be2c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be20:	2b00      	cmp	r3, #0
 800be22:	d002      	beq.n	800be2a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2240      	movs	r2, #64	@ 0x40
 800be28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800be2a:	2300      	movs	r3, #0

}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3714      	adds	r7, #20
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	24000000 	.word	0x24000000
 800be3c:	10624dd3 	.word	0x10624dd3

0800be40 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be48:	4b11      	ldr	r3, [pc, #68]	@ (800be90 <SDMMC_GetCmdError+0x50>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a11      	ldr	r2, [pc, #68]	@ (800be94 <SDMMC_GetCmdError+0x54>)
 800be4e:	fba2 2303 	umull	r2, r3, r2, r3
 800be52:	0a5b      	lsrs	r3, r3, #9
 800be54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be58:	fb02 f303 	mul.w	r3, r2, r3
 800be5c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	1e5a      	subs	r2, r3, #1
 800be62:	60fa      	str	r2, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d102      	bne.n	800be6e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800be6c:	e009      	b.n	800be82 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be76:	2b00      	cmp	r3, #0
 800be78:	d0f1      	beq.n	800be5e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4a06      	ldr	r2, [pc, #24]	@ (800be98 <SDMMC_GetCmdError+0x58>)
 800be7e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	24000000 	.word	0x24000000
 800be94:	10624dd3 	.word	0x10624dd3
 800be98:	002000c5 	.word	0x002000c5

0800be9c <at_echo_off>:
{
	mobile_sendCommand("\r\nATE1\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_echo_off (char* recived)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nATE0\r\n", COMMAND_GENERAL_DELAY, recived);
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	f240 5114 	movw	r1, #1300	@ 0x514
 800beaa:	4803      	ldr	r0, [pc, #12]	@ (800beb8 <at_echo_off+0x1c>)
 800beac:	f000 f87c 	bl	800bfa8 <mobile_sendCommand>
}
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	08010750 	.word	0x08010750

0800bebc <at_network_mode>:
{
	mobile_sendCommand("\r\nAT+CPIN?\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_network_mode (char* recived)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CNMP=38\r\n", COMMAND_GENERAL_DELAY, recived);
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	f240 5114 	movw	r1, #1300	@ 0x514
 800beca:	4803      	ldr	r0, [pc, #12]	@ (800bed8 <at_network_mode+0x1c>)
 800becc:	f000 f86c 	bl	800bfa8 <mobile_sendCommand>
}
 800bed0:	bf00      	nop
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	080107e8 	.word	0x080107e8

0800bedc <at_set_band>:

void at_set_band(char* recived)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CMNB=3\r\n", COMMAND_GENERAL_DELAY, recived);
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	f240 5114 	movw	r1, #1300	@ 0x514
 800beea:	4803      	ldr	r0, [pc, #12]	@ (800bef8 <at_set_band+0x1c>)
 800beec:	f000 f85c 	bl	800bfa8 <mobile_sendCommand>
}
 800bef0:	bf00      	nop
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	080107f8 	.word	0x080107f8

0800befc <at_gprs_init>:
{
	mobile_sendCommand("\r\nAT+CBANDCFG=\"CAT-M\",3,20\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_gprs_init (char* recived)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CGACT=1,1\r\n", COMMAND_GENERAL_DELAY, recived);
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	f240 5114 	movw	r1, #1300	@ 0x514
 800bf0a:	4803      	ldr	r0, [pc, #12]	@ (800bf18 <at_gprs_init+0x1c>)
 800bf0c:	f000 f84c 	bl	800bfa8 <mobile_sendCommand>
}
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	08010838 	.word	0x08010838

0800bf1c <at_network_attach_request>:
	fprintf(buffer,"\r\nAT%PINGCMD=0,%s,%d\r\n",MONGO_DB_IP,count);
	mobile_sendCommand(buffer, COMMAND_GENERAL_DELAY, recived);
}

void at_network_attach_request (char* recived)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CGATT=1\r\n", COMMAND_GENERAL_DELAY, recived);
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	f240 5114 	movw	r1, #1300	@ 0x514
 800bf2a:	4803      	ldr	r0, [pc, #12]	@ (800bf38 <at_network_attach_request+0x1c>)
 800bf2c:	f000 f83c 	bl	800bfa8 <mobile_sendCommand>
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	08010884 	.word	0x08010884

0800bf3c <at_init_http_connection>:
{
	mobile_sendCommand("\r\nAT+CIPSRIP=1\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_init_http_connection (char* recived)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]

	//mobile_sendCommand("\r\nAT+SAPBR=1,1\r\n", COMMAND_GENERAL_DELAY, recived);

	//mobile_sendCommand("\r\nAT+SAPBR=2,1\r\n", COMMAND_GENERAL_DELAY, recived);

	mobile_sendCommand("\r\nAT+HTTPINIT\r\n", COMMAND_GENERAL_DELAY, recived);
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	f240 5114 	movw	r1, #1300	@ 0x514
 800bf4a:	4806      	ldr	r0, [pc, #24]	@ (800bf64 <at_init_http_connection+0x28>)
 800bf4c:	f000 f82c 	bl	800bfa8 <mobile_sendCommand>

	mobile_sendCommand("\r\nAT+HTTPPARA=\"CID\",1\r\n", COMMAND_GENERAL_DELAY, recived);
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	f240 5114 	movw	r1, #1300	@ 0x514
 800bf56:	4804      	ldr	r0, [pc, #16]	@ (800bf68 <at_init_http_connection+0x2c>)
 800bf58:	f000 f826 	bl	800bfa8 <mobile_sendCommand>

}
 800bf5c:	bf00      	nop
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	080108c4 	.word	0x080108c4
 800bf68:	080108d4 	.word	0x080108d4

0800bf6c <at_network_pdp_activate>:
}


//nbiot
void at_network_pdp_activate(char* recived)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b092      	sub	sp, #72	@ 0x48
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
	char buffer[64];
	fprintf(buffer,"\r\nAT+CGDCONT=1,\"%s\",\"%s\"\r\n",MONGO_DB_PDP_TYPE,SIMBASE_APN);
 800bf74:	f107 0008 	add.w	r0, r7, #8
 800bf78:	4b08      	ldr	r3, [pc, #32]	@ (800bf9c <at_network_pdp_activate+0x30>)
 800bf7a:	4a09      	ldr	r2, [pc, #36]	@ (800bfa0 <at_network_pdp_activate+0x34>)
 800bf7c:	4909      	ldr	r1, [pc, #36]	@ (800bfa4 <at_network_pdp_activate+0x38>)
 800bf7e:	f001 f82f 	bl	800cfe0 <fiprintf>
	mobile_sendCommand(buffer, COMMAND_GENERAL_DELAY, recived);
 800bf82:	f107 0308 	add.w	r3, r7, #8
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	f240 5114 	movw	r1, #1300	@ 0x514
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 f80b 	bl	800bfa8 <mobile_sendCommand>

}
 800bf92:	bf00      	nop
 800bf94:	3748      	adds	r7, #72	@ 0x48
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	08010894 	.word	0x08010894
 800bfa0:	0801091c 	.word	0x0801091c
 800bfa4:	08010920 	.word	0x08010920

0800bfa8 <mobile_sendCommand>:
}

//----------------------------------------------------------------------------------------

void mobile_sendCommand(char * command, unsigned int timeout, char * recived)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(MOBILE_COMMS_UART, command, strlen(command)); //Transmits
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f7f4 f9e3 	bl	8000380 <strlen>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	68f9      	ldr	r1, [r7, #12]
 800bfc2:	4806      	ldr	r0, [pc, #24]	@ (800bfdc <mobile_sendCommand+0x34>)
 800bfc4:	f7fd fb6a 	bl	800969c <HAL_UART_Transmit_IT>
	HAL_UART_Receive(MOBILE_COMMS_UART, recived, 32, timeout); //Reads the module
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	2220      	movs	r2, #32
 800bfcc:	6879      	ldr	r1, [r7, #4]
 800bfce:	4803      	ldr	r0, [pc, #12]	@ (800bfdc <mobile_sendCommand+0x34>)
 800bfd0:	f7fd fa9c 	bl	800950c <HAL_UART_Receive>
}
 800bfd4:	bf00      	nop
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	24000334 	.word	0x24000334

0800bfe0 <init_package_data>:
package_data_t package_data[2];
char package_data_index = 0;


void init_package_data(void)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	af00      	add	r7, sp, #0
	package_data[0].packege_number = 0;
 800bfe4:	4b08      	ldr	r3, [pc, #32]	@ (800c008 <init_package_data+0x28>)
 800bfe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfea:	2200      	movs	r2, #0
 800bfec:	f8a3 27ac 	strh.w	r2, [r3, #1964]	@ 0x7ac
	package_data[1].packege_number = 0;
 800bff0:	4b05      	ldr	r3, [pc, #20]	@ (800c008 <init_package_data+0x28>)
 800bff2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bff6:	2200      	movs	r2, #0
 800bff8:	f8a3 2f5c 	strh.w	r2, [r3, #3932]	@ 0xf5c
}
 800bffc:	bf00      	nop
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	24000460 	.word	0x24000460

0800c00c <write_package_data>:

package_data_t* write_package_data()
{
 800c00c:	b480      	push	{r7}
 800c00e:	af00      	add	r7, sp, #0
    return &package_data[package_data_index];
 800c010:	4b06      	ldr	r3, [pc, #24]	@ (800c02c <write_package_data+0x20>)
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	461a      	mov	r2, r3
 800c016:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 800c01a:	fb02 f303 	mul.w	r3, r2, r3
 800c01e:	4a04      	ldr	r2, [pc, #16]	@ (800c030 <write_package_data+0x24>)
 800c020:	4413      	add	r3, r2
}
 800c022:	4618      	mov	r0, r3
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	240033c0 	.word	0x240033c0
 800c030:	24000460 	.word	0x24000460

0800c034 <manager_init>:
uint64_t prev_imu_timer = 0;
uint64_t prev_temperature_timer = 0;
uint64_t prev_send_timer = 0;

void manager_init(void)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	af00      	add	r7, sp, #0
	//Memory
	init_package_data();
 800c038:	f7ff ffd2 	bl	800bfe0 <init_package_data>
	//Batteries
	battery_init();
 800c03c:	f000 f832 	bl	800c0a4 <battery_init>
	//Temperature
	temperature_init();
 800c040:	f000 f8e9 	bl	800c216 <temperature_init>
	//CNSS
	//cnss_init();
	//IMU
	imu_init();
 800c044:	f000 f836 	bl	800c0b4 <imu_init>
	//NB_IoT
	nb_iot_init();
 800c048:	f000 f8b2 	bl	800c1b0 <nb_iot_init>
	//SD_CARD
	sd_card_init();
 800c04c:	f000 f8dc 	bl	800c208 <sd_card_init>

}
 800c050:	bf00      	nop
 800c052:	bd80      	pop	{r7, pc}

0800c054 <manager_update>:
void manager_update(void)
{
 800c054:	b5b0      	push	{r4, r5, r7, lr}
 800c056:	af00      	add	r7, sp, #0
	current_time = extended_tick;
 800c058:	490f      	ldr	r1, [pc, #60]	@ (800c098 <manager_update+0x44>)
 800c05a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c05e:	4c0f      	ldr	r4, [pc, #60]	@ (800c09c <manager_update+0x48>)
 800c060:	e9c4 0100 	strd	r0, r1, [r4]

	if (current_time - prev_imu_timer >= IMU_SAMPLE_PERIOD_UC)
 800c064:	490d      	ldr	r1, [pc, #52]	@ (800c09c <manager_update+0x48>)
 800c066:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c06a:	490d      	ldr	r1, [pc, #52]	@ (800c0a0 <manager_update+0x4c>)
 800c06c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c070:	1a22      	subs	r2, r4, r0
 800c072:	eb65 0301 	sbc.w	r3, r5, r1
 800c076:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800c07a:	428a      	cmp	r2, r1
 800c07c:	f173 0300 	sbcs.w	r3, r3, #0
 800c080:	d307      	bcc.n	800c092 <manager_update+0x3e>
	{
		//IMU
		imu_update(); //not tested
 800c082:	f000 f84f 	bl	800c124 <imu_update>
		prev_imu_timer = current_time;
 800c086:	4b05      	ldr	r3, [pc, #20]	@ (800c09c <manager_update+0x48>)
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	4904      	ldr	r1, [pc, #16]	@ (800c0a0 <manager_update+0x4c>)
 800c08e:	e9c1 2300 	strd	r2, r3, [r1]
		update_package_data();
		sd_card_update();
		prev_send_timer = current_time;
	}
	*/
}
 800c092:	bf00      	nop
 800c094:	bdb0      	pop	{r4, r5, r7, pc}
 800c096:	bf00      	nop
 800c098:	24000328 	.word	0x24000328
 800c09c:	240033c8 	.word	0x240033c8
 800c0a0:	240033d0 	.word	0x240033d0

0800c0a4 <battery_init>:
 *      Author: viny
 */
#include "battery_behavior.h"

void battery_init (void)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	af00      	add	r7, sp, #0

}
 800c0a8:	bf00      	nop
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr
	...

0800c0b4 <imu_init>:
unsigned int sample_count = 0;

char imu_msg_buffer[32];

void imu_init (void)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af02      	add	r7, sp, #8
	//buf[0] = 0x2D; buf[1] = 0x08;
	//HAL_I2C_Master_Transmit(hi2c, ADXL345_ADDR, buf, 2, 100);

	//GYRO
	// Set sample rate divider to reduce power (e.g., 125Hz)
	buf[0] = 0x15; buf[1] = 0x07; // Divider = 7 → Fs = 1kHz / (7+1) = 125Hz
 800c0ba:	2315      	movs	r3, #21
 800c0bc:	713b      	strb	r3, [r7, #4]
 800c0be:	2307      	movs	r3, #7
 800c0c0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(IMU_I2C, ITG3205_ADDR, buf, 2, 100);
 800c0c2:	1d3a      	adds	r2, r7, #4
 800c0c4:	2364      	movs	r3, #100	@ 0x64
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	21d0      	movs	r1, #208	@ 0xd0
 800c0cc:	4812      	ldr	r0, [pc, #72]	@ (800c118 <imu_init+0x64>)
 800c0ce:	f7f7 fe5b 	bl	8003d88 <HAL_I2C_Master_Transmit>

	// Set DLPF and Full Scale: 0x18 = FS ±2000°/s, low-pass filter at 42Hz
	buf[0] = 0x16; buf[1] = 0x1B;
 800c0d2:	2316      	movs	r3, #22
 800c0d4:	713b      	strb	r3, [r7, #4]
 800c0d6:	231b      	movs	r3, #27
 800c0d8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(IMU_I2C, ITG3205_ADDR, buf, 2, 100);
 800c0da:	1d3a      	adds	r2, r7, #4
 800c0dc:	2364      	movs	r3, #100	@ 0x64
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	21d0      	movs	r1, #208	@ 0xd0
 800c0e4:	480c      	ldr	r0, [pc, #48]	@ (800c118 <imu_init+0x64>)
 800c0e6:	f7f7 fe4f 	bl	8003d88 <HAL_I2C_Master_Transmit>

	// Power management: select Z gyro as PLL source (low-power + stability)
	buf[0] = 0x3E; buf[1] = 0x03;
 800c0ea:	233e      	movs	r3, #62	@ 0x3e
 800c0ec:	713b      	strb	r3, [r7, #4]
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(IMU_I2C, ITG3205_ADDR, buf, 2, 100);
 800c0f2:	1d3a      	adds	r2, r7, #4
 800c0f4:	2364      	movs	r3, #100	@ 0x64
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	21d0      	movs	r1, #208	@ 0xd0
 800c0fc:	4806      	ldr	r0, [pc, #24]	@ (800c118 <imu_init+0x64>)
 800c0fe:	f7f7 fe43 	bl	8003d88 <HAL_I2C_Master_Transmit>

	HAL_UART_Transmit(DEBUG_UART, IMU_INIT_MSG , sizeof IMU_INIT_MSG , -1);
 800c102:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c106:	220e      	movs	r2, #14
 800c108:	4904      	ldr	r1, [pc, #16]	@ (800c11c <imu_init+0x68>)
 800c10a:	4805      	ldr	r0, [pc, #20]	@ (800c120 <imu_init+0x6c>)
 800c10c:	f7fd f970 	bl	80093f0 <HAL_UART_Transmit>
	// HMC5883L: configure for continuous measurement
	//buf[0]=0x02; buf[1]=0x00; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);
	//buf[0]=0x00; buf[1]=0x70; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);
	//buf[0]=0x01; buf[1]=0xA0; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);

}
 800c110:	bf00      	nop
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	24000258 	.word	0x24000258
 800c11c:	08010954 	.word	0x08010954
 800c120:	240003c8 	.word	0x240003c8

0800c124 <imu_update>:

void imu_update (void)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af04      	add	r7, sp, #16

    if (sample_count < IMU_NUMBER_OF_SAMPLES)
 800c12a:	4b1c      	ldr	r3, [pc, #112]	@ (800c19c <imu_update+0x78>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800c132:	4293      	cmp	r3, r2
 800c134:	d82e      	bhi.n	800c194 <imu_update+0x70>
    {
        uint8_t buf[2];
        HAL_I2C_Mem_Read(IMU_I2C, ITG3205_ADDR, 0x21, 1, buf, 2, 100); // ZOUT_H, ZOUT_L
 800c136:	2364      	movs	r3, #100	@ 0x64
 800c138:	9302      	str	r3, [sp, #8]
 800c13a:	2302      	movs	r3, #2
 800c13c:	9301      	str	r3, [sp, #4]
 800c13e:	463b      	mov	r3, r7
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	2301      	movs	r3, #1
 800c144:	2221      	movs	r2, #33	@ 0x21
 800c146:	21d0      	movs	r1, #208	@ 0xd0
 800c148:	4815      	ldr	r0, [pc, #84]	@ (800c1a0 <imu_update+0x7c>)
 800c14a:	f7f7 ff35 	bl	8003fb8 <HAL_I2C_Mem_Read>

    	package_data_t* imu_data = write_package_data();
 800c14e:	f7ff ff5d 	bl	800c00c <write_package_data>
 800c152:	6078      	str	r0, [r7, #4]
    	imu_data->imu[sample_count] = (int16_t)((int16_t)buf[0] << 8 | buf[1]);
 800c154:	783b      	ldrb	r3, [r7, #0]
 800c156:	b21b      	sxth	r3, r3
 800c158:	021b      	lsls	r3, r3, #8
 800c15a:	b219      	sxth	r1, r3
 800c15c:	787b      	ldrb	r3, [r7, #1]
 800c15e:	b21b      	sxth	r3, r3
 800c160:	4a0e      	ldr	r2, [pc, #56]	@ (800c19c <imu_update+0x78>)
 800c162:	6812      	ldr	r2, [r2, #0]
 800c164:	430b      	orrs	r3, r1
 800c166:	b219      	sxth	r1, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3218      	adds	r2, #24
 800c16c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    	//Debug
    	sprintf(imu_msg_buffer,"\r\nIMU:%d\r\n",imu_data->imu[sample_count]);
 800c170:	4b0a      	ldr	r3, [pc, #40]	@ (800c19c <imu_update+0x78>)
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	3218      	adds	r2, #24
 800c178:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c17c:	461a      	mov	r2, r3
 800c17e:	4909      	ldr	r1, [pc, #36]	@ (800c1a4 <imu_update+0x80>)
 800c180:	4809      	ldr	r0, [pc, #36]	@ (800c1a8 <imu_update+0x84>)
 800c182:	f000 ff5d 	bl	800d040 <siprintf>
    	HAL_UART_Transmit(DEBUG_UART, imu_msg_buffer, 16, -1);
 800c186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c18a:	2210      	movs	r2, #16
 800c18c:	4906      	ldr	r1, [pc, #24]	@ (800c1a8 <imu_update+0x84>)
 800c18e:	4807      	ldr	r0, [pc, #28]	@ (800c1ac <imu_update+0x88>)
 800c190:	f7fd f92e 	bl	80093f0 <HAL_UART_Transmit>

    }
}
 800c194:	bf00      	nop
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	240033d8 	.word	0x240033d8
 800c1a0:	24000258 	.word	0x24000258
 800c1a4:	08010964 	.word	0x08010964
 800c1a8:	240033dc 	.word	0x240033dc
 800c1ac:	240003c8 	.word	0x240003c8

0800c1b0 <nb_iot_init>:

char recived_at_msg[MOBILE_COMMS_ANSWER_LEN];
char msg_buffer[32];

void nb_iot_init (void)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(DEBUG_UART, MOBILE_COMMS_INIT_MSG, sizeof MOBILE_COMMS_INIT_MSG);
 800c1b4:	2216      	movs	r2, #22
 800c1b6:	4910      	ldr	r1, [pc, #64]	@ (800c1f8 <nb_iot_init+0x48>)
 800c1b8:	4810      	ldr	r0, [pc, #64]	@ (800c1fc <nb_iot_init+0x4c>)
 800c1ba:	f7fd fa6f 	bl	800969c <HAL_UART_Transmit_IT>

	at_echo_off(recived_at_msg);
 800c1be:	4810      	ldr	r0, [pc, #64]	@ (800c200 <nb_iot_init+0x50>)
 800c1c0:	f7ff fe6c 	bl	800be9c <at_echo_off>
	at_network_mode(recived_at_msg);
 800c1c4:	480e      	ldr	r0, [pc, #56]	@ (800c200 <nb_iot_init+0x50>)
 800c1c6:	f7ff fe79 	bl	800bebc <at_network_mode>
	at_set_band(recived_at_msg);
 800c1ca:	480d      	ldr	r0, [pc, #52]	@ (800c200 <nb_iot_init+0x50>)
 800c1cc:	f7ff fe86 	bl	800bedc <at_set_band>
	//at_setup_lte(recived_at_msg);
	at_network_pdp_activate(recived_at_msg);
 800c1d0:	480b      	ldr	r0, [pc, #44]	@ (800c200 <nb_iot_init+0x50>)
 800c1d2:	f7ff fecb 	bl	800bf6c <at_network_pdp_activate>
	at_gprs_init(recived_at_msg);
 800c1d6:	480a      	ldr	r0, [pc, #40]	@ (800c200 <nb_iot_init+0x50>)
 800c1d8:	f7ff fe90 	bl	800befc <at_gprs_init>
	at_network_attach_request (recived_at_msg);
 800c1dc:	4808      	ldr	r0, [pc, #32]	@ (800c200 <nb_iot_init+0x50>)
 800c1de:	f7ff fe9d 	bl	800bf1c <at_network_attach_request>
	//at_set_ip_config(recived_at_msg);
	//at_set_ip_headers(recived_at_msg);
	at_init_http_connection(recived_at_msg);
 800c1e2:	4807      	ldr	r0, [pc, #28]	@ (800c200 <nb_iot_init+0x50>)
 800c1e4:	f7ff feaa 	bl	800bf3c <at_init_http_connection>

	HAL_UART_Transmit_IT(DEBUG_UART, MOBILE_COMMS_END_INIT_MSG, sizeof MOBILE_COMMS_END_INIT_MSG);
 800c1e8:	221a      	movs	r2, #26
 800c1ea:	4906      	ldr	r1, [pc, #24]	@ (800c204 <nb_iot_init+0x54>)
 800c1ec:	4803      	ldr	r0, [pc, #12]	@ (800c1fc <nb_iot_init+0x4c>)
 800c1ee:	f7fd fa55 	bl	800969c <HAL_UART_Transmit_IT>

}
 800c1f2:	bf00      	nop
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	08010970 	.word	0x08010970
 800c1fc:	240003c8 	.word	0x240003c8
 800c200:	240033fc 	.word	0x240033fc
 800c204:	08010988 	.word	0x08010988

0800c208 <sd_card_init>:
 */

#include "sd_card_behavior.h"

void sd_card_init (void)
{
 800c208:	b480      	push	{r7}
 800c20a:	af00      	add	r7, sp, #0

}
 800c20c:	bf00      	nop
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <temperature_init>:
 */

#include "temperature_behavior.h"

void temperature_init (void)
{
 800c216:	b480      	push	{r7}
 800c218:	af00      	add	r7, sp, #0

}
 800c21a:	bf00      	nop
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <__cvt>:
 800c224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c226:	ed2d 8b02 	vpush	{d8}
 800c22a:	eeb0 8b40 	vmov.f64	d8, d0
 800c22e:	b085      	sub	sp, #20
 800c230:	4617      	mov	r7, r2
 800c232:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c234:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c236:	ee18 2a90 	vmov	r2, s17
 800c23a:	f025 0520 	bic.w	r5, r5, #32
 800c23e:	2a00      	cmp	r2, #0
 800c240:	bfb6      	itet	lt
 800c242:	222d      	movlt	r2, #45	@ 0x2d
 800c244:	2200      	movge	r2, #0
 800c246:	eeb1 8b40 	vneglt.f64	d8, d0
 800c24a:	2d46      	cmp	r5, #70	@ 0x46
 800c24c:	460c      	mov	r4, r1
 800c24e:	701a      	strb	r2, [r3, #0]
 800c250:	d004      	beq.n	800c25c <__cvt+0x38>
 800c252:	2d45      	cmp	r5, #69	@ 0x45
 800c254:	d100      	bne.n	800c258 <__cvt+0x34>
 800c256:	3401      	adds	r4, #1
 800c258:	2102      	movs	r1, #2
 800c25a:	e000      	b.n	800c25e <__cvt+0x3a>
 800c25c:	2103      	movs	r1, #3
 800c25e:	ab03      	add	r3, sp, #12
 800c260:	9301      	str	r3, [sp, #4]
 800c262:	ab02      	add	r3, sp, #8
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	4622      	mov	r2, r4
 800c268:	4633      	mov	r3, r6
 800c26a:	eeb0 0b48 	vmov.f64	d0, d8
 800c26e:	f001 f85b 	bl	800d328 <_dtoa_r>
 800c272:	2d47      	cmp	r5, #71	@ 0x47
 800c274:	d114      	bne.n	800c2a0 <__cvt+0x7c>
 800c276:	07fb      	lsls	r3, r7, #31
 800c278:	d50a      	bpl.n	800c290 <__cvt+0x6c>
 800c27a:	1902      	adds	r2, r0, r4
 800c27c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c284:	bf08      	it	eq
 800c286:	9203      	streq	r2, [sp, #12]
 800c288:	2130      	movs	r1, #48	@ 0x30
 800c28a:	9b03      	ldr	r3, [sp, #12]
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d319      	bcc.n	800c2c4 <__cvt+0xa0>
 800c290:	9b03      	ldr	r3, [sp, #12]
 800c292:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c294:	1a1b      	subs	r3, r3, r0
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	b005      	add	sp, #20
 800c29a:	ecbd 8b02 	vpop	{d8}
 800c29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a0:	2d46      	cmp	r5, #70	@ 0x46
 800c2a2:	eb00 0204 	add.w	r2, r0, r4
 800c2a6:	d1e9      	bne.n	800c27c <__cvt+0x58>
 800c2a8:	7803      	ldrb	r3, [r0, #0]
 800c2aa:	2b30      	cmp	r3, #48	@ 0x30
 800c2ac:	d107      	bne.n	800c2be <__cvt+0x9a>
 800c2ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b6:	bf1c      	itt	ne
 800c2b8:	f1c4 0401 	rsbne	r4, r4, #1
 800c2bc:	6034      	strne	r4, [r6, #0]
 800c2be:	6833      	ldr	r3, [r6, #0]
 800c2c0:	441a      	add	r2, r3
 800c2c2:	e7db      	b.n	800c27c <__cvt+0x58>
 800c2c4:	1c5c      	adds	r4, r3, #1
 800c2c6:	9403      	str	r4, [sp, #12]
 800c2c8:	7019      	strb	r1, [r3, #0]
 800c2ca:	e7de      	b.n	800c28a <__cvt+0x66>

0800c2cc <__exponent>:
 800c2cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2ce:	2900      	cmp	r1, #0
 800c2d0:	bfba      	itte	lt
 800c2d2:	4249      	neglt	r1, r1
 800c2d4:	232d      	movlt	r3, #45	@ 0x2d
 800c2d6:	232b      	movge	r3, #43	@ 0x2b
 800c2d8:	2909      	cmp	r1, #9
 800c2da:	7002      	strb	r2, [r0, #0]
 800c2dc:	7043      	strb	r3, [r0, #1]
 800c2de:	dd29      	ble.n	800c334 <__exponent+0x68>
 800c2e0:	f10d 0307 	add.w	r3, sp, #7
 800c2e4:	461d      	mov	r5, r3
 800c2e6:	270a      	movs	r7, #10
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	fbb1 f6f7 	udiv	r6, r1, r7
 800c2ee:	fb07 1416 	mls	r4, r7, r6, r1
 800c2f2:	3430      	adds	r4, #48	@ 0x30
 800c2f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c2f8:	460c      	mov	r4, r1
 800c2fa:	2c63      	cmp	r4, #99	@ 0x63
 800c2fc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c300:	4631      	mov	r1, r6
 800c302:	dcf1      	bgt.n	800c2e8 <__exponent+0x1c>
 800c304:	3130      	adds	r1, #48	@ 0x30
 800c306:	1e94      	subs	r4, r2, #2
 800c308:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c30c:	1c41      	adds	r1, r0, #1
 800c30e:	4623      	mov	r3, r4
 800c310:	42ab      	cmp	r3, r5
 800c312:	d30a      	bcc.n	800c32a <__exponent+0x5e>
 800c314:	f10d 0309 	add.w	r3, sp, #9
 800c318:	1a9b      	subs	r3, r3, r2
 800c31a:	42ac      	cmp	r4, r5
 800c31c:	bf88      	it	hi
 800c31e:	2300      	movhi	r3, #0
 800c320:	3302      	adds	r3, #2
 800c322:	4403      	add	r3, r0
 800c324:	1a18      	subs	r0, r3, r0
 800c326:	b003      	add	sp, #12
 800c328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c32a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c32e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c332:	e7ed      	b.n	800c310 <__exponent+0x44>
 800c334:	2330      	movs	r3, #48	@ 0x30
 800c336:	3130      	adds	r1, #48	@ 0x30
 800c338:	7083      	strb	r3, [r0, #2]
 800c33a:	70c1      	strb	r1, [r0, #3]
 800c33c:	1d03      	adds	r3, r0, #4
 800c33e:	e7f1      	b.n	800c324 <__exponent+0x58>

0800c340 <_printf_float>:
 800c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c344:	b08d      	sub	sp, #52	@ 0x34
 800c346:	460c      	mov	r4, r1
 800c348:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c34c:	4616      	mov	r6, r2
 800c34e:	461f      	mov	r7, r3
 800c350:	4605      	mov	r5, r0
 800c352:	f000 fee3 	bl	800d11c <_localeconv_r>
 800c356:	f8d0 b000 	ldr.w	fp, [r0]
 800c35a:	4658      	mov	r0, fp
 800c35c:	f7f4 f810 	bl	8000380 <strlen>
 800c360:	2300      	movs	r3, #0
 800c362:	930a      	str	r3, [sp, #40]	@ 0x28
 800c364:	f8d8 3000 	ldr.w	r3, [r8]
 800c368:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c36c:	6822      	ldr	r2, [r4, #0]
 800c36e:	9005      	str	r0, [sp, #20]
 800c370:	3307      	adds	r3, #7
 800c372:	f023 0307 	bic.w	r3, r3, #7
 800c376:	f103 0108 	add.w	r1, r3, #8
 800c37a:	f8c8 1000 	str.w	r1, [r8]
 800c37e:	ed93 0b00 	vldr	d0, [r3]
 800c382:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c5e0 <_printf_float+0x2a0>
 800c386:	eeb0 7bc0 	vabs.f64	d7, d0
 800c38a:	eeb4 7b46 	vcmp.f64	d7, d6
 800c38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c392:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c396:	dd24      	ble.n	800c3e2 <_printf_float+0xa2>
 800c398:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3a0:	d502      	bpl.n	800c3a8 <_printf_float+0x68>
 800c3a2:	232d      	movs	r3, #45	@ 0x2d
 800c3a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3a8:	498f      	ldr	r1, [pc, #572]	@ (800c5e8 <_printf_float+0x2a8>)
 800c3aa:	4b90      	ldr	r3, [pc, #576]	@ (800c5ec <_printf_float+0x2ac>)
 800c3ac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c3b0:	bf8c      	ite	hi
 800c3b2:	4688      	movhi	r8, r1
 800c3b4:	4698      	movls	r8, r3
 800c3b6:	f022 0204 	bic.w	r2, r2, #4
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	6123      	str	r3, [r4, #16]
 800c3be:	6022      	str	r2, [r4, #0]
 800c3c0:	f04f 0a00 	mov.w	sl, #0
 800c3c4:	9700      	str	r7, [sp, #0]
 800c3c6:	4633      	mov	r3, r6
 800c3c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	f000 f9d1 	bl	800c774 <_printf_common>
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	f040 8089 	bne.w	800c4ea <_printf_float+0x1aa>
 800c3d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3dc:	b00d      	add	sp, #52	@ 0x34
 800c3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e2:	eeb4 0b40 	vcmp.f64	d0, d0
 800c3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ea:	d709      	bvc.n	800c400 <_printf_float+0xc0>
 800c3ec:	ee10 3a90 	vmov	r3, s1
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	bfbc      	itt	lt
 800c3f4:	232d      	movlt	r3, #45	@ 0x2d
 800c3f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c3fa:	497d      	ldr	r1, [pc, #500]	@ (800c5f0 <_printf_float+0x2b0>)
 800c3fc:	4b7d      	ldr	r3, [pc, #500]	@ (800c5f4 <_printf_float+0x2b4>)
 800c3fe:	e7d5      	b.n	800c3ac <_printf_float+0x6c>
 800c400:	6863      	ldr	r3, [r4, #4]
 800c402:	1c59      	adds	r1, r3, #1
 800c404:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c408:	d139      	bne.n	800c47e <_printf_float+0x13e>
 800c40a:	2306      	movs	r3, #6
 800c40c:	6063      	str	r3, [r4, #4]
 800c40e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c412:	2300      	movs	r3, #0
 800c414:	6022      	str	r2, [r4, #0]
 800c416:	9303      	str	r3, [sp, #12]
 800c418:	ab0a      	add	r3, sp, #40	@ 0x28
 800c41a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c41e:	ab09      	add	r3, sp, #36	@ 0x24
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	6861      	ldr	r1, [r4, #4]
 800c424:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c428:	4628      	mov	r0, r5
 800c42a:	f7ff fefb 	bl	800c224 <__cvt>
 800c42e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c432:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c434:	4680      	mov	r8, r0
 800c436:	d129      	bne.n	800c48c <_printf_float+0x14c>
 800c438:	1cc8      	adds	r0, r1, #3
 800c43a:	db02      	blt.n	800c442 <_printf_float+0x102>
 800c43c:	6863      	ldr	r3, [r4, #4]
 800c43e:	4299      	cmp	r1, r3
 800c440:	dd41      	ble.n	800c4c6 <_printf_float+0x186>
 800c442:	f1a9 0902 	sub.w	r9, r9, #2
 800c446:	fa5f f989 	uxtb.w	r9, r9
 800c44a:	3901      	subs	r1, #1
 800c44c:	464a      	mov	r2, r9
 800c44e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c452:	9109      	str	r1, [sp, #36]	@ 0x24
 800c454:	f7ff ff3a 	bl	800c2cc <__exponent>
 800c458:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c45a:	1813      	adds	r3, r2, r0
 800c45c:	2a01      	cmp	r2, #1
 800c45e:	4682      	mov	sl, r0
 800c460:	6123      	str	r3, [r4, #16]
 800c462:	dc02      	bgt.n	800c46a <_printf_float+0x12a>
 800c464:	6822      	ldr	r2, [r4, #0]
 800c466:	07d2      	lsls	r2, r2, #31
 800c468:	d501      	bpl.n	800c46e <_printf_float+0x12e>
 800c46a:	3301      	adds	r3, #1
 800c46c:	6123      	str	r3, [r4, #16]
 800c46e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c472:	2b00      	cmp	r3, #0
 800c474:	d0a6      	beq.n	800c3c4 <_printf_float+0x84>
 800c476:	232d      	movs	r3, #45	@ 0x2d
 800c478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c47c:	e7a2      	b.n	800c3c4 <_printf_float+0x84>
 800c47e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c482:	d1c4      	bne.n	800c40e <_printf_float+0xce>
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1c2      	bne.n	800c40e <_printf_float+0xce>
 800c488:	2301      	movs	r3, #1
 800c48a:	e7bf      	b.n	800c40c <_printf_float+0xcc>
 800c48c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c490:	d9db      	bls.n	800c44a <_printf_float+0x10a>
 800c492:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c496:	d118      	bne.n	800c4ca <_printf_float+0x18a>
 800c498:	2900      	cmp	r1, #0
 800c49a:	6863      	ldr	r3, [r4, #4]
 800c49c:	dd0b      	ble.n	800c4b6 <_printf_float+0x176>
 800c49e:	6121      	str	r1, [r4, #16]
 800c4a0:	b913      	cbnz	r3, 800c4a8 <_printf_float+0x168>
 800c4a2:	6822      	ldr	r2, [r4, #0]
 800c4a4:	07d0      	lsls	r0, r2, #31
 800c4a6:	d502      	bpl.n	800c4ae <_printf_float+0x16e>
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	440b      	add	r3, r1
 800c4ac:	6123      	str	r3, [r4, #16]
 800c4ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c4b0:	f04f 0a00 	mov.w	sl, #0
 800c4b4:	e7db      	b.n	800c46e <_printf_float+0x12e>
 800c4b6:	b913      	cbnz	r3, 800c4be <_printf_float+0x17e>
 800c4b8:	6822      	ldr	r2, [r4, #0]
 800c4ba:	07d2      	lsls	r2, r2, #31
 800c4bc:	d501      	bpl.n	800c4c2 <_printf_float+0x182>
 800c4be:	3302      	adds	r3, #2
 800c4c0:	e7f4      	b.n	800c4ac <_printf_float+0x16c>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e7f2      	b.n	800c4ac <_printf_float+0x16c>
 800c4c6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c4ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4cc:	4299      	cmp	r1, r3
 800c4ce:	db05      	blt.n	800c4dc <_printf_float+0x19c>
 800c4d0:	6823      	ldr	r3, [r4, #0]
 800c4d2:	6121      	str	r1, [r4, #16]
 800c4d4:	07d8      	lsls	r0, r3, #31
 800c4d6:	d5ea      	bpl.n	800c4ae <_printf_float+0x16e>
 800c4d8:	1c4b      	adds	r3, r1, #1
 800c4da:	e7e7      	b.n	800c4ac <_printf_float+0x16c>
 800c4dc:	2900      	cmp	r1, #0
 800c4de:	bfd4      	ite	le
 800c4e0:	f1c1 0202 	rsble	r2, r1, #2
 800c4e4:	2201      	movgt	r2, #1
 800c4e6:	4413      	add	r3, r2
 800c4e8:	e7e0      	b.n	800c4ac <_printf_float+0x16c>
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	055a      	lsls	r2, r3, #21
 800c4ee:	d407      	bmi.n	800c500 <_printf_float+0x1c0>
 800c4f0:	6923      	ldr	r3, [r4, #16]
 800c4f2:	4642      	mov	r2, r8
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	47b8      	blx	r7
 800c4fa:	3001      	adds	r0, #1
 800c4fc:	d12a      	bne.n	800c554 <_printf_float+0x214>
 800c4fe:	e76b      	b.n	800c3d8 <_printf_float+0x98>
 800c500:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c504:	f240 80e0 	bls.w	800c6c8 <_printf_float+0x388>
 800c508:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c50c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c514:	d133      	bne.n	800c57e <_printf_float+0x23e>
 800c516:	4a38      	ldr	r2, [pc, #224]	@ (800c5f8 <_printf_float+0x2b8>)
 800c518:	2301      	movs	r3, #1
 800c51a:	4631      	mov	r1, r6
 800c51c:	4628      	mov	r0, r5
 800c51e:	47b8      	blx	r7
 800c520:	3001      	adds	r0, #1
 800c522:	f43f af59 	beq.w	800c3d8 <_printf_float+0x98>
 800c526:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c52a:	4543      	cmp	r3, r8
 800c52c:	db02      	blt.n	800c534 <_printf_float+0x1f4>
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	07d8      	lsls	r0, r3, #31
 800c532:	d50f      	bpl.n	800c554 <_printf_float+0x214>
 800c534:	9b05      	ldr	r3, [sp, #20]
 800c536:	465a      	mov	r2, fp
 800c538:	4631      	mov	r1, r6
 800c53a:	4628      	mov	r0, r5
 800c53c:	47b8      	blx	r7
 800c53e:	3001      	adds	r0, #1
 800c540:	f43f af4a 	beq.w	800c3d8 <_printf_float+0x98>
 800c544:	f04f 0900 	mov.w	r9, #0
 800c548:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c54c:	f104 0a1a 	add.w	sl, r4, #26
 800c550:	45c8      	cmp	r8, r9
 800c552:	dc09      	bgt.n	800c568 <_printf_float+0x228>
 800c554:	6823      	ldr	r3, [r4, #0]
 800c556:	079b      	lsls	r3, r3, #30
 800c558:	f100 8107 	bmi.w	800c76a <_printf_float+0x42a>
 800c55c:	68e0      	ldr	r0, [r4, #12]
 800c55e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c560:	4298      	cmp	r0, r3
 800c562:	bfb8      	it	lt
 800c564:	4618      	movlt	r0, r3
 800c566:	e739      	b.n	800c3dc <_printf_float+0x9c>
 800c568:	2301      	movs	r3, #1
 800c56a:	4652      	mov	r2, sl
 800c56c:	4631      	mov	r1, r6
 800c56e:	4628      	mov	r0, r5
 800c570:	47b8      	blx	r7
 800c572:	3001      	adds	r0, #1
 800c574:	f43f af30 	beq.w	800c3d8 <_printf_float+0x98>
 800c578:	f109 0901 	add.w	r9, r9, #1
 800c57c:	e7e8      	b.n	800c550 <_printf_float+0x210>
 800c57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c580:	2b00      	cmp	r3, #0
 800c582:	dc3b      	bgt.n	800c5fc <_printf_float+0x2bc>
 800c584:	4a1c      	ldr	r2, [pc, #112]	@ (800c5f8 <_printf_float+0x2b8>)
 800c586:	2301      	movs	r3, #1
 800c588:	4631      	mov	r1, r6
 800c58a:	4628      	mov	r0, r5
 800c58c:	47b8      	blx	r7
 800c58e:	3001      	adds	r0, #1
 800c590:	f43f af22 	beq.w	800c3d8 <_printf_float+0x98>
 800c594:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c598:	ea59 0303 	orrs.w	r3, r9, r3
 800c59c:	d102      	bne.n	800c5a4 <_printf_float+0x264>
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	07d9      	lsls	r1, r3, #31
 800c5a2:	d5d7      	bpl.n	800c554 <_printf_float+0x214>
 800c5a4:	9b05      	ldr	r3, [sp, #20]
 800c5a6:	465a      	mov	r2, fp
 800c5a8:	4631      	mov	r1, r6
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	47b8      	blx	r7
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	f43f af12 	beq.w	800c3d8 <_printf_float+0x98>
 800c5b4:	f04f 0a00 	mov.w	sl, #0
 800c5b8:	f104 0b1a 	add.w	fp, r4, #26
 800c5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5be:	425b      	negs	r3, r3
 800c5c0:	4553      	cmp	r3, sl
 800c5c2:	dc01      	bgt.n	800c5c8 <_printf_float+0x288>
 800c5c4:	464b      	mov	r3, r9
 800c5c6:	e794      	b.n	800c4f2 <_printf_float+0x1b2>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	465a      	mov	r2, fp
 800c5cc:	4631      	mov	r1, r6
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	47b8      	blx	r7
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	f43f af00 	beq.w	800c3d8 <_printf_float+0x98>
 800c5d8:	f10a 0a01 	add.w	sl, sl, #1
 800c5dc:	e7ee      	b.n	800c5bc <_printf_float+0x27c>
 800c5de:	bf00      	nop
 800c5e0:	ffffffff 	.word	0xffffffff
 800c5e4:	7fefffff 	.word	0x7fefffff
 800c5e8:	08010a08 	.word	0x08010a08
 800c5ec:	08010a04 	.word	0x08010a04
 800c5f0:	08010a10 	.word	0x08010a10
 800c5f4:	08010a0c 	.word	0x08010a0c
 800c5f8:	08010a14 	.word	0x08010a14
 800c5fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c5fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c602:	4553      	cmp	r3, sl
 800c604:	bfa8      	it	ge
 800c606:	4653      	movge	r3, sl
 800c608:	2b00      	cmp	r3, #0
 800c60a:	4699      	mov	r9, r3
 800c60c:	dc37      	bgt.n	800c67e <_printf_float+0x33e>
 800c60e:	2300      	movs	r3, #0
 800c610:	9307      	str	r3, [sp, #28]
 800c612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c616:	f104 021a 	add.w	r2, r4, #26
 800c61a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c61c:	9907      	ldr	r1, [sp, #28]
 800c61e:	9306      	str	r3, [sp, #24]
 800c620:	eba3 0309 	sub.w	r3, r3, r9
 800c624:	428b      	cmp	r3, r1
 800c626:	dc31      	bgt.n	800c68c <_printf_float+0x34c>
 800c628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c62a:	459a      	cmp	sl, r3
 800c62c:	dc3b      	bgt.n	800c6a6 <_printf_float+0x366>
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	07da      	lsls	r2, r3, #31
 800c632:	d438      	bmi.n	800c6a6 <_printf_float+0x366>
 800c634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c636:	ebaa 0903 	sub.w	r9, sl, r3
 800c63a:	9b06      	ldr	r3, [sp, #24]
 800c63c:	ebaa 0303 	sub.w	r3, sl, r3
 800c640:	4599      	cmp	r9, r3
 800c642:	bfa8      	it	ge
 800c644:	4699      	movge	r9, r3
 800c646:	f1b9 0f00 	cmp.w	r9, #0
 800c64a:	dc34      	bgt.n	800c6b6 <_printf_float+0x376>
 800c64c:	f04f 0800 	mov.w	r8, #0
 800c650:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c654:	f104 0b1a 	add.w	fp, r4, #26
 800c658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c65a:	ebaa 0303 	sub.w	r3, sl, r3
 800c65e:	eba3 0309 	sub.w	r3, r3, r9
 800c662:	4543      	cmp	r3, r8
 800c664:	f77f af76 	ble.w	800c554 <_printf_float+0x214>
 800c668:	2301      	movs	r3, #1
 800c66a:	465a      	mov	r2, fp
 800c66c:	4631      	mov	r1, r6
 800c66e:	4628      	mov	r0, r5
 800c670:	47b8      	blx	r7
 800c672:	3001      	adds	r0, #1
 800c674:	f43f aeb0 	beq.w	800c3d8 <_printf_float+0x98>
 800c678:	f108 0801 	add.w	r8, r8, #1
 800c67c:	e7ec      	b.n	800c658 <_printf_float+0x318>
 800c67e:	4642      	mov	r2, r8
 800c680:	4631      	mov	r1, r6
 800c682:	4628      	mov	r0, r5
 800c684:	47b8      	blx	r7
 800c686:	3001      	adds	r0, #1
 800c688:	d1c1      	bne.n	800c60e <_printf_float+0x2ce>
 800c68a:	e6a5      	b.n	800c3d8 <_printf_float+0x98>
 800c68c:	2301      	movs	r3, #1
 800c68e:	4631      	mov	r1, r6
 800c690:	4628      	mov	r0, r5
 800c692:	9206      	str	r2, [sp, #24]
 800c694:	47b8      	blx	r7
 800c696:	3001      	adds	r0, #1
 800c698:	f43f ae9e 	beq.w	800c3d8 <_printf_float+0x98>
 800c69c:	9b07      	ldr	r3, [sp, #28]
 800c69e:	9a06      	ldr	r2, [sp, #24]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	9307      	str	r3, [sp, #28]
 800c6a4:	e7b9      	b.n	800c61a <_printf_float+0x2da>
 800c6a6:	9b05      	ldr	r3, [sp, #20]
 800c6a8:	465a      	mov	r2, fp
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	47b8      	blx	r7
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	d1bf      	bne.n	800c634 <_printf_float+0x2f4>
 800c6b4:	e690      	b.n	800c3d8 <_printf_float+0x98>
 800c6b6:	9a06      	ldr	r2, [sp, #24]
 800c6b8:	464b      	mov	r3, r9
 800c6ba:	4442      	add	r2, r8
 800c6bc:	4631      	mov	r1, r6
 800c6be:	4628      	mov	r0, r5
 800c6c0:	47b8      	blx	r7
 800c6c2:	3001      	adds	r0, #1
 800c6c4:	d1c2      	bne.n	800c64c <_printf_float+0x30c>
 800c6c6:	e687      	b.n	800c3d8 <_printf_float+0x98>
 800c6c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c6cc:	f1b9 0f01 	cmp.w	r9, #1
 800c6d0:	dc01      	bgt.n	800c6d6 <_printf_float+0x396>
 800c6d2:	07db      	lsls	r3, r3, #31
 800c6d4:	d536      	bpl.n	800c744 <_printf_float+0x404>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4642      	mov	r2, r8
 800c6da:	4631      	mov	r1, r6
 800c6dc:	4628      	mov	r0, r5
 800c6de:	47b8      	blx	r7
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	f43f ae79 	beq.w	800c3d8 <_printf_float+0x98>
 800c6e6:	9b05      	ldr	r3, [sp, #20]
 800c6e8:	465a      	mov	r2, fp
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	47b8      	blx	r7
 800c6f0:	3001      	adds	r0, #1
 800c6f2:	f43f ae71 	beq.w	800c3d8 <_printf_float+0x98>
 800c6f6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c6fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c702:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800c706:	d018      	beq.n	800c73a <_printf_float+0x3fa>
 800c708:	464b      	mov	r3, r9
 800c70a:	f108 0201 	add.w	r2, r8, #1
 800c70e:	4631      	mov	r1, r6
 800c710:	4628      	mov	r0, r5
 800c712:	47b8      	blx	r7
 800c714:	3001      	adds	r0, #1
 800c716:	d10c      	bne.n	800c732 <_printf_float+0x3f2>
 800c718:	e65e      	b.n	800c3d8 <_printf_float+0x98>
 800c71a:	2301      	movs	r3, #1
 800c71c:	465a      	mov	r2, fp
 800c71e:	4631      	mov	r1, r6
 800c720:	4628      	mov	r0, r5
 800c722:	47b8      	blx	r7
 800c724:	3001      	adds	r0, #1
 800c726:	f43f ae57 	beq.w	800c3d8 <_printf_float+0x98>
 800c72a:	f108 0801 	add.w	r8, r8, #1
 800c72e:	45c8      	cmp	r8, r9
 800c730:	dbf3      	blt.n	800c71a <_printf_float+0x3da>
 800c732:	4653      	mov	r3, sl
 800c734:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c738:	e6dc      	b.n	800c4f4 <_printf_float+0x1b4>
 800c73a:	f04f 0800 	mov.w	r8, #0
 800c73e:	f104 0b1a 	add.w	fp, r4, #26
 800c742:	e7f4      	b.n	800c72e <_printf_float+0x3ee>
 800c744:	2301      	movs	r3, #1
 800c746:	4642      	mov	r2, r8
 800c748:	e7e1      	b.n	800c70e <_printf_float+0x3ce>
 800c74a:	2301      	movs	r3, #1
 800c74c:	464a      	mov	r2, r9
 800c74e:	4631      	mov	r1, r6
 800c750:	4628      	mov	r0, r5
 800c752:	47b8      	blx	r7
 800c754:	3001      	adds	r0, #1
 800c756:	f43f ae3f 	beq.w	800c3d8 <_printf_float+0x98>
 800c75a:	f108 0801 	add.w	r8, r8, #1
 800c75e:	68e3      	ldr	r3, [r4, #12]
 800c760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c762:	1a5b      	subs	r3, r3, r1
 800c764:	4543      	cmp	r3, r8
 800c766:	dcf0      	bgt.n	800c74a <_printf_float+0x40a>
 800c768:	e6f8      	b.n	800c55c <_printf_float+0x21c>
 800c76a:	f04f 0800 	mov.w	r8, #0
 800c76e:	f104 0919 	add.w	r9, r4, #25
 800c772:	e7f4      	b.n	800c75e <_printf_float+0x41e>

0800c774 <_printf_common>:
 800c774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c778:	4616      	mov	r6, r2
 800c77a:	4698      	mov	r8, r3
 800c77c:	688a      	ldr	r2, [r1, #8]
 800c77e:	690b      	ldr	r3, [r1, #16]
 800c780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c784:	4293      	cmp	r3, r2
 800c786:	bfb8      	it	lt
 800c788:	4613      	movlt	r3, r2
 800c78a:	6033      	str	r3, [r6, #0]
 800c78c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c790:	4607      	mov	r7, r0
 800c792:	460c      	mov	r4, r1
 800c794:	b10a      	cbz	r2, 800c79a <_printf_common+0x26>
 800c796:	3301      	adds	r3, #1
 800c798:	6033      	str	r3, [r6, #0]
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	0699      	lsls	r1, r3, #26
 800c79e:	bf42      	ittt	mi
 800c7a0:	6833      	ldrmi	r3, [r6, #0]
 800c7a2:	3302      	addmi	r3, #2
 800c7a4:	6033      	strmi	r3, [r6, #0]
 800c7a6:	6825      	ldr	r5, [r4, #0]
 800c7a8:	f015 0506 	ands.w	r5, r5, #6
 800c7ac:	d106      	bne.n	800c7bc <_printf_common+0x48>
 800c7ae:	f104 0a19 	add.w	sl, r4, #25
 800c7b2:	68e3      	ldr	r3, [r4, #12]
 800c7b4:	6832      	ldr	r2, [r6, #0]
 800c7b6:	1a9b      	subs	r3, r3, r2
 800c7b8:	42ab      	cmp	r3, r5
 800c7ba:	dc26      	bgt.n	800c80a <_printf_common+0x96>
 800c7bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7c0:	6822      	ldr	r2, [r4, #0]
 800c7c2:	3b00      	subs	r3, #0
 800c7c4:	bf18      	it	ne
 800c7c6:	2301      	movne	r3, #1
 800c7c8:	0692      	lsls	r2, r2, #26
 800c7ca:	d42b      	bmi.n	800c824 <_printf_common+0xb0>
 800c7cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7d0:	4641      	mov	r1, r8
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	47c8      	blx	r9
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	d01e      	beq.n	800c818 <_printf_common+0xa4>
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	6922      	ldr	r2, [r4, #16]
 800c7de:	f003 0306 	and.w	r3, r3, #6
 800c7e2:	2b04      	cmp	r3, #4
 800c7e4:	bf02      	ittt	eq
 800c7e6:	68e5      	ldreq	r5, [r4, #12]
 800c7e8:	6833      	ldreq	r3, [r6, #0]
 800c7ea:	1aed      	subeq	r5, r5, r3
 800c7ec:	68a3      	ldr	r3, [r4, #8]
 800c7ee:	bf0c      	ite	eq
 800c7f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7f4:	2500      	movne	r5, #0
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	bfc4      	itt	gt
 800c7fa:	1a9b      	subgt	r3, r3, r2
 800c7fc:	18ed      	addgt	r5, r5, r3
 800c7fe:	2600      	movs	r6, #0
 800c800:	341a      	adds	r4, #26
 800c802:	42b5      	cmp	r5, r6
 800c804:	d11a      	bne.n	800c83c <_printf_common+0xc8>
 800c806:	2000      	movs	r0, #0
 800c808:	e008      	b.n	800c81c <_printf_common+0xa8>
 800c80a:	2301      	movs	r3, #1
 800c80c:	4652      	mov	r2, sl
 800c80e:	4641      	mov	r1, r8
 800c810:	4638      	mov	r0, r7
 800c812:	47c8      	blx	r9
 800c814:	3001      	adds	r0, #1
 800c816:	d103      	bne.n	800c820 <_printf_common+0xac>
 800c818:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c820:	3501      	adds	r5, #1
 800c822:	e7c6      	b.n	800c7b2 <_printf_common+0x3e>
 800c824:	18e1      	adds	r1, r4, r3
 800c826:	1c5a      	adds	r2, r3, #1
 800c828:	2030      	movs	r0, #48	@ 0x30
 800c82a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c82e:	4422      	add	r2, r4
 800c830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c838:	3302      	adds	r3, #2
 800c83a:	e7c7      	b.n	800c7cc <_printf_common+0x58>
 800c83c:	2301      	movs	r3, #1
 800c83e:	4622      	mov	r2, r4
 800c840:	4641      	mov	r1, r8
 800c842:	4638      	mov	r0, r7
 800c844:	47c8      	blx	r9
 800c846:	3001      	adds	r0, #1
 800c848:	d0e6      	beq.n	800c818 <_printf_common+0xa4>
 800c84a:	3601      	adds	r6, #1
 800c84c:	e7d9      	b.n	800c802 <_printf_common+0x8e>
	...

0800c850 <_printf_i>:
 800c850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c854:	7e0f      	ldrb	r7, [r1, #24]
 800c856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c858:	2f78      	cmp	r7, #120	@ 0x78
 800c85a:	4691      	mov	r9, r2
 800c85c:	4680      	mov	r8, r0
 800c85e:	460c      	mov	r4, r1
 800c860:	469a      	mov	sl, r3
 800c862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c866:	d807      	bhi.n	800c878 <_printf_i+0x28>
 800c868:	2f62      	cmp	r7, #98	@ 0x62
 800c86a:	d80a      	bhi.n	800c882 <_printf_i+0x32>
 800c86c:	2f00      	cmp	r7, #0
 800c86e:	f000 80d1 	beq.w	800ca14 <_printf_i+0x1c4>
 800c872:	2f58      	cmp	r7, #88	@ 0x58
 800c874:	f000 80b8 	beq.w	800c9e8 <_printf_i+0x198>
 800c878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c87c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c880:	e03a      	b.n	800c8f8 <_printf_i+0xa8>
 800c882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c886:	2b15      	cmp	r3, #21
 800c888:	d8f6      	bhi.n	800c878 <_printf_i+0x28>
 800c88a:	a101      	add	r1, pc, #4	@ (adr r1, 800c890 <_printf_i+0x40>)
 800c88c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c890:	0800c8e9 	.word	0x0800c8e9
 800c894:	0800c8fd 	.word	0x0800c8fd
 800c898:	0800c879 	.word	0x0800c879
 800c89c:	0800c879 	.word	0x0800c879
 800c8a0:	0800c879 	.word	0x0800c879
 800c8a4:	0800c879 	.word	0x0800c879
 800c8a8:	0800c8fd 	.word	0x0800c8fd
 800c8ac:	0800c879 	.word	0x0800c879
 800c8b0:	0800c879 	.word	0x0800c879
 800c8b4:	0800c879 	.word	0x0800c879
 800c8b8:	0800c879 	.word	0x0800c879
 800c8bc:	0800c9fb 	.word	0x0800c9fb
 800c8c0:	0800c927 	.word	0x0800c927
 800c8c4:	0800c9b5 	.word	0x0800c9b5
 800c8c8:	0800c879 	.word	0x0800c879
 800c8cc:	0800c879 	.word	0x0800c879
 800c8d0:	0800ca1d 	.word	0x0800ca1d
 800c8d4:	0800c879 	.word	0x0800c879
 800c8d8:	0800c927 	.word	0x0800c927
 800c8dc:	0800c879 	.word	0x0800c879
 800c8e0:	0800c879 	.word	0x0800c879
 800c8e4:	0800c9bd 	.word	0x0800c9bd
 800c8e8:	6833      	ldr	r3, [r6, #0]
 800c8ea:	1d1a      	adds	r2, r3, #4
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	6032      	str	r2, [r6, #0]
 800c8f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e09c      	b.n	800ca36 <_printf_i+0x1e6>
 800c8fc:	6833      	ldr	r3, [r6, #0]
 800c8fe:	6820      	ldr	r0, [r4, #0]
 800c900:	1d19      	adds	r1, r3, #4
 800c902:	6031      	str	r1, [r6, #0]
 800c904:	0606      	lsls	r6, r0, #24
 800c906:	d501      	bpl.n	800c90c <_printf_i+0xbc>
 800c908:	681d      	ldr	r5, [r3, #0]
 800c90a:	e003      	b.n	800c914 <_printf_i+0xc4>
 800c90c:	0645      	lsls	r5, r0, #25
 800c90e:	d5fb      	bpl.n	800c908 <_printf_i+0xb8>
 800c910:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c914:	2d00      	cmp	r5, #0
 800c916:	da03      	bge.n	800c920 <_printf_i+0xd0>
 800c918:	232d      	movs	r3, #45	@ 0x2d
 800c91a:	426d      	negs	r5, r5
 800c91c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c920:	4858      	ldr	r0, [pc, #352]	@ (800ca84 <_printf_i+0x234>)
 800c922:	230a      	movs	r3, #10
 800c924:	e011      	b.n	800c94a <_printf_i+0xfa>
 800c926:	6821      	ldr	r1, [r4, #0]
 800c928:	6833      	ldr	r3, [r6, #0]
 800c92a:	0608      	lsls	r0, r1, #24
 800c92c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c930:	d402      	bmi.n	800c938 <_printf_i+0xe8>
 800c932:	0649      	lsls	r1, r1, #25
 800c934:	bf48      	it	mi
 800c936:	b2ad      	uxthmi	r5, r5
 800c938:	2f6f      	cmp	r7, #111	@ 0x6f
 800c93a:	4852      	ldr	r0, [pc, #328]	@ (800ca84 <_printf_i+0x234>)
 800c93c:	6033      	str	r3, [r6, #0]
 800c93e:	bf14      	ite	ne
 800c940:	230a      	movne	r3, #10
 800c942:	2308      	moveq	r3, #8
 800c944:	2100      	movs	r1, #0
 800c946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c94a:	6866      	ldr	r6, [r4, #4]
 800c94c:	60a6      	str	r6, [r4, #8]
 800c94e:	2e00      	cmp	r6, #0
 800c950:	db05      	blt.n	800c95e <_printf_i+0x10e>
 800c952:	6821      	ldr	r1, [r4, #0]
 800c954:	432e      	orrs	r6, r5
 800c956:	f021 0104 	bic.w	r1, r1, #4
 800c95a:	6021      	str	r1, [r4, #0]
 800c95c:	d04b      	beq.n	800c9f6 <_printf_i+0x1a6>
 800c95e:	4616      	mov	r6, r2
 800c960:	fbb5 f1f3 	udiv	r1, r5, r3
 800c964:	fb03 5711 	mls	r7, r3, r1, r5
 800c968:	5dc7      	ldrb	r7, [r0, r7]
 800c96a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c96e:	462f      	mov	r7, r5
 800c970:	42bb      	cmp	r3, r7
 800c972:	460d      	mov	r5, r1
 800c974:	d9f4      	bls.n	800c960 <_printf_i+0x110>
 800c976:	2b08      	cmp	r3, #8
 800c978:	d10b      	bne.n	800c992 <_printf_i+0x142>
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	07df      	lsls	r7, r3, #31
 800c97e:	d508      	bpl.n	800c992 <_printf_i+0x142>
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	6861      	ldr	r1, [r4, #4]
 800c984:	4299      	cmp	r1, r3
 800c986:	bfde      	ittt	le
 800c988:	2330      	movle	r3, #48	@ 0x30
 800c98a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c98e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c992:	1b92      	subs	r2, r2, r6
 800c994:	6122      	str	r2, [r4, #16]
 800c996:	f8cd a000 	str.w	sl, [sp]
 800c99a:	464b      	mov	r3, r9
 800c99c:	aa03      	add	r2, sp, #12
 800c99e:	4621      	mov	r1, r4
 800c9a0:	4640      	mov	r0, r8
 800c9a2:	f7ff fee7 	bl	800c774 <_printf_common>
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	d14a      	bne.n	800ca40 <_printf_i+0x1f0>
 800c9aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9ae:	b004      	add	sp, #16
 800c9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	f043 0320 	orr.w	r3, r3, #32
 800c9ba:	6023      	str	r3, [r4, #0]
 800c9bc:	4832      	ldr	r0, [pc, #200]	@ (800ca88 <_printf_i+0x238>)
 800c9be:	2778      	movs	r7, #120	@ 0x78
 800c9c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9c4:	6823      	ldr	r3, [r4, #0]
 800c9c6:	6831      	ldr	r1, [r6, #0]
 800c9c8:	061f      	lsls	r7, r3, #24
 800c9ca:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9ce:	d402      	bmi.n	800c9d6 <_printf_i+0x186>
 800c9d0:	065f      	lsls	r7, r3, #25
 800c9d2:	bf48      	it	mi
 800c9d4:	b2ad      	uxthmi	r5, r5
 800c9d6:	6031      	str	r1, [r6, #0]
 800c9d8:	07d9      	lsls	r1, r3, #31
 800c9da:	bf44      	itt	mi
 800c9dc:	f043 0320 	orrmi.w	r3, r3, #32
 800c9e0:	6023      	strmi	r3, [r4, #0]
 800c9e2:	b11d      	cbz	r5, 800c9ec <_printf_i+0x19c>
 800c9e4:	2310      	movs	r3, #16
 800c9e6:	e7ad      	b.n	800c944 <_printf_i+0xf4>
 800c9e8:	4826      	ldr	r0, [pc, #152]	@ (800ca84 <_printf_i+0x234>)
 800c9ea:	e7e9      	b.n	800c9c0 <_printf_i+0x170>
 800c9ec:	6823      	ldr	r3, [r4, #0]
 800c9ee:	f023 0320 	bic.w	r3, r3, #32
 800c9f2:	6023      	str	r3, [r4, #0]
 800c9f4:	e7f6      	b.n	800c9e4 <_printf_i+0x194>
 800c9f6:	4616      	mov	r6, r2
 800c9f8:	e7bd      	b.n	800c976 <_printf_i+0x126>
 800c9fa:	6833      	ldr	r3, [r6, #0]
 800c9fc:	6825      	ldr	r5, [r4, #0]
 800c9fe:	6961      	ldr	r1, [r4, #20]
 800ca00:	1d18      	adds	r0, r3, #4
 800ca02:	6030      	str	r0, [r6, #0]
 800ca04:	062e      	lsls	r6, r5, #24
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	d501      	bpl.n	800ca0e <_printf_i+0x1be>
 800ca0a:	6019      	str	r1, [r3, #0]
 800ca0c:	e002      	b.n	800ca14 <_printf_i+0x1c4>
 800ca0e:	0668      	lsls	r0, r5, #25
 800ca10:	d5fb      	bpl.n	800ca0a <_printf_i+0x1ba>
 800ca12:	8019      	strh	r1, [r3, #0]
 800ca14:	2300      	movs	r3, #0
 800ca16:	6123      	str	r3, [r4, #16]
 800ca18:	4616      	mov	r6, r2
 800ca1a:	e7bc      	b.n	800c996 <_printf_i+0x146>
 800ca1c:	6833      	ldr	r3, [r6, #0]
 800ca1e:	1d1a      	adds	r2, r3, #4
 800ca20:	6032      	str	r2, [r6, #0]
 800ca22:	681e      	ldr	r6, [r3, #0]
 800ca24:	6862      	ldr	r2, [r4, #4]
 800ca26:	2100      	movs	r1, #0
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f7f3 fc59 	bl	80002e0 <memchr>
 800ca2e:	b108      	cbz	r0, 800ca34 <_printf_i+0x1e4>
 800ca30:	1b80      	subs	r0, r0, r6
 800ca32:	6060      	str	r0, [r4, #4]
 800ca34:	6863      	ldr	r3, [r4, #4]
 800ca36:	6123      	str	r3, [r4, #16]
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca3e:	e7aa      	b.n	800c996 <_printf_i+0x146>
 800ca40:	6923      	ldr	r3, [r4, #16]
 800ca42:	4632      	mov	r2, r6
 800ca44:	4649      	mov	r1, r9
 800ca46:	4640      	mov	r0, r8
 800ca48:	47d0      	blx	sl
 800ca4a:	3001      	adds	r0, #1
 800ca4c:	d0ad      	beq.n	800c9aa <_printf_i+0x15a>
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	079b      	lsls	r3, r3, #30
 800ca52:	d413      	bmi.n	800ca7c <_printf_i+0x22c>
 800ca54:	68e0      	ldr	r0, [r4, #12]
 800ca56:	9b03      	ldr	r3, [sp, #12]
 800ca58:	4298      	cmp	r0, r3
 800ca5a:	bfb8      	it	lt
 800ca5c:	4618      	movlt	r0, r3
 800ca5e:	e7a6      	b.n	800c9ae <_printf_i+0x15e>
 800ca60:	2301      	movs	r3, #1
 800ca62:	4632      	mov	r2, r6
 800ca64:	4649      	mov	r1, r9
 800ca66:	4640      	mov	r0, r8
 800ca68:	47d0      	blx	sl
 800ca6a:	3001      	adds	r0, #1
 800ca6c:	d09d      	beq.n	800c9aa <_printf_i+0x15a>
 800ca6e:	3501      	adds	r5, #1
 800ca70:	68e3      	ldr	r3, [r4, #12]
 800ca72:	9903      	ldr	r1, [sp, #12]
 800ca74:	1a5b      	subs	r3, r3, r1
 800ca76:	42ab      	cmp	r3, r5
 800ca78:	dcf2      	bgt.n	800ca60 <_printf_i+0x210>
 800ca7a:	e7eb      	b.n	800ca54 <_printf_i+0x204>
 800ca7c:	2500      	movs	r5, #0
 800ca7e:	f104 0619 	add.w	r6, r4, #25
 800ca82:	e7f5      	b.n	800ca70 <_printf_i+0x220>
 800ca84:	08010a16 	.word	0x08010a16
 800ca88:	08010a27 	.word	0x08010a27

0800ca8c <_scanf_float>:
 800ca8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca90:	b087      	sub	sp, #28
 800ca92:	4691      	mov	r9, r2
 800ca94:	9303      	str	r3, [sp, #12]
 800ca96:	688b      	ldr	r3, [r1, #8]
 800ca98:	1e5a      	subs	r2, r3, #1
 800ca9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ca9e:	bf81      	itttt	hi
 800caa0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800caa4:	eb03 0b05 	addhi.w	fp, r3, r5
 800caa8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800caac:	608b      	strhi	r3, [r1, #8]
 800caae:	680b      	ldr	r3, [r1, #0]
 800cab0:	460a      	mov	r2, r1
 800cab2:	f04f 0500 	mov.w	r5, #0
 800cab6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800caba:	f842 3b1c 	str.w	r3, [r2], #28
 800cabe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cac2:	4680      	mov	r8, r0
 800cac4:	460c      	mov	r4, r1
 800cac6:	bf98      	it	ls
 800cac8:	f04f 0b00 	movls.w	fp, #0
 800cacc:	9201      	str	r2, [sp, #4]
 800cace:	4616      	mov	r6, r2
 800cad0:	46aa      	mov	sl, r5
 800cad2:	462f      	mov	r7, r5
 800cad4:	9502      	str	r5, [sp, #8]
 800cad6:	68a2      	ldr	r2, [r4, #8]
 800cad8:	b15a      	cbz	r2, 800caf2 <_scanf_float+0x66>
 800cada:	f8d9 3000 	ldr.w	r3, [r9]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	2b4e      	cmp	r3, #78	@ 0x4e
 800cae2:	d863      	bhi.n	800cbac <_scanf_float+0x120>
 800cae4:	2b40      	cmp	r3, #64	@ 0x40
 800cae6:	d83b      	bhi.n	800cb60 <_scanf_float+0xd4>
 800cae8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800caec:	b2c8      	uxtb	r0, r1
 800caee:	280e      	cmp	r0, #14
 800caf0:	d939      	bls.n	800cb66 <_scanf_float+0xda>
 800caf2:	b11f      	cbz	r7, 800cafc <_scanf_float+0x70>
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cafa:	6023      	str	r3, [r4, #0]
 800cafc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cb00:	f1ba 0f01 	cmp.w	sl, #1
 800cb04:	f200 8114 	bhi.w	800cd30 <_scanf_float+0x2a4>
 800cb08:	9b01      	ldr	r3, [sp, #4]
 800cb0a:	429e      	cmp	r6, r3
 800cb0c:	f200 8105 	bhi.w	800cd1a <_scanf_float+0x28e>
 800cb10:	2001      	movs	r0, #1
 800cb12:	b007      	add	sp, #28
 800cb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb18:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cb1c:	2a0d      	cmp	r2, #13
 800cb1e:	d8e8      	bhi.n	800caf2 <_scanf_float+0x66>
 800cb20:	a101      	add	r1, pc, #4	@ (adr r1, 800cb28 <_scanf_float+0x9c>)
 800cb22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb26:	bf00      	nop
 800cb28:	0800cc71 	.word	0x0800cc71
 800cb2c:	0800caf3 	.word	0x0800caf3
 800cb30:	0800caf3 	.word	0x0800caf3
 800cb34:	0800caf3 	.word	0x0800caf3
 800cb38:	0800cccd 	.word	0x0800cccd
 800cb3c:	0800cca7 	.word	0x0800cca7
 800cb40:	0800caf3 	.word	0x0800caf3
 800cb44:	0800caf3 	.word	0x0800caf3
 800cb48:	0800cc7f 	.word	0x0800cc7f
 800cb4c:	0800caf3 	.word	0x0800caf3
 800cb50:	0800caf3 	.word	0x0800caf3
 800cb54:	0800caf3 	.word	0x0800caf3
 800cb58:	0800caf3 	.word	0x0800caf3
 800cb5c:	0800cc3b 	.word	0x0800cc3b
 800cb60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cb64:	e7da      	b.n	800cb1c <_scanf_float+0x90>
 800cb66:	290e      	cmp	r1, #14
 800cb68:	d8c3      	bhi.n	800caf2 <_scanf_float+0x66>
 800cb6a:	a001      	add	r0, pc, #4	@ (adr r0, 800cb70 <_scanf_float+0xe4>)
 800cb6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cb70:	0800cc2b 	.word	0x0800cc2b
 800cb74:	0800caf3 	.word	0x0800caf3
 800cb78:	0800cc2b 	.word	0x0800cc2b
 800cb7c:	0800ccbb 	.word	0x0800ccbb
 800cb80:	0800caf3 	.word	0x0800caf3
 800cb84:	0800cbcd 	.word	0x0800cbcd
 800cb88:	0800cc11 	.word	0x0800cc11
 800cb8c:	0800cc11 	.word	0x0800cc11
 800cb90:	0800cc11 	.word	0x0800cc11
 800cb94:	0800cc11 	.word	0x0800cc11
 800cb98:	0800cc11 	.word	0x0800cc11
 800cb9c:	0800cc11 	.word	0x0800cc11
 800cba0:	0800cc11 	.word	0x0800cc11
 800cba4:	0800cc11 	.word	0x0800cc11
 800cba8:	0800cc11 	.word	0x0800cc11
 800cbac:	2b6e      	cmp	r3, #110	@ 0x6e
 800cbae:	d809      	bhi.n	800cbc4 <_scanf_float+0x138>
 800cbb0:	2b60      	cmp	r3, #96	@ 0x60
 800cbb2:	d8b1      	bhi.n	800cb18 <_scanf_float+0x8c>
 800cbb4:	2b54      	cmp	r3, #84	@ 0x54
 800cbb6:	d07b      	beq.n	800ccb0 <_scanf_float+0x224>
 800cbb8:	2b59      	cmp	r3, #89	@ 0x59
 800cbba:	d19a      	bne.n	800caf2 <_scanf_float+0x66>
 800cbbc:	2d07      	cmp	r5, #7
 800cbbe:	d198      	bne.n	800caf2 <_scanf_float+0x66>
 800cbc0:	2508      	movs	r5, #8
 800cbc2:	e02f      	b.n	800cc24 <_scanf_float+0x198>
 800cbc4:	2b74      	cmp	r3, #116	@ 0x74
 800cbc6:	d073      	beq.n	800ccb0 <_scanf_float+0x224>
 800cbc8:	2b79      	cmp	r3, #121	@ 0x79
 800cbca:	e7f6      	b.n	800cbba <_scanf_float+0x12e>
 800cbcc:	6821      	ldr	r1, [r4, #0]
 800cbce:	05c8      	lsls	r0, r1, #23
 800cbd0:	d51e      	bpl.n	800cc10 <_scanf_float+0x184>
 800cbd2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cbd6:	6021      	str	r1, [r4, #0]
 800cbd8:	3701      	adds	r7, #1
 800cbda:	f1bb 0f00 	cmp.w	fp, #0
 800cbde:	d003      	beq.n	800cbe8 <_scanf_float+0x15c>
 800cbe0:	3201      	adds	r2, #1
 800cbe2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800cbe6:	60a2      	str	r2, [r4, #8]
 800cbe8:	68a3      	ldr	r3, [r4, #8]
 800cbea:	3b01      	subs	r3, #1
 800cbec:	60a3      	str	r3, [r4, #8]
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	6123      	str	r3, [r4, #16]
 800cbf4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	f8c9 3004 	str.w	r3, [r9, #4]
 800cc00:	f340 8082 	ble.w	800cd08 <_scanf_float+0x27c>
 800cc04:	f8d9 3000 	ldr.w	r3, [r9]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	f8c9 3000 	str.w	r3, [r9]
 800cc0e:	e762      	b.n	800cad6 <_scanf_float+0x4a>
 800cc10:	eb1a 0105 	adds.w	r1, sl, r5
 800cc14:	f47f af6d 	bne.w	800caf2 <_scanf_float+0x66>
 800cc18:	6822      	ldr	r2, [r4, #0]
 800cc1a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cc1e:	6022      	str	r2, [r4, #0]
 800cc20:	460d      	mov	r5, r1
 800cc22:	468a      	mov	sl, r1
 800cc24:	f806 3b01 	strb.w	r3, [r6], #1
 800cc28:	e7de      	b.n	800cbe8 <_scanf_float+0x15c>
 800cc2a:	6822      	ldr	r2, [r4, #0]
 800cc2c:	0610      	lsls	r0, r2, #24
 800cc2e:	f57f af60 	bpl.w	800caf2 <_scanf_float+0x66>
 800cc32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc36:	6022      	str	r2, [r4, #0]
 800cc38:	e7f4      	b.n	800cc24 <_scanf_float+0x198>
 800cc3a:	f1ba 0f00 	cmp.w	sl, #0
 800cc3e:	d10c      	bne.n	800cc5a <_scanf_float+0x1ce>
 800cc40:	b977      	cbnz	r7, 800cc60 <_scanf_float+0x1d4>
 800cc42:	6822      	ldr	r2, [r4, #0]
 800cc44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc4c:	d108      	bne.n	800cc60 <_scanf_float+0x1d4>
 800cc4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc52:	6022      	str	r2, [r4, #0]
 800cc54:	f04f 0a01 	mov.w	sl, #1
 800cc58:	e7e4      	b.n	800cc24 <_scanf_float+0x198>
 800cc5a:	f1ba 0f02 	cmp.w	sl, #2
 800cc5e:	d050      	beq.n	800cd02 <_scanf_float+0x276>
 800cc60:	2d01      	cmp	r5, #1
 800cc62:	d002      	beq.n	800cc6a <_scanf_float+0x1de>
 800cc64:	2d04      	cmp	r5, #4
 800cc66:	f47f af44 	bne.w	800caf2 <_scanf_float+0x66>
 800cc6a:	3501      	adds	r5, #1
 800cc6c:	b2ed      	uxtb	r5, r5
 800cc6e:	e7d9      	b.n	800cc24 <_scanf_float+0x198>
 800cc70:	f1ba 0f01 	cmp.w	sl, #1
 800cc74:	f47f af3d 	bne.w	800caf2 <_scanf_float+0x66>
 800cc78:	f04f 0a02 	mov.w	sl, #2
 800cc7c:	e7d2      	b.n	800cc24 <_scanf_float+0x198>
 800cc7e:	b975      	cbnz	r5, 800cc9e <_scanf_float+0x212>
 800cc80:	2f00      	cmp	r7, #0
 800cc82:	f47f af37 	bne.w	800caf4 <_scanf_float+0x68>
 800cc86:	6822      	ldr	r2, [r4, #0]
 800cc88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc90:	f040 80fc 	bne.w	800ce8c <_scanf_float+0x400>
 800cc94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc98:	6022      	str	r2, [r4, #0]
 800cc9a:	2501      	movs	r5, #1
 800cc9c:	e7c2      	b.n	800cc24 <_scanf_float+0x198>
 800cc9e:	2d03      	cmp	r5, #3
 800cca0:	d0e3      	beq.n	800cc6a <_scanf_float+0x1de>
 800cca2:	2d05      	cmp	r5, #5
 800cca4:	e7df      	b.n	800cc66 <_scanf_float+0x1da>
 800cca6:	2d02      	cmp	r5, #2
 800cca8:	f47f af23 	bne.w	800caf2 <_scanf_float+0x66>
 800ccac:	2503      	movs	r5, #3
 800ccae:	e7b9      	b.n	800cc24 <_scanf_float+0x198>
 800ccb0:	2d06      	cmp	r5, #6
 800ccb2:	f47f af1e 	bne.w	800caf2 <_scanf_float+0x66>
 800ccb6:	2507      	movs	r5, #7
 800ccb8:	e7b4      	b.n	800cc24 <_scanf_float+0x198>
 800ccba:	6822      	ldr	r2, [r4, #0]
 800ccbc:	0591      	lsls	r1, r2, #22
 800ccbe:	f57f af18 	bpl.w	800caf2 <_scanf_float+0x66>
 800ccc2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ccc6:	6022      	str	r2, [r4, #0]
 800ccc8:	9702      	str	r7, [sp, #8]
 800ccca:	e7ab      	b.n	800cc24 <_scanf_float+0x198>
 800cccc:	6822      	ldr	r2, [r4, #0]
 800ccce:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ccd2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ccd6:	d005      	beq.n	800cce4 <_scanf_float+0x258>
 800ccd8:	0550      	lsls	r0, r2, #21
 800ccda:	f57f af0a 	bpl.w	800caf2 <_scanf_float+0x66>
 800ccde:	2f00      	cmp	r7, #0
 800cce0:	f000 80d4 	beq.w	800ce8c <_scanf_float+0x400>
 800cce4:	0591      	lsls	r1, r2, #22
 800cce6:	bf58      	it	pl
 800cce8:	9902      	ldrpl	r1, [sp, #8]
 800ccea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ccee:	bf58      	it	pl
 800ccf0:	1a79      	subpl	r1, r7, r1
 800ccf2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ccf6:	bf58      	it	pl
 800ccf8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ccfc:	6022      	str	r2, [r4, #0]
 800ccfe:	2700      	movs	r7, #0
 800cd00:	e790      	b.n	800cc24 <_scanf_float+0x198>
 800cd02:	f04f 0a03 	mov.w	sl, #3
 800cd06:	e78d      	b.n	800cc24 <_scanf_float+0x198>
 800cd08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cd0c:	4649      	mov	r1, r9
 800cd0e:	4640      	mov	r0, r8
 800cd10:	4798      	blx	r3
 800cd12:	2800      	cmp	r0, #0
 800cd14:	f43f aedf 	beq.w	800cad6 <_scanf_float+0x4a>
 800cd18:	e6eb      	b.n	800caf2 <_scanf_float+0x66>
 800cd1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd22:	464a      	mov	r2, r9
 800cd24:	4640      	mov	r0, r8
 800cd26:	4798      	blx	r3
 800cd28:	6923      	ldr	r3, [r4, #16]
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	6123      	str	r3, [r4, #16]
 800cd2e:	e6eb      	b.n	800cb08 <_scanf_float+0x7c>
 800cd30:	1e6b      	subs	r3, r5, #1
 800cd32:	2b06      	cmp	r3, #6
 800cd34:	d824      	bhi.n	800cd80 <_scanf_float+0x2f4>
 800cd36:	2d02      	cmp	r5, #2
 800cd38:	d836      	bhi.n	800cda8 <_scanf_float+0x31c>
 800cd3a:	9b01      	ldr	r3, [sp, #4]
 800cd3c:	429e      	cmp	r6, r3
 800cd3e:	f67f aee7 	bls.w	800cb10 <_scanf_float+0x84>
 800cd42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd4a:	464a      	mov	r2, r9
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	4798      	blx	r3
 800cd50:	6923      	ldr	r3, [r4, #16]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	6123      	str	r3, [r4, #16]
 800cd56:	e7f0      	b.n	800cd3a <_scanf_float+0x2ae>
 800cd58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cd60:	464a      	mov	r2, r9
 800cd62:	4640      	mov	r0, r8
 800cd64:	4798      	blx	r3
 800cd66:	6923      	ldr	r3, [r4, #16]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	6123      	str	r3, [r4, #16]
 800cd6c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cd70:	fa5f fa8a 	uxtb.w	sl, sl
 800cd74:	f1ba 0f02 	cmp.w	sl, #2
 800cd78:	d1ee      	bne.n	800cd58 <_scanf_float+0x2cc>
 800cd7a:	3d03      	subs	r5, #3
 800cd7c:	b2ed      	uxtb	r5, r5
 800cd7e:	1b76      	subs	r6, r6, r5
 800cd80:	6823      	ldr	r3, [r4, #0]
 800cd82:	05da      	lsls	r2, r3, #23
 800cd84:	d530      	bpl.n	800cde8 <_scanf_float+0x35c>
 800cd86:	055b      	lsls	r3, r3, #21
 800cd88:	d511      	bpl.n	800cdae <_scanf_float+0x322>
 800cd8a:	9b01      	ldr	r3, [sp, #4]
 800cd8c:	429e      	cmp	r6, r3
 800cd8e:	f67f aebf 	bls.w	800cb10 <_scanf_float+0x84>
 800cd92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd9a:	464a      	mov	r2, r9
 800cd9c:	4640      	mov	r0, r8
 800cd9e:	4798      	blx	r3
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	3b01      	subs	r3, #1
 800cda4:	6123      	str	r3, [r4, #16]
 800cda6:	e7f0      	b.n	800cd8a <_scanf_float+0x2fe>
 800cda8:	46aa      	mov	sl, r5
 800cdaa:	46b3      	mov	fp, r6
 800cdac:	e7de      	b.n	800cd6c <_scanf_float+0x2e0>
 800cdae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cdb2:	6923      	ldr	r3, [r4, #16]
 800cdb4:	2965      	cmp	r1, #101	@ 0x65
 800cdb6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cdba:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800cdbe:	6123      	str	r3, [r4, #16]
 800cdc0:	d00c      	beq.n	800cddc <_scanf_float+0x350>
 800cdc2:	2945      	cmp	r1, #69	@ 0x45
 800cdc4:	d00a      	beq.n	800cddc <_scanf_float+0x350>
 800cdc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdca:	464a      	mov	r2, r9
 800cdcc:	4640      	mov	r0, r8
 800cdce:	4798      	blx	r3
 800cdd0:	6923      	ldr	r3, [r4, #16]
 800cdd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	1eb5      	subs	r5, r6, #2
 800cdda:	6123      	str	r3, [r4, #16]
 800cddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cde0:	464a      	mov	r2, r9
 800cde2:	4640      	mov	r0, r8
 800cde4:	4798      	blx	r3
 800cde6:	462e      	mov	r6, r5
 800cde8:	6822      	ldr	r2, [r4, #0]
 800cdea:	f012 0210 	ands.w	r2, r2, #16
 800cdee:	d001      	beq.n	800cdf4 <_scanf_float+0x368>
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	e68e      	b.n	800cb12 <_scanf_float+0x86>
 800cdf4:	7032      	strb	r2, [r6, #0]
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cdfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce00:	d123      	bne.n	800ce4a <_scanf_float+0x3be>
 800ce02:	9b02      	ldr	r3, [sp, #8]
 800ce04:	429f      	cmp	r7, r3
 800ce06:	d00a      	beq.n	800ce1e <_scanf_float+0x392>
 800ce08:	1bda      	subs	r2, r3, r7
 800ce0a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ce0e:	429e      	cmp	r6, r3
 800ce10:	bf28      	it	cs
 800ce12:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ce16:	491e      	ldr	r1, [pc, #120]	@ (800ce90 <_scanf_float+0x404>)
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f000 f911 	bl	800d040 <siprintf>
 800ce1e:	9901      	ldr	r1, [sp, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	4640      	mov	r0, r8
 800ce24:	f002 fb3a 	bl	800f49c <_strtod_r>
 800ce28:	9b03      	ldr	r3, [sp, #12]
 800ce2a:	6821      	ldr	r1, [r4, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f011 0f02 	tst.w	r1, #2
 800ce32:	f103 0204 	add.w	r2, r3, #4
 800ce36:	d015      	beq.n	800ce64 <_scanf_float+0x3d8>
 800ce38:	9903      	ldr	r1, [sp, #12]
 800ce3a:	600a      	str	r2, [r1, #0]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	ed83 0b00 	vstr	d0, [r3]
 800ce42:	68e3      	ldr	r3, [r4, #12]
 800ce44:	3301      	adds	r3, #1
 800ce46:	60e3      	str	r3, [r4, #12]
 800ce48:	e7d2      	b.n	800cdf0 <_scanf_float+0x364>
 800ce4a:	9b04      	ldr	r3, [sp, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d0e6      	beq.n	800ce1e <_scanf_float+0x392>
 800ce50:	9905      	ldr	r1, [sp, #20]
 800ce52:	230a      	movs	r3, #10
 800ce54:	3101      	adds	r1, #1
 800ce56:	4640      	mov	r0, r8
 800ce58:	f002 fba0 	bl	800f59c <_strtol_r>
 800ce5c:	9b04      	ldr	r3, [sp, #16]
 800ce5e:	9e05      	ldr	r6, [sp, #20]
 800ce60:	1ac2      	subs	r2, r0, r3
 800ce62:	e7d2      	b.n	800ce0a <_scanf_float+0x37e>
 800ce64:	f011 0f04 	tst.w	r1, #4
 800ce68:	9903      	ldr	r1, [sp, #12]
 800ce6a:	600a      	str	r2, [r1, #0]
 800ce6c:	d1e6      	bne.n	800ce3c <_scanf_float+0x3b0>
 800ce6e:	eeb4 0b40 	vcmp.f64	d0, d0
 800ce72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce76:	681d      	ldr	r5, [r3, #0]
 800ce78:	d705      	bvc.n	800ce86 <_scanf_float+0x3fa>
 800ce7a:	4806      	ldr	r0, [pc, #24]	@ (800ce94 <_scanf_float+0x408>)
 800ce7c:	f000 f9c6 	bl	800d20c <nanf>
 800ce80:	ed85 0a00 	vstr	s0, [r5]
 800ce84:	e7dd      	b.n	800ce42 <_scanf_float+0x3b6>
 800ce86:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ce8a:	e7f9      	b.n	800ce80 <_scanf_float+0x3f4>
 800ce8c:	2700      	movs	r7, #0
 800ce8e:	e635      	b.n	800cafc <_scanf_float+0x70>
 800ce90:	08010a38 	.word	0x08010a38
 800ce94:	08010b79 	.word	0x08010b79

0800ce98 <std>:
 800ce98:	2300      	movs	r3, #0
 800ce9a:	b510      	push	{r4, lr}
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	e9c0 3300 	strd	r3, r3, [r0]
 800cea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cea6:	6083      	str	r3, [r0, #8]
 800cea8:	8181      	strh	r1, [r0, #12]
 800ceaa:	6643      	str	r3, [r0, #100]	@ 0x64
 800ceac:	81c2      	strh	r2, [r0, #14]
 800ceae:	6183      	str	r3, [r0, #24]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	2208      	movs	r2, #8
 800ceb4:	305c      	adds	r0, #92	@ 0x5c
 800ceb6:	f000 f928 	bl	800d10a <memset>
 800ceba:	4b0d      	ldr	r3, [pc, #52]	@ (800cef0 <std+0x58>)
 800cebc:	6263      	str	r3, [r4, #36]	@ 0x24
 800cebe:	4b0d      	ldr	r3, [pc, #52]	@ (800cef4 <std+0x5c>)
 800cec0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cec2:	4b0d      	ldr	r3, [pc, #52]	@ (800cef8 <std+0x60>)
 800cec4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cec6:	4b0d      	ldr	r3, [pc, #52]	@ (800cefc <std+0x64>)
 800cec8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ceca:	4b0d      	ldr	r3, [pc, #52]	@ (800cf00 <std+0x68>)
 800cecc:	6224      	str	r4, [r4, #32]
 800cece:	429c      	cmp	r4, r3
 800ced0:	d006      	beq.n	800cee0 <std+0x48>
 800ced2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ced6:	4294      	cmp	r4, r2
 800ced8:	d002      	beq.n	800cee0 <std+0x48>
 800ceda:	33d0      	adds	r3, #208	@ 0xd0
 800cedc:	429c      	cmp	r4, r3
 800cede:	d105      	bne.n	800ceec <std+0x54>
 800cee0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cee8:	f000 b98c 	b.w	800d204 <__retarget_lock_init_recursive>
 800ceec:	bd10      	pop	{r4, pc}
 800ceee:	bf00      	nop
 800cef0:	0800d085 	.word	0x0800d085
 800cef4:	0800d0a7 	.word	0x0800d0a7
 800cef8:	0800d0df 	.word	0x0800d0df
 800cefc:	0800d103 	.word	0x0800d103
 800cf00:	2400345c 	.word	0x2400345c

0800cf04 <stdio_exit_handler>:
 800cf04:	4a02      	ldr	r2, [pc, #8]	@ (800cf10 <stdio_exit_handler+0xc>)
 800cf06:	4903      	ldr	r1, [pc, #12]	@ (800cf14 <stdio_exit_handler+0x10>)
 800cf08:	4803      	ldr	r0, [pc, #12]	@ (800cf18 <stdio_exit_handler+0x14>)
 800cf0a:	f000 b87b 	b.w	800d004 <_fwalk_sglue>
 800cf0e:	bf00      	nop
 800cf10:	24000010 	.word	0x24000010
 800cf14:	0800fbdd 	.word	0x0800fbdd
 800cf18:	24000020 	.word	0x24000020

0800cf1c <cleanup_stdio>:
 800cf1c:	6841      	ldr	r1, [r0, #4]
 800cf1e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf50 <cleanup_stdio+0x34>)
 800cf20:	4299      	cmp	r1, r3
 800cf22:	b510      	push	{r4, lr}
 800cf24:	4604      	mov	r4, r0
 800cf26:	d001      	beq.n	800cf2c <cleanup_stdio+0x10>
 800cf28:	f002 fe58 	bl	800fbdc <_fflush_r>
 800cf2c:	68a1      	ldr	r1, [r4, #8]
 800cf2e:	4b09      	ldr	r3, [pc, #36]	@ (800cf54 <cleanup_stdio+0x38>)
 800cf30:	4299      	cmp	r1, r3
 800cf32:	d002      	beq.n	800cf3a <cleanup_stdio+0x1e>
 800cf34:	4620      	mov	r0, r4
 800cf36:	f002 fe51 	bl	800fbdc <_fflush_r>
 800cf3a:	68e1      	ldr	r1, [r4, #12]
 800cf3c:	4b06      	ldr	r3, [pc, #24]	@ (800cf58 <cleanup_stdio+0x3c>)
 800cf3e:	4299      	cmp	r1, r3
 800cf40:	d004      	beq.n	800cf4c <cleanup_stdio+0x30>
 800cf42:	4620      	mov	r0, r4
 800cf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf48:	f002 be48 	b.w	800fbdc <_fflush_r>
 800cf4c:	bd10      	pop	{r4, pc}
 800cf4e:	bf00      	nop
 800cf50:	2400345c 	.word	0x2400345c
 800cf54:	240034c4 	.word	0x240034c4
 800cf58:	2400352c 	.word	0x2400352c

0800cf5c <global_stdio_init.part.0>:
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf8c <global_stdio_init.part.0+0x30>)
 800cf60:	4c0b      	ldr	r4, [pc, #44]	@ (800cf90 <global_stdio_init.part.0+0x34>)
 800cf62:	4a0c      	ldr	r2, [pc, #48]	@ (800cf94 <global_stdio_init.part.0+0x38>)
 800cf64:	601a      	str	r2, [r3, #0]
 800cf66:	4620      	mov	r0, r4
 800cf68:	2200      	movs	r2, #0
 800cf6a:	2104      	movs	r1, #4
 800cf6c:	f7ff ff94 	bl	800ce98 <std>
 800cf70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf74:	2201      	movs	r2, #1
 800cf76:	2109      	movs	r1, #9
 800cf78:	f7ff ff8e 	bl	800ce98 <std>
 800cf7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf80:	2202      	movs	r2, #2
 800cf82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf86:	2112      	movs	r1, #18
 800cf88:	f7ff bf86 	b.w	800ce98 <std>
 800cf8c:	24003594 	.word	0x24003594
 800cf90:	2400345c 	.word	0x2400345c
 800cf94:	0800cf05 	.word	0x0800cf05

0800cf98 <__sfp_lock_acquire>:
 800cf98:	4801      	ldr	r0, [pc, #4]	@ (800cfa0 <__sfp_lock_acquire+0x8>)
 800cf9a:	f000 b934 	b.w	800d206 <__retarget_lock_acquire_recursive>
 800cf9e:	bf00      	nop
 800cfa0:	2400359d 	.word	0x2400359d

0800cfa4 <__sfp_lock_release>:
 800cfa4:	4801      	ldr	r0, [pc, #4]	@ (800cfac <__sfp_lock_release+0x8>)
 800cfa6:	f000 b92f 	b.w	800d208 <__retarget_lock_release_recursive>
 800cfaa:	bf00      	nop
 800cfac:	2400359d 	.word	0x2400359d

0800cfb0 <__sinit>:
 800cfb0:	b510      	push	{r4, lr}
 800cfb2:	4604      	mov	r4, r0
 800cfb4:	f7ff fff0 	bl	800cf98 <__sfp_lock_acquire>
 800cfb8:	6a23      	ldr	r3, [r4, #32]
 800cfba:	b11b      	cbz	r3, 800cfc4 <__sinit+0x14>
 800cfbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfc0:	f7ff bff0 	b.w	800cfa4 <__sfp_lock_release>
 800cfc4:	4b04      	ldr	r3, [pc, #16]	@ (800cfd8 <__sinit+0x28>)
 800cfc6:	6223      	str	r3, [r4, #32]
 800cfc8:	4b04      	ldr	r3, [pc, #16]	@ (800cfdc <__sinit+0x2c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1f5      	bne.n	800cfbc <__sinit+0xc>
 800cfd0:	f7ff ffc4 	bl	800cf5c <global_stdio_init.part.0>
 800cfd4:	e7f2      	b.n	800cfbc <__sinit+0xc>
 800cfd6:	bf00      	nop
 800cfd8:	0800cf1d 	.word	0x0800cf1d
 800cfdc:	24003594 	.word	0x24003594

0800cfe0 <fiprintf>:
 800cfe0:	b40e      	push	{r1, r2, r3}
 800cfe2:	b503      	push	{r0, r1, lr}
 800cfe4:	4601      	mov	r1, r0
 800cfe6:	ab03      	add	r3, sp, #12
 800cfe8:	4805      	ldr	r0, [pc, #20]	@ (800d000 <fiprintf+0x20>)
 800cfea:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfee:	6800      	ldr	r0, [r0, #0]
 800cff0:	9301      	str	r3, [sp, #4]
 800cff2:	f002 fc57 	bl	800f8a4 <_vfiprintf_r>
 800cff6:	b002      	add	sp, #8
 800cff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cffc:	b003      	add	sp, #12
 800cffe:	4770      	bx	lr
 800d000:	2400001c 	.word	0x2400001c

0800d004 <_fwalk_sglue>:
 800d004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d008:	4607      	mov	r7, r0
 800d00a:	4688      	mov	r8, r1
 800d00c:	4614      	mov	r4, r2
 800d00e:	2600      	movs	r6, #0
 800d010:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d014:	f1b9 0901 	subs.w	r9, r9, #1
 800d018:	d505      	bpl.n	800d026 <_fwalk_sglue+0x22>
 800d01a:	6824      	ldr	r4, [r4, #0]
 800d01c:	2c00      	cmp	r4, #0
 800d01e:	d1f7      	bne.n	800d010 <_fwalk_sglue+0xc>
 800d020:	4630      	mov	r0, r6
 800d022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d026:	89ab      	ldrh	r3, [r5, #12]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d907      	bls.n	800d03c <_fwalk_sglue+0x38>
 800d02c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d030:	3301      	adds	r3, #1
 800d032:	d003      	beq.n	800d03c <_fwalk_sglue+0x38>
 800d034:	4629      	mov	r1, r5
 800d036:	4638      	mov	r0, r7
 800d038:	47c0      	blx	r8
 800d03a:	4306      	orrs	r6, r0
 800d03c:	3568      	adds	r5, #104	@ 0x68
 800d03e:	e7e9      	b.n	800d014 <_fwalk_sglue+0x10>

0800d040 <siprintf>:
 800d040:	b40e      	push	{r1, r2, r3}
 800d042:	b510      	push	{r4, lr}
 800d044:	b09d      	sub	sp, #116	@ 0x74
 800d046:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d048:	9002      	str	r0, [sp, #8]
 800d04a:	9006      	str	r0, [sp, #24]
 800d04c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d050:	480a      	ldr	r0, [pc, #40]	@ (800d07c <siprintf+0x3c>)
 800d052:	9107      	str	r1, [sp, #28]
 800d054:	9104      	str	r1, [sp, #16]
 800d056:	490a      	ldr	r1, [pc, #40]	@ (800d080 <siprintf+0x40>)
 800d058:	f853 2b04 	ldr.w	r2, [r3], #4
 800d05c:	9105      	str	r1, [sp, #20]
 800d05e:	2400      	movs	r4, #0
 800d060:	a902      	add	r1, sp, #8
 800d062:	6800      	ldr	r0, [r0, #0]
 800d064:	9301      	str	r3, [sp, #4]
 800d066:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d068:	f002 faf6 	bl	800f658 <_svfiprintf_r>
 800d06c:	9b02      	ldr	r3, [sp, #8]
 800d06e:	701c      	strb	r4, [r3, #0]
 800d070:	b01d      	add	sp, #116	@ 0x74
 800d072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d076:	b003      	add	sp, #12
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	2400001c 	.word	0x2400001c
 800d080:	ffff0208 	.word	0xffff0208

0800d084 <__sread>:
 800d084:	b510      	push	{r4, lr}
 800d086:	460c      	mov	r4, r1
 800d088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d08c:	f000 f86c 	bl	800d168 <_read_r>
 800d090:	2800      	cmp	r0, #0
 800d092:	bfab      	itete	ge
 800d094:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d096:	89a3      	ldrhlt	r3, [r4, #12]
 800d098:	181b      	addge	r3, r3, r0
 800d09a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d09e:	bfac      	ite	ge
 800d0a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0a2:	81a3      	strhlt	r3, [r4, #12]
 800d0a4:	bd10      	pop	{r4, pc}

0800d0a6 <__swrite>:
 800d0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0aa:	461f      	mov	r7, r3
 800d0ac:	898b      	ldrh	r3, [r1, #12]
 800d0ae:	05db      	lsls	r3, r3, #23
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	4616      	mov	r6, r2
 800d0b6:	d505      	bpl.n	800d0c4 <__swrite+0x1e>
 800d0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0bc:	2302      	movs	r3, #2
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f000 f840 	bl	800d144 <_lseek_r>
 800d0c4:	89a3      	ldrh	r3, [r4, #12]
 800d0c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0ce:	81a3      	strh	r3, [r4, #12]
 800d0d0:	4632      	mov	r2, r6
 800d0d2:	463b      	mov	r3, r7
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0da:	f000 b857 	b.w	800d18c <_write_r>

0800d0de <__sseek>:
 800d0de:	b510      	push	{r4, lr}
 800d0e0:	460c      	mov	r4, r1
 800d0e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e6:	f000 f82d 	bl	800d144 <_lseek_r>
 800d0ea:	1c43      	adds	r3, r0, #1
 800d0ec:	89a3      	ldrh	r3, [r4, #12]
 800d0ee:	bf15      	itete	ne
 800d0f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d0f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0fa:	81a3      	strheq	r3, [r4, #12]
 800d0fc:	bf18      	it	ne
 800d0fe:	81a3      	strhne	r3, [r4, #12]
 800d100:	bd10      	pop	{r4, pc}

0800d102 <__sclose>:
 800d102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d106:	f000 b80d 	b.w	800d124 <_close_r>

0800d10a <memset>:
 800d10a:	4402      	add	r2, r0
 800d10c:	4603      	mov	r3, r0
 800d10e:	4293      	cmp	r3, r2
 800d110:	d100      	bne.n	800d114 <memset+0xa>
 800d112:	4770      	bx	lr
 800d114:	f803 1b01 	strb.w	r1, [r3], #1
 800d118:	e7f9      	b.n	800d10e <memset+0x4>
	...

0800d11c <_localeconv_r>:
 800d11c:	4800      	ldr	r0, [pc, #0]	@ (800d120 <_localeconv_r+0x4>)
 800d11e:	4770      	bx	lr
 800d120:	2400015c 	.word	0x2400015c

0800d124 <_close_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4d06      	ldr	r5, [pc, #24]	@ (800d140 <_close_r+0x1c>)
 800d128:	2300      	movs	r3, #0
 800d12a:	4604      	mov	r4, r0
 800d12c:	4608      	mov	r0, r1
 800d12e:	602b      	str	r3, [r5, #0]
 800d130:	f7f4 fa22 	bl	8001578 <_close>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d102      	bne.n	800d13e <_close_r+0x1a>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	b103      	cbz	r3, 800d13e <_close_r+0x1a>
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	24003598 	.word	0x24003598

0800d144 <_lseek_r>:
 800d144:	b538      	push	{r3, r4, r5, lr}
 800d146:	4d07      	ldr	r5, [pc, #28]	@ (800d164 <_lseek_r+0x20>)
 800d148:	4604      	mov	r4, r0
 800d14a:	4608      	mov	r0, r1
 800d14c:	4611      	mov	r1, r2
 800d14e:	2200      	movs	r2, #0
 800d150:	602a      	str	r2, [r5, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	f7f4 fa37 	bl	80015c6 <_lseek>
 800d158:	1c43      	adds	r3, r0, #1
 800d15a:	d102      	bne.n	800d162 <_lseek_r+0x1e>
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	b103      	cbz	r3, 800d162 <_lseek_r+0x1e>
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	bd38      	pop	{r3, r4, r5, pc}
 800d164:	24003598 	.word	0x24003598

0800d168 <_read_r>:
 800d168:	b538      	push	{r3, r4, r5, lr}
 800d16a:	4d07      	ldr	r5, [pc, #28]	@ (800d188 <_read_r+0x20>)
 800d16c:	4604      	mov	r4, r0
 800d16e:	4608      	mov	r0, r1
 800d170:	4611      	mov	r1, r2
 800d172:	2200      	movs	r2, #0
 800d174:	602a      	str	r2, [r5, #0]
 800d176:	461a      	mov	r2, r3
 800d178:	f7f4 f9c5 	bl	8001506 <_read>
 800d17c:	1c43      	adds	r3, r0, #1
 800d17e:	d102      	bne.n	800d186 <_read_r+0x1e>
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	b103      	cbz	r3, 800d186 <_read_r+0x1e>
 800d184:	6023      	str	r3, [r4, #0]
 800d186:	bd38      	pop	{r3, r4, r5, pc}
 800d188:	24003598 	.word	0x24003598

0800d18c <_write_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4d07      	ldr	r5, [pc, #28]	@ (800d1ac <_write_r+0x20>)
 800d190:	4604      	mov	r4, r0
 800d192:	4608      	mov	r0, r1
 800d194:	4611      	mov	r1, r2
 800d196:	2200      	movs	r2, #0
 800d198:	602a      	str	r2, [r5, #0]
 800d19a:	461a      	mov	r2, r3
 800d19c:	f7f4 f9d0 	bl	8001540 <_write>
 800d1a0:	1c43      	adds	r3, r0, #1
 800d1a2:	d102      	bne.n	800d1aa <_write_r+0x1e>
 800d1a4:	682b      	ldr	r3, [r5, #0]
 800d1a6:	b103      	cbz	r3, 800d1aa <_write_r+0x1e>
 800d1a8:	6023      	str	r3, [r4, #0]
 800d1aa:	bd38      	pop	{r3, r4, r5, pc}
 800d1ac:	24003598 	.word	0x24003598

0800d1b0 <__errno>:
 800d1b0:	4b01      	ldr	r3, [pc, #4]	@ (800d1b8 <__errno+0x8>)
 800d1b2:	6818      	ldr	r0, [r3, #0]
 800d1b4:	4770      	bx	lr
 800d1b6:	bf00      	nop
 800d1b8:	2400001c 	.word	0x2400001c

0800d1bc <__libc_init_array>:
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	4d0d      	ldr	r5, [pc, #52]	@ (800d1f4 <__libc_init_array+0x38>)
 800d1c0:	4c0d      	ldr	r4, [pc, #52]	@ (800d1f8 <__libc_init_array+0x3c>)
 800d1c2:	1b64      	subs	r4, r4, r5
 800d1c4:	10a4      	asrs	r4, r4, #2
 800d1c6:	2600      	movs	r6, #0
 800d1c8:	42a6      	cmp	r6, r4
 800d1ca:	d109      	bne.n	800d1e0 <__libc_init_array+0x24>
 800d1cc:	4d0b      	ldr	r5, [pc, #44]	@ (800d1fc <__libc_init_array+0x40>)
 800d1ce:	4c0c      	ldr	r4, [pc, #48]	@ (800d200 <__libc_init_array+0x44>)
 800d1d0:	f003 faa2 	bl	8010718 <_init>
 800d1d4:	1b64      	subs	r4, r4, r5
 800d1d6:	10a4      	asrs	r4, r4, #2
 800d1d8:	2600      	movs	r6, #0
 800d1da:	42a6      	cmp	r6, r4
 800d1dc:	d105      	bne.n	800d1ea <__libc_init_array+0x2e>
 800d1de:	bd70      	pop	{r4, r5, r6, pc}
 800d1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1e4:	4798      	blx	r3
 800d1e6:	3601      	adds	r6, #1
 800d1e8:	e7ee      	b.n	800d1c8 <__libc_init_array+0xc>
 800d1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ee:	4798      	blx	r3
 800d1f0:	3601      	adds	r6, #1
 800d1f2:	e7f2      	b.n	800d1da <__libc_init_array+0x1e>
 800d1f4:	08010e34 	.word	0x08010e34
 800d1f8:	08010e34 	.word	0x08010e34
 800d1fc:	08010e34 	.word	0x08010e34
 800d200:	08010e38 	.word	0x08010e38

0800d204 <__retarget_lock_init_recursive>:
 800d204:	4770      	bx	lr

0800d206 <__retarget_lock_acquire_recursive>:
 800d206:	4770      	bx	lr

0800d208 <__retarget_lock_release_recursive>:
 800d208:	4770      	bx	lr
	...

0800d20c <nanf>:
 800d20c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d214 <nanf+0x8>
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	7fc00000 	.word	0x7fc00000

0800d218 <quorem>:
 800d218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21c:	6903      	ldr	r3, [r0, #16]
 800d21e:	690c      	ldr	r4, [r1, #16]
 800d220:	42a3      	cmp	r3, r4
 800d222:	4607      	mov	r7, r0
 800d224:	db7e      	blt.n	800d324 <quorem+0x10c>
 800d226:	3c01      	subs	r4, #1
 800d228:	f101 0814 	add.w	r8, r1, #20
 800d22c:	00a3      	lsls	r3, r4, #2
 800d22e:	f100 0514 	add.w	r5, r0, #20
 800d232:	9300      	str	r3, [sp, #0]
 800d234:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d238:	9301      	str	r3, [sp, #4]
 800d23a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d23e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d242:	3301      	adds	r3, #1
 800d244:	429a      	cmp	r2, r3
 800d246:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d24a:	fbb2 f6f3 	udiv	r6, r2, r3
 800d24e:	d32e      	bcc.n	800d2ae <quorem+0x96>
 800d250:	f04f 0a00 	mov.w	sl, #0
 800d254:	46c4      	mov	ip, r8
 800d256:	46ae      	mov	lr, r5
 800d258:	46d3      	mov	fp, sl
 800d25a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d25e:	b298      	uxth	r0, r3
 800d260:	fb06 a000 	mla	r0, r6, r0, sl
 800d264:	0c02      	lsrs	r2, r0, #16
 800d266:	0c1b      	lsrs	r3, r3, #16
 800d268:	fb06 2303 	mla	r3, r6, r3, r2
 800d26c:	f8de 2000 	ldr.w	r2, [lr]
 800d270:	b280      	uxth	r0, r0
 800d272:	b292      	uxth	r2, r2
 800d274:	1a12      	subs	r2, r2, r0
 800d276:	445a      	add	r2, fp
 800d278:	f8de 0000 	ldr.w	r0, [lr]
 800d27c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d280:	b29b      	uxth	r3, r3
 800d282:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d286:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d28a:	b292      	uxth	r2, r2
 800d28c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d290:	45e1      	cmp	r9, ip
 800d292:	f84e 2b04 	str.w	r2, [lr], #4
 800d296:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d29a:	d2de      	bcs.n	800d25a <quorem+0x42>
 800d29c:	9b00      	ldr	r3, [sp, #0]
 800d29e:	58eb      	ldr	r3, [r5, r3]
 800d2a0:	b92b      	cbnz	r3, 800d2ae <quorem+0x96>
 800d2a2:	9b01      	ldr	r3, [sp, #4]
 800d2a4:	3b04      	subs	r3, #4
 800d2a6:	429d      	cmp	r5, r3
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	d32f      	bcc.n	800d30c <quorem+0xf4>
 800d2ac:	613c      	str	r4, [r7, #16]
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	f001 f954 	bl	800e55c <__mcmp>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	db25      	blt.n	800d304 <quorem+0xec>
 800d2b8:	4629      	mov	r1, r5
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800d2c0:	f8d1 c000 	ldr.w	ip, [r1]
 800d2c4:	fa1f fe82 	uxth.w	lr, r2
 800d2c8:	fa1f f38c 	uxth.w	r3, ip
 800d2cc:	eba3 030e 	sub.w	r3, r3, lr
 800d2d0:	4403      	add	r3, r0
 800d2d2:	0c12      	lsrs	r2, r2, #16
 800d2d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d2d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2e2:	45c1      	cmp	r9, r8
 800d2e4:	f841 3b04 	str.w	r3, [r1], #4
 800d2e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d2ec:	d2e6      	bcs.n	800d2bc <quorem+0xa4>
 800d2ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2f6:	b922      	cbnz	r2, 800d302 <quorem+0xea>
 800d2f8:	3b04      	subs	r3, #4
 800d2fa:	429d      	cmp	r5, r3
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	d30b      	bcc.n	800d318 <quorem+0x100>
 800d300:	613c      	str	r4, [r7, #16]
 800d302:	3601      	adds	r6, #1
 800d304:	4630      	mov	r0, r6
 800d306:	b003      	add	sp, #12
 800d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30c:	6812      	ldr	r2, [r2, #0]
 800d30e:	3b04      	subs	r3, #4
 800d310:	2a00      	cmp	r2, #0
 800d312:	d1cb      	bne.n	800d2ac <quorem+0x94>
 800d314:	3c01      	subs	r4, #1
 800d316:	e7c6      	b.n	800d2a6 <quorem+0x8e>
 800d318:	6812      	ldr	r2, [r2, #0]
 800d31a:	3b04      	subs	r3, #4
 800d31c:	2a00      	cmp	r2, #0
 800d31e:	d1ef      	bne.n	800d300 <quorem+0xe8>
 800d320:	3c01      	subs	r4, #1
 800d322:	e7ea      	b.n	800d2fa <quorem+0xe2>
 800d324:	2000      	movs	r0, #0
 800d326:	e7ee      	b.n	800d306 <quorem+0xee>

0800d328 <_dtoa_r>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	ed2d 8b02 	vpush	{d8}
 800d330:	69c7      	ldr	r7, [r0, #28]
 800d332:	b091      	sub	sp, #68	@ 0x44
 800d334:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d338:	ec55 4b10 	vmov	r4, r5, d0
 800d33c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d33e:	9107      	str	r1, [sp, #28]
 800d340:	4681      	mov	r9, r0
 800d342:	9209      	str	r2, [sp, #36]	@ 0x24
 800d344:	930d      	str	r3, [sp, #52]	@ 0x34
 800d346:	b97f      	cbnz	r7, 800d368 <_dtoa_r+0x40>
 800d348:	2010      	movs	r0, #16
 800d34a:	f000 fd95 	bl	800de78 <malloc>
 800d34e:	4602      	mov	r2, r0
 800d350:	f8c9 001c 	str.w	r0, [r9, #28]
 800d354:	b920      	cbnz	r0, 800d360 <_dtoa_r+0x38>
 800d356:	4ba0      	ldr	r3, [pc, #640]	@ (800d5d8 <_dtoa_r+0x2b0>)
 800d358:	21ef      	movs	r1, #239	@ 0xef
 800d35a:	48a0      	ldr	r0, [pc, #640]	@ (800d5dc <_dtoa_r+0x2b4>)
 800d35c:	f002 fd4c 	bl	800fdf8 <__assert_func>
 800d360:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d364:	6007      	str	r7, [r0, #0]
 800d366:	60c7      	str	r7, [r0, #12]
 800d368:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d36c:	6819      	ldr	r1, [r3, #0]
 800d36e:	b159      	cbz	r1, 800d388 <_dtoa_r+0x60>
 800d370:	685a      	ldr	r2, [r3, #4]
 800d372:	604a      	str	r2, [r1, #4]
 800d374:	2301      	movs	r3, #1
 800d376:	4093      	lsls	r3, r2
 800d378:	608b      	str	r3, [r1, #8]
 800d37a:	4648      	mov	r0, r9
 800d37c:	f000 fe72 	bl	800e064 <_Bfree>
 800d380:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d384:	2200      	movs	r2, #0
 800d386:	601a      	str	r2, [r3, #0]
 800d388:	1e2b      	subs	r3, r5, #0
 800d38a:	bfbb      	ittet	lt
 800d38c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d390:	9303      	strlt	r3, [sp, #12]
 800d392:	2300      	movge	r3, #0
 800d394:	2201      	movlt	r2, #1
 800d396:	bfac      	ite	ge
 800d398:	6033      	strge	r3, [r6, #0]
 800d39a:	6032      	strlt	r2, [r6, #0]
 800d39c:	4b90      	ldr	r3, [pc, #576]	@ (800d5e0 <_dtoa_r+0x2b8>)
 800d39e:	9e03      	ldr	r6, [sp, #12]
 800d3a0:	43b3      	bics	r3, r6
 800d3a2:	d110      	bne.n	800d3c6 <_dtoa_r+0x9e>
 800d3a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d3aa:	6013      	str	r3, [r2, #0]
 800d3ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d3b0:	4323      	orrs	r3, r4
 800d3b2:	f000 84e6 	beq.w	800dd82 <_dtoa_r+0xa5a>
 800d3b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d3b8:	4f8a      	ldr	r7, [pc, #552]	@ (800d5e4 <_dtoa_r+0x2bc>)
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f000 84e8 	beq.w	800dd90 <_dtoa_r+0xa68>
 800d3c0:	1cfb      	adds	r3, r7, #3
 800d3c2:	f000 bce3 	b.w	800dd8c <_dtoa_r+0xa64>
 800d3c6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d3ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d2:	d10a      	bne.n	800d3ea <_dtoa_r+0xc2>
 800d3d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	6013      	str	r3, [r2, #0]
 800d3da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d3dc:	b113      	cbz	r3, 800d3e4 <_dtoa_r+0xbc>
 800d3de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d3e0:	4b81      	ldr	r3, [pc, #516]	@ (800d5e8 <_dtoa_r+0x2c0>)
 800d3e2:	6013      	str	r3, [r2, #0]
 800d3e4:	4f81      	ldr	r7, [pc, #516]	@ (800d5ec <_dtoa_r+0x2c4>)
 800d3e6:	f000 bcd3 	b.w	800dd90 <_dtoa_r+0xa68>
 800d3ea:	aa0e      	add	r2, sp, #56	@ 0x38
 800d3ec:	a90f      	add	r1, sp, #60	@ 0x3c
 800d3ee:	4648      	mov	r0, r9
 800d3f0:	eeb0 0b48 	vmov.f64	d0, d8
 800d3f4:	f001 f9d2 	bl	800e79c <__d2b>
 800d3f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d3fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3fe:	9001      	str	r0, [sp, #4]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d045      	beq.n	800d490 <_dtoa_r+0x168>
 800d404:	eeb0 7b48 	vmov.f64	d7, d8
 800d408:	ee18 1a90 	vmov	r1, s17
 800d40c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d410:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d414:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d418:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d41c:	2500      	movs	r5, #0
 800d41e:	ee07 1a90 	vmov	s15, r1
 800d422:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d426:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d5c0 <_dtoa_r+0x298>
 800d42a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d42e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d5c8 <_dtoa_r+0x2a0>
 800d432:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d436:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d5d0 <_dtoa_r+0x2a8>
 800d43a:	ee07 3a90 	vmov	s15, r3
 800d43e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d442:	eeb0 7b46 	vmov.f64	d7, d6
 800d446:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d44a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d44e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d456:	ee16 8a90 	vmov	r8, s13
 800d45a:	d508      	bpl.n	800d46e <_dtoa_r+0x146>
 800d45c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d460:	eeb4 6b47 	vcmp.f64	d6, d7
 800d464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d468:	bf18      	it	ne
 800d46a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800d46e:	f1b8 0f16 	cmp.w	r8, #22
 800d472:	d82b      	bhi.n	800d4cc <_dtoa_r+0x1a4>
 800d474:	495e      	ldr	r1, [pc, #376]	@ (800d5f0 <_dtoa_r+0x2c8>)
 800d476:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d47a:	ed91 7b00 	vldr	d7, [r1]
 800d47e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d486:	d501      	bpl.n	800d48c <_dtoa_r+0x164>
 800d488:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d48c:	2100      	movs	r1, #0
 800d48e:	e01e      	b.n	800d4ce <_dtoa_r+0x1a6>
 800d490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d492:	4413      	add	r3, r2
 800d494:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d498:	2920      	cmp	r1, #32
 800d49a:	bfc1      	itttt	gt
 800d49c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d4a0:	408e      	lslgt	r6, r1
 800d4a2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d4a6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d4aa:	bfd6      	itet	le
 800d4ac:	f1c1 0120 	rsble	r1, r1, #32
 800d4b0:	4331      	orrgt	r1, r6
 800d4b2:	fa04 f101 	lslle.w	r1, r4, r1
 800d4b6:	ee07 1a90 	vmov	s15, r1
 800d4ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	ee17 1a90 	vmov	r1, s15
 800d4c4:	2501      	movs	r5, #1
 800d4c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d4ca:	e7a8      	b.n	800d41e <_dtoa_r+0xf6>
 800d4cc:	2101      	movs	r1, #1
 800d4ce:	1ad2      	subs	r2, r2, r3
 800d4d0:	1e53      	subs	r3, r2, #1
 800d4d2:	9306      	str	r3, [sp, #24]
 800d4d4:	bf45      	ittet	mi
 800d4d6:	f1c2 0301 	rsbmi	r3, r2, #1
 800d4da:	9304      	strmi	r3, [sp, #16]
 800d4dc:	2300      	movpl	r3, #0
 800d4de:	2300      	movmi	r3, #0
 800d4e0:	bf4c      	ite	mi
 800d4e2:	9306      	strmi	r3, [sp, #24]
 800d4e4:	9304      	strpl	r3, [sp, #16]
 800d4e6:	f1b8 0f00 	cmp.w	r8, #0
 800d4ea:	910c      	str	r1, [sp, #48]	@ 0x30
 800d4ec:	db18      	blt.n	800d520 <_dtoa_r+0x1f8>
 800d4ee:	9b06      	ldr	r3, [sp, #24]
 800d4f0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d4f4:	4443      	add	r3, r8
 800d4f6:	9306      	str	r3, [sp, #24]
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	9a07      	ldr	r2, [sp, #28]
 800d4fc:	2a09      	cmp	r2, #9
 800d4fe:	d845      	bhi.n	800d58c <_dtoa_r+0x264>
 800d500:	2a05      	cmp	r2, #5
 800d502:	bfc4      	itt	gt
 800d504:	3a04      	subgt	r2, #4
 800d506:	9207      	strgt	r2, [sp, #28]
 800d508:	9a07      	ldr	r2, [sp, #28]
 800d50a:	f1a2 0202 	sub.w	r2, r2, #2
 800d50e:	bfcc      	ite	gt
 800d510:	2400      	movgt	r4, #0
 800d512:	2401      	movle	r4, #1
 800d514:	2a03      	cmp	r2, #3
 800d516:	d844      	bhi.n	800d5a2 <_dtoa_r+0x27a>
 800d518:	e8df f002 	tbb	[pc, r2]
 800d51c:	0b173634 	.word	0x0b173634
 800d520:	9b04      	ldr	r3, [sp, #16]
 800d522:	2200      	movs	r2, #0
 800d524:	eba3 0308 	sub.w	r3, r3, r8
 800d528:	9304      	str	r3, [sp, #16]
 800d52a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d52c:	f1c8 0300 	rsb	r3, r8, #0
 800d530:	e7e3      	b.n	800d4fa <_dtoa_r+0x1d2>
 800d532:	2201      	movs	r2, #1
 800d534:	9208      	str	r2, [sp, #32]
 800d536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d538:	eb08 0b02 	add.w	fp, r8, r2
 800d53c:	f10b 0a01 	add.w	sl, fp, #1
 800d540:	4652      	mov	r2, sl
 800d542:	2a01      	cmp	r2, #1
 800d544:	bfb8      	it	lt
 800d546:	2201      	movlt	r2, #1
 800d548:	e006      	b.n	800d558 <_dtoa_r+0x230>
 800d54a:	2201      	movs	r2, #1
 800d54c:	9208      	str	r2, [sp, #32]
 800d54e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d550:	2a00      	cmp	r2, #0
 800d552:	dd29      	ble.n	800d5a8 <_dtoa_r+0x280>
 800d554:	4693      	mov	fp, r2
 800d556:	4692      	mov	sl, r2
 800d558:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d55c:	2100      	movs	r1, #0
 800d55e:	2004      	movs	r0, #4
 800d560:	f100 0614 	add.w	r6, r0, #20
 800d564:	4296      	cmp	r6, r2
 800d566:	d926      	bls.n	800d5b6 <_dtoa_r+0x28e>
 800d568:	6079      	str	r1, [r7, #4]
 800d56a:	4648      	mov	r0, r9
 800d56c:	9305      	str	r3, [sp, #20]
 800d56e:	f000 fd39 	bl	800dfe4 <_Balloc>
 800d572:	9b05      	ldr	r3, [sp, #20]
 800d574:	4607      	mov	r7, r0
 800d576:	2800      	cmp	r0, #0
 800d578:	d13e      	bne.n	800d5f8 <_dtoa_r+0x2d0>
 800d57a:	4b1e      	ldr	r3, [pc, #120]	@ (800d5f4 <_dtoa_r+0x2cc>)
 800d57c:	4602      	mov	r2, r0
 800d57e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d582:	e6ea      	b.n	800d35a <_dtoa_r+0x32>
 800d584:	2200      	movs	r2, #0
 800d586:	e7e1      	b.n	800d54c <_dtoa_r+0x224>
 800d588:	2200      	movs	r2, #0
 800d58a:	e7d3      	b.n	800d534 <_dtoa_r+0x20c>
 800d58c:	2401      	movs	r4, #1
 800d58e:	2200      	movs	r2, #0
 800d590:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d594:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d598:	2100      	movs	r1, #0
 800d59a:	46da      	mov	sl, fp
 800d59c:	2212      	movs	r2, #18
 800d59e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d5a0:	e7da      	b.n	800d558 <_dtoa_r+0x230>
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	9208      	str	r2, [sp, #32]
 800d5a6:	e7f5      	b.n	800d594 <_dtoa_r+0x26c>
 800d5a8:	f04f 0b01 	mov.w	fp, #1
 800d5ac:	46da      	mov	sl, fp
 800d5ae:	465a      	mov	r2, fp
 800d5b0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d5b4:	e7d0      	b.n	800d558 <_dtoa_r+0x230>
 800d5b6:	3101      	adds	r1, #1
 800d5b8:	0040      	lsls	r0, r0, #1
 800d5ba:	e7d1      	b.n	800d560 <_dtoa_r+0x238>
 800d5bc:	f3af 8000 	nop.w
 800d5c0:	636f4361 	.word	0x636f4361
 800d5c4:	3fd287a7 	.word	0x3fd287a7
 800d5c8:	8b60c8b3 	.word	0x8b60c8b3
 800d5cc:	3fc68a28 	.word	0x3fc68a28
 800d5d0:	509f79fb 	.word	0x509f79fb
 800d5d4:	3fd34413 	.word	0x3fd34413
 800d5d8:	08010a4a 	.word	0x08010a4a
 800d5dc:	08010a61 	.word	0x08010a61
 800d5e0:	7ff00000 	.word	0x7ff00000
 800d5e4:	08010a46 	.word	0x08010a46
 800d5e8:	08010a15 	.word	0x08010a15
 800d5ec:	08010a14 	.word	0x08010a14
 800d5f0:	08010c10 	.word	0x08010c10
 800d5f4:	08010ab9 	.word	0x08010ab9
 800d5f8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d5fc:	f1ba 0f0e 	cmp.w	sl, #14
 800d600:	6010      	str	r0, [r2, #0]
 800d602:	d86e      	bhi.n	800d6e2 <_dtoa_r+0x3ba>
 800d604:	2c00      	cmp	r4, #0
 800d606:	d06c      	beq.n	800d6e2 <_dtoa_r+0x3ba>
 800d608:	f1b8 0f00 	cmp.w	r8, #0
 800d60c:	f340 80b4 	ble.w	800d778 <_dtoa_r+0x450>
 800d610:	4ac8      	ldr	r2, [pc, #800]	@ (800d934 <_dtoa_r+0x60c>)
 800d612:	f008 010f 	and.w	r1, r8, #15
 800d616:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d61a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d61e:	ed92 7b00 	vldr	d7, [r2]
 800d622:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d626:	f000 809b 	beq.w	800d760 <_dtoa_r+0x438>
 800d62a:	4ac3      	ldr	r2, [pc, #780]	@ (800d938 <_dtoa_r+0x610>)
 800d62c:	ed92 6b08 	vldr	d6, [r2, #32]
 800d630:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d634:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d638:	f001 010f 	and.w	r1, r1, #15
 800d63c:	2203      	movs	r2, #3
 800d63e:	48be      	ldr	r0, [pc, #760]	@ (800d938 <_dtoa_r+0x610>)
 800d640:	2900      	cmp	r1, #0
 800d642:	f040 808f 	bne.w	800d764 <_dtoa_r+0x43c>
 800d646:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d64a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d64e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d652:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d654:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d658:	2900      	cmp	r1, #0
 800d65a:	f000 80b3 	beq.w	800d7c4 <_dtoa_r+0x49c>
 800d65e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d662:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66a:	f140 80ab 	bpl.w	800d7c4 <_dtoa_r+0x49c>
 800d66e:	f1ba 0f00 	cmp.w	sl, #0
 800d672:	f000 80a7 	beq.w	800d7c4 <_dtoa_r+0x49c>
 800d676:	f1bb 0f00 	cmp.w	fp, #0
 800d67a:	dd30      	ble.n	800d6de <_dtoa_r+0x3b6>
 800d67c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d680:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d684:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d688:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800d68c:	9105      	str	r1, [sp, #20]
 800d68e:	3201      	adds	r2, #1
 800d690:	465c      	mov	r4, fp
 800d692:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d696:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d69a:	ee07 2a90 	vmov	s15, r2
 800d69e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d6a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d6a6:	ee15 2a90 	vmov	r2, s11
 800d6aa:	ec51 0b15 	vmov	r0, r1, d5
 800d6ae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d6b2:	2c00      	cmp	r4, #0
 800d6b4:	f040 808a 	bne.w	800d7cc <_dtoa_r+0x4a4>
 800d6b8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d6bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d6c0:	ec41 0b17 	vmov	d7, r0, r1
 800d6c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6cc:	f300 826a 	bgt.w	800dba4 <_dtoa_r+0x87c>
 800d6d0:	eeb1 7b47 	vneg.f64	d7, d7
 800d6d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6dc:	d423      	bmi.n	800d726 <_dtoa_r+0x3fe>
 800d6de:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d6e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d6e4:	2a00      	cmp	r2, #0
 800d6e6:	f2c0 8129 	blt.w	800d93c <_dtoa_r+0x614>
 800d6ea:	f1b8 0f0e 	cmp.w	r8, #14
 800d6ee:	f300 8125 	bgt.w	800d93c <_dtoa_r+0x614>
 800d6f2:	4b90      	ldr	r3, [pc, #576]	@ (800d934 <_dtoa_r+0x60c>)
 800d6f4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d6f8:	ed93 6b00 	vldr	d6, [r3]
 800d6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f280 80c8 	bge.w	800d894 <_dtoa_r+0x56c>
 800d704:	f1ba 0f00 	cmp.w	sl, #0
 800d708:	f300 80c4 	bgt.w	800d894 <_dtoa_r+0x56c>
 800d70c:	d10b      	bne.n	800d726 <_dtoa_r+0x3fe>
 800d70e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d712:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d716:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d71a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d722:	f2c0 823c 	blt.w	800db9e <_dtoa_r+0x876>
 800d726:	2400      	movs	r4, #0
 800d728:	4625      	mov	r5, r4
 800d72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d72c:	43db      	mvns	r3, r3
 800d72e:	9305      	str	r3, [sp, #20]
 800d730:	463e      	mov	r6, r7
 800d732:	f04f 0800 	mov.w	r8, #0
 800d736:	4621      	mov	r1, r4
 800d738:	4648      	mov	r0, r9
 800d73a:	f000 fc93 	bl	800e064 <_Bfree>
 800d73e:	2d00      	cmp	r5, #0
 800d740:	f000 80a2 	beq.w	800d888 <_dtoa_r+0x560>
 800d744:	f1b8 0f00 	cmp.w	r8, #0
 800d748:	d005      	beq.n	800d756 <_dtoa_r+0x42e>
 800d74a:	45a8      	cmp	r8, r5
 800d74c:	d003      	beq.n	800d756 <_dtoa_r+0x42e>
 800d74e:	4641      	mov	r1, r8
 800d750:	4648      	mov	r0, r9
 800d752:	f000 fc87 	bl	800e064 <_Bfree>
 800d756:	4629      	mov	r1, r5
 800d758:	4648      	mov	r0, r9
 800d75a:	f000 fc83 	bl	800e064 <_Bfree>
 800d75e:	e093      	b.n	800d888 <_dtoa_r+0x560>
 800d760:	2202      	movs	r2, #2
 800d762:	e76c      	b.n	800d63e <_dtoa_r+0x316>
 800d764:	07cc      	lsls	r4, r1, #31
 800d766:	d504      	bpl.n	800d772 <_dtoa_r+0x44a>
 800d768:	ed90 6b00 	vldr	d6, [r0]
 800d76c:	3201      	adds	r2, #1
 800d76e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d772:	1049      	asrs	r1, r1, #1
 800d774:	3008      	adds	r0, #8
 800d776:	e763      	b.n	800d640 <_dtoa_r+0x318>
 800d778:	d022      	beq.n	800d7c0 <_dtoa_r+0x498>
 800d77a:	f1c8 0100 	rsb	r1, r8, #0
 800d77e:	4a6d      	ldr	r2, [pc, #436]	@ (800d934 <_dtoa_r+0x60c>)
 800d780:	f001 000f 	and.w	r0, r1, #15
 800d784:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d788:	ed92 7b00 	vldr	d7, [r2]
 800d78c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d790:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d794:	4868      	ldr	r0, [pc, #416]	@ (800d938 <_dtoa_r+0x610>)
 800d796:	1109      	asrs	r1, r1, #4
 800d798:	2400      	movs	r4, #0
 800d79a:	2202      	movs	r2, #2
 800d79c:	b929      	cbnz	r1, 800d7aa <_dtoa_r+0x482>
 800d79e:	2c00      	cmp	r4, #0
 800d7a0:	f43f af57 	beq.w	800d652 <_dtoa_r+0x32a>
 800d7a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7a8:	e753      	b.n	800d652 <_dtoa_r+0x32a>
 800d7aa:	07ce      	lsls	r6, r1, #31
 800d7ac:	d505      	bpl.n	800d7ba <_dtoa_r+0x492>
 800d7ae:	ed90 6b00 	vldr	d6, [r0]
 800d7b2:	3201      	adds	r2, #1
 800d7b4:	2401      	movs	r4, #1
 800d7b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7ba:	1049      	asrs	r1, r1, #1
 800d7bc:	3008      	adds	r0, #8
 800d7be:	e7ed      	b.n	800d79c <_dtoa_r+0x474>
 800d7c0:	2202      	movs	r2, #2
 800d7c2:	e746      	b.n	800d652 <_dtoa_r+0x32a>
 800d7c4:	f8cd 8014 	str.w	r8, [sp, #20]
 800d7c8:	4654      	mov	r4, sl
 800d7ca:	e762      	b.n	800d692 <_dtoa_r+0x36a>
 800d7cc:	4a59      	ldr	r2, [pc, #356]	@ (800d934 <_dtoa_r+0x60c>)
 800d7ce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d7d2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d7d6:	9a08      	ldr	r2, [sp, #32]
 800d7d8:	ec41 0b17 	vmov	d7, r0, r1
 800d7dc:	443c      	add	r4, r7
 800d7de:	b34a      	cbz	r2, 800d834 <_dtoa_r+0x50c>
 800d7e0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d7e4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d7e8:	463e      	mov	r6, r7
 800d7ea:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d7ee:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d7f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d7f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d7fa:	ee14 2a90 	vmov	r2, s9
 800d7fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d802:	3230      	adds	r2, #48	@ 0x30
 800d804:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d808:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d810:	f806 2b01 	strb.w	r2, [r6], #1
 800d814:	d438      	bmi.n	800d888 <_dtoa_r+0x560>
 800d816:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d81a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d822:	d46e      	bmi.n	800d902 <_dtoa_r+0x5da>
 800d824:	42a6      	cmp	r6, r4
 800d826:	f43f af5a 	beq.w	800d6de <_dtoa_r+0x3b6>
 800d82a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d82e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d832:	e7e0      	b.n	800d7f6 <_dtoa_r+0x4ce>
 800d834:	4621      	mov	r1, r4
 800d836:	463e      	mov	r6, r7
 800d838:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d83c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d840:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d844:	ee14 2a90 	vmov	r2, s9
 800d848:	3230      	adds	r2, #48	@ 0x30
 800d84a:	f806 2b01 	strb.w	r2, [r6], #1
 800d84e:	42a6      	cmp	r6, r4
 800d850:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d854:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d858:	d119      	bne.n	800d88e <_dtoa_r+0x566>
 800d85a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d85e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d862:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d86a:	dc4a      	bgt.n	800d902 <_dtoa_r+0x5da>
 800d86c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d870:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d878:	f57f af31 	bpl.w	800d6de <_dtoa_r+0x3b6>
 800d87c:	460e      	mov	r6, r1
 800d87e:	3901      	subs	r1, #1
 800d880:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d884:	2b30      	cmp	r3, #48	@ 0x30
 800d886:	d0f9      	beq.n	800d87c <_dtoa_r+0x554>
 800d888:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d88c:	e027      	b.n	800d8de <_dtoa_r+0x5b6>
 800d88e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d892:	e7d5      	b.n	800d840 <_dtoa_r+0x518>
 800d894:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d898:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d89c:	463e      	mov	r6, r7
 800d89e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d8a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d8a6:	ee15 3a10 	vmov	r3, s10
 800d8aa:	3330      	adds	r3, #48	@ 0x30
 800d8ac:	f806 3b01 	strb.w	r3, [r6], #1
 800d8b0:	1bf3      	subs	r3, r6, r7
 800d8b2:	459a      	cmp	sl, r3
 800d8b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d8b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d8bc:	d132      	bne.n	800d924 <_dtoa_r+0x5fc>
 800d8be:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d8c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ca:	dc18      	bgt.n	800d8fe <_dtoa_r+0x5d6>
 800d8cc:	eeb4 7b46 	vcmp.f64	d7, d6
 800d8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d4:	d103      	bne.n	800d8de <_dtoa_r+0x5b6>
 800d8d6:	ee15 3a10 	vmov	r3, s10
 800d8da:	07db      	lsls	r3, r3, #31
 800d8dc:	d40f      	bmi.n	800d8fe <_dtoa_r+0x5d6>
 800d8de:	9901      	ldr	r1, [sp, #4]
 800d8e0:	4648      	mov	r0, r9
 800d8e2:	f000 fbbf 	bl	800e064 <_Bfree>
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d8ea:	7033      	strb	r3, [r6, #0]
 800d8ec:	f108 0301 	add.w	r3, r8, #1
 800d8f0:	6013      	str	r3, [r2, #0]
 800d8f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 824b 	beq.w	800dd90 <_dtoa_r+0xa68>
 800d8fa:	601e      	str	r6, [r3, #0]
 800d8fc:	e248      	b.n	800dd90 <_dtoa_r+0xa68>
 800d8fe:	f8cd 8014 	str.w	r8, [sp, #20]
 800d902:	4633      	mov	r3, r6
 800d904:	461e      	mov	r6, r3
 800d906:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d90a:	2a39      	cmp	r2, #57	@ 0x39
 800d90c:	d106      	bne.n	800d91c <_dtoa_r+0x5f4>
 800d90e:	429f      	cmp	r7, r3
 800d910:	d1f8      	bne.n	800d904 <_dtoa_r+0x5dc>
 800d912:	9a05      	ldr	r2, [sp, #20]
 800d914:	3201      	adds	r2, #1
 800d916:	9205      	str	r2, [sp, #20]
 800d918:	2230      	movs	r2, #48	@ 0x30
 800d91a:	703a      	strb	r2, [r7, #0]
 800d91c:	781a      	ldrb	r2, [r3, #0]
 800d91e:	3201      	adds	r2, #1
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	e7b1      	b.n	800d888 <_dtoa_r+0x560>
 800d924:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d928:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d930:	d1b5      	bne.n	800d89e <_dtoa_r+0x576>
 800d932:	e7d4      	b.n	800d8de <_dtoa_r+0x5b6>
 800d934:	08010c10 	.word	0x08010c10
 800d938:	08010be8 	.word	0x08010be8
 800d93c:	9908      	ldr	r1, [sp, #32]
 800d93e:	2900      	cmp	r1, #0
 800d940:	f000 80e9 	beq.w	800db16 <_dtoa_r+0x7ee>
 800d944:	9907      	ldr	r1, [sp, #28]
 800d946:	2901      	cmp	r1, #1
 800d948:	f300 80cb 	bgt.w	800dae2 <_dtoa_r+0x7ba>
 800d94c:	2d00      	cmp	r5, #0
 800d94e:	f000 80c4 	beq.w	800dada <_dtoa_r+0x7b2>
 800d952:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d956:	9e04      	ldr	r6, [sp, #16]
 800d958:	461c      	mov	r4, r3
 800d95a:	9305      	str	r3, [sp, #20]
 800d95c:	9b04      	ldr	r3, [sp, #16]
 800d95e:	4413      	add	r3, r2
 800d960:	9304      	str	r3, [sp, #16]
 800d962:	9b06      	ldr	r3, [sp, #24]
 800d964:	2101      	movs	r1, #1
 800d966:	4413      	add	r3, r2
 800d968:	4648      	mov	r0, r9
 800d96a:	9306      	str	r3, [sp, #24]
 800d96c:	f000 fc78 	bl	800e260 <__i2b>
 800d970:	9b05      	ldr	r3, [sp, #20]
 800d972:	4605      	mov	r5, r0
 800d974:	b166      	cbz	r6, 800d990 <_dtoa_r+0x668>
 800d976:	9a06      	ldr	r2, [sp, #24]
 800d978:	2a00      	cmp	r2, #0
 800d97a:	dd09      	ble.n	800d990 <_dtoa_r+0x668>
 800d97c:	42b2      	cmp	r2, r6
 800d97e:	9904      	ldr	r1, [sp, #16]
 800d980:	bfa8      	it	ge
 800d982:	4632      	movge	r2, r6
 800d984:	1a89      	subs	r1, r1, r2
 800d986:	9104      	str	r1, [sp, #16]
 800d988:	9906      	ldr	r1, [sp, #24]
 800d98a:	1ab6      	subs	r6, r6, r2
 800d98c:	1a8a      	subs	r2, r1, r2
 800d98e:	9206      	str	r2, [sp, #24]
 800d990:	b30b      	cbz	r3, 800d9d6 <_dtoa_r+0x6ae>
 800d992:	9a08      	ldr	r2, [sp, #32]
 800d994:	2a00      	cmp	r2, #0
 800d996:	f000 80c5 	beq.w	800db24 <_dtoa_r+0x7fc>
 800d99a:	2c00      	cmp	r4, #0
 800d99c:	f000 80bf 	beq.w	800db1e <_dtoa_r+0x7f6>
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	4648      	mov	r0, r9
 800d9a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9a8:	f000 fd12 	bl	800e3d0 <__pow5mult>
 800d9ac:	9a01      	ldr	r2, [sp, #4]
 800d9ae:	4601      	mov	r1, r0
 800d9b0:	4605      	mov	r5, r0
 800d9b2:	4648      	mov	r0, r9
 800d9b4:	f000 fc6a 	bl	800e28c <__multiply>
 800d9b8:	9901      	ldr	r1, [sp, #4]
 800d9ba:	9005      	str	r0, [sp, #20]
 800d9bc:	4648      	mov	r0, r9
 800d9be:	f000 fb51 	bl	800e064 <_Bfree>
 800d9c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9c4:	1b1b      	subs	r3, r3, r4
 800d9c6:	f000 80b0 	beq.w	800db2a <_dtoa_r+0x802>
 800d9ca:	9905      	ldr	r1, [sp, #20]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	4648      	mov	r0, r9
 800d9d0:	f000 fcfe 	bl	800e3d0 <__pow5mult>
 800d9d4:	9001      	str	r0, [sp, #4]
 800d9d6:	2101      	movs	r1, #1
 800d9d8:	4648      	mov	r0, r9
 800d9da:	f000 fc41 	bl	800e260 <__i2b>
 800d9de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9e0:	4604      	mov	r4, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	f000 81da 	beq.w	800dd9c <_dtoa_r+0xa74>
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	4601      	mov	r1, r0
 800d9ec:	4648      	mov	r0, r9
 800d9ee:	f000 fcef 	bl	800e3d0 <__pow5mult>
 800d9f2:	9b07      	ldr	r3, [sp, #28]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	f300 80a0 	bgt.w	800db3c <_dtoa_r+0x814>
 800d9fc:	9b02      	ldr	r3, [sp, #8]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f040 8096 	bne.w	800db30 <_dtoa_r+0x808>
 800da04:	9b03      	ldr	r3, [sp, #12]
 800da06:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800da0a:	2a00      	cmp	r2, #0
 800da0c:	f040 8092 	bne.w	800db34 <_dtoa_r+0x80c>
 800da10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800da14:	0d12      	lsrs	r2, r2, #20
 800da16:	0512      	lsls	r2, r2, #20
 800da18:	2a00      	cmp	r2, #0
 800da1a:	f000 808d 	beq.w	800db38 <_dtoa_r+0x810>
 800da1e:	9b04      	ldr	r3, [sp, #16]
 800da20:	3301      	adds	r3, #1
 800da22:	9304      	str	r3, [sp, #16]
 800da24:	9b06      	ldr	r3, [sp, #24]
 800da26:	3301      	adds	r3, #1
 800da28:	9306      	str	r3, [sp, #24]
 800da2a:	2301      	movs	r3, #1
 800da2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da30:	2b00      	cmp	r3, #0
 800da32:	f000 81b9 	beq.w	800dda8 <_dtoa_r+0xa80>
 800da36:	6922      	ldr	r2, [r4, #16]
 800da38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800da3c:	6910      	ldr	r0, [r2, #16]
 800da3e:	f000 fbc3 	bl	800e1c8 <__hi0bits>
 800da42:	f1c0 0020 	rsb	r0, r0, #32
 800da46:	9b06      	ldr	r3, [sp, #24]
 800da48:	4418      	add	r0, r3
 800da4a:	f010 001f 	ands.w	r0, r0, #31
 800da4e:	f000 8081 	beq.w	800db54 <_dtoa_r+0x82c>
 800da52:	f1c0 0220 	rsb	r2, r0, #32
 800da56:	2a04      	cmp	r2, #4
 800da58:	dd73      	ble.n	800db42 <_dtoa_r+0x81a>
 800da5a:	9b04      	ldr	r3, [sp, #16]
 800da5c:	f1c0 001c 	rsb	r0, r0, #28
 800da60:	4403      	add	r3, r0
 800da62:	9304      	str	r3, [sp, #16]
 800da64:	9b06      	ldr	r3, [sp, #24]
 800da66:	4406      	add	r6, r0
 800da68:	4403      	add	r3, r0
 800da6a:	9306      	str	r3, [sp, #24]
 800da6c:	9b04      	ldr	r3, [sp, #16]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	dd05      	ble.n	800da7e <_dtoa_r+0x756>
 800da72:	9901      	ldr	r1, [sp, #4]
 800da74:	461a      	mov	r2, r3
 800da76:	4648      	mov	r0, r9
 800da78:	f000 fd04 	bl	800e484 <__lshift>
 800da7c:	9001      	str	r0, [sp, #4]
 800da7e:	9b06      	ldr	r3, [sp, #24]
 800da80:	2b00      	cmp	r3, #0
 800da82:	dd05      	ble.n	800da90 <_dtoa_r+0x768>
 800da84:	4621      	mov	r1, r4
 800da86:	461a      	mov	r2, r3
 800da88:	4648      	mov	r0, r9
 800da8a:	f000 fcfb 	bl	800e484 <__lshift>
 800da8e:	4604      	mov	r4, r0
 800da90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da92:	2b00      	cmp	r3, #0
 800da94:	d060      	beq.n	800db58 <_dtoa_r+0x830>
 800da96:	9801      	ldr	r0, [sp, #4]
 800da98:	4621      	mov	r1, r4
 800da9a:	f000 fd5f 	bl	800e55c <__mcmp>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	da5a      	bge.n	800db58 <_dtoa_r+0x830>
 800daa2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800daa6:	9305      	str	r3, [sp, #20]
 800daa8:	9901      	ldr	r1, [sp, #4]
 800daaa:	2300      	movs	r3, #0
 800daac:	220a      	movs	r2, #10
 800daae:	4648      	mov	r0, r9
 800dab0:	f000 fafa 	bl	800e0a8 <__multadd>
 800dab4:	9b08      	ldr	r3, [sp, #32]
 800dab6:	9001      	str	r0, [sp, #4]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f000 8177 	beq.w	800ddac <_dtoa_r+0xa84>
 800dabe:	4629      	mov	r1, r5
 800dac0:	2300      	movs	r3, #0
 800dac2:	220a      	movs	r2, #10
 800dac4:	4648      	mov	r0, r9
 800dac6:	f000 faef 	bl	800e0a8 <__multadd>
 800daca:	f1bb 0f00 	cmp.w	fp, #0
 800dace:	4605      	mov	r5, r0
 800dad0:	dc6e      	bgt.n	800dbb0 <_dtoa_r+0x888>
 800dad2:	9b07      	ldr	r3, [sp, #28]
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	dc48      	bgt.n	800db6a <_dtoa_r+0x842>
 800dad8:	e06a      	b.n	800dbb0 <_dtoa_r+0x888>
 800dada:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dadc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dae0:	e739      	b.n	800d956 <_dtoa_r+0x62e>
 800dae2:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800dae6:	42a3      	cmp	r3, r4
 800dae8:	db07      	blt.n	800dafa <_dtoa_r+0x7d2>
 800daea:	f1ba 0f00 	cmp.w	sl, #0
 800daee:	eba3 0404 	sub.w	r4, r3, r4
 800daf2:	db0b      	blt.n	800db0c <_dtoa_r+0x7e4>
 800daf4:	9e04      	ldr	r6, [sp, #16]
 800daf6:	4652      	mov	r2, sl
 800daf8:	e72f      	b.n	800d95a <_dtoa_r+0x632>
 800dafa:	1ae2      	subs	r2, r4, r3
 800dafc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dafe:	9e04      	ldr	r6, [sp, #16]
 800db00:	4413      	add	r3, r2
 800db02:	930a      	str	r3, [sp, #40]	@ 0x28
 800db04:	4652      	mov	r2, sl
 800db06:	4623      	mov	r3, r4
 800db08:	2400      	movs	r4, #0
 800db0a:	e726      	b.n	800d95a <_dtoa_r+0x632>
 800db0c:	9a04      	ldr	r2, [sp, #16]
 800db0e:	eba2 060a 	sub.w	r6, r2, sl
 800db12:	2200      	movs	r2, #0
 800db14:	e721      	b.n	800d95a <_dtoa_r+0x632>
 800db16:	9e04      	ldr	r6, [sp, #16]
 800db18:	9d08      	ldr	r5, [sp, #32]
 800db1a:	461c      	mov	r4, r3
 800db1c:	e72a      	b.n	800d974 <_dtoa_r+0x64c>
 800db1e:	9a01      	ldr	r2, [sp, #4]
 800db20:	9205      	str	r2, [sp, #20]
 800db22:	e752      	b.n	800d9ca <_dtoa_r+0x6a2>
 800db24:	9901      	ldr	r1, [sp, #4]
 800db26:	461a      	mov	r2, r3
 800db28:	e751      	b.n	800d9ce <_dtoa_r+0x6a6>
 800db2a:	9b05      	ldr	r3, [sp, #20]
 800db2c:	9301      	str	r3, [sp, #4]
 800db2e:	e752      	b.n	800d9d6 <_dtoa_r+0x6ae>
 800db30:	2300      	movs	r3, #0
 800db32:	e77b      	b.n	800da2c <_dtoa_r+0x704>
 800db34:	9b02      	ldr	r3, [sp, #8]
 800db36:	e779      	b.n	800da2c <_dtoa_r+0x704>
 800db38:	920b      	str	r2, [sp, #44]	@ 0x2c
 800db3a:	e778      	b.n	800da2e <_dtoa_r+0x706>
 800db3c:	2300      	movs	r3, #0
 800db3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db40:	e779      	b.n	800da36 <_dtoa_r+0x70e>
 800db42:	d093      	beq.n	800da6c <_dtoa_r+0x744>
 800db44:	9b04      	ldr	r3, [sp, #16]
 800db46:	321c      	adds	r2, #28
 800db48:	4413      	add	r3, r2
 800db4a:	9304      	str	r3, [sp, #16]
 800db4c:	9b06      	ldr	r3, [sp, #24]
 800db4e:	4416      	add	r6, r2
 800db50:	4413      	add	r3, r2
 800db52:	e78a      	b.n	800da6a <_dtoa_r+0x742>
 800db54:	4602      	mov	r2, r0
 800db56:	e7f5      	b.n	800db44 <_dtoa_r+0x81c>
 800db58:	f1ba 0f00 	cmp.w	sl, #0
 800db5c:	f8cd 8014 	str.w	r8, [sp, #20]
 800db60:	46d3      	mov	fp, sl
 800db62:	dc21      	bgt.n	800dba8 <_dtoa_r+0x880>
 800db64:	9b07      	ldr	r3, [sp, #28]
 800db66:	2b02      	cmp	r3, #2
 800db68:	dd1e      	ble.n	800dba8 <_dtoa_r+0x880>
 800db6a:	f1bb 0f00 	cmp.w	fp, #0
 800db6e:	f47f addc 	bne.w	800d72a <_dtoa_r+0x402>
 800db72:	4621      	mov	r1, r4
 800db74:	465b      	mov	r3, fp
 800db76:	2205      	movs	r2, #5
 800db78:	4648      	mov	r0, r9
 800db7a:	f000 fa95 	bl	800e0a8 <__multadd>
 800db7e:	4601      	mov	r1, r0
 800db80:	4604      	mov	r4, r0
 800db82:	9801      	ldr	r0, [sp, #4]
 800db84:	f000 fcea 	bl	800e55c <__mcmp>
 800db88:	2800      	cmp	r0, #0
 800db8a:	f77f adce 	ble.w	800d72a <_dtoa_r+0x402>
 800db8e:	463e      	mov	r6, r7
 800db90:	2331      	movs	r3, #49	@ 0x31
 800db92:	f806 3b01 	strb.w	r3, [r6], #1
 800db96:	9b05      	ldr	r3, [sp, #20]
 800db98:	3301      	adds	r3, #1
 800db9a:	9305      	str	r3, [sp, #20]
 800db9c:	e5c9      	b.n	800d732 <_dtoa_r+0x40a>
 800db9e:	f8cd 8014 	str.w	r8, [sp, #20]
 800dba2:	4654      	mov	r4, sl
 800dba4:	4625      	mov	r5, r4
 800dba6:	e7f2      	b.n	800db8e <_dtoa_r+0x866>
 800dba8:	9b08      	ldr	r3, [sp, #32]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f000 8102 	beq.w	800ddb4 <_dtoa_r+0xa8c>
 800dbb0:	2e00      	cmp	r6, #0
 800dbb2:	dd05      	ble.n	800dbc0 <_dtoa_r+0x898>
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	4632      	mov	r2, r6
 800dbb8:	4648      	mov	r0, r9
 800dbba:	f000 fc63 	bl	800e484 <__lshift>
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d058      	beq.n	800dc78 <_dtoa_r+0x950>
 800dbc6:	6869      	ldr	r1, [r5, #4]
 800dbc8:	4648      	mov	r0, r9
 800dbca:	f000 fa0b 	bl	800dfe4 <_Balloc>
 800dbce:	4606      	mov	r6, r0
 800dbd0:	b928      	cbnz	r0, 800dbde <_dtoa_r+0x8b6>
 800dbd2:	4b82      	ldr	r3, [pc, #520]	@ (800dddc <_dtoa_r+0xab4>)
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dbda:	f7ff bbbe 	b.w	800d35a <_dtoa_r+0x32>
 800dbde:	692a      	ldr	r2, [r5, #16]
 800dbe0:	3202      	adds	r2, #2
 800dbe2:	0092      	lsls	r2, r2, #2
 800dbe4:	f105 010c 	add.w	r1, r5, #12
 800dbe8:	300c      	adds	r0, #12
 800dbea:	f002 f8ef 	bl	800fdcc <memcpy>
 800dbee:	2201      	movs	r2, #1
 800dbf0:	4631      	mov	r1, r6
 800dbf2:	4648      	mov	r0, r9
 800dbf4:	f000 fc46 	bl	800e484 <__lshift>
 800dbf8:	1c7b      	adds	r3, r7, #1
 800dbfa:	9304      	str	r3, [sp, #16]
 800dbfc:	eb07 030b 	add.w	r3, r7, fp
 800dc00:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc02:	9b02      	ldr	r3, [sp, #8]
 800dc04:	f003 0301 	and.w	r3, r3, #1
 800dc08:	46a8      	mov	r8, r5
 800dc0a:	9308      	str	r3, [sp, #32]
 800dc0c:	4605      	mov	r5, r0
 800dc0e:	9b04      	ldr	r3, [sp, #16]
 800dc10:	9801      	ldr	r0, [sp, #4]
 800dc12:	4621      	mov	r1, r4
 800dc14:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800dc18:	f7ff fafe 	bl	800d218 <quorem>
 800dc1c:	4641      	mov	r1, r8
 800dc1e:	9002      	str	r0, [sp, #8]
 800dc20:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800dc24:	9801      	ldr	r0, [sp, #4]
 800dc26:	f000 fc99 	bl	800e55c <__mcmp>
 800dc2a:	462a      	mov	r2, r5
 800dc2c:	9006      	str	r0, [sp, #24]
 800dc2e:	4621      	mov	r1, r4
 800dc30:	4648      	mov	r0, r9
 800dc32:	f000 fcaf 	bl	800e594 <__mdiff>
 800dc36:	68c2      	ldr	r2, [r0, #12]
 800dc38:	4606      	mov	r6, r0
 800dc3a:	b9fa      	cbnz	r2, 800dc7c <_dtoa_r+0x954>
 800dc3c:	4601      	mov	r1, r0
 800dc3e:	9801      	ldr	r0, [sp, #4]
 800dc40:	f000 fc8c 	bl	800e55c <__mcmp>
 800dc44:	4602      	mov	r2, r0
 800dc46:	4631      	mov	r1, r6
 800dc48:	4648      	mov	r0, r9
 800dc4a:	920a      	str	r2, [sp, #40]	@ 0x28
 800dc4c:	f000 fa0a 	bl	800e064 <_Bfree>
 800dc50:	9b07      	ldr	r3, [sp, #28]
 800dc52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc54:	9e04      	ldr	r6, [sp, #16]
 800dc56:	ea42 0103 	orr.w	r1, r2, r3
 800dc5a:	9b08      	ldr	r3, [sp, #32]
 800dc5c:	4319      	orrs	r1, r3
 800dc5e:	d10f      	bne.n	800dc80 <_dtoa_r+0x958>
 800dc60:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dc64:	d028      	beq.n	800dcb8 <_dtoa_r+0x990>
 800dc66:	9b06      	ldr	r3, [sp, #24]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	dd02      	ble.n	800dc72 <_dtoa_r+0x94a>
 800dc6c:	9b02      	ldr	r3, [sp, #8]
 800dc6e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800dc72:	f88b a000 	strb.w	sl, [fp]
 800dc76:	e55e      	b.n	800d736 <_dtoa_r+0x40e>
 800dc78:	4628      	mov	r0, r5
 800dc7a:	e7bd      	b.n	800dbf8 <_dtoa_r+0x8d0>
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	e7e2      	b.n	800dc46 <_dtoa_r+0x91e>
 800dc80:	9b06      	ldr	r3, [sp, #24]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	db04      	blt.n	800dc90 <_dtoa_r+0x968>
 800dc86:	9907      	ldr	r1, [sp, #28]
 800dc88:	430b      	orrs	r3, r1
 800dc8a:	9908      	ldr	r1, [sp, #32]
 800dc8c:	430b      	orrs	r3, r1
 800dc8e:	d120      	bne.n	800dcd2 <_dtoa_r+0x9aa>
 800dc90:	2a00      	cmp	r2, #0
 800dc92:	ddee      	ble.n	800dc72 <_dtoa_r+0x94a>
 800dc94:	9901      	ldr	r1, [sp, #4]
 800dc96:	2201      	movs	r2, #1
 800dc98:	4648      	mov	r0, r9
 800dc9a:	f000 fbf3 	bl	800e484 <__lshift>
 800dc9e:	4621      	mov	r1, r4
 800dca0:	9001      	str	r0, [sp, #4]
 800dca2:	f000 fc5b 	bl	800e55c <__mcmp>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	dc03      	bgt.n	800dcb2 <_dtoa_r+0x98a>
 800dcaa:	d1e2      	bne.n	800dc72 <_dtoa_r+0x94a>
 800dcac:	f01a 0f01 	tst.w	sl, #1
 800dcb0:	d0df      	beq.n	800dc72 <_dtoa_r+0x94a>
 800dcb2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dcb6:	d1d9      	bne.n	800dc6c <_dtoa_r+0x944>
 800dcb8:	2339      	movs	r3, #57	@ 0x39
 800dcba:	f88b 3000 	strb.w	r3, [fp]
 800dcbe:	4633      	mov	r3, r6
 800dcc0:	461e      	mov	r6, r3
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dcc8:	2a39      	cmp	r2, #57	@ 0x39
 800dcca:	d052      	beq.n	800dd72 <_dtoa_r+0xa4a>
 800dccc:	3201      	adds	r2, #1
 800dcce:	701a      	strb	r2, [r3, #0]
 800dcd0:	e531      	b.n	800d736 <_dtoa_r+0x40e>
 800dcd2:	2a00      	cmp	r2, #0
 800dcd4:	dd07      	ble.n	800dce6 <_dtoa_r+0x9be>
 800dcd6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dcda:	d0ed      	beq.n	800dcb8 <_dtoa_r+0x990>
 800dcdc:	f10a 0301 	add.w	r3, sl, #1
 800dce0:	f88b 3000 	strb.w	r3, [fp]
 800dce4:	e527      	b.n	800d736 <_dtoa_r+0x40e>
 800dce6:	9b04      	ldr	r3, [sp, #16]
 800dce8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcea:	f803 ac01 	strb.w	sl, [r3, #-1]
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d029      	beq.n	800dd46 <_dtoa_r+0xa1e>
 800dcf2:	9901      	ldr	r1, [sp, #4]
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	220a      	movs	r2, #10
 800dcf8:	4648      	mov	r0, r9
 800dcfa:	f000 f9d5 	bl	800e0a8 <__multadd>
 800dcfe:	45a8      	cmp	r8, r5
 800dd00:	9001      	str	r0, [sp, #4]
 800dd02:	f04f 0300 	mov.w	r3, #0
 800dd06:	f04f 020a 	mov.w	r2, #10
 800dd0a:	4641      	mov	r1, r8
 800dd0c:	4648      	mov	r0, r9
 800dd0e:	d107      	bne.n	800dd20 <_dtoa_r+0x9f8>
 800dd10:	f000 f9ca 	bl	800e0a8 <__multadd>
 800dd14:	4680      	mov	r8, r0
 800dd16:	4605      	mov	r5, r0
 800dd18:	9b04      	ldr	r3, [sp, #16]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	9304      	str	r3, [sp, #16]
 800dd1e:	e776      	b.n	800dc0e <_dtoa_r+0x8e6>
 800dd20:	f000 f9c2 	bl	800e0a8 <__multadd>
 800dd24:	4629      	mov	r1, r5
 800dd26:	4680      	mov	r8, r0
 800dd28:	2300      	movs	r3, #0
 800dd2a:	220a      	movs	r2, #10
 800dd2c:	4648      	mov	r0, r9
 800dd2e:	f000 f9bb 	bl	800e0a8 <__multadd>
 800dd32:	4605      	mov	r5, r0
 800dd34:	e7f0      	b.n	800dd18 <_dtoa_r+0x9f0>
 800dd36:	f1bb 0f00 	cmp.w	fp, #0
 800dd3a:	bfcc      	ite	gt
 800dd3c:	465e      	movgt	r6, fp
 800dd3e:	2601      	movle	r6, #1
 800dd40:	443e      	add	r6, r7
 800dd42:	f04f 0800 	mov.w	r8, #0
 800dd46:	9901      	ldr	r1, [sp, #4]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	4648      	mov	r0, r9
 800dd4c:	f000 fb9a 	bl	800e484 <__lshift>
 800dd50:	4621      	mov	r1, r4
 800dd52:	9001      	str	r0, [sp, #4]
 800dd54:	f000 fc02 	bl	800e55c <__mcmp>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	dcb0      	bgt.n	800dcbe <_dtoa_r+0x996>
 800dd5c:	d102      	bne.n	800dd64 <_dtoa_r+0xa3c>
 800dd5e:	f01a 0f01 	tst.w	sl, #1
 800dd62:	d1ac      	bne.n	800dcbe <_dtoa_r+0x996>
 800dd64:	4633      	mov	r3, r6
 800dd66:	461e      	mov	r6, r3
 800dd68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd6c:	2a30      	cmp	r2, #48	@ 0x30
 800dd6e:	d0fa      	beq.n	800dd66 <_dtoa_r+0xa3e>
 800dd70:	e4e1      	b.n	800d736 <_dtoa_r+0x40e>
 800dd72:	429f      	cmp	r7, r3
 800dd74:	d1a4      	bne.n	800dcc0 <_dtoa_r+0x998>
 800dd76:	9b05      	ldr	r3, [sp, #20]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	9305      	str	r3, [sp, #20]
 800dd7c:	2331      	movs	r3, #49	@ 0x31
 800dd7e:	703b      	strb	r3, [r7, #0]
 800dd80:	e4d9      	b.n	800d736 <_dtoa_r+0x40e>
 800dd82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dd84:	4f16      	ldr	r7, [pc, #88]	@ (800dde0 <_dtoa_r+0xab8>)
 800dd86:	b11b      	cbz	r3, 800dd90 <_dtoa_r+0xa68>
 800dd88:	f107 0308 	add.w	r3, r7, #8
 800dd8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800dd8e:	6013      	str	r3, [r2, #0]
 800dd90:	4638      	mov	r0, r7
 800dd92:	b011      	add	sp, #68	@ 0x44
 800dd94:	ecbd 8b02 	vpop	{d8}
 800dd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9c:	9b07      	ldr	r3, [sp, #28]
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	f77f ae2c 	ble.w	800d9fc <_dtoa_r+0x6d4>
 800dda4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dda6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dda8:	2001      	movs	r0, #1
 800ddaa:	e64c      	b.n	800da46 <_dtoa_r+0x71e>
 800ddac:	f1bb 0f00 	cmp.w	fp, #0
 800ddb0:	f77f aed8 	ble.w	800db64 <_dtoa_r+0x83c>
 800ddb4:	463e      	mov	r6, r7
 800ddb6:	9801      	ldr	r0, [sp, #4]
 800ddb8:	4621      	mov	r1, r4
 800ddba:	f7ff fa2d 	bl	800d218 <quorem>
 800ddbe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ddc2:	f806 ab01 	strb.w	sl, [r6], #1
 800ddc6:	1bf2      	subs	r2, r6, r7
 800ddc8:	4593      	cmp	fp, r2
 800ddca:	ddb4      	ble.n	800dd36 <_dtoa_r+0xa0e>
 800ddcc:	9901      	ldr	r1, [sp, #4]
 800ddce:	2300      	movs	r3, #0
 800ddd0:	220a      	movs	r2, #10
 800ddd2:	4648      	mov	r0, r9
 800ddd4:	f000 f968 	bl	800e0a8 <__multadd>
 800ddd8:	9001      	str	r0, [sp, #4]
 800ddda:	e7ec      	b.n	800ddb6 <_dtoa_r+0xa8e>
 800dddc:	08010ab9 	.word	0x08010ab9
 800dde0:	08010a3d 	.word	0x08010a3d

0800dde4 <_free_r>:
 800dde4:	b538      	push	{r3, r4, r5, lr}
 800dde6:	4605      	mov	r5, r0
 800dde8:	2900      	cmp	r1, #0
 800ddea:	d041      	beq.n	800de70 <_free_r+0x8c>
 800ddec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddf0:	1f0c      	subs	r4, r1, #4
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	bfb8      	it	lt
 800ddf6:	18e4      	addlt	r4, r4, r3
 800ddf8:	f000 f8e8 	bl	800dfcc <__malloc_lock>
 800ddfc:	4a1d      	ldr	r2, [pc, #116]	@ (800de74 <_free_r+0x90>)
 800ddfe:	6813      	ldr	r3, [r2, #0]
 800de00:	b933      	cbnz	r3, 800de10 <_free_r+0x2c>
 800de02:	6063      	str	r3, [r4, #4]
 800de04:	6014      	str	r4, [r2, #0]
 800de06:	4628      	mov	r0, r5
 800de08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de0c:	f000 b8e4 	b.w	800dfd8 <__malloc_unlock>
 800de10:	42a3      	cmp	r3, r4
 800de12:	d908      	bls.n	800de26 <_free_r+0x42>
 800de14:	6820      	ldr	r0, [r4, #0]
 800de16:	1821      	adds	r1, r4, r0
 800de18:	428b      	cmp	r3, r1
 800de1a:	bf01      	itttt	eq
 800de1c:	6819      	ldreq	r1, [r3, #0]
 800de1e:	685b      	ldreq	r3, [r3, #4]
 800de20:	1809      	addeq	r1, r1, r0
 800de22:	6021      	streq	r1, [r4, #0]
 800de24:	e7ed      	b.n	800de02 <_free_r+0x1e>
 800de26:	461a      	mov	r2, r3
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	b10b      	cbz	r3, 800de30 <_free_r+0x4c>
 800de2c:	42a3      	cmp	r3, r4
 800de2e:	d9fa      	bls.n	800de26 <_free_r+0x42>
 800de30:	6811      	ldr	r1, [r2, #0]
 800de32:	1850      	adds	r0, r2, r1
 800de34:	42a0      	cmp	r0, r4
 800de36:	d10b      	bne.n	800de50 <_free_r+0x6c>
 800de38:	6820      	ldr	r0, [r4, #0]
 800de3a:	4401      	add	r1, r0
 800de3c:	1850      	adds	r0, r2, r1
 800de3e:	4283      	cmp	r3, r0
 800de40:	6011      	str	r1, [r2, #0]
 800de42:	d1e0      	bne.n	800de06 <_free_r+0x22>
 800de44:	6818      	ldr	r0, [r3, #0]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	6053      	str	r3, [r2, #4]
 800de4a:	4408      	add	r0, r1
 800de4c:	6010      	str	r0, [r2, #0]
 800de4e:	e7da      	b.n	800de06 <_free_r+0x22>
 800de50:	d902      	bls.n	800de58 <_free_r+0x74>
 800de52:	230c      	movs	r3, #12
 800de54:	602b      	str	r3, [r5, #0]
 800de56:	e7d6      	b.n	800de06 <_free_r+0x22>
 800de58:	6820      	ldr	r0, [r4, #0]
 800de5a:	1821      	adds	r1, r4, r0
 800de5c:	428b      	cmp	r3, r1
 800de5e:	bf04      	itt	eq
 800de60:	6819      	ldreq	r1, [r3, #0]
 800de62:	685b      	ldreq	r3, [r3, #4]
 800de64:	6063      	str	r3, [r4, #4]
 800de66:	bf04      	itt	eq
 800de68:	1809      	addeq	r1, r1, r0
 800de6a:	6021      	streq	r1, [r4, #0]
 800de6c:	6054      	str	r4, [r2, #4]
 800de6e:	e7ca      	b.n	800de06 <_free_r+0x22>
 800de70:	bd38      	pop	{r3, r4, r5, pc}
 800de72:	bf00      	nop
 800de74:	240035a4 	.word	0x240035a4

0800de78 <malloc>:
 800de78:	4b02      	ldr	r3, [pc, #8]	@ (800de84 <malloc+0xc>)
 800de7a:	4601      	mov	r1, r0
 800de7c:	6818      	ldr	r0, [r3, #0]
 800de7e:	f000 b825 	b.w	800decc <_malloc_r>
 800de82:	bf00      	nop
 800de84:	2400001c 	.word	0x2400001c

0800de88 <sbrk_aligned>:
 800de88:	b570      	push	{r4, r5, r6, lr}
 800de8a:	4e0f      	ldr	r6, [pc, #60]	@ (800dec8 <sbrk_aligned+0x40>)
 800de8c:	460c      	mov	r4, r1
 800de8e:	6831      	ldr	r1, [r6, #0]
 800de90:	4605      	mov	r5, r0
 800de92:	b911      	cbnz	r1, 800de9a <sbrk_aligned+0x12>
 800de94:	f001 ff8a 	bl	800fdac <_sbrk_r>
 800de98:	6030      	str	r0, [r6, #0]
 800de9a:	4621      	mov	r1, r4
 800de9c:	4628      	mov	r0, r5
 800de9e:	f001 ff85 	bl	800fdac <_sbrk_r>
 800dea2:	1c43      	adds	r3, r0, #1
 800dea4:	d103      	bne.n	800deae <sbrk_aligned+0x26>
 800dea6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800deaa:	4620      	mov	r0, r4
 800deac:	bd70      	pop	{r4, r5, r6, pc}
 800deae:	1cc4      	adds	r4, r0, #3
 800deb0:	f024 0403 	bic.w	r4, r4, #3
 800deb4:	42a0      	cmp	r0, r4
 800deb6:	d0f8      	beq.n	800deaa <sbrk_aligned+0x22>
 800deb8:	1a21      	subs	r1, r4, r0
 800deba:	4628      	mov	r0, r5
 800debc:	f001 ff76 	bl	800fdac <_sbrk_r>
 800dec0:	3001      	adds	r0, #1
 800dec2:	d1f2      	bne.n	800deaa <sbrk_aligned+0x22>
 800dec4:	e7ef      	b.n	800dea6 <sbrk_aligned+0x1e>
 800dec6:	bf00      	nop
 800dec8:	240035a0 	.word	0x240035a0

0800decc <_malloc_r>:
 800decc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ded0:	1ccd      	adds	r5, r1, #3
 800ded2:	f025 0503 	bic.w	r5, r5, #3
 800ded6:	3508      	adds	r5, #8
 800ded8:	2d0c      	cmp	r5, #12
 800deda:	bf38      	it	cc
 800dedc:	250c      	movcc	r5, #12
 800dede:	2d00      	cmp	r5, #0
 800dee0:	4606      	mov	r6, r0
 800dee2:	db01      	blt.n	800dee8 <_malloc_r+0x1c>
 800dee4:	42a9      	cmp	r1, r5
 800dee6:	d904      	bls.n	800def2 <_malloc_r+0x26>
 800dee8:	230c      	movs	r3, #12
 800deea:	6033      	str	r3, [r6, #0]
 800deec:	2000      	movs	r0, #0
 800deee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800def2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dfc8 <_malloc_r+0xfc>
 800def6:	f000 f869 	bl	800dfcc <__malloc_lock>
 800defa:	f8d8 3000 	ldr.w	r3, [r8]
 800defe:	461c      	mov	r4, r3
 800df00:	bb44      	cbnz	r4, 800df54 <_malloc_r+0x88>
 800df02:	4629      	mov	r1, r5
 800df04:	4630      	mov	r0, r6
 800df06:	f7ff ffbf 	bl	800de88 <sbrk_aligned>
 800df0a:	1c43      	adds	r3, r0, #1
 800df0c:	4604      	mov	r4, r0
 800df0e:	d158      	bne.n	800dfc2 <_malloc_r+0xf6>
 800df10:	f8d8 4000 	ldr.w	r4, [r8]
 800df14:	4627      	mov	r7, r4
 800df16:	2f00      	cmp	r7, #0
 800df18:	d143      	bne.n	800dfa2 <_malloc_r+0xd6>
 800df1a:	2c00      	cmp	r4, #0
 800df1c:	d04b      	beq.n	800dfb6 <_malloc_r+0xea>
 800df1e:	6823      	ldr	r3, [r4, #0]
 800df20:	4639      	mov	r1, r7
 800df22:	4630      	mov	r0, r6
 800df24:	eb04 0903 	add.w	r9, r4, r3
 800df28:	f001 ff40 	bl	800fdac <_sbrk_r>
 800df2c:	4581      	cmp	r9, r0
 800df2e:	d142      	bne.n	800dfb6 <_malloc_r+0xea>
 800df30:	6821      	ldr	r1, [r4, #0]
 800df32:	1a6d      	subs	r5, r5, r1
 800df34:	4629      	mov	r1, r5
 800df36:	4630      	mov	r0, r6
 800df38:	f7ff ffa6 	bl	800de88 <sbrk_aligned>
 800df3c:	3001      	adds	r0, #1
 800df3e:	d03a      	beq.n	800dfb6 <_malloc_r+0xea>
 800df40:	6823      	ldr	r3, [r4, #0]
 800df42:	442b      	add	r3, r5
 800df44:	6023      	str	r3, [r4, #0]
 800df46:	f8d8 3000 	ldr.w	r3, [r8]
 800df4a:	685a      	ldr	r2, [r3, #4]
 800df4c:	bb62      	cbnz	r2, 800dfa8 <_malloc_r+0xdc>
 800df4e:	f8c8 7000 	str.w	r7, [r8]
 800df52:	e00f      	b.n	800df74 <_malloc_r+0xa8>
 800df54:	6822      	ldr	r2, [r4, #0]
 800df56:	1b52      	subs	r2, r2, r5
 800df58:	d420      	bmi.n	800df9c <_malloc_r+0xd0>
 800df5a:	2a0b      	cmp	r2, #11
 800df5c:	d917      	bls.n	800df8e <_malloc_r+0xc2>
 800df5e:	1961      	adds	r1, r4, r5
 800df60:	42a3      	cmp	r3, r4
 800df62:	6025      	str	r5, [r4, #0]
 800df64:	bf18      	it	ne
 800df66:	6059      	strne	r1, [r3, #4]
 800df68:	6863      	ldr	r3, [r4, #4]
 800df6a:	bf08      	it	eq
 800df6c:	f8c8 1000 	streq.w	r1, [r8]
 800df70:	5162      	str	r2, [r4, r5]
 800df72:	604b      	str	r3, [r1, #4]
 800df74:	4630      	mov	r0, r6
 800df76:	f000 f82f 	bl	800dfd8 <__malloc_unlock>
 800df7a:	f104 000b 	add.w	r0, r4, #11
 800df7e:	1d23      	adds	r3, r4, #4
 800df80:	f020 0007 	bic.w	r0, r0, #7
 800df84:	1ac2      	subs	r2, r0, r3
 800df86:	bf1c      	itt	ne
 800df88:	1a1b      	subne	r3, r3, r0
 800df8a:	50a3      	strne	r3, [r4, r2]
 800df8c:	e7af      	b.n	800deee <_malloc_r+0x22>
 800df8e:	6862      	ldr	r2, [r4, #4]
 800df90:	42a3      	cmp	r3, r4
 800df92:	bf0c      	ite	eq
 800df94:	f8c8 2000 	streq.w	r2, [r8]
 800df98:	605a      	strne	r2, [r3, #4]
 800df9a:	e7eb      	b.n	800df74 <_malloc_r+0xa8>
 800df9c:	4623      	mov	r3, r4
 800df9e:	6864      	ldr	r4, [r4, #4]
 800dfa0:	e7ae      	b.n	800df00 <_malloc_r+0x34>
 800dfa2:	463c      	mov	r4, r7
 800dfa4:	687f      	ldr	r7, [r7, #4]
 800dfa6:	e7b6      	b.n	800df16 <_malloc_r+0x4a>
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	42a3      	cmp	r3, r4
 800dfae:	d1fb      	bne.n	800dfa8 <_malloc_r+0xdc>
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	6053      	str	r3, [r2, #4]
 800dfb4:	e7de      	b.n	800df74 <_malloc_r+0xa8>
 800dfb6:	230c      	movs	r3, #12
 800dfb8:	6033      	str	r3, [r6, #0]
 800dfba:	4630      	mov	r0, r6
 800dfbc:	f000 f80c 	bl	800dfd8 <__malloc_unlock>
 800dfc0:	e794      	b.n	800deec <_malloc_r+0x20>
 800dfc2:	6005      	str	r5, [r0, #0]
 800dfc4:	e7d6      	b.n	800df74 <_malloc_r+0xa8>
 800dfc6:	bf00      	nop
 800dfc8:	240035a4 	.word	0x240035a4

0800dfcc <__malloc_lock>:
 800dfcc:	4801      	ldr	r0, [pc, #4]	@ (800dfd4 <__malloc_lock+0x8>)
 800dfce:	f7ff b91a 	b.w	800d206 <__retarget_lock_acquire_recursive>
 800dfd2:	bf00      	nop
 800dfd4:	2400359c 	.word	0x2400359c

0800dfd8 <__malloc_unlock>:
 800dfd8:	4801      	ldr	r0, [pc, #4]	@ (800dfe0 <__malloc_unlock+0x8>)
 800dfda:	f7ff b915 	b.w	800d208 <__retarget_lock_release_recursive>
 800dfde:	bf00      	nop
 800dfe0:	2400359c 	.word	0x2400359c

0800dfe4 <_Balloc>:
 800dfe4:	b570      	push	{r4, r5, r6, lr}
 800dfe6:	69c6      	ldr	r6, [r0, #28]
 800dfe8:	4604      	mov	r4, r0
 800dfea:	460d      	mov	r5, r1
 800dfec:	b976      	cbnz	r6, 800e00c <_Balloc+0x28>
 800dfee:	2010      	movs	r0, #16
 800dff0:	f7ff ff42 	bl	800de78 <malloc>
 800dff4:	4602      	mov	r2, r0
 800dff6:	61e0      	str	r0, [r4, #28]
 800dff8:	b920      	cbnz	r0, 800e004 <_Balloc+0x20>
 800dffa:	4b18      	ldr	r3, [pc, #96]	@ (800e05c <_Balloc+0x78>)
 800dffc:	4818      	ldr	r0, [pc, #96]	@ (800e060 <_Balloc+0x7c>)
 800dffe:	216b      	movs	r1, #107	@ 0x6b
 800e000:	f001 fefa 	bl	800fdf8 <__assert_func>
 800e004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e008:	6006      	str	r6, [r0, #0]
 800e00a:	60c6      	str	r6, [r0, #12]
 800e00c:	69e6      	ldr	r6, [r4, #28]
 800e00e:	68f3      	ldr	r3, [r6, #12]
 800e010:	b183      	cbz	r3, 800e034 <_Balloc+0x50>
 800e012:	69e3      	ldr	r3, [r4, #28]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e01a:	b9b8      	cbnz	r0, 800e04c <_Balloc+0x68>
 800e01c:	2101      	movs	r1, #1
 800e01e:	fa01 f605 	lsl.w	r6, r1, r5
 800e022:	1d72      	adds	r2, r6, #5
 800e024:	0092      	lsls	r2, r2, #2
 800e026:	4620      	mov	r0, r4
 800e028:	f001 ff04 	bl	800fe34 <_calloc_r>
 800e02c:	b160      	cbz	r0, 800e048 <_Balloc+0x64>
 800e02e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e032:	e00e      	b.n	800e052 <_Balloc+0x6e>
 800e034:	2221      	movs	r2, #33	@ 0x21
 800e036:	2104      	movs	r1, #4
 800e038:	4620      	mov	r0, r4
 800e03a:	f001 fefb 	bl	800fe34 <_calloc_r>
 800e03e:	69e3      	ldr	r3, [r4, #28]
 800e040:	60f0      	str	r0, [r6, #12]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1e4      	bne.n	800e012 <_Balloc+0x2e>
 800e048:	2000      	movs	r0, #0
 800e04a:	bd70      	pop	{r4, r5, r6, pc}
 800e04c:	6802      	ldr	r2, [r0, #0]
 800e04e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e052:	2300      	movs	r3, #0
 800e054:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e058:	e7f7      	b.n	800e04a <_Balloc+0x66>
 800e05a:	bf00      	nop
 800e05c:	08010a4a 	.word	0x08010a4a
 800e060:	08010aca 	.word	0x08010aca

0800e064 <_Bfree>:
 800e064:	b570      	push	{r4, r5, r6, lr}
 800e066:	69c6      	ldr	r6, [r0, #28]
 800e068:	4605      	mov	r5, r0
 800e06a:	460c      	mov	r4, r1
 800e06c:	b976      	cbnz	r6, 800e08c <_Bfree+0x28>
 800e06e:	2010      	movs	r0, #16
 800e070:	f7ff ff02 	bl	800de78 <malloc>
 800e074:	4602      	mov	r2, r0
 800e076:	61e8      	str	r0, [r5, #28]
 800e078:	b920      	cbnz	r0, 800e084 <_Bfree+0x20>
 800e07a:	4b09      	ldr	r3, [pc, #36]	@ (800e0a0 <_Bfree+0x3c>)
 800e07c:	4809      	ldr	r0, [pc, #36]	@ (800e0a4 <_Bfree+0x40>)
 800e07e:	218f      	movs	r1, #143	@ 0x8f
 800e080:	f001 feba 	bl	800fdf8 <__assert_func>
 800e084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e088:	6006      	str	r6, [r0, #0]
 800e08a:	60c6      	str	r6, [r0, #12]
 800e08c:	b13c      	cbz	r4, 800e09e <_Bfree+0x3a>
 800e08e:	69eb      	ldr	r3, [r5, #28]
 800e090:	6862      	ldr	r2, [r4, #4]
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e098:	6021      	str	r1, [r4, #0]
 800e09a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e09e:	bd70      	pop	{r4, r5, r6, pc}
 800e0a0:	08010a4a 	.word	0x08010a4a
 800e0a4:	08010aca 	.word	0x08010aca

0800e0a8 <__multadd>:
 800e0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ac:	690d      	ldr	r5, [r1, #16]
 800e0ae:	4607      	mov	r7, r0
 800e0b0:	460c      	mov	r4, r1
 800e0b2:	461e      	mov	r6, r3
 800e0b4:	f101 0c14 	add.w	ip, r1, #20
 800e0b8:	2000      	movs	r0, #0
 800e0ba:	f8dc 3000 	ldr.w	r3, [ip]
 800e0be:	b299      	uxth	r1, r3
 800e0c0:	fb02 6101 	mla	r1, r2, r1, r6
 800e0c4:	0c1e      	lsrs	r6, r3, #16
 800e0c6:	0c0b      	lsrs	r3, r1, #16
 800e0c8:	fb02 3306 	mla	r3, r2, r6, r3
 800e0cc:	b289      	uxth	r1, r1
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e0d4:	4285      	cmp	r5, r0
 800e0d6:	f84c 1b04 	str.w	r1, [ip], #4
 800e0da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e0de:	dcec      	bgt.n	800e0ba <__multadd+0x12>
 800e0e0:	b30e      	cbz	r6, 800e126 <__multadd+0x7e>
 800e0e2:	68a3      	ldr	r3, [r4, #8]
 800e0e4:	42ab      	cmp	r3, r5
 800e0e6:	dc19      	bgt.n	800e11c <__multadd+0x74>
 800e0e8:	6861      	ldr	r1, [r4, #4]
 800e0ea:	4638      	mov	r0, r7
 800e0ec:	3101      	adds	r1, #1
 800e0ee:	f7ff ff79 	bl	800dfe4 <_Balloc>
 800e0f2:	4680      	mov	r8, r0
 800e0f4:	b928      	cbnz	r0, 800e102 <__multadd+0x5a>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800e12c <__multadd+0x84>)
 800e0fa:	480d      	ldr	r0, [pc, #52]	@ (800e130 <__multadd+0x88>)
 800e0fc:	21ba      	movs	r1, #186	@ 0xba
 800e0fe:	f001 fe7b 	bl	800fdf8 <__assert_func>
 800e102:	6922      	ldr	r2, [r4, #16]
 800e104:	3202      	adds	r2, #2
 800e106:	f104 010c 	add.w	r1, r4, #12
 800e10a:	0092      	lsls	r2, r2, #2
 800e10c:	300c      	adds	r0, #12
 800e10e:	f001 fe5d 	bl	800fdcc <memcpy>
 800e112:	4621      	mov	r1, r4
 800e114:	4638      	mov	r0, r7
 800e116:	f7ff ffa5 	bl	800e064 <_Bfree>
 800e11a:	4644      	mov	r4, r8
 800e11c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e120:	3501      	adds	r5, #1
 800e122:	615e      	str	r6, [r3, #20]
 800e124:	6125      	str	r5, [r4, #16]
 800e126:	4620      	mov	r0, r4
 800e128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e12c:	08010ab9 	.word	0x08010ab9
 800e130:	08010aca 	.word	0x08010aca

0800e134 <__s2b>:
 800e134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e138:	460c      	mov	r4, r1
 800e13a:	4615      	mov	r5, r2
 800e13c:	461f      	mov	r7, r3
 800e13e:	2209      	movs	r2, #9
 800e140:	3308      	adds	r3, #8
 800e142:	4606      	mov	r6, r0
 800e144:	fb93 f3f2 	sdiv	r3, r3, r2
 800e148:	2100      	movs	r1, #0
 800e14a:	2201      	movs	r2, #1
 800e14c:	429a      	cmp	r2, r3
 800e14e:	db09      	blt.n	800e164 <__s2b+0x30>
 800e150:	4630      	mov	r0, r6
 800e152:	f7ff ff47 	bl	800dfe4 <_Balloc>
 800e156:	b940      	cbnz	r0, 800e16a <__s2b+0x36>
 800e158:	4602      	mov	r2, r0
 800e15a:	4b19      	ldr	r3, [pc, #100]	@ (800e1c0 <__s2b+0x8c>)
 800e15c:	4819      	ldr	r0, [pc, #100]	@ (800e1c4 <__s2b+0x90>)
 800e15e:	21d3      	movs	r1, #211	@ 0xd3
 800e160:	f001 fe4a 	bl	800fdf8 <__assert_func>
 800e164:	0052      	lsls	r2, r2, #1
 800e166:	3101      	adds	r1, #1
 800e168:	e7f0      	b.n	800e14c <__s2b+0x18>
 800e16a:	9b08      	ldr	r3, [sp, #32]
 800e16c:	6143      	str	r3, [r0, #20]
 800e16e:	2d09      	cmp	r5, #9
 800e170:	f04f 0301 	mov.w	r3, #1
 800e174:	6103      	str	r3, [r0, #16]
 800e176:	dd16      	ble.n	800e1a6 <__s2b+0x72>
 800e178:	f104 0909 	add.w	r9, r4, #9
 800e17c:	46c8      	mov	r8, r9
 800e17e:	442c      	add	r4, r5
 800e180:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e184:	4601      	mov	r1, r0
 800e186:	3b30      	subs	r3, #48	@ 0x30
 800e188:	220a      	movs	r2, #10
 800e18a:	4630      	mov	r0, r6
 800e18c:	f7ff ff8c 	bl	800e0a8 <__multadd>
 800e190:	45a0      	cmp	r8, r4
 800e192:	d1f5      	bne.n	800e180 <__s2b+0x4c>
 800e194:	f1a5 0408 	sub.w	r4, r5, #8
 800e198:	444c      	add	r4, r9
 800e19a:	1b2d      	subs	r5, r5, r4
 800e19c:	1963      	adds	r3, r4, r5
 800e19e:	42bb      	cmp	r3, r7
 800e1a0:	db04      	blt.n	800e1ac <__s2b+0x78>
 800e1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1a6:	340a      	adds	r4, #10
 800e1a8:	2509      	movs	r5, #9
 800e1aa:	e7f6      	b.n	800e19a <__s2b+0x66>
 800e1ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1b0:	4601      	mov	r1, r0
 800e1b2:	3b30      	subs	r3, #48	@ 0x30
 800e1b4:	220a      	movs	r2, #10
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	f7ff ff76 	bl	800e0a8 <__multadd>
 800e1bc:	e7ee      	b.n	800e19c <__s2b+0x68>
 800e1be:	bf00      	nop
 800e1c0:	08010ab9 	.word	0x08010ab9
 800e1c4:	08010aca 	.word	0x08010aca

0800e1c8 <__hi0bits>:
 800e1c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	bf36      	itet	cc
 800e1d0:	0403      	lslcc	r3, r0, #16
 800e1d2:	2000      	movcs	r0, #0
 800e1d4:	2010      	movcc	r0, #16
 800e1d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e1da:	bf3c      	itt	cc
 800e1dc:	021b      	lslcc	r3, r3, #8
 800e1de:	3008      	addcc	r0, #8
 800e1e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1e4:	bf3c      	itt	cc
 800e1e6:	011b      	lslcc	r3, r3, #4
 800e1e8:	3004      	addcc	r0, #4
 800e1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1ee:	bf3c      	itt	cc
 800e1f0:	009b      	lslcc	r3, r3, #2
 800e1f2:	3002      	addcc	r0, #2
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	db05      	blt.n	800e204 <__hi0bits+0x3c>
 800e1f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e1fc:	f100 0001 	add.w	r0, r0, #1
 800e200:	bf08      	it	eq
 800e202:	2020      	moveq	r0, #32
 800e204:	4770      	bx	lr

0800e206 <__lo0bits>:
 800e206:	6803      	ldr	r3, [r0, #0]
 800e208:	4602      	mov	r2, r0
 800e20a:	f013 0007 	ands.w	r0, r3, #7
 800e20e:	d00b      	beq.n	800e228 <__lo0bits+0x22>
 800e210:	07d9      	lsls	r1, r3, #31
 800e212:	d421      	bmi.n	800e258 <__lo0bits+0x52>
 800e214:	0798      	lsls	r0, r3, #30
 800e216:	bf49      	itett	mi
 800e218:	085b      	lsrmi	r3, r3, #1
 800e21a:	089b      	lsrpl	r3, r3, #2
 800e21c:	2001      	movmi	r0, #1
 800e21e:	6013      	strmi	r3, [r2, #0]
 800e220:	bf5c      	itt	pl
 800e222:	6013      	strpl	r3, [r2, #0]
 800e224:	2002      	movpl	r0, #2
 800e226:	4770      	bx	lr
 800e228:	b299      	uxth	r1, r3
 800e22a:	b909      	cbnz	r1, 800e230 <__lo0bits+0x2a>
 800e22c:	0c1b      	lsrs	r3, r3, #16
 800e22e:	2010      	movs	r0, #16
 800e230:	b2d9      	uxtb	r1, r3
 800e232:	b909      	cbnz	r1, 800e238 <__lo0bits+0x32>
 800e234:	3008      	adds	r0, #8
 800e236:	0a1b      	lsrs	r3, r3, #8
 800e238:	0719      	lsls	r1, r3, #28
 800e23a:	bf04      	itt	eq
 800e23c:	091b      	lsreq	r3, r3, #4
 800e23e:	3004      	addeq	r0, #4
 800e240:	0799      	lsls	r1, r3, #30
 800e242:	bf04      	itt	eq
 800e244:	089b      	lsreq	r3, r3, #2
 800e246:	3002      	addeq	r0, #2
 800e248:	07d9      	lsls	r1, r3, #31
 800e24a:	d403      	bmi.n	800e254 <__lo0bits+0x4e>
 800e24c:	085b      	lsrs	r3, r3, #1
 800e24e:	f100 0001 	add.w	r0, r0, #1
 800e252:	d003      	beq.n	800e25c <__lo0bits+0x56>
 800e254:	6013      	str	r3, [r2, #0]
 800e256:	4770      	bx	lr
 800e258:	2000      	movs	r0, #0
 800e25a:	4770      	bx	lr
 800e25c:	2020      	movs	r0, #32
 800e25e:	4770      	bx	lr

0800e260 <__i2b>:
 800e260:	b510      	push	{r4, lr}
 800e262:	460c      	mov	r4, r1
 800e264:	2101      	movs	r1, #1
 800e266:	f7ff febd 	bl	800dfe4 <_Balloc>
 800e26a:	4602      	mov	r2, r0
 800e26c:	b928      	cbnz	r0, 800e27a <__i2b+0x1a>
 800e26e:	4b05      	ldr	r3, [pc, #20]	@ (800e284 <__i2b+0x24>)
 800e270:	4805      	ldr	r0, [pc, #20]	@ (800e288 <__i2b+0x28>)
 800e272:	f240 1145 	movw	r1, #325	@ 0x145
 800e276:	f001 fdbf 	bl	800fdf8 <__assert_func>
 800e27a:	2301      	movs	r3, #1
 800e27c:	6144      	str	r4, [r0, #20]
 800e27e:	6103      	str	r3, [r0, #16]
 800e280:	bd10      	pop	{r4, pc}
 800e282:	bf00      	nop
 800e284:	08010ab9 	.word	0x08010ab9
 800e288:	08010aca 	.word	0x08010aca

0800e28c <__multiply>:
 800e28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e290:	4617      	mov	r7, r2
 800e292:	690a      	ldr	r2, [r1, #16]
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	429a      	cmp	r2, r3
 800e298:	bfa8      	it	ge
 800e29a:	463b      	movge	r3, r7
 800e29c:	4689      	mov	r9, r1
 800e29e:	bfa4      	itt	ge
 800e2a0:	460f      	movge	r7, r1
 800e2a2:	4699      	movge	r9, r3
 800e2a4:	693d      	ldr	r5, [r7, #16]
 800e2a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	6879      	ldr	r1, [r7, #4]
 800e2ae:	eb05 060a 	add.w	r6, r5, sl
 800e2b2:	42b3      	cmp	r3, r6
 800e2b4:	b085      	sub	sp, #20
 800e2b6:	bfb8      	it	lt
 800e2b8:	3101      	addlt	r1, #1
 800e2ba:	f7ff fe93 	bl	800dfe4 <_Balloc>
 800e2be:	b930      	cbnz	r0, 800e2ce <__multiply+0x42>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	4b41      	ldr	r3, [pc, #260]	@ (800e3c8 <__multiply+0x13c>)
 800e2c4:	4841      	ldr	r0, [pc, #260]	@ (800e3cc <__multiply+0x140>)
 800e2c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e2ca:	f001 fd95 	bl	800fdf8 <__assert_func>
 800e2ce:	f100 0414 	add.w	r4, r0, #20
 800e2d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e2d6:	4623      	mov	r3, r4
 800e2d8:	2200      	movs	r2, #0
 800e2da:	4573      	cmp	r3, lr
 800e2dc:	d320      	bcc.n	800e320 <__multiply+0x94>
 800e2de:	f107 0814 	add.w	r8, r7, #20
 800e2e2:	f109 0114 	add.w	r1, r9, #20
 800e2e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e2ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e2ee:	9302      	str	r3, [sp, #8]
 800e2f0:	1beb      	subs	r3, r5, r7
 800e2f2:	3b15      	subs	r3, #21
 800e2f4:	f023 0303 	bic.w	r3, r3, #3
 800e2f8:	3304      	adds	r3, #4
 800e2fa:	3715      	adds	r7, #21
 800e2fc:	42bd      	cmp	r5, r7
 800e2fe:	bf38      	it	cc
 800e300:	2304      	movcc	r3, #4
 800e302:	9301      	str	r3, [sp, #4]
 800e304:	9b02      	ldr	r3, [sp, #8]
 800e306:	9103      	str	r1, [sp, #12]
 800e308:	428b      	cmp	r3, r1
 800e30a:	d80c      	bhi.n	800e326 <__multiply+0x9a>
 800e30c:	2e00      	cmp	r6, #0
 800e30e:	dd03      	ble.n	800e318 <__multiply+0x8c>
 800e310:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e314:	2b00      	cmp	r3, #0
 800e316:	d055      	beq.n	800e3c4 <__multiply+0x138>
 800e318:	6106      	str	r6, [r0, #16]
 800e31a:	b005      	add	sp, #20
 800e31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e320:	f843 2b04 	str.w	r2, [r3], #4
 800e324:	e7d9      	b.n	800e2da <__multiply+0x4e>
 800e326:	f8b1 a000 	ldrh.w	sl, [r1]
 800e32a:	f1ba 0f00 	cmp.w	sl, #0
 800e32e:	d01f      	beq.n	800e370 <__multiply+0xe4>
 800e330:	46c4      	mov	ip, r8
 800e332:	46a1      	mov	r9, r4
 800e334:	2700      	movs	r7, #0
 800e336:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e33a:	f8d9 3000 	ldr.w	r3, [r9]
 800e33e:	fa1f fb82 	uxth.w	fp, r2
 800e342:	b29b      	uxth	r3, r3
 800e344:	fb0a 330b 	mla	r3, sl, fp, r3
 800e348:	443b      	add	r3, r7
 800e34a:	f8d9 7000 	ldr.w	r7, [r9]
 800e34e:	0c12      	lsrs	r2, r2, #16
 800e350:	0c3f      	lsrs	r7, r7, #16
 800e352:	fb0a 7202 	mla	r2, sl, r2, r7
 800e356:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e360:	4565      	cmp	r5, ip
 800e362:	f849 3b04 	str.w	r3, [r9], #4
 800e366:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e36a:	d8e4      	bhi.n	800e336 <__multiply+0xaa>
 800e36c:	9b01      	ldr	r3, [sp, #4]
 800e36e:	50e7      	str	r7, [r4, r3]
 800e370:	9b03      	ldr	r3, [sp, #12]
 800e372:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e376:	3104      	adds	r1, #4
 800e378:	f1b9 0f00 	cmp.w	r9, #0
 800e37c:	d020      	beq.n	800e3c0 <__multiply+0x134>
 800e37e:	6823      	ldr	r3, [r4, #0]
 800e380:	4647      	mov	r7, r8
 800e382:	46a4      	mov	ip, r4
 800e384:	f04f 0a00 	mov.w	sl, #0
 800e388:	f8b7 b000 	ldrh.w	fp, [r7]
 800e38c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e390:	fb09 220b 	mla	r2, r9, fp, r2
 800e394:	4452      	add	r2, sl
 800e396:	b29b      	uxth	r3, r3
 800e398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e39c:	f84c 3b04 	str.w	r3, [ip], #4
 800e3a0:	f857 3b04 	ldr.w	r3, [r7], #4
 800e3a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3a8:	f8bc 3000 	ldrh.w	r3, [ip]
 800e3ac:	fb09 330a 	mla	r3, r9, sl, r3
 800e3b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e3b4:	42bd      	cmp	r5, r7
 800e3b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3ba:	d8e5      	bhi.n	800e388 <__multiply+0xfc>
 800e3bc:	9a01      	ldr	r2, [sp, #4]
 800e3be:	50a3      	str	r3, [r4, r2]
 800e3c0:	3404      	adds	r4, #4
 800e3c2:	e79f      	b.n	800e304 <__multiply+0x78>
 800e3c4:	3e01      	subs	r6, #1
 800e3c6:	e7a1      	b.n	800e30c <__multiply+0x80>
 800e3c8:	08010ab9 	.word	0x08010ab9
 800e3cc:	08010aca 	.word	0x08010aca

0800e3d0 <__pow5mult>:
 800e3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3d4:	4615      	mov	r5, r2
 800e3d6:	f012 0203 	ands.w	r2, r2, #3
 800e3da:	4607      	mov	r7, r0
 800e3dc:	460e      	mov	r6, r1
 800e3de:	d007      	beq.n	800e3f0 <__pow5mult+0x20>
 800e3e0:	4c25      	ldr	r4, [pc, #148]	@ (800e478 <__pow5mult+0xa8>)
 800e3e2:	3a01      	subs	r2, #1
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e3ea:	f7ff fe5d 	bl	800e0a8 <__multadd>
 800e3ee:	4606      	mov	r6, r0
 800e3f0:	10ad      	asrs	r5, r5, #2
 800e3f2:	d03d      	beq.n	800e470 <__pow5mult+0xa0>
 800e3f4:	69fc      	ldr	r4, [r7, #28]
 800e3f6:	b97c      	cbnz	r4, 800e418 <__pow5mult+0x48>
 800e3f8:	2010      	movs	r0, #16
 800e3fa:	f7ff fd3d 	bl	800de78 <malloc>
 800e3fe:	4602      	mov	r2, r0
 800e400:	61f8      	str	r0, [r7, #28]
 800e402:	b928      	cbnz	r0, 800e410 <__pow5mult+0x40>
 800e404:	4b1d      	ldr	r3, [pc, #116]	@ (800e47c <__pow5mult+0xac>)
 800e406:	481e      	ldr	r0, [pc, #120]	@ (800e480 <__pow5mult+0xb0>)
 800e408:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e40c:	f001 fcf4 	bl	800fdf8 <__assert_func>
 800e410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e414:	6004      	str	r4, [r0, #0]
 800e416:	60c4      	str	r4, [r0, #12]
 800e418:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e41c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e420:	b94c      	cbnz	r4, 800e436 <__pow5mult+0x66>
 800e422:	f240 2171 	movw	r1, #625	@ 0x271
 800e426:	4638      	mov	r0, r7
 800e428:	f7ff ff1a 	bl	800e260 <__i2b>
 800e42c:	2300      	movs	r3, #0
 800e42e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e432:	4604      	mov	r4, r0
 800e434:	6003      	str	r3, [r0, #0]
 800e436:	f04f 0900 	mov.w	r9, #0
 800e43a:	07eb      	lsls	r3, r5, #31
 800e43c:	d50a      	bpl.n	800e454 <__pow5mult+0x84>
 800e43e:	4631      	mov	r1, r6
 800e440:	4622      	mov	r2, r4
 800e442:	4638      	mov	r0, r7
 800e444:	f7ff ff22 	bl	800e28c <__multiply>
 800e448:	4631      	mov	r1, r6
 800e44a:	4680      	mov	r8, r0
 800e44c:	4638      	mov	r0, r7
 800e44e:	f7ff fe09 	bl	800e064 <_Bfree>
 800e452:	4646      	mov	r6, r8
 800e454:	106d      	asrs	r5, r5, #1
 800e456:	d00b      	beq.n	800e470 <__pow5mult+0xa0>
 800e458:	6820      	ldr	r0, [r4, #0]
 800e45a:	b938      	cbnz	r0, 800e46c <__pow5mult+0x9c>
 800e45c:	4622      	mov	r2, r4
 800e45e:	4621      	mov	r1, r4
 800e460:	4638      	mov	r0, r7
 800e462:	f7ff ff13 	bl	800e28c <__multiply>
 800e466:	6020      	str	r0, [r4, #0]
 800e468:	f8c0 9000 	str.w	r9, [r0]
 800e46c:	4604      	mov	r4, r0
 800e46e:	e7e4      	b.n	800e43a <__pow5mult+0x6a>
 800e470:	4630      	mov	r0, r6
 800e472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e476:	bf00      	nop
 800e478:	08010bdc 	.word	0x08010bdc
 800e47c:	08010a4a 	.word	0x08010a4a
 800e480:	08010aca 	.word	0x08010aca

0800e484 <__lshift>:
 800e484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e488:	460c      	mov	r4, r1
 800e48a:	6849      	ldr	r1, [r1, #4]
 800e48c:	6923      	ldr	r3, [r4, #16]
 800e48e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e492:	68a3      	ldr	r3, [r4, #8]
 800e494:	4607      	mov	r7, r0
 800e496:	4691      	mov	r9, r2
 800e498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e49c:	f108 0601 	add.w	r6, r8, #1
 800e4a0:	42b3      	cmp	r3, r6
 800e4a2:	db0b      	blt.n	800e4bc <__lshift+0x38>
 800e4a4:	4638      	mov	r0, r7
 800e4a6:	f7ff fd9d 	bl	800dfe4 <_Balloc>
 800e4aa:	4605      	mov	r5, r0
 800e4ac:	b948      	cbnz	r0, 800e4c2 <__lshift+0x3e>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	4b28      	ldr	r3, [pc, #160]	@ (800e554 <__lshift+0xd0>)
 800e4b2:	4829      	ldr	r0, [pc, #164]	@ (800e558 <__lshift+0xd4>)
 800e4b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e4b8:	f001 fc9e 	bl	800fdf8 <__assert_func>
 800e4bc:	3101      	adds	r1, #1
 800e4be:	005b      	lsls	r3, r3, #1
 800e4c0:	e7ee      	b.n	800e4a0 <__lshift+0x1c>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	f100 0114 	add.w	r1, r0, #20
 800e4c8:	f100 0210 	add.w	r2, r0, #16
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	4553      	cmp	r3, sl
 800e4d0:	db33      	blt.n	800e53a <__lshift+0xb6>
 800e4d2:	6920      	ldr	r0, [r4, #16]
 800e4d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4d8:	f104 0314 	add.w	r3, r4, #20
 800e4dc:	f019 091f 	ands.w	r9, r9, #31
 800e4e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e4e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e4e8:	d02b      	beq.n	800e542 <__lshift+0xbe>
 800e4ea:	f1c9 0e20 	rsb	lr, r9, #32
 800e4ee:	468a      	mov	sl, r1
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	6818      	ldr	r0, [r3, #0]
 800e4f4:	fa00 f009 	lsl.w	r0, r0, r9
 800e4f8:	4310      	orrs	r0, r2
 800e4fa:	f84a 0b04 	str.w	r0, [sl], #4
 800e4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800e502:	459c      	cmp	ip, r3
 800e504:	fa22 f20e 	lsr.w	r2, r2, lr
 800e508:	d8f3      	bhi.n	800e4f2 <__lshift+0x6e>
 800e50a:	ebac 0304 	sub.w	r3, ip, r4
 800e50e:	3b15      	subs	r3, #21
 800e510:	f023 0303 	bic.w	r3, r3, #3
 800e514:	3304      	adds	r3, #4
 800e516:	f104 0015 	add.w	r0, r4, #21
 800e51a:	4560      	cmp	r0, ip
 800e51c:	bf88      	it	hi
 800e51e:	2304      	movhi	r3, #4
 800e520:	50ca      	str	r2, [r1, r3]
 800e522:	b10a      	cbz	r2, 800e528 <__lshift+0xa4>
 800e524:	f108 0602 	add.w	r6, r8, #2
 800e528:	3e01      	subs	r6, #1
 800e52a:	4638      	mov	r0, r7
 800e52c:	612e      	str	r6, [r5, #16]
 800e52e:	4621      	mov	r1, r4
 800e530:	f7ff fd98 	bl	800e064 <_Bfree>
 800e534:	4628      	mov	r0, r5
 800e536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e53a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e53e:	3301      	adds	r3, #1
 800e540:	e7c5      	b.n	800e4ce <__lshift+0x4a>
 800e542:	3904      	subs	r1, #4
 800e544:	f853 2b04 	ldr.w	r2, [r3], #4
 800e548:	f841 2f04 	str.w	r2, [r1, #4]!
 800e54c:	459c      	cmp	ip, r3
 800e54e:	d8f9      	bhi.n	800e544 <__lshift+0xc0>
 800e550:	e7ea      	b.n	800e528 <__lshift+0xa4>
 800e552:	bf00      	nop
 800e554:	08010ab9 	.word	0x08010ab9
 800e558:	08010aca 	.word	0x08010aca

0800e55c <__mcmp>:
 800e55c:	690a      	ldr	r2, [r1, #16]
 800e55e:	4603      	mov	r3, r0
 800e560:	6900      	ldr	r0, [r0, #16]
 800e562:	1a80      	subs	r0, r0, r2
 800e564:	b530      	push	{r4, r5, lr}
 800e566:	d10e      	bne.n	800e586 <__mcmp+0x2a>
 800e568:	3314      	adds	r3, #20
 800e56a:	3114      	adds	r1, #20
 800e56c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e570:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e574:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e578:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e57c:	4295      	cmp	r5, r2
 800e57e:	d003      	beq.n	800e588 <__mcmp+0x2c>
 800e580:	d205      	bcs.n	800e58e <__mcmp+0x32>
 800e582:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e586:	bd30      	pop	{r4, r5, pc}
 800e588:	42a3      	cmp	r3, r4
 800e58a:	d3f3      	bcc.n	800e574 <__mcmp+0x18>
 800e58c:	e7fb      	b.n	800e586 <__mcmp+0x2a>
 800e58e:	2001      	movs	r0, #1
 800e590:	e7f9      	b.n	800e586 <__mcmp+0x2a>
	...

0800e594 <__mdiff>:
 800e594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e598:	4689      	mov	r9, r1
 800e59a:	4606      	mov	r6, r0
 800e59c:	4611      	mov	r1, r2
 800e59e:	4648      	mov	r0, r9
 800e5a0:	4614      	mov	r4, r2
 800e5a2:	f7ff ffdb 	bl	800e55c <__mcmp>
 800e5a6:	1e05      	subs	r5, r0, #0
 800e5a8:	d112      	bne.n	800e5d0 <__mdiff+0x3c>
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	f7ff fd19 	bl	800dfe4 <_Balloc>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	b928      	cbnz	r0, 800e5c2 <__mdiff+0x2e>
 800e5b6:	4b3f      	ldr	r3, [pc, #252]	@ (800e6b4 <__mdiff+0x120>)
 800e5b8:	f240 2137 	movw	r1, #567	@ 0x237
 800e5bc:	483e      	ldr	r0, [pc, #248]	@ (800e6b8 <__mdiff+0x124>)
 800e5be:	f001 fc1b 	bl	800fdf8 <__assert_func>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	b003      	add	sp, #12
 800e5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d0:	bfbc      	itt	lt
 800e5d2:	464b      	movlt	r3, r9
 800e5d4:	46a1      	movlt	r9, r4
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e5dc:	bfba      	itte	lt
 800e5de:	461c      	movlt	r4, r3
 800e5e0:	2501      	movlt	r5, #1
 800e5e2:	2500      	movge	r5, #0
 800e5e4:	f7ff fcfe 	bl	800dfe4 <_Balloc>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	b918      	cbnz	r0, 800e5f4 <__mdiff+0x60>
 800e5ec:	4b31      	ldr	r3, [pc, #196]	@ (800e6b4 <__mdiff+0x120>)
 800e5ee:	f240 2145 	movw	r1, #581	@ 0x245
 800e5f2:	e7e3      	b.n	800e5bc <__mdiff+0x28>
 800e5f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e5f8:	6926      	ldr	r6, [r4, #16]
 800e5fa:	60c5      	str	r5, [r0, #12]
 800e5fc:	f109 0310 	add.w	r3, r9, #16
 800e600:	f109 0514 	add.w	r5, r9, #20
 800e604:	f104 0e14 	add.w	lr, r4, #20
 800e608:	f100 0b14 	add.w	fp, r0, #20
 800e60c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e610:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e614:	9301      	str	r3, [sp, #4]
 800e616:	46d9      	mov	r9, fp
 800e618:	f04f 0c00 	mov.w	ip, #0
 800e61c:	9b01      	ldr	r3, [sp, #4]
 800e61e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e622:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e626:	9301      	str	r3, [sp, #4]
 800e628:	fa1f f38a 	uxth.w	r3, sl
 800e62c:	4619      	mov	r1, r3
 800e62e:	b283      	uxth	r3, r0
 800e630:	1acb      	subs	r3, r1, r3
 800e632:	0c00      	lsrs	r0, r0, #16
 800e634:	4463      	add	r3, ip
 800e636:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e63a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e63e:	b29b      	uxth	r3, r3
 800e640:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e644:	4576      	cmp	r6, lr
 800e646:	f849 3b04 	str.w	r3, [r9], #4
 800e64a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e64e:	d8e5      	bhi.n	800e61c <__mdiff+0x88>
 800e650:	1b33      	subs	r3, r6, r4
 800e652:	3b15      	subs	r3, #21
 800e654:	f023 0303 	bic.w	r3, r3, #3
 800e658:	3415      	adds	r4, #21
 800e65a:	3304      	adds	r3, #4
 800e65c:	42a6      	cmp	r6, r4
 800e65e:	bf38      	it	cc
 800e660:	2304      	movcc	r3, #4
 800e662:	441d      	add	r5, r3
 800e664:	445b      	add	r3, fp
 800e666:	461e      	mov	r6, r3
 800e668:	462c      	mov	r4, r5
 800e66a:	4544      	cmp	r4, r8
 800e66c:	d30e      	bcc.n	800e68c <__mdiff+0xf8>
 800e66e:	f108 0103 	add.w	r1, r8, #3
 800e672:	1b49      	subs	r1, r1, r5
 800e674:	f021 0103 	bic.w	r1, r1, #3
 800e678:	3d03      	subs	r5, #3
 800e67a:	45a8      	cmp	r8, r5
 800e67c:	bf38      	it	cc
 800e67e:	2100      	movcc	r1, #0
 800e680:	440b      	add	r3, r1
 800e682:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e686:	b191      	cbz	r1, 800e6ae <__mdiff+0x11a>
 800e688:	6117      	str	r7, [r2, #16]
 800e68a:	e79d      	b.n	800e5c8 <__mdiff+0x34>
 800e68c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e690:	46e6      	mov	lr, ip
 800e692:	0c08      	lsrs	r0, r1, #16
 800e694:	fa1c fc81 	uxtah	ip, ip, r1
 800e698:	4471      	add	r1, lr
 800e69a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e69e:	b289      	uxth	r1, r1
 800e6a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e6a4:	f846 1b04 	str.w	r1, [r6], #4
 800e6a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6ac:	e7dd      	b.n	800e66a <__mdiff+0xd6>
 800e6ae:	3f01      	subs	r7, #1
 800e6b0:	e7e7      	b.n	800e682 <__mdiff+0xee>
 800e6b2:	bf00      	nop
 800e6b4:	08010ab9 	.word	0x08010ab9
 800e6b8:	08010aca 	.word	0x08010aca

0800e6bc <__ulp>:
 800e6bc:	b082      	sub	sp, #8
 800e6be:	ed8d 0b00 	vstr	d0, [sp]
 800e6c2:	9a01      	ldr	r2, [sp, #4]
 800e6c4:	4b0f      	ldr	r3, [pc, #60]	@ (800e704 <__ulp+0x48>)
 800e6c6:	4013      	ands	r3, r2
 800e6c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	dc08      	bgt.n	800e6e2 <__ulp+0x26>
 800e6d0:	425b      	negs	r3, r3
 800e6d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e6d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e6da:	da04      	bge.n	800e6e6 <__ulp+0x2a>
 800e6dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e6e0:	4113      	asrs	r3, r2
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	e008      	b.n	800e6f8 <__ulp+0x3c>
 800e6e6:	f1a2 0314 	sub.w	r3, r2, #20
 800e6ea:	2b1e      	cmp	r3, #30
 800e6ec:	bfda      	itte	le
 800e6ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e6f2:	40da      	lsrle	r2, r3
 800e6f4:	2201      	movgt	r2, #1
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	4610      	mov	r0, r2
 800e6fc:	ec41 0b10 	vmov	d0, r0, r1
 800e700:	b002      	add	sp, #8
 800e702:	4770      	bx	lr
 800e704:	7ff00000 	.word	0x7ff00000

0800e708 <__b2d>:
 800e708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e70c:	6906      	ldr	r6, [r0, #16]
 800e70e:	f100 0814 	add.w	r8, r0, #20
 800e712:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e716:	1f37      	subs	r7, r6, #4
 800e718:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e71c:	4610      	mov	r0, r2
 800e71e:	f7ff fd53 	bl	800e1c8 <__hi0bits>
 800e722:	f1c0 0320 	rsb	r3, r0, #32
 800e726:	280a      	cmp	r0, #10
 800e728:	600b      	str	r3, [r1, #0]
 800e72a:	491b      	ldr	r1, [pc, #108]	@ (800e798 <__b2d+0x90>)
 800e72c:	dc15      	bgt.n	800e75a <__b2d+0x52>
 800e72e:	f1c0 0c0b 	rsb	ip, r0, #11
 800e732:	fa22 f30c 	lsr.w	r3, r2, ip
 800e736:	45b8      	cmp	r8, r7
 800e738:	ea43 0501 	orr.w	r5, r3, r1
 800e73c:	bf34      	ite	cc
 800e73e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e742:	2300      	movcs	r3, #0
 800e744:	3015      	adds	r0, #21
 800e746:	fa02 f000 	lsl.w	r0, r2, r0
 800e74a:	fa23 f30c 	lsr.w	r3, r3, ip
 800e74e:	4303      	orrs	r3, r0
 800e750:	461c      	mov	r4, r3
 800e752:	ec45 4b10 	vmov	d0, r4, r5
 800e756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e75a:	45b8      	cmp	r8, r7
 800e75c:	bf3a      	itte	cc
 800e75e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e762:	f1a6 0708 	subcc.w	r7, r6, #8
 800e766:	2300      	movcs	r3, #0
 800e768:	380b      	subs	r0, #11
 800e76a:	d012      	beq.n	800e792 <__b2d+0x8a>
 800e76c:	f1c0 0120 	rsb	r1, r0, #32
 800e770:	fa23 f401 	lsr.w	r4, r3, r1
 800e774:	4082      	lsls	r2, r0
 800e776:	4322      	orrs	r2, r4
 800e778:	4547      	cmp	r7, r8
 800e77a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e77e:	bf8c      	ite	hi
 800e780:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e784:	2200      	movls	r2, #0
 800e786:	4083      	lsls	r3, r0
 800e788:	40ca      	lsrs	r2, r1
 800e78a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e78e:	4313      	orrs	r3, r2
 800e790:	e7de      	b.n	800e750 <__b2d+0x48>
 800e792:	ea42 0501 	orr.w	r5, r2, r1
 800e796:	e7db      	b.n	800e750 <__b2d+0x48>
 800e798:	3ff00000 	.word	0x3ff00000

0800e79c <__d2b>:
 800e79c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7a0:	460f      	mov	r7, r1
 800e7a2:	2101      	movs	r1, #1
 800e7a4:	ec59 8b10 	vmov	r8, r9, d0
 800e7a8:	4616      	mov	r6, r2
 800e7aa:	f7ff fc1b 	bl	800dfe4 <_Balloc>
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	b930      	cbnz	r0, 800e7c0 <__d2b+0x24>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	4b23      	ldr	r3, [pc, #140]	@ (800e844 <__d2b+0xa8>)
 800e7b6:	4824      	ldr	r0, [pc, #144]	@ (800e848 <__d2b+0xac>)
 800e7b8:	f240 310f 	movw	r1, #783	@ 0x30f
 800e7bc:	f001 fb1c 	bl	800fdf8 <__assert_func>
 800e7c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e7c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7c8:	b10d      	cbz	r5, 800e7ce <__d2b+0x32>
 800e7ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e7ce:	9301      	str	r3, [sp, #4]
 800e7d0:	f1b8 0300 	subs.w	r3, r8, #0
 800e7d4:	d023      	beq.n	800e81e <__d2b+0x82>
 800e7d6:	4668      	mov	r0, sp
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	f7ff fd14 	bl	800e206 <__lo0bits>
 800e7de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e7e2:	b1d0      	cbz	r0, 800e81a <__d2b+0x7e>
 800e7e4:	f1c0 0320 	rsb	r3, r0, #32
 800e7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ec:	430b      	orrs	r3, r1
 800e7ee:	40c2      	lsrs	r2, r0
 800e7f0:	6163      	str	r3, [r4, #20]
 800e7f2:	9201      	str	r2, [sp, #4]
 800e7f4:	9b01      	ldr	r3, [sp, #4]
 800e7f6:	61a3      	str	r3, [r4, #24]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	bf0c      	ite	eq
 800e7fc:	2201      	moveq	r2, #1
 800e7fe:	2202      	movne	r2, #2
 800e800:	6122      	str	r2, [r4, #16]
 800e802:	b1a5      	cbz	r5, 800e82e <__d2b+0x92>
 800e804:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e808:	4405      	add	r5, r0
 800e80a:	603d      	str	r5, [r7, #0]
 800e80c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e810:	6030      	str	r0, [r6, #0]
 800e812:	4620      	mov	r0, r4
 800e814:	b003      	add	sp, #12
 800e816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e81a:	6161      	str	r1, [r4, #20]
 800e81c:	e7ea      	b.n	800e7f4 <__d2b+0x58>
 800e81e:	a801      	add	r0, sp, #4
 800e820:	f7ff fcf1 	bl	800e206 <__lo0bits>
 800e824:	9b01      	ldr	r3, [sp, #4]
 800e826:	6163      	str	r3, [r4, #20]
 800e828:	3020      	adds	r0, #32
 800e82a:	2201      	movs	r2, #1
 800e82c:	e7e8      	b.n	800e800 <__d2b+0x64>
 800e82e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e832:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e836:	6038      	str	r0, [r7, #0]
 800e838:	6918      	ldr	r0, [r3, #16]
 800e83a:	f7ff fcc5 	bl	800e1c8 <__hi0bits>
 800e83e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e842:	e7e5      	b.n	800e810 <__d2b+0x74>
 800e844:	08010ab9 	.word	0x08010ab9
 800e848:	08010aca 	.word	0x08010aca

0800e84c <__ratio>:
 800e84c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e850:	4688      	mov	r8, r1
 800e852:	4669      	mov	r1, sp
 800e854:	4681      	mov	r9, r0
 800e856:	f7ff ff57 	bl	800e708 <__b2d>
 800e85a:	a901      	add	r1, sp, #4
 800e85c:	4640      	mov	r0, r8
 800e85e:	ec55 4b10 	vmov	r4, r5, d0
 800e862:	f7ff ff51 	bl	800e708 <__b2d>
 800e866:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e86a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e86e:	1ad2      	subs	r2, r2, r3
 800e870:	e9dd 3100 	ldrd	r3, r1, [sp]
 800e874:	1a5b      	subs	r3, r3, r1
 800e876:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800e87a:	ec57 6b10 	vmov	r6, r7, d0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	bfd6      	itet	le
 800e882:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e886:	462a      	movgt	r2, r5
 800e888:	463a      	movle	r2, r7
 800e88a:	46ab      	mov	fp, r5
 800e88c:	46a2      	mov	sl, r4
 800e88e:	bfce      	itee	gt
 800e890:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e894:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e898:	ee00 3a90 	vmovle	s1, r3
 800e89c:	ec4b ab17 	vmov	d7, sl, fp
 800e8a0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e8a4:	b003      	add	sp, #12
 800e8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e8aa <__copybits>:
 800e8aa:	3901      	subs	r1, #1
 800e8ac:	b570      	push	{r4, r5, r6, lr}
 800e8ae:	1149      	asrs	r1, r1, #5
 800e8b0:	6914      	ldr	r4, [r2, #16]
 800e8b2:	3101      	adds	r1, #1
 800e8b4:	f102 0314 	add.w	r3, r2, #20
 800e8b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e8bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e8c0:	1f05      	subs	r5, r0, #4
 800e8c2:	42a3      	cmp	r3, r4
 800e8c4:	d30c      	bcc.n	800e8e0 <__copybits+0x36>
 800e8c6:	1aa3      	subs	r3, r4, r2
 800e8c8:	3b11      	subs	r3, #17
 800e8ca:	f023 0303 	bic.w	r3, r3, #3
 800e8ce:	3211      	adds	r2, #17
 800e8d0:	42a2      	cmp	r2, r4
 800e8d2:	bf88      	it	hi
 800e8d4:	2300      	movhi	r3, #0
 800e8d6:	4418      	add	r0, r3
 800e8d8:	2300      	movs	r3, #0
 800e8da:	4288      	cmp	r0, r1
 800e8dc:	d305      	bcc.n	800e8ea <__copybits+0x40>
 800e8de:	bd70      	pop	{r4, r5, r6, pc}
 800e8e0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e8e4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e8e8:	e7eb      	b.n	800e8c2 <__copybits+0x18>
 800e8ea:	f840 3b04 	str.w	r3, [r0], #4
 800e8ee:	e7f4      	b.n	800e8da <__copybits+0x30>

0800e8f0 <__any_on>:
 800e8f0:	f100 0214 	add.w	r2, r0, #20
 800e8f4:	6900      	ldr	r0, [r0, #16]
 800e8f6:	114b      	asrs	r3, r1, #5
 800e8f8:	4298      	cmp	r0, r3
 800e8fa:	b510      	push	{r4, lr}
 800e8fc:	db11      	blt.n	800e922 <__any_on+0x32>
 800e8fe:	dd0a      	ble.n	800e916 <__any_on+0x26>
 800e900:	f011 011f 	ands.w	r1, r1, #31
 800e904:	d007      	beq.n	800e916 <__any_on+0x26>
 800e906:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e90a:	fa24 f001 	lsr.w	r0, r4, r1
 800e90e:	fa00 f101 	lsl.w	r1, r0, r1
 800e912:	428c      	cmp	r4, r1
 800e914:	d10b      	bne.n	800e92e <__any_on+0x3e>
 800e916:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d803      	bhi.n	800e926 <__any_on+0x36>
 800e91e:	2000      	movs	r0, #0
 800e920:	bd10      	pop	{r4, pc}
 800e922:	4603      	mov	r3, r0
 800e924:	e7f7      	b.n	800e916 <__any_on+0x26>
 800e926:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e92a:	2900      	cmp	r1, #0
 800e92c:	d0f5      	beq.n	800e91a <__any_on+0x2a>
 800e92e:	2001      	movs	r0, #1
 800e930:	e7f6      	b.n	800e920 <__any_on+0x30>

0800e932 <sulp>:
 800e932:	b570      	push	{r4, r5, r6, lr}
 800e934:	4604      	mov	r4, r0
 800e936:	460d      	mov	r5, r1
 800e938:	4616      	mov	r6, r2
 800e93a:	ec45 4b10 	vmov	d0, r4, r5
 800e93e:	f7ff febd 	bl	800e6bc <__ulp>
 800e942:	b17e      	cbz	r6, 800e964 <sulp+0x32>
 800e944:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e948:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	dd09      	ble.n	800e964 <sulp+0x32>
 800e950:	051b      	lsls	r3, r3, #20
 800e952:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e956:	2000      	movs	r0, #0
 800e958:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e95c:	ec41 0b17 	vmov	d7, r0, r1
 800e960:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e964:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e968 <_strtod_l>:
 800e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96c:	ed2d 8b0a 	vpush	{d8-d12}
 800e970:	b097      	sub	sp, #92	@ 0x5c
 800e972:	4688      	mov	r8, r1
 800e974:	920e      	str	r2, [sp, #56]	@ 0x38
 800e976:	2200      	movs	r2, #0
 800e978:	9212      	str	r2, [sp, #72]	@ 0x48
 800e97a:	9005      	str	r0, [sp, #20]
 800e97c:	f04f 0a00 	mov.w	sl, #0
 800e980:	f04f 0b00 	mov.w	fp, #0
 800e984:	460a      	mov	r2, r1
 800e986:	9211      	str	r2, [sp, #68]	@ 0x44
 800e988:	7811      	ldrb	r1, [r2, #0]
 800e98a:	292b      	cmp	r1, #43	@ 0x2b
 800e98c:	d04c      	beq.n	800ea28 <_strtod_l+0xc0>
 800e98e:	d839      	bhi.n	800ea04 <_strtod_l+0x9c>
 800e990:	290d      	cmp	r1, #13
 800e992:	d833      	bhi.n	800e9fc <_strtod_l+0x94>
 800e994:	2908      	cmp	r1, #8
 800e996:	d833      	bhi.n	800ea00 <_strtod_l+0x98>
 800e998:	2900      	cmp	r1, #0
 800e99a:	d03c      	beq.n	800ea16 <_strtod_l+0xae>
 800e99c:	2200      	movs	r2, #0
 800e99e:	9208      	str	r2, [sp, #32]
 800e9a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e9a2:	782a      	ldrb	r2, [r5, #0]
 800e9a4:	2a30      	cmp	r2, #48	@ 0x30
 800e9a6:	f040 80b7 	bne.w	800eb18 <_strtod_l+0x1b0>
 800e9aa:	786a      	ldrb	r2, [r5, #1]
 800e9ac:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e9b0:	2a58      	cmp	r2, #88	@ 0x58
 800e9b2:	d170      	bne.n	800ea96 <_strtod_l+0x12e>
 800e9b4:	9302      	str	r3, [sp, #8]
 800e9b6:	9b08      	ldr	r3, [sp, #32]
 800e9b8:	9301      	str	r3, [sp, #4]
 800e9ba:	ab12      	add	r3, sp, #72	@ 0x48
 800e9bc:	9300      	str	r3, [sp, #0]
 800e9be:	4a90      	ldr	r2, [pc, #576]	@ (800ec00 <_strtod_l+0x298>)
 800e9c0:	9805      	ldr	r0, [sp, #20]
 800e9c2:	ab13      	add	r3, sp, #76	@ 0x4c
 800e9c4:	a911      	add	r1, sp, #68	@ 0x44
 800e9c6:	f001 fab1 	bl	800ff2c <__gethex>
 800e9ca:	f010 060f 	ands.w	r6, r0, #15
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	d005      	beq.n	800e9de <_strtod_l+0x76>
 800e9d2:	2e06      	cmp	r6, #6
 800e9d4:	d12a      	bne.n	800ea2c <_strtod_l+0xc4>
 800e9d6:	3501      	adds	r5, #1
 800e9d8:	2300      	movs	r3, #0
 800e9da:	9511      	str	r5, [sp, #68]	@ 0x44
 800e9dc:	9308      	str	r3, [sp, #32]
 800e9de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f040 8537 	bne.w	800f454 <_strtod_l+0xaec>
 800e9e6:	9b08      	ldr	r3, [sp, #32]
 800e9e8:	ec4b ab10 	vmov	d0, sl, fp
 800e9ec:	b1cb      	cbz	r3, 800ea22 <_strtod_l+0xba>
 800e9ee:	eeb1 0b40 	vneg.f64	d0, d0
 800e9f2:	b017      	add	sp, #92	@ 0x5c
 800e9f4:	ecbd 8b0a 	vpop	{d8-d12}
 800e9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fc:	2920      	cmp	r1, #32
 800e9fe:	d1cd      	bne.n	800e99c <_strtod_l+0x34>
 800ea00:	3201      	adds	r2, #1
 800ea02:	e7c0      	b.n	800e986 <_strtod_l+0x1e>
 800ea04:	292d      	cmp	r1, #45	@ 0x2d
 800ea06:	d1c9      	bne.n	800e99c <_strtod_l+0x34>
 800ea08:	2101      	movs	r1, #1
 800ea0a:	9108      	str	r1, [sp, #32]
 800ea0c:	1c51      	adds	r1, r2, #1
 800ea0e:	9111      	str	r1, [sp, #68]	@ 0x44
 800ea10:	7852      	ldrb	r2, [r2, #1]
 800ea12:	2a00      	cmp	r2, #0
 800ea14:	d1c4      	bne.n	800e9a0 <_strtod_l+0x38>
 800ea16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea18:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f040 8517 	bne.w	800f450 <_strtod_l+0xae8>
 800ea22:	ec4b ab10 	vmov	d0, sl, fp
 800ea26:	e7e4      	b.n	800e9f2 <_strtod_l+0x8a>
 800ea28:	2100      	movs	r1, #0
 800ea2a:	e7ee      	b.n	800ea0a <_strtod_l+0xa2>
 800ea2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ea2e:	b13a      	cbz	r2, 800ea40 <_strtod_l+0xd8>
 800ea30:	2135      	movs	r1, #53	@ 0x35
 800ea32:	a814      	add	r0, sp, #80	@ 0x50
 800ea34:	f7ff ff39 	bl	800e8aa <__copybits>
 800ea38:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ea3a:	9805      	ldr	r0, [sp, #20]
 800ea3c:	f7ff fb12 	bl	800e064 <_Bfree>
 800ea40:	1e73      	subs	r3, r6, #1
 800ea42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ea44:	2b04      	cmp	r3, #4
 800ea46:	d806      	bhi.n	800ea56 <_strtod_l+0xee>
 800ea48:	e8df f003 	tbb	[pc, r3]
 800ea4c:	201d0314 	.word	0x201d0314
 800ea50:	14          	.byte	0x14
 800ea51:	00          	.byte	0x00
 800ea52:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800ea56:	05e3      	lsls	r3, r4, #23
 800ea58:	bf48      	it	mi
 800ea5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ea5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea62:	0d1b      	lsrs	r3, r3, #20
 800ea64:	051b      	lsls	r3, r3, #20
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d1b9      	bne.n	800e9de <_strtod_l+0x76>
 800ea6a:	f7fe fba1 	bl	800d1b0 <__errno>
 800ea6e:	2322      	movs	r3, #34	@ 0x22
 800ea70:	6003      	str	r3, [r0, #0]
 800ea72:	e7b4      	b.n	800e9de <_strtod_l+0x76>
 800ea74:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800ea78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ea7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ea80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ea84:	e7e7      	b.n	800ea56 <_strtod_l+0xee>
 800ea86:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ec08 <_strtod_l+0x2a0>
 800ea8a:	e7e4      	b.n	800ea56 <_strtod_l+0xee>
 800ea8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ea90:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ea94:	e7df      	b.n	800ea56 <_strtod_l+0xee>
 800ea96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ea98:	1c5a      	adds	r2, r3, #1
 800ea9a:	9211      	str	r2, [sp, #68]	@ 0x44
 800ea9c:	785b      	ldrb	r3, [r3, #1]
 800ea9e:	2b30      	cmp	r3, #48	@ 0x30
 800eaa0:	d0f9      	beq.n	800ea96 <_strtod_l+0x12e>
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d09b      	beq.n	800e9de <_strtod_l+0x76>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	9307      	str	r3, [sp, #28]
 800eaaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eaac:	930a      	str	r3, [sp, #40]	@ 0x28
 800eaae:	2300      	movs	r3, #0
 800eab0:	9306      	str	r3, [sp, #24]
 800eab2:	4699      	mov	r9, r3
 800eab4:	461d      	mov	r5, r3
 800eab6:	220a      	movs	r2, #10
 800eab8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800eaba:	7804      	ldrb	r4, [r0, #0]
 800eabc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800eac0:	b2d9      	uxtb	r1, r3
 800eac2:	2909      	cmp	r1, #9
 800eac4:	d92a      	bls.n	800eb1c <_strtod_l+0x1b4>
 800eac6:	494f      	ldr	r1, [pc, #316]	@ (800ec04 <_strtod_l+0x29c>)
 800eac8:	2201      	movs	r2, #1
 800eaca:	f001 f95d 	bl	800fd88 <strncmp>
 800eace:	b398      	cbz	r0, 800eb38 <_strtod_l+0x1d0>
 800ead0:	2000      	movs	r0, #0
 800ead2:	4622      	mov	r2, r4
 800ead4:	462b      	mov	r3, r5
 800ead6:	4607      	mov	r7, r0
 800ead8:	4601      	mov	r1, r0
 800eada:	2a65      	cmp	r2, #101	@ 0x65
 800eadc:	d001      	beq.n	800eae2 <_strtod_l+0x17a>
 800eade:	2a45      	cmp	r2, #69	@ 0x45
 800eae0:	d118      	bne.n	800eb14 <_strtod_l+0x1ac>
 800eae2:	b91b      	cbnz	r3, 800eaec <_strtod_l+0x184>
 800eae4:	9b07      	ldr	r3, [sp, #28]
 800eae6:	4303      	orrs	r3, r0
 800eae8:	d095      	beq.n	800ea16 <_strtod_l+0xae>
 800eaea:	2300      	movs	r3, #0
 800eaec:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800eaf0:	f108 0201 	add.w	r2, r8, #1
 800eaf4:	9211      	str	r2, [sp, #68]	@ 0x44
 800eaf6:	f898 2001 	ldrb.w	r2, [r8, #1]
 800eafa:	2a2b      	cmp	r2, #43	@ 0x2b
 800eafc:	d074      	beq.n	800ebe8 <_strtod_l+0x280>
 800eafe:	2a2d      	cmp	r2, #45	@ 0x2d
 800eb00:	d07a      	beq.n	800ebf8 <_strtod_l+0x290>
 800eb02:	f04f 0e00 	mov.w	lr, #0
 800eb06:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800eb0a:	2c09      	cmp	r4, #9
 800eb0c:	f240 8082 	bls.w	800ec14 <_strtod_l+0x2ac>
 800eb10:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800eb14:	2400      	movs	r4, #0
 800eb16:	e09d      	b.n	800ec54 <_strtod_l+0x2ec>
 800eb18:	2300      	movs	r3, #0
 800eb1a:	e7c5      	b.n	800eaa8 <_strtod_l+0x140>
 800eb1c:	2d08      	cmp	r5, #8
 800eb1e:	bfc8      	it	gt
 800eb20:	9906      	ldrgt	r1, [sp, #24]
 800eb22:	f100 0001 	add.w	r0, r0, #1
 800eb26:	bfca      	itet	gt
 800eb28:	fb02 3301 	mlagt	r3, r2, r1, r3
 800eb2c:	fb02 3909 	mlale	r9, r2, r9, r3
 800eb30:	9306      	strgt	r3, [sp, #24]
 800eb32:	3501      	adds	r5, #1
 800eb34:	9011      	str	r0, [sp, #68]	@ 0x44
 800eb36:	e7bf      	b.n	800eab8 <_strtod_l+0x150>
 800eb38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eb3a:	1c5a      	adds	r2, r3, #1
 800eb3c:	9211      	str	r2, [sp, #68]	@ 0x44
 800eb3e:	785a      	ldrb	r2, [r3, #1]
 800eb40:	b3bd      	cbz	r5, 800ebb2 <_strtod_l+0x24a>
 800eb42:	4607      	mov	r7, r0
 800eb44:	462b      	mov	r3, r5
 800eb46:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800eb4a:	2909      	cmp	r1, #9
 800eb4c:	d912      	bls.n	800eb74 <_strtod_l+0x20c>
 800eb4e:	2101      	movs	r1, #1
 800eb50:	e7c3      	b.n	800eada <_strtod_l+0x172>
 800eb52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eb54:	1c5a      	adds	r2, r3, #1
 800eb56:	9211      	str	r2, [sp, #68]	@ 0x44
 800eb58:	785a      	ldrb	r2, [r3, #1]
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	2a30      	cmp	r2, #48	@ 0x30
 800eb5e:	d0f8      	beq.n	800eb52 <_strtod_l+0x1ea>
 800eb60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800eb64:	2b08      	cmp	r3, #8
 800eb66:	f200 847a 	bhi.w	800f45e <_strtod_l+0xaf6>
 800eb6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eb6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb6e:	4607      	mov	r7, r0
 800eb70:	2000      	movs	r0, #0
 800eb72:	4603      	mov	r3, r0
 800eb74:	3a30      	subs	r2, #48	@ 0x30
 800eb76:	f100 0101 	add.w	r1, r0, #1
 800eb7a:	d014      	beq.n	800eba6 <_strtod_l+0x23e>
 800eb7c:	440f      	add	r7, r1
 800eb7e:	469c      	mov	ip, r3
 800eb80:	f04f 0e0a 	mov.w	lr, #10
 800eb84:	f10c 0401 	add.w	r4, ip, #1
 800eb88:	1ae6      	subs	r6, r4, r3
 800eb8a:	42b1      	cmp	r1, r6
 800eb8c:	dc13      	bgt.n	800ebb6 <_strtod_l+0x24e>
 800eb8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800eb92:	1819      	adds	r1, r3, r0
 800eb94:	2908      	cmp	r1, #8
 800eb96:	f103 0301 	add.w	r3, r3, #1
 800eb9a:	4403      	add	r3, r0
 800eb9c:	dc19      	bgt.n	800ebd2 <_strtod_l+0x26a>
 800eb9e:	210a      	movs	r1, #10
 800eba0:	fb01 2909 	mla	r9, r1, r9, r2
 800eba4:	2100      	movs	r1, #0
 800eba6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eba8:	1c50      	adds	r0, r2, #1
 800ebaa:	9011      	str	r0, [sp, #68]	@ 0x44
 800ebac:	7852      	ldrb	r2, [r2, #1]
 800ebae:	4608      	mov	r0, r1
 800ebb0:	e7c9      	b.n	800eb46 <_strtod_l+0x1de>
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	e7d2      	b.n	800eb5c <_strtod_l+0x1f4>
 800ebb6:	f1bc 0f08 	cmp.w	ip, #8
 800ebba:	dc03      	bgt.n	800ebc4 <_strtod_l+0x25c>
 800ebbc:	fb0e f909 	mul.w	r9, lr, r9
 800ebc0:	46a4      	mov	ip, r4
 800ebc2:	e7df      	b.n	800eb84 <_strtod_l+0x21c>
 800ebc4:	2c10      	cmp	r4, #16
 800ebc6:	bfde      	ittt	le
 800ebc8:	9e06      	ldrle	r6, [sp, #24]
 800ebca:	fb0e f606 	mulle.w	r6, lr, r6
 800ebce:	9606      	strle	r6, [sp, #24]
 800ebd0:	e7f6      	b.n	800ebc0 <_strtod_l+0x258>
 800ebd2:	290f      	cmp	r1, #15
 800ebd4:	bfdf      	itttt	le
 800ebd6:	9806      	ldrle	r0, [sp, #24]
 800ebd8:	210a      	movle	r1, #10
 800ebda:	fb01 2200 	mlale	r2, r1, r0, r2
 800ebde:	9206      	strle	r2, [sp, #24]
 800ebe0:	e7e0      	b.n	800eba4 <_strtod_l+0x23c>
 800ebe2:	2700      	movs	r7, #0
 800ebe4:	2101      	movs	r1, #1
 800ebe6:	e77d      	b.n	800eae4 <_strtod_l+0x17c>
 800ebe8:	f04f 0e00 	mov.w	lr, #0
 800ebec:	f108 0202 	add.w	r2, r8, #2
 800ebf0:	9211      	str	r2, [sp, #68]	@ 0x44
 800ebf2:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ebf6:	e786      	b.n	800eb06 <_strtod_l+0x19e>
 800ebf8:	f04f 0e01 	mov.w	lr, #1
 800ebfc:	e7f6      	b.n	800ebec <_strtod_l+0x284>
 800ebfe:	bf00      	nop
 800ec00:	08010cec 	.word	0x08010cec
 800ec04:	08010b23 	.word	0x08010b23
 800ec08:	7ff00000 	.word	0x7ff00000
 800ec0c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ec0e:	1c54      	adds	r4, r2, #1
 800ec10:	9411      	str	r4, [sp, #68]	@ 0x44
 800ec12:	7852      	ldrb	r2, [r2, #1]
 800ec14:	2a30      	cmp	r2, #48	@ 0x30
 800ec16:	d0f9      	beq.n	800ec0c <_strtod_l+0x2a4>
 800ec18:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800ec1c:	2c08      	cmp	r4, #8
 800ec1e:	f63f af79 	bhi.w	800eb14 <_strtod_l+0x1ac>
 800ec22:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800ec26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ec28:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ec2c:	1c54      	adds	r4, r2, #1
 800ec2e:	9411      	str	r4, [sp, #68]	@ 0x44
 800ec30:	7852      	ldrb	r2, [r2, #1]
 800ec32:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800ec36:	2e09      	cmp	r6, #9
 800ec38:	d937      	bls.n	800ecaa <_strtod_l+0x342>
 800ec3a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800ec3c:	1ba4      	subs	r4, r4, r6
 800ec3e:	2c08      	cmp	r4, #8
 800ec40:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800ec44:	dc02      	bgt.n	800ec4c <_strtod_l+0x2e4>
 800ec46:	4564      	cmp	r4, ip
 800ec48:	bfa8      	it	ge
 800ec4a:	4664      	movge	r4, ip
 800ec4c:	f1be 0f00 	cmp.w	lr, #0
 800ec50:	d000      	beq.n	800ec54 <_strtod_l+0x2ec>
 800ec52:	4264      	negs	r4, r4
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d14d      	bne.n	800ecf4 <_strtod_l+0x38c>
 800ec58:	9b07      	ldr	r3, [sp, #28]
 800ec5a:	4318      	orrs	r0, r3
 800ec5c:	f47f aebf 	bne.w	800e9de <_strtod_l+0x76>
 800ec60:	2900      	cmp	r1, #0
 800ec62:	f47f aed8 	bne.w	800ea16 <_strtod_l+0xae>
 800ec66:	2a69      	cmp	r2, #105	@ 0x69
 800ec68:	d027      	beq.n	800ecba <_strtod_l+0x352>
 800ec6a:	dc24      	bgt.n	800ecb6 <_strtod_l+0x34e>
 800ec6c:	2a49      	cmp	r2, #73	@ 0x49
 800ec6e:	d024      	beq.n	800ecba <_strtod_l+0x352>
 800ec70:	2a4e      	cmp	r2, #78	@ 0x4e
 800ec72:	f47f aed0 	bne.w	800ea16 <_strtod_l+0xae>
 800ec76:	4997      	ldr	r1, [pc, #604]	@ (800eed4 <_strtod_l+0x56c>)
 800ec78:	a811      	add	r0, sp, #68	@ 0x44
 800ec7a:	f001 fb79 	bl	8010370 <__match>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	f43f aec9 	beq.w	800ea16 <_strtod_l+0xae>
 800ec84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	2b28      	cmp	r3, #40	@ 0x28
 800ec8a:	d12d      	bne.n	800ece8 <_strtod_l+0x380>
 800ec8c:	4992      	ldr	r1, [pc, #584]	@ (800eed8 <_strtod_l+0x570>)
 800ec8e:	aa14      	add	r2, sp, #80	@ 0x50
 800ec90:	a811      	add	r0, sp, #68	@ 0x44
 800ec92:	f001 fb81 	bl	8010398 <__hexnan>
 800ec96:	2805      	cmp	r0, #5
 800ec98:	d126      	bne.n	800ece8 <_strtod_l+0x380>
 800ec9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ec9c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800eca0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800eca4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800eca8:	e699      	b.n	800e9de <_strtod_l+0x76>
 800ecaa:	240a      	movs	r4, #10
 800ecac:	fb04 2c0c 	mla	ip, r4, ip, r2
 800ecb0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800ecb4:	e7b9      	b.n	800ec2a <_strtod_l+0x2c2>
 800ecb6:	2a6e      	cmp	r2, #110	@ 0x6e
 800ecb8:	e7db      	b.n	800ec72 <_strtod_l+0x30a>
 800ecba:	4988      	ldr	r1, [pc, #544]	@ (800eedc <_strtod_l+0x574>)
 800ecbc:	a811      	add	r0, sp, #68	@ 0x44
 800ecbe:	f001 fb57 	bl	8010370 <__match>
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	f43f aea7 	beq.w	800ea16 <_strtod_l+0xae>
 800ecc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ecca:	4985      	ldr	r1, [pc, #532]	@ (800eee0 <_strtod_l+0x578>)
 800eccc:	3b01      	subs	r3, #1
 800ecce:	a811      	add	r0, sp, #68	@ 0x44
 800ecd0:	9311      	str	r3, [sp, #68]	@ 0x44
 800ecd2:	f001 fb4d 	bl	8010370 <__match>
 800ecd6:	b910      	cbnz	r0, 800ecde <_strtod_l+0x376>
 800ecd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ecda:	3301      	adds	r3, #1
 800ecdc:	9311      	str	r3, [sp, #68]	@ 0x44
 800ecde:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800eef4 <_strtod_l+0x58c>
 800ece2:	f04f 0a00 	mov.w	sl, #0
 800ece6:	e67a      	b.n	800e9de <_strtod_l+0x76>
 800ece8:	487e      	ldr	r0, [pc, #504]	@ (800eee4 <_strtod_l+0x57c>)
 800ecea:	f001 f87d 	bl	800fde8 <nan>
 800ecee:	ec5b ab10 	vmov	sl, fp, d0
 800ecf2:	e674      	b.n	800e9de <_strtod_l+0x76>
 800ecf4:	ee07 9a90 	vmov	s15, r9
 800ecf8:	1be2      	subs	r2, r4, r7
 800ecfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ecfe:	2d00      	cmp	r5, #0
 800ed00:	bf08      	it	eq
 800ed02:	461d      	moveq	r5, r3
 800ed04:	2b10      	cmp	r3, #16
 800ed06:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed08:	461a      	mov	r2, r3
 800ed0a:	bfa8      	it	ge
 800ed0c:	2210      	movge	r2, #16
 800ed0e:	2b09      	cmp	r3, #9
 800ed10:	ec5b ab17 	vmov	sl, fp, d7
 800ed14:	dc15      	bgt.n	800ed42 <_strtod_l+0x3da>
 800ed16:	1be1      	subs	r1, r4, r7
 800ed18:	2900      	cmp	r1, #0
 800ed1a:	f43f ae60 	beq.w	800e9de <_strtod_l+0x76>
 800ed1e:	eba4 0107 	sub.w	r1, r4, r7
 800ed22:	dd72      	ble.n	800ee0a <_strtod_l+0x4a2>
 800ed24:	2916      	cmp	r1, #22
 800ed26:	dc59      	bgt.n	800eddc <_strtod_l+0x474>
 800ed28:	4b6f      	ldr	r3, [pc, #444]	@ (800eee8 <_strtod_l+0x580>)
 800ed2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed30:	ed93 7b00 	vldr	d7, [r3]
 800ed34:	ec4b ab16 	vmov	d6, sl, fp
 800ed38:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ed3c:	ec5b ab17 	vmov	sl, fp, d7
 800ed40:	e64d      	b.n	800e9de <_strtod_l+0x76>
 800ed42:	4969      	ldr	r1, [pc, #420]	@ (800eee8 <_strtod_l+0x580>)
 800ed44:	eddd 6a06 	vldr	s13, [sp, #24]
 800ed48:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ed4c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800ed50:	2b0f      	cmp	r3, #15
 800ed52:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800ed56:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ed5a:	ec5b ab16 	vmov	sl, fp, d6
 800ed5e:	ddda      	ble.n	800ed16 <_strtod_l+0x3ae>
 800ed60:	1a9a      	subs	r2, r3, r2
 800ed62:	1be1      	subs	r1, r4, r7
 800ed64:	440a      	add	r2, r1
 800ed66:	2a00      	cmp	r2, #0
 800ed68:	f340 8094 	ble.w	800ee94 <_strtod_l+0x52c>
 800ed6c:	f012 000f 	ands.w	r0, r2, #15
 800ed70:	d00a      	beq.n	800ed88 <_strtod_l+0x420>
 800ed72:	495d      	ldr	r1, [pc, #372]	@ (800eee8 <_strtod_l+0x580>)
 800ed74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ed78:	ed91 7b00 	vldr	d7, [r1]
 800ed7c:	ec4b ab16 	vmov	d6, sl, fp
 800ed80:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ed84:	ec5b ab17 	vmov	sl, fp, d7
 800ed88:	f032 020f 	bics.w	r2, r2, #15
 800ed8c:	d073      	beq.n	800ee76 <_strtod_l+0x50e>
 800ed8e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800ed92:	dd47      	ble.n	800ee24 <_strtod_l+0x4bc>
 800ed94:	2400      	movs	r4, #0
 800ed96:	4625      	mov	r5, r4
 800ed98:	9407      	str	r4, [sp, #28]
 800ed9a:	4626      	mov	r6, r4
 800ed9c:	9a05      	ldr	r2, [sp, #20]
 800ed9e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800eef4 <_strtod_l+0x58c>
 800eda2:	2322      	movs	r3, #34	@ 0x22
 800eda4:	6013      	str	r3, [r2, #0]
 800eda6:	f04f 0a00 	mov.w	sl, #0
 800edaa:	9b07      	ldr	r3, [sp, #28]
 800edac:	2b00      	cmp	r3, #0
 800edae:	f43f ae16 	beq.w	800e9de <_strtod_l+0x76>
 800edb2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800edb4:	9805      	ldr	r0, [sp, #20]
 800edb6:	f7ff f955 	bl	800e064 <_Bfree>
 800edba:	9805      	ldr	r0, [sp, #20]
 800edbc:	4631      	mov	r1, r6
 800edbe:	f7ff f951 	bl	800e064 <_Bfree>
 800edc2:	9805      	ldr	r0, [sp, #20]
 800edc4:	4629      	mov	r1, r5
 800edc6:	f7ff f94d 	bl	800e064 <_Bfree>
 800edca:	9907      	ldr	r1, [sp, #28]
 800edcc:	9805      	ldr	r0, [sp, #20]
 800edce:	f7ff f949 	bl	800e064 <_Bfree>
 800edd2:	9805      	ldr	r0, [sp, #20]
 800edd4:	4621      	mov	r1, r4
 800edd6:	f7ff f945 	bl	800e064 <_Bfree>
 800edda:	e600      	b.n	800e9de <_strtod_l+0x76>
 800eddc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800ede0:	1be0      	subs	r0, r4, r7
 800ede2:	4281      	cmp	r1, r0
 800ede4:	dbbc      	blt.n	800ed60 <_strtod_l+0x3f8>
 800ede6:	4a40      	ldr	r2, [pc, #256]	@ (800eee8 <_strtod_l+0x580>)
 800ede8:	f1c3 030f 	rsb	r3, r3, #15
 800edec:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800edf0:	ed91 7b00 	vldr	d7, [r1]
 800edf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800edf6:	ec4b ab16 	vmov	d6, sl, fp
 800edfa:	1acb      	subs	r3, r1, r3
 800edfc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ee00:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ee04:	ed92 6b00 	vldr	d6, [r2]
 800ee08:	e796      	b.n	800ed38 <_strtod_l+0x3d0>
 800ee0a:	3116      	adds	r1, #22
 800ee0c:	dba8      	blt.n	800ed60 <_strtod_l+0x3f8>
 800ee0e:	4b36      	ldr	r3, [pc, #216]	@ (800eee8 <_strtod_l+0x580>)
 800ee10:	1b3c      	subs	r4, r7, r4
 800ee12:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ee16:	ed94 7b00 	vldr	d7, [r4]
 800ee1a:	ec4b ab16 	vmov	d6, sl, fp
 800ee1e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ee22:	e78b      	b.n	800ed3c <_strtod_l+0x3d4>
 800ee24:	2000      	movs	r0, #0
 800ee26:	ec4b ab17 	vmov	d7, sl, fp
 800ee2a:	4e30      	ldr	r6, [pc, #192]	@ (800eeec <_strtod_l+0x584>)
 800ee2c:	1112      	asrs	r2, r2, #4
 800ee2e:	4601      	mov	r1, r0
 800ee30:	2a01      	cmp	r2, #1
 800ee32:	dc23      	bgt.n	800ee7c <_strtod_l+0x514>
 800ee34:	b108      	cbz	r0, 800ee3a <_strtod_l+0x4d2>
 800ee36:	ec5b ab17 	vmov	sl, fp, d7
 800ee3a:	4a2c      	ldr	r2, [pc, #176]	@ (800eeec <_strtod_l+0x584>)
 800ee3c:	482c      	ldr	r0, [pc, #176]	@ (800eef0 <_strtod_l+0x588>)
 800ee3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ee42:	ed92 7b00 	vldr	d7, [r2]
 800ee46:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ee4a:	ec4b ab16 	vmov	d6, sl, fp
 800ee4e:	4a29      	ldr	r2, [pc, #164]	@ (800eef4 <_strtod_l+0x58c>)
 800ee50:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ee54:	ee17 1a90 	vmov	r1, s15
 800ee58:	400a      	ands	r2, r1
 800ee5a:	4282      	cmp	r2, r0
 800ee5c:	ec5b ab17 	vmov	sl, fp, d7
 800ee60:	d898      	bhi.n	800ed94 <_strtod_l+0x42c>
 800ee62:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800ee66:	4282      	cmp	r2, r0
 800ee68:	bf86      	itte	hi
 800ee6a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800eef8 <_strtod_l+0x590>
 800ee6e:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ee72:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800ee76:	2200      	movs	r2, #0
 800ee78:	9206      	str	r2, [sp, #24]
 800ee7a:	e076      	b.n	800ef6a <_strtod_l+0x602>
 800ee7c:	f012 0f01 	tst.w	r2, #1
 800ee80:	d004      	beq.n	800ee8c <_strtod_l+0x524>
 800ee82:	ed96 6b00 	vldr	d6, [r6]
 800ee86:	2001      	movs	r0, #1
 800ee88:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ee8c:	3101      	adds	r1, #1
 800ee8e:	1052      	asrs	r2, r2, #1
 800ee90:	3608      	adds	r6, #8
 800ee92:	e7cd      	b.n	800ee30 <_strtod_l+0x4c8>
 800ee94:	d0ef      	beq.n	800ee76 <_strtod_l+0x50e>
 800ee96:	4252      	negs	r2, r2
 800ee98:	f012 000f 	ands.w	r0, r2, #15
 800ee9c:	d00a      	beq.n	800eeb4 <_strtod_l+0x54c>
 800ee9e:	4912      	ldr	r1, [pc, #72]	@ (800eee8 <_strtod_l+0x580>)
 800eea0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800eea4:	ed91 7b00 	vldr	d7, [r1]
 800eea8:	ec4b ab16 	vmov	d6, sl, fp
 800eeac:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800eeb0:	ec5b ab17 	vmov	sl, fp, d7
 800eeb4:	1112      	asrs	r2, r2, #4
 800eeb6:	d0de      	beq.n	800ee76 <_strtod_l+0x50e>
 800eeb8:	2a1f      	cmp	r2, #31
 800eeba:	dd1f      	ble.n	800eefc <_strtod_l+0x594>
 800eebc:	2400      	movs	r4, #0
 800eebe:	4625      	mov	r5, r4
 800eec0:	9407      	str	r4, [sp, #28]
 800eec2:	4626      	mov	r6, r4
 800eec4:	9a05      	ldr	r2, [sp, #20]
 800eec6:	2322      	movs	r3, #34	@ 0x22
 800eec8:	f04f 0a00 	mov.w	sl, #0
 800eecc:	f04f 0b00 	mov.w	fp, #0
 800eed0:	6013      	str	r3, [r2, #0]
 800eed2:	e76a      	b.n	800edaa <_strtod_l+0x442>
 800eed4:	08010a11 	.word	0x08010a11
 800eed8:	08010cd8 	.word	0x08010cd8
 800eedc:	08010a09 	.word	0x08010a09
 800eee0:	08010a40 	.word	0x08010a40
 800eee4:	08010b79 	.word	0x08010b79
 800eee8:	08010c10 	.word	0x08010c10
 800eeec:	08010be8 	.word	0x08010be8
 800eef0:	7ca00000 	.word	0x7ca00000
 800eef4:	7ff00000 	.word	0x7ff00000
 800eef8:	7fefffff 	.word	0x7fefffff
 800eefc:	f012 0110 	ands.w	r1, r2, #16
 800ef00:	bf18      	it	ne
 800ef02:	216a      	movne	r1, #106	@ 0x6a
 800ef04:	9106      	str	r1, [sp, #24]
 800ef06:	ec4b ab17 	vmov	d7, sl, fp
 800ef0a:	49af      	ldr	r1, [pc, #700]	@ (800f1c8 <_strtod_l+0x860>)
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	07d6      	lsls	r6, r2, #31
 800ef10:	d504      	bpl.n	800ef1c <_strtod_l+0x5b4>
 800ef12:	ed91 6b00 	vldr	d6, [r1]
 800ef16:	2001      	movs	r0, #1
 800ef18:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ef1c:	1052      	asrs	r2, r2, #1
 800ef1e:	f101 0108 	add.w	r1, r1, #8
 800ef22:	d1f4      	bne.n	800ef0e <_strtod_l+0x5a6>
 800ef24:	b108      	cbz	r0, 800ef2a <_strtod_l+0x5c2>
 800ef26:	ec5b ab17 	vmov	sl, fp, d7
 800ef2a:	9a06      	ldr	r2, [sp, #24]
 800ef2c:	b1b2      	cbz	r2, 800ef5c <_strtod_l+0x5f4>
 800ef2e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800ef32:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800ef36:	2a00      	cmp	r2, #0
 800ef38:	4658      	mov	r0, fp
 800ef3a:	dd0f      	ble.n	800ef5c <_strtod_l+0x5f4>
 800ef3c:	2a1f      	cmp	r2, #31
 800ef3e:	dd55      	ble.n	800efec <_strtod_l+0x684>
 800ef40:	2a34      	cmp	r2, #52	@ 0x34
 800ef42:	bfde      	ittt	le
 800ef44:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 800ef48:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800ef4c:	408a      	lslle	r2, r1
 800ef4e:	f04f 0a00 	mov.w	sl, #0
 800ef52:	bfcc      	ite	gt
 800ef54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ef58:	ea02 0b00 	andle.w	fp, r2, r0
 800ef5c:	ec4b ab17 	vmov	d7, sl, fp
 800ef60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef68:	d0a8      	beq.n	800eebc <_strtod_l+0x554>
 800ef6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ef6c:	9805      	ldr	r0, [sp, #20]
 800ef6e:	f8cd 9000 	str.w	r9, [sp]
 800ef72:	462a      	mov	r2, r5
 800ef74:	f7ff f8de 	bl	800e134 <__s2b>
 800ef78:	9007      	str	r0, [sp, #28]
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	f43f af0a 	beq.w	800ed94 <_strtod_l+0x42c>
 800ef80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef82:	1b3f      	subs	r7, r7, r4
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	bfb4      	ite	lt
 800ef88:	463b      	movlt	r3, r7
 800ef8a:	2300      	movge	r3, #0
 800ef8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef90:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800f1b8 <_strtod_l+0x850>
 800ef94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ef98:	2400      	movs	r4, #0
 800ef9a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ef9c:	4625      	mov	r5, r4
 800ef9e:	9b07      	ldr	r3, [sp, #28]
 800efa0:	9805      	ldr	r0, [sp, #20]
 800efa2:	6859      	ldr	r1, [r3, #4]
 800efa4:	f7ff f81e 	bl	800dfe4 <_Balloc>
 800efa8:	4606      	mov	r6, r0
 800efaa:	2800      	cmp	r0, #0
 800efac:	f43f aef6 	beq.w	800ed9c <_strtod_l+0x434>
 800efb0:	9b07      	ldr	r3, [sp, #28]
 800efb2:	691a      	ldr	r2, [r3, #16]
 800efb4:	ec4b ab19 	vmov	d9, sl, fp
 800efb8:	3202      	adds	r2, #2
 800efba:	f103 010c 	add.w	r1, r3, #12
 800efbe:	0092      	lsls	r2, r2, #2
 800efc0:	300c      	adds	r0, #12
 800efc2:	f000 ff03 	bl	800fdcc <memcpy>
 800efc6:	eeb0 0b49 	vmov.f64	d0, d9
 800efca:	9805      	ldr	r0, [sp, #20]
 800efcc:	aa14      	add	r2, sp, #80	@ 0x50
 800efce:	a913      	add	r1, sp, #76	@ 0x4c
 800efd0:	f7ff fbe4 	bl	800e79c <__d2b>
 800efd4:	9012      	str	r0, [sp, #72]	@ 0x48
 800efd6:	2800      	cmp	r0, #0
 800efd8:	f43f aee0 	beq.w	800ed9c <_strtod_l+0x434>
 800efdc:	9805      	ldr	r0, [sp, #20]
 800efde:	2101      	movs	r1, #1
 800efe0:	f7ff f93e 	bl	800e260 <__i2b>
 800efe4:	4605      	mov	r5, r0
 800efe6:	b940      	cbnz	r0, 800effa <_strtod_l+0x692>
 800efe8:	2500      	movs	r5, #0
 800efea:	e6d7      	b.n	800ed9c <_strtod_l+0x434>
 800efec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800eff0:	fa01 f202 	lsl.w	r2, r1, r2
 800eff4:	ea02 0a0a 	and.w	sl, r2, sl
 800eff8:	e7b0      	b.n	800ef5c <_strtod_l+0x5f4>
 800effa:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800effc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800effe:	2f00      	cmp	r7, #0
 800f000:	bfab      	itete	ge
 800f002:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800f004:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800f006:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800f00a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800f00e:	bfac      	ite	ge
 800f010:	eb07 0903 	addge.w	r9, r7, r3
 800f014:	eba3 0807 	sublt.w	r8, r3, r7
 800f018:	9b06      	ldr	r3, [sp, #24]
 800f01a:	1aff      	subs	r7, r7, r3
 800f01c:	4417      	add	r7, r2
 800f01e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800f022:	4a6a      	ldr	r2, [pc, #424]	@ (800f1cc <_strtod_l+0x864>)
 800f024:	3f01      	subs	r7, #1
 800f026:	4297      	cmp	r7, r2
 800f028:	da51      	bge.n	800f0ce <_strtod_l+0x766>
 800f02a:	1bd1      	subs	r1, r2, r7
 800f02c:	291f      	cmp	r1, #31
 800f02e:	eba3 0301 	sub.w	r3, r3, r1
 800f032:	f04f 0201 	mov.w	r2, #1
 800f036:	dc3e      	bgt.n	800f0b6 <_strtod_l+0x74e>
 800f038:	408a      	lsls	r2, r1
 800f03a:	920c      	str	r2, [sp, #48]	@ 0x30
 800f03c:	2200      	movs	r2, #0
 800f03e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f040:	eb09 0703 	add.w	r7, r9, r3
 800f044:	4498      	add	r8, r3
 800f046:	9b06      	ldr	r3, [sp, #24]
 800f048:	45b9      	cmp	r9, r7
 800f04a:	4498      	add	r8, r3
 800f04c:	464b      	mov	r3, r9
 800f04e:	bfa8      	it	ge
 800f050:	463b      	movge	r3, r7
 800f052:	4543      	cmp	r3, r8
 800f054:	bfa8      	it	ge
 800f056:	4643      	movge	r3, r8
 800f058:	2b00      	cmp	r3, #0
 800f05a:	bfc2      	ittt	gt
 800f05c:	1aff      	subgt	r7, r7, r3
 800f05e:	eba8 0803 	subgt.w	r8, r8, r3
 800f062:	eba9 0903 	subgt.w	r9, r9, r3
 800f066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f068:	2b00      	cmp	r3, #0
 800f06a:	dd16      	ble.n	800f09a <_strtod_l+0x732>
 800f06c:	4629      	mov	r1, r5
 800f06e:	9805      	ldr	r0, [sp, #20]
 800f070:	461a      	mov	r2, r3
 800f072:	f7ff f9ad 	bl	800e3d0 <__pow5mult>
 800f076:	4605      	mov	r5, r0
 800f078:	2800      	cmp	r0, #0
 800f07a:	d0b5      	beq.n	800efe8 <_strtod_l+0x680>
 800f07c:	4601      	mov	r1, r0
 800f07e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f080:	9805      	ldr	r0, [sp, #20]
 800f082:	f7ff f903 	bl	800e28c <__multiply>
 800f086:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f088:	2800      	cmp	r0, #0
 800f08a:	f43f ae87 	beq.w	800ed9c <_strtod_l+0x434>
 800f08e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f090:	9805      	ldr	r0, [sp, #20]
 800f092:	f7fe ffe7 	bl	800e064 <_Bfree>
 800f096:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f098:	9312      	str	r3, [sp, #72]	@ 0x48
 800f09a:	2f00      	cmp	r7, #0
 800f09c:	dc1b      	bgt.n	800f0d6 <_strtod_l+0x76e>
 800f09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	dd21      	ble.n	800f0e8 <_strtod_l+0x780>
 800f0a4:	4631      	mov	r1, r6
 800f0a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f0a8:	9805      	ldr	r0, [sp, #20]
 800f0aa:	f7ff f991 	bl	800e3d0 <__pow5mult>
 800f0ae:	4606      	mov	r6, r0
 800f0b0:	b9d0      	cbnz	r0, 800f0e8 <_strtod_l+0x780>
 800f0b2:	2600      	movs	r6, #0
 800f0b4:	e672      	b.n	800ed9c <_strtod_l+0x434>
 800f0b6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800f0ba:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800f0be:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800f0c2:	37e2      	adds	r7, #226	@ 0xe2
 800f0c4:	fa02 f107 	lsl.w	r1, r2, r7
 800f0c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f0ca:	920c      	str	r2, [sp, #48]	@ 0x30
 800f0cc:	e7b8      	b.n	800f040 <_strtod_l+0x6d8>
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	e7f9      	b.n	800f0ca <_strtod_l+0x762>
 800f0d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f0d8:	9805      	ldr	r0, [sp, #20]
 800f0da:	463a      	mov	r2, r7
 800f0dc:	f7ff f9d2 	bl	800e484 <__lshift>
 800f0e0:	9012      	str	r0, [sp, #72]	@ 0x48
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	d1db      	bne.n	800f09e <_strtod_l+0x736>
 800f0e6:	e659      	b.n	800ed9c <_strtod_l+0x434>
 800f0e8:	f1b8 0f00 	cmp.w	r8, #0
 800f0ec:	dd07      	ble.n	800f0fe <_strtod_l+0x796>
 800f0ee:	4631      	mov	r1, r6
 800f0f0:	9805      	ldr	r0, [sp, #20]
 800f0f2:	4642      	mov	r2, r8
 800f0f4:	f7ff f9c6 	bl	800e484 <__lshift>
 800f0f8:	4606      	mov	r6, r0
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d0d9      	beq.n	800f0b2 <_strtod_l+0x74a>
 800f0fe:	f1b9 0f00 	cmp.w	r9, #0
 800f102:	dd08      	ble.n	800f116 <_strtod_l+0x7ae>
 800f104:	4629      	mov	r1, r5
 800f106:	9805      	ldr	r0, [sp, #20]
 800f108:	464a      	mov	r2, r9
 800f10a:	f7ff f9bb 	bl	800e484 <__lshift>
 800f10e:	4605      	mov	r5, r0
 800f110:	2800      	cmp	r0, #0
 800f112:	f43f ae43 	beq.w	800ed9c <_strtod_l+0x434>
 800f116:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f118:	9805      	ldr	r0, [sp, #20]
 800f11a:	4632      	mov	r2, r6
 800f11c:	f7ff fa3a 	bl	800e594 <__mdiff>
 800f120:	4604      	mov	r4, r0
 800f122:	2800      	cmp	r0, #0
 800f124:	f43f ae3a 	beq.w	800ed9c <_strtod_l+0x434>
 800f128:	2300      	movs	r3, #0
 800f12a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800f12e:	60c3      	str	r3, [r0, #12]
 800f130:	4629      	mov	r1, r5
 800f132:	f7ff fa13 	bl	800e55c <__mcmp>
 800f136:	2800      	cmp	r0, #0
 800f138:	da4c      	bge.n	800f1d4 <_strtod_l+0x86c>
 800f13a:	ea58 080a 	orrs.w	r8, r8, sl
 800f13e:	d172      	bne.n	800f226 <_strtod_l+0x8be>
 800f140:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f144:	2b00      	cmp	r3, #0
 800f146:	d16e      	bne.n	800f226 <_strtod_l+0x8be>
 800f148:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f14c:	0d1b      	lsrs	r3, r3, #20
 800f14e:	051b      	lsls	r3, r3, #20
 800f150:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f154:	d967      	bls.n	800f226 <_strtod_l+0x8be>
 800f156:	6963      	ldr	r3, [r4, #20]
 800f158:	b913      	cbnz	r3, 800f160 <_strtod_l+0x7f8>
 800f15a:	6923      	ldr	r3, [r4, #16]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	dd62      	ble.n	800f226 <_strtod_l+0x8be>
 800f160:	4621      	mov	r1, r4
 800f162:	2201      	movs	r2, #1
 800f164:	9805      	ldr	r0, [sp, #20]
 800f166:	f7ff f98d 	bl	800e484 <__lshift>
 800f16a:	4629      	mov	r1, r5
 800f16c:	4604      	mov	r4, r0
 800f16e:	f7ff f9f5 	bl	800e55c <__mcmp>
 800f172:	2800      	cmp	r0, #0
 800f174:	dd57      	ble.n	800f226 <_strtod_l+0x8be>
 800f176:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f17a:	9a06      	ldr	r2, [sp, #24]
 800f17c:	0d1b      	lsrs	r3, r3, #20
 800f17e:	051b      	lsls	r3, r3, #20
 800f180:	2a00      	cmp	r2, #0
 800f182:	d06e      	beq.n	800f262 <_strtod_l+0x8fa>
 800f184:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f188:	d86b      	bhi.n	800f262 <_strtod_l+0x8fa>
 800f18a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f18e:	f67f ae99 	bls.w	800eec4 <_strtod_l+0x55c>
 800f192:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800f1c0 <_strtod_l+0x858>
 800f196:	ec4b ab16 	vmov	d6, sl, fp
 800f19a:	4b0d      	ldr	r3, [pc, #52]	@ (800f1d0 <_strtod_l+0x868>)
 800f19c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f1a0:	ee17 2a90 	vmov	r2, s15
 800f1a4:	4013      	ands	r3, r2
 800f1a6:	ec5b ab17 	vmov	sl, fp, d7
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	f47f ae01 	bne.w	800edb2 <_strtod_l+0x44a>
 800f1b0:	9a05      	ldr	r2, [sp, #20]
 800f1b2:	2322      	movs	r3, #34	@ 0x22
 800f1b4:	6013      	str	r3, [r2, #0]
 800f1b6:	e5fc      	b.n	800edb2 <_strtod_l+0x44a>
 800f1b8:	ffc00000 	.word	0xffc00000
 800f1bc:	41dfffff 	.word	0x41dfffff
 800f1c0:	00000000 	.word	0x00000000
 800f1c4:	39500000 	.word	0x39500000
 800f1c8:	08010d00 	.word	0x08010d00
 800f1cc:	fffffc02 	.word	0xfffffc02
 800f1d0:	7ff00000 	.word	0x7ff00000
 800f1d4:	46d9      	mov	r9, fp
 800f1d6:	d15d      	bne.n	800f294 <_strtod_l+0x92c>
 800f1d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f1dc:	f1b8 0f00 	cmp.w	r8, #0
 800f1e0:	d02a      	beq.n	800f238 <_strtod_l+0x8d0>
 800f1e2:	4aa9      	ldr	r2, [pc, #676]	@ (800f488 <_strtod_l+0xb20>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d12a      	bne.n	800f23e <_strtod_l+0x8d6>
 800f1e8:	9b06      	ldr	r3, [sp, #24]
 800f1ea:	4652      	mov	r2, sl
 800f1ec:	b1fb      	cbz	r3, 800f22e <_strtod_l+0x8c6>
 800f1ee:	4ba7      	ldr	r3, [pc, #668]	@ (800f48c <_strtod_l+0xb24>)
 800f1f0:	ea0b 0303 	and.w	r3, fp, r3
 800f1f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f1f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800f1fc:	d81a      	bhi.n	800f234 <_strtod_l+0x8cc>
 800f1fe:	0d1b      	lsrs	r3, r3, #20
 800f200:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f204:	fa01 f303 	lsl.w	r3, r1, r3
 800f208:	429a      	cmp	r2, r3
 800f20a:	d118      	bne.n	800f23e <_strtod_l+0x8d6>
 800f20c:	4ba0      	ldr	r3, [pc, #640]	@ (800f490 <_strtod_l+0xb28>)
 800f20e:	4599      	cmp	r9, r3
 800f210:	d102      	bne.n	800f218 <_strtod_l+0x8b0>
 800f212:	3201      	adds	r2, #1
 800f214:	f43f adc2 	beq.w	800ed9c <_strtod_l+0x434>
 800f218:	4b9c      	ldr	r3, [pc, #624]	@ (800f48c <_strtod_l+0xb24>)
 800f21a:	ea09 0303 	and.w	r3, r9, r3
 800f21e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800f222:	f04f 0a00 	mov.w	sl, #0
 800f226:	9b06      	ldr	r3, [sp, #24]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d1b2      	bne.n	800f192 <_strtod_l+0x82a>
 800f22c:	e5c1      	b.n	800edb2 <_strtod_l+0x44a>
 800f22e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f232:	e7e9      	b.n	800f208 <_strtod_l+0x8a0>
 800f234:	460b      	mov	r3, r1
 800f236:	e7e7      	b.n	800f208 <_strtod_l+0x8a0>
 800f238:	ea53 030a 	orrs.w	r3, r3, sl
 800f23c:	d09b      	beq.n	800f176 <_strtod_l+0x80e>
 800f23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f240:	b1c3      	cbz	r3, 800f274 <_strtod_l+0x90c>
 800f242:	ea13 0f09 	tst.w	r3, r9
 800f246:	d0ee      	beq.n	800f226 <_strtod_l+0x8be>
 800f248:	9a06      	ldr	r2, [sp, #24]
 800f24a:	4650      	mov	r0, sl
 800f24c:	4659      	mov	r1, fp
 800f24e:	f1b8 0f00 	cmp.w	r8, #0
 800f252:	d013      	beq.n	800f27c <_strtod_l+0x914>
 800f254:	f7ff fb6d 	bl	800e932 <sulp>
 800f258:	ee39 7b00 	vadd.f64	d7, d9, d0
 800f25c:	ec5b ab17 	vmov	sl, fp, d7
 800f260:	e7e1      	b.n	800f226 <_strtod_l+0x8be>
 800f262:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f266:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f26a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f26e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f272:	e7d8      	b.n	800f226 <_strtod_l+0x8be>
 800f274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f276:	ea13 0f0a 	tst.w	r3, sl
 800f27a:	e7e4      	b.n	800f246 <_strtod_l+0x8de>
 800f27c:	f7ff fb59 	bl	800e932 <sulp>
 800f280:	ee39 0b40 	vsub.f64	d0, d9, d0
 800f284:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f28c:	ec5b ab10 	vmov	sl, fp, d0
 800f290:	d1c9      	bne.n	800f226 <_strtod_l+0x8be>
 800f292:	e617      	b.n	800eec4 <_strtod_l+0x55c>
 800f294:	4629      	mov	r1, r5
 800f296:	4620      	mov	r0, r4
 800f298:	f7ff fad8 	bl	800e84c <__ratio>
 800f29c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800f2a0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2a8:	d85d      	bhi.n	800f366 <_strtod_l+0x9fe>
 800f2aa:	f1b8 0f00 	cmp.w	r8, #0
 800f2ae:	d164      	bne.n	800f37a <_strtod_l+0xa12>
 800f2b0:	f1ba 0f00 	cmp.w	sl, #0
 800f2b4:	d14b      	bne.n	800f34e <_strtod_l+0x9e6>
 800f2b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f2ba:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d160      	bne.n	800f384 <_strtod_l+0xa1c>
 800f2c2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800f2c6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800f2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ce:	d401      	bmi.n	800f2d4 <_strtod_l+0x96c>
 800f2d0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f2d4:	eeb1 ab48 	vneg.f64	d10, d8
 800f2d8:	486c      	ldr	r0, [pc, #432]	@ (800f48c <_strtod_l+0xb24>)
 800f2da:	496e      	ldr	r1, [pc, #440]	@ (800f494 <_strtod_l+0xb2c>)
 800f2dc:	ea09 0700 	and.w	r7, r9, r0
 800f2e0:	428f      	cmp	r7, r1
 800f2e2:	ec53 2b1a 	vmov	r2, r3, d10
 800f2e6:	d17d      	bne.n	800f3e4 <_strtod_l+0xa7c>
 800f2e8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800f2ec:	ec4b ab1c 	vmov	d12, sl, fp
 800f2f0:	eeb0 0b4c 	vmov.f64	d0, d12
 800f2f4:	f7ff f9e2 	bl	800e6bc <__ulp>
 800f2f8:	4864      	ldr	r0, [pc, #400]	@ (800f48c <_strtod_l+0xb24>)
 800f2fa:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800f2fe:	ee1c 3a90 	vmov	r3, s25
 800f302:	4a65      	ldr	r2, [pc, #404]	@ (800f498 <_strtod_l+0xb30>)
 800f304:	ea03 0100 	and.w	r1, r3, r0
 800f308:	4291      	cmp	r1, r2
 800f30a:	ec5b ab1c 	vmov	sl, fp, d12
 800f30e:	d93c      	bls.n	800f38a <_strtod_l+0xa22>
 800f310:	ee19 2a90 	vmov	r2, s19
 800f314:	4b5e      	ldr	r3, [pc, #376]	@ (800f490 <_strtod_l+0xb28>)
 800f316:	429a      	cmp	r2, r3
 800f318:	d104      	bne.n	800f324 <_strtod_l+0x9bc>
 800f31a:	ee19 3a10 	vmov	r3, s18
 800f31e:	3301      	adds	r3, #1
 800f320:	f43f ad3c 	beq.w	800ed9c <_strtod_l+0x434>
 800f324:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800f490 <_strtod_l+0xb28>
 800f328:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f32c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f32e:	9805      	ldr	r0, [sp, #20]
 800f330:	f7fe fe98 	bl	800e064 <_Bfree>
 800f334:	9805      	ldr	r0, [sp, #20]
 800f336:	4631      	mov	r1, r6
 800f338:	f7fe fe94 	bl	800e064 <_Bfree>
 800f33c:	9805      	ldr	r0, [sp, #20]
 800f33e:	4629      	mov	r1, r5
 800f340:	f7fe fe90 	bl	800e064 <_Bfree>
 800f344:	9805      	ldr	r0, [sp, #20]
 800f346:	4621      	mov	r1, r4
 800f348:	f7fe fe8c 	bl	800e064 <_Bfree>
 800f34c:	e627      	b.n	800ef9e <_strtod_l+0x636>
 800f34e:	f1ba 0f01 	cmp.w	sl, #1
 800f352:	d103      	bne.n	800f35c <_strtod_l+0x9f4>
 800f354:	f1bb 0f00 	cmp.w	fp, #0
 800f358:	f43f adb4 	beq.w	800eec4 <_strtod_l+0x55c>
 800f35c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800f360:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800f364:	e7b8      	b.n	800f2d8 <_strtod_l+0x970>
 800f366:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800f36a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f36e:	f1b8 0f00 	cmp.w	r8, #0
 800f372:	d0af      	beq.n	800f2d4 <_strtod_l+0x96c>
 800f374:	eeb0 ab48 	vmov.f64	d10, d8
 800f378:	e7ae      	b.n	800f2d8 <_strtod_l+0x970>
 800f37a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800f37e:	eeb0 8b4a 	vmov.f64	d8, d10
 800f382:	e7a9      	b.n	800f2d8 <_strtod_l+0x970>
 800f384:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800f388:	e7a6      	b.n	800f2d8 <_strtod_l+0x970>
 800f38a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f38e:	9b06      	ldr	r3, [sp, #24]
 800f390:	46d9      	mov	r9, fp
 800f392:	2b00      	cmp	r3, #0
 800f394:	d1ca      	bne.n	800f32c <_strtod_l+0x9c4>
 800f396:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f39a:	0d1b      	lsrs	r3, r3, #20
 800f39c:	051b      	lsls	r3, r3, #20
 800f39e:	429f      	cmp	r7, r3
 800f3a0:	d1c4      	bne.n	800f32c <_strtod_l+0x9c4>
 800f3a2:	ec51 0b18 	vmov	r0, r1, d8
 800f3a6:	f7f1 f9c7 	bl	8000738 <__aeabi_d2lz>
 800f3aa:	f7f1 f97f 	bl	80006ac <__aeabi_l2d>
 800f3ae:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800f3b2:	ec41 0b17 	vmov	d7, r0, r1
 800f3b6:	ea49 090a 	orr.w	r9, r9, sl
 800f3ba:	ea59 0908 	orrs.w	r9, r9, r8
 800f3be:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f3c2:	d03c      	beq.n	800f43e <_strtod_l+0xad6>
 800f3c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f470 <_strtod_l+0xb08>
 800f3c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d0:	f53f acef 	bmi.w	800edb2 <_strtod_l+0x44a>
 800f3d4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800f478 <_strtod_l+0xb10>
 800f3d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e0:	dda4      	ble.n	800f32c <_strtod_l+0x9c4>
 800f3e2:	e4e6      	b.n	800edb2 <_strtod_l+0x44a>
 800f3e4:	9906      	ldr	r1, [sp, #24]
 800f3e6:	b1e1      	cbz	r1, 800f422 <_strtod_l+0xaba>
 800f3e8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800f3ec:	d819      	bhi.n	800f422 <_strtod_l+0xaba>
 800f3ee:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800f3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f6:	d811      	bhi.n	800f41c <_strtod_l+0xab4>
 800f3f8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800f3fc:	ee18 3a10 	vmov	r3, s16
 800f400:	2b01      	cmp	r3, #1
 800f402:	bf38      	it	cc
 800f404:	2301      	movcc	r3, #1
 800f406:	ee08 3a10 	vmov	s16, r3
 800f40a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800f40e:	f1b8 0f00 	cmp.w	r8, #0
 800f412:	d111      	bne.n	800f438 <_strtod_l+0xad0>
 800f414:	eeb1 7b48 	vneg.f64	d7, d8
 800f418:	ec53 2b17 	vmov	r2, r3, d7
 800f41c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800f420:	1bcb      	subs	r3, r1, r7
 800f422:	eeb0 0b49 	vmov.f64	d0, d9
 800f426:	ec43 2b1a 	vmov	d10, r2, r3
 800f42a:	f7ff f947 	bl	800e6bc <__ulp>
 800f42e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800f432:	ec5b ab19 	vmov	sl, fp, d9
 800f436:	e7aa      	b.n	800f38e <_strtod_l+0xa26>
 800f438:	eeb0 7b48 	vmov.f64	d7, d8
 800f43c:	e7ec      	b.n	800f418 <_strtod_l+0xab0>
 800f43e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800f480 <_strtod_l+0xb18>
 800f442:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f44a:	f57f af6f 	bpl.w	800f32c <_strtod_l+0x9c4>
 800f44e:	e4b0      	b.n	800edb2 <_strtod_l+0x44a>
 800f450:	2300      	movs	r3, #0
 800f452:	9308      	str	r3, [sp, #32]
 800f454:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f456:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f458:	6013      	str	r3, [r2, #0]
 800f45a:	f7ff bac4 	b.w	800e9e6 <_strtod_l+0x7e>
 800f45e:	2a65      	cmp	r2, #101	@ 0x65
 800f460:	f43f abbf 	beq.w	800ebe2 <_strtod_l+0x27a>
 800f464:	2a45      	cmp	r2, #69	@ 0x45
 800f466:	f43f abbc 	beq.w	800ebe2 <_strtod_l+0x27a>
 800f46a:	2101      	movs	r1, #1
 800f46c:	f7ff bbf4 	b.w	800ec58 <_strtod_l+0x2f0>
 800f470:	94a03595 	.word	0x94a03595
 800f474:	3fdfffff 	.word	0x3fdfffff
 800f478:	35afe535 	.word	0x35afe535
 800f47c:	3fe00000 	.word	0x3fe00000
 800f480:	94a03595 	.word	0x94a03595
 800f484:	3fcfffff 	.word	0x3fcfffff
 800f488:	000fffff 	.word	0x000fffff
 800f48c:	7ff00000 	.word	0x7ff00000
 800f490:	7fefffff 	.word	0x7fefffff
 800f494:	7fe00000 	.word	0x7fe00000
 800f498:	7c9fffff 	.word	0x7c9fffff

0800f49c <_strtod_r>:
 800f49c:	4b01      	ldr	r3, [pc, #4]	@ (800f4a4 <_strtod_r+0x8>)
 800f49e:	f7ff ba63 	b.w	800e968 <_strtod_l>
 800f4a2:	bf00      	nop
 800f4a4:	2400006c 	.word	0x2400006c

0800f4a8 <_strtol_l.isra.0>:
 800f4a8:	2b24      	cmp	r3, #36	@ 0x24
 800f4aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4ae:	4686      	mov	lr, r0
 800f4b0:	4690      	mov	r8, r2
 800f4b2:	d801      	bhi.n	800f4b8 <_strtol_l.isra.0+0x10>
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d106      	bne.n	800f4c6 <_strtol_l.isra.0+0x1e>
 800f4b8:	f7fd fe7a 	bl	800d1b0 <__errno>
 800f4bc:	2316      	movs	r3, #22
 800f4be:	6003      	str	r3, [r0, #0]
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4c6:	4834      	ldr	r0, [pc, #208]	@ (800f598 <_strtol_l.isra.0+0xf0>)
 800f4c8:	460d      	mov	r5, r1
 800f4ca:	462a      	mov	r2, r5
 800f4cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f4d0:	5d06      	ldrb	r6, [r0, r4]
 800f4d2:	f016 0608 	ands.w	r6, r6, #8
 800f4d6:	d1f8      	bne.n	800f4ca <_strtol_l.isra.0+0x22>
 800f4d8:	2c2d      	cmp	r4, #45	@ 0x2d
 800f4da:	d110      	bne.n	800f4fe <_strtol_l.isra.0+0x56>
 800f4dc:	782c      	ldrb	r4, [r5, #0]
 800f4de:	2601      	movs	r6, #1
 800f4e0:	1c95      	adds	r5, r2, #2
 800f4e2:	f033 0210 	bics.w	r2, r3, #16
 800f4e6:	d115      	bne.n	800f514 <_strtol_l.isra.0+0x6c>
 800f4e8:	2c30      	cmp	r4, #48	@ 0x30
 800f4ea:	d10d      	bne.n	800f508 <_strtol_l.isra.0+0x60>
 800f4ec:	782a      	ldrb	r2, [r5, #0]
 800f4ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f4f2:	2a58      	cmp	r2, #88	@ 0x58
 800f4f4:	d108      	bne.n	800f508 <_strtol_l.isra.0+0x60>
 800f4f6:	786c      	ldrb	r4, [r5, #1]
 800f4f8:	3502      	adds	r5, #2
 800f4fa:	2310      	movs	r3, #16
 800f4fc:	e00a      	b.n	800f514 <_strtol_l.isra.0+0x6c>
 800f4fe:	2c2b      	cmp	r4, #43	@ 0x2b
 800f500:	bf04      	itt	eq
 800f502:	782c      	ldrbeq	r4, [r5, #0]
 800f504:	1c95      	addeq	r5, r2, #2
 800f506:	e7ec      	b.n	800f4e2 <_strtol_l.isra.0+0x3a>
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d1f6      	bne.n	800f4fa <_strtol_l.isra.0+0x52>
 800f50c:	2c30      	cmp	r4, #48	@ 0x30
 800f50e:	bf14      	ite	ne
 800f510:	230a      	movne	r3, #10
 800f512:	2308      	moveq	r3, #8
 800f514:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f518:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f51c:	2200      	movs	r2, #0
 800f51e:	fbbc f9f3 	udiv	r9, ip, r3
 800f522:	4610      	mov	r0, r2
 800f524:	fb03 ca19 	mls	sl, r3, r9, ip
 800f528:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f52c:	2f09      	cmp	r7, #9
 800f52e:	d80f      	bhi.n	800f550 <_strtol_l.isra.0+0xa8>
 800f530:	463c      	mov	r4, r7
 800f532:	42a3      	cmp	r3, r4
 800f534:	dd1b      	ble.n	800f56e <_strtol_l.isra.0+0xc6>
 800f536:	1c57      	adds	r7, r2, #1
 800f538:	d007      	beq.n	800f54a <_strtol_l.isra.0+0xa2>
 800f53a:	4581      	cmp	r9, r0
 800f53c:	d314      	bcc.n	800f568 <_strtol_l.isra.0+0xc0>
 800f53e:	d101      	bne.n	800f544 <_strtol_l.isra.0+0x9c>
 800f540:	45a2      	cmp	sl, r4
 800f542:	db11      	blt.n	800f568 <_strtol_l.isra.0+0xc0>
 800f544:	fb00 4003 	mla	r0, r0, r3, r4
 800f548:	2201      	movs	r2, #1
 800f54a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f54e:	e7eb      	b.n	800f528 <_strtol_l.isra.0+0x80>
 800f550:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f554:	2f19      	cmp	r7, #25
 800f556:	d801      	bhi.n	800f55c <_strtol_l.isra.0+0xb4>
 800f558:	3c37      	subs	r4, #55	@ 0x37
 800f55a:	e7ea      	b.n	800f532 <_strtol_l.isra.0+0x8a>
 800f55c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f560:	2f19      	cmp	r7, #25
 800f562:	d804      	bhi.n	800f56e <_strtol_l.isra.0+0xc6>
 800f564:	3c57      	subs	r4, #87	@ 0x57
 800f566:	e7e4      	b.n	800f532 <_strtol_l.isra.0+0x8a>
 800f568:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f56c:	e7ed      	b.n	800f54a <_strtol_l.isra.0+0xa2>
 800f56e:	1c53      	adds	r3, r2, #1
 800f570:	d108      	bne.n	800f584 <_strtol_l.isra.0+0xdc>
 800f572:	2322      	movs	r3, #34	@ 0x22
 800f574:	f8ce 3000 	str.w	r3, [lr]
 800f578:	4660      	mov	r0, ip
 800f57a:	f1b8 0f00 	cmp.w	r8, #0
 800f57e:	d0a0      	beq.n	800f4c2 <_strtol_l.isra.0+0x1a>
 800f580:	1e69      	subs	r1, r5, #1
 800f582:	e006      	b.n	800f592 <_strtol_l.isra.0+0xea>
 800f584:	b106      	cbz	r6, 800f588 <_strtol_l.isra.0+0xe0>
 800f586:	4240      	negs	r0, r0
 800f588:	f1b8 0f00 	cmp.w	r8, #0
 800f58c:	d099      	beq.n	800f4c2 <_strtol_l.isra.0+0x1a>
 800f58e:	2a00      	cmp	r2, #0
 800f590:	d1f6      	bne.n	800f580 <_strtol_l.isra.0+0xd8>
 800f592:	f8c8 1000 	str.w	r1, [r8]
 800f596:	e794      	b.n	800f4c2 <_strtol_l.isra.0+0x1a>
 800f598:	08010d29 	.word	0x08010d29

0800f59c <_strtol_r>:
 800f59c:	f7ff bf84 	b.w	800f4a8 <_strtol_l.isra.0>

0800f5a0 <__ssputs_r>:
 800f5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a4:	688e      	ldr	r6, [r1, #8]
 800f5a6:	461f      	mov	r7, r3
 800f5a8:	42be      	cmp	r6, r7
 800f5aa:	680b      	ldr	r3, [r1, #0]
 800f5ac:	4682      	mov	sl, r0
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	4690      	mov	r8, r2
 800f5b2:	d82d      	bhi.n	800f610 <__ssputs_r+0x70>
 800f5b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f5bc:	d026      	beq.n	800f60c <__ssputs_r+0x6c>
 800f5be:	6965      	ldr	r5, [r4, #20]
 800f5c0:	6909      	ldr	r1, [r1, #16]
 800f5c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5c6:	eba3 0901 	sub.w	r9, r3, r1
 800f5ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5ce:	1c7b      	adds	r3, r7, #1
 800f5d0:	444b      	add	r3, r9
 800f5d2:	106d      	asrs	r5, r5, #1
 800f5d4:	429d      	cmp	r5, r3
 800f5d6:	bf38      	it	cc
 800f5d8:	461d      	movcc	r5, r3
 800f5da:	0553      	lsls	r3, r2, #21
 800f5dc:	d527      	bpl.n	800f62e <__ssputs_r+0x8e>
 800f5de:	4629      	mov	r1, r5
 800f5e0:	f7fe fc74 	bl	800decc <_malloc_r>
 800f5e4:	4606      	mov	r6, r0
 800f5e6:	b360      	cbz	r0, 800f642 <__ssputs_r+0xa2>
 800f5e8:	6921      	ldr	r1, [r4, #16]
 800f5ea:	464a      	mov	r2, r9
 800f5ec:	f000 fbee 	bl	800fdcc <memcpy>
 800f5f0:	89a3      	ldrh	r3, [r4, #12]
 800f5f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f5f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5fa:	81a3      	strh	r3, [r4, #12]
 800f5fc:	6126      	str	r6, [r4, #16]
 800f5fe:	6165      	str	r5, [r4, #20]
 800f600:	444e      	add	r6, r9
 800f602:	eba5 0509 	sub.w	r5, r5, r9
 800f606:	6026      	str	r6, [r4, #0]
 800f608:	60a5      	str	r5, [r4, #8]
 800f60a:	463e      	mov	r6, r7
 800f60c:	42be      	cmp	r6, r7
 800f60e:	d900      	bls.n	800f612 <__ssputs_r+0x72>
 800f610:	463e      	mov	r6, r7
 800f612:	6820      	ldr	r0, [r4, #0]
 800f614:	4632      	mov	r2, r6
 800f616:	4641      	mov	r1, r8
 800f618:	f000 fb9c 	bl	800fd54 <memmove>
 800f61c:	68a3      	ldr	r3, [r4, #8]
 800f61e:	1b9b      	subs	r3, r3, r6
 800f620:	60a3      	str	r3, [r4, #8]
 800f622:	6823      	ldr	r3, [r4, #0]
 800f624:	4433      	add	r3, r6
 800f626:	6023      	str	r3, [r4, #0]
 800f628:	2000      	movs	r0, #0
 800f62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f62e:	462a      	mov	r2, r5
 800f630:	f000 ff5f 	bl	80104f2 <_realloc_r>
 800f634:	4606      	mov	r6, r0
 800f636:	2800      	cmp	r0, #0
 800f638:	d1e0      	bne.n	800f5fc <__ssputs_r+0x5c>
 800f63a:	6921      	ldr	r1, [r4, #16]
 800f63c:	4650      	mov	r0, sl
 800f63e:	f7fe fbd1 	bl	800dde4 <_free_r>
 800f642:	230c      	movs	r3, #12
 800f644:	f8ca 3000 	str.w	r3, [sl]
 800f648:	89a3      	ldrh	r3, [r4, #12]
 800f64a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f64e:	81a3      	strh	r3, [r4, #12]
 800f650:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f654:	e7e9      	b.n	800f62a <__ssputs_r+0x8a>
	...

0800f658 <_svfiprintf_r>:
 800f658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	4698      	mov	r8, r3
 800f65e:	898b      	ldrh	r3, [r1, #12]
 800f660:	061b      	lsls	r3, r3, #24
 800f662:	b09d      	sub	sp, #116	@ 0x74
 800f664:	4607      	mov	r7, r0
 800f666:	460d      	mov	r5, r1
 800f668:	4614      	mov	r4, r2
 800f66a:	d510      	bpl.n	800f68e <_svfiprintf_r+0x36>
 800f66c:	690b      	ldr	r3, [r1, #16]
 800f66e:	b973      	cbnz	r3, 800f68e <_svfiprintf_r+0x36>
 800f670:	2140      	movs	r1, #64	@ 0x40
 800f672:	f7fe fc2b 	bl	800decc <_malloc_r>
 800f676:	6028      	str	r0, [r5, #0]
 800f678:	6128      	str	r0, [r5, #16]
 800f67a:	b930      	cbnz	r0, 800f68a <_svfiprintf_r+0x32>
 800f67c:	230c      	movs	r3, #12
 800f67e:	603b      	str	r3, [r7, #0]
 800f680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f684:	b01d      	add	sp, #116	@ 0x74
 800f686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68a:	2340      	movs	r3, #64	@ 0x40
 800f68c:	616b      	str	r3, [r5, #20]
 800f68e:	2300      	movs	r3, #0
 800f690:	9309      	str	r3, [sp, #36]	@ 0x24
 800f692:	2320      	movs	r3, #32
 800f694:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f698:	f8cd 800c 	str.w	r8, [sp, #12]
 800f69c:	2330      	movs	r3, #48	@ 0x30
 800f69e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f83c <_svfiprintf_r+0x1e4>
 800f6a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f6a6:	f04f 0901 	mov.w	r9, #1
 800f6aa:	4623      	mov	r3, r4
 800f6ac:	469a      	mov	sl, r3
 800f6ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6b2:	b10a      	cbz	r2, 800f6b8 <_svfiprintf_r+0x60>
 800f6b4:	2a25      	cmp	r2, #37	@ 0x25
 800f6b6:	d1f9      	bne.n	800f6ac <_svfiprintf_r+0x54>
 800f6b8:	ebba 0b04 	subs.w	fp, sl, r4
 800f6bc:	d00b      	beq.n	800f6d6 <_svfiprintf_r+0x7e>
 800f6be:	465b      	mov	r3, fp
 800f6c0:	4622      	mov	r2, r4
 800f6c2:	4629      	mov	r1, r5
 800f6c4:	4638      	mov	r0, r7
 800f6c6:	f7ff ff6b 	bl	800f5a0 <__ssputs_r>
 800f6ca:	3001      	adds	r0, #1
 800f6cc:	f000 80a7 	beq.w	800f81e <_svfiprintf_r+0x1c6>
 800f6d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6d2:	445a      	add	r2, fp
 800f6d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800f6d6:	f89a 3000 	ldrb.w	r3, [sl]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f000 809f 	beq.w	800f81e <_svfiprintf_r+0x1c6>
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f6e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ea:	f10a 0a01 	add.w	sl, sl, #1
 800f6ee:	9304      	str	r3, [sp, #16]
 800f6f0:	9307      	str	r3, [sp, #28]
 800f6f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f6f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6f8:	4654      	mov	r4, sl
 800f6fa:	2205      	movs	r2, #5
 800f6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f700:	484e      	ldr	r0, [pc, #312]	@ (800f83c <_svfiprintf_r+0x1e4>)
 800f702:	f7f0 fded 	bl	80002e0 <memchr>
 800f706:	9a04      	ldr	r2, [sp, #16]
 800f708:	b9d8      	cbnz	r0, 800f742 <_svfiprintf_r+0xea>
 800f70a:	06d0      	lsls	r0, r2, #27
 800f70c:	bf44      	itt	mi
 800f70e:	2320      	movmi	r3, #32
 800f710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f714:	0711      	lsls	r1, r2, #28
 800f716:	bf44      	itt	mi
 800f718:	232b      	movmi	r3, #43	@ 0x2b
 800f71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f71e:	f89a 3000 	ldrb.w	r3, [sl]
 800f722:	2b2a      	cmp	r3, #42	@ 0x2a
 800f724:	d015      	beq.n	800f752 <_svfiprintf_r+0xfa>
 800f726:	9a07      	ldr	r2, [sp, #28]
 800f728:	4654      	mov	r4, sl
 800f72a:	2000      	movs	r0, #0
 800f72c:	f04f 0c0a 	mov.w	ip, #10
 800f730:	4621      	mov	r1, r4
 800f732:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f736:	3b30      	subs	r3, #48	@ 0x30
 800f738:	2b09      	cmp	r3, #9
 800f73a:	d94b      	bls.n	800f7d4 <_svfiprintf_r+0x17c>
 800f73c:	b1b0      	cbz	r0, 800f76c <_svfiprintf_r+0x114>
 800f73e:	9207      	str	r2, [sp, #28]
 800f740:	e014      	b.n	800f76c <_svfiprintf_r+0x114>
 800f742:	eba0 0308 	sub.w	r3, r0, r8
 800f746:	fa09 f303 	lsl.w	r3, r9, r3
 800f74a:	4313      	orrs	r3, r2
 800f74c:	9304      	str	r3, [sp, #16]
 800f74e:	46a2      	mov	sl, r4
 800f750:	e7d2      	b.n	800f6f8 <_svfiprintf_r+0xa0>
 800f752:	9b03      	ldr	r3, [sp, #12]
 800f754:	1d19      	adds	r1, r3, #4
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	9103      	str	r1, [sp, #12]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	bfbb      	ittet	lt
 800f75e:	425b      	neglt	r3, r3
 800f760:	f042 0202 	orrlt.w	r2, r2, #2
 800f764:	9307      	strge	r3, [sp, #28]
 800f766:	9307      	strlt	r3, [sp, #28]
 800f768:	bfb8      	it	lt
 800f76a:	9204      	strlt	r2, [sp, #16]
 800f76c:	7823      	ldrb	r3, [r4, #0]
 800f76e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f770:	d10a      	bne.n	800f788 <_svfiprintf_r+0x130>
 800f772:	7863      	ldrb	r3, [r4, #1]
 800f774:	2b2a      	cmp	r3, #42	@ 0x2a
 800f776:	d132      	bne.n	800f7de <_svfiprintf_r+0x186>
 800f778:	9b03      	ldr	r3, [sp, #12]
 800f77a:	1d1a      	adds	r2, r3, #4
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	9203      	str	r2, [sp, #12]
 800f780:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f784:	3402      	adds	r4, #2
 800f786:	9305      	str	r3, [sp, #20]
 800f788:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f84c <_svfiprintf_r+0x1f4>
 800f78c:	7821      	ldrb	r1, [r4, #0]
 800f78e:	2203      	movs	r2, #3
 800f790:	4650      	mov	r0, sl
 800f792:	f7f0 fda5 	bl	80002e0 <memchr>
 800f796:	b138      	cbz	r0, 800f7a8 <_svfiprintf_r+0x150>
 800f798:	9b04      	ldr	r3, [sp, #16]
 800f79a:	eba0 000a 	sub.w	r0, r0, sl
 800f79e:	2240      	movs	r2, #64	@ 0x40
 800f7a0:	4082      	lsls	r2, r0
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	3401      	adds	r4, #1
 800f7a6:	9304      	str	r3, [sp, #16]
 800f7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7ac:	4824      	ldr	r0, [pc, #144]	@ (800f840 <_svfiprintf_r+0x1e8>)
 800f7ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f7b2:	2206      	movs	r2, #6
 800f7b4:	f7f0 fd94 	bl	80002e0 <memchr>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	d036      	beq.n	800f82a <_svfiprintf_r+0x1d2>
 800f7bc:	4b21      	ldr	r3, [pc, #132]	@ (800f844 <_svfiprintf_r+0x1ec>)
 800f7be:	bb1b      	cbnz	r3, 800f808 <_svfiprintf_r+0x1b0>
 800f7c0:	9b03      	ldr	r3, [sp, #12]
 800f7c2:	3307      	adds	r3, #7
 800f7c4:	f023 0307 	bic.w	r3, r3, #7
 800f7c8:	3308      	adds	r3, #8
 800f7ca:	9303      	str	r3, [sp, #12]
 800f7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7ce:	4433      	add	r3, r6
 800f7d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7d2:	e76a      	b.n	800f6aa <_svfiprintf_r+0x52>
 800f7d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7d8:	460c      	mov	r4, r1
 800f7da:	2001      	movs	r0, #1
 800f7dc:	e7a8      	b.n	800f730 <_svfiprintf_r+0xd8>
 800f7de:	2300      	movs	r3, #0
 800f7e0:	3401      	adds	r4, #1
 800f7e2:	9305      	str	r3, [sp, #20]
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	f04f 0c0a 	mov.w	ip, #10
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7f0:	3a30      	subs	r2, #48	@ 0x30
 800f7f2:	2a09      	cmp	r2, #9
 800f7f4:	d903      	bls.n	800f7fe <_svfiprintf_r+0x1a6>
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d0c6      	beq.n	800f788 <_svfiprintf_r+0x130>
 800f7fa:	9105      	str	r1, [sp, #20]
 800f7fc:	e7c4      	b.n	800f788 <_svfiprintf_r+0x130>
 800f7fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800f802:	4604      	mov	r4, r0
 800f804:	2301      	movs	r3, #1
 800f806:	e7f0      	b.n	800f7ea <_svfiprintf_r+0x192>
 800f808:	ab03      	add	r3, sp, #12
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	462a      	mov	r2, r5
 800f80e:	4b0e      	ldr	r3, [pc, #56]	@ (800f848 <_svfiprintf_r+0x1f0>)
 800f810:	a904      	add	r1, sp, #16
 800f812:	4638      	mov	r0, r7
 800f814:	f7fc fd94 	bl	800c340 <_printf_float>
 800f818:	1c42      	adds	r2, r0, #1
 800f81a:	4606      	mov	r6, r0
 800f81c:	d1d6      	bne.n	800f7cc <_svfiprintf_r+0x174>
 800f81e:	89ab      	ldrh	r3, [r5, #12]
 800f820:	065b      	lsls	r3, r3, #25
 800f822:	f53f af2d 	bmi.w	800f680 <_svfiprintf_r+0x28>
 800f826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f828:	e72c      	b.n	800f684 <_svfiprintf_r+0x2c>
 800f82a:	ab03      	add	r3, sp, #12
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	462a      	mov	r2, r5
 800f830:	4b05      	ldr	r3, [pc, #20]	@ (800f848 <_svfiprintf_r+0x1f0>)
 800f832:	a904      	add	r1, sp, #16
 800f834:	4638      	mov	r0, r7
 800f836:	f7fd f80b 	bl	800c850 <_printf_i>
 800f83a:	e7ed      	b.n	800f818 <_svfiprintf_r+0x1c0>
 800f83c:	08010b25 	.word	0x08010b25
 800f840:	08010b2f 	.word	0x08010b2f
 800f844:	0800c341 	.word	0x0800c341
 800f848:	0800f5a1 	.word	0x0800f5a1
 800f84c:	08010b2b 	.word	0x08010b2b

0800f850 <__sfputc_r>:
 800f850:	6893      	ldr	r3, [r2, #8]
 800f852:	3b01      	subs	r3, #1
 800f854:	2b00      	cmp	r3, #0
 800f856:	b410      	push	{r4}
 800f858:	6093      	str	r3, [r2, #8]
 800f85a:	da08      	bge.n	800f86e <__sfputc_r+0x1e>
 800f85c:	6994      	ldr	r4, [r2, #24]
 800f85e:	42a3      	cmp	r3, r4
 800f860:	db01      	blt.n	800f866 <__sfputc_r+0x16>
 800f862:	290a      	cmp	r1, #10
 800f864:	d103      	bne.n	800f86e <__sfputc_r+0x1e>
 800f866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f86a:	f000 b9df 	b.w	800fc2c <__swbuf_r>
 800f86e:	6813      	ldr	r3, [r2, #0]
 800f870:	1c58      	adds	r0, r3, #1
 800f872:	6010      	str	r0, [r2, #0]
 800f874:	7019      	strb	r1, [r3, #0]
 800f876:	4608      	mov	r0, r1
 800f878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f87c:	4770      	bx	lr

0800f87e <__sfputs_r>:
 800f87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f880:	4606      	mov	r6, r0
 800f882:	460f      	mov	r7, r1
 800f884:	4614      	mov	r4, r2
 800f886:	18d5      	adds	r5, r2, r3
 800f888:	42ac      	cmp	r4, r5
 800f88a:	d101      	bne.n	800f890 <__sfputs_r+0x12>
 800f88c:	2000      	movs	r0, #0
 800f88e:	e007      	b.n	800f8a0 <__sfputs_r+0x22>
 800f890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f894:	463a      	mov	r2, r7
 800f896:	4630      	mov	r0, r6
 800f898:	f7ff ffda 	bl	800f850 <__sfputc_r>
 800f89c:	1c43      	adds	r3, r0, #1
 800f89e:	d1f3      	bne.n	800f888 <__sfputs_r+0xa>
 800f8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8a4 <_vfiprintf_r>:
 800f8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a8:	460d      	mov	r5, r1
 800f8aa:	b09d      	sub	sp, #116	@ 0x74
 800f8ac:	4614      	mov	r4, r2
 800f8ae:	4698      	mov	r8, r3
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	b118      	cbz	r0, 800f8bc <_vfiprintf_r+0x18>
 800f8b4:	6a03      	ldr	r3, [r0, #32]
 800f8b6:	b90b      	cbnz	r3, 800f8bc <_vfiprintf_r+0x18>
 800f8b8:	f7fd fb7a 	bl	800cfb0 <__sinit>
 800f8bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8be:	07d9      	lsls	r1, r3, #31
 800f8c0:	d405      	bmi.n	800f8ce <_vfiprintf_r+0x2a>
 800f8c2:	89ab      	ldrh	r3, [r5, #12]
 800f8c4:	059a      	lsls	r2, r3, #22
 800f8c6:	d402      	bmi.n	800f8ce <_vfiprintf_r+0x2a>
 800f8c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8ca:	f7fd fc9c 	bl	800d206 <__retarget_lock_acquire_recursive>
 800f8ce:	89ab      	ldrh	r3, [r5, #12]
 800f8d0:	071b      	lsls	r3, r3, #28
 800f8d2:	d501      	bpl.n	800f8d8 <_vfiprintf_r+0x34>
 800f8d4:	692b      	ldr	r3, [r5, #16]
 800f8d6:	b99b      	cbnz	r3, 800f900 <_vfiprintf_r+0x5c>
 800f8d8:	4629      	mov	r1, r5
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f000 f9e4 	bl	800fca8 <__swsetup_r>
 800f8e0:	b170      	cbz	r0, 800f900 <_vfiprintf_r+0x5c>
 800f8e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8e4:	07dc      	lsls	r4, r3, #31
 800f8e6:	d504      	bpl.n	800f8f2 <_vfiprintf_r+0x4e>
 800f8e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8ec:	b01d      	add	sp, #116	@ 0x74
 800f8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f2:	89ab      	ldrh	r3, [r5, #12]
 800f8f4:	0598      	lsls	r0, r3, #22
 800f8f6:	d4f7      	bmi.n	800f8e8 <_vfiprintf_r+0x44>
 800f8f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8fa:	f7fd fc85 	bl	800d208 <__retarget_lock_release_recursive>
 800f8fe:	e7f3      	b.n	800f8e8 <_vfiprintf_r+0x44>
 800f900:	2300      	movs	r3, #0
 800f902:	9309      	str	r3, [sp, #36]	@ 0x24
 800f904:	2320      	movs	r3, #32
 800f906:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f90a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f90e:	2330      	movs	r3, #48	@ 0x30
 800f910:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fac0 <_vfiprintf_r+0x21c>
 800f914:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f918:	f04f 0901 	mov.w	r9, #1
 800f91c:	4623      	mov	r3, r4
 800f91e:	469a      	mov	sl, r3
 800f920:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f924:	b10a      	cbz	r2, 800f92a <_vfiprintf_r+0x86>
 800f926:	2a25      	cmp	r2, #37	@ 0x25
 800f928:	d1f9      	bne.n	800f91e <_vfiprintf_r+0x7a>
 800f92a:	ebba 0b04 	subs.w	fp, sl, r4
 800f92e:	d00b      	beq.n	800f948 <_vfiprintf_r+0xa4>
 800f930:	465b      	mov	r3, fp
 800f932:	4622      	mov	r2, r4
 800f934:	4629      	mov	r1, r5
 800f936:	4630      	mov	r0, r6
 800f938:	f7ff ffa1 	bl	800f87e <__sfputs_r>
 800f93c:	3001      	adds	r0, #1
 800f93e:	f000 80a7 	beq.w	800fa90 <_vfiprintf_r+0x1ec>
 800f942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f944:	445a      	add	r2, fp
 800f946:	9209      	str	r2, [sp, #36]	@ 0x24
 800f948:	f89a 3000 	ldrb.w	r3, [sl]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f000 809f 	beq.w	800fa90 <_vfiprintf_r+0x1ec>
 800f952:	2300      	movs	r3, #0
 800f954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f95c:	f10a 0a01 	add.w	sl, sl, #1
 800f960:	9304      	str	r3, [sp, #16]
 800f962:	9307      	str	r3, [sp, #28]
 800f964:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f968:	931a      	str	r3, [sp, #104]	@ 0x68
 800f96a:	4654      	mov	r4, sl
 800f96c:	2205      	movs	r2, #5
 800f96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f972:	4853      	ldr	r0, [pc, #332]	@ (800fac0 <_vfiprintf_r+0x21c>)
 800f974:	f7f0 fcb4 	bl	80002e0 <memchr>
 800f978:	9a04      	ldr	r2, [sp, #16]
 800f97a:	b9d8      	cbnz	r0, 800f9b4 <_vfiprintf_r+0x110>
 800f97c:	06d1      	lsls	r1, r2, #27
 800f97e:	bf44      	itt	mi
 800f980:	2320      	movmi	r3, #32
 800f982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f986:	0713      	lsls	r3, r2, #28
 800f988:	bf44      	itt	mi
 800f98a:	232b      	movmi	r3, #43	@ 0x2b
 800f98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f990:	f89a 3000 	ldrb.w	r3, [sl]
 800f994:	2b2a      	cmp	r3, #42	@ 0x2a
 800f996:	d015      	beq.n	800f9c4 <_vfiprintf_r+0x120>
 800f998:	9a07      	ldr	r2, [sp, #28]
 800f99a:	4654      	mov	r4, sl
 800f99c:	2000      	movs	r0, #0
 800f99e:	f04f 0c0a 	mov.w	ip, #10
 800f9a2:	4621      	mov	r1, r4
 800f9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9a8:	3b30      	subs	r3, #48	@ 0x30
 800f9aa:	2b09      	cmp	r3, #9
 800f9ac:	d94b      	bls.n	800fa46 <_vfiprintf_r+0x1a2>
 800f9ae:	b1b0      	cbz	r0, 800f9de <_vfiprintf_r+0x13a>
 800f9b0:	9207      	str	r2, [sp, #28]
 800f9b2:	e014      	b.n	800f9de <_vfiprintf_r+0x13a>
 800f9b4:	eba0 0308 	sub.w	r3, r0, r8
 800f9b8:	fa09 f303 	lsl.w	r3, r9, r3
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	9304      	str	r3, [sp, #16]
 800f9c0:	46a2      	mov	sl, r4
 800f9c2:	e7d2      	b.n	800f96a <_vfiprintf_r+0xc6>
 800f9c4:	9b03      	ldr	r3, [sp, #12]
 800f9c6:	1d19      	adds	r1, r3, #4
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	9103      	str	r1, [sp, #12]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	bfbb      	ittet	lt
 800f9d0:	425b      	neglt	r3, r3
 800f9d2:	f042 0202 	orrlt.w	r2, r2, #2
 800f9d6:	9307      	strge	r3, [sp, #28]
 800f9d8:	9307      	strlt	r3, [sp, #28]
 800f9da:	bfb8      	it	lt
 800f9dc:	9204      	strlt	r2, [sp, #16]
 800f9de:	7823      	ldrb	r3, [r4, #0]
 800f9e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9e2:	d10a      	bne.n	800f9fa <_vfiprintf_r+0x156>
 800f9e4:	7863      	ldrb	r3, [r4, #1]
 800f9e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9e8:	d132      	bne.n	800fa50 <_vfiprintf_r+0x1ac>
 800f9ea:	9b03      	ldr	r3, [sp, #12]
 800f9ec:	1d1a      	adds	r2, r3, #4
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	9203      	str	r2, [sp, #12]
 800f9f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9f6:	3402      	adds	r4, #2
 800f9f8:	9305      	str	r3, [sp, #20]
 800f9fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fad0 <_vfiprintf_r+0x22c>
 800f9fe:	7821      	ldrb	r1, [r4, #0]
 800fa00:	2203      	movs	r2, #3
 800fa02:	4650      	mov	r0, sl
 800fa04:	f7f0 fc6c 	bl	80002e0 <memchr>
 800fa08:	b138      	cbz	r0, 800fa1a <_vfiprintf_r+0x176>
 800fa0a:	9b04      	ldr	r3, [sp, #16]
 800fa0c:	eba0 000a 	sub.w	r0, r0, sl
 800fa10:	2240      	movs	r2, #64	@ 0x40
 800fa12:	4082      	lsls	r2, r0
 800fa14:	4313      	orrs	r3, r2
 800fa16:	3401      	adds	r4, #1
 800fa18:	9304      	str	r3, [sp, #16]
 800fa1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa1e:	4829      	ldr	r0, [pc, #164]	@ (800fac4 <_vfiprintf_r+0x220>)
 800fa20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa24:	2206      	movs	r2, #6
 800fa26:	f7f0 fc5b 	bl	80002e0 <memchr>
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	d03f      	beq.n	800faae <_vfiprintf_r+0x20a>
 800fa2e:	4b26      	ldr	r3, [pc, #152]	@ (800fac8 <_vfiprintf_r+0x224>)
 800fa30:	bb1b      	cbnz	r3, 800fa7a <_vfiprintf_r+0x1d6>
 800fa32:	9b03      	ldr	r3, [sp, #12]
 800fa34:	3307      	adds	r3, #7
 800fa36:	f023 0307 	bic.w	r3, r3, #7
 800fa3a:	3308      	adds	r3, #8
 800fa3c:	9303      	str	r3, [sp, #12]
 800fa3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa40:	443b      	add	r3, r7
 800fa42:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa44:	e76a      	b.n	800f91c <_vfiprintf_r+0x78>
 800fa46:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa4a:	460c      	mov	r4, r1
 800fa4c:	2001      	movs	r0, #1
 800fa4e:	e7a8      	b.n	800f9a2 <_vfiprintf_r+0xfe>
 800fa50:	2300      	movs	r3, #0
 800fa52:	3401      	adds	r4, #1
 800fa54:	9305      	str	r3, [sp, #20]
 800fa56:	4619      	mov	r1, r3
 800fa58:	f04f 0c0a 	mov.w	ip, #10
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa62:	3a30      	subs	r2, #48	@ 0x30
 800fa64:	2a09      	cmp	r2, #9
 800fa66:	d903      	bls.n	800fa70 <_vfiprintf_r+0x1cc>
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d0c6      	beq.n	800f9fa <_vfiprintf_r+0x156>
 800fa6c:	9105      	str	r1, [sp, #20]
 800fa6e:	e7c4      	b.n	800f9fa <_vfiprintf_r+0x156>
 800fa70:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa74:	4604      	mov	r4, r0
 800fa76:	2301      	movs	r3, #1
 800fa78:	e7f0      	b.n	800fa5c <_vfiprintf_r+0x1b8>
 800fa7a:	ab03      	add	r3, sp, #12
 800fa7c:	9300      	str	r3, [sp, #0]
 800fa7e:	462a      	mov	r2, r5
 800fa80:	4b12      	ldr	r3, [pc, #72]	@ (800facc <_vfiprintf_r+0x228>)
 800fa82:	a904      	add	r1, sp, #16
 800fa84:	4630      	mov	r0, r6
 800fa86:	f7fc fc5b 	bl	800c340 <_printf_float>
 800fa8a:	4607      	mov	r7, r0
 800fa8c:	1c78      	adds	r0, r7, #1
 800fa8e:	d1d6      	bne.n	800fa3e <_vfiprintf_r+0x19a>
 800fa90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa92:	07d9      	lsls	r1, r3, #31
 800fa94:	d405      	bmi.n	800faa2 <_vfiprintf_r+0x1fe>
 800fa96:	89ab      	ldrh	r3, [r5, #12]
 800fa98:	059a      	lsls	r2, r3, #22
 800fa9a:	d402      	bmi.n	800faa2 <_vfiprintf_r+0x1fe>
 800fa9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa9e:	f7fd fbb3 	bl	800d208 <__retarget_lock_release_recursive>
 800faa2:	89ab      	ldrh	r3, [r5, #12]
 800faa4:	065b      	lsls	r3, r3, #25
 800faa6:	f53f af1f 	bmi.w	800f8e8 <_vfiprintf_r+0x44>
 800faaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800faac:	e71e      	b.n	800f8ec <_vfiprintf_r+0x48>
 800faae:	ab03      	add	r3, sp, #12
 800fab0:	9300      	str	r3, [sp, #0]
 800fab2:	462a      	mov	r2, r5
 800fab4:	4b05      	ldr	r3, [pc, #20]	@ (800facc <_vfiprintf_r+0x228>)
 800fab6:	a904      	add	r1, sp, #16
 800fab8:	4630      	mov	r0, r6
 800faba:	f7fc fec9 	bl	800c850 <_printf_i>
 800fabe:	e7e4      	b.n	800fa8a <_vfiprintf_r+0x1e6>
 800fac0:	08010b25 	.word	0x08010b25
 800fac4:	08010b2f 	.word	0x08010b2f
 800fac8:	0800c341 	.word	0x0800c341
 800facc:	0800f87f 	.word	0x0800f87f
 800fad0:	08010b2b 	.word	0x08010b2b

0800fad4 <__sflush_r>:
 800fad4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fadc:	0716      	lsls	r6, r2, #28
 800fade:	4605      	mov	r5, r0
 800fae0:	460c      	mov	r4, r1
 800fae2:	d454      	bmi.n	800fb8e <__sflush_r+0xba>
 800fae4:	684b      	ldr	r3, [r1, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	dc02      	bgt.n	800faf0 <__sflush_r+0x1c>
 800faea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800faec:	2b00      	cmp	r3, #0
 800faee:	dd48      	ble.n	800fb82 <__sflush_r+0xae>
 800faf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800faf2:	2e00      	cmp	r6, #0
 800faf4:	d045      	beq.n	800fb82 <__sflush_r+0xae>
 800faf6:	2300      	movs	r3, #0
 800faf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fafc:	682f      	ldr	r7, [r5, #0]
 800fafe:	6a21      	ldr	r1, [r4, #32]
 800fb00:	602b      	str	r3, [r5, #0]
 800fb02:	d030      	beq.n	800fb66 <__sflush_r+0x92>
 800fb04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fb06:	89a3      	ldrh	r3, [r4, #12]
 800fb08:	0759      	lsls	r1, r3, #29
 800fb0a:	d505      	bpl.n	800fb18 <__sflush_r+0x44>
 800fb0c:	6863      	ldr	r3, [r4, #4]
 800fb0e:	1ad2      	subs	r2, r2, r3
 800fb10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb12:	b10b      	cbz	r3, 800fb18 <__sflush_r+0x44>
 800fb14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fb16:	1ad2      	subs	r2, r2, r3
 800fb18:	2300      	movs	r3, #0
 800fb1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb1c:	6a21      	ldr	r1, [r4, #32]
 800fb1e:	4628      	mov	r0, r5
 800fb20:	47b0      	blx	r6
 800fb22:	1c43      	adds	r3, r0, #1
 800fb24:	89a3      	ldrh	r3, [r4, #12]
 800fb26:	d106      	bne.n	800fb36 <__sflush_r+0x62>
 800fb28:	6829      	ldr	r1, [r5, #0]
 800fb2a:	291d      	cmp	r1, #29
 800fb2c:	d82b      	bhi.n	800fb86 <__sflush_r+0xb2>
 800fb2e:	4a2a      	ldr	r2, [pc, #168]	@ (800fbd8 <__sflush_r+0x104>)
 800fb30:	40ca      	lsrs	r2, r1
 800fb32:	07d6      	lsls	r6, r2, #31
 800fb34:	d527      	bpl.n	800fb86 <__sflush_r+0xb2>
 800fb36:	2200      	movs	r2, #0
 800fb38:	6062      	str	r2, [r4, #4]
 800fb3a:	04d9      	lsls	r1, r3, #19
 800fb3c:	6922      	ldr	r2, [r4, #16]
 800fb3e:	6022      	str	r2, [r4, #0]
 800fb40:	d504      	bpl.n	800fb4c <__sflush_r+0x78>
 800fb42:	1c42      	adds	r2, r0, #1
 800fb44:	d101      	bne.n	800fb4a <__sflush_r+0x76>
 800fb46:	682b      	ldr	r3, [r5, #0]
 800fb48:	b903      	cbnz	r3, 800fb4c <__sflush_r+0x78>
 800fb4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb4e:	602f      	str	r7, [r5, #0]
 800fb50:	b1b9      	cbz	r1, 800fb82 <__sflush_r+0xae>
 800fb52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb56:	4299      	cmp	r1, r3
 800fb58:	d002      	beq.n	800fb60 <__sflush_r+0x8c>
 800fb5a:	4628      	mov	r0, r5
 800fb5c:	f7fe f942 	bl	800dde4 <_free_r>
 800fb60:	2300      	movs	r3, #0
 800fb62:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb64:	e00d      	b.n	800fb82 <__sflush_r+0xae>
 800fb66:	2301      	movs	r3, #1
 800fb68:	4628      	mov	r0, r5
 800fb6a:	47b0      	blx	r6
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	1c50      	adds	r0, r2, #1
 800fb70:	d1c9      	bne.n	800fb06 <__sflush_r+0x32>
 800fb72:	682b      	ldr	r3, [r5, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d0c6      	beq.n	800fb06 <__sflush_r+0x32>
 800fb78:	2b1d      	cmp	r3, #29
 800fb7a:	d001      	beq.n	800fb80 <__sflush_r+0xac>
 800fb7c:	2b16      	cmp	r3, #22
 800fb7e:	d11e      	bne.n	800fbbe <__sflush_r+0xea>
 800fb80:	602f      	str	r7, [r5, #0]
 800fb82:	2000      	movs	r0, #0
 800fb84:	e022      	b.n	800fbcc <__sflush_r+0xf8>
 800fb86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb8a:	b21b      	sxth	r3, r3
 800fb8c:	e01b      	b.n	800fbc6 <__sflush_r+0xf2>
 800fb8e:	690f      	ldr	r7, [r1, #16]
 800fb90:	2f00      	cmp	r7, #0
 800fb92:	d0f6      	beq.n	800fb82 <__sflush_r+0xae>
 800fb94:	0793      	lsls	r3, r2, #30
 800fb96:	680e      	ldr	r6, [r1, #0]
 800fb98:	bf08      	it	eq
 800fb9a:	694b      	ldreq	r3, [r1, #20]
 800fb9c:	600f      	str	r7, [r1, #0]
 800fb9e:	bf18      	it	ne
 800fba0:	2300      	movne	r3, #0
 800fba2:	eba6 0807 	sub.w	r8, r6, r7
 800fba6:	608b      	str	r3, [r1, #8]
 800fba8:	f1b8 0f00 	cmp.w	r8, #0
 800fbac:	dde9      	ble.n	800fb82 <__sflush_r+0xae>
 800fbae:	6a21      	ldr	r1, [r4, #32]
 800fbb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fbb2:	4643      	mov	r3, r8
 800fbb4:	463a      	mov	r2, r7
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	47b0      	blx	r6
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	dc08      	bgt.n	800fbd0 <__sflush_r+0xfc>
 800fbbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbc6:	81a3      	strh	r3, [r4, #12]
 800fbc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd0:	4407      	add	r7, r0
 800fbd2:	eba8 0800 	sub.w	r8, r8, r0
 800fbd6:	e7e7      	b.n	800fba8 <__sflush_r+0xd4>
 800fbd8:	20400001 	.word	0x20400001

0800fbdc <_fflush_r>:
 800fbdc:	b538      	push	{r3, r4, r5, lr}
 800fbde:	690b      	ldr	r3, [r1, #16]
 800fbe0:	4605      	mov	r5, r0
 800fbe2:	460c      	mov	r4, r1
 800fbe4:	b913      	cbnz	r3, 800fbec <_fflush_r+0x10>
 800fbe6:	2500      	movs	r5, #0
 800fbe8:	4628      	mov	r0, r5
 800fbea:	bd38      	pop	{r3, r4, r5, pc}
 800fbec:	b118      	cbz	r0, 800fbf6 <_fflush_r+0x1a>
 800fbee:	6a03      	ldr	r3, [r0, #32]
 800fbf0:	b90b      	cbnz	r3, 800fbf6 <_fflush_r+0x1a>
 800fbf2:	f7fd f9dd 	bl	800cfb0 <__sinit>
 800fbf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d0f3      	beq.n	800fbe6 <_fflush_r+0xa>
 800fbfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fc00:	07d0      	lsls	r0, r2, #31
 800fc02:	d404      	bmi.n	800fc0e <_fflush_r+0x32>
 800fc04:	0599      	lsls	r1, r3, #22
 800fc06:	d402      	bmi.n	800fc0e <_fflush_r+0x32>
 800fc08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc0a:	f7fd fafc 	bl	800d206 <__retarget_lock_acquire_recursive>
 800fc0e:	4628      	mov	r0, r5
 800fc10:	4621      	mov	r1, r4
 800fc12:	f7ff ff5f 	bl	800fad4 <__sflush_r>
 800fc16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc18:	07da      	lsls	r2, r3, #31
 800fc1a:	4605      	mov	r5, r0
 800fc1c:	d4e4      	bmi.n	800fbe8 <_fflush_r+0xc>
 800fc1e:	89a3      	ldrh	r3, [r4, #12]
 800fc20:	059b      	lsls	r3, r3, #22
 800fc22:	d4e1      	bmi.n	800fbe8 <_fflush_r+0xc>
 800fc24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc26:	f7fd faef 	bl	800d208 <__retarget_lock_release_recursive>
 800fc2a:	e7dd      	b.n	800fbe8 <_fflush_r+0xc>

0800fc2c <__swbuf_r>:
 800fc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc2e:	460e      	mov	r6, r1
 800fc30:	4614      	mov	r4, r2
 800fc32:	4605      	mov	r5, r0
 800fc34:	b118      	cbz	r0, 800fc3e <__swbuf_r+0x12>
 800fc36:	6a03      	ldr	r3, [r0, #32]
 800fc38:	b90b      	cbnz	r3, 800fc3e <__swbuf_r+0x12>
 800fc3a:	f7fd f9b9 	bl	800cfb0 <__sinit>
 800fc3e:	69a3      	ldr	r3, [r4, #24]
 800fc40:	60a3      	str	r3, [r4, #8]
 800fc42:	89a3      	ldrh	r3, [r4, #12]
 800fc44:	071a      	lsls	r2, r3, #28
 800fc46:	d501      	bpl.n	800fc4c <__swbuf_r+0x20>
 800fc48:	6923      	ldr	r3, [r4, #16]
 800fc4a:	b943      	cbnz	r3, 800fc5e <__swbuf_r+0x32>
 800fc4c:	4621      	mov	r1, r4
 800fc4e:	4628      	mov	r0, r5
 800fc50:	f000 f82a 	bl	800fca8 <__swsetup_r>
 800fc54:	b118      	cbz	r0, 800fc5e <__swbuf_r+0x32>
 800fc56:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fc5a:	4638      	mov	r0, r7
 800fc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	6922      	ldr	r2, [r4, #16]
 800fc62:	1a98      	subs	r0, r3, r2
 800fc64:	6963      	ldr	r3, [r4, #20]
 800fc66:	b2f6      	uxtb	r6, r6
 800fc68:	4283      	cmp	r3, r0
 800fc6a:	4637      	mov	r7, r6
 800fc6c:	dc05      	bgt.n	800fc7a <__swbuf_r+0x4e>
 800fc6e:	4621      	mov	r1, r4
 800fc70:	4628      	mov	r0, r5
 800fc72:	f7ff ffb3 	bl	800fbdc <_fflush_r>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	d1ed      	bne.n	800fc56 <__swbuf_r+0x2a>
 800fc7a:	68a3      	ldr	r3, [r4, #8]
 800fc7c:	3b01      	subs	r3, #1
 800fc7e:	60a3      	str	r3, [r4, #8]
 800fc80:	6823      	ldr	r3, [r4, #0]
 800fc82:	1c5a      	adds	r2, r3, #1
 800fc84:	6022      	str	r2, [r4, #0]
 800fc86:	701e      	strb	r6, [r3, #0]
 800fc88:	6962      	ldr	r2, [r4, #20]
 800fc8a:	1c43      	adds	r3, r0, #1
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d004      	beq.n	800fc9a <__swbuf_r+0x6e>
 800fc90:	89a3      	ldrh	r3, [r4, #12]
 800fc92:	07db      	lsls	r3, r3, #31
 800fc94:	d5e1      	bpl.n	800fc5a <__swbuf_r+0x2e>
 800fc96:	2e0a      	cmp	r6, #10
 800fc98:	d1df      	bne.n	800fc5a <__swbuf_r+0x2e>
 800fc9a:	4621      	mov	r1, r4
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	f7ff ff9d 	bl	800fbdc <_fflush_r>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d0d9      	beq.n	800fc5a <__swbuf_r+0x2e>
 800fca6:	e7d6      	b.n	800fc56 <__swbuf_r+0x2a>

0800fca8 <__swsetup_r>:
 800fca8:	b538      	push	{r3, r4, r5, lr}
 800fcaa:	4b29      	ldr	r3, [pc, #164]	@ (800fd50 <__swsetup_r+0xa8>)
 800fcac:	4605      	mov	r5, r0
 800fcae:	6818      	ldr	r0, [r3, #0]
 800fcb0:	460c      	mov	r4, r1
 800fcb2:	b118      	cbz	r0, 800fcbc <__swsetup_r+0x14>
 800fcb4:	6a03      	ldr	r3, [r0, #32]
 800fcb6:	b90b      	cbnz	r3, 800fcbc <__swsetup_r+0x14>
 800fcb8:	f7fd f97a 	bl	800cfb0 <__sinit>
 800fcbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcc0:	0719      	lsls	r1, r3, #28
 800fcc2:	d422      	bmi.n	800fd0a <__swsetup_r+0x62>
 800fcc4:	06da      	lsls	r2, r3, #27
 800fcc6:	d407      	bmi.n	800fcd8 <__swsetup_r+0x30>
 800fcc8:	2209      	movs	r2, #9
 800fcca:	602a      	str	r2, [r5, #0]
 800fccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcd0:	81a3      	strh	r3, [r4, #12]
 800fcd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fcd6:	e033      	b.n	800fd40 <__swsetup_r+0x98>
 800fcd8:	0758      	lsls	r0, r3, #29
 800fcda:	d512      	bpl.n	800fd02 <__swsetup_r+0x5a>
 800fcdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fcde:	b141      	cbz	r1, 800fcf2 <__swsetup_r+0x4a>
 800fce0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fce4:	4299      	cmp	r1, r3
 800fce6:	d002      	beq.n	800fcee <__swsetup_r+0x46>
 800fce8:	4628      	mov	r0, r5
 800fcea:	f7fe f87b 	bl	800dde4 <_free_r>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800fcf2:	89a3      	ldrh	r3, [r4, #12]
 800fcf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fcf8:	81a3      	strh	r3, [r4, #12]
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	6063      	str	r3, [r4, #4]
 800fcfe:	6923      	ldr	r3, [r4, #16]
 800fd00:	6023      	str	r3, [r4, #0]
 800fd02:	89a3      	ldrh	r3, [r4, #12]
 800fd04:	f043 0308 	orr.w	r3, r3, #8
 800fd08:	81a3      	strh	r3, [r4, #12]
 800fd0a:	6923      	ldr	r3, [r4, #16]
 800fd0c:	b94b      	cbnz	r3, 800fd22 <__swsetup_r+0x7a>
 800fd0e:	89a3      	ldrh	r3, [r4, #12]
 800fd10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fd14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd18:	d003      	beq.n	800fd22 <__swsetup_r+0x7a>
 800fd1a:	4621      	mov	r1, r4
 800fd1c:	4628      	mov	r0, r5
 800fd1e:	f000 fc49 	bl	80105b4 <__smakebuf_r>
 800fd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd26:	f013 0201 	ands.w	r2, r3, #1
 800fd2a:	d00a      	beq.n	800fd42 <__swsetup_r+0x9a>
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	60a2      	str	r2, [r4, #8]
 800fd30:	6962      	ldr	r2, [r4, #20]
 800fd32:	4252      	negs	r2, r2
 800fd34:	61a2      	str	r2, [r4, #24]
 800fd36:	6922      	ldr	r2, [r4, #16]
 800fd38:	b942      	cbnz	r2, 800fd4c <__swsetup_r+0xa4>
 800fd3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fd3e:	d1c5      	bne.n	800fccc <__swsetup_r+0x24>
 800fd40:	bd38      	pop	{r3, r4, r5, pc}
 800fd42:	0799      	lsls	r1, r3, #30
 800fd44:	bf58      	it	pl
 800fd46:	6962      	ldrpl	r2, [r4, #20]
 800fd48:	60a2      	str	r2, [r4, #8]
 800fd4a:	e7f4      	b.n	800fd36 <__swsetup_r+0x8e>
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	e7f7      	b.n	800fd40 <__swsetup_r+0x98>
 800fd50:	2400001c 	.word	0x2400001c

0800fd54 <memmove>:
 800fd54:	4288      	cmp	r0, r1
 800fd56:	b510      	push	{r4, lr}
 800fd58:	eb01 0402 	add.w	r4, r1, r2
 800fd5c:	d902      	bls.n	800fd64 <memmove+0x10>
 800fd5e:	4284      	cmp	r4, r0
 800fd60:	4623      	mov	r3, r4
 800fd62:	d807      	bhi.n	800fd74 <memmove+0x20>
 800fd64:	1e43      	subs	r3, r0, #1
 800fd66:	42a1      	cmp	r1, r4
 800fd68:	d008      	beq.n	800fd7c <memmove+0x28>
 800fd6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd72:	e7f8      	b.n	800fd66 <memmove+0x12>
 800fd74:	4402      	add	r2, r0
 800fd76:	4601      	mov	r1, r0
 800fd78:	428a      	cmp	r2, r1
 800fd7a:	d100      	bne.n	800fd7e <memmove+0x2a>
 800fd7c:	bd10      	pop	{r4, pc}
 800fd7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd86:	e7f7      	b.n	800fd78 <memmove+0x24>

0800fd88 <strncmp>:
 800fd88:	b510      	push	{r4, lr}
 800fd8a:	b16a      	cbz	r2, 800fda8 <strncmp+0x20>
 800fd8c:	3901      	subs	r1, #1
 800fd8e:	1884      	adds	r4, r0, r2
 800fd90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	d103      	bne.n	800fda4 <strncmp+0x1c>
 800fd9c:	42a0      	cmp	r0, r4
 800fd9e:	d001      	beq.n	800fda4 <strncmp+0x1c>
 800fda0:	2a00      	cmp	r2, #0
 800fda2:	d1f5      	bne.n	800fd90 <strncmp+0x8>
 800fda4:	1ad0      	subs	r0, r2, r3
 800fda6:	bd10      	pop	{r4, pc}
 800fda8:	4610      	mov	r0, r2
 800fdaa:	e7fc      	b.n	800fda6 <strncmp+0x1e>

0800fdac <_sbrk_r>:
 800fdac:	b538      	push	{r3, r4, r5, lr}
 800fdae:	4d06      	ldr	r5, [pc, #24]	@ (800fdc8 <_sbrk_r+0x1c>)
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	4608      	mov	r0, r1
 800fdb6:	602b      	str	r3, [r5, #0]
 800fdb8:	f7f1 fc12 	bl	80015e0 <_sbrk>
 800fdbc:	1c43      	adds	r3, r0, #1
 800fdbe:	d102      	bne.n	800fdc6 <_sbrk_r+0x1a>
 800fdc0:	682b      	ldr	r3, [r5, #0]
 800fdc2:	b103      	cbz	r3, 800fdc6 <_sbrk_r+0x1a>
 800fdc4:	6023      	str	r3, [r4, #0]
 800fdc6:	bd38      	pop	{r3, r4, r5, pc}
 800fdc8:	24003598 	.word	0x24003598

0800fdcc <memcpy>:
 800fdcc:	440a      	add	r2, r1
 800fdce:	4291      	cmp	r1, r2
 800fdd0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800fdd4:	d100      	bne.n	800fdd8 <memcpy+0xc>
 800fdd6:	4770      	bx	lr
 800fdd8:	b510      	push	{r4, lr}
 800fdda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fde2:	4291      	cmp	r1, r2
 800fde4:	d1f9      	bne.n	800fdda <memcpy+0xe>
 800fde6:	bd10      	pop	{r4, pc}

0800fde8 <nan>:
 800fde8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fdf0 <nan+0x8>
 800fdec:	4770      	bx	lr
 800fdee:	bf00      	nop
 800fdf0:	00000000 	.word	0x00000000
 800fdf4:	7ff80000 	.word	0x7ff80000

0800fdf8 <__assert_func>:
 800fdf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdfa:	4614      	mov	r4, r2
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	4b09      	ldr	r3, [pc, #36]	@ (800fe24 <__assert_func+0x2c>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4605      	mov	r5, r0
 800fe04:	68d8      	ldr	r0, [r3, #12]
 800fe06:	b14c      	cbz	r4, 800fe1c <__assert_func+0x24>
 800fe08:	4b07      	ldr	r3, [pc, #28]	@ (800fe28 <__assert_func+0x30>)
 800fe0a:	9100      	str	r1, [sp, #0]
 800fe0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe10:	4906      	ldr	r1, [pc, #24]	@ (800fe2c <__assert_func+0x34>)
 800fe12:	462b      	mov	r3, r5
 800fe14:	f7fd f8e4 	bl	800cfe0 <fiprintf>
 800fe18:	f000 fc2a 	bl	8010670 <abort>
 800fe1c:	4b04      	ldr	r3, [pc, #16]	@ (800fe30 <__assert_func+0x38>)
 800fe1e:	461c      	mov	r4, r3
 800fe20:	e7f3      	b.n	800fe0a <__assert_func+0x12>
 800fe22:	bf00      	nop
 800fe24:	2400001c 	.word	0x2400001c
 800fe28:	08010b3e 	.word	0x08010b3e
 800fe2c:	08010b4b 	.word	0x08010b4b
 800fe30:	08010b79 	.word	0x08010b79

0800fe34 <_calloc_r>:
 800fe34:	b570      	push	{r4, r5, r6, lr}
 800fe36:	fba1 5402 	umull	r5, r4, r1, r2
 800fe3a:	b934      	cbnz	r4, 800fe4a <_calloc_r+0x16>
 800fe3c:	4629      	mov	r1, r5
 800fe3e:	f7fe f845 	bl	800decc <_malloc_r>
 800fe42:	4606      	mov	r6, r0
 800fe44:	b928      	cbnz	r0, 800fe52 <_calloc_r+0x1e>
 800fe46:	4630      	mov	r0, r6
 800fe48:	bd70      	pop	{r4, r5, r6, pc}
 800fe4a:	220c      	movs	r2, #12
 800fe4c:	6002      	str	r2, [r0, #0]
 800fe4e:	2600      	movs	r6, #0
 800fe50:	e7f9      	b.n	800fe46 <_calloc_r+0x12>
 800fe52:	462a      	mov	r2, r5
 800fe54:	4621      	mov	r1, r4
 800fe56:	f7fd f958 	bl	800d10a <memset>
 800fe5a:	e7f4      	b.n	800fe46 <_calloc_r+0x12>

0800fe5c <rshift>:
 800fe5c:	6903      	ldr	r3, [r0, #16]
 800fe5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fe62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fe6a:	f100 0414 	add.w	r4, r0, #20
 800fe6e:	dd45      	ble.n	800fefc <rshift+0xa0>
 800fe70:	f011 011f 	ands.w	r1, r1, #31
 800fe74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fe78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fe7c:	d10c      	bne.n	800fe98 <rshift+0x3c>
 800fe7e:	f100 0710 	add.w	r7, r0, #16
 800fe82:	4629      	mov	r1, r5
 800fe84:	42b1      	cmp	r1, r6
 800fe86:	d334      	bcc.n	800fef2 <rshift+0x96>
 800fe88:	1a9b      	subs	r3, r3, r2
 800fe8a:	009b      	lsls	r3, r3, #2
 800fe8c:	1eea      	subs	r2, r5, #3
 800fe8e:	4296      	cmp	r6, r2
 800fe90:	bf38      	it	cc
 800fe92:	2300      	movcc	r3, #0
 800fe94:	4423      	add	r3, r4
 800fe96:	e015      	b.n	800fec4 <rshift+0x68>
 800fe98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fe9c:	f1c1 0820 	rsb	r8, r1, #32
 800fea0:	40cf      	lsrs	r7, r1
 800fea2:	f105 0e04 	add.w	lr, r5, #4
 800fea6:	46a1      	mov	r9, r4
 800fea8:	4576      	cmp	r6, lr
 800feaa:	46f4      	mov	ip, lr
 800feac:	d815      	bhi.n	800feda <rshift+0x7e>
 800feae:	1a9a      	subs	r2, r3, r2
 800feb0:	0092      	lsls	r2, r2, #2
 800feb2:	3a04      	subs	r2, #4
 800feb4:	3501      	adds	r5, #1
 800feb6:	42ae      	cmp	r6, r5
 800feb8:	bf38      	it	cc
 800feba:	2200      	movcc	r2, #0
 800febc:	18a3      	adds	r3, r4, r2
 800febe:	50a7      	str	r7, [r4, r2]
 800fec0:	b107      	cbz	r7, 800fec4 <rshift+0x68>
 800fec2:	3304      	adds	r3, #4
 800fec4:	1b1a      	subs	r2, r3, r4
 800fec6:	42a3      	cmp	r3, r4
 800fec8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fecc:	bf08      	it	eq
 800fece:	2300      	moveq	r3, #0
 800fed0:	6102      	str	r2, [r0, #16]
 800fed2:	bf08      	it	eq
 800fed4:	6143      	streq	r3, [r0, #20]
 800fed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feda:	f8dc c000 	ldr.w	ip, [ip]
 800fede:	fa0c fc08 	lsl.w	ip, ip, r8
 800fee2:	ea4c 0707 	orr.w	r7, ip, r7
 800fee6:	f849 7b04 	str.w	r7, [r9], #4
 800feea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800feee:	40cf      	lsrs	r7, r1
 800fef0:	e7da      	b.n	800fea8 <rshift+0x4c>
 800fef2:	f851 cb04 	ldr.w	ip, [r1], #4
 800fef6:	f847 cf04 	str.w	ip, [r7, #4]!
 800fefa:	e7c3      	b.n	800fe84 <rshift+0x28>
 800fefc:	4623      	mov	r3, r4
 800fefe:	e7e1      	b.n	800fec4 <rshift+0x68>

0800ff00 <__hexdig_fun>:
 800ff00:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ff04:	2b09      	cmp	r3, #9
 800ff06:	d802      	bhi.n	800ff0e <__hexdig_fun+0xe>
 800ff08:	3820      	subs	r0, #32
 800ff0a:	b2c0      	uxtb	r0, r0
 800ff0c:	4770      	bx	lr
 800ff0e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ff12:	2b05      	cmp	r3, #5
 800ff14:	d801      	bhi.n	800ff1a <__hexdig_fun+0x1a>
 800ff16:	3847      	subs	r0, #71	@ 0x47
 800ff18:	e7f7      	b.n	800ff0a <__hexdig_fun+0xa>
 800ff1a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ff1e:	2b05      	cmp	r3, #5
 800ff20:	d801      	bhi.n	800ff26 <__hexdig_fun+0x26>
 800ff22:	3827      	subs	r0, #39	@ 0x27
 800ff24:	e7f1      	b.n	800ff0a <__hexdig_fun+0xa>
 800ff26:	2000      	movs	r0, #0
 800ff28:	4770      	bx	lr
	...

0800ff2c <__gethex>:
 800ff2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff30:	b085      	sub	sp, #20
 800ff32:	468a      	mov	sl, r1
 800ff34:	9302      	str	r3, [sp, #8]
 800ff36:	680b      	ldr	r3, [r1, #0]
 800ff38:	9001      	str	r0, [sp, #4]
 800ff3a:	4690      	mov	r8, r2
 800ff3c:	1c9c      	adds	r4, r3, #2
 800ff3e:	46a1      	mov	r9, r4
 800ff40:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ff44:	2830      	cmp	r0, #48	@ 0x30
 800ff46:	d0fa      	beq.n	800ff3e <__gethex+0x12>
 800ff48:	eba9 0303 	sub.w	r3, r9, r3
 800ff4c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ff50:	f7ff ffd6 	bl	800ff00 <__hexdig_fun>
 800ff54:	4605      	mov	r5, r0
 800ff56:	2800      	cmp	r0, #0
 800ff58:	d168      	bne.n	801002c <__gethex+0x100>
 800ff5a:	49a0      	ldr	r1, [pc, #640]	@ (80101dc <__gethex+0x2b0>)
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	4648      	mov	r0, r9
 800ff60:	f7ff ff12 	bl	800fd88 <strncmp>
 800ff64:	4607      	mov	r7, r0
 800ff66:	2800      	cmp	r0, #0
 800ff68:	d167      	bne.n	801003a <__gethex+0x10e>
 800ff6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ff6e:	4626      	mov	r6, r4
 800ff70:	f7ff ffc6 	bl	800ff00 <__hexdig_fun>
 800ff74:	2800      	cmp	r0, #0
 800ff76:	d062      	beq.n	801003e <__gethex+0x112>
 800ff78:	4623      	mov	r3, r4
 800ff7a:	7818      	ldrb	r0, [r3, #0]
 800ff7c:	2830      	cmp	r0, #48	@ 0x30
 800ff7e:	4699      	mov	r9, r3
 800ff80:	f103 0301 	add.w	r3, r3, #1
 800ff84:	d0f9      	beq.n	800ff7a <__gethex+0x4e>
 800ff86:	f7ff ffbb 	bl	800ff00 <__hexdig_fun>
 800ff8a:	fab0 f580 	clz	r5, r0
 800ff8e:	096d      	lsrs	r5, r5, #5
 800ff90:	f04f 0b01 	mov.w	fp, #1
 800ff94:	464a      	mov	r2, r9
 800ff96:	4616      	mov	r6, r2
 800ff98:	3201      	adds	r2, #1
 800ff9a:	7830      	ldrb	r0, [r6, #0]
 800ff9c:	f7ff ffb0 	bl	800ff00 <__hexdig_fun>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d1f8      	bne.n	800ff96 <__gethex+0x6a>
 800ffa4:	498d      	ldr	r1, [pc, #564]	@ (80101dc <__gethex+0x2b0>)
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	f7ff feed 	bl	800fd88 <strncmp>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d13f      	bne.n	8010032 <__gethex+0x106>
 800ffb2:	b944      	cbnz	r4, 800ffc6 <__gethex+0x9a>
 800ffb4:	1c74      	adds	r4, r6, #1
 800ffb6:	4622      	mov	r2, r4
 800ffb8:	4616      	mov	r6, r2
 800ffba:	3201      	adds	r2, #1
 800ffbc:	7830      	ldrb	r0, [r6, #0]
 800ffbe:	f7ff ff9f 	bl	800ff00 <__hexdig_fun>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	d1f8      	bne.n	800ffb8 <__gethex+0x8c>
 800ffc6:	1ba4      	subs	r4, r4, r6
 800ffc8:	00a7      	lsls	r7, r4, #2
 800ffca:	7833      	ldrb	r3, [r6, #0]
 800ffcc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ffd0:	2b50      	cmp	r3, #80	@ 0x50
 800ffd2:	d13e      	bne.n	8010052 <__gethex+0x126>
 800ffd4:	7873      	ldrb	r3, [r6, #1]
 800ffd6:	2b2b      	cmp	r3, #43	@ 0x2b
 800ffd8:	d033      	beq.n	8010042 <__gethex+0x116>
 800ffda:	2b2d      	cmp	r3, #45	@ 0x2d
 800ffdc:	d034      	beq.n	8010048 <__gethex+0x11c>
 800ffde:	1c71      	adds	r1, r6, #1
 800ffe0:	2400      	movs	r4, #0
 800ffe2:	7808      	ldrb	r0, [r1, #0]
 800ffe4:	f7ff ff8c 	bl	800ff00 <__hexdig_fun>
 800ffe8:	1e43      	subs	r3, r0, #1
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	2b18      	cmp	r3, #24
 800ffee:	d830      	bhi.n	8010052 <__gethex+0x126>
 800fff0:	f1a0 0210 	sub.w	r2, r0, #16
 800fff4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fff8:	f7ff ff82 	bl	800ff00 <__hexdig_fun>
 800fffc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8010000:	fa5f fc8c 	uxtb.w	ip, ip
 8010004:	f1bc 0f18 	cmp.w	ip, #24
 8010008:	f04f 030a 	mov.w	r3, #10
 801000c:	d91e      	bls.n	801004c <__gethex+0x120>
 801000e:	b104      	cbz	r4, 8010012 <__gethex+0xe6>
 8010010:	4252      	negs	r2, r2
 8010012:	4417      	add	r7, r2
 8010014:	f8ca 1000 	str.w	r1, [sl]
 8010018:	b1ed      	cbz	r5, 8010056 <__gethex+0x12a>
 801001a:	f1bb 0f00 	cmp.w	fp, #0
 801001e:	bf0c      	ite	eq
 8010020:	2506      	moveq	r5, #6
 8010022:	2500      	movne	r5, #0
 8010024:	4628      	mov	r0, r5
 8010026:	b005      	add	sp, #20
 8010028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002c:	2500      	movs	r5, #0
 801002e:	462c      	mov	r4, r5
 8010030:	e7b0      	b.n	800ff94 <__gethex+0x68>
 8010032:	2c00      	cmp	r4, #0
 8010034:	d1c7      	bne.n	800ffc6 <__gethex+0x9a>
 8010036:	4627      	mov	r7, r4
 8010038:	e7c7      	b.n	800ffca <__gethex+0x9e>
 801003a:	464e      	mov	r6, r9
 801003c:	462f      	mov	r7, r5
 801003e:	2501      	movs	r5, #1
 8010040:	e7c3      	b.n	800ffca <__gethex+0x9e>
 8010042:	2400      	movs	r4, #0
 8010044:	1cb1      	adds	r1, r6, #2
 8010046:	e7cc      	b.n	800ffe2 <__gethex+0xb6>
 8010048:	2401      	movs	r4, #1
 801004a:	e7fb      	b.n	8010044 <__gethex+0x118>
 801004c:	fb03 0002 	mla	r0, r3, r2, r0
 8010050:	e7ce      	b.n	800fff0 <__gethex+0xc4>
 8010052:	4631      	mov	r1, r6
 8010054:	e7de      	b.n	8010014 <__gethex+0xe8>
 8010056:	eba6 0309 	sub.w	r3, r6, r9
 801005a:	3b01      	subs	r3, #1
 801005c:	4629      	mov	r1, r5
 801005e:	2b07      	cmp	r3, #7
 8010060:	dc0a      	bgt.n	8010078 <__gethex+0x14c>
 8010062:	9801      	ldr	r0, [sp, #4]
 8010064:	f7fd ffbe 	bl	800dfe4 <_Balloc>
 8010068:	4604      	mov	r4, r0
 801006a:	b940      	cbnz	r0, 801007e <__gethex+0x152>
 801006c:	4b5c      	ldr	r3, [pc, #368]	@ (80101e0 <__gethex+0x2b4>)
 801006e:	4602      	mov	r2, r0
 8010070:	21e4      	movs	r1, #228	@ 0xe4
 8010072:	485c      	ldr	r0, [pc, #368]	@ (80101e4 <__gethex+0x2b8>)
 8010074:	f7ff fec0 	bl	800fdf8 <__assert_func>
 8010078:	3101      	adds	r1, #1
 801007a:	105b      	asrs	r3, r3, #1
 801007c:	e7ef      	b.n	801005e <__gethex+0x132>
 801007e:	f100 0a14 	add.w	sl, r0, #20
 8010082:	2300      	movs	r3, #0
 8010084:	4655      	mov	r5, sl
 8010086:	469b      	mov	fp, r3
 8010088:	45b1      	cmp	r9, r6
 801008a:	d337      	bcc.n	80100fc <__gethex+0x1d0>
 801008c:	f845 bb04 	str.w	fp, [r5], #4
 8010090:	eba5 050a 	sub.w	r5, r5, sl
 8010094:	10ad      	asrs	r5, r5, #2
 8010096:	6125      	str	r5, [r4, #16]
 8010098:	4658      	mov	r0, fp
 801009a:	f7fe f895 	bl	800e1c8 <__hi0bits>
 801009e:	016d      	lsls	r5, r5, #5
 80100a0:	f8d8 6000 	ldr.w	r6, [r8]
 80100a4:	1a2d      	subs	r5, r5, r0
 80100a6:	42b5      	cmp	r5, r6
 80100a8:	dd54      	ble.n	8010154 <__gethex+0x228>
 80100aa:	1bad      	subs	r5, r5, r6
 80100ac:	4629      	mov	r1, r5
 80100ae:	4620      	mov	r0, r4
 80100b0:	f7fe fc1e 	bl	800e8f0 <__any_on>
 80100b4:	4681      	mov	r9, r0
 80100b6:	b178      	cbz	r0, 80100d8 <__gethex+0x1ac>
 80100b8:	1e6b      	subs	r3, r5, #1
 80100ba:	1159      	asrs	r1, r3, #5
 80100bc:	f003 021f 	and.w	r2, r3, #31
 80100c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80100c4:	f04f 0901 	mov.w	r9, #1
 80100c8:	fa09 f202 	lsl.w	r2, r9, r2
 80100cc:	420a      	tst	r2, r1
 80100ce:	d003      	beq.n	80100d8 <__gethex+0x1ac>
 80100d0:	454b      	cmp	r3, r9
 80100d2:	dc36      	bgt.n	8010142 <__gethex+0x216>
 80100d4:	f04f 0902 	mov.w	r9, #2
 80100d8:	4629      	mov	r1, r5
 80100da:	4620      	mov	r0, r4
 80100dc:	f7ff febe 	bl	800fe5c <rshift>
 80100e0:	442f      	add	r7, r5
 80100e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80100e6:	42bb      	cmp	r3, r7
 80100e8:	da42      	bge.n	8010170 <__gethex+0x244>
 80100ea:	9801      	ldr	r0, [sp, #4]
 80100ec:	4621      	mov	r1, r4
 80100ee:	f7fd ffb9 	bl	800e064 <_Bfree>
 80100f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80100f4:	2300      	movs	r3, #0
 80100f6:	6013      	str	r3, [r2, #0]
 80100f8:	25a3      	movs	r5, #163	@ 0xa3
 80100fa:	e793      	b.n	8010024 <__gethex+0xf8>
 80100fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010100:	2a2e      	cmp	r2, #46	@ 0x2e
 8010102:	d012      	beq.n	801012a <__gethex+0x1fe>
 8010104:	2b20      	cmp	r3, #32
 8010106:	d104      	bne.n	8010112 <__gethex+0x1e6>
 8010108:	f845 bb04 	str.w	fp, [r5], #4
 801010c:	f04f 0b00 	mov.w	fp, #0
 8010110:	465b      	mov	r3, fp
 8010112:	7830      	ldrb	r0, [r6, #0]
 8010114:	9303      	str	r3, [sp, #12]
 8010116:	f7ff fef3 	bl	800ff00 <__hexdig_fun>
 801011a:	9b03      	ldr	r3, [sp, #12]
 801011c:	f000 000f 	and.w	r0, r0, #15
 8010120:	4098      	lsls	r0, r3
 8010122:	ea4b 0b00 	orr.w	fp, fp, r0
 8010126:	3304      	adds	r3, #4
 8010128:	e7ae      	b.n	8010088 <__gethex+0x15c>
 801012a:	45b1      	cmp	r9, r6
 801012c:	d8ea      	bhi.n	8010104 <__gethex+0x1d8>
 801012e:	492b      	ldr	r1, [pc, #172]	@ (80101dc <__gethex+0x2b0>)
 8010130:	9303      	str	r3, [sp, #12]
 8010132:	2201      	movs	r2, #1
 8010134:	4630      	mov	r0, r6
 8010136:	f7ff fe27 	bl	800fd88 <strncmp>
 801013a:	9b03      	ldr	r3, [sp, #12]
 801013c:	2800      	cmp	r0, #0
 801013e:	d1e1      	bne.n	8010104 <__gethex+0x1d8>
 8010140:	e7a2      	b.n	8010088 <__gethex+0x15c>
 8010142:	1ea9      	subs	r1, r5, #2
 8010144:	4620      	mov	r0, r4
 8010146:	f7fe fbd3 	bl	800e8f0 <__any_on>
 801014a:	2800      	cmp	r0, #0
 801014c:	d0c2      	beq.n	80100d4 <__gethex+0x1a8>
 801014e:	f04f 0903 	mov.w	r9, #3
 8010152:	e7c1      	b.n	80100d8 <__gethex+0x1ac>
 8010154:	da09      	bge.n	801016a <__gethex+0x23e>
 8010156:	1b75      	subs	r5, r6, r5
 8010158:	4621      	mov	r1, r4
 801015a:	9801      	ldr	r0, [sp, #4]
 801015c:	462a      	mov	r2, r5
 801015e:	f7fe f991 	bl	800e484 <__lshift>
 8010162:	1b7f      	subs	r7, r7, r5
 8010164:	4604      	mov	r4, r0
 8010166:	f100 0a14 	add.w	sl, r0, #20
 801016a:	f04f 0900 	mov.w	r9, #0
 801016e:	e7b8      	b.n	80100e2 <__gethex+0x1b6>
 8010170:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010174:	42bd      	cmp	r5, r7
 8010176:	dd6f      	ble.n	8010258 <__gethex+0x32c>
 8010178:	1bed      	subs	r5, r5, r7
 801017a:	42ae      	cmp	r6, r5
 801017c:	dc34      	bgt.n	80101e8 <__gethex+0x2bc>
 801017e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010182:	2b02      	cmp	r3, #2
 8010184:	d022      	beq.n	80101cc <__gethex+0x2a0>
 8010186:	2b03      	cmp	r3, #3
 8010188:	d024      	beq.n	80101d4 <__gethex+0x2a8>
 801018a:	2b01      	cmp	r3, #1
 801018c:	d115      	bne.n	80101ba <__gethex+0x28e>
 801018e:	42ae      	cmp	r6, r5
 8010190:	d113      	bne.n	80101ba <__gethex+0x28e>
 8010192:	2e01      	cmp	r6, #1
 8010194:	d10b      	bne.n	80101ae <__gethex+0x282>
 8010196:	9a02      	ldr	r2, [sp, #8]
 8010198:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801019c:	6013      	str	r3, [r2, #0]
 801019e:	2301      	movs	r3, #1
 80101a0:	6123      	str	r3, [r4, #16]
 80101a2:	f8ca 3000 	str.w	r3, [sl]
 80101a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101a8:	2562      	movs	r5, #98	@ 0x62
 80101aa:	601c      	str	r4, [r3, #0]
 80101ac:	e73a      	b.n	8010024 <__gethex+0xf8>
 80101ae:	1e71      	subs	r1, r6, #1
 80101b0:	4620      	mov	r0, r4
 80101b2:	f7fe fb9d 	bl	800e8f0 <__any_on>
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d1ed      	bne.n	8010196 <__gethex+0x26a>
 80101ba:	9801      	ldr	r0, [sp, #4]
 80101bc:	4621      	mov	r1, r4
 80101be:	f7fd ff51 	bl	800e064 <_Bfree>
 80101c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101c4:	2300      	movs	r3, #0
 80101c6:	6013      	str	r3, [r2, #0]
 80101c8:	2550      	movs	r5, #80	@ 0x50
 80101ca:	e72b      	b.n	8010024 <__gethex+0xf8>
 80101cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d1f3      	bne.n	80101ba <__gethex+0x28e>
 80101d2:	e7e0      	b.n	8010196 <__gethex+0x26a>
 80101d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d1dd      	bne.n	8010196 <__gethex+0x26a>
 80101da:	e7ee      	b.n	80101ba <__gethex+0x28e>
 80101dc:	08010b23 	.word	0x08010b23
 80101e0:	08010ab9 	.word	0x08010ab9
 80101e4:	08010b7a 	.word	0x08010b7a
 80101e8:	1e6f      	subs	r7, r5, #1
 80101ea:	f1b9 0f00 	cmp.w	r9, #0
 80101ee:	d130      	bne.n	8010252 <__gethex+0x326>
 80101f0:	b127      	cbz	r7, 80101fc <__gethex+0x2d0>
 80101f2:	4639      	mov	r1, r7
 80101f4:	4620      	mov	r0, r4
 80101f6:	f7fe fb7b 	bl	800e8f0 <__any_on>
 80101fa:	4681      	mov	r9, r0
 80101fc:	117a      	asrs	r2, r7, #5
 80101fe:	2301      	movs	r3, #1
 8010200:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010204:	f007 071f 	and.w	r7, r7, #31
 8010208:	40bb      	lsls	r3, r7
 801020a:	4213      	tst	r3, r2
 801020c:	4629      	mov	r1, r5
 801020e:	4620      	mov	r0, r4
 8010210:	bf18      	it	ne
 8010212:	f049 0902 	orrne.w	r9, r9, #2
 8010216:	f7ff fe21 	bl	800fe5c <rshift>
 801021a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801021e:	1b76      	subs	r6, r6, r5
 8010220:	2502      	movs	r5, #2
 8010222:	f1b9 0f00 	cmp.w	r9, #0
 8010226:	d047      	beq.n	80102b8 <__gethex+0x38c>
 8010228:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801022c:	2b02      	cmp	r3, #2
 801022e:	d015      	beq.n	801025c <__gethex+0x330>
 8010230:	2b03      	cmp	r3, #3
 8010232:	d017      	beq.n	8010264 <__gethex+0x338>
 8010234:	2b01      	cmp	r3, #1
 8010236:	d109      	bne.n	801024c <__gethex+0x320>
 8010238:	f019 0f02 	tst.w	r9, #2
 801023c:	d006      	beq.n	801024c <__gethex+0x320>
 801023e:	f8da 3000 	ldr.w	r3, [sl]
 8010242:	ea49 0903 	orr.w	r9, r9, r3
 8010246:	f019 0f01 	tst.w	r9, #1
 801024a:	d10e      	bne.n	801026a <__gethex+0x33e>
 801024c:	f045 0510 	orr.w	r5, r5, #16
 8010250:	e032      	b.n	80102b8 <__gethex+0x38c>
 8010252:	f04f 0901 	mov.w	r9, #1
 8010256:	e7d1      	b.n	80101fc <__gethex+0x2d0>
 8010258:	2501      	movs	r5, #1
 801025a:	e7e2      	b.n	8010222 <__gethex+0x2f6>
 801025c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801025e:	f1c3 0301 	rsb	r3, r3, #1
 8010262:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010266:	2b00      	cmp	r3, #0
 8010268:	d0f0      	beq.n	801024c <__gethex+0x320>
 801026a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801026e:	f104 0314 	add.w	r3, r4, #20
 8010272:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010276:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801027a:	f04f 0c00 	mov.w	ip, #0
 801027e:	4618      	mov	r0, r3
 8010280:	f853 2b04 	ldr.w	r2, [r3], #4
 8010284:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010288:	d01b      	beq.n	80102c2 <__gethex+0x396>
 801028a:	3201      	adds	r2, #1
 801028c:	6002      	str	r2, [r0, #0]
 801028e:	2d02      	cmp	r5, #2
 8010290:	f104 0314 	add.w	r3, r4, #20
 8010294:	d13c      	bne.n	8010310 <__gethex+0x3e4>
 8010296:	f8d8 2000 	ldr.w	r2, [r8]
 801029a:	3a01      	subs	r2, #1
 801029c:	42b2      	cmp	r2, r6
 801029e:	d109      	bne.n	80102b4 <__gethex+0x388>
 80102a0:	1171      	asrs	r1, r6, #5
 80102a2:	2201      	movs	r2, #1
 80102a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80102a8:	f006 061f 	and.w	r6, r6, #31
 80102ac:	fa02 f606 	lsl.w	r6, r2, r6
 80102b0:	421e      	tst	r6, r3
 80102b2:	d13a      	bne.n	801032a <__gethex+0x3fe>
 80102b4:	f045 0520 	orr.w	r5, r5, #32
 80102b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102ba:	601c      	str	r4, [r3, #0]
 80102bc:	9b02      	ldr	r3, [sp, #8]
 80102be:	601f      	str	r7, [r3, #0]
 80102c0:	e6b0      	b.n	8010024 <__gethex+0xf8>
 80102c2:	4299      	cmp	r1, r3
 80102c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80102c8:	d8d9      	bhi.n	801027e <__gethex+0x352>
 80102ca:	68a3      	ldr	r3, [r4, #8]
 80102cc:	459b      	cmp	fp, r3
 80102ce:	db17      	blt.n	8010300 <__gethex+0x3d4>
 80102d0:	6861      	ldr	r1, [r4, #4]
 80102d2:	9801      	ldr	r0, [sp, #4]
 80102d4:	3101      	adds	r1, #1
 80102d6:	f7fd fe85 	bl	800dfe4 <_Balloc>
 80102da:	4681      	mov	r9, r0
 80102dc:	b918      	cbnz	r0, 80102e6 <__gethex+0x3ba>
 80102de:	4b1a      	ldr	r3, [pc, #104]	@ (8010348 <__gethex+0x41c>)
 80102e0:	4602      	mov	r2, r0
 80102e2:	2184      	movs	r1, #132	@ 0x84
 80102e4:	e6c5      	b.n	8010072 <__gethex+0x146>
 80102e6:	6922      	ldr	r2, [r4, #16]
 80102e8:	3202      	adds	r2, #2
 80102ea:	f104 010c 	add.w	r1, r4, #12
 80102ee:	0092      	lsls	r2, r2, #2
 80102f0:	300c      	adds	r0, #12
 80102f2:	f7ff fd6b 	bl	800fdcc <memcpy>
 80102f6:	4621      	mov	r1, r4
 80102f8:	9801      	ldr	r0, [sp, #4]
 80102fa:	f7fd feb3 	bl	800e064 <_Bfree>
 80102fe:	464c      	mov	r4, r9
 8010300:	6923      	ldr	r3, [r4, #16]
 8010302:	1c5a      	adds	r2, r3, #1
 8010304:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010308:	6122      	str	r2, [r4, #16]
 801030a:	2201      	movs	r2, #1
 801030c:	615a      	str	r2, [r3, #20]
 801030e:	e7be      	b.n	801028e <__gethex+0x362>
 8010310:	6922      	ldr	r2, [r4, #16]
 8010312:	455a      	cmp	r2, fp
 8010314:	dd0b      	ble.n	801032e <__gethex+0x402>
 8010316:	2101      	movs	r1, #1
 8010318:	4620      	mov	r0, r4
 801031a:	f7ff fd9f 	bl	800fe5c <rshift>
 801031e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010322:	3701      	adds	r7, #1
 8010324:	42bb      	cmp	r3, r7
 8010326:	f6ff aee0 	blt.w	80100ea <__gethex+0x1be>
 801032a:	2501      	movs	r5, #1
 801032c:	e7c2      	b.n	80102b4 <__gethex+0x388>
 801032e:	f016 061f 	ands.w	r6, r6, #31
 8010332:	d0fa      	beq.n	801032a <__gethex+0x3fe>
 8010334:	4453      	add	r3, sl
 8010336:	f1c6 0620 	rsb	r6, r6, #32
 801033a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801033e:	f7fd ff43 	bl	800e1c8 <__hi0bits>
 8010342:	42b0      	cmp	r0, r6
 8010344:	dbe7      	blt.n	8010316 <__gethex+0x3ea>
 8010346:	e7f0      	b.n	801032a <__gethex+0x3fe>
 8010348:	08010ab9 	.word	0x08010ab9

0801034c <L_shift>:
 801034c:	f1c2 0208 	rsb	r2, r2, #8
 8010350:	0092      	lsls	r2, r2, #2
 8010352:	b570      	push	{r4, r5, r6, lr}
 8010354:	f1c2 0620 	rsb	r6, r2, #32
 8010358:	6843      	ldr	r3, [r0, #4]
 801035a:	6804      	ldr	r4, [r0, #0]
 801035c:	fa03 f506 	lsl.w	r5, r3, r6
 8010360:	432c      	orrs	r4, r5
 8010362:	40d3      	lsrs	r3, r2
 8010364:	6004      	str	r4, [r0, #0]
 8010366:	f840 3f04 	str.w	r3, [r0, #4]!
 801036a:	4288      	cmp	r0, r1
 801036c:	d3f4      	bcc.n	8010358 <L_shift+0xc>
 801036e:	bd70      	pop	{r4, r5, r6, pc}

08010370 <__match>:
 8010370:	b530      	push	{r4, r5, lr}
 8010372:	6803      	ldr	r3, [r0, #0]
 8010374:	3301      	adds	r3, #1
 8010376:	f811 4b01 	ldrb.w	r4, [r1], #1
 801037a:	b914      	cbnz	r4, 8010382 <__match+0x12>
 801037c:	6003      	str	r3, [r0, #0]
 801037e:	2001      	movs	r0, #1
 8010380:	bd30      	pop	{r4, r5, pc}
 8010382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010386:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801038a:	2d19      	cmp	r5, #25
 801038c:	bf98      	it	ls
 801038e:	3220      	addls	r2, #32
 8010390:	42a2      	cmp	r2, r4
 8010392:	d0f0      	beq.n	8010376 <__match+0x6>
 8010394:	2000      	movs	r0, #0
 8010396:	e7f3      	b.n	8010380 <__match+0x10>

08010398 <__hexnan>:
 8010398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801039c:	680b      	ldr	r3, [r1, #0]
 801039e:	6801      	ldr	r1, [r0, #0]
 80103a0:	115e      	asrs	r6, r3, #5
 80103a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80103a6:	f013 031f 	ands.w	r3, r3, #31
 80103aa:	b087      	sub	sp, #28
 80103ac:	bf18      	it	ne
 80103ae:	3604      	addne	r6, #4
 80103b0:	2500      	movs	r5, #0
 80103b2:	1f37      	subs	r7, r6, #4
 80103b4:	4682      	mov	sl, r0
 80103b6:	4690      	mov	r8, r2
 80103b8:	9301      	str	r3, [sp, #4]
 80103ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80103be:	46b9      	mov	r9, r7
 80103c0:	463c      	mov	r4, r7
 80103c2:	9502      	str	r5, [sp, #8]
 80103c4:	46ab      	mov	fp, r5
 80103c6:	784a      	ldrb	r2, [r1, #1]
 80103c8:	1c4b      	adds	r3, r1, #1
 80103ca:	9303      	str	r3, [sp, #12]
 80103cc:	b342      	cbz	r2, 8010420 <__hexnan+0x88>
 80103ce:	4610      	mov	r0, r2
 80103d0:	9105      	str	r1, [sp, #20]
 80103d2:	9204      	str	r2, [sp, #16]
 80103d4:	f7ff fd94 	bl	800ff00 <__hexdig_fun>
 80103d8:	2800      	cmp	r0, #0
 80103da:	d151      	bne.n	8010480 <__hexnan+0xe8>
 80103dc:	9a04      	ldr	r2, [sp, #16]
 80103de:	9905      	ldr	r1, [sp, #20]
 80103e0:	2a20      	cmp	r2, #32
 80103e2:	d818      	bhi.n	8010416 <__hexnan+0x7e>
 80103e4:	9b02      	ldr	r3, [sp, #8]
 80103e6:	459b      	cmp	fp, r3
 80103e8:	dd13      	ble.n	8010412 <__hexnan+0x7a>
 80103ea:	454c      	cmp	r4, r9
 80103ec:	d206      	bcs.n	80103fc <__hexnan+0x64>
 80103ee:	2d07      	cmp	r5, #7
 80103f0:	dc04      	bgt.n	80103fc <__hexnan+0x64>
 80103f2:	462a      	mov	r2, r5
 80103f4:	4649      	mov	r1, r9
 80103f6:	4620      	mov	r0, r4
 80103f8:	f7ff ffa8 	bl	801034c <L_shift>
 80103fc:	4544      	cmp	r4, r8
 80103fe:	d952      	bls.n	80104a6 <__hexnan+0x10e>
 8010400:	2300      	movs	r3, #0
 8010402:	f1a4 0904 	sub.w	r9, r4, #4
 8010406:	f844 3c04 	str.w	r3, [r4, #-4]
 801040a:	f8cd b008 	str.w	fp, [sp, #8]
 801040e:	464c      	mov	r4, r9
 8010410:	461d      	mov	r5, r3
 8010412:	9903      	ldr	r1, [sp, #12]
 8010414:	e7d7      	b.n	80103c6 <__hexnan+0x2e>
 8010416:	2a29      	cmp	r2, #41	@ 0x29
 8010418:	d157      	bne.n	80104ca <__hexnan+0x132>
 801041a:	3102      	adds	r1, #2
 801041c:	f8ca 1000 	str.w	r1, [sl]
 8010420:	f1bb 0f00 	cmp.w	fp, #0
 8010424:	d051      	beq.n	80104ca <__hexnan+0x132>
 8010426:	454c      	cmp	r4, r9
 8010428:	d206      	bcs.n	8010438 <__hexnan+0xa0>
 801042a:	2d07      	cmp	r5, #7
 801042c:	dc04      	bgt.n	8010438 <__hexnan+0xa0>
 801042e:	462a      	mov	r2, r5
 8010430:	4649      	mov	r1, r9
 8010432:	4620      	mov	r0, r4
 8010434:	f7ff ff8a 	bl	801034c <L_shift>
 8010438:	4544      	cmp	r4, r8
 801043a:	d936      	bls.n	80104aa <__hexnan+0x112>
 801043c:	f1a8 0204 	sub.w	r2, r8, #4
 8010440:	4623      	mov	r3, r4
 8010442:	f853 1b04 	ldr.w	r1, [r3], #4
 8010446:	f842 1f04 	str.w	r1, [r2, #4]!
 801044a:	429f      	cmp	r7, r3
 801044c:	d2f9      	bcs.n	8010442 <__hexnan+0xaa>
 801044e:	1b3b      	subs	r3, r7, r4
 8010450:	f023 0303 	bic.w	r3, r3, #3
 8010454:	3304      	adds	r3, #4
 8010456:	3401      	adds	r4, #1
 8010458:	3e03      	subs	r6, #3
 801045a:	42b4      	cmp	r4, r6
 801045c:	bf88      	it	hi
 801045e:	2304      	movhi	r3, #4
 8010460:	4443      	add	r3, r8
 8010462:	2200      	movs	r2, #0
 8010464:	f843 2b04 	str.w	r2, [r3], #4
 8010468:	429f      	cmp	r7, r3
 801046a:	d2fb      	bcs.n	8010464 <__hexnan+0xcc>
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	b91b      	cbnz	r3, 8010478 <__hexnan+0xe0>
 8010470:	4547      	cmp	r7, r8
 8010472:	d128      	bne.n	80104c6 <__hexnan+0x12e>
 8010474:	2301      	movs	r3, #1
 8010476:	603b      	str	r3, [r7, #0]
 8010478:	2005      	movs	r0, #5
 801047a:	b007      	add	sp, #28
 801047c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010480:	3501      	adds	r5, #1
 8010482:	2d08      	cmp	r5, #8
 8010484:	f10b 0b01 	add.w	fp, fp, #1
 8010488:	dd06      	ble.n	8010498 <__hexnan+0x100>
 801048a:	4544      	cmp	r4, r8
 801048c:	d9c1      	bls.n	8010412 <__hexnan+0x7a>
 801048e:	2300      	movs	r3, #0
 8010490:	f844 3c04 	str.w	r3, [r4, #-4]
 8010494:	2501      	movs	r5, #1
 8010496:	3c04      	subs	r4, #4
 8010498:	6822      	ldr	r2, [r4, #0]
 801049a:	f000 000f 	and.w	r0, r0, #15
 801049e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80104a2:	6020      	str	r0, [r4, #0]
 80104a4:	e7b5      	b.n	8010412 <__hexnan+0x7a>
 80104a6:	2508      	movs	r5, #8
 80104a8:	e7b3      	b.n	8010412 <__hexnan+0x7a>
 80104aa:	9b01      	ldr	r3, [sp, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d0dd      	beq.n	801046c <__hexnan+0xd4>
 80104b0:	f1c3 0320 	rsb	r3, r3, #32
 80104b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80104b8:	40da      	lsrs	r2, r3
 80104ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80104be:	4013      	ands	r3, r2
 80104c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80104c4:	e7d2      	b.n	801046c <__hexnan+0xd4>
 80104c6:	3f04      	subs	r7, #4
 80104c8:	e7d0      	b.n	801046c <__hexnan+0xd4>
 80104ca:	2004      	movs	r0, #4
 80104cc:	e7d5      	b.n	801047a <__hexnan+0xe2>

080104ce <__ascii_mbtowc>:
 80104ce:	b082      	sub	sp, #8
 80104d0:	b901      	cbnz	r1, 80104d4 <__ascii_mbtowc+0x6>
 80104d2:	a901      	add	r1, sp, #4
 80104d4:	b142      	cbz	r2, 80104e8 <__ascii_mbtowc+0x1a>
 80104d6:	b14b      	cbz	r3, 80104ec <__ascii_mbtowc+0x1e>
 80104d8:	7813      	ldrb	r3, [r2, #0]
 80104da:	600b      	str	r3, [r1, #0]
 80104dc:	7812      	ldrb	r2, [r2, #0]
 80104de:	1e10      	subs	r0, r2, #0
 80104e0:	bf18      	it	ne
 80104e2:	2001      	movne	r0, #1
 80104e4:	b002      	add	sp, #8
 80104e6:	4770      	bx	lr
 80104e8:	4610      	mov	r0, r2
 80104ea:	e7fb      	b.n	80104e4 <__ascii_mbtowc+0x16>
 80104ec:	f06f 0001 	mvn.w	r0, #1
 80104f0:	e7f8      	b.n	80104e4 <__ascii_mbtowc+0x16>

080104f2 <_realloc_r>:
 80104f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104f6:	4607      	mov	r7, r0
 80104f8:	4614      	mov	r4, r2
 80104fa:	460d      	mov	r5, r1
 80104fc:	b921      	cbnz	r1, 8010508 <_realloc_r+0x16>
 80104fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010502:	4611      	mov	r1, r2
 8010504:	f7fd bce2 	b.w	800decc <_malloc_r>
 8010508:	b92a      	cbnz	r2, 8010516 <_realloc_r+0x24>
 801050a:	f7fd fc6b 	bl	800dde4 <_free_r>
 801050e:	4625      	mov	r5, r4
 8010510:	4628      	mov	r0, r5
 8010512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010516:	f000 f8b2 	bl	801067e <_malloc_usable_size_r>
 801051a:	4284      	cmp	r4, r0
 801051c:	4606      	mov	r6, r0
 801051e:	d802      	bhi.n	8010526 <_realloc_r+0x34>
 8010520:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010524:	d8f4      	bhi.n	8010510 <_realloc_r+0x1e>
 8010526:	4621      	mov	r1, r4
 8010528:	4638      	mov	r0, r7
 801052a:	f7fd fccf 	bl	800decc <_malloc_r>
 801052e:	4680      	mov	r8, r0
 8010530:	b908      	cbnz	r0, 8010536 <_realloc_r+0x44>
 8010532:	4645      	mov	r5, r8
 8010534:	e7ec      	b.n	8010510 <_realloc_r+0x1e>
 8010536:	42b4      	cmp	r4, r6
 8010538:	4622      	mov	r2, r4
 801053a:	4629      	mov	r1, r5
 801053c:	bf28      	it	cs
 801053e:	4632      	movcs	r2, r6
 8010540:	f7ff fc44 	bl	800fdcc <memcpy>
 8010544:	4629      	mov	r1, r5
 8010546:	4638      	mov	r0, r7
 8010548:	f7fd fc4c 	bl	800dde4 <_free_r>
 801054c:	e7f1      	b.n	8010532 <_realloc_r+0x40>

0801054e <__ascii_wctomb>:
 801054e:	4603      	mov	r3, r0
 8010550:	4608      	mov	r0, r1
 8010552:	b141      	cbz	r1, 8010566 <__ascii_wctomb+0x18>
 8010554:	2aff      	cmp	r2, #255	@ 0xff
 8010556:	d904      	bls.n	8010562 <__ascii_wctomb+0x14>
 8010558:	228a      	movs	r2, #138	@ 0x8a
 801055a:	601a      	str	r2, [r3, #0]
 801055c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010560:	4770      	bx	lr
 8010562:	700a      	strb	r2, [r1, #0]
 8010564:	2001      	movs	r0, #1
 8010566:	4770      	bx	lr

08010568 <__swhatbuf_r>:
 8010568:	b570      	push	{r4, r5, r6, lr}
 801056a:	460c      	mov	r4, r1
 801056c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010570:	2900      	cmp	r1, #0
 8010572:	b096      	sub	sp, #88	@ 0x58
 8010574:	4615      	mov	r5, r2
 8010576:	461e      	mov	r6, r3
 8010578:	da0d      	bge.n	8010596 <__swhatbuf_r+0x2e>
 801057a:	89a3      	ldrh	r3, [r4, #12]
 801057c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010580:	f04f 0100 	mov.w	r1, #0
 8010584:	bf14      	ite	ne
 8010586:	2340      	movne	r3, #64	@ 0x40
 8010588:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801058c:	2000      	movs	r0, #0
 801058e:	6031      	str	r1, [r6, #0]
 8010590:	602b      	str	r3, [r5, #0]
 8010592:	b016      	add	sp, #88	@ 0x58
 8010594:	bd70      	pop	{r4, r5, r6, pc}
 8010596:	466a      	mov	r2, sp
 8010598:	f000 f848 	bl	801062c <_fstat_r>
 801059c:	2800      	cmp	r0, #0
 801059e:	dbec      	blt.n	801057a <__swhatbuf_r+0x12>
 80105a0:	9901      	ldr	r1, [sp, #4]
 80105a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80105a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80105aa:	4259      	negs	r1, r3
 80105ac:	4159      	adcs	r1, r3
 80105ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105b2:	e7eb      	b.n	801058c <__swhatbuf_r+0x24>

080105b4 <__smakebuf_r>:
 80105b4:	898b      	ldrh	r3, [r1, #12]
 80105b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105b8:	079d      	lsls	r5, r3, #30
 80105ba:	4606      	mov	r6, r0
 80105bc:	460c      	mov	r4, r1
 80105be:	d507      	bpl.n	80105d0 <__smakebuf_r+0x1c>
 80105c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80105c4:	6023      	str	r3, [r4, #0]
 80105c6:	6123      	str	r3, [r4, #16]
 80105c8:	2301      	movs	r3, #1
 80105ca:	6163      	str	r3, [r4, #20]
 80105cc:	b003      	add	sp, #12
 80105ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105d0:	ab01      	add	r3, sp, #4
 80105d2:	466a      	mov	r2, sp
 80105d4:	f7ff ffc8 	bl	8010568 <__swhatbuf_r>
 80105d8:	9f00      	ldr	r7, [sp, #0]
 80105da:	4605      	mov	r5, r0
 80105dc:	4639      	mov	r1, r7
 80105de:	4630      	mov	r0, r6
 80105e0:	f7fd fc74 	bl	800decc <_malloc_r>
 80105e4:	b948      	cbnz	r0, 80105fa <__smakebuf_r+0x46>
 80105e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105ea:	059a      	lsls	r2, r3, #22
 80105ec:	d4ee      	bmi.n	80105cc <__smakebuf_r+0x18>
 80105ee:	f023 0303 	bic.w	r3, r3, #3
 80105f2:	f043 0302 	orr.w	r3, r3, #2
 80105f6:	81a3      	strh	r3, [r4, #12]
 80105f8:	e7e2      	b.n	80105c0 <__smakebuf_r+0xc>
 80105fa:	89a3      	ldrh	r3, [r4, #12]
 80105fc:	6020      	str	r0, [r4, #0]
 80105fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010602:	81a3      	strh	r3, [r4, #12]
 8010604:	9b01      	ldr	r3, [sp, #4]
 8010606:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801060a:	b15b      	cbz	r3, 8010624 <__smakebuf_r+0x70>
 801060c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010610:	4630      	mov	r0, r6
 8010612:	f000 f81d 	bl	8010650 <_isatty_r>
 8010616:	b128      	cbz	r0, 8010624 <__smakebuf_r+0x70>
 8010618:	89a3      	ldrh	r3, [r4, #12]
 801061a:	f023 0303 	bic.w	r3, r3, #3
 801061e:	f043 0301 	orr.w	r3, r3, #1
 8010622:	81a3      	strh	r3, [r4, #12]
 8010624:	89a3      	ldrh	r3, [r4, #12]
 8010626:	431d      	orrs	r5, r3
 8010628:	81a5      	strh	r5, [r4, #12]
 801062a:	e7cf      	b.n	80105cc <__smakebuf_r+0x18>

0801062c <_fstat_r>:
 801062c:	b538      	push	{r3, r4, r5, lr}
 801062e:	4d07      	ldr	r5, [pc, #28]	@ (801064c <_fstat_r+0x20>)
 8010630:	2300      	movs	r3, #0
 8010632:	4604      	mov	r4, r0
 8010634:	4608      	mov	r0, r1
 8010636:	4611      	mov	r1, r2
 8010638:	602b      	str	r3, [r5, #0]
 801063a:	f7f0 ffa9 	bl	8001590 <_fstat>
 801063e:	1c43      	adds	r3, r0, #1
 8010640:	d102      	bne.n	8010648 <_fstat_r+0x1c>
 8010642:	682b      	ldr	r3, [r5, #0]
 8010644:	b103      	cbz	r3, 8010648 <_fstat_r+0x1c>
 8010646:	6023      	str	r3, [r4, #0]
 8010648:	bd38      	pop	{r3, r4, r5, pc}
 801064a:	bf00      	nop
 801064c:	24003598 	.word	0x24003598

08010650 <_isatty_r>:
 8010650:	b538      	push	{r3, r4, r5, lr}
 8010652:	4d06      	ldr	r5, [pc, #24]	@ (801066c <_isatty_r+0x1c>)
 8010654:	2300      	movs	r3, #0
 8010656:	4604      	mov	r4, r0
 8010658:	4608      	mov	r0, r1
 801065a:	602b      	str	r3, [r5, #0]
 801065c:	f7f0 ffa8 	bl	80015b0 <_isatty>
 8010660:	1c43      	adds	r3, r0, #1
 8010662:	d102      	bne.n	801066a <_isatty_r+0x1a>
 8010664:	682b      	ldr	r3, [r5, #0]
 8010666:	b103      	cbz	r3, 801066a <_isatty_r+0x1a>
 8010668:	6023      	str	r3, [r4, #0]
 801066a:	bd38      	pop	{r3, r4, r5, pc}
 801066c:	24003598 	.word	0x24003598

08010670 <abort>:
 8010670:	b508      	push	{r3, lr}
 8010672:	2006      	movs	r0, #6
 8010674:	f000 f834 	bl	80106e0 <raise>
 8010678:	2001      	movs	r0, #1
 801067a:	f7f0 ff39 	bl	80014f0 <_exit>

0801067e <_malloc_usable_size_r>:
 801067e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010682:	1f18      	subs	r0, r3, #4
 8010684:	2b00      	cmp	r3, #0
 8010686:	bfbc      	itt	lt
 8010688:	580b      	ldrlt	r3, [r1, r0]
 801068a:	18c0      	addlt	r0, r0, r3
 801068c:	4770      	bx	lr

0801068e <_raise_r>:
 801068e:	291f      	cmp	r1, #31
 8010690:	b538      	push	{r3, r4, r5, lr}
 8010692:	4605      	mov	r5, r0
 8010694:	460c      	mov	r4, r1
 8010696:	d904      	bls.n	80106a2 <_raise_r+0x14>
 8010698:	2316      	movs	r3, #22
 801069a:	6003      	str	r3, [r0, #0]
 801069c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80106a0:	bd38      	pop	{r3, r4, r5, pc}
 80106a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80106a4:	b112      	cbz	r2, 80106ac <_raise_r+0x1e>
 80106a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106aa:	b94b      	cbnz	r3, 80106c0 <_raise_r+0x32>
 80106ac:	4628      	mov	r0, r5
 80106ae:	f000 f831 	bl	8010714 <_getpid_r>
 80106b2:	4622      	mov	r2, r4
 80106b4:	4601      	mov	r1, r0
 80106b6:	4628      	mov	r0, r5
 80106b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106bc:	f000 b818 	b.w	80106f0 <_kill_r>
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d00a      	beq.n	80106da <_raise_r+0x4c>
 80106c4:	1c59      	adds	r1, r3, #1
 80106c6:	d103      	bne.n	80106d0 <_raise_r+0x42>
 80106c8:	2316      	movs	r3, #22
 80106ca:	6003      	str	r3, [r0, #0]
 80106cc:	2001      	movs	r0, #1
 80106ce:	e7e7      	b.n	80106a0 <_raise_r+0x12>
 80106d0:	2100      	movs	r1, #0
 80106d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80106d6:	4620      	mov	r0, r4
 80106d8:	4798      	blx	r3
 80106da:	2000      	movs	r0, #0
 80106dc:	e7e0      	b.n	80106a0 <_raise_r+0x12>
	...

080106e0 <raise>:
 80106e0:	4b02      	ldr	r3, [pc, #8]	@ (80106ec <raise+0xc>)
 80106e2:	4601      	mov	r1, r0
 80106e4:	6818      	ldr	r0, [r3, #0]
 80106e6:	f7ff bfd2 	b.w	801068e <_raise_r>
 80106ea:	bf00      	nop
 80106ec:	2400001c 	.word	0x2400001c

080106f0 <_kill_r>:
 80106f0:	b538      	push	{r3, r4, r5, lr}
 80106f2:	4d07      	ldr	r5, [pc, #28]	@ (8010710 <_kill_r+0x20>)
 80106f4:	2300      	movs	r3, #0
 80106f6:	4604      	mov	r4, r0
 80106f8:	4608      	mov	r0, r1
 80106fa:	4611      	mov	r1, r2
 80106fc:	602b      	str	r3, [r5, #0]
 80106fe:	f7f0 fee7 	bl	80014d0 <_kill>
 8010702:	1c43      	adds	r3, r0, #1
 8010704:	d102      	bne.n	801070c <_kill_r+0x1c>
 8010706:	682b      	ldr	r3, [r5, #0]
 8010708:	b103      	cbz	r3, 801070c <_kill_r+0x1c>
 801070a:	6023      	str	r3, [r4, #0]
 801070c:	bd38      	pop	{r3, r4, r5, pc}
 801070e:	bf00      	nop
 8010710:	24003598 	.word	0x24003598

08010714 <_getpid_r>:
 8010714:	f7f0 bed4 	b.w	80014c0 <_getpid>

08010718 <_init>:
 8010718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801071a:	bf00      	nop
 801071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801071e:	bc08      	pop	{r3}
 8010720:	469e      	mov	lr, r3
 8010722:	4770      	bx	lr

08010724 <_fini>:
 8010724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010726:	bf00      	nop
 8010728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801072a:	bc08      	pop	{r3}
 801072c:	469e      	mov	lr, r3
 801072e:	4770      	bx	lr
