
geral_test_h755zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dd4  08004dd4  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004dd4  08004dd4  00006014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004dd4  08004dd4  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd4  08004dd4  00005dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dd8  08004dd8  00005dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  08004ddc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000498c  24000014  08004df0  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240049a0  08004df0  000069a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001236b  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb1  00000000  00000000  000183ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  0001b060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9b  00000000  00000000  0001bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a8ca  00000000  00000000  0001cb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c65  00000000  00000000  00057435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017dbec  00000000  00000000  0006809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e5c86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e34  00000000  00000000  001e5ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001e9b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004c60 	.word	0x08004c60

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	08004c60 	.word	0x08004c60

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b49      	ldr	r3, [pc, #292]	@ (800040c <SystemInit+0x12c>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ea:	4a48      	ldr	r2, [pc, #288]	@ (800040c <SystemInit+0x12c>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b45      	ldr	r3, [pc, #276]	@ (800040c <SystemInit+0x12c>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a44      	ldr	r2, [pc, #272]	@ (800040c <SystemInit+0x12c>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <SystemInit+0x130>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b40      	ldr	r3, [pc, #256]	@ (8000410 <SystemInit+0x130>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a3e      	ldr	r2, [pc, #248]	@ (8000410 <SystemInit+0x130>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b3d      	ldr	r3, [pc, #244]	@ (8000414 <SystemInit+0x134>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a3c      	ldr	r2, [pc, #240]	@ (8000414 <SystemInit+0x134>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b3a      	ldr	r3, [pc, #232]	@ (8000414 <SystemInit+0x134>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b39      	ldr	r3, [pc, #228]	@ (8000414 <SystemInit+0x134>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4938      	ldr	r1, [pc, #224]	@ (8000414 <SystemInit+0x134>)
 8000334:	4b38      	ldr	r3, [pc, #224]	@ (8000418 <SystemInit+0x138>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b35      	ldr	r3, [pc, #212]	@ (8000410 <SystemInit+0x130>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b32      	ldr	r3, [pc, #200]	@ (8000410 <SystemInit+0x130>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a30      	ldr	r2, [pc, #192]	@ (8000410 <SystemInit+0x130>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b2f      	ldr	r3, [pc, #188]	@ (8000414 <SystemInit+0x134>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b2d      	ldr	r3, [pc, #180]	@ (8000414 <SystemInit+0x134>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b2c      	ldr	r3, [pc, #176]	@ (8000414 <SystemInit+0x134>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b2a      	ldr	r3, [pc, #168]	@ (8000414 <SystemInit+0x134>)
 800036a:	4a2c      	ldr	r2, [pc, #176]	@ (800041c <SystemInit+0x13c>)
 800036c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b29      	ldr	r3, [pc, #164]	@ (8000414 <SystemInit+0x134>)
 8000370:	4a2b      	ldr	r2, [pc, #172]	@ (8000420 <SystemInit+0x140>)
 8000372:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b27      	ldr	r3, [pc, #156]	@ (8000414 <SystemInit+0x134>)
 8000376:	4a2b      	ldr	r2, [pc, #172]	@ (8000424 <SystemInit+0x144>)
 8000378:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b26      	ldr	r3, [pc, #152]	@ (8000414 <SystemInit+0x134>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b24      	ldr	r3, [pc, #144]	@ (8000414 <SystemInit+0x134>)
 8000382:	4a28      	ldr	r2, [pc, #160]	@ (8000424 <SystemInit+0x144>)
 8000384:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b23      	ldr	r3, [pc, #140]	@ (8000414 <SystemInit+0x134>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b21      	ldr	r3, [pc, #132]	@ (8000414 <SystemInit+0x134>)
 800038e:	4a25      	ldr	r2, [pc, #148]	@ (8000424 <SystemInit+0x144>)
 8000390:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <SystemInit+0x134>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b1e      	ldr	r3, [pc, #120]	@ (8000414 <SystemInit+0x134>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a1d      	ldr	r2, [pc, #116]	@ (8000414 <SystemInit+0x134>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000414 <SystemInit+0x134>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000428 <SystemInit+0x148>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000428 <SystemInit+0x148>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b1d      	ldr	r3, [pc, #116]	@ (800042c <SystemInit+0x14c>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000430 <SystemInit+0x150>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000434 <SystemInit+0x154>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003ca:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <SystemInit+0x134>)
 80003cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d113      	bne.n	8000400 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <SystemInit+0x134>)
 80003da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003de:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <SystemInit+0x134>)
 80003e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <SystemInit+0x158>)
 80003ea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003ee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003f0:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <SystemInit+0x134>)
 80003f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003f6:	4a07      	ldr	r2, [pc, #28]	@ (8000414 <SystemInit+0x134>)
 80003f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	52002000 	.word	0x52002000
 8000414:	58024400 	.word	0x58024400
 8000418:	eaf6ed7f 	.word	0xeaf6ed7f
 800041c:	02020200 	.word	0x02020200
 8000420:	01ff0000 	.word	0x01ff0000
 8000424:	01010280 	.word	0x01010280
 8000428:	580000c0 	.word	0x580000c0
 800042c:	5c001000 	.word	0x5c001000
 8000430:	ffff0000 	.word	0xffff0000
 8000434:	51008108 	.word	0x51008108
 8000438:	52004000 	.word	0x52004000

0800043c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000440:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <ExitRun0Mode+0x2c>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a08      	ldr	r2, [pc, #32]	@ (8000468 <ExitRun0Mode+0x2c>)
 8000446:	f023 0302 	bic.w	r3, r3, #2
 800044a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800044c:	bf00      	nop
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <ExitRun0Mode+0x2c>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f9      	beq.n	800044e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	58024800 	.word	0x58024800

0800046c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idle */
  idleHandle = osThreadNew(idle_task, NULL, &idle_attributes);
 8000470:	4a1c      	ldr	r2, [pc, #112]	@ (80004e4 <MX_FREERTOS_Init+0x78>)
 8000472:	2100      	movs	r1, #0
 8000474:	481c      	ldr	r0, [pc, #112]	@ (80004e8 <MX_FREERTOS_Init+0x7c>)
 8000476:	f001 fe65 	bl	8002144 <osThreadNew>
 800047a:	4603      	mov	r3, r0
 800047c:	4a1b      	ldr	r2, [pc, #108]	@ (80004ec <MX_FREERTOS_Init+0x80>)
 800047e:	6013      	str	r3, [r2, #0]

  /* creation of nb_iot */
  nb_iotHandle = osThreadNew(nb_iot_task, NULL, &nb_iot_attributes);
 8000480:	4a1b      	ldr	r2, [pc, #108]	@ (80004f0 <MX_FREERTOS_Init+0x84>)
 8000482:	2100      	movs	r1, #0
 8000484:	481b      	ldr	r0, [pc, #108]	@ (80004f4 <MX_FREERTOS_Init+0x88>)
 8000486:	f001 fe5d 	bl	8002144 <osThreadNew>
 800048a:	4603      	mov	r3, r0
 800048c:	4a1a      	ldr	r2, [pc, #104]	@ (80004f8 <MX_FREERTOS_Init+0x8c>)
 800048e:	6013      	str	r3, [r2, #0]

  /* creation of cnss */
  cnssHandle = osThreadNew(cnss_task, NULL, &cnss_attributes);
 8000490:	4a1a      	ldr	r2, [pc, #104]	@ (80004fc <MX_FREERTOS_Init+0x90>)
 8000492:	2100      	movs	r1, #0
 8000494:	481a      	ldr	r0, [pc, #104]	@ (8000500 <MX_FREERTOS_Init+0x94>)
 8000496:	f001 fe55 	bl	8002144 <osThreadNew>
 800049a:	4603      	mov	r3, r0
 800049c:	4a19      	ldr	r2, [pc, #100]	@ (8000504 <MX_FREERTOS_Init+0x98>)
 800049e:	6013      	str	r3, [r2, #0]

  /* creation of sd_card */
  sd_cardHandle = osThreadNew(sd_card_task, NULL, &sd_card_attributes);
 80004a0:	4a19      	ldr	r2, [pc, #100]	@ (8000508 <MX_FREERTOS_Init+0x9c>)
 80004a2:	2100      	movs	r1, #0
 80004a4:	4819      	ldr	r0, [pc, #100]	@ (800050c <MX_FREERTOS_Init+0xa0>)
 80004a6:	f001 fe4d 	bl	8002144 <osThreadNew>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4a18      	ldr	r2, [pc, #96]	@ (8000510 <MX_FREERTOS_Init+0xa4>)
 80004ae:	6013      	str	r3, [r2, #0]

  /* creation of temp */
  tempHandle = osThreadNew(temp_task, NULL, &temp_attributes);
 80004b0:	4a18      	ldr	r2, [pc, #96]	@ (8000514 <MX_FREERTOS_Init+0xa8>)
 80004b2:	2100      	movs	r1, #0
 80004b4:	4818      	ldr	r0, [pc, #96]	@ (8000518 <MX_FREERTOS_Init+0xac>)
 80004b6:	f001 fe45 	bl	8002144 <osThreadNew>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4a17      	ldr	r2, [pc, #92]	@ (800051c <MX_FREERTOS_Init+0xb0>)
 80004be:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(imu_task, NULL, &imu_attributes);
 80004c0:	4a17      	ldr	r2, [pc, #92]	@ (8000520 <MX_FREERTOS_Init+0xb4>)
 80004c2:	2100      	movs	r1, #0
 80004c4:	4817      	ldr	r0, [pc, #92]	@ (8000524 <MX_FREERTOS_Init+0xb8>)
 80004c6:	f001 fe3d 	bl	8002144 <osThreadNew>
 80004ca:	4603      	mov	r3, r0
 80004cc:	4a16      	ldr	r2, [pc, #88]	@ (8000528 <MX_FREERTOS_Init+0xbc>)
 80004ce:	6013      	str	r3, [r2, #0]

  /* creation of batterie */
  batterieHandle = osThreadNew(batterie_task, NULL, &batterie_attributes);
 80004d0:	4a16      	ldr	r2, [pc, #88]	@ (800052c <MX_FREERTOS_Init+0xc0>)
 80004d2:	2100      	movs	r1, #0
 80004d4:	4816      	ldr	r0, [pc, #88]	@ (8000530 <MX_FREERTOS_Init+0xc4>)
 80004d6:	f001 fe35 	bl	8002144 <osThreadNew>
 80004da:	4603      	mov	r3, r0
 80004dc:	4a15      	ldr	r2, [pc, #84]	@ (8000534 <MX_FREERTOS_Init+0xc8>)
 80004de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	08004cd8 	.word	0x08004cd8
 80004e8:	08000539 	.word	0x08000539
 80004ec:	24000030 	.word	0x24000030
 80004f0:	08004cfc 	.word	0x08004cfc
 80004f4:	0800054b 	.word	0x0800054b
 80004f8:	24000034 	.word	0x24000034
 80004fc:	08004d20 	.word	0x08004d20
 8000500:	0800055f 	.word	0x0800055f
 8000504:	24000038 	.word	0x24000038
 8000508:	08004d44 	.word	0x08004d44
 800050c:	08000573 	.word	0x08000573
 8000510:	2400003c 	.word	0x2400003c
 8000514:	08004d68 	.word	0x08004d68
 8000518:	08000587 	.word	0x08000587
 800051c:	24000040 	.word	0x24000040
 8000520:	08004d8c 	.word	0x08004d8c
 8000524:	0800059b 	.word	0x0800059b
 8000528:	24000044 	.word	0x24000044
 800052c:	08004db0 	.word	0x08004db0
 8000530:	080005af 	.word	0x080005af
 8000534:	24000048 	.word	0x24000048

08000538 <idle_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_idle_task */
__weak void idle_task(void *argument)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN idle_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000540:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000544:	f001 feb0 	bl	80022a8 <osDelay>
 8000548:	e7fa      	b.n	8000540 <idle_task+0x8>

0800054a <nb_iot_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_nb_iot_task */
__weak void nb_iot_task(void *argument)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN nb_iot_task */
	osThreadYield();
 8000552:	f001 fe89 	bl	8002268 <osThreadYield>
  /* USER CODE END nb_iot_task */
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <cnss_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cnss_task */
__weak void cnss_task(void *argument)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cnss_task */
	osThreadYield();
 8000566:	f001 fe7f 	bl	8002268 <osThreadYield>
  /* USER CODE END cnss_task */
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <sd_card_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sd_card_task */
__weak void sd_card_task(void *argument)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sd_card_task */
	osThreadYield();
 800057a:	f001 fe75 	bl	8002268 <osThreadYield>
  /* USER CODE END sd_card_task */
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <temp_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temp_task */
__weak void temp_task(void *argument)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temp_task */
	osThreadYield();
 800058e:	f001 fe6b 	bl	8002268 <osThreadYield>
  /* USER CODE END temp_task */
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <imu_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_imu_task */
__weak void imu_task(void *argument)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN imu_task */
	osThreadYield();
 80005a2:	f001 fe61 	bl	8002268 <osThreadYield>
	/* Infinite loop */

  /* USER CODE END imu_task */
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <batterie_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_batterie_task */
__weak void batterie_task(void *argument)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN batterie_task */
  osThreadYield();
 80005b6:	f001 fe57 	bl	8002268 <osThreadYield>
	/* Infinite loop */

  /* USER CODE END batterie_task */
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	@ 0x28
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b59      	ldr	r3, [pc, #356]	@ (8000740 <MX_GPIO_Init+0x17c>)
 80005dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e0:	4a57      	ldr	r2, [pc, #348]	@ (8000740 <MX_GPIO_Init+0x17c>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ea:	4b55      	ldr	r3, [pc, #340]	@ (8000740 <MX_GPIO_Init+0x17c>)
 80005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b51      	ldr	r3, [pc, #324]	@ (8000740 <MX_GPIO_Init+0x17c>)
 80005fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005fe:	4a50      	ldr	r2, [pc, #320]	@ (8000740 <MX_GPIO_Init+0x17c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000608:	4b4d      	ldr	r3, [pc, #308]	@ (8000740 <MX_GPIO_Init+0x17c>)
 800060a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b4a      	ldr	r3, [pc, #296]	@ (8000740 <MX_GPIO_Init+0x17c>)
 8000618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061c:	4a48      	ldr	r2, [pc, #288]	@ (8000740 <MX_GPIO_Init+0x17c>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000626:	4b46      	ldr	r3, [pc, #280]	@ (8000740 <MX_GPIO_Init+0x17c>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062c:	f003 0302 	and.w	r3, r3, #2
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000634:	4b42      	ldr	r3, [pc, #264]	@ (8000740 <MX_GPIO_Init+0x17c>)
 8000636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063a:	4a41      	ldr	r2, [pc, #260]	@ (8000740 <MX_GPIO_Init+0x17c>)
 800063c:	f043 0308 	orr.w	r3, r3, #8
 8000640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000644:	4b3e      	ldr	r3, [pc, #248]	@ (8000740 <MX_GPIO_Init+0x17c>)
 8000646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000652:	4b3b      	ldr	r3, [pc, #236]	@ (8000740 <MX_GPIO_Init+0x17c>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000658:	4a39      	ldr	r2, [pc, #228]	@ (8000740 <MX_GPIO_Init+0x17c>)
 800065a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800065e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000662:	4b37      	ldr	r3, [pc, #220]	@ (8000740 <MX_GPIO_Init+0x17c>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000670:	2332      	movs	r3, #50	@ 0x32
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000680:	230b      	movs	r3, #11
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	482e      	ldr	r0, [pc, #184]	@ (8000744 <MX_GPIO_Init+0x180>)
 800068c:	f000 fb1a 	bl	8000cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000690:	2386      	movs	r3, #134	@ 0x86
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006a0:	230b      	movs	r3, #11
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	4827      	ldr	r0, [pc, #156]	@ (8000748 <MX_GPIO_Init+0x184>)
 80006ac:	f000 fb0a 	bl	8000cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c2:	230b      	movs	r3, #11
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	481f      	ldr	r0, [pc, #124]	@ (800074c <MX_GPIO_Init+0x188>)
 80006ce:	f000 faf9 	bl	8000cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006e4:	2307      	movs	r3, #7
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	4818      	ldr	r0, [pc, #96]	@ (8000750 <MX_GPIO_Init+0x18c>)
 80006f0:	f000 fae8 	bl	8000cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80006f4:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000706:	230a      	movs	r3, #10
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	480d      	ldr	r0, [pc, #52]	@ (8000748 <MX_GPIO_Init+0x184>)
 8000712:	f000 fad7 	bl	8000cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000716:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800071a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000728:	230b      	movs	r3, #11
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4808      	ldr	r0, [pc, #32]	@ (8000754 <MX_GPIO_Init+0x190>)
 8000734:	f000 fac6 	bl	8000cc4 <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	@ 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	58024400 	.word	0x58024400
 8000744:	58020800 	.word	0x58020800
 8000748:	58020000 	.word	0x58020000
 800074c:	58020400 	.word	0x58020400
 8000750:	58020c00 	.word	0x58020c00
 8000754:	58021800 	.word	0x58021800

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800075e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000762:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000764:	bf00      	nop
 8000766:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <main+0xa0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800076e:	2b00      	cmp	r3, #0
 8000770:	d004      	beq.n	800077c <main+0x24>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	dcf4      	bgt.n	8000766 <main+0xe>
  if ( timeout < 0 )
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	da01      	bge.n	8000786 <main+0x2e>
  {
  Error_Handler();
 8000782:	f000 f8a5 	bl	80008d0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 f91b 	bl	80009c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f837 	bl	80007fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <main+0xa0>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000794:	4a18      	ldr	r2, [pc, #96]	@ (80007f8 <main+0xa0>)
 8000796:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800079a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <main+0xa0>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 fc39 	bl	8001024 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007b2:	2100      	movs	r1, #0
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fc4f 	bl	8001058 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007be:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007c0:	bf00      	nop
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <main+0xa0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d104      	bne.n	80007d8 <main+0x80>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	dcf4      	bgt.n	80007c2 <main+0x6a>
if ( timeout < 0 )
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	da01      	bge.n	80007e2 <main+0x8a>
{
Error_Handler();
 80007de:	f000 f877 	bl	80008d0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e2:	f7ff feef 	bl	80005c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007e6:	f001 fc63 	bl	80020b0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80007ea:	f7ff fe3f 	bl	800046c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007ee:	f001 fc83 	bl	80020f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f2:	bf00      	nop
 80007f4:	e7fd      	b.n	80007f2 <main+0x9a>
 80007f6:	bf00      	nop
 80007f8:	58024400 	.word	0x58024400

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b09c      	sub	sp, #112	@ 0x70
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000806:	224c      	movs	r2, #76	@ 0x4c
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f004 f9ee 	bl	8004bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2220      	movs	r2, #32
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f004 f9e8 	bl	8004bec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800081c:	2004      	movs	r0, #4
 800081e:	f000 fc2f 	bl	8001080 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800082a:	4a27      	ldr	r2, [pc, #156]	@ (80008c8 <SystemClock_Config+0xcc>)
 800082c:	f023 0301 	bic.w	r3, r3, #1
 8000830:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000832:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <SystemClock_Config+0xd0>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000844:	4a21      	ldr	r2, [pc, #132]	@ (80008cc <SystemClock_Config+0xd0>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <SystemClock_Config+0xd0>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000858:	bf00      	nop
 800085a:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <SystemClock_Config+0xd0>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000866:	d1f8      	bne.n	800085a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800086c:	2301      	movs	r3, #1
 800086e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2340      	movs	r3, #64	@ 0x40
 8000872:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000874:	2300      	movs	r3, #0
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fc59 	bl	8001134 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000888:	f000 f822 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	233f      	movs	r3, #63	@ 0x3f
 800088e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2101      	movs	r1, #1
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 f899 	bl	80019e8 <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008bc:	f000 f808 	bl	80008d0 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3770      	adds	r7, #112	@ 0x70
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58000400 	.word	0x58000400
 80008cc:	58024800 	.word	0x58024800

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <HAL_MspInit+0x38>)
 80008e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <HAL_MspInit+0x38>)
 80008ea:	f043 0302 	orr.w	r3, r3, #2
 80008ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <HAL_MspInit+0x38>)
 80008f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	210f      	movs	r1, #15
 8000904:	f06f 0001 	mvn.w	r0, #1
 8000908:	f000 f9b5 	bl	8000c76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	58024400 	.word	0x58024400

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <NMI_Handler+0x4>

08000920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <MemManage_Handler+0x4>

08000930 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <UsageFault_Handler+0x4>

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f000 f8a7 	bl	8000aa4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000956:	f003 fd0d 	bl	8004374 <xTaskGetSchedulerState>
 800095a:	4603      	mov	r3, r0
 800095c:	2b01      	cmp	r3, #1
 800095e:	d001      	beq.n	8000964 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000960:	f002 f952 	bl	8002c08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000968:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80009a4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800096c:	f7ff fd66 	bl	800043c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000970:	f7ff fcb6 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000974:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000976:	490d      	ldr	r1, [pc, #52]	@ (80009ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000978:	4a0d      	ldr	r2, [pc, #52]	@ (80009b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800098c:	4c0a      	ldr	r4, [pc, #40]	@ (80009b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099a:	f004 f92f 	bl	8004bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099e:	f7ff fedb 	bl	8000758 <main>
  bx  lr
 80009a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80009a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009ac:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80009b0:	08004ddc 	.word	0x08004ddc
  ldr r2, =_sbss
 80009b4:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80009b8:	240049a0 	.word	0x240049a0

080009bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC3_IRQHandler>
	...

080009c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f000 f94a 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009cc:	f001 f9c2 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 80009d0:	4602      	mov	r2, r0
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <HAL_Init+0x68>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	0a1b      	lsrs	r3, r3, #8
 80009d8:	f003 030f 	and.w	r3, r3, #15
 80009dc:	4913      	ldr	r1, [pc, #76]	@ (8000a2c <HAL_Init+0x6c>)
 80009de:	5ccb      	ldrb	r3, [r1, r3]
 80009e0:	f003 031f 	and.w	r3, r3, #31
 80009e4:	fa22 f303 	lsr.w	r3, r2, r3
 80009e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_Init+0x68>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <HAL_Init+0x6c>)
 80009f4:	5cd3      	ldrb	r3, [r2, r3]
 80009f6:	f003 031f 	and.w	r3, r3, #31
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000a00:	4a0b      	ldr	r2, [pc, #44]	@ (8000a30 <HAL_Init+0x70>)
 8000a02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a04:	4a0b      	ldr	r2, [pc, #44]	@ (8000a34 <HAL_Init+0x74>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	f000 f814 	bl	8000a38 <HAL_InitTick>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e002      	b.n	8000a20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1a:	f7ff ff5f 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	08004cc8 	.word	0x08004cc8
 8000a30:	24000004 	.word	0x24000004
 8000a34:	24000000 	.word	0x24000000

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <HAL_InitTick+0x60>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e021      	b.n	8000a90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <HAL_InitTick+0x64>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <HAL_InitTick+0x60>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f921 	bl	8000caa <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00e      	b.n	8000a90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d80a      	bhi.n	8000a8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a80:	f000 f8f9 	bl	8000c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4a06      	ldr	r2, [pc, #24]	@ (8000aa0 <HAL_InitTick+0x68>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2400000c 	.word	0x2400000c
 8000a9c:	24000000 	.word	0x24000000
 8000aa0:	24000008 	.word	0x24000008

08000aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_IncTick+0x20>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_IncTick+0x24>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <HAL_IncTick+0x24>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	2400000c 	.word	0x2400000c
 8000ac8:	2400004c 	.word	0x2400004c

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <HAL_GetTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	2400004c 	.word	0x2400004c

08000ae4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_GetREVID+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	0c1b      	lsrs	r3, r3, #16
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	5c001000 	.word	0x5c001000

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x40>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	4313      	orrs	r3, r2
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x40>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00
 8000b40:	05fa0000 	.word	0x05fa0000

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	@ (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	@ (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	@ 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	@ 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c2c:	d301      	bcc.n	8000c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00f      	b.n	8000c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <SysTick_Config+0x40>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	f7ff ff8e 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <SysTick_Config+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <SysTick_Config+0x40>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff47 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c84:	f7ff ff5e 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	6978      	ldr	r0, [r7, #20]
 8000c90:	f7ff ff90 	bl	8000bb4 <NVIC_EncodePriority>
 8000c94:	4602      	mov	r2, r0
 8000c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff5f 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ffb2 	bl	8000c1c <SysTick_Config>
 8000cb8:	4603      	mov	r3, r0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	@ 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cd2:	4b89      	ldr	r3, [pc, #548]	@ (8000ef8 <HAL_GPIO_Init+0x234>)
 8000cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cd6:	e194      	b.n	8001002 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 8186 	beq.w	8000ffc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d005      	beq.n	8000d08 <HAL_GPIO_Init+0x44>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d130      	bne.n	8000d6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	f003 0201 	and.w	r2, r3, #1
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d017      	beq.n	8000da6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d123      	bne.n	8000dfa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3208      	adds	r2, #8
 8000dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	220f      	movs	r2, #15
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	69b9      	ldr	r1, [r7, #24]
 8000df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0203 	and.w	r2, r3, #3
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80e0 	beq.w	8000ffc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <HAL_GPIO_Init+0x238>)
 8000e3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e42:	4a2e      	ldr	r2, [pc, #184]	@ (8000efc <HAL_GPIO_Init+0x238>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000efc <HAL_GPIO_Init+0x238>)
 8000e4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5a:	4a29      	ldr	r2, [pc, #164]	@ (8000f00 <HAL_GPIO_Init+0x23c>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a20      	ldr	r2, [pc, #128]	@ (8000f04 <HAL_GPIO_Init+0x240>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d052      	beq.n	8000f2c <HAL_GPIO_Init+0x268>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a1f      	ldr	r2, [pc, #124]	@ (8000f08 <HAL_GPIO_Init+0x244>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d031      	beq.n	8000ef2 <HAL_GPIO_Init+0x22e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a1e      	ldr	r2, [pc, #120]	@ (8000f0c <HAL_GPIO_Init+0x248>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d02b      	beq.n	8000eee <HAL_GPIO_Init+0x22a>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	@ (8000f10 <HAL_GPIO_Init+0x24c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d025      	beq.n	8000eea <HAL_GPIO_Init+0x226>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f14 <HAL_GPIO_Init+0x250>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d01f      	beq.n	8000ee6 <HAL_GPIO_Init+0x222>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f18 <HAL_GPIO_Init+0x254>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d019      	beq.n	8000ee2 <HAL_GPIO_Init+0x21e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f1c <HAL_GPIO_Init+0x258>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x21a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a19      	ldr	r2, [pc, #100]	@ (8000f20 <HAL_GPIO_Init+0x25c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x216>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a18      	ldr	r2, [pc, #96]	@ (8000f24 <HAL_GPIO_Init+0x260>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x212>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a17      	ldr	r2, [pc, #92]	@ (8000f28 <HAL_GPIO_Init+0x264>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x20e>
 8000ece:	2309      	movs	r3, #9
 8000ed0:	e02d      	b.n	8000f2e <HAL_GPIO_Init+0x26a>
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	e02b      	b.n	8000f2e <HAL_GPIO_Init+0x26a>
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	e029      	b.n	8000f2e <HAL_GPIO_Init+0x26a>
 8000eda:	2307      	movs	r3, #7
 8000edc:	e027      	b.n	8000f2e <HAL_GPIO_Init+0x26a>
 8000ede:	2306      	movs	r3, #6
 8000ee0:	e025      	b.n	8000f2e <HAL_GPIO_Init+0x26a>
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	e023      	b.n	8000f2e <HAL_GPIO_Init+0x26a>
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	e021      	b.n	8000f2e <HAL_GPIO_Init+0x26a>
 8000eea:	2303      	movs	r3, #3
 8000eec:	e01f      	b.n	8000f2e <HAL_GPIO_Init+0x26a>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e01d      	b.n	8000f2e <HAL_GPIO_Init+0x26a>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e01b      	b.n	8000f2e <HAL_GPIO_Init+0x26a>
 8000ef6:	bf00      	nop
 8000ef8:	58000080 	.word	0x58000080
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58000400 	.word	0x58000400
 8000f04:	58020000 	.word	0x58020000
 8000f08:	58020400 	.word	0x58020400
 8000f0c:	58020800 	.word	0x58020800
 8000f10:	58020c00 	.word	0x58020c00
 8000f14:	58021000 	.word	0x58021000
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58021800 	.word	0x58021800
 8000f20:	58021c00 	.word	0x58021c00
 8000f24:	58022000 	.word	0x58022000
 8000f28:	58022400 	.word	0x58022400
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	f002 0203 	and.w	r2, r2, #3
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	4093      	lsls	r3, r2
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3e:	4938      	ldr	r1, [pc, #224]	@ (8001020 <HAL_GPIO_Init+0x35c>)
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000fa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	3301      	adds	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa22 f303 	lsr.w	r3, r2, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	f47f ae63 	bne.w	8000cd8 <HAL_GPIO_Init+0x14>
  }
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3724      	adds	r7, #36	@ 0x24
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	58000400 	.word	0x58000400

08001024 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800102c:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <HAL_HSEM_FastTake+0x2c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3320      	adds	r3, #32
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	4a07      	ldr	r2, [pc, #28]	@ (8001054 <HAL_HSEM_FastTake+0x30>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	e000      	b.n	8001042 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	58026400 	.word	0x58026400
 8001054:	80000300 	.word	0x80000300

08001058 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001062:	4906      	ldr	r1, [pc, #24]	@ (800107c <HAL_HSEM_Release+0x24>)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	58026400 	.word	0x58026400

08001080 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <HAL_PWREx_ConfigSupply+0xb0>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	2b06      	cmp	r3, #6
 8001092:	d00a      	beq.n	80010aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001094:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <HAL_PWREx_ConfigSupply+0xb0>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d001      	beq.n	80010a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e040      	b.n	8001128 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e03e      	b.n	8001128 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010aa:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <HAL_PWREx_ConfigSupply+0xb0>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80010b2:	491f      	ldr	r1, [pc, #124]	@ (8001130 <HAL_PWREx_ConfigSupply+0xb0>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010ba:	f7ff fd07 	bl	8000acc <HAL_GetTick>
 80010be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010c0:	e009      	b.n	80010d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010c2:	f7ff fd03 	bl	8000acc <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010d0:	d901      	bls.n	80010d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e028      	b.n	8001128 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010d6:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <HAL_PWREx_ConfigSupply+0xb0>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010e2:	d1ee      	bne.n	80010c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b1e      	cmp	r3, #30
 80010e8:	d008      	beq.n	80010fc <HAL_PWREx_ConfigSupply+0x7c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80010ee:	d005      	beq.n	80010fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b1d      	cmp	r3, #29
 80010f4:	d002      	beq.n	80010fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b2d      	cmp	r3, #45	@ 0x2d
 80010fa:	d114      	bne.n	8001126 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80010fc:	f7ff fce6 	bl	8000acc <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001102:	e009      	b.n	8001118 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001104:	f7ff fce2 	bl	8000acc <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001112:	d901      	bls.n	8001118 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e007      	b.n	8001128 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_PWREx_ConfigSupply+0xb0>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001124:	d1ee      	bne.n	8001104 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	58024800 	.word	0x58024800

08001134 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	@ 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	f000 bc48 	b.w	80019d8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 8088 	beq.w	8001266 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001156:	4b99      	ldr	r3, [pc, #612]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001160:	4b96      	ldr	r3, [pc, #600]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001168:	2b10      	cmp	r3, #16
 800116a:	d007      	beq.n	800117c <HAL_RCC_OscConfig+0x48>
 800116c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800116e:	2b18      	cmp	r3, #24
 8001170:	d111      	bne.n	8001196 <HAL_RCC_OscConfig+0x62>
 8001172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d10c      	bne.n	8001196 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	4b8f      	ldr	r3, [pc, #572]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d06d      	beq.n	8001264 <HAL_RCC_OscConfig+0x130>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d169      	bne.n	8001264 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	f000 bc21 	b.w	80019d8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800119e:	d106      	bne.n	80011ae <HAL_RCC_OscConfig+0x7a>
 80011a0:	4b86      	ldr	r3, [pc, #536]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a85      	ldr	r2, [pc, #532]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	e02e      	b.n	800120c <HAL_RCC_OscConfig+0xd8>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x9c>
 80011b6:	4b81      	ldr	r3, [pc, #516]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a80      	ldr	r2, [pc, #512]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b7e      	ldr	r3, [pc, #504]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a7d      	ldr	r2, [pc, #500]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e01d      	b.n	800120c <HAL_RCC_OscConfig+0xd8>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0xc0>
 80011da:	4b78      	ldr	r3, [pc, #480]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a77      	ldr	r2, [pc, #476]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b75      	ldr	r3, [pc, #468]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a74      	ldr	r2, [pc, #464]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e00b      	b.n	800120c <HAL_RCC_OscConfig+0xd8>
 80011f4:	4b71      	ldr	r3, [pc, #452]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a70      	ldr	r2, [pc, #448]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80011fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b6e      	ldr	r3, [pc, #440]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a6d      	ldr	r2, [pc, #436]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800120a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d013      	beq.n	800123c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fc5a 	bl	8000acc <HAL_GetTick>
 8001218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fc56 	bl	8000acc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	@ 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e3d4      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800122e:	4b63      	ldr	r3, [pc, #396]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0xe8>
 800123a:	e014      	b.n	8001266 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123c:	f7ff fc46 	bl	8000acc <HAL_GetTick>
 8001240:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fc42 	bl	8000acc <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	@ 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e3c0      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001256:	4b59      	ldr	r3, [pc, #356]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x110>
 8001262:	e000      	b.n	8001266 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80ca 	beq.w	8001408 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001274:	4b51      	ldr	r3, [pc, #324]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800127c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800127e:	4b4f      	ldr	r3, [pc, #316]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001282:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <HAL_RCC_OscConfig+0x166>
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	2b18      	cmp	r3, #24
 800128e:	d156      	bne.n	800133e <HAL_RCC_OscConfig+0x20a>
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d151      	bne.n	800133e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800129a:	4b48      	ldr	r3, [pc, #288]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_RCC_OscConfig+0x17e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e392      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012b2:	4b42      	ldr	r3, [pc, #264]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 0219 	bic.w	r2, r3, #25
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	493f      	ldr	r1, [pc, #252]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fc02 	bl	8000acc <HAL_GetTick>
 80012c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012cc:	f7ff fbfe 	bl	8000acc <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e37c      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012de:	4b37      	ldr	r3, [pc, #220]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	f7ff fbfb 	bl	8000ae4 <HAL_GetREVID>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d817      	bhi.n	8001328 <HAL_RCC_OscConfig+0x1f4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	2b40      	cmp	r3, #64	@ 0x40
 80012fe:	d108      	bne.n	8001312 <HAL_RCC_OscConfig+0x1de>
 8001300:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001308:	4a2c      	ldr	r2, [pc, #176]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 800130a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800130e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001310:	e07a      	b.n	8001408 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001312:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	031b      	lsls	r3, r3, #12
 8001320:	4926      	ldr	r1, [pc, #152]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001326:	e06f      	b.n	8001408 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001328:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	061b      	lsls	r3, r3, #24
 8001336:	4921      	ldr	r1, [pc, #132]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800133c:	e064      	b.n	8001408 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d047      	beq.n	80013d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001346:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 0219 	bic.w	r2, r3, #25
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	491a      	ldr	r1, [pc, #104]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fbb8 	bl	8000acc <HAL_GetTick>
 800135c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fbb4 	bl	8000acc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e332      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	f7ff fbb1 	bl	8000ae4 <HAL_GetREVID>
 8001382:	4603      	mov	r3, r0
 8001384:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001388:	4293      	cmp	r3, r2
 800138a:	d819      	bhi.n	80013c0 <HAL_RCC_OscConfig+0x28c>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	2b40      	cmp	r3, #64	@ 0x40
 8001392:	d108      	bne.n	80013a6 <HAL_RCC_OscConfig+0x272>
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800139c:	4a07      	ldr	r2, [pc, #28]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 800139e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a2:	6053      	str	r3, [r2, #4]
 80013a4:	e030      	b.n	8001408 <HAL_RCC_OscConfig+0x2d4>
 80013a6:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	031b      	lsls	r3, r3, #12
 80013b4:	4901      	ldr	r1, [pc, #4]	@ (80013bc <HAL_RCC_OscConfig+0x288>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
 80013ba:	e025      	b.n	8001408 <HAL_RCC_OscConfig+0x2d4>
 80013bc:	58024400 	.word	0x58024400
 80013c0:	4b9a      	ldr	r3, [pc, #616]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	061b      	lsls	r3, r3, #24
 80013ce:	4997      	ldr	r1, [pc, #604]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
 80013d4:	e018      	b.n	8001408 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d6:	4b95      	ldr	r3, [pc, #596]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a94      	ldr	r2, [pc, #592]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fb73 	bl	8000acc <HAL_GetTick>
 80013e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fb6f 	bl	8000acc <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e2ed      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013fc:	4b8b      	ldr	r3, [pc, #556]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80a9 	beq.w	8001568 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001416:	4b85      	ldr	r3, [pc, #532]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800141e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001420:	4b82      	ldr	r3, [pc, #520]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 8001422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001424:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b08      	cmp	r3, #8
 800142a:	d007      	beq.n	800143c <HAL_RCC_OscConfig+0x308>
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b18      	cmp	r3, #24
 8001430:	d13a      	bne.n	80014a8 <HAL_RCC_OscConfig+0x374>
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d135      	bne.n	80014a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800143c:	4b7b      	ldr	r3, [pc, #492]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_OscConfig+0x320>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	2b80      	cmp	r3, #128	@ 0x80
 800144e:	d001      	beq.n	8001454 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e2c1      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001454:	f7ff fb46 	bl	8000ae4 <HAL_GetREVID>
 8001458:	4603      	mov	r3, r0
 800145a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800145e:	4293      	cmp	r3, r2
 8001460:	d817      	bhi.n	8001492 <HAL_RCC_OscConfig+0x35e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	2b20      	cmp	r3, #32
 8001468:	d108      	bne.n	800147c <HAL_RCC_OscConfig+0x348>
 800146a:	4b70      	ldr	r3, [pc, #448]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001472:	4a6e      	ldr	r2, [pc, #440]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 8001474:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001478:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800147a:	e075      	b.n	8001568 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800147c:	4b6b      	ldr	r3, [pc, #428]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	069b      	lsls	r3, r3, #26
 800148a:	4968      	ldr	r1, [pc, #416]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001490:	e06a      	b.n	8001568 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001492:	4b66      	ldr	r3, [pc, #408]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	4962      	ldr	r1, [pc, #392]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014a6:	e05f      	b.n	8001568 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d042      	beq.n	8001536 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014b0:	4b5e      	ldr	r3, [pc, #376]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a5d      	ldr	r2, [pc, #372]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80014b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb06 	bl	8000acc <HAL_GetTick>
 80014c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014c4:	f7ff fb02 	bl	8000acc <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e280      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014d6:	4b55      	ldr	r3, [pc, #340]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014e2:	f7ff faff 	bl	8000ae4 <HAL_GetREVID>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d817      	bhi.n	8001520 <HAL_RCC_OscConfig+0x3ec>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	2b20      	cmp	r3, #32
 80014f6:	d108      	bne.n	800150a <HAL_RCC_OscConfig+0x3d6>
 80014f8:	4b4c      	ldr	r3, [pc, #304]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001500:	4a4a      	ldr	r2, [pc, #296]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 8001502:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001506:	6053      	str	r3, [r2, #4]
 8001508:	e02e      	b.n	8001568 <HAL_RCC_OscConfig+0x434>
 800150a:	4b48      	ldr	r3, [pc, #288]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	069b      	lsls	r3, r3, #26
 8001518:	4944      	ldr	r1, [pc, #272]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
 800151e:	e023      	b.n	8001568 <HAL_RCC_OscConfig+0x434>
 8001520:	4b42      	ldr	r3, [pc, #264]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	061b      	lsls	r3, r3, #24
 800152e:	493f      	ldr	r1, [pc, #252]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 8001530:	4313      	orrs	r3, r2
 8001532:	60cb      	str	r3, [r1, #12]
 8001534:	e018      	b.n	8001568 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001536:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a3c      	ldr	r2, [pc, #240]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 800153c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fac3 	bl	8000acc <HAL_GetTick>
 8001546:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800154a:	f7ff fabf 	bl	8000acc <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e23d      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800155c:	4b33      	ldr	r3, [pc, #204]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d036      	beq.n	80015e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d019      	beq.n	80015b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 800157e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001580:	4a2a      	ldr	r2, [pc, #168]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001588:	f7ff faa0 	bl	8000acc <HAL_GetTick>
 800158c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff fa9c 	bl	8000acc <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e21a      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015a2:	4b22      	ldr	r3, [pc, #136]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80015a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x45c>
 80015ae:	e018      	b.n	80015e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b0:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80015b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b4:	4a1d      	ldr	r2, [pc, #116]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fa86 	bl	8000acc <HAL_GetTick>
 80015c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff fa82 	bl	8000acc <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e200      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80015d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d039      	beq.n	8001662 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d01c      	beq.n	8001630 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a0c      	ldr	r2, [pc, #48]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 80015fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001600:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001602:	f7ff fa63 	bl	8000acc <HAL_GetTick>
 8001606:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800160a:	f7ff fa5f 	bl	8000acc <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1dd      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <HAL_RCC_OscConfig+0x4f8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x4d6>
 8001628:	e01b      	b.n	8001662 <HAL_RCC_OscConfig+0x52e>
 800162a:	bf00      	nop
 800162c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001630:	4b9b      	ldr	r3, [pc, #620]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a9a      	ldr	r2, [pc, #616]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001636:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800163a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800163c:	f7ff fa46 	bl	8000acc <HAL_GetTick>
 8001640:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001644:	f7ff fa42 	bl	8000acc <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1c0      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001656:	4b92      	ldr	r3, [pc, #584]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8081 	beq.w	8001772 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001670:	4b8c      	ldr	r3, [pc, #560]	@ (80018a4 <HAL_RCC_OscConfig+0x770>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a8b      	ldr	r2, [pc, #556]	@ (80018a4 <HAL_RCC_OscConfig+0x770>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800167c:	f7ff fa26 	bl	8000acc <HAL_GetTick>
 8001680:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001684:	f7ff fa22 	bl	8000acc <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	@ 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1a0      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001696:	4b83      	ldr	r3, [pc, #524]	@ (80018a4 <HAL_RCC_OscConfig+0x770>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d106      	bne.n	80016b8 <HAL_RCC_OscConfig+0x584>
 80016aa:	4b7d      	ldr	r3, [pc, #500]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ae:	4a7c      	ldr	r2, [pc, #496]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b6:	e02d      	b.n	8001714 <HAL_RCC_OscConfig+0x5e0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10c      	bne.n	80016da <HAL_RCC_OscConfig+0x5a6>
 80016c0:	4b77      	ldr	r3, [pc, #476]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c4:	4a76      	ldr	r2, [pc, #472]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80016cc:	4b74      	ldr	r3, [pc, #464]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	4a73      	ldr	r2, [pc, #460]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80016d2:	f023 0304 	bic.w	r3, r3, #4
 80016d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d8:	e01c      	b.n	8001714 <HAL_RCC_OscConfig+0x5e0>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x5c8>
 80016e2:	4b6f      	ldr	r3, [pc, #444]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80016e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e6:	4a6e      	ldr	r2, [pc, #440]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ee:	4b6c      	ldr	r3, [pc, #432]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f2:	4a6b      	ldr	r2, [pc, #428]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0x5e0>
 80016fc:	4b68      	ldr	r3, [pc, #416]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001700:	4a67      	ldr	r2, [pc, #412]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	6713      	str	r3, [r2, #112]	@ 0x70
 8001708:	4b65      	ldr	r3, [pc, #404]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170c:	4a64      	ldr	r2, [pc, #400]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 800170e:	f023 0304 	bic.w	r3, r3, #4
 8001712:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d015      	beq.n	8001748 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff f9d6 	bl	8000acc <HAL_GetTick>
 8001720:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001722:	e00a      	b.n	800173a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff f9d2 	bl	8000acc <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e14e      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800173a:	4b59      	ldr	r3, [pc, #356]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0ee      	beq.n	8001724 <HAL_RCC_OscConfig+0x5f0>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff f9c0 	bl	8000acc <HAL_GetTick>
 800174c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff f9bc 	bl	8000acc <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e138      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001766:	4b4e      	ldr	r3, [pc, #312]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ee      	bne.n	8001750 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 812d 	beq.w	80019d6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800177c:	4b48      	ldr	r3, [pc, #288]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001784:	2b18      	cmp	r3, #24
 8001786:	f000 80bd 	beq.w	8001904 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178e:	2b02      	cmp	r3, #2
 8001790:	f040 809e 	bne.w	80018d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001794:	4b42      	ldr	r3, [pc, #264]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a41      	ldr	r2, [pc, #260]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 800179a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800179e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff f994 	bl	8000acc <HAL_GetTick>
 80017a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff f990 	bl	8000acc <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e10e      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ba:	4b39      	ldr	r3, [pc, #228]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c6:	4b36      	ldr	r3, [pc, #216]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80017c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017ca:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <HAL_RCC_OscConfig+0x774>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	430a      	orrs	r2, r1
 80017da:	4931      	ldr	r1, [pc, #196]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	628b      	str	r3, [r1, #40]	@ 0x28
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e4:	3b01      	subs	r3, #1
 80017e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ee:	3b01      	subs	r3, #1
 80017f0:	025b      	lsls	r3, r3, #9
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fa:	3b01      	subs	r3, #1
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001808:	3b01      	subs	r3, #1
 800180a:	061b      	lsls	r3, r3, #24
 800180c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001810:	4923      	ldr	r1, [pc, #140]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001812:	4313      	orrs	r3, r2
 8001814:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001816:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181a:	4a21      	ldr	r2, [pc, #132]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001822:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001826:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <HAL_RCC_OscConfig+0x778>)
 8001828:	4013      	ands	r3, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800182e:	00d2      	lsls	r2, r2, #3
 8001830:	491b      	ldr	r1, [pc, #108]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001832:	4313      	orrs	r3, r2
 8001834:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183a:	f023 020c 	bic.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4917      	ldr	r1, [pc, #92]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001844:	4313      	orrs	r3, r2
 8001846:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 800184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184c:	f023 0202 	bic.w	r2, r3, #2
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001854:	4912      	ldr	r1, [pc, #72]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001856:	4313      	orrs	r3, r2
 8001858:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 800185c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185e:	4a10      	ldr	r2, [pc, #64]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001864:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186a:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 800186c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001870:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800187c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	4a07      	ldr	r2, [pc, #28]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <HAL_RCC_OscConfig+0x76c>)
 8001890:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff f919 	bl	8000acc <HAL_GetTick>
 800189a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800189c:	e011      	b.n	80018c2 <HAL_RCC_OscConfig+0x78e>
 800189e:	bf00      	nop
 80018a0:	58024400 	.word	0x58024400
 80018a4:	58024800 	.word	0x58024800
 80018a8:	fffffc0c 	.word	0xfffffc0c
 80018ac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff f90c 	bl	8000acc <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e08a      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018c2:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x77c>
 80018ce:	e082      	b.n	80019d6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b43      	ldr	r3, [pc, #268]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a42      	ldr	r2, [pc, #264]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 80018d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff f8f6 	bl	8000acc <HAL_GetTick>
 80018e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff f8f2 	bl	8000acc <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e070      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018f6:	4b3a      	ldr	r3, [pc, #232]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x7b0>
 8001902:	e068      	b.n	80019d6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001904:	4b36      	ldr	r3, [pc, #216]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 8001906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001908:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800190a:	4b35      	ldr	r3, [pc, #212]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	2b01      	cmp	r3, #1
 8001916:	d031      	beq.n	800197c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f003 0203 	and.w	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d12a      	bne.n	800197c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d122      	bne.n	800197c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d11a      	bne.n	800197c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	0a5b      	lsrs	r3, r3, #9
 800194a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001952:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d111      	bne.n	800197c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	0c1b      	lsrs	r3, r3, #16
 800195c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001964:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d108      	bne.n	800197c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	0e1b      	lsrs	r3, r3, #24
 800196e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001976:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e02b      	b.n	80019d8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001980:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 8001982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001984:	08db      	lsrs	r3, r3, #3
 8001986:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800198a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	429a      	cmp	r2, r3
 8001994:	d01f      	beq.n	80019d6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199a:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019a2:	f7ff f893 	bl	8000acc <HAL_GetTick>
 80019a6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80019a8:	bf00      	nop
 80019aa:	f7ff f88f 	bl	8000acc <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d0f9      	beq.n	80019aa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 80019b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019ba:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <HAL_RCC_OscConfig+0x8b0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019c2:	00d2      	lsls	r2, r2, #3
 80019c4:	4906      	ldr	r1, [pc, #24]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80019ca:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 80019cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ce:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <HAL_RCC_OscConfig+0x8ac>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3730      	adds	r7, #48	@ 0x30
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	58024400 	.word	0x58024400
 80019e4:	ffff0007 	.word	0xffff0007

080019e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e19c      	b.n	8001d36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001c28 <HAL_RCC_ClockConfig+0x240>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d910      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b87      	ldr	r3, [pc, #540]	@ (8001c28 <HAL_RCC_ClockConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 020f 	bic.w	r2, r3, #15
 8001a12:	4985      	ldr	r1, [pc, #532]	@ (8001c28 <HAL_RCC_ClockConfig+0x240>)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b83      	ldr	r3, [pc, #524]	@ (8001c28 <HAL_RCC_ClockConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e184      	b.n	8001d36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d010      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d908      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a48:	4b78      	ldr	r3, [pc, #480]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	4975      	ldr	r1, [pc, #468]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d010      	beq.n	8001a88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	4b70      	ldr	r3, [pc, #448]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d908      	bls.n	8001a88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a76:	4b6d      	ldr	r3, [pc, #436]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	496a      	ldr	r1, [pc, #424]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d010      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	4b64      	ldr	r3, [pc, #400]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d908      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001aa4:	4b61      	ldr	r3, [pc, #388]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	495e      	ldr	r1, [pc, #376]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d010      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69da      	ldr	r2, [r3, #28]
 8001ac6:	4b59      	ldr	r3, [pc, #356]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d908      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ad2:	4b56      	ldr	r3, [pc, #344]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4953      	ldr	r1, [pc, #332]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d010      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4b4d      	ldr	r3, [pc, #308]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d908      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b4a      	ldr	r3, [pc, #296]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f023 020f 	bic.w	r2, r3, #15
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4947      	ldr	r1, [pc, #284]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d055      	beq.n	8001bca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b1e:	4b43      	ldr	r3, [pc, #268]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4940      	ldr	r1, [pc, #256]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b38:	4b3c      	ldr	r3, [pc, #240]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d121      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0f6      	b.n	8001d36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b50:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d115      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0ea      	b.n	8001d36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d107      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b68:	4b30      	ldr	r3, [pc, #192]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d109      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0de      	b.n	8001d36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b78:	4b2c      	ldr	r3, [pc, #176]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0d6      	b.n	8001d36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b88:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f023 0207 	bic.w	r2, r3, #7
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4925      	ldr	r1, [pc, #148]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b9a:	f7fe ff97 	bl	8000acc <HAL_GetTick>
 8001b9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba2:	f7fe ff93 	bl	8000acc <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e0be      	b.n	8001d36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d1eb      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d010      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d208      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f023 020f 	bic.w	r2, r3, #15
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	490e      	ldr	r1, [pc, #56]	@ (8001c2c <HAL_RCC_ClockConfig+0x244>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCC_ClockConfig+0x240>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d214      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_RCC_ClockConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 020f 	bic.w	r2, r3, #15
 8001c0e:	4906      	ldr	r1, [pc, #24]	@ (8001c28 <HAL_RCC_ClockConfig+0x240>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <HAL_RCC_ClockConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e086      	b.n	8001d36 <HAL_RCC_ClockConfig+0x34e>
 8001c28:	52002000 	.word	0x52002000
 8001c2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	4b3f      	ldr	r3, [pc, #252]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d208      	bcs.n	8001c5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	4939      	ldr	r1, [pc, #228]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d010      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	4b34      	ldr	r3, [pc, #208]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d208      	bcs.n	8001c8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c7a:	4b31      	ldr	r3, [pc, #196]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	492e      	ldr	r1, [pc, #184]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d010      	beq.n	8001cba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	4b28      	ldr	r3, [pc, #160]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d208      	bcs.n	8001cba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ca8:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4922      	ldr	r1, [pc, #136]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d010      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	4b1d      	ldr	r3, [pc, #116]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d208      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4917      	ldr	r1, [pc, #92]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ce8:	f000 f834 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	4912      	ldr	r1, [pc, #72]	@ (8001d44 <HAL_RCC_ClockConfig+0x35c>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <HAL_RCC_ClockConfig+0x358>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d44 <HAL_RCC_ClockConfig+0x35c>)
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <HAL_RCC_ClockConfig+0x360>)
 8001d1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d20:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <HAL_RCC_ClockConfig+0x364>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <HAL_RCC_ClockConfig+0x368>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fe84 	bl	8000a38 <HAL_InitTick>
 8001d30:	4603      	mov	r3, r0
 8001d32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	58024400 	.word	0x58024400
 8001d44:	08004cc8 	.word	0x08004cc8
 8001d48:	24000004 	.word	0x24000004
 8001d4c:	24000000 	.word	0x24000000
 8001d50:	24000008 	.word	0x24000008

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d5a:	4bb3      	ldr	r3, [pc, #716]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d62:	2b18      	cmp	r3, #24
 8001d64:	f200 8155 	bhi.w	8002012 <HAL_RCC_GetSysClockFreq+0x2be>
 8001d68:	a201      	add	r2, pc, #4	@ (adr r2, 8001d70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6e:	bf00      	nop
 8001d70:	08001dd5 	.word	0x08001dd5
 8001d74:	08002013 	.word	0x08002013
 8001d78:	08002013 	.word	0x08002013
 8001d7c:	08002013 	.word	0x08002013
 8001d80:	08002013 	.word	0x08002013
 8001d84:	08002013 	.word	0x08002013
 8001d88:	08002013 	.word	0x08002013
 8001d8c:	08002013 	.word	0x08002013
 8001d90:	08001dfb 	.word	0x08001dfb
 8001d94:	08002013 	.word	0x08002013
 8001d98:	08002013 	.word	0x08002013
 8001d9c:	08002013 	.word	0x08002013
 8001da0:	08002013 	.word	0x08002013
 8001da4:	08002013 	.word	0x08002013
 8001da8:	08002013 	.word	0x08002013
 8001dac:	08002013 	.word	0x08002013
 8001db0:	08001e01 	.word	0x08001e01
 8001db4:	08002013 	.word	0x08002013
 8001db8:	08002013 	.word	0x08002013
 8001dbc:	08002013 	.word	0x08002013
 8001dc0:	08002013 	.word	0x08002013
 8001dc4:	08002013 	.word	0x08002013
 8001dc8:	08002013 	.word	0x08002013
 8001dcc:	08002013 	.word	0x08002013
 8001dd0:	08001e07 	.word	0x08001e07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dd4:	4b94      	ldr	r3, [pc, #592]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001de0:	4b91      	ldr	r3, [pc, #580]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	4a90      	ldr	r2, [pc, #576]	@ (800202c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001df2:	e111      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001df4:	4b8d      	ldr	r3, [pc, #564]	@ (800202c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001df6:	61bb      	str	r3, [r7, #24]
      break;
 8001df8:	e10e      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001dfa:	4b8d      	ldr	r3, [pc, #564]	@ (8002030 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001dfc:	61bb      	str	r3, [r7, #24]
      break;
 8001dfe:	e10b      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e00:	4b8c      	ldr	r3, [pc, #560]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e02:	61bb      	str	r3, [r7, #24]
      break;
 8001e04:	e108      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e06:	4b88      	ldr	r3, [pc, #544]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e10:	4b85      	ldr	r3, [pc, #532]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e1a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e1c:	4b82      	ldr	r3, [pc, #520]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e26:	4b80      	ldr	r3, [pc, #512]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e3e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80e1 	beq.w	800200c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	f000 8083 	beq.w	8001f58 <HAL_RCC_GetSysClockFreq+0x204>
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	f200 80a1 	bhi.w	8001f9c <HAL_RCC_GetSysClockFreq+0x248>
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x114>
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d056      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e66:	e099      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e68:	4b6f      	ldr	r3, [pc, #444]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d02d      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e74:	4b6c      	ldr	r3, [pc, #432]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	4a6b      	ldr	r2, [pc, #428]	@ (800202c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
 8001e84:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e9e:	4b62      	ldr	r3, [pc, #392]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eb2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002038 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001ece:	e087      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eda:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800203c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee2:	4b51      	ldr	r3, [pc, #324]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ef6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002038 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f12:	e065      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002040 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f26:	4b40      	ldr	r3, [pc, #256]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f3a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002038 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f56:	e043      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f62:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002044 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f7e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002038 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f9a:	e021      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002040 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fae:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002038 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fde:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	0a5b      	lsrs	r3, r3, #9
 8001fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fea:	3301      	adds	r3, #1
 8001fec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ff8:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002004:	ee17 3a90 	vmov	r3, s15
 8002008:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800200a:	e005      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
      break;
 8002010:	e002      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002012:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002014:	61bb      	str	r3, [r7, #24]
      break;
 8002016:	bf00      	nop
  }

  return sysclockfreq;
 8002018:	69bb      	ldr	r3, [r7, #24]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	58024400 	.word	0x58024400
 800202c:	03d09000 	.word	0x03d09000
 8002030:	003d0900 	.word	0x003d0900
 8002034:	017d7840 	.word	0x017d7840
 8002038:	46000000 	.word	0x46000000
 800203c:	4c742400 	.word	0x4c742400
 8002040:	4a742400 	.word	0x4a742400
 8002044:	4bbebc20 	.word	0x4bbebc20

08002048 <__NVIC_SetPriority>:
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	@ (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	@ (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80020a0:	2100      	movs	r1, #0
 80020a2:	f06f 0004 	mvn.w	r0, #4
 80020a6:	f7ff ffcf 	bl	8002048 <__NVIC_SetPriority>
#endif
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020b6:	f3ef 8305 	mrs	r3, IPSR
 80020ba:	603b      	str	r3, [r7, #0]
  return(result);
 80020bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80020c2:	f06f 0305 	mvn.w	r3, #5
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	e00c      	b.n	80020e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80020ca:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <osKernelInitialize+0x44>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80020d2:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <osKernelInitialize+0x44>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80020d8:	2300      	movs	r3, #0
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	e002      	b.n	80020e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80020e4:	687b      	ldr	r3, [r7, #4]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	24000050 	.word	0x24000050

080020f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020fe:	f3ef 8305 	mrs	r3, IPSR
 8002102:	603b      	str	r3, [r7, #0]
  return(result);
 8002104:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <osKernelStart+0x1a>
    stat = osErrorISR;
 800210a:	f06f 0305 	mvn.w	r3, #5
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	e010      	b.n	8002134 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002112:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <osKernelStart+0x48>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d109      	bne.n	800212e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800211a:	f7ff ffbf 	bl	800209c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800211e:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <osKernelStart+0x48>)
 8002120:	2202      	movs	r2, #2
 8002122:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002124:	f001 fcd8 	bl	8003ad8 <vTaskStartScheduler>
      stat = osOK;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	e002      	b.n	8002134 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	24000050 	.word	0x24000050

08002144 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b08e      	sub	sp, #56	@ 0x38
 8002148:	af04      	add	r7, sp, #16
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002154:	f3ef 8305 	mrs	r3, IPSR
 8002158:	617b      	str	r3, [r7, #20]
  return(result);
 800215a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800215c:	2b00      	cmp	r3, #0
 800215e:	d17e      	bne.n	800225e <osThreadNew+0x11a>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d07b      	beq.n	800225e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800216a:	2318      	movs	r3, #24
 800216c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002176:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d045      	beq.n	800220a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <osThreadNew+0x48>
        name = attr->name;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <osThreadNew+0x6e>
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b38      	cmp	r3, #56	@ 0x38
 80021a4:	d805      	bhi.n	80021b2 <osThreadNew+0x6e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <osThreadNew+0x72>
        return (NULL);
 80021b2:	2300      	movs	r3, #0
 80021b4:	e054      	b.n	8002260 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00e      	beq.n	80021ec <osThreadNew+0xa8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80021d4:	d90a      	bls.n	80021ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <osThreadNew+0xa8>
        mem = 1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	e010      	b.n	800220e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10c      	bne.n	800220e <osThreadNew+0xca>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d108      	bne.n	800220e <osThreadNew+0xca>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d104      	bne.n	800220e <osThreadNew+0xca>
          mem = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e001      	b.n	800220e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d110      	bne.n	8002236 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800221c:	9202      	str	r2, [sp, #8]
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	6a3a      	ldr	r2, [r7, #32]
 8002228:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f001 fa78 	bl	8003720 <xTaskCreateStatic>
 8002230:	4603      	mov	r3, r0
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	e013      	b.n	800225e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d110      	bne.n	800225e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	b29a      	uxth	r2, r3
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f001 fac6 	bl	80037e0 <xTaskCreate>
 8002254:	4603      	mov	r3, r0
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <osThreadNew+0x11a>
            hTask = NULL;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800225e:	693b      	ldr	r3, [r7, #16]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3728      	adds	r7, #40	@ 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800226e:	f3ef 8305 	mrs	r3, IPSR
 8002272:	603b      	str	r3, [r7, #0]
  return(result);
 8002274:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <osThreadYield+0x1a>
    stat = osErrorISR;
 800227a:	f06f 0305 	mvn.w	r3, #5
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	e009      	b.n	8002296 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8002286:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <osThreadYield+0x3c>)
 8002288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8002296:	687b      	ldr	r3, [r7, #4]
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed04 	.word	0xe000ed04

080022a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022b0:	f3ef 8305 	mrs	r3, IPSR
 80022b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80022b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <osDelay+0x1c>
    stat = osErrorISR;
 80022bc:	f06f 0305 	mvn.w	r3, #5
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e007      	b.n	80022d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f001 fbcc 	bl	8003a6c <vTaskDelay>
    }
  }

  return (stat);
 80022d4:	68fb      	ldr	r3, [r7, #12]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4a07      	ldr	r2, [pc, #28]	@ (800230c <vApplicationGetIdleTaskMemory+0x2c>)
 80022f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4a06      	ldr	r2, [pc, #24]	@ (8002310 <vApplicationGetIdleTaskMemory+0x30>)
 80022f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2280      	movs	r2, #128	@ 0x80
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	24000054 	.word	0x24000054
 8002310:	240000b0 	.word	0x240000b0

08002314 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4a07      	ldr	r2, [pc, #28]	@ (8002340 <vApplicationGetTimerTaskMemory+0x2c>)
 8002324:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4a06      	ldr	r2, [pc, #24]	@ (8002344 <vApplicationGetTimerTaskMemory+0x30>)
 800232a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	240002b0 	.word	0x240002b0
 8002344:	2400030c 	.word	0x2400030c

08002348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002354:	f001 fc28 	bl	8003ba8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002358:	4b5c      	ldr	r3, [pc, #368]	@ (80024cc <pvPortMalloc+0x184>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002360:	f000 f924 	bl	80025ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002364:	4b5a      	ldr	r3, [pc, #360]	@ (80024d0 <pvPortMalloc+0x188>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	f040 8095 	bne.w	800249c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01e      	beq.n	80023b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002378:	2208      	movs	r2, #8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	2b00      	cmp	r3, #0
 8002388:	d015      	beq.n	80023b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f023 0307 	bic.w	r3, r3, #7
 8002390:	3308      	adds	r3, #8
 8002392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	e7fd      	b.n	80023b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d06f      	beq.n	800249c <pvPortMalloc+0x154>
 80023bc:	4b45      	ldr	r3, [pc, #276]	@ (80024d4 <pvPortMalloc+0x18c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d86a      	bhi.n	800249c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80023c6:	4b44      	ldr	r3, [pc, #272]	@ (80024d8 <pvPortMalloc+0x190>)
 80023c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80023ca:	4b43      	ldr	r3, [pc, #268]	@ (80024d8 <pvPortMalloc+0x190>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023d0:	e004      	b.n	80023dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d903      	bls.n	80023ee <pvPortMalloc+0xa6>
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f1      	bne.n	80023d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80023ee:	4b37      	ldr	r3, [pc, #220]	@ (80024cc <pvPortMalloc+0x184>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d051      	beq.n	800249c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2208      	movs	r2, #8
 80023fe:	4413      	add	r3, r2
 8002400:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	1ad2      	subs	r2, r2, r3
 8002412:	2308      	movs	r3, #8
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	429a      	cmp	r2, r3
 8002418:	d920      	bls.n	800245c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800241a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00b      	beq.n	8002444 <pvPortMalloc+0xfc>
	__asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	613b      	str	r3, [r7, #16]
}
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	1ad2      	subs	r2, r2, r3
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002456:	69b8      	ldr	r0, [r7, #24]
 8002458:	f000 f90a 	bl	8002670 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800245c:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <pvPortMalloc+0x18c>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	4a1b      	ldr	r2, [pc, #108]	@ (80024d4 <pvPortMalloc+0x18c>)
 8002468:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800246a:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <pvPortMalloc+0x18c>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <pvPortMalloc+0x194>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d203      	bcs.n	800247e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002476:	4b17      	ldr	r3, [pc, #92]	@ (80024d4 <pvPortMalloc+0x18c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a18      	ldr	r2, [pc, #96]	@ (80024dc <pvPortMalloc+0x194>)
 800247c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <pvPortMalloc+0x188>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	431a      	orrs	r2, r3
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002492:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <pvPortMalloc+0x198>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	4a11      	ldr	r2, [pc, #68]	@ (80024e0 <pvPortMalloc+0x198>)
 800249a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800249c:	f001 fb92 	bl	8003bc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <pvPortMalloc+0x17a>
	__asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	60fb      	str	r3, [r7, #12]
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	e7fd      	b.n	80024be <pvPortMalloc+0x176>
	return pvReturn;
 80024c2:	69fb      	ldr	r3, [r7, #28]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3728      	adds	r7, #40	@ 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	24004314 	.word	0x24004314
 80024d0:	24004328 	.word	0x24004328
 80024d4:	24004318 	.word	0x24004318
 80024d8:	2400430c 	.word	0x2400430c
 80024dc:	2400431c 	.word	0x2400431c
 80024e0:	24004320 	.word	0x24004320

080024e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d04f      	beq.n	8002596 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80024f6:	2308      	movs	r3, #8
 80024f8:	425b      	negs	r3, r3
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4413      	add	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <vPortFree+0xbc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10b      	bne.n	800252a <vPortFree+0x46>
	__asm volatile
 8002512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	60fb      	str	r3, [r7, #12]
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	e7fd      	b.n	8002526 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <vPortFree+0x66>
	__asm volatile
 8002532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	60bb      	str	r3, [r7, #8]
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	e7fd      	b.n	8002546 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <vPortFree+0xbc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01e      	beq.n	8002596 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d11a      	bne.n	8002596 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <vPortFree+0xbc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	43db      	mvns	r3, r3
 800256a:	401a      	ands	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002570:	f001 fb1a 	bl	8003ba8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <vPortFree+0xc0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4413      	add	r3, r2
 800257e:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <vPortFree+0xc0>)
 8002580:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002582:	6938      	ldr	r0, [r7, #16]
 8002584:	f000 f874 	bl	8002670 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <vPortFree+0xc4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	4a06      	ldr	r2, [pc, #24]	@ (80025a8 <vPortFree+0xc4>)
 8002590:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002592:	f001 fb17 	bl	8003bc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	24004328 	.word	0x24004328
 80025a4:	24004318 	.word	0x24004318
 80025a8:	24004324 	.word	0x24004324

080025ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80025b2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80025b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80025b8:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <prvHeapInit+0xac>)
 80025ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3307      	adds	r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0307 	bic.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	4a1f      	ldr	r2, [pc, #124]	@ (8002658 <prvHeapInit+0xac>)
 80025dc:	4413      	add	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80025e4:	4a1d      	ldr	r2, [pc, #116]	@ (800265c <prvHeapInit+0xb0>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80025ea:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <prvHeapInit+0xb0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	4413      	add	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80025f8:	2208      	movs	r2, #8
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0307 	bic.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a15      	ldr	r2, [pc, #84]	@ (8002660 <prvHeapInit+0xb4>)
 800260c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800260e:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <prvHeapInit+0xb4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002616:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <prvHeapInit+0xb4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	1ad2      	subs	r2, r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800262c:	4b0c      	ldr	r3, [pc, #48]	@ (8002660 <prvHeapInit+0xb4>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <prvHeapInit+0xb8>)
 800263a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a09      	ldr	r2, [pc, #36]	@ (8002668 <prvHeapInit+0xbc>)
 8002642:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002644:	4b09      	ldr	r3, [pc, #36]	@ (800266c <prvHeapInit+0xc0>)
 8002646:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800264a:	601a      	str	r2, [r3, #0]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	2400070c 	.word	0x2400070c
 800265c:	2400430c 	.word	0x2400430c
 8002660:	24004314 	.word	0x24004314
 8002664:	2400431c 	.word	0x2400431c
 8002668:	24004318 	.word	0x24004318
 800266c:	24004328 	.word	0x24004328

08002670 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002678:	4b28      	ldr	r3, [pc, #160]	@ (800271c <prvInsertBlockIntoFreeList+0xac>)
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	e002      	b.n	8002684 <prvInsertBlockIntoFreeList+0x14>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	d8f7      	bhi.n	800267e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4413      	add	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	d108      	bne.n	80026b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	441a      	add	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	441a      	add	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d118      	bne.n	80026f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <prvInsertBlockIntoFreeList+0xb0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d00d      	beq.n	80026ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	441a      	add	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e008      	b.n	8002700 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80026ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <prvInsertBlockIntoFreeList+0xb0>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e003      	b.n	8002700 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	d002      	beq.n	800270e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	2400430c 	.word	0x2400430c
 8002720:	24004314 	.word	0x24004314

08002724 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f103 0208 	add.w	r2, r3, #8
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800273c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f103 0208 	add.w	r2, r3, #8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f103 0208 	add.w	r2, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	601a      	str	r2, [r3, #0]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027dc:	d103      	bne.n	80027e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e00c      	b.n	8002800 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3308      	adds	r3, #8
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e002      	b.n	80027f4 <vListInsert+0x2e>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d2f6      	bcs.n	80027ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	601a      	str	r2, [r3, #0]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6892      	ldr	r2, [r2, #8]
 800284e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6852      	ldr	r2, [r2, #4]
 8002858:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d103      	bne.n	800286c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	1e5a      	subs	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3b04      	subs	r3, #4
 800289c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3b04      	subs	r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f023 0201 	bic.w	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3b04      	subs	r3, #4
 80028ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80028bc:	4a0c      	ldr	r2, [pc, #48]	@ (80028f0 <pxPortInitialiseStack+0x64>)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3b14      	subs	r3, #20
 80028c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3b04      	subs	r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f06f 0202 	mvn.w	r2, #2
 80028da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3b20      	subs	r3, #32
 80028e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	080028f5 	.word	0x080028f5

080028f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80028fe:	4b13      	ldr	r3, [pc, #76]	@ (800294c <prvTaskExitError+0x58>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002906:	d00b      	beq.n	8002920 <prvTaskExitError+0x2c>
	__asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	60fb      	str	r3, [r7, #12]
}
 800291a:	bf00      	nop
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <prvTaskExitError+0x28>
	__asm volatile
 8002920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	60bb      	str	r3, [r7, #8]
}
 8002932:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002934:	bf00      	nop
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0fc      	beq.n	8002936 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	24000010 	.word	0x24000010

08002950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002950:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <pxCurrentTCBConst2>)
 8002952:	6819      	ldr	r1, [r3, #0]
 8002954:	6808      	ldr	r0, [r1, #0]
 8002956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800295a:	f380 8809 	msr	PSP, r0
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	f380 8811 	msr	BASEPRI, r0
 800296a:	4770      	bx	lr
 800296c:	f3af 8000 	nop.w

08002970 <pxCurrentTCBConst2>:
 8002970:	24004374 	.word	0x24004374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop

08002978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002978:	4808      	ldr	r0, [pc, #32]	@ (800299c <prvPortStartFirstTask+0x24>)
 800297a:	6800      	ldr	r0, [r0, #0]
 800297c:	6800      	ldr	r0, [r0, #0]
 800297e:	f380 8808 	msr	MSP, r0
 8002982:	f04f 0000 	mov.w	r0, #0
 8002986:	f380 8814 	msr	CONTROL, r0
 800298a:	b662      	cpsie	i
 800298c:	b661      	cpsie	f
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	df00      	svc	0
 8002998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800299a:	bf00      	nop
 800299c:	e000ed08 	.word	0xe000ed08

080029a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029a6:	4b47      	ldr	r3, [pc, #284]	@ (8002ac4 <xPortStartScheduler+0x124>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a47      	ldr	r2, [pc, #284]	@ (8002ac8 <xPortStartScheduler+0x128>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d10b      	bne.n	80029c8 <xPortStartScheduler+0x28>
	__asm volatile
 80029b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b4:	f383 8811 	msr	BASEPRI, r3
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	60fb      	str	r3, [r7, #12]
}
 80029c2:	bf00      	nop
 80029c4:	bf00      	nop
 80029c6:	e7fd      	b.n	80029c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029c8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac4 <xPortStartScheduler+0x124>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a3f      	ldr	r2, [pc, #252]	@ (8002acc <xPortStartScheduler+0x12c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10b      	bne.n	80029ea <xPortStartScheduler+0x4a>
	__asm volatile
 80029d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d6:	f383 8811 	msr	BASEPRI, r3
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	613b      	str	r3, [r7, #16]
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	e7fd      	b.n	80029e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80029ea:	4b39      	ldr	r3, [pc, #228]	@ (8002ad0 <xPortStartScheduler+0x130>)
 80029ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	22ff      	movs	r2, #255	@ 0xff
 80029fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4b31      	ldr	r3, [pc, #196]	@ (8002ad4 <xPortStartScheduler+0x134>)
 8002a10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a12:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <xPortStartScheduler+0x138>)
 8002a14:	2207      	movs	r2, #7
 8002a16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a18:	e009      	b.n	8002a2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad8 <xPortStartScheduler+0x138>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad8 <xPortStartScheduler+0x138>)
 8002a22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a36:	2b80      	cmp	r3, #128	@ 0x80
 8002a38:	d0ef      	beq.n	8002a1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a3a:	4b27      	ldr	r3, [pc, #156]	@ (8002ad8 <xPortStartScheduler+0x138>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d00b      	beq.n	8002a5e <xPortStartScheduler+0xbe>
	__asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	60bb      	str	r3, [r7, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	e7fd      	b.n	8002a5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <xPortStartScheduler+0x138>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <xPortStartScheduler+0x138>)
 8002a66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <xPortStartScheduler+0x138>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <xPortStartScheduler+0x138>)
 8002a72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a7c:	4b17      	ldr	r3, [pc, #92]	@ (8002adc <xPortStartScheduler+0x13c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a16      	ldr	r2, [pc, #88]	@ (8002adc <xPortStartScheduler+0x13c>)
 8002a82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a88:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <xPortStartScheduler+0x13c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a13      	ldr	r2, [pc, #76]	@ (8002adc <xPortStartScheduler+0x13c>)
 8002a8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002a92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002a94:	f000 f8da 	bl	8002c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002a98:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <xPortStartScheduler+0x140>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002a9e:	f000 f8f9 	bl	8002c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002aa2:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <xPortStartScheduler+0x144>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae4 <xPortStartScheduler+0x144>)
 8002aa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002aac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002aae:	f7ff ff63 	bl	8002978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ab2:	f001 f9ef 	bl	8003e94 <vTaskSwitchContext>
	prvTaskExitError();
 8002ab6:	f7ff ff1d 	bl	80028f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	e000ed00 	.word	0xe000ed00
 8002ac8:	410fc271 	.word	0x410fc271
 8002acc:	410fc270 	.word	0x410fc270
 8002ad0:	e000e400 	.word	0xe000e400
 8002ad4:	2400432c 	.word	0x2400432c
 8002ad8:	24004330 	.word	0x24004330
 8002adc:	e000ed20 	.word	0xe000ed20
 8002ae0:	24000010 	.word	0x24000010
 8002ae4:	e000ef34 	.word	0xe000ef34

08002ae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
	__asm volatile
 8002aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	607b      	str	r3, [r7, #4]
}
 8002b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <vPortEnterCritical+0x5c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3301      	adds	r3, #1
 8002b08:	4a0e      	ldr	r2, [pc, #56]	@ (8002b44 <vPortEnterCritical+0x5c>)
 8002b0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <vPortEnterCritical+0x5c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d110      	bne.n	8002b36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <vPortEnterCritical+0x60>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <vPortEnterCritical+0x4e>
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	603b      	str	r3, [r7, #0]
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	e7fd      	b.n	8002b32 <vPortEnterCritical+0x4a>
	}
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	24000010 	.word	0x24000010
 8002b48:	e000ed04 	.word	0xe000ed04

08002b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <vPortExitCritical+0x50>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10b      	bne.n	8002b72 <vPortExitCritical+0x26>
	__asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	607b      	str	r3, [r7, #4]
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	e7fd      	b.n	8002b6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002b72:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <vPortExitCritical+0x50>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <vPortExitCritical+0x50>)
 8002b7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b7c:	4b07      	ldr	r3, [pc, #28]	@ (8002b9c <vPortExitCritical+0x50>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <vPortExitCritical+0x44>
 8002b84:	2300      	movs	r3, #0
 8002b86:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	24000010 	.word	0x24000010

08002ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002ba0:	f3ef 8009 	mrs	r0, PSP
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <pxCurrentTCBConst>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	f01e 0f10 	tst.w	lr, #16
 8002bb0:	bf08      	it	eq
 8002bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bba:	6010      	str	r0, [r2, #0]
 8002bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002bc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002bc4:	f380 8811 	msr	BASEPRI, r0
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f001 f960 	bl	8003e94 <vTaskSwitchContext>
 8002bd4:	f04f 0000 	mov.w	r0, #0
 8002bd8:	f380 8811 	msr	BASEPRI, r0
 8002bdc:	bc09      	pop	{r0, r3}
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	6808      	ldr	r0, [r1, #0]
 8002be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be6:	f01e 0f10 	tst.w	lr, #16
 8002bea:	bf08      	it	eq
 8002bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002bf0:	f380 8809 	msr	PSP, r0
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	f3af 8000 	nop.w

08002c00 <pxCurrentTCBConst>:
 8002c00:	24004374 	.word	0x24004374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop

08002c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	607b      	str	r3, [r7, #4]
}
 8002c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002c22:	f001 f87d 	bl	8003d20 <xTaskIncrementTick>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <xPortSysTickHandler+0x40>)
 8002c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	2300      	movs	r3, #0
 8002c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f383 8811 	msr	BASEPRI, r3
}
 8002c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c50:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <vPortSetupTimerInterrupt+0x34>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <vPortSetupTimerInterrupt+0x38>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <vPortSetupTimerInterrupt+0x3c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <vPortSetupTimerInterrupt+0x40>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	4a09      	ldr	r2, [pc, #36]	@ (8002c90 <vPortSetupTimerInterrupt+0x44>)
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c6e:	4b04      	ldr	r3, [pc, #16]	@ (8002c80 <vPortSetupTimerInterrupt+0x34>)
 8002c70:	2207      	movs	r2, #7
 8002c72:	601a      	str	r2, [r3, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000e010 	.word	0xe000e010
 8002c84:	e000e018 	.word	0xe000e018
 8002c88:	24000000 	.word	0x24000000
 8002c8c:	10624dd3 	.word	0x10624dd3
 8002c90:	e000e014 	.word	0xe000e014

08002c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002c94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002ca4 <vPortEnableVFP+0x10>
 8002c98:	6801      	ldr	r1, [r0, #0]
 8002c9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002c9e:	6001      	str	r1, [r0, #0]
 8002ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002ca2:	bf00      	nop
 8002ca4:	e000ed88 	.word	0xe000ed88

08002ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002cae:	f3ef 8305 	mrs	r3, IPSR
 8002cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b0f      	cmp	r3, #15
 8002cb8:	d915      	bls.n	8002ce6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002cba:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <vPortValidateInterruptPriority+0x74>)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002cc4:	4b16      	ldr	r3, [pc, #88]	@ (8002d20 <vPortValidateInterruptPriority+0x78>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	7afa      	ldrb	r2, [r7, #11]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d20b      	bcs.n	8002ce6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8002cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	607b      	str	r3, [r7, #4]
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	e7fd      	b.n	8002ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <vPortValidateInterruptPriority+0x7c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002cee:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <vPortValidateInterruptPriority+0x80>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d90b      	bls.n	8002d0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	603b      	str	r3, [r7, #0]
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	e7fd      	b.n	8002d0a <vPortValidateInterruptPriority+0x62>
	}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000e3f0 	.word	0xe000e3f0
 8002d20:	2400432c 	.word	0x2400432c
 8002d24:	e000ed0c 	.word	0xe000ed0c
 8002d28:	24004330 	.word	0x24004330

08002d2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <xQueueGenericReset+0x2c>
	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	60bb      	str	r3, [r7, #8]
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d58:	f7ff fec6 	bl	8002ae8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	68f9      	ldr	r1, [r7, #12]
 8002d66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	441a      	add	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	441a      	add	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	22ff      	movs	r2, #255	@ 0xff
 8002d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	22ff      	movs	r2, #255	@ 0xff
 8002da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d114      	bne.n	8002dd8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01a      	beq.n	8002dec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3310      	adds	r3, #16
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 f91a 	bl	8003ff4 <xTaskRemoveFromEventList>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d012      	beq.n	8002dec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dfc <xQueueGenericReset+0xd0>)
 8002dc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	e009      	b.n	8002dec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3310      	adds	r3, #16
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fca1 	bl	8002724 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3324      	adds	r3, #36	@ 0x24
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fc9c 	bl	8002724 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dec:	f7ff feae 	bl	8002b4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002df0:	2301      	movs	r3, #1
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08e      	sub	sp, #56	@ 0x38
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10b      	bne.n	8002e2c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	e7fd      	b.n	8002e46 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <xQueueGenericCreateStatic+0x56>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <xQueueGenericCreateStatic+0x5a>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <xQueueGenericCreateStatic+0x5c>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10b      	bne.n	8002e78 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	623b      	str	r3, [r7, #32]
}
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <xQueueGenericCreateStatic+0x84>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <xQueueGenericCreateStatic+0x88>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <xQueueGenericCreateStatic+0x8a>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	61fb      	str	r3, [r7, #28]
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	e7fd      	b.n	8002ea2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ea6:	2350      	movs	r3, #80	@ 0x50
 8002ea8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b50      	cmp	r3, #80	@ 0x50
 8002eae:	d00b      	beq.n	8002ec8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	61bb      	str	r3, [r7, #24]
}
 8002ec2:	bf00      	nop
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ec8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002edc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f805 	bl	8002efa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3730      	adds	r7, #48	@ 0x30
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d103      	bne.n	8002f16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e002      	b.n	8002f1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f28:	2101      	movs	r1, #1
 8002f2a:	69b8      	ldr	r0, [r7, #24]
 8002f2c:	f7ff fefe 	bl	8002d2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08e      	sub	sp, #56	@ 0x38
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <xQueueGenericSend+0x34>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <xQueueGenericSend+0x42>
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <xQueueGenericSend+0x46>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <xQueueGenericSend+0x48>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <xQueueGenericSend+0x64>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d103      	bne.n	8002fb2 <xQueueGenericSend+0x72>
 8002faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <xQueueGenericSend+0x76>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <xQueueGenericSend+0x78>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <xQueueGenericSend+0x94>
	__asm volatile
 8002fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	623b      	str	r3, [r7, #32]
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	e7fd      	b.n	8002fd0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fd4:	f001 f9ce 	bl	8004374 <xTaskGetSchedulerState>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <xQueueGenericSend+0xa4>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <xQueueGenericSend+0xa8>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <xQueueGenericSend+0xaa>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <xQueueGenericSend+0xc6>
	__asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	61fb      	str	r3, [r7, #28]
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	e7fd      	b.n	8003002 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003006:	f7ff fd6f 	bl	8002ae8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800300e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <xQueueGenericSend+0xdc>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d129      	bne.n	8003070 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003022:	f000 fa0f 	bl	8003444 <prvCopyDataToQueue>
 8003026:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	d010      	beq.n	8003052 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003032:	3324      	adds	r3, #36	@ 0x24
 8003034:	4618      	mov	r0, r3
 8003036:	f000 ffdd 	bl	8003ff4 <xTaskRemoveFromEventList>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003040:	4b3f      	ldr	r3, [pc, #252]	@ (8003140 <xQueueGenericSend+0x200>)
 8003042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	e00a      	b.n	8003068 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003058:	4b39      	ldr	r3, [pc, #228]	@ (8003140 <xQueueGenericSend+0x200>)
 800305a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003068:	f7ff fd70 	bl	8002b4c <vPortExitCritical>
				return pdPASS;
 800306c:	2301      	movs	r3, #1
 800306e:	e063      	b.n	8003138 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003076:	f7ff fd69 	bl	8002b4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800307a:	2300      	movs	r3, #0
 800307c:	e05c      	b.n	8003138 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800307e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	4618      	mov	r0, r3
 800308a:	f001 f817 	bl	80040bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800308e:	2301      	movs	r3, #1
 8003090:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003092:	f7ff fd5b 	bl	8002b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003096:	f000 fd87 	bl	8003ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800309a:	f7ff fd25 	bl	8002ae8 <vPortEnterCritical>
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030a4:	b25b      	sxtb	r3, r3
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030aa:	d103      	bne.n	80030b4 <xQueueGenericSend+0x174>
 80030ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030ba:	b25b      	sxtb	r3, r3
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030c0:	d103      	bne.n	80030ca <xQueueGenericSend+0x18a>
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030ca:	f7ff fd3f 	bl	8002b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030ce:	1d3a      	adds	r2, r7, #4
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 f806 	bl	80040e8 <xTaskCheckForTimeOut>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d124      	bne.n	800312c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030e4:	f000 faa6 	bl	8003634 <prvIsQueueFull>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d018      	beq.n	8003120 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f0:	3310      	adds	r3, #16
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 ff2a 	bl	8003f50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030fe:	f000 fa31 	bl	8003564 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003102:	f000 fd5f 	bl	8003bc4 <xTaskResumeAll>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	f47f af7c 	bne.w	8003006 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800310e:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <xQueueGenericSend+0x200>)
 8003110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	e772      	b.n	8003006 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003122:	f000 fa1f 	bl	8003564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003126:	f000 fd4d 	bl	8003bc4 <xTaskResumeAll>
 800312a:	e76c      	b.n	8003006 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800312c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800312e:	f000 fa19 	bl	8003564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003132:	f000 fd47 	bl	8003bc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003136:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003138:	4618      	mov	r0, r3
 800313a:	3738      	adds	r7, #56	@ 0x38
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b090      	sub	sp, #64	@ 0x40
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10b      	bne.n	8003174 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <xQueueGenericSendFromISR+0x3e>
 800317a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <xQueueGenericSendFromISR+0x42>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <xQueueGenericSendFromISR+0x44>
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d103      	bne.n	80031b2 <xQueueGenericSendFromISR+0x6e>
 80031aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <xQueueGenericSendFromISR+0x72>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <xQueueGenericSendFromISR+0x74>
 80031b6:	2300      	movs	r3, #0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	623b      	str	r3, [r7, #32]
}
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031d4:	f7ff fd68 	bl	8002ca8 <vPortValidateInterruptPriority>
	__asm volatile
 80031d8:	f3ef 8211 	mrs	r2, BASEPRI
 80031dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	61fa      	str	r2, [r7, #28]
 80031ee:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80031f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d302      	bcc.n	8003206 <xQueueGenericSendFromISR+0xc2>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d12f      	bne.n	8003266 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003208:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800320c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800321c:	f000 f912 	bl	8003444 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003220:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003228:	d112      	bne.n	8003250 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800322a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003234:	3324      	adds	r3, #36	@ 0x24
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fedc 	bl	8003ff4 <xTaskRemoveFromEventList>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00e      	beq.n	8003260 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00b      	beq.n	8003260 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e007      	b.n	8003260 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003250:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003254:	3301      	adds	r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	b25a      	sxtb	r2, r3
 800325a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003260:	2301      	movs	r3, #1
 8003262:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003264:	e001      	b.n	800326a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003266:	2300      	movs	r3, #0
 8003268:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800326a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800326c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f383 8811 	msr	BASEPRI, r3
}
 8003274:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003278:	4618      	mov	r0, r3
 800327a:	3740      	adds	r7, #64	@ 0x40
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	@ 0x30
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800328c:	2300      	movs	r3, #0
 800328e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <xQueueReceive+0x32>
	__asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	623b      	str	r3, [r7, #32]
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	e7fd      	b.n	80032ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <xQueueReceive+0x40>
 80032b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <xQueueReceive+0x44>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <xQueueReceive+0x46>
 80032c4:	2300      	movs	r3, #0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10b      	bne.n	80032e2 <xQueueReceive+0x62>
	__asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	61fb      	str	r3, [r7, #28]
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	e7fd      	b.n	80032de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032e2:	f001 f847 	bl	8004374 <xTaskGetSchedulerState>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d102      	bne.n	80032f2 <xQueueReceive+0x72>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <xQueueReceive+0x76>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <xQueueReceive+0x78>
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <xQueueReceive+0x94>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	61bb      	str	r3, [r7, #24]
}
 800330e:	bf00      	nop
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003314:	f7ff fbe8 	bl	8002ae8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01f      	beq.n	8003364 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003328:	f000 f8f6 	bl	8003518 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	1e5a      	subs	r2, r3, #1
 8003330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003332:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00f      	beq.n	800335c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333e:	3310      	adds	r3, #16
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fe57 	bl	8003ff4 <xTaskRemoveFromEventList>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800334c:	4b3c      	ldr	r3, [pc, #240]	@ (8003440 <xQueueReceive+0x1c0>)
 800334e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800335c:	f7ff fbf6 	bl	8002b4c <vPortExitCritical>
				return pdPASS;
 8003360:	2301      	movs	r3, #1
 8003362:	e069      	b.n	8003438 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d103      	bne.n	8003372 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800336a:	f7ff fbef 	bl	8002b4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800336e:	2300      	movs	r3, #0
 8003370:	e062      	b.n	8003438 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d106      	bne.n	8003386 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003378:	f107 0310 	add.w	r3, r7, #16
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fe9d 	bl	80040bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003382:	2301      	movs	r3, #1
 8003384:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003386:	f7ff fbe1 	bl	8002b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800338a:	f000 fc0d 	bl	8003ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800338e:	f7ff fbab 	bl	8002ae8 <vPortEnterCritical>
 8003392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003394:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003398:	b25b      	sxtb	r3, r3
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800339e:	d103      	bne.n	80033a8 <xQueueReceive+0x128>
 80033a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033b4:	d103      	bne.n	80033be <xQueueReceive+0x13e>
 80033b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033be:	f7ff fbc5 	bl	8002b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033c2:	1d3a      	adds	r2, r7, #4
 80033c4:	f107 0310 	add.w	r3, r7, #16
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fe8c 	bl	80040e8 <xTaskCheckForTimeOut>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d123      	bne.n	800341e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033d8:	f000 f916 	bl	8003608 <prvIsQueueEmpty>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d017      	beq.n	8003412 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e4:	3324      	adds	r3, #36	@ 0x24
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4611      	mov	r1, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fdb0 	bl	8003f50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033f2:	f000 f8b7 	bl	8003564 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033f6:	f000 fbe5 	bl	8003bc4 <xTaskResumeAll>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d189      	bne.n	8003314 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003400:	4b0f      	ldr	r3, [pc, #60]	@ (8003440 <xQueueReceive+0x1c0>)
 8003402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	e780      	b.n	8003314 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003414:	f000 f8a6 	bl	8003564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003418:	f000 fbd4 	bl	8003bc4 <xTaskResumeAll>
 800341c:	e77a      	b.n	8003314 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800341e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003420:	f000 f8a0 	bl	8003564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003424:	f000 fbce 	bl	8003bc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003428:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800342a:	f000 f8ed 	bl	8003608 <prvIsQueueEmpty>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	f43f af6f 	beq.w	8003314 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003436:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003438:	4618      	mov	r0, r3
 800343a:	3730      	adds	r7, #48	@ 0x30
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	e000ed04 	.word	0xe000ed04

08003444 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10d      	bne.n	800347e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d14d      	bne.n	8003506 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 ff9e 	bl	80043b0 <xTaskPriorityDisinherit>
 8003474:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	e043      	b.n	8003506 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d119      	bne.n	80034b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6858      	ldr	r0, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	461a      	mov	r2, r3
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	f001 fbd8 	bl	8004c44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d32b      	bcc.n	8003506 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	e026      	b.n	8003506 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68d8      	ldr	r0, [r3, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	461a      	mov	r2, r3
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	f001 fbbe 	bl	8004c44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	425b      	negs	r3, r3
 80034d2:	441a      	add	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d207      	bcs.n	80034f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	425b      	negs	r3, r3
 80034ee:	441a      	add	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d105      	bne.n	8003506 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	3b01      	subs	r3, #1
 8003504:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800350e:	697b      	ldr	r3, [r7, #20]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d018      	beq.n	800355c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	441a      	add	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	429a      	cmp	r2, r3
 8003542:	d303      	bcc.n	800354c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68d9      	ldr	r1, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	461a      	mov	r2, r3
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	f001 fb74 	bl	8004c44 <memcpy>
	}
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800356c:	f7ff fabc 	bl	8002ae8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003576:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003578:	e011      	b.n	800359e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d012      	beq.n	80035a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3324      	adds	r3, #36	@ 0x24
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fd34 	bl	8003ff4 <xTaskRemoveFromEventList>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003592:	f000 fe0d 	bl	80041b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	3b01      	subs	r3, #1
 800359a:	b2db      	uxtb	r3, r3
 800359c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800359e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	dce9      	bgt.n	800357a <prvUnlockQueue+0x16>
 80035a6:	e000      	b.n	80035aa <prvUnlockQueue+0x46>
					break;
 80035a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	22ff      	movs	r2, #255	@ 0xff
 80035ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80035b2:	f7ff facb 	bl	8002b4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035b6:	f7ff fa97 	bl	8002ae8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035c2:	e011      	b.n	80035e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d012      	beq.n	80035f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3310      	adds	r3, #16
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fd0f 	bl	8003ff4 <xTaskRemoveFromEventList>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035dc:	f000 fde8 	bl	80041b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035e0:	7bbb      	ldrb	r3, [r7, #14]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	dce9      	bgt.n	80035c4 <prvUnlockQueue+0x60>
 80035f0:	e000      	b.n	80035f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	22ff      	movs	r2, #255	@ 0xff
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80035fc:	f7ff faa6 	bl	8002b4c <vPortExitCritical>
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003610:	f7ff fa6a 	bl	8002ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800361c:	2301      	movs	r3, #1
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	e001      	b.n	8003626 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003626:	f7ff fa91 	bl	8002b4c <vPortExitCritical>

	return xReturn;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800363c:	f7ff fa54 	bl	8002ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	429a      	cmp	r2, r3
 800364a:	d102      	bne.n	8003652 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800364c:	2301      	movs	r3, #1
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	e001      	b.n	8003656 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003656:	f7ff fa79 	bl	8002b4c <vPortExitCritical>

	return xReturn;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e014      	b.n	800369e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003674:	4a0f      	ldr	r2, [pc, #60]	@ (80036b4 <vQueueAddToRegistry+0x50>)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003680:	490c      	ldr	r1, [pc, #48]	@ (80036b4 <vQueueAddToRegistry+0x50>)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800368a:	4a0a      	ldr	r2, [pc, #40]	@ (80036b4 <vQueueAddToRegistry+0x50>)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003696:	e006      	b.n	80036a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3301      	adds	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b07      	cmp	r3, #7
 80036a2:	d9e7      	bls.n	8003674 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	24004334 	.word	0x24004334

080036b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036c8:	f7ff fa0e 	bl	8002ae8 <vPortEnterCritical>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036d2:	b25b      	sxtb	r3, r3
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036d8:	d103      	bne.n	80036e2 <vQueueWaitForMessageRestricted+0x2a>
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036e8:	b25b      	sxtb	r3, r3
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ee:	d103      	bne.n	80036f8 <vQueueWaitForMessageRestricted+0x40>
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036f8:	f7ff fa28 	bl	8002b4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d106      	bne.n	8003712 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3324      	adds	r3, #36	@ 0x24
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fc45 	bl	8003f9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003712:	6978      	ldr	r0, [r7, #20]
 8003714:	f7ff ff26 	bl	8003564 <prvUnlockQueue>
	}
 8003718:	bf00      	nop
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08e      	sub	sp, #56	@ 0x38
 8003724:	af04      	add	r7, sp, #16
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800372e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	623b      	str	r3, [r7, #32]
}
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	e7fd      	b.n	8003748 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800374c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	61fb      	str	r3, [r7, #28]
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	e7fd      	b.n	8003766 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800376a:	235c      	movs	r3, #92	@ 0x5c
 800376c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b5c      	cmp	r3, #92	@ 0x5c
 8003772:	d00b      	beq.n	800378c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	61bb      	str	r3, [r7, #24]
}
 8003786:	bf00      	nop
 8003788:	bf00      	nop
 800378a:	e7fd      	b.n	8003788 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800378c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01e      	beq.n	80037d2 <xTaskCreateStatic+0xb2>
 8003794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003796:	2b00      	cmp	r3, #0
 8003798:	d01b      	beq.n	80037d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800379a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037ac:	2300      	movs	r3, #0
 80037ae:	9303      	str	r3, [sp, #12]
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	9302      	str	r3, [sp, #8]
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f850 	bl	800386a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037cc:	f000 f8de 	bl	800398c <prvAddNewTaskToReadyList>
 80037d0:	e001      	b.n	80037d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037d6:	697b      	ldr	r3, [r7, #20]
	}
 80037d8:	4618      	mov	r0, r3
 80037da:	3728      	adds	r7, #40	@ 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	@ 0x30
 80037e4:	af04      	add	r7, sp, #16
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe fda7 	bl	8002348 <pvPortMalloc>
 80037fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00e      	beq.n	8003820 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003802:	205c      	movs	r0, #92	@ 0x5c
 8003804:	f7fe fda0 	bl	8002348 <pvPortMalloc>
 8003808:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	631a      	str	r2, [r3, #48]	@ 0x30
 8003816:	e005      	b.n	8003824 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003818:	6978      	ldr	r0, [r7, #20]
 800381a:	f7fe fe63 	bl	80024e4 <vPortFree>
 800381e:	e001      	b.n	8003824 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d017      	beq.n	800385a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	2300      	movs	r3, #0
 8003836:	9303      	str	r3, [sp, #12]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	9302      	str	r3, [sp, #8]
 800383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f80e 	bl	800386a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800384e:	69f8      	ldr	r0, [r7, #28]
 8003850:	f000 f89c 	bl	800398c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003854:	2301      	movs	r3, #1
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	e002      	b.n	8003860 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800385e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003860:	69bb      	ldr	r3, [r7, #24]
	}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b088      	sub	sp, #32
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	461a      	mov	r2, r3
 8003882:	21a5      	movs	r1, #165	@ 0xa5
 8003884:	f001 f9b2 	bl	8004bec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003892:	440b      	add	r3, r1
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f023 0307 	bic.w	r3, r3, #7
 80038a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00b      	beq.n	80038c4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	617b      	str	r3, [r7, #20]
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01f      	beq.n	800390a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	e012      	b.n	80038f6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	7819      	ldrb	r1, [r3, #0]
 80038d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	3334      	adds	r3, #52	@ 0x34
 80038e0:	460a      	mov	r2, r1
 80038e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3301      	adds	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d9e9      	bls.n	80038d0 <prvInitialiseNewTask+0x66>
 80038fc:	e000      	b.n	8003900 <prvInitialiseNewTask+0x96>
			{
				break;
 80038fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003908:	e003      	b.n	8003912 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800390a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003914:	2b37      	cmp	r3, #55	@ 0x37
 8003916:	d901      	bls.n	800391c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003918:	2337      	movs	r3, #55	@ 0x37
 800391a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003920:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003926:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	2200      	movs	r2, #0
 800392c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003930:	3304      	adds	r3, #4
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe ff16 	bl	8002764 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	3318      	adds	r3, #24
 800393c:	4618      	mov	r0, r3
 800393e:	f7fe ff11 	bl	8002764 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003946:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003956:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395a:	2200      	movs	r2, #0
 800395c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	68f9      	ldr	r1, [r7, #12]
 800396a:	69b8      	ldr	r0, [r7, #24]
 800396c:	f7fe ff8e 	bl	800288c <pxPortInitialiseStack>
 8003970:	4602      	mov	r2, r0
 8003972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003974:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800397c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003982:	bf00      	nop
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003994:	f7ff f8a8 	bl	8002ae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003998:	4b2d      	ldr	r3, [pc, #180]	@ (8003a50 <prvAddNewTaskToReadyList+0xc4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	4a2c      	ldr	r2, [pc, #176]	@ (8003a50 <prvAddNewTaskToReadyList+0xc4>)
 80039a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039b0:	4b27      	ldr	r3, [pc, #156]	@ (8003a50 <prvAddNewTaskToReadyList+0xc4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d110      	bne.n	80039da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039b8:	f000 fc1e 	bl	80041f8 <prvInitialiseTaskLists>
 80039bc:	e00d      	b.n	80039da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039be:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <prvAddNewTaskToReadyList+0xcc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039c6:	4b23      	ldr	r3, [pc, #140]	@ (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d802      	bhi.n	80039da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039da:	4b20      	ldr	r3, [pc, #128]	@ (8003a5c <prvAddNewTaskToReadyList+0xd0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3301      	adds	r3, #1
 80039e0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a5c <prvAddNewTaskToReadyList+0xd0>)
 80039e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039e4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a5c <prvAddNewTaskToReadyList+0xd0>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a60 <prvAddNewTaskToReadyList+0xd4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d903      	bls.n	8003a00 <prvAddNewTaskToReadyList+0x74>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	4a18      	ldr	r2, [pc, #96]	@ (8003a60 <prvAddNewTaskToReadyList+0xd4>)
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4a15      	ldr	r2, [pc, #84]	@ (8003a64 <prvAddNewTaskToReadyList+0xd8>)
 8003a0e:	441a      	add	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f7fe feb1 	bl	800277e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a1c:	f7ff f896 	bl	8002b4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a20:	4b0d      	ldr	r3, [pc, #52]	@ (8003a58 <prvAddNewTaskToReadyList+0xcc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a28:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d207      	bcs.n	8003a46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a36:	4b0c      	ldr	r3, [pc, #48]	@ (8003a68 <prvAddNewTaskToReadyList+0xdc>)
 8003a38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	24004848 	.word	0x24004848
 8003a54:	24004374 	.word	0x24004374
 8003a58:	24004854 	.word	0x24004854
 8003a5c:	24004864 	.word	0x24004864
 8003a60:	24004850 	.word	0x24004850
 8003a64:	24004378 	.word	0x24004378
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <vTaskDelay+0x64>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <vTaskDelay+0x32>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	60bb      	str	r3, [r7, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	e7fd      	b.n	8003a9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a9e:	f000 f883 	bl	8003ba8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fcf3 	bl	8004490 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003aaa:	f000 f88b 	bl	8003bc4 <xTaskResumeAll>
 8003aae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d107      	bne.n	8003ac6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003ab6:	4b07      	ldr	r3, [pc, #28]	@ (8003ad4 <vTaskDelay+0x68>)
 8003ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	24004870 	.word	0x24004870
 8003ad4:	e000ed04 	.word	0xe000ed04

08003ad8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	@ 0x28
 8003adc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ae6:	463a      	mov	r2, r7
 8003ae8:	1d39      	adds	r1, r7, #4
 8003aea:	f107 0308 	add.w	r3, r7, #8
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fbf6 	bl	80022e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	9202      	str	r2, [sp, #8]
 8003afc:	9301      	str	r3, [sp, #4]
 8003afe:	2300      	movs	r3, #0
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	2300      	movs	r3, #0
 8003b04:	460a      	mov	r2, r1
 8003b06:	4922      	ldr	r1, [pc, #136]	@ (8003b90 <vTaskStartScheduler+0xb8>)
 8003b08:	4822      	ldr	r0, [pc, #136]	@ (8003b94 <vTaskStartScheduler+0xbc>)
 8003b0a:	f7ff fe09 	bl	8003720 <xTaskCreateStatic>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4a21      	ldr	r2, [pc, #132]	@ (8003b98 <vTaskStartScheduler+0xc0>)
 8003b12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b14:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <vTaskStartScheduler+0xc0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e001      	b.n	8003b26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d102      	bne.n	8003b32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b2c:	f000 fd04 	bl	8004538 <xTimerCreateTimerTask>
 8003b30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d116      	bne.n	8003b66 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	613b      	str	r3, [r7, #16]
}
 8003b4a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b4c:	4b13      	ldr	r3, [pc, #76]	@ (8003b9c <vTaskStartScheduler+0xc4>)
 8003b4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b54:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <vTaskStartScheduler+0xc8>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ba4 <vTaskStartScheduler+0xcc>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b60:	f7fe ff1e 	bl	80029a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b64:	e00f      	b.n	8003b86 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b6c:	d10b      	bne.n	8003b86 <vTaskStartScheduler+0xae>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	60fb      	str	r3, [r7, #12]
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	e7fd      	b.n	8003b82 <vTaskStartScheduler+0xaa>
}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	08004cb0 	.word	0x08004cb0
 8003b94:	080041c9 	.word	0x080041c9
 8003b98:	2400486c 	.word	0x2400486c
 8003b9c:	24004868 	.word	0x24004868
 8003ba0:	24004854 	.word	0x24004854
 8003ba4:	2400484c 	.word	0x2400484c

08003ba8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bac:	4b04      	ldr	r3, [pc, #16]	@ (8003bc0 <vTaskSuspendAll+0x18>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	4a03      	ldr	r2, [pc, #12]	@ (8003bc0 <vTaskSuspendAll+0x18>)
 8003bb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	24004870 	.word	0x24004870

08003bc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bd2:	4b42      	ldr	r3, [pc, #264]	@ (8003cdc <xTaskResumeAll+0x118>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	603b      	str	r3, [r7, #0]
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	e7fd      	b.n	8003bee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bf2:	f7fe ff79 	bl	8002ae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bf6:	4b39      	ldr	r3, [pc, #228]	@ (8003cdc <xTaskResumeAll+0x118>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	4a37      	ldr	r2, [pc, #220]	@ (8003cdc <xTaskResumeAll+0x118>)
 8003bfe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c00:	4b36      	ldr	r3, [pc, #216]	@ (8003cdc <xTaskResumeAll+0x118>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d162      	bne.n	8003cce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c08:	4b35      	ldr	r3, [pc, #212]	@ (8003ce0 <xTaskResumeAll+0x11c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d05e      	beq.n	8003cce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c10:	e02f      	b.n	8003c72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c12:	4b34      	ldr	r3, [pc, #208]	@ (8003ce4 <xTaskResumeAll+0x120>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3318      	adds	r3, #24
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fe0a 	bl	8002838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fe fe05 	bl	8002838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c32:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce8 <xTaskResumeAll+0x124>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d903      	bls.n	8003c42 <xTaskResumeAll+0x7e>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce8 <xTaskResumeAll+0x124>)
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4a27      	ldr	r2, [pc, #156]	@ (8003cec <xTaskResumeAll+0x128>)
 8003c50:	441a      	add	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f7fe fd90 	bl	800277e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c62:	4b23      	ldr	r3, [pc, #140]	@ (8003cf0 <xTaskResumeAll+0x12c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d302      	bcc.n	8003c72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003c6c:	4b21      	ldr	r3, [pc, #132]	@ (8003cf4 <xTaskResumeAll+0x130>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c72:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce4 <xTaskResumeAll+0x120>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1cb      	bne.n	8003c12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c80:	f000 fb58 	bl	8004334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c84:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf8 <xTaskResumeAll+0x134>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c90:	f000 f846 	bl	8003d20 <xTaskIncrementTick>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003c9a:	4b16      	ldr	r3, [pc, #88]	@ (8003cf4 <xTaskResumeAll+0x130>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f1      	bne.n	8003c90 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003cac:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <xTaskResumeAll+0x134>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cb2:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <xTaskResumeAll+0x130>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003cfc <xTaskResumeAll+0x138>)
 8003cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cce:	f7fe ff3d 	bl	8002b4c <vPortExitCritical>

	return xAlreadyYielded;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	24004870 	.word	0x24004870
 8003ce0:	24004848 	.word	0x24004848
 8003ce4:	24004808 	.word	0x24004808
 8003ce8:	24004850 	.word	0x24004850
 8003cec:	24004378 	.word	0x24004378
 8003cf0:	24004374 	.word	0x24004374
 8003cf4:	2400485c 	.word	0x2400485c
 8003cf8:	24004858 	.word	0x24004858
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d06:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <xTaskGetTickCount+0x1c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d0c:	687b      	ldr	r3, [r7, #4]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	2400484c 	.word	0x2400484c

08003d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e68 <xTaskIncrementTick+0x148>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 8090 	bne.w	8003e54 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d34:	4b4d      	ldr	r3, [pc, #308]	@ (8003e6c <xTaskIncrementTick+0x14c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e6c <xTaskIncrementTick+0x14c>)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d121      	bne.n	8003d8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d48:	4b49      	ldr	r3, [pc, #292]	@ (8003e70 <xTaskIncrementTick+0x150>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	603b      	str	r3, [r7, #0]
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <xTaskIncrementTick+0x46>
 8003d6a:	4b41      	ldr	r3, [pc, #260]	@ (8003e70 <xTaskIncrementTick+0x150>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	4b40      	ldr	r3, [pc, #256]	@ (8003e74 <xTaskIncrementTick+0x154>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a3e      	ldr	r2, [pc, #248]	@ (8003e70 <xTaskIncrementTick+0x150>)
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	4a3e      	ldr	r2, [pc, #248]	@ (8003e74 <xTaskIncrementTick+0x154>)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e78 <xTaskIncrementTick+0x158>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	4a3c      	ldr	r2, [pc, #240]	@ (8003e78 <xTaskIncrementTick+0x158>)
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	f000 fad4 	bl	8004334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e7c <xTaskIncrementTick+0x15c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d349      	bcc.n	8003e2a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d96:	4b36      	ldr	r3, [pc, #216]	@ (8003e70 <xTaskIncrementTick+0x150>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da0:	4b36      	ldr	r3, [pc, #216]	@ (8003e7c <xTaskIncrementTick+0x15c>)
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003da6:	601a      	str	r2, [r3, #0]
					break;
 8003da8:	e03f      	b.n	8003e2a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003daa:	4b31      	ldr	r3, [pc, #196]	@ (8003e70 <xTaskIncrementTick+0x150>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d203      	bcs.n	8003dca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8003e7c <xTaskIncrementTick+0x15c>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003dc8:	e02f      	b.n	8003e2a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe fd32 	bl	8002838 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	3318      	adds	r3, #24
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fd29 	bl	8002838 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dea:	4b25      	ldr	r3, [pc, #148]	@ (8003e80 <xTaskIncrementTick+0x160>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d903      	bls.n	8003dfa <xTaskIncrementTick+0xda>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df6:	4a22      	ldr	r2, [pc, #136]	@ (8003e80 <xTaskIncrementTick+0x160>)
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4a1f      	ldr	r2, [pc, #124]	@ (8003e84 <xTaskIncrementTick+0x164>)
 8003e08:	441a      	add	r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4610      	mov	r0, r2
 8003e12:	f7fe fcb4 	bl	800277e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <xTaskIncrementTick+0x168>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d3b8      	bcc.n	8003d96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e28:	e7b5      	b.n	8003d96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e2a:	4b17      	ldr	r3, [pc, #92]	@ (8003e88 <xTaskIncrementTick+0x168>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e30:	4914      	ldr	r1, [pc, #80]	@ (8003e84 <xTaskIncrementTick+0x164>)
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d901      	bls.n	8003e46 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e46:	4b11      	ldr	r3, [pc, #68]	@ (8003e8c <xTaskIncrementTick+0x16c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e004      	b.n	8003e5e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e54:	4b0e      	ldr	r3, [pc, #56]	@ (8003e90 <xTaskIncrementTick+0x170>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e90 <xTaskIncrementTick+0x170>)
 8003e5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e5e:	697b      	ldr	r3, [r7, #20]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	24004870 	.word	0x24004870
 8003e6c:	2400484c 	.word	0x2400484c
 8003e70:	24004800 	.word	0x24004800
 8003e74:	24004804 	.word	0x24004804
 8003e78:	24004860 	.word	0x24004860
 8003e7c:	24004868 	.word	0x24004868
 8003e80:	24004850 	.word	0x24004850
 8003e84:	24004378 	.word	0x24004378
 8003e88:	24004374 	.word	0x24004374
 8003e8c:	2400485c 	.word	0x2400485c
 8003e90:	24004858 	.word	0x24004858

08003e94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e9a:	4b28      	ldr	r3, [pc, #160]	@ (8003f3c <vTaskSwitchContext+0xa8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ea2:	4b27      	ldr	r3, [pc, #156]	@ (8003f40 <vTaskSwitchContext+0xac>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ea8:	e042      	b.n	8003f30 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003eaa:	4b25      	ldr	r3, [pc, #148]	@ (8003f40 <vTaskSwitchContext+0xac>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb0:	4b24      	ldr	r3, [pc, #144]	@ (8003f44 <vTaskSwitchContext+0xb0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	e011      	b.n	8003edc <vTaskSwitchContext+0x48>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10b      	bne.n	8003ed6 <vTaskSwitchContext+0x42>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	607b      	str	r3, [r7, #4]
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	e7fd      	b.n	8003ed2 <vTaskSwitchContext+0x3e>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	491a      	ldr	r1, [pc, #104]	@ (8003f48 <vTaskSwitchContext+0xb4>)
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0e3      	beq.n	8003eb8 <vTaskSwitchContext+0x24>
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4a13      	ldr	r2, [pc, #76]	@ (8003f48 <vTaskSwitchContext+0xb4>)
 8003efc:	4413      	add	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	3308      	adds	r3, #8
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d104      	bne.n	8003f20 <vTaskSwitchContext+0x8c>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	4a09      	ldr	r2, [pc, #36]	@ (8003f4c <vTaskSwitchContext+0xb8>)
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4a06      	ldr	r2, [pc, #24]	@ (8003f44 <vTaskSwitchContext+0xb0>)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6013      	str	r3, [r2, #0]
}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	24004870 	.word	0x24004870
 8003f40:	2400485c 	.word	0x2400485c
 8003f44:	24004850 	.word	0x24004850
 8003f48:	24004378 	.word	0x24004378
 8003f4c:	24004374 	.word	0x24004374

08003f50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	60fb      	str	r3, [r7, #12]
}
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f78:	4b07      	ldr	r3, [pc, #28]	@ (8003f98 <vTaskPlaceOnEventList+0x48>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3318      	adds	r3, #24
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fe fc20 	bl	80027c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f86:	2101      	movs	r1, #1
 8003f88:	6838      	ldr	r0, [r7, #0]
 8003f8a:	f000 fa81 	bl	8004490 <prvAddCurrentTaskToDelayedList>
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	24004374 	.word	0x24004374

08003f9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	617b      	str	r3, [r7, #20]
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	e7fd      	b.n	8003fc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3318      	adds	r3, #24
 8003fcc:	4619      	mov	r1, r3
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f7fe fbd5 	bl	800277e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	68b8      	ldr	r0, [r7, #8]
 8003fe4:	f000 fa54 	bl	8004490 <prvAddCurrentTaskToDelayedList>
	}
 8003fe8:	bf00      	nop
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	24004374 	.word	0x24004374

08003ff4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	60fb      	str	r3, [r7, #12]
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	e7fd      	b.n	800401e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3318      	adds	r3, #24
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fc06 	bl	8002838 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800402c:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <xTaskRemoveFromEventList+0xb0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d11d      	bne.n	8004070 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	3304      	adds	r3, #4
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe fbfd 	bl	8002838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004042:	4b19      	ldr	r3, [pc, #100]	@ (80040a8 <xTaskRemoveFromEventList+0xb4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d903      	bls.n	8004052 <xTaskRemoveFromEventList+0x5e>
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404e:	4a16      	ldr	r2, [pc, #88]	@ (80040a8 <xTaskRemoveFromEventList+0xb4>)
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4a13      	ldr	r2, [pc, #76]	@ (80040ac <xTaskRemoveFromEventList+0xb8>)
 8004060:	441a      	add	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7fe fb88 	bl	800277e <vListInsertEnd>
 800406e:	e005      	b.n	800407c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	3318      	adds	r3, #24
 8004074:	4619      	mov	r1, r3
 8004076:	480e      	ldr	r0, [pc, #56]	@ (80040b0 <xTaskRemoveFromEventList+0xbc>)
 8004078:	f7fe fb81 	bl	800277e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004080:	4b0c      	ldr	r3, [pc, #48]	@ (80040b4 <xTaskRemoveFromEventList+0xc0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	429a      	cmp	r2, r3
 8004088:	d905      	bls.n	8004096 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800408a:	2301      	movs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800408e:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <xTaskRemoveFromEventList+0xc4>)
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e001      	b.n	800409a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800409a:	697b      	ldr	r3, [r7, #20]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	24004870 	.word	0x24004870
 80040a8:	24004850 	.word	0x24004850
 80040ac:	24004378 	.word	0x24004378
 80040b0:	24004808 	.word	0x24004808
 80040b4:	24004374 	.word	0x24004374
 80040b8:	2400485c 	.word	0x2400485c

080040bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <vTaskInternalSetTimeOutState+0x24>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040cc:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <vTaskInternalSetTimeOutState+0x28>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	605a      	str	r2, [r3, #4]
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	24004860 	.word	0x24004860
 80040e4:	2400484c 	.word	0x2400484c

080040e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	613b      	str	r3, [r7, #16]
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	60fb      	str	r3, [r7, #12]
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	e7fd      	b.n	800412a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800412e:	f7fe fcdb 	bl	8002ae8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004132:	4b1d      	ldr	r3, [pc, #116]	@ (80041a8 <xTaskCheckForTimeOut+0xc0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800414a:	d102      	bne.n	8004152 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	e023      	b.n	800419a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b15      	ldr	r3, [pc, #84]	@ (80041ac <xTaskCheckForTimeOut+0xc4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d007      	beq.n	800416e <xTaskCheckForTimeOut+0x86>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	429a      	cmp	r2, r3
 8004166:	d302      	bcc.n	800416e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004168:	2301      	movs	r3, #1
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	e015      	b.n	800419a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	429a      	cmp	r2, r3
 8004176:	d20b      	bcs.n	8004190 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	1ad2      	subs	r2, r2, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff99 	bl	80040bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	e004      	b.n	800419a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004196:	2301      	movs	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800419a:	f7fe fcd7 	bl	8002b4c <vPortExitCritical>

	return xReturn;
 800419e:	69fb      	ldr	r3, [r7, #28]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3720      	adds	r7, #32
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	2400484c 	.word	0x2400484c
 80041ac:	24004860 	.word	0x24004860

080041b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041b4:	4b03      	ldr	r3, [pc, #12]	@ (80041c4 <vTaskMissedYield+0x14>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
}
 80041ba:	bf00      	nop
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	2400485c 	.word	0x2400485c

080041c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041d0:	f000 f852 	bl	8004278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041d4:	4b06      	ldr	r3, [pc, #24]	@ (80041f0 <prvIdleTask+0x28>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d9f9      	bls.n	80041d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041dc:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <prvIdleTask+0x2c>)
 80041de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041ec:	e7f0      	b.n	80041d0 <prvIdleTask+0x8>
 80041ee:	bf00      	nop
 80041f0:	24004378 	.word	0x24004378
 80041f4:	e000ed04 	.word	0xe000ed04

080041f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	e00c      	b.n	800421e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4a12      	ldr	r2, [pc, #72]	@ (8004258 <prvInitialiseTaskLists+0x60>)
 8004210:	4413      	add	r3, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fa86 	bl	8002724 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3301      	adds	r3, #1
 800421c:	607b      	str	r3, [r7, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b37      	cmp	r3, #55	@ 0x37
 8004222:	d9ef      	bls.n	8004204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004224:	480d      	ldr	r0, [pc, #52]	@ (800425c <prvInitialiseTaskLists+0x64>)
 8004226:	f7fe fa7d 	bl	8002724 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800422a:	480d      	ldr	r0, [pc, #52]	@ (8004260 <prvInitialiseTaskLists+0x68>)
 800422c:	f7fe fa7a 	bl	8002724 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004230:	480c      	ldr	r0, [pc, #48]	@ (8004264 <prvInitialiseTaskLists+0x6c>)
 8004232:	f7fe fa77 	bl	8002724 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004236:	480c      	ldr	r0, [pc, #48]	@ (8004268 <prvInitialiseTaskLists+0x70>)
 8004238:	f7fe fa74 	bl	8002724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800423c:	480b      	ldr	r0, [pc, #44]	@ (800426c <prvInitialiseTaskLists+0x74>)
 800423e:	f7fe fa71 	bl	8002724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004242:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <prvInitialiseTaskLists+0x78>)
 8004244:	4a05      	ldr	r2, [pc, #20]	@ (800425c <prvInitialiseTaskLists+0x64>)
 8004246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004248:	4b0a      	ldr	r3, [pc, #40]	@ (8004274 <prvInitialiseTaskLists+0x7c>)
 800424a:	4a05      	ldr	r2, [pc, #20]	@ (8004260 <prvInitialiseTaskLists+0x68>)
 800424c:	601a      	str	r2, [r3, #0]
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	24004378 	.word	0x24004378
 800425c:	240047d8 	.word	0x240047d8
 8004260:	240047ec 	.word	0x240047ec
 8004264:	24004808 	.word	0x24004808
 8004268:	2400481c 	.word	0x2400481c
 800426c:	24004834 	.word	0x24004834
 8004270:	24004800 	.word	0x24004800
 8004274:	24004804 	.word	0x24004804

08004278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800427e:	e019      	b.n	80042b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004280:	f7fe fc32 	bl	8002ae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004284:	4b10      	ldr	r3, [pc, #64]	@ (80042c8 <prvCheckTasksWaitingTermination+0x50>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3304      	adds	r3, #4
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe fad1 	bl	8002838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004296:	4b0d      	ldr	r3, [pc, #52]	@ (80042cc <prvCheckTasksWaitingTermination+0x54>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3b01      	subs	r3, #1
 800429c:	4a0b      	ldr	r2, [pc, #44]	@ (80042cc <prvCheckTasksWaitingTermination+0x54>)
 800429e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042a0:	4b0b      	ldr	r3, [pc, #44]	@ (80042d0 <prvCheckTasksWaitingTermination+0x58>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	4a0a      	ldr	r2, [pc, #40]	@ (80042d0 <prvCheckTasksWaitingTermination+0x58>)
 80042a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042aa:	f7fe fc4f 	bl	8002b4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f810 	bl	80042d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042b4:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <prvCheckTasksWaitingTermination+0x58>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e1      	bne.n	8004280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042bc:	bf00      	nop
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	2400481c 	.word	0x2400481c
 80042cc:	24004848 	.word	0x24004848
 80042d0:	24004830 	.word	0x24004830

080042d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d108      	bne.n	80042f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe f8fa 	bl	80024e4 <vPortFree>
				vPortFree( pxTCB );
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7fe f8f7 	bl	80024e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042f6:	e019      	b.n	800432c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d103      	bne.n	800430a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fe f8ee 	bl	80024e4 <vPortFree>
	}
 8004308:	e010      	b.n	800432c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004310:	2b02      	cmp	r3, #2
 8004312:	d00b      	beq.n	800432c <prvDeleteTCB+0x58>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60fb      	str	r3, [r7, #12]
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	e7fd      	b.n	8004328 <prvDeleteTCB+0x54>
	}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800433a:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <prvResetNextTaskUnblockTime+0x38>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004344:	4b0a      	ldr	r3, [pc, #40]	@ (8004370 <prvResetNextTaskUnblockTime+0x3c>)
 8004346:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800434a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800434c:	e008      	b.n	8004360 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434e:	4b07      	ldr	r3, [pc, #28]	@ (800436c <prvResetNextTaskUnblockTime+0x38>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4a04      	ldr	r2, [pc, #16]	@ (8004370 <prvResetNextTaskUnblockTime+0x3c>)
 800435e:	6013      	str	r3, [r2, #0]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	24004800 	.word	0x24004800
 8004370:	24004868 	.word	0x24004868

08004374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800437a:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <xTaskGetSchedulerState+0x34>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004382:	2301      	movs	r3, #1
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	e008      	b.n	800439a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004388:	4b08      	ldr	r3, [pc, #32]	@ (80043ac <xTaskGetSchedulerState+0x38>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004390:	2302      	movs	r3, #2
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	e001      	b.n	800439a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004396:	2300      	movs	r3, #0
 8004398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800439a:	687b      	ldr	r3, [r7, #4]
	}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	24004854 	.word	0x24004854
 80043ac:	24004870 	.word	0x24004870

080043b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d058      	beq.n	8004478 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004484 <xTaskPriorityDisinherit+0xd4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d00b      	beq.n	80043e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	60fb      	str	r3, [r7, #12]
}
 80043e2:	bf00      	nop
 80043e4:	bf00      	nop
 80043e6:	e7fd      	b.n	80043e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	60bb      	str	r3, [r7, #8]
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440c:	1e5a      	subs	r2, r3, #1
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441a:	429a      	cmp	r2, r3
 800441c:	d02c      	beq.n	8004478 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004422:	2b00      	cmp	r3, #0
 8004424:	d128      	bne.n	8004478 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	3304      	adds	r3, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe fa04 	bl	8002838 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004448:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <xTaskPriorityDisinherit+0xd8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d903      	bls.n	8004458 <xTaskPriorityDisinherit+0xa8>
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	4a0c      	ldr	r2, [pc, #48]	@ (8004488 <xTaskPriorityDisinherit+0xd8>)
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4a09      	ldr	r2, [pc, #36]	@ (800448c <xTaskPriorityDisinherit+0xdc>)
 8004466:	441a      	add	r2, r3
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f7fe f985 	bl	800277e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004478:	697b      	ldr	r3, [r7, #20]
	}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	24004374 	.word	0x24004374
 8004488:	24004850 	.word	0x24004850
 800448c:	24004378 	.word	0x24004378

08004490 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800449a:	4b21      	ldr	r3, [pc, #132]	@ (8004520 <prvAddCurrentTaskToDelayedList+0x90>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044a0:	4b20      	ldr	r3, [pc, #128]	@ (8004524 <prvAddCurrentTaskToDelayedList+0x94>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3304      	adds	r3, #4
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe f9c6 	bl	8002838 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044b2:	d10a      	bne.n	80044ca <prvAddCurrentTaskToDelayedList+0x3a>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004524 <prvAddCurrentTaskToDelayedList+0x94>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4819      	ldr	r0, [pc, #100]	@ (8004528 <prvAddCurrentTaskToDelayedList+0x98>)
 80044c4:	f7fe f95b 	bl	800277e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044c8:	e026      	b.n	8004518 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4413      	add	r3, r2
 80044d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044d2:	4b14      	ldr	r3, [pc, #80]	@ (8004524 <prvAddCurrentTaskToDelayedList+0x94>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d209      	bcs.n	80044f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044e2:	4b12      	ldr	r3, [pc, #72]	@ (800452c <prvAddCurrentTaskToDelayedList+0x9c>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004524 <prvAddCurrentTaskToDelayedList+0x94>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f7fe f969 	bl	80027c6 <vListInsert>
}
 80044f4:	e010      	b.n	8004518 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <prvAddCurrentTaskToDelayedList+0xa0>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004524 <prvAddCurrentTaskToDelayedList+0x94>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f7fe f95f 	bl	80027c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004508:	4b0a      	ldr	r3, [pc, #40]	@ (8004534 <prvAddCurrentTaskToDelayedList+0xa4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	d202      	bcs.n	8004518 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004512:	4a08      	ldr	r2, [pc, #32]	@ (8004534 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	6013      	str	r3, [r2, #0]
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	2400484c 	.word	0x2400484c
 8004524:	24004374 	.word	0x24004374
 8004528:	24004834 	.word	0x24004834
 800452c:	24004804 	.word	0x24004804
 8004530:	24004800 	.word	0x24004800
 8004534:	24004868 	.word	0x24004868

08004538 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	@ 0x28
 800453c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004542:	f000 fb13 	bl	8004b6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004546:	4b1d      	ldr	r3, [pc, #116]	@ (80045bc <xTimerCreateTimerTask+0x84>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d021      	beq.n	8004592 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004556:	1d3a      	adds	r2, r7, #4
 8004558:	f107 0108 	add.w	r1, r7, #8
 800455c:	f107 030c 	add.w	r3, r7, #12
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd fed7 	bl	8002314 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	9202      	str	r2, [sp, #8]
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	2302      	movs	r3, #2
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	460a      	mov	r2, r1
 8004578:	4911      	ldr	r1, [pc, #68]	@ (80045c0 <xTimerCreateTimerTask+0x88>)
 800457a:	4812      	ldr	r0, [pc, #72]	@ (80045c4 <xTimerCreateTimerTask+0x8c>)
 800457c:	f7ff f8d0 	bl	8003720 <xTaskCreateStatic>
 8004580:	4603      	mov	r3, r0
 8004582:	4a11      	ldr	r2, [pc, #68]	@ (80045c8 <xTimerCreateTimerTask+0x90>)
 8004584:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004586:	4b10      	ldr	r3, [pc, #64]	@ (80045c8 <xTimerCreateTimerTask+0x90>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	613b      	str	r3, [r7, #16]
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045b0:	697b      	ldr	r3, [r7, #20]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	240048a4 	.word	0x240048a4
 80045c0:	08004cb8 	.word	0x08004cb8
 80045c4:	08004705 	.word	0x08004705
 80045c8:	240048a8 	.word	0x240048a8

080045cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	@ 0x28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10b      	bne.n	80045fc <xTimerGenericCommand+0x30>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	623b      	str	r3, [r7, #32]
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045fc:	4b19      	ldr	r3, [pc, #100]	@ (8004664 <xTimerGenericCommand+0x98>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02a      	beq.n	800465a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b05      	cmp	r3, #5
 8004614:	dc18      	bgt.n	8004648 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004616:	f7ff fead 	bl	8004374 <xTaskGetSchedulerState>
 800461a:	4603      	mov	r3, r0
 800461c:	2b02      	cmp	r3, #2
 800461e:	d109      	bne.n	8004634 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004620:	4b10      	ldr	r3, [pc, #64]	@ (8004664 <xTimerGenericCommand+0x98>)
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	f107 0110 	add.w	r1, r7, #16
 8004628:	2300      	movs	r3, #0
 800462a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800462c:	f7fe fc88 	bl	8002f40 <xQueueGenericSend>
 8004630:	6278      	str	r0, [r7, #36]	@ 0x24
 8004632:	e012      	b.n	800465a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004634:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <xTimerGenericCommand+0x98>)
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	f107 0110 	add.w	r1, r7, #16
 800463c:	2300      	movs	r3, #0
 800463e:	2200      	movs	r2, #0
 8004640:	f7fe fc7e 	bl	8002f40 <xQueueGenericSend>
 8004644:	6278      	str	r0, [r7, #36]	@ 0x24
 8004646:	e008      	b.n	800465a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004648:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <xTimerGenericCommand+0x98>)
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	f107 0110 	add.w	r1, r7, #16
 8004650:	2300      	movs	r3, #0
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	f7fe fd76 	bl	8003144 <xQueueGenericSendFromISR>
 8004658:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800465c:	4618      	mov	r0, r3
 800465e:	3728      	adds	r7, #40	@ 0x28
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	240048a4 	.word	0x240048a4

08004668 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af02      	add	r7, sp, #8
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004672:	4b23      	ldr	r3, [pc, #140]	@ (8004700 <prvProcessExpiredTimer+0x98>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3304      	adds	r3, #4
 8004680:	4618      	mov	r0, r3
 8004682:	f7fe f8d9 	bl	8002838 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d023      	beq.n	80046dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	699a      	ldr	r2, [r3, #24]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	18d1      	adds	r1, r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	6978      	ldr	r0, [r7, #20]
 80046a2:	f000 f8d5 	bl	8004850 <prvInsertTimerInActiveList>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d020      	beq.n	80046ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046ac:	2300      	movs	r3, #0
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	2300      	movs	r3, #0
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	2100      	movs	r1, #0
 80046b6:	6978      	ldr	r0, [r7, #20]
 80046b8:	f7ff ff88 	bl	80045cc <xTimerGenericCommand>
 80046bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d114      	bne.n	80046ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60fb      	str	r3, [r7, #12]
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	e7fd      	b.n	80046d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	4798      	blx	r3
}
 80046f6:	bf00      	nop
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	2400489c 	.word	0x2400489c

08004704 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800470c:	f107 0308 	add.w	r3, r7, #8
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f859 	bl	80047c8 <prvGetNextExpireTime>
 8004716:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4619      	mov	r1, r3
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f805 	bl	800472c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004722:	f000 f8d7 	bl	80048d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004726:	bf00      	nop
 8004728:	e7f0      	b.n	800470c <prvTimerTask+0x8>
	...

0800472c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004736:	f7ff fa37 	bl	8003ba8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f866 	bl	8004810 <prvSampleTimeNow>
 8004744:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d130      	bne.n	80047ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <prvProcessTimerOrBlockTask+0x3c>
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	429a      	cmp	r2, r3
 8004758:	d806      	bhi.n	8004768 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800475a:	f7ff fa33 	bl	8003bc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ff81 	bl	8004668 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004766:	e024      	b.n	80047b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800476e:	4b13      	ldr	r3, [pc, #76]	@ (80047bc <prvProcessTimerOrBlockTask+0x90>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <prvProcessTimerOrBlockTask+0x50>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <prvProcessTimerOrBlockTask+0x52>
 800477c:	2300      	movs	r3, #0
 800477e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004780:	4b0f      	ldr	r3, [pc, #60]	@ (80047c0 <prvProcessTimerOrBlockTask+0x94>)
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	4619      	mov	r1, r3
 800478e:	f7fe ff93 	bl	80036b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004792:	f7ff fa17 	bl	8003bc4 <xTaskResumeAll>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800479c:	4b09      	ldr	r3, [pc, #36]	@ (80047c4 <prvProcessTimerOrBlockTask+0x98>)
 800479e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	f3bf 8f6f 	isb	sy
}
 80047ac:	e001      	b.n	80047b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047ae:	f7ff fa09 	bl	8003bc4 <xTaskResumeAll>
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	240048a0 	.word	0x240048a0
 80047c0:	240048a4 	.word	0x240048a4
 80047c4:	e000ed04 	.word	0xe000ed04

080047c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047d0:	4b0e      	ldr	r3, [pc, #56]	@ (800480c <prvGetNextExpireTime+0x44>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <prvGetNextExpireTime+0x16>
 80047da:	2201      	movs	r2, #1
 80047dc:	e000      	b.n	80047e0 <prvGetNextExpireTime+0x18>
 80047de:	2200      	movs	r2, #0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047ec:	4b07      	ldr	r3, [pc, #28]	@ (800480c <prvGetNextExpireTime+0x44>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	e001      	b.n	80047fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047fc:	68fb      	ldr	r3, [r7, #12]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	2400489c 	.word	0x2400489c

08004810 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004818:	f7ff fa72 	bl	8003d00 <xTaskGetTickCount>
 800481c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800481e:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <prvSampleTimeNow+0x3c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	429a      	cmp	r2, r3
 8004826:	d205      	bcs.n	8004834 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004828:	f000 f93a 	bl	8004aa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e002      	b.n	800483a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800483a:	4a04      	ldr	r2, [pc, #16]	@ (800484c <prvSampleTimeNow+0x3c>)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004840:	68fb      	ldr	r3, [r7, #12]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	240048ac 	.word	0x240048ac

08004850 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d812      	bhi.n	800489c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	1ad2      	subs	r2, r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	429a      	cmp	r2, r3
 8004882:	d302      	bcc.n	800488a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004884:	2301      	movs	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e01b      	b.n	80048c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800488a:	4b10      	ldr	r3, [pc, #64]	@ (80048cc <prvInsertTimerInActiveList+0x7c>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3304      	adds	r3, #4
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f7fd ff96 	bl	80027c6 <vListInsert>
 800489a:	e012      	b.n	80048c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d206      	bcs.n	80048b2 <prvInsertTimerInActiveList+0x62>
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d302      	bcc.n	80048b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e007      	b.n	80048c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048b2:	4b07      	ldr	r3, [pc, #28]	@ (80048d0 <prvInsertTimerInActiveList+0x80>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f7fd ff82 	bl	80027c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048c2:	697b      	ldr	r3, [r7, #20]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	240048a0 	.word	0x240048a0
 80048d0:	2400489c 	.word	0x2400489c

080048d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08e      	sub	sp, #56	@ 0x38
 80048d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048da:	e0ce      	b.n	8004a7a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da19      	bge.n	8004916 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	3304      	adds	r3, #4
 80048e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80048e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	61fb      	str	r3, [r7, #28]
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	e7fd      	b.n	8004902 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800490c:	6850      	ldr	r0, [r2, #4]
 800490e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004910:	6892      	ldr	r2, [r2, #8]
 8004912:	4611      	mov	r1, r2
 8004914:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f2c0 80ae 	blt.w	8004a7a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d004      	beq.n	8004934 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800492a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492c:	3304      	adds	r3, #4
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd ff82 	bl	8002838 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004934:	463b      	mov	r3, r7
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff ff6a 	bl	8004810 <prvSampleTimeNow>
 800493c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b09      	cmp	r3, #9
 8004942:	f200 8097 	bhi.w	8004a74 <prvProcessReceivedCommands+0x1a0>
 8004946:	a201      	add	r2, pc, #4	@ (adr r2, 800494c <prvProcessReceivedCommands+0x78>)
 8004948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494c:	08004975 	.word	0x08004975
 8004950:	08004975 	.word	0x08004975
 8004954:	08004975 	.word	0x08004975
 8004958:	080049eb 	.word	0x080049eb
 800495c:	080049ff 	.word	0x080049ff
 8004960:	08004a4b 	.word	0x08004a4b
 8004964:	08004975 	.word	0x08004975
 8004968:	08004975 	.word	0x08004975
 800496c:	080049eb 	.word	0x080049eb
 8004970:	080049ff 	.word	0x080049ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004976:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	b2da      	uxtb	r2, r3
 8004980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004982:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	18d1      	adds	r1, r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004994:	f7ff ff5c 	bl	8004850 <prvInsertTimerInActiveList>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d06c      	beq.n	8004a78 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d061      	beq.n	8004a78 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	441a      	add	r2, r3
 80049bc:	2300      	movs	r3, #0
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	2300      	movs	r3, #0
 80049c2:	2100      	movs	r1, #0
 80049c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049c6:	f7ff fe01 	bl	80045cc <xTimerGenericCommand>
 80049ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d152      	bne.n	8004a78 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	61bb      	str	r3, [r7, #24]
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	e7fd      	b.n	80049e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80049fc:	e03d      	b.n	8004a7a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	617b      	str	r3, [r7, #20]
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	e7fd      	b.n	8004a32 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	18d1      	adds	r1, r2, r3
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a44:	f7ff ff04 	bl	8004850 <prvInsertTimerInActiveList>
					break;
 8004a48:	e017      	b.n	8004a7a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d103      	bne.n	8004a60 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004a58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a5a:	f7fd fd43 	bl	80024e4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a5e:	e00c      	b.n	8004a7a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a66:	f023 0301 	bic.w	r3, r3, #1
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a72:	e002      	b.n	8004a7a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004a74:	bf00      	nop
 8004a76:	e000      	b.n	8004a7a <prvProcessReceivedCommands+0x1a6>
					break;
 8004a78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a7a:	4b08      	ldr	r3, [pc, #32]	@ (8004a9c <prvProcessReceivedCommands+0x1c8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	1d39      	adds	r1, r7, #4
 8004a80:	2200      	movs	r2, #0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fe fbfc 	bl	8003280 <xQueueReceive>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f47f af26 	bne.w	80048dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004a90:	bf00      	nop
 8004a92:	bf00      	nop
 8004a94:	3730      	adds	r7, #48	@ 0x30
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	240048a4 	.word	0x240048a4

08004aa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aa6:	e049      	b.n	8004b3c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8004b64 <prvSwitchTimerLists+0xc4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b64 <prvSwitchTimerLists+0xc4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd feb9 	bl	8002838 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d02f      	beq.n	8004b3c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d90e      	bls.n	8004b0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004afa:	4b1a      	ldr	r3, [pc, #104]	@ (8004b64 <prvSwitchTimerLists+0xc4>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3304      	adds	r3, #4
 8004b02:	4619      	mov	r1, r3
 8004b04:	4610      	mov	r0, r2
 8004b06:	f7fd fe5e 	bl	80027c6 <vListInsert>
 8004b0a:	e017      	b.n	8004b3c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2300      	movs	r3, #0
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	2100      	movs	r1, #0
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f7ff fd58 	bl	80045cc <xTimerGenericCommand>
 8004b1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	603b      	str	r3, [r7, #0]
}
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
 8004b3a:	e7fd      	b.n	8004b38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b3c:	4b09      	ldr	r3, [pc, #36]	@ (8004b64 <prvSwitchTimerLists+0xc4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1b0      	bne.n	8004aa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b46:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <prvSwitchTimerLists+0xc4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <prvSwitchTimerLists+0xc8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a04      	ldr	r2, [pc, #16]	@ (8004b64 <prvSwitchTimerLists+0xc4>)
 8004b52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b54:	4a04      	ldr	r2, [pc, #16]	@ (8004b68 <prvSwitchTimerLists+0xc8>)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6013      	str	r3, [r2, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	2400489c 	.word	0x2400489c
 8004b68:	240048a0 	.word	0x240048a0

08004b6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b72:	f7fd ffb9 	bl	8002ae8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b76:	4b15      	ldr	r3, [pc, #84]	@ (8004bcc <prvCheckForValidListAndQueue+0x60>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d120      	bne.n	8004bc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b7e:	4814      	ldr	r0, [pc, #80]	@ (8004bd0 <prvCheckForValidListAndQueue+0x64>)
 8004b80:	f7fd fdd0 	bl	8002724 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b84:	4813      	ldr	r0, [pc, #76]	@ (8004bd4 <prvCheckForValidListAndQueue+0x68>)
 8004b86:	f7fd fdcd 	bl	8002724 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b8a:	4b13      	ldr	r3, [pc, #76]	@ (8004bd8 <prvCheckForValidListAndQueue+0x6c>)
 8004b8c:	4a10      	ldr	r2, [pc, #64]	@ (8004bd0 <prvCheckForValidListAndQueue+0x64>)
 8004b8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b90:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <prvCheckForValidListAndQueue+0x70>)
 8004b92:	4a10      	ldr	r2, [pc, #64]	@ (8004bd4 <prvCheckForValidListAndQueue+0x68>)
 8004b94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b96:	2300      	movs	r3, #0
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4b11      	ldr	r3, [pc, #68]	@ (8004be0 <prvCheckForValidListAndQueue+0x74>)
 8004b9c:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <prvCheckForValidListAndQueue+0x78>)
 8004b9e:	2110      	movs	r1, #16
 8004ba0:	200a      	movs	r0, #10
 8004ba2:	f7fe f92d 	bl	8002e00 <xQueueGenericCreateStatic>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4a08      	ldr	r2, [pc, #32]	@ (8004bcc <prvCheckForValidListAndQueue+0x60>)
 8004baa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bac:	4b07      	ldr	r3, [pc, #28]	@ (8004bcc <prvCheckForValidListAndQueue+0x60>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bb4:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <prvCheckForValidListAndQueue+0x60>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	490b      	ldr	r1, [pc, #44]	@ (8004be8 <prvCheckForValidListAndQueue+0x7c>)
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fd52 	bl	8003664 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bc0:	f7fd ffc4 	bl	8002b4c <vPortExitCritical>
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	240048a4 	.word	0x240048a4
 8004bd0:	24004874 	.word	0x24004874
 8004bd4:	24004888 	.word	0x24004888
 8004bd8:	2400489c 	.word	0x2400489c
 8004bdc:	240048a0 	.word	0x240048a0
 8004be0:	24004950 	.word	0x24004950
 8004be4:	240048b0 	.word	0x240048b0
 8004be8:	08004cc0 	.word	0x08004cc0

08004bec <memset>:
 8004bec:	4402      	add	r2, r0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d100      	bne.n	8004bf6 <memset+0xa>
 8004bf4:	4770      	bx	lr
 8004bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bfa:	e7f9      	b.n	8004bf0 <memset+0x4>

08004bfc <__libc_init_array>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	4d0d      	ldr	r5, [pc, #52]	@ (8004c34 <__libc_init_array+0x38>)
 8004c00:	4c0d      	ldr	r4, [pc, #52]	@ (8004c38 <__libc_init_array+0x3c>)
 8004c02:	1b64      	subs	r4, r4, r5
 8004c04:	10a4      	asrs	r4, r4, #2
 8004c06:	2600      	movs	r6, #0
 8004c08:	42a6      	cmp	r6, r4
 8004c0a:	d109      	bne.n	8004c20 <__libc_init_array+0x24>
 8004c0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004c3c <__libc_init_array+0x40>)
 8004c0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004c40 <__libc_init_array+0x44>)
 8004c10:	f000 f826 	bl	8004c60 <_init>
 8004c14:	1b64      	subs	r4, r4, r5
 8004c16:	10a4      	asrs	r4, r4, #2
 8004c18:	2600      	movs	r6, #0
 8004c1a:	42a6      	cmp	r6, r4
 8004c1c:	d105      	bne.n	8004c2a <__libc_init_array+0x2e>
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
 8004c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c24:	4798      	blx	r3
 8004c26:	3601      	adds	r6, #1
 8004c28:	e7ee      	b.n	8004c08 <__libc_init_array+0xc>
 8004c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2e:	4798      	blx	r3
 8004c30:	3601      	adds	r6, #1
 8004c32:	e7f2      	b.n	8004c1a <__libc_init_array+0x1e>
 8004c34:	08004dd4 	.word	0x08004dd4
 8004c38:	08004dd4 	.word	0x08004dd4
 8004c3c:	08004dd4 	.word	0x08004dd4
 8004c40:	08004dd8 	.word	0x08004dd8

08004c44 <memcpy>:
 8004c44:	440a      	add	r2, r1
 8004c46:	4291      	cmp	r1, r2
 8004c48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004c4c:	d100      	bne.n	8004c50 <memcpy+0xc>
 8004c4e:	4770      	bx	lr
 8004c50:	b510      	push	{r4, lr}
 8004c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c5a:	4291      	cmp	r1, r2
 8004c5c:	d1f9      	bne.n	8004c52 <memcpy+0xe>
 8004c5e:	bd10      	pop	{r4, pc}

08004c60 <_init>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr

08004c6c <_fini>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr
