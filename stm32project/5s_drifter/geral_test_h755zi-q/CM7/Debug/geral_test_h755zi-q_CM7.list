
geral_test_h755zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d634  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800d8d4  0800d8d4  0000e8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dadc  0800dadc  0000f070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dadc  0800dadc  0000eadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dae4  0800dae4  0000f070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dae4  0800dae4  0000eae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dae8  0800dae8  0000eae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  0800daec  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ca8  24000070  0800db5c  0000f070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004d18  0800db5c  0000fd18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d344  00000000  00000000  0000f09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b28  00000000  00000000  0003c3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021e0  00000000  00000000  00041f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a07  00000000  00000000  000440f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000435ea  00000000  00000000  00045af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e49e  00000000  00000000  000890e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001adef0  00000000  00000000  000b757f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0026546f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000957c  00000000  00000000  002654b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0026ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d8bc 	.word	0x0800d8bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800d8bc 	.word	0x0800d8bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800085c:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_ADC1_Init+0xec>)
 800085e:	4a32      	ldr	r2, [pc, #200]	@ (8000928 <MX_ADC1_Init+0xf0>)
 8000860:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000864:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000868:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800086a:	4b2e      	ldr	r3, [pc, #184]	@ (8000924 <MX_ADC1_Init+0xec>)
 800086c:	2210      	movs	r2, #16
 800086e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000878:	2204      	movs	r2, #4
 800087a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087c:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <MX_ADC1_Init+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000882:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000884:	2200      	movs	r2, #0
 8000886:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000888:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_ADC1_Init+0xec>)
 800088a:	2201      	movs	r2, #1
 800088c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <MX_ADC1_Init+0xec>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008a0:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008bc:	2201      	movs	r2, #1
 80008be:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c0:	4818      	ldr	r0, [pc, #96]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008c2:	f001 f82d 	bl	8001920 <HAL_ADC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008cc:	f000 faa6 	bl	8000e1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008dc:	f001 ffba 	bl	8002854 <HAL_ADCEx_MultiModeConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008e6:	f000 fa99 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_ADC1_Init+0xf4>)
 80008ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ee:	2306      	movs	r3, #6
 80008f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008fc:	2304      	movs	r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_ADC1_Init+0xec>)
 800090e:	f001 faf5 	bl	8001efc <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000918:	f000 fa80 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	@ 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2400008c 	.word	0x2400008c
 8000928:	40022000 	.word	0x40022000
 800092c:	3ef08000 	.word	0x3ef08000

08000930 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0ba      	sub	sp, #232	@ 0xe8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	22c0      	movs	r2, #192	@ 0xc0
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f00c f98e 	bl	800cc72 <memset>
  if(adcHandle->Instance==ADC1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a08 <HAL_ADC_MspInit+0xd8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d14f      	bne.n	8000a00 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000960:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000970:	230a      	movs	r3, #10
 8000972:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000980:	23c0      	movs	r3, #192	@ 0xc0
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000984:	2320      	movs	r3, #32
 8000986:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	4618      	mov	r0, r3
 8000998:	f004 f8de 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80009a2:	f000 fa3b 	bl	8000e1c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009ac:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009ae:	f043 0320 	orr.w	r3, r3, #32
 80009b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009e2:	2308      	movs	r3, #8
 80009e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <HAL_ADC_MspInit+0xe0>)
 80009fc:	f002 fe4c 	bl	8003698 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a00:	bf00      	nop
 8000a02:	37e8      	adds	r7, #232	@ 0xe8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40022000 	.word	0x40022000
 8000a0c:	58024400 	.word	0x58024400
 8000a10:	58020000 	.word	0x58020000

08000a14 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idle */
  idleHandle = osThreadNew(idle_task, NULL, &idle_attributes);
 8000a18:	4a1c      	ldr	r2, [pc, #112]	@ (8000a8c <MX_FREERTOS_Init+0x78>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	481c      	ldr	r0, [pc, #112]	@ (8000a90 <MX_FREERTOS_Init+0x7c>)
 8000a1e:	f009 fa1d 	bl	8009e5c <osThreadNew>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <MX_FREERTOS_Init+0x80>)
 8000a26:	6013      	str	r3, [r2, #0]

  /* creation of nb_iot */
  nb_iotHandle = osThreadNew(nb_iot_task, NULL, &nb_iot_attributes);
 8000a28:	4a1b      	ldr	r2, [pc, #108]	@ (8000a98 <MX_FREERTOS_Init+0x84>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	481b      	ldr	r0, [pc, #108]	@ (8000a9c <MX_FREERTOS_Init+0x88>)
 8000a2e:	f009 fa15 	bl	8009e5c <osThreadNew>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa0 <MX_FREERTOS_Init+0x8c>)
 8000a36:	6013      	str	r3, [r2, #0]

  /* creation of cnss */
  cnssHandle = osThreadNew(cnss_task, NULL, &cnss_attributes);
 8000a38:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa4 <MX_FREERTOS_Init+0x90>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	481a      	ldr	r0, [pc, #104]	@ (8000aa8 <MX_FREERTOS_Init+0x94>)
 8000a3e:	f009 fa0d 	bl	8009e5c <osThreadNew>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a19      	ldr	r2, [pc, #100]	@ (8000aac <MX_FREERTOS_Init+0x98>)
 8000a46:	6013      	str	r3, [r2, #0]

  /* creation of sd_card */
  sd_cardHandle = osThreadNew(sd_card_task, NULL, &sd_card_attributes);
 8000a48:	4a19      	ldr	r2, [pc, #100]	@ (8000ab0 <MX_FREERTOS_Init+0x9c>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4819      	ldr	r0, [pc, #100]	@ (8000ab4 <MX_FREERTOS_Init+0xa0>)
 8000a4e:	f009 fa05 	bl	8009e5c <osThreadNew>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a18      	ldr	r2, [pc, #96]	@ (8000ab8 <MX_FREERTOS_Init+0xa4>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* creation of temp */
  tempHandle = osThreadNew(temp_task, NULL, &temp_attributes);
 8000a58:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <MX_FREERTOS_Init+0xa8>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4818      	ldr	r0, [pc, #96]	@ (8000ac0 <MX_FREERTOS_Init+0xac>)
 8000a5e:	f009 f9fd 	bl	8009e5c <osThreadNew>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <MX_FREERTOS_Init+0xb0>)
 8000a66:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(imu_task, NULL, &imu_attributes);
 8000a68:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <MX_FREERTOS_Init+0xb4>)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4817      	ldr	r0, [pc, #92]	@ (8000acc <MX_FREERTOS_Init+0xb8>)
 8000a6e:	f009 f9f5 	bl	8009e5c <osThreadNew>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4a16      	ldr	r2, [pc, #88]	@ (8000ad0 <MX_FREERTOS_Init+0xbc>)
 8000a76:	6013      	str	r3, [r2, #0]

  /* creation of batterie */
  batterieHandle = osThreadNew(batterie_task, NULL, &batterie_attributes);
 8000a78:	4a16      	ldr	r2, [pc, #88]	@ (8000ad4 <MX_FREERTOS_Init+0xc0>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4816      	ldr	r0, [pc, #88]	@ (8000ad8 <MX_FREERTOS_Init+0xc4>)
 8000a7e:	f009 f9ed 	bl	8009e5c <osThreadNew>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4a15      	ldr	r2, [pc, #84]	@ (8000adc <MX_FREERTOS_Init+0xc8>)
 8000a86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	0800d984 	.word	0x0800d984
 8000a90:	0800c90d 	.word	0x0800c90d
 8000a94:	240000f0 	.word	0x240000f0
 8000a98:	0800d9a8 	.word	0x0800d9a8
 8000a9c:	0800c9cd 	.word	0x0800c9cd
 8000aa0:	240000f4 	.word	0x240000f4
 8000aa4:	0800d9cc 	.word	0x0800d9cc
 8000aa8:	0800c96d 	.word	0x0800c96d
 8000aac:	240000f8 	.word	0x240000f8
 8000ab0:	0800d9f0 	.word	0x0800d9f0
 8000ab4:	0800c9f5 	.word	0x0800c9f5
 8000ab8:	240000fc 	.word	0x240000fc
 8000abc:	0800da14 	.word	0x0800da14
 8000ac0:	0800ca1d 	.word	0x0800ca1d
 8000ac4:	24000100 	.word	0x24000100
 8000ac8:	0800da38 	.word	0x0800da38
 8000acc:	0800c995 	.word	0x0800c995
 8000ad0:	24000104 	.word	0x24000104
 8000ad4:	0800da5c 	.word	0x0800da5c
 8000ad8:	0800c919 	.word	0x0800c919
 8000adc:	24000108 	.word	0x24000108

08000ae0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b51      	ldr	r3, [pc, #324]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afc:	4a4f      	ldr	r2, [pc, #316]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b06:	4b4d      	ldr	r3, [pc, #308]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b49      	ldr	r3, [pc, #292]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1a:	4a48      	ldr	r2, [pc, #288]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b24:	4b45      	ldr	r3, [pc, #276]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b42      	ldr	r3, [pc, #264]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b38:	4a40      	ldr	r2, [pc, #256]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b42:	4b3e      	ldr	r3, [pc, #248]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b50:	4b3a      	ldr	r3, [pc, #232]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b56:	4a39      	ldr	r2, [pc, #228]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b60:	4b36      	ldr	r3, [pc, #216]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6e:	4b33      	ldr	r3, [pc, #204]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b74:	4a31      	ldr	r2, [pc, #196]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b8c:	2332      	movs	r3, #50	@ 0x32
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4826      	ldr	r0, [pc, #152]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000ba8:	f002 fd76 	bl	8003698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bac:	2386      	movs	r3, #134	@ 0x86
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481f      	ldr	r0, [pc, #124]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000bc8:	f002 fd66 	bl	8003698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bde:	230b      	movs	r3, #11
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4817      	ldr	r0, [pc, #92]	@ (8000c48 <MX_GPIO_Init+0x168>)
 8000bea:	f002 fd55 	bl	8003698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bee:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c00:	230a      	movs	r3, #10
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000c0c:	f002 fd44 	bl	8003698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c10:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c22:	230b      	movs	r3, #11
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4807      	ldr	r0, [pc, #28]	@ (8000c4c <MX_GPIO_Init+0x16c>)
 8000c2e:	f002 fd33 	bl	8003698 <HAL_GPIO_Init>

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	@ 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58020800 	.word	0x58020800
 8000c44:	58020000 	.word	0x58020000
 8000c48:	58020400 	.word	0x58020400
 8000c4c:	58021800 	.word	0x58021800

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c5a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c5c:	bf00      	nop
 8000c5e:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <main+0xac>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d004      	beq.n	8000c74 <main+0x24>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dcf4      	bgt.n	8000c5e <main+0xe>
  if ( timeout < 0 )
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	da01      	bge.n	8000c7e <main+0x2e>
  {
  Error_Handler();
 8000c7a:	f000 f8cf 	bl	8000e1c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7e:	f000 fbf3 	bl	8001468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c82:	f000 f83d 	bl	8000d00 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <main+0xac>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <main+0xac>)
 8000c8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <main+0xac>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f002 fea7 	bl	80039f8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	f002 febd 	bl	8003a2c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000cb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cb6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000cb8:	bf00      	nop
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <main+0xac>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <main+0x80>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	dcf4      	bgt.n	8000cba <main+0x6a>
if ( timeout < 0 )
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da01      	bge.n	8000cda <main+0x8a>
{
Error_Handler();
 8000cd6:	f000 f8a1 	bl	8000e1c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cda:	f7ff ff01 	bl	8000ae0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cde:	f000 f8a3 	bl	8000e28 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ce2:	f000 fad7 	bl	8001294 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000ce6:	f7ff fda7 	bl	8000838 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cea:	f009 f86d 	bl	8009dc8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000cee:	f7ff fe91 	bl	8000a14 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cf2:	f009 f88d 	bl	8009e10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf6:	bf00      	nop
 8000cf8:	e7fd      	b.n	8000cf6 <main+0xa6>
 8000cfa:	bf00      	nop
 8000cfc:	58024400 	.word	0x58024400

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b09c      	sub	sp, #112	@ 0x70
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0a:	224c      	movs	r2, #76	@ 0x4c
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f00b ffaf 	bl	800cc72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2220      	movs	r2, #32
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00b ffa9 	bl	800cc72 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d20:	2004      	movs	r0, #4
 8000d22:	f002 fe97 	bl	8003a54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b31      	ldr	r3, [pc, #196]	@ (8000df0 <SystemClock_Config+0xf0>)
 8000d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2e:	4a30      	ldr	r2, [pc, #192]	@ (8000df0 <SystemClock_Config+0xf0>)
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d36:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <SystemClock_Config+0xf0>)
 8000d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <SystemClock_Config+0xf4>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d48:	4a2a      	ldr	r2, [pc, #168]	@ (8000df4 <SystemClock_Config+0xf4>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <SystemClock_Config+0xf4>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d5c:	bf00      	nop
 8000d5e:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <SystemClock_Config+0xf4>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d6a:	d1f8      	bne.n	8000d5e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d74:	2340      	movs	r3, #64	@ 0x40
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d80:	2304      	movs	r3, #4
 8000d82:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d84:	230a      	movs	r3, #10
 8000d86:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d94:	230c      	movs	r3, #12
 8000d96:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 feaf 	bl	8003b08 <HAL_RCC_OscConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000db0:	f000 f834 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db4:	233f      	movs	r3, #63	@ 0x3f
 8000db6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dc8:	2340      	movs	r3, #64	@ 0x40
 8000dca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 faef 	bl	80043bc <HAL_RCC_ClockConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000de4:	f000 f81a 	bl	8000e1c <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3770      	adds	r7, #112	@ 0x70
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58000400 	.word	0x58000400
 8000df4:	58024800 	.word	0x58024800

08000df8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d101      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e0a:	f000 fb69 	bl	80014e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40010000 	.word	0x40010000

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <Error_Handler+0x8>

08000e28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e2e:	4a28      	ldr	r2, [pc, #160]	@ (8000ed0 <MX_SPI1_Init+0xa8>)
 8000e30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e32:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e34:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3a:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e40:	4b22      	ldr	r3, [pc, #136]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e42:	2203      	movs	r2, #3
 8000e44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e46:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e78:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000eb8:	f006 fb4c 	bl	8007554 <HAL_SPI_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000ec2:	f7ff ffab 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2400010c 	.word	0x2400010c
 8000ed0:	40013000 	.word	0x40013000

08000ed4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0bc      	sub	sp, #240	@ 0xf0
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	22c0      	movs	r2, #192	@ 0xc0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f00b febc 	bl	800cc72 <memset>
  if(spiHandle->Instance==SPI1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a38      	ldr	r2, [pc, #224]	@ (8000fe0 <HAL_SPI_MspInit+0x10c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d168      	bne.n	8000fd6 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f14:	f107 0318 	add.w	r3, r7, #24
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 fe1d 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f24:	f7ff ff7a 	bl	8000e1c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f28:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f38:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b27      	ldr	r3, [pc, #156]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	4a25      	ldr	r2, [pc, #148]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f56:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f82:	2360      	movs	r3, #96	@ 0x60
 8000f84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4810      	ldr	r0, [pc, #64]	@ (8000fe8 <HAL_SPI_MspInit+0x114>)
 8000fa8:	f002 fb76 	bl	8003698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4806      	ldr	r0, [pc, #24]	@ (8000fec <HAL_SPI_MspInit+0x118>)
 8000fd2:	f002 fb61 	bl	8003698 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	37f0      	adds	r7, #240	@ 0xf0
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40013000 	.word	0x40013000
 8000fe4:	58024400 	.word	0x58024400
 8000fe8:	58020000 	.word	0x58020000
 8000fec:	58020c00 	.word	0x58020c00

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <HAL_MspInit+0x38>)
 8000ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <HAL_MspInit+0x38>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_MspInit+0x38>)
 8001008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	210f      	movs	r1, #15
 8001018:	f06f 0001 	mvn.w	r0, #1
 800101c:	f001 fdb0 	bl	8002b80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	58024400 	.word	0x58024400

0800102c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	@ 0x38
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d842      	bhi.n	80010c0 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800103a:	2200      	movs	r2, #0
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	2019      	movs	r0, #25
 8001040:	f001 fd9e 	bl	8002b80 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001044:	2019      	movs	r0, #25
 8001046:	f001 fdb5 	bl	8002bb4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800104a:	4a23      	ldr	r2, [pc, #140]	@ (80010d8 <HAL_InitTick+0xac>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <HAL_InitTick+0xb0>)
 8001052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001056:	4a21      	ldr	r2, [pc, #132]	@ (80010dc <HAL_InitTick+0xb0>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001060:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <HAL_InitTick+0xb0>)
 8001062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800106e:	f107 020c 	add.w	r2, r7, #12
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fd2b 	bl	8004ad4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800107e:	f003 fd13 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 8001082:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001086:	4a16      	ldr	r2, [pc, #88]	@ (80010e0 <HAL_InitTick+0xb4>)
 8001088:	fba2 2303 	umull	r2, r3, r2, r3
 800108c:	0c9b      	lsrs	r3, r3, #18
 800108e:	3b01      	subs	r3, #1
 8001090:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HAL_InitTick+0xb8>)
 8001094:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <HAL_InitTick+0xbc>)
 8001096:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <HAL_InitTick+0xb8>)
 800109a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800109e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010a0:	4a10      	ldr	r2, [pc, #64]	@ (80010e4 <HAL_InitTick+0xb8>)
 80010a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <HAL_InitTick+0xb8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <HAL_InitTick+0xb8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010b2:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <HAL_InitTick+0xb8>)
 80010b4:	f006 fb8d 	bl	80077d2 <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d107      	bne.n	80010ce <HAL_InitTick+0xa2>
 80010be:	e001      	b.n	80010c4 <HAL_InitTick+0x98>
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e005      	b.n	80010d0 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010c4:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <HAL_InitTick+0xb8>)
 80010c6:	f006 fbe5 	bl	8007894 <HAL_TIM_Base_Start_IT>
 80010ca:	4603      	mov	r3, r0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3738      	adds	r7, #56	@ 0x38
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24000008 	.word	0x24000008
 80010dc:	58024400 	.word	0x58024400
 80010e0:	431bde83 	.word	0x431bde83
 80010e4:	24000194 	.word	0x24000194
 80010e8:	40010000 	.word	0x40010000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <NMI_Handler+0x4>

080010f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <UsageFault_Handler+0x4>

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <TIM1_UP_IRQHandler+0x10>)
 800112a:	f006 fc2b 	bl	8007984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	24000194 	.word	0x24000194

08001138 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <USART3_IRQHandler+0x10>)
 800113e:	f006 ff81 	bl	8008044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	240001e4 	.word	0x240001e4

0800114c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e00a      	b.n	8001174 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800115e:	f3af 8000 	nop.w
 8001162:	4601      	mov	r1, r0
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	b2ca      	uxtb	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf0      	blt.n	800115e <_read+0x12>
  }

  return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e009      	b.n	80011ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	60ba      	str	r2, [r7, #8]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dbf1      	blt.n	8001198 <_write+0x12>
  }
  return len;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_close>:

int _close(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011e6:	605a      	str	r2, [r3, #4]
  return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <_isatty>:

int _isatty(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f00b fd5a 	bl	800cd10 <__errno>
 800125c:	4603      	mov	r3, r0
 800125e:	220c      	movs	r2, #12
 8001260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	@ (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	24080000 	.word	0x24080000
 8001288:	00000400 	.word	0x00000400
 800128c:	240001e0 	.word	0x240001e0
 8001290:	24004d18 	.word	0x24004d18

08001294 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001298:	4b22      	ldr	r3, [pc, #136]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 800129a:	4a23      	ldr	r2, [pc, #140]	@ (8001328 <MX_USART3_UART_Init+0x94>)
 800129c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800129e:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ca:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d6:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012dc:	4811      	ldr	r0, [pc, #68]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012de:	f006 fd3f 	bl	8007d60 <HAL_UART_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012e8:	f7ff fd98 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ec:	2100      	movs	r1, #0
 80012ee:	480d      	ldr	r0, [pc, #52]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012f0:	f008 fc5c 	bl	8009bac <HAL_UARTEx_SetTxFifoThreshold>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012fa:	f7ff fd8f 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fe:	2100      	movs	r1, #0
 8001300:	4808      	ldr	r0, [pc, #32]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 8001302:	f008 fc91 	bl	8009c28 <HAL_UARTEx_SetRxFifoThreshold>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800130c:	f7ff fd86 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 8001312:	f008 fc12 	bl	8009b3a <HAL_UARTEx_DisableFifoMode>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800131c:	f7ff fd7e 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	240001e4 	.word	0x240001e4
 8001328:	40004800 	.word	0x40004800

0800132c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0ba      	sub	sp, #232	@ 0xe8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	22c0      	movs	r2, #192	@ 0xc0
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f00b fc90 	bl	800cc72 <memset>
  if(uartHandle->Instance==USART3)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a2b      	ldr	r2, [pc, #172]	@ (8001404 <HAL_UART_MspInit+0xd8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d14e      	bne.n	80013fa <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800135c:	f04f 0202 	mov.w	r2, #2
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4618      	mov	r0, r3
 8001374:	f003 fbf0 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800137e:	f7ff fd4d 	bl	8000e1c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_UART_MspInit+0xdc>)
 8001384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001388:	4a1f      	ldr	r2, [pc, #124]	@ (8001408 <HAL_UART_MspInit+0xdc>)
 800138a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800138e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <HAL_UART_MspInit+0xdc>)
 8001394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001398:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_UART_MspInit+0xdc>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a6:	4a18      	ldr	r2, [pc, #96]	@ (8001408 <HAL_UART_MspInit+0xdc>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_UART_MspInit+0xdc>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d8:	2307      	movs	r3, #7
 80013da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4809      	ldr	r0, [pc, #36]	@ (800140c <HAL_UART_MspInit+0xe0>)
 80013e6:	f002 f957 	bl	8003698 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2105      	movs	r1, #5
 80013ee:	2027      	movs	r0, #39	@ 0x27
 80013f0:	f001 fbc6 	bl	8002b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013f4:	2027      	movs	r0, #39	@ 0x27
 80013f6:	f001 fbdd 	bl	8002bb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	37e8      	adds	r7, #232	@ 0xe8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004800 	.word	0x40004800
 8001408:	58024400 	.word	0x58024400
 800140c:	58020c00 	.word	0x58020c00

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800144c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001414:	f7ff f9f8 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001418:	f7ff f948 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	@ (8001454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	@ (8001460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001442:	f00b fc6b 	bl	800cd1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff fc03 	bl	8000c50 <main>
  bx  lr
 800144a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001450:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001454:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001458:	0800daec 	.word	0x0800daec
  ldr r2, =_sbss
 800145c:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001460:	24004d18 	.word	0x24004d18

08001464 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC3_IRQHandler>
	...

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f001 fb7b 	bl	8002b6a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001474:	f003 f958 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 8001478:	4602      	mov	r2, r0
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_Init+0x68>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	4913      	ldr	r1, [pc, #76]	@ (80014d4 <HAL_Init+0x6c>)
 8001486:	5ccb      	ldrb	r3, [r1, r3]
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
 8001490:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001492:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <HAL_Init+0x68>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	4a0e      	ldr	r2, [pc, #56]	@ (80014d4 <HAL_Init+0x6c>)
 800149c:	5cd3      	ldrb	r3, [r2, r3]
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	fa22 f303 	lsr.w	r3, r2, r3
 80014a8:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <HAL_Init+0x70>)
 80014aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014ac:	4a0b      	ldr	r2, [pc, #44]	@ (80014dc <HAL_Init+0x74>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b2:	200f      	movs	r0, #15
 80014b4:	f7ff fdba 	bl	800102c <HAL_InitTick>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e002      	b.n	80014c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014c2:	f7ff fd95 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58024400 	.word	0x58024400
 80014d4:	0800d974 	.word	0x0800d974
 80014d8:	24000004 	.word	0x24000004
 80014dc:	24000000 	.word	0x24000000

080014e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_IncTick+0x20>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_IncTick+0x24>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a04      	ldr	r2, [pc, #16]	@ (8001504 <HAL_IncTick+0x24>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2400000c 	.word	0x2400000c
 8001504:	24000278 	.word	0x24000278

08001508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;
 800150c:	4b03      	ldr	r3, [pc, #12]	@ (800151c <HAL_GetTick+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	24000278 	.word	0x24000278

08001520 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001524:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <HAL_GetREVID+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0c1b      	lsrs	r3, r3, #16
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	5c001000 	.word	0x5c001000

08001538 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	609a      	str	r2, [r3, #8]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	609a      	str	r2, [r3, #8]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d107      	bne.n	80015c4 <LL_ADC_SetChannelPreselection+0x24>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	0e9b      	lsrs	r3, r3, #26
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	2201      	movs	r2, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	e015      	b.n	80015f0 <LL_ADC_SetChannelPreselection+0x50>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	fa93 f3a3 	rbit	r3, r3
 80015ce:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80015da:	2320      	movs	r3, #32
 80015dc:	e003      	b.n	80015e6 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	2201      	movs	r2, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	69d2      	ldr	r2, [r2, #28]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001606:	b480      	push	{r7}
 8001608:	b087      	sub	sp, #28
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3360      	adds	r3, #96	@ 0x60
 8001618:	461a      	mov	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	430b      	orrs	r3, r1
 8001634:	431a      	orrs	r2, r3
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800163a:	bf00      	nop
 800163c:	371c      	adds	r7, #28
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	431a      	orrs	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	611a      	str	r2, [r3, #16]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3360      	adds	r3, #96	@ 0x60
 8001688:	461a      	mov	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	431a      	orrs	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	601a      	str	r2, [r3, #0]
  }
}
 80016a2:	bf00      	nop
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b087      	sub	sp, #28
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3330      	adds	r3, #48	@ 0x30
 80016be:	461a      	mov	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	4413      	add	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	211f      	movs	r1, #31
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	401a      	ands	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	0e9b      	lsrs	r3, r3, #26
 80016e6:	f003 011f 	and.w	r1, r3, #31
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	431a      	orrs	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016fa:	bf00      	nop
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001706:	b480      	push	{r7}
 8001708:	b087      	sub	sp, #28
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3314      	adds	r3, #20
 8001716:	461a      	mov	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	0e5b      	lsrs	r3, r3, #25
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	0d1b      	lsrs	r3, r3, #20
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	2107      	movs	r1, #7
 8001734:	fa01 f303 	lsl.w	r3, r1, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	401a      	ands	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	0d1b      	lsrs	r3, r3, #20
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	431a      	orrs	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001750:	bf00      	nop
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0318 	and.w	r3, r3, #24
 800177e:	4908      	ldr	r1, [pc, #32]	@ (80017a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001780:	40d9      	lsrs	r1, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	400b      	ands	r3, r1
 8001786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800178a:	431a      	orrs	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	000fffff 	.word	0x000fffff

080017a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 031f 	and.w	r3, r3, #31
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6093      	str	r3, [r2, #8]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	5fffffc0 	.word	0x5fffffc0

080017e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017f8:	d101      	bne.n	80017fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <LL_ADC_EnableInternalRegulator+0x24>)
 800181a:	4013      	ands	r3, r2
 800181c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	6fffffc0 	.word	0x6fffffc0

08001834 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001848:	d101      	bne.n	800184e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <LL_ADC_Enable+0x24>)
 800186a:	4013      	ands	r3, r2
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	7fffffc0 	.word	0x7fffffc0

08001884 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <LL_ADC_IsEnabled+0x18>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <LL_ADC_IsEnabled+0x1a>
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <LL_ADC_REG_StartConversion+0x24>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	f043 0204 	orr.w	r2, r3, #4
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	7fffffc0 	.word	0x7fffffc0

080018d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d101      	bne.n	80018ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b08      	cmp	r3, #8
 800190c:	d101      	bne.n	8001912 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e18f      	b.n	8001c5a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7fe fff1 	bl	8000930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff3f 	bl	80017e4 <LL_ADC_IsDeepPowerDownEnabled>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff25 	bl	80017c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff5a 	bl	8001834 <LL_ADC_IsInternalRegulatorEnabled>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d114      	bne.n	80019b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff3e 	bl	800180c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001990:	4b87      	ldr	r3, [pc, #540]	@ (8001bb0 <HAL_ADC_Init+0x290>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	099b      	lsrs	r3, r3, #6
 8001996:	4a87      	ldr	r2, [pc, #540]	@ (8001bb4 <HAL_ADC_Init+0x294>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	3301      	adds	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019a2:	e002      	b.n	80019aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f9      	bne.n	80019a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff3d 	bl	8001834 <LL_ADC_IsInternalRegulatorEnabled>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10d      	bne.n	80019dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c4:	f043 0210 	orr.w	r2, r3, #16
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff77 	bl	80018d4 <LL_ADC_REG_IsConversionOngoing>
 80019e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 8129 	bne.w	8001c48 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 8125 	bne.w	8001c48 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a02:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a06:	f043 0202 	orr.w	r2, r3, #2
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff36 	bl	8001884 <LL_ADC_IsEnabled>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d136      	bne.n	8001a8c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a65      	ldr	r2, [pc, #404]	@ (8001bb8 <HAL_ADC_Init+0x298>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d004      	beq.n	8001a32 <HAL_ADC_Init+0x112>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a63      	ldr	r2, [pc, #396]	@ (8001bbc <HAL_ADC_Init+0x29c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d10e      	bne.n	8001a50 <HAL_ADC_Init+0x130>
 8001a32:	4861      	ldr	r0, [pc, #388]	@ (8001bb8 <HAL_ADC_Init+0x298>)
 8001a34:	f7ff ff26 	bl	8001884 <LL_ADC_IsEnabled>
 8001a38:	4604      	mov	r4, r0
 8001a3a:	4860      	ldr	r0, [pc, #384]	@ (8001bbc <HAL_ADC_Init+0x29c>)
 8001a3c:	f7ff ff22 	bl	8001884 <LL_ADC_IsEnabled>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4323      	orrs	r3, r4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	e008      	b.n	8001a62 <HAL_ADC_Init+0x142>
 8001a50:	485b      	ldr	r0, [pc, #364]	@ (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001a52:	f7ff ff17 	bl	8001884 <LL_ADC_IsEnabled>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d012      	beq.n	8001a8c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a53      	ldr	r2, [pc, #332]	@ (8001bb8 <HAL_ADC_Init+0x298>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d004      	beq.n	8001a7a <HAL_ADC_Init+0x15a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a51      	ldr	r2, [pc, #324]	@ (8001bbc <HAL_ADC_Init+0x29c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x15e>
 8001a7a:	4a52      	ldr	r2, [pc, #328]	@ (8001bc4 <HAL_ADC_Init+0x2a4>)
 8001a7c:	e000      	b.n	8001a80 <HAL_ADC_Init+0x160>
 8001a7e:	4a52      	ldr	r2, [pc, #328]	@ (8001bc8 <HAL_ADC_Init+0x2a8>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f7ff fd56 	bl	8001538 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a8c:	f7ff fd48 	bl	8001520 <HAL_GetREVID>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d914      	bls.n	8001ac4 <HAL_ADC_Init+0x1a4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b10      	cmp	r3, #16
 8001aa0:	d110      	bne.n	8001ac4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7d5b      	ldrb	r3, [r3, #21]
 8001aa6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ab2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7f1b      	ldrb	r3, [r3, #28]
 8001ab8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aba:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001abc:	f043 030c 	orr.w	r3, r3, #12
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	e00d      	b.n	8001ae0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7d5b      	ldrb	r3, [r3, #21]
 8001ac8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ace:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ad4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7f1b      	ldrb	r3, [r3, #28]
 8001ada:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7f1b      	ldrb	r3, [r3, #28]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d106      	bne.n	8001af6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	045b      	lsls	r3, r3, #17
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	4b2c      	ldr	r3, [pc, #176]	@ (8001bcc <HAL_ADC_Init+0x2ac>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	69b9      	ldr	r1, [r7, #24]
 8001b22:	430b      	orrs	r3, r1
 8001b24:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fed2 	bl	80018d4 <LL_ADC_REG_IsConversionOngoing>
 8001b30:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fedf 	bl	80018fa <LL_ADC_INJ_IsConversionOngoing>
 8001b3c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d15f      	bne.n	8001c04 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d15c      	bne.n	8001c04 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7d1b      	ldrb	r3, [r3, #20]
 8001b4e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <HAL_ADC_Init+0x2b0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d130      	bne.n	8001bd8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <HAL_ADC_Init+0x2b4>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b8a:	3a01      	subs	r2, #1
 8001b8c:	0411      	lsls	r1, r2, #16
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	e01c      	b.n	8001be8 <HAL_ADC_Init+0x2c8>
 8001bae:	bf00      	nop
 8001bb0:	24000000 	.word	0x24000000
 8001bb4:	053e2d63 	.word	0x053e2d63
 8001bb8:	40022000 	.word	0x40022000
 8001bbc:	40022100 	.word	0x40022100
 8001bc0:	58026000 	.word	0x58026000
 8001bc4:	40022300 	.word	0x40022300
 8001bc8:	58026300 	.word	0x58026300
 8001bcc:	fff0c003 	.word	0xfff0c003
 8001bd0:	ffffbffc 	.word	0xffffbffc
 8001bd4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fcf6 	bl	80025f0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10c      	bne.n	8001c26 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f023 010f 	bic.w	r1, r3, #15
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	1e5a      	subs	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c24:	e007      	b.n	8001c36 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 020f 	bic.w	r2, r2, #15
 8001c34:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3a:	f023 0303 	bic.w	r3, r3, #3
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c46:	e007      	b.n	8001c58 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4c:	f043 0210 	orr.w	r2, r3, #16
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c58:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	@ 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd90      	pop	{r4, r7, pc}
 8001c62:	bf00      	nop

08001c64 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a92      	ldr	r2, [pc, #584]	@ (8001ebc <HAL_ADC_Start_IT+0x258>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d004      	beq.n	8001c80 <HAL_ADC_Start_IT+0x1c>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a91      	ldr	r2, [pc, #580]	@ (8001ec0 <HAL_ADC_Start_IT+0x25c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_Start_IT+0x20>
 8001c80:	4b90      	ldr	r3, [pc, #576]	@ (8001ec4 <HAL_ADC_Start_IT+0x260>)
 8001c82:	e000      	b.n	8001c86 <HAL_ADC_Start_IT+0x22>
 8001c84:	4b90      	ldr	r3, [pc, #576]	@ (8001ec8 <HAL_ADC_Start_IT+0x264>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fd8c 	bl	80017a4 <LL_ADC_GetMultimode>
 8001c8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fe1e 	bl	80018d4 <LL_ADC_REG_IsConversionOngoing>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 8118 	bne.w	8001ed0 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Start_IT+0x4a>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e113      	b.n	8001ed6 <HAL_ADC_Start_IT+0x272>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fc10 	bl	80024dc <ADC_Enable>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 80f5 	bne.w	8001eb2 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ccc:	4b7f      	ldr	r3, [pc, #508]	@ (8001ecc <HAL_ADC_Start_IT+0x268>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a78      	ldr	r2, [pc, #480]	@ (8001ec0 <HAL_ADC_Start_IT+0x25c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d002      	beq.n	8001ce8 <HAL_ADC_Start_IT+0x84>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	e000      	b.n	8001cea <HAL_ADC_Start_IT+0x86>
 8001ce8:	4b74      	ldr	r3, [pc, #464]	@ (8001ebc <HAL_ADC_Start_IT+0x258>)
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d002      	beq.n	8001cf8 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d14:	f023 0206 	bic.w	r2, r3, #6
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	221c      	movs	r2, #28
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 021c 	bic.w	r2, r2, #28
 8001d42:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d108      	bne.n	8001d5e <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0208 	orr.w	r2, r2, #8
 8001d5a:	605a      	str	r2, [r3, #4]
          break;
 8001d5c:	e008      	b.n	8001d70 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0204 	orr.w	r2, r2, #4
 8001d6c:	605a      	str	r2, [r3, #4]
          break;
 8001d6e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d107      	bne.n	8001d88 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0210 	orr.w	r2, r2, #16
 8001d86:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec0 <HAL_ADC_Start_IT+0x25c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d002      	beq.n	8001d98 <HAL_ADC_Start_IT+0x134>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	e000      	b.n	8001d9a <HAL_ADC_Start_IT+0x136>
 8001d98:	4b48      	ldr	r3, [pc, #288]	@ (8001ebc <HAL_ADC_Start_IT+0x258>)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d008      	beq.n	8001db4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d002      	beq.n	8001db4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b09      	cmp	r3, #9
 8001db2:	d13a      	bne.n	8001e2a <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d02d      	beq.n	8001e1e <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d110      	bne.n	8001dfc <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0220 	bic.w	r2, r2, #32
 8001de8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001df8:	605a      	str	r2, [r3, #4]
              break;
 8001dfa:	e010      	b.n	8001e1e <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e0a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	605a      	str	r2, [r3, #4]
              break;
 8001e1c:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fd42 	bl	80018ac <LL_ADC_REG_StartConversion>
 8001e28:	e054      	b.n	8001ed4 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a21      	ldr	r2, [pc, #132]	@ (8001ec0 <HAL_ADC_Start_IT+0x25c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d002      	beq.n	8001e46 <HAL_ADC_Start_IT+0x1e2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	e000      	b.n	8001e48 <HAL_ADC_Start_IT+0x1e4>
 8001e46:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <HAL_ADC_Start_IT+0x258>)
 8001e48:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d03e      	beq.n	8001ed4 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d110      	bne.n	8001e90 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0220 	bic.w	r2, r2, #32
 8001e7c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e8c:	605a      	str	r2, [r3, #4]
              break;
 8001e8e:	e021      	b.n	8001ed4 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e9e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0220 	orr.w	r2, r2, #32
 8001eae:	605a      	str	r2, [r3, #4]
              break;
 8001eb0:	e010      	b.n	8001ed4 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001eba:	e00b      	b.n	8001ed4 <HAL_ADC_Start_IT+0x270>
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40022100 	.word	0x40022100
 8001ec4:	40022300 	.word	0x40022300
 8001ec8:	58026300 	.word	0x58026300
 8001ecc:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop

08001ee0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b08d      	sub	sp, #52	@ 0x34
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a65      	ldr	r2, [pc, #404]	@ (80020ac <HAL_ADC_ConfigChannel+0x1b0>)
 8001f16:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x2a>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e2c7      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x5ba>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fcce 	bl	80018d4 <LL_ADC_REG_IsConversionOngoing>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 82ac 	bne.w	8002498 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db2c      	blt.n	8001fa2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d108      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x6a>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2201      	movs	r2, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	e016      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x98>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	613b      	str	r3, [r7, #16]
  return result;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	e003      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2201      	movs	r2, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	69d1      	ldr	r1, [r2, #28]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f7ff fb7d 	bl	80016ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fc8b 	bl	80018d4 <LL_ADC_REG_IsConversionOngoing>
 8001fbe:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fc98 	bl	80018fa <LL_ADC_INJ_IsConversionOngoing>
 8001fca:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 80b8 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 80b4 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f7ff fb8c 	bl	8001706 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fee:	4b30      	ldr	r3, [pc, #192]	@ (80020b0 <HAL_ADC_ConfigChannel+0x1b4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001ff6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ffa:	d10b      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x118>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	e01d      	b.n	8002050 <HAL_ADC_ConfigChannel+0x154>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10b      	bne.n	800203a <HAL_ADC_ConfigChannel+0x13e>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	e00a      	b.n	8002050 <HAL_ADC_ConfigChannel+0x154>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b04      	cmp	r3, #4
 8002058:	d02c      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	f7ff facd 	bl	8001606 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	6919      	ldr	r1, [r3, #16]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	7e5b      	ldrb	r3, [r3, #25]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d102      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x186>
 800207c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002080:	e000      	b.n	8002084 <HAL_ADC_ConfigChannel+0x188>
 8002082:	2300      	movs	r3, #0
 8002084:	461a      	mov	r2, r3
 8002086:	f7ff faf7 	bl	8001678 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6919      	ldr	r1, [r3, #16]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	7e1b      	ldrb	r3, [r3, #24]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1a4>
 800209a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800209e:	e000      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1a6>
 80020a0:	2300      	movs	r3, #0
 80020a2:	461a      	mov	r2, r3
 80020a4:	f7ff facf 	bl	8001646 <LL_ADC_SetDataRightShift>
 80020a8:	e04c      	b.n	8002144 <HAL_ADC_ConfigChannel+0x248>
 80020aa:	bf00      	nop
 80020ac:	47ff0000 	.word	0x47ff0000
 80020b0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	069b      	lsls	r3, r3, #26
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d107      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020d6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	069b      	lsls	r3, r3, #26
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d107      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020fa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002102:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	069b      	lsls	r3, r3, #26
 800210c:	429a      	cmp	r2, r3
 800210e:	d107      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800211e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002126:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	069b      	lsls	r3, r3, #26
 8002130:	429a      	cmp	r2, r3
 8002132:	d107      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002142:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fb9b 	bl	8001884 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 81aa 	bne.w	80024aa <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6819      	ldr	r1, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	461a      	mov	r2, r3
 8002164:	f7ff fafa 	bl	800175c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4a87      	ldr	r2, [pc, #540]	@ (800238c <HAL_ADC_ConfigChannel+0x490>)
 800216e:	4293      	cmp	r3, r2
 8002170:	f040 809a 	bne.w	80022a8 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4984      	ldr	r1, [pc, #528]	@ (8002390 <HAL_ADC_ConfigChannel+0x494>)
 800217e:	428b      	cmp	r3, r1
 8002180:	d147      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x316>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4983      	ldr	r1, [pc, #524]	@ (8002394 <HAL_ADC_ConfigChannel+0x498>)
 8002188:	428b      	cmp	r3, r1
 800218a:	d040      	beq.n	800220e <HAL_ADC_ConfigChannel+0x312>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4981      	ldr	r1, [pc, #516]	@ (8002398 <HAL_ADC_ConfigChannel+0x49c>)
 8002192:	428b      	cmp	r3, r1
 8002194:	d039      	beq.n	800220a <HAL_ADC_ConfigChannel+0x30e>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4980      	ldr	r1, [pc, #512]	@ (800239c <HAL_ADC_ConfigChannel+0x4a0>)
 800219c:	428b      	cmp	r3, r1
 800219e:	d032      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x30a>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	497e      	ldr	r1, [pc, #504]	@ (80023a0 <HAL_ADC_ConfigChannel+0x4a4>)
 80021a6:	428b      	cmp	r3, r1
 80021a8:	d02b      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x306>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	497d      	ldr	r1, [pc, #500]	@ (80023a4 <HAL_ADC_ConfigChannel+0x4a8>)
 80021b0:	428b      	cmp	r3, r1
 80021b2:	d024      	beq.n	80021fe <HAL_ADC_ConfigChannel+0x302>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	497b      	ldr	r1, [pc, #492]	@ (80023a8 <HAL_ADC_ConfigChannel+0x4ac>)
 80021ba:	428b      	cmp	r3, r1
 80021bc:	d01d      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x2fe>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	497a      	ldr	r1, [pc, #488]	@ (80023ac <HAL_ADC_ConfigChannel+0x4b0>)
 80021c4:	428b      	cmp	r3, r1
 80021c6:	d016      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x2fa>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4978      	ldr	r1, [pc, #480]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4b4>)
 80021ce:	428b      	cmp	r3, r1
 80021d0:	d00f      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x2f6>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4977      	ldr	r1, [pc, #476]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4b8>)
 80021d8:	428b      	cmp	r3, r1
 80021da:	d008      	beq.n	80021ee <HAL_ADC_ConfigChannel+0x2f2>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4975      	ldr	r1, [pc, #468]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4bc>)
 80021e2:	428b      	cmp	r3, r1
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x2ee>
 80021e6:	4b75      	ldr	r3, [pc, #468]	@ (80023bc <HAL_ADC_ConfigChannel+0x4c0>)
 80021e8:	e05a      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 80021ea:	2300      	movs	r3, #0
 80021ec:	e058      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 80021ee:	4b74      	ldr	r3, [pc, #464]	@ (80023c0 <HAL_ADC_ConfigChannel+0x4c4>)
 80021f0:	e056      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 80021f2:	4b74      	ldr	r3, [pc, #464]	@ (80023c4 <HAL_ADC_ConfigChannel+0x4c8>)
 80021f4:	e054      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 80021f6:	4b6e      	ldr	r3, [pc, #440]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4b4>)
 80021f8:	e052      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 80021fa:	4b6c      	ldr	r3, [pc, #432]	@ (80023ac <HAL_ADC_ConfigChannel+0x4b0>)
 80021fc:	e050      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 80021fe:	4b72      	ldr	r3, [pc, #456]	@ (80023c8 <HAL_ADC_ConfigChannel+0x4cc>)
 8002200:	e04e      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002202:	4b72      	ldr	r3, [pc, #456]	@ (80023cc <HAL_ADC_ConfigChannel+0x4d0>)
 8002204:	e04c      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002206:	4b72      	ldr	r3, [pc, #456]	@ (80023d0 <HAL_ADC_ConfigChannel+0x4d4>)
 8002208:	e04a      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 800220a:	4b72      	ldr	r3, [pc, #456]	@ (80023d4 <HAL_ADC_ConfigChannel+0x4d8>)
 800220c:	e048      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 800220e:	2301      	movs	r3, #1
 8002210:	e046      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4970      	ldr	r1, [pc, #448]	@ (80023d8 <HAL_ADC_ConfigChannel+0x4dc>)
 8002218:	428b      	cmp	r3, r1
 800221a:	d140      	bne.n	800229e <HAL_ADC_ConfigChannel+0x3a2>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	495c      	ldr	r1, [pc, #368]	@ (8002394 <HAL_ADC_ConfigChannel+0x498>)
 8002222:	428b      	cmp	r3, r1
 8002224:	d039      	beq.n	800229a <HAL_ADC_ConfigChannel+0x39e>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	495b      	ldr	r1, [pc, #364]	@ (8002398 <HAL_ADC_ConfigChannel+0x49c>)
 800222c:	428b      	cmp	r3, r1
 800222e:	d032      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x39a>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4959      	ldr	r1, [pc, #356]	@ (800239c <HAL_ADC_ConfigChannel+0x4a0>)
 8002236:	428b      	cmp	r3, r1
 8002238:	d02b      	beq.n	8002292 <HAL_ADC_ConfigChannel+0x396>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4958      	ldr	r1, [pc, #352]	@ (80023a0 <HAL_ADC_ConfigChannel+0x4a4>)
 8002240:	428b      	cmp	r3, r1
 8002242:	d024      	beq.n	800228e <HAL_ADC_ConfigChannel+0x392>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4956      	ldr	r1, [pc, #344]	@ (80023a4 <HAL_ADC_ConfigChannel+0x4a8>)
 800224a:	428b      	cmp	r3, r1
 800224c:	d01d      	beq.n	800228a <HAL_ADC_ConfigChannel+0x38e>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4955      	ldr	r1, [pc, #340]	@ (80023a8 <HAL_ADC_ConfigChannel+0x4ac>)
 8002254:	428b      	cmp	r3, r1
 8002256:	d016      	beq.n	8002286 <HAL_ADC_ConfigChannel+0x38a>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4953      	ldr	r1, [pc, #332]	@ (80023ac <HAL_ADC_ConfigChannel+0x4b0>)
 800225e:	428b      	cmp	r3, r1
 8002260:	d00f      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x386>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4952      	ldr	r1, [pc, #328]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4b4>)
 8002268:	428b      	cmp	r3, r1
 800226a:	d008      	beq.n	800227e <HAL_ADC_ConfigChannel+0x382>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4951      	ldr	r1, [pc, #324]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4bc>)
 8002272:	428b      	cmp	r3, r1
 8002274:	d101      	bne.n	800227a <HAL_ADC_ConfigChannel+0x37e>
 8002276:	4b51      	ldr	r3, [pc, #324]	@ (80023bc <HAL_ADC_ConfigChannel+0x4c0>)
 8002278:	e012      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 800227a:	2300      	movs	r3, #0
 800227c:	e010      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 800227e:	4b51      	ldr	r3, [pc, #324]	@ (80023c4 <HAL_ADC_ConfigChannel+0x4c8>)
 8002280:	e00e      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002282:	4b4b      	ldr	r3, [pc, #300]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4b4>)
 8002284:	e00c      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002286:	4b49      	ldr	r3, [pc, #292]	@ (80023ac <HAL_ADC_ConfigChannel+0x4b0>)
 8002288:	e00a      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 800228a:	4b4f      	ldr	r3, [pc, #316]	@ (80023c8 <HAL_ADC_ConfigChannel+0x4cc>)
 800228c:	e008      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 800228e:	4b4f      	ldr	r3, [pc, #316]	@ (80023cc <HAL_ADC_ConfigChannel+0x4d0>)
 8002290:	e006      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002292:	4b4f      	ldr	r3, [pc, #316]	@ (80023d0 <HAL_ADC_ConfigChannel+0x4d4>)
 8002294:	e004      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 8002296:	4b4f      	ldr	r3, [pc, #316]	@ (80023d4 <HAL_ADC_ConfigChannel+0x4d8>)
 8002298:	e002      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3a4>
 800229e:	2300      	movs	r3, #0
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7ff f97c 	bl	80015a0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f280 80fc 	bge.w	80024aa <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a36      	ldr	r2, [pc, #216]	@ (8002390 <HAL_ADC_ConfigChannel+0x494>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d004      	beq.n	80022c6 <HAL_ADC_ConfigChannel+0x3ca>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a45      	ldr	r2, [pc, #276]	@ (80023d8 <HAL_ADC_ConfigChannel+0x4dc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x3ce>
 80022c6:	4b45      	ldr	r3, [pc, #276]	@ (80023dc <HAL_ADC_ConfigChannel+0x4e0>)
 80022c8:	e000      	b.n	80022cc <HAL_ADC_ConfigChannel+0x3d0>
 80022ca:	4b45      	ldr	r3, [pc, #276]	@ (80023e0 <HAL_ADC_ConfigChannel+0x4e4>)
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f959 	bl	8001584 <LL_ADC_GetCommonPathInternalCh>
 80022d2:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002390 <HAL_ADC_ConfigChannel+0x494>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d004      	beq.n	80022e8 <HAL_ADC_ConfigChannel+0x3ec>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a3d      	ldr	r2, [pc, #244]	@ (80023d8 <HAL_ADC_ConfigChannel+0x4dc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d10e      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x40a>
 80022e8:	4829      	ldr	r0, [pc, #164]	@ (8002390 <HAL_ADC_ConfigChannel+0x494>)
 80022ea:	f7ff facb 	bl	8001884 <LL_ADC_IsEnabled>
 80022ee:	4604      	mov	r4, r0
 80022f0:	4839      	ldr	r0, [pc, #228]	@ (80023d8 <HAL_ADC_ConfigChannel+0x4dc>)
 80022f2:	f7ff fac7 	bl	8001884 <LL_ADC_IsEnabled>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4323      	orrs	r3, r4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	e008      	b.n	8002318 <HAL_ADC_ConfigChannel+0x41c>
 8002306:	4837      	ldr	r0, [pc, #220]	@ (80023e4 <HAL_ADC_ConfigChannel+0x4e8>)
 8002308:	f7ff fabc 	bl	8001884 <LL_ADC_IsEnabled>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf0c      	ite	eq
 8002312:	2301      	moveq	r3, #1
 8002314:	2300      	movne	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80b3 	beq.w	8002484 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a31      	ldr	r2, [pc, #196]	@ (80023e8 <HAL_ADC_ConfigChannel+0x4ec>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d165      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x4f8>
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d160      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2b      	ldr	r2, [pc, #172]	@ (80023e4 <HAL_ADC_ConfigChannel+0x4e8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	f040 80b6 	bne.w	80024aa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a13      	ldr	r2, [pc, #76]	@ (8002390 <HAL_ADC_ConfigChannel+0x494>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d004      	beq.n	8002352 <HAL_ADC_ConfigChannel+0x456>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a22      	ldr	r2, [pc, #136]	@ (80023d8 <HAL_ADC_ConfigChannel+0x4dc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x45a>
 8002352:	4a22      	ldr	r2, [pc, #136]	@ (80023dc <HAL_ADC_ConfigChannel+0x4e0>)
 8002354:	e000      	b.n	8002358 <HAL_ADC_ConfigChannel+0x45c>
 8002356:	4a22      	ldr	r2, [pc, #136]	@ (80023e0 <HAL_ADC_ConfigChannel+0x4e4>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800235e:	4619      	mov	r1, r3
 8002360:	4610      	mov	r0, r2
 8002362:	f7ff f8fc 	bl	800155e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002366:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <HAL_ADC_ConfigChannel+0x4f0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	099b      	lsrs	r3, r3, #6
 800236c:	4a20      	ldr	r2, [pc, #128]	@ (80023f0 <HAL_ADC_ConfigChannel+0x4f4>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	099b      	lsrs	r3, r3, #6
 8002374:	3301      	adds	r3, #1
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800237a:	e002      	b.n	8002382 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3b01      	subs	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f9      	bne.n	800237c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002388:	e08f      	b.n	80024aa <HAL_ADC_ConfigChannel+0x5ae>
 800238a:	bf00      	nop
 800238c:	47ff0000 	.word	0x47ff0000
 8002390:	40022000 	.word	0x40022000
 8002394:	04300002 	.word	0x04300002
 8002398:	08600004 	.word	0x08600004
 800239c:	0c900008 	.word	0x0c900008
 80023a0:	10c00010 	.word	0x10c00010
 80023a4:	14f00020 	.word	0x14f00020
 80023a8:	2a000400 	.word	0x2a000400
 80023ac:	2e300800 	.word	0x2e300800
 80023b0:	32601000 	.word	0x32601000
 80023b4:	43210000 	.word	0x43210000
 80023b8:	4b840000 	.word	0x4b840000
 80023bc:	4fb80000 	.word	0x4fb80000
 80023c0:	47520000 	.word	0x47520000
 80023c4:	36902000 	.word	0x36902000
 80023c8:	25b00200 	.word	0x25b00200
 80023cc:	21800100 	.word	0x21800100
 80023d0:	1d500080 	.word	0x1d500080
 80023d4:	19200040 	.word	0x19200040
 80023d8:	40022100 	.word	0x40022100
 80023dc:	40022300 	.word	0x40022300
 80023e0:	58026300 	.word	0x58026300
 80023e4:	58026000 	.word	0x58026000
 80023e8:	cb840000 	.word	0xcb840000
 80023ec:	24000000 	.word	0x24000000
 80023f0:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a31      	ldr	r2, [pc, #196]	@ (80024c0 <HAL_ADC_ConfigChannel+0x5c4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d11e      	bne.n	800243c <HAL_ADC_ConfigChannel+0x540>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d119      	bne.n	800243c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2d      	ldr	r2, [pc, #180]	@ (80024c4 <HAL_ADC_ConfigChannel+0x5c8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d14b      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a2c      	ldr	r2, [pc, #176]	@ (80024c8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x52a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a2a      	ldr	r2, [pc, #168]	@ (80024cc <HAL_ADC_ConfigChannel+0x5d0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_ADC_ConfigChannel+0x52e>
 8002426:	4a2a      	ldr	r2, [pc, #168]	@ (80024d0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002428:	e000      	b.n	800242c <HAL_ADC_ConfigChannel+0x530>
 800242a:	4a2a      	ldr	r2, [pc, #168]	@ (80024d4 <HAL_ADC_ConfigChannel+0x5d8>)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f7ff f892 	bl	800155e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800243a:	e036      	b.n	80024aa <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a25      	ldr	r2, [pc, #148]	@ (80024d8 <HAL_ADC_ConfigChannel+0x5dc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d131      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x5ae>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d12c      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1b      	ldr	r2, [pc, #108]	@ (80024c4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d127      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1a      	ldr	r2, [pc, #104]	@ (80024c8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d004      	beq.n	800246e <HAL_ADC_ConfigChannel+0x572>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a18      	ldr	r2, [pc, #96]	@ (80024cc <HAL_ADC_ConfigChannel+0x5d0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x576>
 800246e:	4a18      	ldr	r2, [pc, #96]	@ (80024d0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002470:	e000      	b.n	8002474 <HAL_ADC_ConfigChannel+0x578>
 8002472:	4a18      	ldr	r2, [pc, #96]	@ (80024d4 <HAL_ADC_ConfigChannel+0x5d8>)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f7ff f86e 	bl	800155e <LL_ADC_SetCommonPathInternalCh>
 8002482:	e012      	b.n	80024aa <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002496:	e008      	b.n	80024aa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249c:	f043 0220 	orr.w	r2, r3, #32
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3734      	adds	r7, #52	@ 0x34
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	c7520000 	.word	0xc7520000
 80024c4:	58026000 	.word	0x58026000
 80024c8:	40022000 	.word	0x40022000
 80024cc:	40022100 	.word	0x40022100
 80024d0:	40022300 	.word	0x40022300
 80024d4:	58026300 	.word	0x58026300
 80024d8:	cfb80000 	.word	0xcfb80000

080024dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f9cb 	bl	8001884 <LL_ADC_IsEnabled>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d16e      	bne.n	80025d2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	4b38      	ldr	r3, [pc, #224]	@ (80025dc <ADC_Enable+0x100>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00d      	beq.n	800251e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002506:	f043 0210 	orr.w	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e05a      	b.n	80025d4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f99a 	bl	800185c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002528:	f7fe ffee 	bl	8001508 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2b      	ldr	r2, [pc, #172]	@ (80025e0 <ADC_Enable+0x104>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d004      	beq.n	8002542 <ADC_Enable+0x66>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a29      	ldr	r2, [pc, #164]	@ (80025e4 <ADC_Enable+0x108>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <ADC_Enable+0x6a>
 8002542:	4b29      	ldr	r3, [pc, #164]	@ (80025e8 <ADC_Enable+0x10c>)
 8002544:	e000      	b.n	8002548 <ADC_Enable+0x6c>
 8002546:	4b29      	ldr	r3, [pc, #164]	@ (80025ec <ADC_Enable+0x110>)
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff f92b 	bl	80017a4 <LL_ADC_GetMultimode>
 800254e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a23      	ldr	r2, [pc, #140]	@ (80025e4 <ADC_Enable+0x108>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d002      	beq.n	8002560 <ADC_Enable+0x84>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	e000      	b.n	8002562 <ADC_Enable+0x86>
 8002560:	4b1f      	ldr	r3, [pc, #124]	@ (80025e0 <ADC_Enable+0x104>)
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	4293      	cmp	r3, r2
 8002568:	d02c      	beq.n	80025c4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d130      	bne.n	80025d2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002570:	e028      	b.n	80025c4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff f984 	bl	8001884 <LL_ADC_IsEnabled>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff f968 	bl	800185c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800258c:	f7fe ffbc 	bl	8001508 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d914      	bls.n	80025c4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d00d      	beq.n	80025c4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ac:	f043 0210 	orr.w	r2, r3, #16
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e007      	b.n	80025d4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d1cf      	bne.n	8002572 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	8000003f 	.word	0x8000003f
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40022100 	.word	0x40022100
 80025e8:	40022300 	.word	0x40022300
 80025ec:	58026300 	.word	0x58026300

080025f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a7a      	ldr	r2, [pc, #488]	@ (80027e8 <ADC_ConfigureBoostMode+0x1f8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d004      	beq.n	800260c <ADC_ConfigureBoostMode+0x1c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a79      	ldr	r2, [pc, #484]	@ (80027ec <ADC_ConfigureBoostMode+0x1fc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d109      	bne.n	8002620 <ADC_ConfigureBoostMode+0x30>
 800260c:	4b78      	ldr	r3, [pc, #480]	@ (80027f0 <ADC_ConfigureBoostMode+0x200>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e008      	b.n	8002632 <ADC_ConfigureBoostMode+0x42>
 8002620:	4b74      	ldr	r3, [pc, #464]	@ (80027f4 <ADC_ConfigureBoostMode+0x204>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01c      	beq.n	8002670 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002636:	f002 f9f1 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 800263a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002644:	d010      	beq.n	8002668 <ADC_ConfigureBoostMode+0x78>
 8002646:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800264a:	d873      	bhi.n	8002734 <ADC_ConfigureBoostMode+0x144>
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002650:	d002      	beq.n	8002658 <ADC_ConfigureBoostMode+0x68>
 8002652:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002656:	d16d      	bne.n	8002734 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	60fb      	str	r3, [r7, #12]
        break;
 8002666:	e068      	b.n	800273a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	60fb      	str	r3, [r7, #12]
        break;
 800266e:	e064      	b.n	800273a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002670:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002674:	f04f 0100 	mov.w	r1, #0
 8002678:	f003 fc78 	bl	8005f6c <HAL_RCCEx_GetPeriphCLKFreq>
 800267c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002686:	d051      	beq.n	800272c <ADC_ConfigureBoostMode+0x13c>
 8002688:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800268c:	d854      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x148>
 800268e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002692:	d047      	beq.n	8002724 <ADC_ConfigureBoostMode+0x134>
 8002694:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002698:	d84e      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x148>
 800269a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800269e:	d03d      	beq.n	800271c <ADC_ConfigureBoostMode+0x12c>
 80026a0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80026a4:	d848      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x148>
 80026a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026aa:	d033      	beq.n	8002714 <ADC_ConfigureBoostMode+0x124>
 80026ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026b0:	d842      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x148>
 80026b2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026b6:	d029      	beq.n	800270c <ADC_ConfigureBoostMode+0x11c>
 80026b8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026bc:	d83c      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x148>
 80026be:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026c2:	d01a      	beq.n	80026fa <ADC_ConfigureBoostMode+0x10a>
 80026c4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026c8:	d836      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x148>
 80026ca:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026ce:	d014      	beq.n	80026fa <ADC_ConfigureBoostMode+0x10a>
 80026d0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026d4:	d830      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x148>
 80026d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026da:	d00e      	beq.n	80026fa <ADC_ConfigureBoostMode+0x10a>
 80026dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026e0:	d82a      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x148>
 80026e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026e6:	d008      	beq.n	80026fa <ADC_ConfigureBoostMode+0x10a>
 80026e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026ec:	d824      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x148>
 80026ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026f2:	d002      	beq.n	80026fa <ADC_ConfigureBoostMode+0x10a>
 80026f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026f8:	d11e      	bne.n	8002738 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	0c9b      	lsrs	r3, r3, #18
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	60fb      	str	r3, [r7, #12]
        break;
 800270a:	e016      	b.n	800273a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	60fb      	str	r3, [r7, #12]
        break;
 8002712:	e012      	b.n	800273a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	60fb      	str	r3, [r7, #12]
        break;
 800271a:	e00e      	b.n	800273a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	099b      	lsrs	r3, r3, #6
 8002720:	60fb      	str	r3, [r7, #12]
        break;
 8002722:	e00a      	b.n	800273a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	09db      	lsrs	r3, r3, #7
 8002728:	60fb      	str	r3, [r7, #12]
        break;
 800272a:	e006      	b.n	800273a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	60fb      	str	r3, [r7, #12]
        break;
 8002732:	e002      	b.n	800273a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002734:	bf00      	nop
 8002736:	e000      	b.n	800273a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002738:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800273a:	f7fe fef1 	bl	8001520 <HAL_GetREVID>
 800273e:	4603      	mov	r3, r0
 8002740:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002744:	4293      	cmp	r3, r2
 8002746:	d815      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4a2b      	ldr	r2, [pc, #172]	@ (80027f8 <ADC_ConfigureBoostMode+0x208>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d908      	bls.n	8002762 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800275e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002760:	e03e      	b.n	80027e0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002770:	609a      	str	r2, [r3, #8]
}
 8002772:	e035      	b.n	80027e0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4a1f      	ldr	r2, [pc, #124]	@ (80027fc <ADC_ConfigureBoostMode+0x20c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d808      	bhi.n	8002794 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002790:	609a      	str	r2, [r3, #8]
}
 8002792:	e025      	b.n	80027e0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a1a      	ldr	r2, [pc, #104]	@ (8002800 <ADC_ConfigureBoostMode+0x210>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d80a      	bhi.n	80027b2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ae:	609a      	str	r2, [r3, #8]
}
 80027b0:	e016      	b.n	80027e0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a13      	ldr	r2, [pc, #76]	@ (8002804 <ADC_ConfigureBoostMode+0x214>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d80a      	bhi.n	80027d0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027cc:	609a      	str	r2, [r3, #8]
}
 80027ce:	e007      	b.n	80027e0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40022100 	.word	0x40022100
 80027f0:	40022300 	.word	0x40022300
 80027f4:	58026300 	.word	0x58026300
 80027f8:	01312d00 	.word	0x01312d00
 80027fc:	005f5e10 	.word	0x005f5e10
 8002800:	00bebc20 	.word	0x00bebc20
 8002804:	017d7840 	.word	0x017d7840

08002808 <LL_ADC_IsEnabled>:
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <LL_ADC_IsEnabled+0x18>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <LL_ADC_IsEnabled+0x1a>
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_ADC_REG_IsConversionOngoing>:
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b04      	cmp	r3, #4
 8002840:	d101      	bne.n	8002846 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b09f      	sub	sp, #124	@ 0x7c
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800286e:	2302      	movs	r3, #2
 8002870:	e0be      	b.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800287e:	2300      	movs	r3, #0
 8002880:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a5c      	ldr	r2, [pc, #368]	@ (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d102      	bne.n	8002892 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800288c:	4b5b      	ldr	r3, [pc, #364]	@ (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	e001      	b.n	8002896 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10b      	bne.n	80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e09d      	b.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ffb9 	bl	800282e <LL_ADC_REG_IsConversionOngoing>
 80028bc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ffb3 	bl	800282e <LL_ADC_REG_IsConversionOngoing>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d17f      	bne.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d17c      	bne.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a47      	ldr	r2, [pc, #284]	@ (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a46      	ldr	r2, [pc, #280]	@ (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80028e8:	4b45      	ldr	r3, [pc, #276]	@ (8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80028ea:	e000      	b.n	80028ee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80028ec:	4b45      	ldr	r3, [pc, #276]	@ (8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80028ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d039      	beq.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80028f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	431a      	orrs	r2, r3
 8002906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002908:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a3a      	ldr	r2, [pc, #232]	@ (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a38      	ldr	r2, [pc, #224]	@ (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10e      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800291e:	4836      	ldr	r0, [pc, #216]	@ (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002920:	f7ff ff72 	bl	8002808 <LL_ADC_IsEnabled>
 8002924:	4604      	mov	r4, r0
 8002926:	4835      	ldr	r0, [pc, #212]	@ (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002928:	f7ff ff6e 	bl	8002808 <LL_ADC_IsEnabled>
 800292c:	4603      	mov	r3, r0
 800292e:	4323      	orrs	r3, r4
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	e008      	b.n	800294e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800293c:	4832      	ldr	r0, [pc, #200]	@ (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800293e:	f7ff ff63 	bl	8002808 <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d047      	beq.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002958:	4013      	ands	r3, r2
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	6811      	ldr	r1, [r2, #0]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	6892      	ldr	r2, [r2, #8]
 8002962:	430a      	orrs	r2, r1
 8002964:	431a      	orrs	r2, r3
 8002966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002968:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800296a:	e03a      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800296c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002976:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1e      	ldr	r2, [pc, #120]	@ (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10e      	bne.n	80029aa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800298c:	481a      	ldr	r0, [pc, #104]	@ (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800298e:	f7ff ff3b 	bl	8002808 <LL_ADC_IsEnabled>
 8002992:	4604      	mov	r4, r0
 8002994:	4819      	ldr	r0, [pc, #100]	@ (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002996:	f7ff ff37 	bl	8002808 <LL_ADC_IsEnabled>
 800299a:	4603      	mov	r3, r0
 800299c:	4323      	orrs	r3, r4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	e008      	b.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80029aa:	4817      	ldr	r0, [pc, #92]	@ (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80029ac:	f7ff ff2c 	bl	8002808 <LL_ADC_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d010      	beq.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029ca:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029cc:	e009      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80029e0:	e000      	b.n	80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029ec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	377c      	adds	r7, #124	@ 0x7c
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	40022000 	.word	0x40022000
 80029fc:	40022100 	.word	0x40022100
 8002a00:	40022300 	.word	0x40022300
 8002a04:	58026300 	.word	0x58026300
 8002a08:	58026000 	.word	0x58026000
 8002a0c:	fffff0e0 	.word	0xfffff0e0

08002a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <__NVIC_SetPriorityGrouping+0x40>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a38:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3e:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <__NVIC_SetPriorityGrouping+0x40>)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	60d3      	str	r3, [r2, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00
 8002a54:	05fa0000 	.word	0x05fa0000

08002a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a5c:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <__NVIC_GetPriorityGrouping+0x18>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	f003 0307 	and.w	r3, r3, #7
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	db0b      	blt.n	8002a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	f003 021f 	and.w	r2, r3, #31
 8002a8c:	4907      	ldr	r1, [pc, #28]	@ (8002aac <__NVIC_EnableIRQ+0x38>)
 8002a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	2001      	movs	r0, #1
 8002a96:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000e100 	.word	0xe000e100

08002ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db0a      	blt.n	8002ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	490c      	ldr	r1, [pc, #48]	@ (8002afc <__NVIC_SetPriority+0x4c>)
 8002aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ace:	0112      	lsls	r2, r2, #4
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad8:	e00a      	b.n	8002af0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	4908      	ldr	r1, [pc, #32]	@ (8002b00 <__NVIC_SetPriority+0x50>)
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3b04      	subs	r3, #4
 8002ae8:	0112      	lsls	r2, r2, #4
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	440b      	add	r3, r1
 8002aee:	761a      	strb	r2, [r3, #24]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000e100 	.word	0xe000e100
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f1c3 0307 	rsb	r3, r3, #7
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	bf28      	it	cs
 8002b22:	2304      	movcs	r3, #4
 8002b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d902      	bls.n	8002b34 <NVIC_EncodePriority+0x30>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3b03      	subs	r3, #3
 8002b32:	e000      	b.n	8002b36 <NVIC_EncodePriority+0x32>
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43d9      	mvns	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	4313      	orrs	r3, r2
         );
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3724      	adds	r7, #36	@ 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ff4c 	bl	8002a10 <__NVIC_SetPriorityGrouping>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8e:	f7ff ff63 	bl	8002a58 <__NVIC_GetPriorityGrouping>
 8002b92:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	6978      	ldr	r0, [r7, #20]
 8002b9a:	f7ff ffb3 	bl	8002b04 <NVIC_EncodePriority>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ff82 	bl	8002ab0 <__NVIC_SetPriority>
}
 8002bac:	bf00      	nop
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff56 	bl	8002a74 <__NVIC_EnableIRQ>
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7fe fc96 	bl	8001508 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e2dc      	b.n	80031a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d008      	beq.n	8002c06 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2280      	movs	r2, #128	@ 0x80
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e2cd      	b.n	80031a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a76      	ldr	r2, [pc, #472]	@ (8002de4 <HAL_DMA_Abort+0x214>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d04a      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a74      	ldr	r2, [pc, #464]	@ (8002de8 <HAL_DMA_Abort+0x218>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d045      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a73      	ldr	r2, [pc, #460]	@ (8002dec <HAL_DMA_Abort+0x21c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d040      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a71      	ldr	r2, [pc, #452]	@ (8002df0 <HAL_DMA_Abort+0x220>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d03b      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a70      	ldr	r2, [pc, #448]	@ (8002df4 <HAL_DMA_Abort+0x224>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d036      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8002df8 <HAL_DMA_Abort+0x228>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d031      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6d      	ldr	r2, [pc, #436]	@ (8002dfc <HAL_DMA_Abort+0x22c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d02c      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a6b      	ldr	r2, [pc, #428]	@ (8002e00 <HAL_DMA_Abort+0x230>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d027      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6a      	ldr	r2, [pc, #424]	@ (8002e04 <HAL_DMA_Abort+0x234>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d022      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a68      	ldr	r2, [pc, #416]	@ (8002e08 <HAL_DMA_Abort+0x238>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01d      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a67      	ldr	r2, [pc, #412]	@ (8002e0c <HAL_DMA_Abort+0x23c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d018      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a65      	ldr	r2, [pc, #404]	@ (8002e10 <HAL_DMA_Abort+0x240>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a64      	ldr	r2, [pc, #400]	@ (8002e14 <HAL_DMA_Abort+0x244>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00e      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a62      	ldr	r2, [pc, #392]	@ (8002e18 <HAL_DMA_Abort+0x248>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d009      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a61      	ldr	r2, [pc, #388]	@ (8002e1c <HAL_DMA_Abort+0x24c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d004      	beq.n	8002ca6 <HAL_DMA_Abort+0xd6>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5f      	ldr	r2, [pc, #380]	@ (8002e20 <HAL_DMA_Abort+0x250>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_DMA_Abort+0xda>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_DMA_Abort+0xdc>
 8002caa:	2300      	movs	r3, #0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 021e 	bic.w	r2, r2, #30
 8002cbe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e00a      	b.n	8002cee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 020e 	bic.w	r2, r2, #14
 8002ce6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a3c      	ldr	r2, [pc, #240]	@ (8002de4 <HAL_DMA_Abort+0x214>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d072      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a3a      	ldr	r2, [pc, #232]	@ (8002de8 <HAL_DMA_Abort+0x218>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d06d      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a39      	ldr	r2, [pc, #228]	@ (8002dec <HAL_DMA_Abort+0x21c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d068      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a37      	ldr	r2, [pc, #220]	@ (8002df0 <HAL_DMA_Abort+0x220>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d063      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a36      	ldr	r2, [pc, #216]	@ (8002df4 <HAL_DMA_Abort+0x224>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d05e      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a34      	ldr	r2, [pc, #208]	@ (8002df8 <HAL_DMA_Abort+0x228>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d059      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a33      	ldr	r2, [pc, #204]	@ (8002dfc <HAL_DMA_Abort+0x22c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d054      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a31      	ldr	r2, [pc, #196]	@ (8002e00 <HAL_DMA_Abort+0x230>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d04f      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a30      	ldr	r2, [pc, #192]	@ (8002e04 <HAL_DMA_Abort+0x234>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d04a      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e08 <HAL_DMA_Abort+0x238>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d045      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2d      	ldr	r2, [pc, #180]	@ (8002e0c <HAL_DMA_Abort+0x23c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d040      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2b      	ldr	r2, [pc, #172]	@ (8002e10 <HAL_DMA_Abort+0x240>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d03b      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8002e14 <HAL_DMA_Abort+0x244>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d036      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a28      	ldr	r2, [pc, #160]	@ (8002e18 <HAL_DMA_Abort+0x248>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d031      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a27      	ldr	r2, [pc, #156]	@ (8002e1c <HAL_DMA_Abort+0x24c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d02c      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a25      	ldr	r2, [pc, #148]	@ (8002e20 <HAL_DMA_Abort+0x250>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d027      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a24      	ldr	r2, [pc, #144]	@ (8002e24 <HAL_DMA_Abort+0x254>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d022      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a22      	ldr	r2, [pc, #136]	@ (8002e28 <HAL_DMA_Abort+0x258>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01d      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a21      	ldr	r2, [pc, #132]	@ (8002e2c <HAL_DMA_Abort+0x25c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d018      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e30 <HAL_DMA_Abort+0x260>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1e      	ldr	r2, [pc, #120]	@ (8002e34 <HAL_DMA_Abort+0x264>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00e      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e38 <HAL_DMA_Abort+0x268>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d009      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1b      	ldr	r2, [pc, #108]	@ (8002e3c <HAL_DMA_Abort+0x26c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_DMA_Abort+0x20e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	@ (8002e40 <HAL_DMA_Abort+0x270>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d132      	bne.n	8002e44 <HAL_DMA_Abort+0x274>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e031      	b.n	8002e46 <HAL_DMA_Abort+0x276>
 8002de2:	bf00      	nop
 8002de4:	40020010 	.word	0x40020010
 8002de8:	40020028 	.word	0x40020028
 8002dec:	40020040 	.word	0x40020040
 8002df0:	40020058 	.word	0x40020058
 8002df4:	40020070 	.word	0x40020070
 8002df8:	40020088 	.word	0x40020088
 8002dfc:	400200a0 	.word	0x400200a0
 8002e00:	400200b8 	.word	0x400200b8
 8002e04:	40020410 	.word	0x40020410
 8002e08:	40020428 	.word	0x40020428
 8002e0c:	40020440 	.word	0x40020440
 8002e10:	40020458 	.word	0x40020458
 8002e14:	40020470 	.word	0x40020470
 8002e18:	40020488 	.word	0x40020488
 8002e1c:	400204a0 	.word	0x400204a0
 8002e20:	400204b8 	.word	0x400204b8
 8002e24:	58025408 	.word	0x58025408
 8002e28:	5802541c 	.word	0x5802541c
 8002e2c:	58025430 	.word	0x58025430
 8002e30:	58025444 	.word	0x58025444
 8002e34:	58025458 	.word	0x58025458
 8002e38:	5802546c 	.word	0x5802546c
 8002e3c:	58025480 	.word	0x58025480
 8002e40:	58025494 	.word	0x58025494
 8002e44:	2300      	movs	r3, #0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e58:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6d      	ldr	r2, [pc, #436]	@ (8003014 <HAL_DMA_Abort+0x444>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d04a      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a6b      	ldr	r2, [pc, #428]	@ (8003018 <HAL_DMA_Abort+0x448>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d045      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6a      	ldr	r2, [pc, #424]	@ (800301c <HAL_DMA_Abort+0x44c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d040      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a68      	ldr	r2, [pc, #416]	@ (8003020 <HAL_DMA_Abort+0x450>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d03b      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a67      	ldr	r2, [pc, #412]	@ (8003024 <HAL_DMA_Abort+0x454>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d036      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a65      	ldr	r2, [pc, #404]	@ (8003028 <HAL_DMA_Abort+0x458>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d031      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a64      	ldr	r2, [pc, #400]	@ (800302c <HAL_DMA_Abort+0x45c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d02c      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a62      	ldr	r2, [pc, #392]	@ (8003030 <HAL_DMA_Abort+0x460>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d027      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a61      	ldr	r2, [pc, #388]	@ (8003034 <HAL_DMA_Abort+0x464>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d022      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a5f      	ldr	r2, [pc, #380]	@ (8003038 <HAL_DMA_Abort+0x468>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01d      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800303c <HAL_DMA_Abort+0x46c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d018      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a5c      	ldr	r2, [pc, #368]	@ (8003040 <HAL_DMA_Abort+0x470>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8003044 <HAL_DMA_Abort+0x474>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00e      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a59      	ldr	r2, [pc, #356]	@ (8003048 <HAL_DMA_Abort+0x478>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a58      	ldr	r2, [pc, #352]	@ (800304c <HAL_DMA_Abort+0x47c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_DMA_Abort+0x32a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a56      	ldr	r2, [pc, #344]	@ (8003050 <HAL_DMA_Abort+0x480>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d108      	bne.n	8002f0c <HAL_DMA_Abort+0x33c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e007      	b.n	8002f1c <HAL_DMA_Abort+0x34c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f1c:	e013      	b.n	8002f46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f1e:	f7fe faf3 	bl	8001508 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b05      	cmp	r3, #5
 8002f2a:	d90c      	bls.n	8002f46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2203      	movs	r2, #3
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e12d      	b.n	80031a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1e5      	bne.n	8002f1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2f      	ldr	r2, [pc, #188]	@ (8003014 <HAL_DMA_Abort+0x444>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d04a      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2d      	ldr	r2, [pc, #180]	@ (8003018 <HAL_DMA_Abort+0x448>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d045      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800301c <HAL_DMA_Abort+0x44c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d040      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2a      	ldr	r2, [pc, #168]	@ (8003020 <HAL_DMA_Abort+0x450>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d03b      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a29      	ldr	r2, [pc, #164]	@ (8003024 <HAL_DMA_Abort+0x454>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d036      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a27      	ldr	r2, [pc, #156]	@ (8003028 <HAL_DMA_Abort+0x458>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d031      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a26      	ldr	r2, [pc, #152]	@ (800302c <HAL_DMA_Abort+0x45c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d02c      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a24      	ldr	r2, [pc, #144]	@ (8003030 <HAL_DMA_Abort+0x460>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d027      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a23      	ldr	r2, [pc, #140]	@ (8003034 <HAL_DMA_Abort+0x464>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d022      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a21      	ldr	r2, [pc, #132]	@ (8003038 <HAL_DMA_Abort+0x468>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a20      	ldr	r2, [pc, #128]	@ (800303c <HAL_DMA_Abort+0x46c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d018      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003040 <HAL_DMA_Abort+0x470>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1d      	ldr	r2, [pc, #116]	@ (8003044 <HAL_DMA_Abort+0x474>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003048 <HAL_DMA_Abort+0x478>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d009      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800304c <HAL_DMA_Abort+0x47c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_DMA_Abort+0x422>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a18      	ldr	r2, [pc, #96]	@ (8003050 <HAL_DMA_Abort+0x480>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_DMA_Abort+0x426>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_DMA_Abort+0x428>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d02b      	beq.n	8003054 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003000:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	223f      	movs	r2, #63	@ 0x3f
 800300c:	409a      	lsls	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	e02a      	b.n	800306a <HAL_DMA_Abort+0x49a>
 8003014:	40020010 	.word	0x40020010
 8003018:	40020028 	.word	0x40020028
 800301c:	40020040 	.word	0x40020040
 8003020:	40020058 	.word	0x40020058
 8003024:	40020070 	.word	0x40020070
 8003028:	40020088 	.word	0x40020088
 800302c:	400200a0 	.word	0x400200a0
 8003030:	400200b8 	.word	0x400200b8
 8003034:	40020410 	.word	0x40020410
 8003038:	40020428 	.word	0x40020428
 800303c:	40020440 	.word	0x40020440
 8003040:	40020458 	.word	0x40020458
 8003044:	40020470 	.word	0x40020470
 8003048:	40020488 	.word	0x40020488
 800304c:	400204a0 	.word	0x400204a0
 8003050:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003058:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	2201      	movs	r2, #1
 8003064:	409a      	lsls	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a4f      	ldr	r2, [pc, #316]	@ (80031ac <HAL_DMA_Abort+0x5dc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d072      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a4d      	ldr	r2, [pc, #308]	@ (80031b0 <HAL_DMA_Abort+0x5e0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d06d      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a4c      	ldr	r2, [pc, #304]	@ (80031b4 <HAL_DMA_Abort+0x5e4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d068      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a4a      	ldr	r2, [pc, #296]	@ (80031b8 <HAL_DMA_Abort+0x5e8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d063      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a49      	ldr	r2, [pc, #292]	@ (80031bc <HAL_DMA_Abort+0x5ec>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d05e      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a47      	ldr	r2, [pc, #284]	@ (80031c0 <HAL_DMA_Abort+0x5f0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d059      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a46      	ldr	r2, [pc, #280]	@ (80031c4 <HAL_DMA_Abort+0x5f4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d054      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a44      	ldr	r2, [pc, #272]	@ (80031c8 <HAL_DMA_Abort+0x5f8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d04f      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a43      	ldr	r2, [pc, #268]	@ (80031cc <HAL_DMA_Abort+0x5fc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d04a      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a41      	ldr	r2, [pc, #260]	@ (80031d0 <HAL_DMA_Abort+0x600>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d045      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a40      	ldr	r2, [pc, #256]	@ (80031d4 <HAL_DMA_Abort+0x604>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d040      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a3e      	ldr	r2, [pc, #248]	@ (80031d8 <HAL_DMA_Abort+0x608>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d03b      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a3d      	ldr	r2, [pc, #244]	@ (80031dc <HAL_DMA_Abort+0x60c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d036      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a3b      	ldr	r2, [pc, #236]	@ (80031e0 <HAL_DMA_Abort+0x610>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d031      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a3a      	ldr	r2, [pc, #232]	@ (80031e4 <HAL_DMA_Abort+0x614>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d02c      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a38      	ldr	r2, [pc, #224]	@ (80031e8 <HAL_DMA_Abort+0x618>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d027      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a37      	ldr	r2, [pc, #220]	@ (80031ec <HAL_DMA_Abort+0x61c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a35      	ldr	r2, [pc, #212]	@ (80031f0 <HAL_DMA_Abort+0x620>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01d      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a34      	ldr	r2, [pc, #208]	@ (80031f4 <HAL_DMA_Abort+0x624>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d018      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a32      	ldr	r2, [pc, #200]	@ (80031f8 <HAL_DMA_Abort+0x628>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a31      	ldr	r2, [pc, #196]	@ (80031fc <HAL_DMA_Abort+0x62c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00e      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2f      	ldr	r2, [pc, #188]	@ (8003200 <HAL_DMA_Abort+0x630>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2e      	ldr	r2, [pc, #184]	@ (8003204 <HAL_DMA_Abort+0x634>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d004      	beq.n	800315a <HAL_DMA_Abort+0x58a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2c      	ldr	r2, [pc, #176]	@ (8003208 <HAL_DMA_Abort+0x638>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_DMA_Abort+0x58e>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_DMA_Abort+0x590>
 800315e:	2300      	movs	r3, #0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d015      	beq.n	8003190 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800316c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00c      	beq.n	8003190 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003180:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003184:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800318e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40020010 	.word	0x40020010
 80031b0:	40020028 	.word	0x40020028
 80031b4:	40020040 	.word	0x40020040
 80031b8:	40020058 	.word	0x40020058
 80031bc:	40020070 	.word	0x40020070
 80031c0:	40020088 	.word	0x40020088
 80031c4:	400200a0 	.word	0x400200a0
 80031c8:	400200b8 	.word	0x400200b8
 80031cc:	40020410 	.word	0x40020410
 80031d0:	40020428 	.word	0x40020428
 80031d4:	40020440 	.word	0x40020440
 80031d8:	40020458 	.word	0x40020458
 80031dc:	40020470 	.word	0x40020470
 80031e0:	40020488 	.word	0x40020488
 80031e4:	400204a0 	.word	0x400204a0
 80031e8:	400204b8 	.word	0x400204b8
 80031ec:	58025408 	.word	0x58025408
 80031f0:	5802541c 	.word	0x5802541c
 80031f4:	58025430 	.word	0x58025430
 80031f8:	58025444 	.word	0x58025444
 80031fc:	58025458 	.word	0x58025458
 8003200:	5802546c 	.word	0x5802546c
 8003204:	58025480 	.word	0x58025480
 8003208:	58025494 	.word	0x58025494

0800320c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e237      	b.n	800368e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d004      	beq.n	8003234 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2280      	movs	r2, #128	@ 0x80
 800322e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e22c      	b.n	800368e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5c      	ldr	r2, [pc, #368]	@ (80033ac <HAL_DMA_Abort_IT+0x1a0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d04a      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a5b      	ldr	r2, [pc, #364]	@ (80033b0 <HAL_DMA_Abort_IT+0x1a4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d045      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a59      	ldr	r2, [pc, #356]	@ (80033b4 <HAL_DMA_Abort_IT+0x1a8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d040      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a58      	ldr	r2, [pc, #352]	@ (80033b8 <HAL_DMA_Abort_IT+0x1ac>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d03b      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a56      	ldr	r2, [pc, #344]	@ (80033bc <HAL_DMA_Abort_IT+0x1b0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d036      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a55      	ldr	r2, [pc, #340]	@ (80033c0 <HAL_DMA_Abort_IT+0x1b4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d031      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a53      	ldr	r2, [pc, #332]	@ (80033c4 <HAL_DMA_Abort_IT+0x1b8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d02c      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a52      	ldr	r2, [pc, #328]	@ (80033c8 <HAL_DMA_Abort_IT+0x1bc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d027      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a50      	ldr	r2, [pc, #320]	@ (80033cc <HAL_DMA_Abort_IT+0x1c0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d022      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a4f      	ldr	r2, [pc, #316]	@ (80033d0 <HAL_DMA_Abort_IT+0x1c4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d01d      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a4d      	ldr	r2, [pc, #308]	@ (80033d4 <HAL_DMA_Abort_IT+0x1c8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d018      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4c      	ldr	r2, [pc, #304]	@ (80033d8 <HAL_DMA_Abort_IT+0x1cc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d013      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a4a      	ldr	r2, [pc, #296]	@ (80033dc <HAL_DMA_Abort_IT+0x1d0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00e      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a49      	ldr	r2, [pc, #292]	@ (80033e0 <HAL_DMA_Abort_IT+0x1d4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d009      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a47      	ldr	r2, [pc, #284]	@ (80033e4 <HAL_DMA_Abort_IT+0x1d8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xc8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a46      	ldr	r2, [pc, #280]	@ (80033e8 <HAL_DMA_Abort_IT+0x1dc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_DMA_Abort_IT+0xcc>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_DMA_Abort_IT+0xce>
 80032d8:	2300      	movs	r3, #0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8086 	beq.w	80033ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2204      	movs	r2, #4
 80032e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2f      	ldr	r2, [pc, #188]	@ (80033ac <HAL_DMA_Abort_IT+0x1a0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d04a      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2e      	ldr	r2, [pc, #184]	@ (80033b0 <HAL_DMA_Abort_IT+0x1a4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d045      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2c      	ldr	r2, [pc, #176]	@ (80033b4 <HAL_DMA_Abort_IT+0x1a8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d040      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2b      	ldr	r2, [pc, #172]	@ (80033b8 <HAL_DMA_Abort_IT+0x1ac>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d03b      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a29      	ldr	r2, [pc, #164]	@ (80033bc <HAL_DMA_Abort_IT+0x1b0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d036      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a28      	ldr	r2, [pc, #160]	@ (80033c0 <HAL_DMA_Abort_IT+0x1b4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d031      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a26      	ldr	r2, [pc, #152]	@ (80033c4 <HAL_DMA_Abort_IT+0x1b8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02c      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a25      	ldr	r2, [pc, #148]	@ (80033c8 <HAL_DMA_Abort_IT+0x1bc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d027      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a23      	ldr	r2, [pc, #140]	@ (80033cc <HAL_DMA_Abort_IT+0x1c0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d022      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a22      	ldr	r2, [pc, #136]	@ (80033d0 <HAL_DMA_Abort_IT+0x1c4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d01d      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a20      	ldr	r2, [pc, #128]	@ (80033d4 <HAL_DMA_Abort_IT+0x1c8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d018      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1f      	ldr	r2, [pc, #124]	@ (80033d8 <HAL_DMA_Abort_IT+0x1cc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	@ (80033dc <HAL_DMA_Abort_IT+0x1d0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00e      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1c      	ldr	r2, [pc, #112]	@ (80033e0 <HAL_DMA_Abort_IT+0x1d4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d009      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1a      	ldr	r2, [pc, #104]	@ (80033e4 <HAL_DMA_Abort_IT+0x1d8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_DMA_Abort_IT+0x17c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a19      	ldr	r2, [pc, #100]	@ (80033e8 <HAL_DMA_Abort_IT+0x1dc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d108      	bne.n	800339a <HAL_DMA_Abort_IT+0x18e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	e178      	b.n	800368c <HAL_DMA_Abort_IT+0x480>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e16f      	b.n	800368c <HAL_DMA_Abort_IT+0x480>
 80033ac:	40020010 	.word	0x40020010
 80033b0:	40020028 	.word	0x40020028
 80033b4:	40020040 	.word	0x40020040
 80033b8:	40020058 	.word	0x40020058
 80033bc:	40020070 	.word	0x40020070
 80033c0:	40020088 	.word	0x40020088
 80033c4:	400200a0 	.word	0x400200a0
 80033c8:	400200b8 	.word	0x400200b8
 80033cc:	40020410 	.word	0x40020410
 80033d0:	40020428 	.word	0x40020428
 80033d4:	40020440 	.word	0x40020440
 80033d8:	40020458 	.word	0x40020458
 80033dc:	40020470 	.word	0x40020470
 80033e0:	40020488 	.word	0x40020488
 80033e4:	400204a0 	.word	0x400204a0
 80033e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 020e 	bic.w	r2, r2, #14
 80033fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a6c      	ldr	r2, [pc, #432]	@ (80035b4 <HAL_DMA_Abort_IT+0x3a8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d04a      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a6b      	ldr	r2, [pc, #428]	@ (80035b8 <HAL_DMA_Abort_IT+0x3ac>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d045      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a69      	ldr	r2, [pc, #420]	@ (80035bc <HAL_DMA_Abort_IT+0x3b0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d040      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a68      	ldr	r2, [pc, #416]	@ (80035c0 <HAL_DMA_Abort_IT+0x3b4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d03b      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a66      	ldr	r2, [pc, #408]	@ (80035c4 <HAL_DMA_Abort_IT+0x3b8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d036      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a65      	ldr	r2, [pc, #404]	@ (80035c8 <HAL_DMA_Abort_IT+0x3bc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d031      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a63      	ldr	r2, [pc, #396]	@ (80035cc <HAL_DMA_Abort_IT+0x3c0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d02c      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a62      	ldr	r2, [pc, #392]	@ (80035d0 <HAL_DMA_Abort_IT+0x3c4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d027      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a60      	ldr	r2, [pc, #384]	@ (80035d4 <HAL_DMA_Abort_IT+0x3c8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a5f      	ldr	r2, [pc, #380]	@ (80035d8 <HAL_DMA_Abort_IT+0x3cc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a5d      	ldr	r2, [pc, #372]	@ (80035dc <HAL_DMA_Abort_IT+0x3d0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d018      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a5c      	ldr	r2, [pc, #368]	@ (80035e0 <HAL_DMA_Abort_IT+0x3d4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a5a      	ldr	r2, [pc, #360]	@ (80035e4 <HAL_DMA_Abort_IT+0x3d8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a59      	ldr	r2, [pc, #356]	@ (80035e8 <HAL_DMA_Abort_IT+0x3dc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a57      	ldr	r2, [pc, #348]	@ (80035ec <HAL_DMA_Abort_IT+0x3e0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_DMA_Abort_IT+0x290>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a56      	ldr	r2, [pc, #344]	@ (80035f0 <HAL_DMA_Abort_IT+0x3e4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d108      	bne.n	80034ae <HAL_DMA_Abort_IT+0x2a2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e007      	b.n	80034be <HAL_DMA_Abort_IT+0x2b2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a3c      	ldr	r2, [pc, #240]	@ (80035b4 <HAL_DMA_Abort_IT+0x3a8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d072      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a3a      	ldr	r2, [pc, #232]	@ (80035b8 <HAL_DMA_Abort_IT+0x3ac>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d06d      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a39      	ldr	r2, [pc, #228]	@ (80035bc <HAL_DMA_Abort_IT+0x3b0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d068      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a37      	ldr	r2, [pc, #220]	@ (80035c0 <HAL_DMA_Abort_IT+0x3b4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d063      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a36      	ldr	r2, [pc, #216]	@ (80035c4 <HAL_DMA_Abort_IT+0x3b8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d05e      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a34      	ldr	r2, [pc, #208]	@ (80035c8 <HAL_DMA_Abort_IT+0x3bc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d059      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a33      	ldr	r2, [pc, #204]	@ (80035cc <HAL_DMA_Abort_IT+0x3c0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d054      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a31      	ldr	r2, [pc, #196]	@ (80035d0 <HAL_DMA_Abort_IT+0x3c4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d04f      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a30      	ldr	r2, [pc, #192]	@ (80035d4 <HAL_DMA_Abort_IT+0x3c8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d04a      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2e      	ldr	r2, [pc, #184]	@ (80035d8 <HAL_DMA_Abort_IT+0x3cc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d045      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2d      	ldr	r2, [pc, #180]	@ (80035dc <HAL_DMA_Abort_IT+0x3d0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d040      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2b      	ldr	r2, [pc, #172]	@ (80035e0 <HAL_DMA_Abort_IT+0x3d4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d03b      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2a      	ldr	r2, [pc, #168]	@ (80035e4 <HAL_DMA_Abort_IT+0x3d8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d036      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a28      	ldr	r2, [pc, #160]	@ (80035e8 <HAL_DMA_Abort_IT+0x3dc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d031      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a27      	ldr	r2, [pc, #156]	@ (80035ec <HAL_DMA_Abort_IT+0x3e0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d02c      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a25      	ldr	r2, [pc, #148]	@ (80035f0 <HAL_DMA_Abort_IT+0x3e4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d027      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a24      	ldr	r2, [pc, #144]	@ (80035f4 <HAL_DMA_Abort_IT+0x3e8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d022      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a22      	ldr	r2, [pc, #136]	@ (80035f8 <HAL_DMA_Abort_IT+0x3ec>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01d      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a21      	ldr	r2, [pc, #132]	@ (80035fc <HAL_DMA_Abort_IT+0x3f0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d018      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1f      	ldr	r2, [pc, #124]	@ (8003600 <HAL_DMA_Abort_IT+0x3f4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1e      	ldr	r2, [pc, #120]	@ (8003604 <HAL_DMA_Abort_IT+0x3f8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1c      	ldr	r2, [pc, #112]	@ (8003608 <HAL_DMA_Abort_IT+0x3fc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1b      	ldr	r2, [pc, #108]	@ (800360c <HAL_DMA_Abort_IT+0x400>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_DMA_Abort_IT+0x3a2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	@ (8003610 <HAL_DMA_Abort_IT+0x404>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d132      	bne.n	8003614 <HAL_DMA_Abort_IT+0x408>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e031      	b.n	8003616 <HAL_DMA_Abort_IT+0x40a>
 80035b2:	bf00      	nop
 80035b4:	40020010 	.word	0x40020010
 80035b8:	40020028 	.word	0x40020028
 80035bc:	40020040 	.word	0x40020040
 80035c0:	40020058 	.word	0x40020058
 80035c4:	40020070 	.word	0x40020070
 80035c8:	40020088 	.word	0x40020088
 80035cc:	400200a0 	.word	0x400200a0
 80035d0:	400200b8 	.word	0x400200b8
 80035d4:	40020410 	.word	0x40020410
 80035d8:	40020428 	.word	0x40020428
 80035dc:	40020440 	.word	0x40020440
 80035e0:	40020458 	.word	0x40020458
 80035e4:	40020470 	.word	0x40020470
 80035e8:	40020488 	.word	0x40020488
 80035ec:	400204a0 	.word	0x400204a0
 80035f0:	400204b8 	.word	0x400204b8
 80035f4:	58025408 	.word	0x58025408
 80035f8:	5802541c 	.word	0x5802541c
 80035fc:	58025430 	.word	0x58025430
 8003600:	58025444 	.word	0x58025444
 8003604:	58025458 	.word	0x58025458
 8003608:	5802546c 	.word	0x5802546c
 800360c:	58025480 	.word	0x58025480
 8003610:	58025494 	.word	0x58025494
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d028      	beq.n	800366c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003628:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2201      	movs	r2, #1
 800363a:	409a      	lsls	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003648:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00c      	beq.n	800366c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800365c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003660:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800366a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop

08003698 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	@ 0x24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036a6:	4b89      	ldr	r3, [pc, #548]	@ (80038cc <HAL_GPIO_Init+0x234>)
 80036a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036aa:	e194      	b.n	80039d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	2101      	movs	r1, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa01 f303 	lsl.w	r3, r1, r3
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8186 	beq.w	80039d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d005      	beq.n	80036dc <HAL_GPIO_Init+0x44>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d130      	bne.n	800373e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	2203      	movs	r2, #3
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003712:	2201      	movs	r2, #1
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	f003 0201 	and.w	r2, r3, #1
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b03      	cmp	r3, #3
 8003748:	d017      	beq.n	800377a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	2203      	movs	r2, #3
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d123      	bne.n	80037ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	08da      	lsrs	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3208      	adds	r2, #8
 800378e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	220f      	movs	r2, #15
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	08da      	lsrs	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3208      	adds	r2, #8
 80037c8:	69b9      	ldr	r1, [r7, #24]
 80037ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	2203      	movs	r2, #3
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0203 	and.w	r2, r3, #3
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80e0 	beq.w	80039d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003810:	4b2f      	ldr	r3, [pc, #188]	@ (80038d0 <HAL_GPIO_Init+0x238>)
 8003812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003816:	4a2e      	ldr	r2, [pc, #184]	@ (80038d0 <HAL_GPIO_Init+0x238>)
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003820:	4b2b      	ldr	r3, [pc, #172]	@ (80038d0 <HAL_GPIO_Init+0x238>)
 8003822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800382e:	4a29      	ldr	r2, [pc, #164]	@ (80038d4 <HAL_GPIO_Init+0x23c>)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	089b      	lsrs	r3, r3, #2
 8003834:	3302      	adds	r3, #2
 8003836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	220f      	movs	r2, #15
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a20      	ldr	r2, [pc, #128]	@ (80038d8 <HAL_GPIO_Init+0x240>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d052      	beq.n	8003900 <HAL_GPIO_Init+0x268>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a1f      	ldr	r2, [pc, #124]	@ (80038dc <HAL_GPIO_Init+0x244>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d031      	beq.n	80038c6 <HAL_GPIO_Init+0x22e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1e      	ldr	r2, [pc, #120]	@ (80038e0 <HAL_GPIO_Init+0x248>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d02b      	beq.n	80038c2 <HAL_GPIO_Init+0x22a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1d      	ldr	r2, [pc, #116]	@ (80038e4 <HAL_GPIO_Init+0x24c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d025      	beq.n	80038be <HAL_GPIO_Init+0x226>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a1c      	ldr	r2, [pc, #112]	@ (80038e8 <HAL_GPIO_Init+0x250>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d01f      	beq.n	80038ba <HAL_GPIO_Init+0x222>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a1b      	ldr	r2, [pc, #108]	@ (80038ec <HAL_GPIO_Init+0x254>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d019      	beq.n	80038b6 <HAL_GPIO_Init+0x21e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a1a      	ldr	r2, [pc, #104]	@ (80038f0 <HAL_GPIO_Init+0x258>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_GPIO_Init+0x21a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a19      	ldr	r2, [pc, #100]	@ (80038f4 <HAL_GPIO_Init+0x25c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00d      	beq.n	80038ae <HAL_GPIO_Init+0x216>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a18      	ldr	r2, [pc, #96]	@ (80038f8 <HAL_GPIO_Init+0x260>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <HAL_GPIO_Init+0x212>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a17      	ldr	r2, [pc, #92]	@ (80038fc <HAL_GPIO_Init+0x264>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_GPIO_Init+0x20e>
 80038a2:	2309      	movs	r3, #9
 80038a4:	e02d      	b.n	8003902 <HAL_GPIO_Init+0x26a>
 80038a6:	230a      	movs	r3, #10
 80038a8:	e02b      	b.n	8003902 <HAL_GPIO_Init+0x26a>
 80038aa:	2308      	movs	r3, #8
 80038ac:	e029      	b.n	8003902 <HAL_GPIO_Init+0x26a>
 80038ae:	2307      	movs	r3, #7
 80038b0:	e027      	b.n	8003902 <HAL_GPIO_Init+0x26a>
 80038b2:	2306      	movs	r3, #6
 80038b4:	e025      	b.n	8003902 <HAL_GPIO_Init+0x26a>
 80038b6:	2305      	movs	r3, #5
 80038b8:	e023      	b.n	8003902 <HAL_GPIO_Init+0x26a>
 80038ba:	2304      	movs	r3, #4
 80038bc:	e021      	b.n	8003902 <HAL_GPIO_Init+0x26a>
 80038be:	2303      	movs	r3, #3
 80038c0:	e01f      	b.n	8003902 <HAL_GPIO_Init+0x26a>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e01d      	b.n	8003902 <HAL_GPIO_Init+0x26a>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e01b      	b.n	8003902 <HAL_GPIO_Init+0x26a>
 80038ca:	bf00      	nop
 80038cc:	58000080 	.word	0x58000080
 80038d0:	58024400 	.word	0x58024400
 80038d4:	58000400 	.word	0x58000400
 80038d8:	58020000 	.word	0x58020000
 80038dc:	58020400 	.word	0x58020400
 80038e0:	58020800 	.word	0x58020800
 80038e4:	58020c00 	.word	0x58020c00
 80038e8:	58021000 	.word	0x58021000
 80038ec:	58021400 	.word	0x58021400
 80038f0:	58021800 	.word	0x58021800
 80038f4:	58021c00 	.word	0x58021c00
 80038f8:	58022000 	.word	0x58022000
 80038fc:	58022400 	.word	0x58022400
 8003900:	2300      	movs	r3, #0
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	f002 0203 	and.w	r2, r2, #3
 8003908:	0092      	lsls	r2, r2, #2
 800390a:	4093      	lsls	r3, r2
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003912:	4938      	ldr	r1, [pc, #224]	@ (80039f4 <HAL_GPIO_Init+0x35c>)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	3302      	adds	r3, #2
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003946:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800394e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003974:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	3301      	adds	r3, #1
 80039d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f47f ae63 	bne.w	80036ac <HAL_GPIO_Init+0x14>
  }
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	3724      	adds	r7, #36	@ 0x24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	58000400 	.word	0x58000400

080039f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003a00:	4a08      	ldr	r2, [pc, #32]	@ (8003a24 <HAL_HSEM_FastTake+0x2c>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3320      	adds	r3, #32
 8003a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0a:	4a07      	ldr	r2, [pc, #28]	@ (8003a28 <HAL_HSEM_FastTake+0x30>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e000      	b.n	8003a16 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	58026400 	.word	0x58026400
 8003a28:	80000300 	.word	0x80000300

08003a2c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003a36:	4906      	ldr	r1, [pc, #24]	@ (8003a50 <HAL_HSEM_Release+0x24>)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	58026400 	.word	0x58026400

08003a54 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003a5c:	4b29      	ldr	r3, [pc, #164]	@ (8003b04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d00a      	beq.n	8003a7e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a68:	4b26      	ldr	r3, [pc, #152]	@ (8003b04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d001      	beq.n	8003a7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e040      	b.n	8003afc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e03e      	b.n	8003afc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a7e:	4b21      	ldr	r3, [pc, #132]	@ (8003b04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003a86:	491f      	ldr	r1, [pc, #124]	@ (8003b04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a8e:	f7fd fd3b 	bl	8001508 <HAL_GetTick>
 8003a92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a94:	e009      	b.n	8003aaa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a96:	f7fd fd37 	bl	8001508 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003aa4:	d901      	bls.n	8003aaa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e028      	b.n	8003afc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003aaa:	4b16      	ldr	r3, [pc, #88]	@ (8003b04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab6:	d1ee      	bne.n	8003a96 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b1e      	cmp	r3, #30
 8003abc:	d008      	beq.n	8003ad0 <HAL_PWREx_ConfigSupply+0x7c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ac2:	d005      	beq.n	8003ad0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b1d      	cmp	r3, #29
 8003ac8:	d002      	beq.n	8003ad0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b2d      	cmp	r3, #45	@ 0x2d
 8003ace:	d114      	bne.n	8003afa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003ad0:	f7fd fd1a 	bl	8001508 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ad6:	e009      	b.n	8003aec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ad8:	f7fd fd16 	bl	8001508 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ae6:	d901      	bls.n	8003aec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e007      	b.n	8003afc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003aec:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_PWREx_ConfigSupply+0xb0>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af8:	d1ee      	bne.n	8003ad8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	58024800 	.word	0x58024800

08003b08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08c      	sub	sp, #48	@ 0x30
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f000 bc48 	b.w	80043ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8088 	beq.w	8003c3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2a:	4b99      	ldr	r3, [pc, #612]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b34:	4b96      	ldr	r3, [pc, #600]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b38:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d007      	beq.n	8003b50 <HAL_RCC_OscConfig+0x48>
 8003b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b42:	2b18      	cmp	r3, #24
 8003b44:	d111      	bne.n	8003b6a <HAL_RCC_OscConfig+0x62>
 8003b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d10c      	bne.n	8003b6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	4b8f      	ldr	r3, [pc, #572]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d06d      	beq.n	8003c38 <HAL_RCC_OscConfig+0x130>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d169      	bne.n	8003c38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f000 bc21 	b.w	80043ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x7a>
 8003b74:	4b86      	ldr	r3, [pc, #536]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a85      	ldr	r2, [pc, #532]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e02e      	b.n	8003be0 <HAL_RCC_OscConfig+0xd8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x9c>
 8003b8a:	4b81      	ldr	r3, [pc, #516]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a80      	ldr	r2, [pc, #512]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b7e      	ldr	r3, [pc, #504]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a7d      	ldr	r2, [pc, #500]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003b9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e01d      	b.n	8003be0 <HAL_RCC_OscConfig+0xd8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xc0>
 8003bae:	4b78      	ldr	r3, [pc, #480]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a77      	ldr	r2, [pc, #476]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b75      	ldr	r3, [pc, #468]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a74      	ldr	r2, [pc, #464]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0xd8>
 8003bc8:	4b71      	ldr	r3, [pc, #452]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a70      	ldr	r2, [pc, #448]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b6e      	ldr	r3, [pc, #440]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a6d      	ldr	r2, [pc, #436]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd fc8e 	bl	8001508 <HAL_GetTick>
 8003bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fd fc8a 	bl	8001508 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	@ 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e3d4      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c02:	4b63      	ldr	r3, [pc, #396]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xe8>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fc7a 	bl	8001508 <HAL_GetTick>
 8003c14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fd fc76 	bl	8001508 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	@ 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e3c0      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c2a:	4b59      	ldr	r3, [pc, #356]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x110>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80ca 	beq.w	8003ddc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c48:	4b51      	ldr	r3, [pc, #324]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c52:	4b4f      	ldr	r3, [pc, #316]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_RCC_OscConfig+0x166>
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	2b18      	cmp	r3, #24
 8003c62:	d156      	bne.n	8003d12 <HAL_RCC_OscConfig+0x20a>
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d151      	bne.n	8003d12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c6e:	4b48      	ldr	r3, [pc, #288]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_RCC_OscConfig+0x17e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e392      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c86:	4b42      	ldr	r3, [pc, #264]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 0219 	bic.w	r2, r3, #25
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	493f      	ldr	r1, [pc, #252]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fd fc36 	bl	8001508 <HAL_GetTick>
 8003c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca0:	f7fd fc32 	bl	8001508 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e37c      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cb2:	4b37      	ldr	r3, [pc, #220]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbe:	f7fd fc2f 	bl	8001520 <HAL_GetREVID>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d817      	bhi.n	8003cfc <HAL_RCC_OscConfig+0x1f4>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b40      	cmp	r3, #64	@ 0x40
 8003cd2:	d108      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x1de>
 8003cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003cdc:	4a2c      	ldr	r2, [pc, #176]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce4:	e07a      	b.n	8003ddc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	031b      	lsls	r3, r3, #12
 8003cf4:	4926      	ldr	r1, [pc, #152]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cfa:	e06f      	b.n	8003ddc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfc:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	4921      	ldr	r1, [pc, #132]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d10:	e064      	b.n	8003ddc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d047      	beq.n	8003daa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 0219 	bic.w	r2, r3, #25
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	491a      	ldr	r1, [pc, #104]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fbec 	bl	8001508 <HAL_GetTick>
 8003d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d34:	f7fd fbe8 	bl	8001508 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e332      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d46:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d52:	f7fd fbe5 	bl	8001520 <HAL_GetREVID>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d819      	bhi.n	8003d94 <HAL_RCC_OscConfig+0x28c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b40      	cmp	r3, #64	@ 0x40
 8003d66:	d108      	bne.n	8003d7a <HAL_RCC_OscConfig+0x272>
 8003d68:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003d70:	4a07      	ldr	r2, [pc, #28]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d76:	6053      	str	r3, [r2, #4]
 8003d78:	e030      	b.n	8003ddc <HAL_RCC_OscConfig+0x2d4>
 8003d7a:	4b05      	ldr	r3, [pc, #20]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	031b      	lsls	r3, r3, #12
 8003d88:	4901      	ldr	r1, [pc, #4]	@ (8003d90 <HAL_RCC_OscConfig+0x288>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	604b      	str	r3, [r1, #4]
 8003d8e:	e025      	b.n	8003ddc <HAL_RCC_OscConfig+0x2d4>
 8003d90:	58024400 	.word	0x58024400
 8003d94:	4b9a      	ldr	r3, [pc, #616]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	4997      	ldr	r1, [pc, #604]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
 8003da8:	e018      	b.n	8003ddc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003daa:	4b95      	ldr	r3, [pc, #596]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a94      	ldr	r2, [pc, #592]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fd fba7 	bl	8001508 <HAL_GetTick>
 8003dba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dbe:	f7fd fba3 	bl	8001508 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e2ed      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dd0:	4b8b      	ldr	r3, [pc, #556]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80a9 	beq.w	8003f3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dea:	4b85      	ldr	r3, [pc, #532]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003df2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003df4:	4b82      	ldr	r3, [pc, #520]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d007      	beq.n	8003e10 <HAL_RCC_OscConfig+0x308>
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b18      	cmp	r3, #24
 8003e04:	d13a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x374>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d135      	bne.n	8003e7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e10:	4b7b      	ldr	r3, [pc, #492]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_RCC_OscConfig+0x320>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	2b80      	cmp	r3, #128	@ 0x80
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e2c1      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e28:	f7fd fb7a 	bl	8001520 <HAL_GetREVID>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d817      	bhi.n	8003e66 <HAL_RCC_OscConfig+0x35e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d108      	bne.n	8003e50 <HAL_RCC_OscConfig+0x348>
 8003e3e:	4b70      	ldr	r3, [pc, #448]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e46:	4a6e      	ldr	r2, [pc, #440]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003e48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e4e:	e075      	b.n	8003f3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e50:	4b6b      	ldr	r3, [pc, #428]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	069b      	lsls	r3, r3, #26
 8003e5e:	4968      	ldr	r1, [pc, #416]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e64:	e06a      	b.n	8003f3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e66:	4b66      	ldr	r3, [pc, #408]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	4962      	ldr	r1, [pc, #392]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e7a:	e05f      	b.n	8003f3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d042      	beq.n	8003f0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e84:	4b5e      	ldr	r3, [pc, #376]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a5d      	ldr	r2, [pc, #372]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fd fb3a 	bl	8001508 <HAL_GetTick>
 8003e94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e98:	f7fd fb36 	bl	8001508 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e280      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eaa:	4b55      	ldr	r3, [pc, #340]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eb6:	f7fd fb33 	bl	8001520 <HAL_GetREVID>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d817      	bhi.n	8003ef4 <HAL_RCC_OscConfig+0x3ec>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d108      	bne.n	8003ede <HAL_RCC_OscConfig+0x3d6>
 8003ecc:	4b4c      	ldr	r3, [pc, #304]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003ed6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003eda:	6053      	str	r3, [r2, #4]
 8003edc:	e02e      	b.n	8003f3c <HAL_RCC_OscConfig+0x434>
 8003ede:	4b48      	ldr	r3, [pc, #288]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	069b      	lsls	r3, r3, #26
 8003eec:	4944      	ldr	r1, [pc, #272]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	604b      	str	r3, [r1, #4]
 8003ef2:	e023      	b.n	8003f3c <HAL_RCC_OscConfig+0x434>
 8003ef4:	4b42      	ldr	r3, [pc, #264]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	493f      	ldr	r1, [pc, #252]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60cb      	str	r3, [r1, #12]
 8003f08:	e018      	b.n	8003f3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3c      	ldr	r2, [pc, #240]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003f10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fd faf7 	bl	8001508 <HAL_GetTick>
 8003f1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f1e:	f7fd faf3 	bl	8001508 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e23d      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f30:	4b33      	ldr	r3, [pc, #204]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d036      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d019      	beq.n	8003f84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f50:	4b2b      	ldr	r3, [pc, #172]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f54:	4a2a      	ldr	r2, [pc, #168]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fd fad4 	bl	8001508 <HAL_GetTick>
 8003f60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fd fad0 	bl	8001508 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e21a      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f76:	4b22      	ldr	r3, [pc, #136]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x45c>
 8003f82:	e018      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f84:	4b1e      	ldr	r3, [pc, #120]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f88:	4a1d      	ldr	r2, [pc, #116]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f90:	f7fd faba 	bl	8001508 <HAL_GetTick>
 8003f94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f98:	f7fd fab6 	bl	8001508 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e200      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003faa:	4b15      	ldr	r3, [pc, #84]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d039      	beq.n	8004036 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01c      	beq.n	8004004 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fca:	4b0d      	ldr	r3, [pc, #52]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a0c      	ldr	r2, [pc, #48]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003fd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd fa97 	bl	8001508 <HAL_GetTick>
 8003fda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fde:	f7fd fa93 	bl	8001508 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e1dd      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ff0:	4b03      	ldr	r3, [pc, #12]	@ (8004000 <HAL_RCC_OscConfig+0x4f8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x4d6>
 8003ffc:	e01b      	b.n	8004036 <HAL_RCC_OscConfig+0x52e>
 8003ffe:	bf00      	nop
 8004000:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004004:	4b9b      	ldr	r3, [pc, #620]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a9a      	ldr	r2, [pc, #616]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800400a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800400e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004010:	f7fd fa7a 	bl	8001508 <HAL_GetTick>
 8004014:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004018:	f7fd fa76 	bl	8001508 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e1c0      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800402a:	4b92      	ldr	r3, [pc, #584]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8081 	beq.w	8004146 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004044:	4b8c      	ldr	r3, [pc, #560]	@ (8004278 <HAL_RCC_OscConfig+0x770>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a8b      	ldr	r2, [pc, #556]	@ (8004278 <HAL_RCC_OscConfig+0x770>)
 800404a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004050:	f7fd fa5a 	bl	8001508 <HAL_GetTick>
 8004054:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004058:	f7fd fa56 	bl	8001508 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	@ 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e1a0      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800406a:	4b83      	ldr	r3, [pc, #524]	@ (8004278 <HAL_RCC_OscConfig+0x770>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d106      	bne.n	800408c <HAL_RCC_OscConfig+0x584>
 800407e:	4b7d      	ldr	r3, [pc, #500]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004082:	4a7c      	ldr	r2, [pc, #496]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6713      	str	r3, [r2, #112]	@ 0x70
 800408a:	e02d      	b.n	80040e8 <HAL_RCC_OscConfig+0x5e0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10c      	bne.n	80040ae <HAL_RCC_OscConfig+0x5a6>
 8004094:	4b77      	ldr	r3, [pc, #476]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	4a76      	ldr	r2, [pc, #472]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a0:	4b74      	ldr	r3, [pc, #464]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a4:	4a73      	ldr	r2, [pc, #460]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80040a6:	f023 0304 	bic.w	r3, r3, #4
 80040aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ac:	e01c      	b.n	80040e8 <HAL_RCC_OscConfig+0x5e0>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x5c8>
 80040b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80040bc:	f043 0304 	orr.w	r3, r3, #4
 80040c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c2:	4b6c      	ldr	r3, [pc, #432]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c6:	4a6b      	ldr	r2, [pc, #428]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ce:	e00b      	b.n	80040e8 <HAL_RCC_OscConfig+0x5e0>
 80040d0:	4b68      	ldr	r3, [pc, #416]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d4:	4a67      	ldr	r2, [pc, #412]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	6713      	str	r3, [r2, #112]	@ 0x70
 80040dc:	4b65      	ldr	r3, [pc, #404]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e0:	4a64      	ldr	r2, [pc, #400]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80040e2:	f023 0304 	bic.w	r3, r3, #4
 80040e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d015      	beq.n	800411c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fd fa0a 	bl	8001508 <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040f6:	e00a      	b.n	800410e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f8:	f7fd fa06 	bl	8001508 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e14e      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800410e:	4b59      	ldr	r3, [pc, #356]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0ee      	beq.n	80040f8 <HAL_RCC_OscConfig+0x5f0>
 800411a:	e014      	b.n	8004146 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411c:	f7fd f9f4 	bl	8001508 <HAL_GetTick>
 8004120:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004122:	e00a      	b.n	800413a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004124:	f7fd f9f0 	bl	8001508 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e138      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800413a:	4b4e      	ldr	r3, [pc, #312]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1ee      	bne.n	8004124 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 812d 	beq.w	80043aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004150:	4b48      	ldr	r3, [pc, #288]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004158:	2b18      	cmp	r3, #24
 800415a:	f000 80bd 	beq.w	80042d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	2b02      	cmp	r3, #2
 8004164:	f040 809e 	bne.w	80042a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004168:	4b42      	ldr	r3, [pc, #264]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a41      	ldr	r2, [pc, #260]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800416e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd f9c8 	bl	8001508 <HAL_GetTick>
 8004178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417c:	f7fd f9c4 	bl	8001508 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e10e      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800418e:	4b39      	ldr	r3, [pc, #228]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800419a:	4b36      	ldr	r3, [pc, #216]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800419c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800419e:	4b37      	ldr	r3, [pc, #220]	@ (800427c <HAL_RCC_OscConfig+0x774>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80041aa:	0112      	lsls	r2, r2, #4
 80041ac:	430a      	orrs	r2, r1
 80041ae:	4931      	ldr	r1, [pc, #196]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	3b01      	subs	r3, #1
 80041ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c2:	3b01      	subs	r3, #1
 80041c4:	025b      	lsls	r3, r3, #9
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ce:	3b01      	subs	r3, #1
 80041d0:	041b      	lsls	r3, r3, #16
 80041d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	3b01      	subs	r3, #1
 80041de:	061b      	lsls	r3, r3, #24
 80041e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041e4:	4923      	ldr	r1, [pc, #140]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80041ea:	4b22      	ldr	r3, [pc, #136]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	4a21      	ldr	r2, [pc, #132]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 80041f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041fa:	4b21      	ldr	r3, [pc, #132]	@ (8004280 <HAL_RCC_OscConfig+0x778>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004202:	00d2      	lsls	r2, r2, #3
 8004204:	491b      	ldr	r1, [pc, #108]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800420a:	4b1a      	ldr	r3, [pc, #104]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	f023 020c 	bic.w	r2, r3, #12
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	4917      	ldr	r1, [pc, #92]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800421c:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	f023 0202 	bic.w	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004228:	4912      	ldr	r1, [pc, #72]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800422e:	4b11      	ldr	r3, [pc, #68]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	4a10      	ldr	r2, [pc, #64]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004238:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423a:	4b0e      	ldr	r3, [pc, #56]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800423c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423e:	4a0d      	ldr	r2, [pc, #52]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004244:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004246:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	4a0a      	ldr	r2, [pc, #40]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 800424c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004250:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004252:	4b08      	ldr	r3, [pc, #32]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	4a07      	ldr	r2, [pc, #28]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800425e:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a04      	ldr	r2, [pc, #16]	@ (8004274 <HAL_RCC_OscConfig+0x76c>)
 8004264:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7fd f94d 	bl	8001508 <HAL_GetTick>
 800426e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004270:	e011      	b.n	8004296 <HAL_RCC_OscConfig+0x78e>
 8004272:	bf00      	nop
 8004274:	58024400 	.word	0x58024400
 8004278:	58024800 	.word	0x58024800
 800427c:	fffffc0c 	.word	0xfffffc0c
 8004280:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004284:	f7fd f940 	bl	8001508 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e08a      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004296:	4b47      	ldr	r3, [pc, #284]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x77c>
 80042a2:	e082      	b.n	80043aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a4:	4b43      	ldr	r3, [pc, #268]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a42      	ldr	r2, [pc, #264]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 80042aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fd f92a 	bl	8001508 <HAL_GetTick>
 80042b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b8:	f7fd f926 	bl	8001508 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e070      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042ca:	4b3a      	ldr	r3, [pc, #232]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x7b0>
 80042d6:	e068      	b.n	80043aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80042d8:	4b36      	ldr	r3, [pc, #216]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 80042da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80042de:	4b35      	ldr	r3, [pc, #212]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d031      	beq.n	8004350 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f003 0203 	and.w	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d12a      	bne.n	8004350 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d122      	bne.n	8004350 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004314:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d11a      	bne.n	8004350 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	0a5b      	lsrs	r3, r3, #9
 800431e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004326:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d111      	bne.n	8004350 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	0c1b      	lsrs	r3, r3, #16
 8004330:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004338:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d108      	bne.n	8004350 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	0e1b      	lsrs	r3, r3, #24
 8004342:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e02b      	b.n	80043ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004354:	4b17      	ldr	r3, [pc, #92]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 8004356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004358:	08db      	lsrs	r3, r3, #3
 800435a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800435e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	429a      	cmp	r2, r3
 8004368:	d01f      	beq.n	80043aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800436a:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 800436c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436e:	4a11      	ldr	r2, [pc, #68]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004376:	f7fd f8c7 	bl	8001508 <HAL_GetTick>
 800437a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800437c:	bf00      	nop
 800437e:	f7fd f8c3 	bl	8001508 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	4293      	cmp	r3, r2
 8004388:	d0f9      	beq.n	800437e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800438a:	4b0a      	ldr	r3, [pc, #40]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 800438c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800438e:	4b0a      	ldr	r3, [pc, #40]	@ (80043b8 <HAL_RCC_OscConfig+0x8b0>)
 8004390:	4013      	ands	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004396:	00d2      	lsls	r2, r2, #3
 8004398:	4906      	ldr	r1, [pc, #24]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 800439a:	4313      	orrs	r3, r2
 800439c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800439e:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 80043a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a2:	4a04      	ldr	r2, [pc, #16]	@ (80043b4 <HAL_RCC_OscConfig+0x8ac>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3730      	adds	r7, #48	@ 0x30
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	58024400 	.word	0x58024400
 80043b8:	ffff0007 	.word	0xffff0007

080043bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e19c      	b.n	800470a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043d0:	4b8a      	ldr	r3, [pc, #552]	@ (80045fc <HAL_RCC_ClockConfig+0x240>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d910      	bls.n	8004400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b87      	ldr	r3, [pc, #540]	@ (80045fc <HAL_RCC_ClockConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 020f 	bic.w	r2, r3, #15
 80043e6:	4985      	ldr	r1, [pc, #532]	@ (80045fc <HAL_RCC_ClockConfig+0x240>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b83      	ldr	r3, [pc, #524]	@ (80045fc <HAL_RCC_ClockConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e184      	b.n	800470a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d010      	beq.n	800442e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	4b7b      	ldr	r3, [pc, #492]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004418:	429a      	cmp	r2, r3
 800441a:	d908      	bls.n	800442e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800441c:	4b78      	ldr	r3, [pc, #480]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	4975      	ldr	r1, [pc, #468]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800442a:	4313      	orrs	r3, r2
 800442c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d010      	beq.n	800445c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	4b70      	ldr	r3, [pc, #448]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004446:	429a      	cmp	r2, r3
 8004448:	d908      	bls.n	800445c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800444a:	4b6d      	ldr	r3, [pc, #436]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	496a      	ldr	r1, [pc, #424]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 8004458:	4313      	orrs	r3, r2
 800445a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	d010      	beq.n	800448a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699a      	ldr	r2, [r3, #24]
 800446c:	4b64      	ldr	r3, [pc, #400]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004474:	429a      	cmp	r2, r3
 8004476:	d908      	bls.n	800448a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004478:	4b61      	ldr	r3, [pc, #388]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	495e      	ldr	r1, [pc, #376]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 8004486:	4313      	orrs	r3, r2
 8004488:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d010      	beq.n	80044b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69da      	ldr	r2, [r3, #28]
 800449a:	4b59      	ldr	r3, [pc, #356]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d908      	bls.n	80044b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80044a6:	4b56      	ldr	r3, [pc, #344]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	4953      	ldr	r1, [pc, #332]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d010      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d908      	bls.n	80044e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f023 020f 	bic.w	r2, r3, #15
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4947      	ldr	r1, [pc, #284]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d055      	beq.n	800459e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80044f2:	4b43      	ldr	r3, [pc, #268]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	4940      	ldr	r1, [pc, #256]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 8004500:	4313      	orrs	r3, r2
 8004502:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d107      	bne.n	800451c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800450c:	4b3c      	ldr	r3, [pc, #240]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d121      	bne.n	800455c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0f6      	b.n	800470a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d107      	bne.n	8004534 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004524:	4b36      	ldr	r3, [pc, #216]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d115      	bne.n	800455c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0ea      	b.n	800470a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800453c:	4b30      	ldr	r3, [pc, #192]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0de      	b.n	800470a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800454c:	4b2c      	ldr	r3, [pc, #176]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0d6      	b.n	800470a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800455c:	4b28      	ldr	r3, [pc, #160]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f023 0207 	bic.w	r2, r3, #7
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4925      	ldr	r1, [pc, #148]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800456a:	4313      	orrs	r3, r2
 800456c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456e:	f7fc ffcb 	bl	8001508 <HAL_GetTick>
 8004572:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004574:	e00a      	b.n	800458c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004576:	f7fc ffc7 	bl	8001508 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e0be      	b.n	800470a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458c:	4b1c      	ldr	r3, [pc, #112]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	429a      	cmp	r2, r3
 800459c:	d1eb      	bne.n	8004576 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d010      	beq.n	80045cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d208      	bcs.n	80045cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ba:	4b11      	ldr	r3, [pc, #68]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f023 020f 	bic.w	r2, r3, #15
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	490e      	ldr	r1, [pc, #56]	@ (8004600 <HAL_RCC_ClockConfig+0x244>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045cc:	4b0b      	ldr	r3, [pc, #44]	@ (80045fc <HAL_RCC_ClockConfig+0x240>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d214      	bcs.n	8004604 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b08      	ldr	r3, [pc, #32]	@ (80045fc <HAL_RCC_ClockConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 020f 	bic.w	r2, r3, #15
 80045e2:	4906      	ldr	r1, [pc, #24]	@ (80045fc <HAL_RCC_ClockConfig+0x240>)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b04      	ldr	r3, [pc, #16]	@ (80045fc <HAL_RCC_ClockConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d005      	beq.n	8004604 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e086      	b.n	800470a <HAL_RCC_ClockConfig+0x34e>
 80045fc:	52002000 	.word	0x52002000
 8004600:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d010      	beq.n	8004632 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	4b3f      	ldr	r3, [pc, #252]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800461c:	429a      	cmp	r2, r3
 800461e:	d208      	bcs.n	8004632 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004620:	4b3c      	ldr	r3, [pc, #240]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	4939      	ldr	r1, [pc, #228]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 800462e:	4313      	orrs	r3, r2
 8004630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d010      	beq.n	8004660 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695a      	ldr	r2, [r3, #20]
 8004642:	4b34      	ldr	r3, [pc, #208]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800464a:	429a      	cmp	r2, r3
 800464c:	d208      	bcs.n	8004660 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800464e:	4b31      	ldr	r3, [pc, #196]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	492e      	ldr	r1, [pc, #184]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 800465c:	4313      	orrs	r3, r2
 800465e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b00      	cmp	r3, #0
 800466a:	d010      	beq.n	800468e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	4b28      	ldr	r3, [pc, #160]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004678:	429a      	cmp	r2, r3
 800467a:	d208      	bcs.n	800468e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800467c:	4b25      	ldr	r3, [pc, #148]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	4922      	ldr	r1, [pc, #136]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 800468a:	4313      	orrs	r3, r2
 800468c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d010      	beq.n	80046bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	4b1d      	ldr	r3, [pc, #116]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d208      	bcs.n	80046bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80046aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4917      	ldr	r1, [pc, #92]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046bc:	f000 f834 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4b14      	ldr	r3, [pc, #80]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	0a1b      	lsrs	r3, r3, #8
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	4912      	ldr	r1, [pc, #72]	@ (8004718 <HAL_RCC_ClockConfig+0x35c>)
 80046ce:	5ccb      	ldrb	r3, [r1, r3]
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
 80046d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046da:	4b0e      	ldr	r3, [pc, #56]	@ (8004714 <HAL_RCC_ClockConfig+0x358>)
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004718 <HAL_RCC_ClockConfig+0x35c>)
 80046e4:	5cd3      	ldrb	r3, [r2, r3]
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	fa22 f303 	lsr.w	r3, r2, r3
 80046f0:	4a0a      	ldr	r2, [pc, #40]	@ (800471c <HAL_RCC_ClockConfig+0x360>)
 80046f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004720 <HAL_RCC_ClockConfig+0x364>)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80046fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004724 <HAL_RCC_ClockConfig+0x368>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fc fc94 	bl	800102c <HAL_InitTick>
 8004704:	4603      	mov	r3, r0
 8004706:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	58024400 	.word	0x58024400
 8004718:	0800d974 	.word	0x0800d974
 800471c:	24000004 	.word	0x24000004
 8004720:	24000000 	.word	0x24000000
 8004724:	24000008 	.word	0x24000008

08004728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	b089      	sub	sp, #36	@ 0x24
 800472c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800472e:	4bb3      	ldr	r3, [pc, #716]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004736:	2b18      	cmp	r3, #24
 8004738:	f200 8155 	bhi.w	80049e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800473c:	a201      	add	r2, pc, #4	@ (adr r2, 8004744 <HAL_RCC_GetSysClockFreq+0x1c>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	080047a9 	.word	0x080047a9
 8004748:	080049e7 	.word	0x080049e7
 800474c:	080049e7 	.word	0x080049e7
 8004750:	080049e7 	.word	0x080049e7
 8004754:	080049e7 	.word	0x080049e7
 8004758:	080049e7 	.word	0x080049e7
 800475c:	080049e7 	.word	0x080049e7
 8004760:	080049e7 	.word	0x080049e7
 8004764:	080047cf 	.word	0x080047cf
 8004768:	080049e7 	.word	0x080049e7
 800476c:	080049e7 	.word	0x080049e7
 8004770:	080049e7 	.word	0x080049e7
 8004774:	080049e7 	.word	0x080049e7
 8004778:	080049e7 	.word	0x080049e7
 800477c:	080049e7 	.word	0x080049e7
 8004780:	080049e7 	.word	0x080049e7
 8004784:	080047d5 	.word	0x080047d5
 8004788:	080049e7 	.word	0x080049e7
 800478c:	080049e7 	.word	0x080049e7
 8004790:	080049e7 	.word	0x080049e7
 8004794:	080049e7 	.word	0x080049e7
 8004798:	080049e7 	.word	0x080049e7
 800479c:	080049e7 	.word	0x080049e7
 80047a0:	080049e7 	.word	0x080049e7
 80047a4:	080047db 	.word	0x080047db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a8:	4b94      	ldr	r3, [pc, #592]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047b4:	4b91      	ldr	r3, [pc, #580]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	08db      	lsrs	r3, r3, #3
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	4a90      	ldr	r2, [pc, #576]	@ (8004a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
 80047c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80047c6:	e111      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80047c8:	4b8d      	ldr	r3, [pc, #564]	@ (8004a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047ca:	61bb      	str	r3, [r7, #24]
      break;
 80047cc:	e10e      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80047ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047d0:	61bb      	str	r3, [r7, #24]
      break;
 80047d2:	e10b      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80047d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80047d6:	61bb      	str	r3, [r7, #24]
      break;
 80047d8:	e108      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047da:	4b88      	ldr	r3, [pc, #544]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80047e4:	4b85      	ldr	r3, [pc, #532]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047f0:	4b82      	ldr	r3, [pc, #520]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047fa:	4b80      	ldr	r3, [pc, #512]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fe:	08db      	lsrs	r3, r3, #3
 8004800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80e1 	beq.w	80049e0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b02      	cmp	r3, #2
 8004822:	f000 8083 	beq.w	800492c <HAL_RCC_GetSysClockFreq+0x204>
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b02      	cmp	r3, #2
 800482a:	f200 80a1 	bhi.w	8004970 <HAL_RCC_GetSysClockFreq+0x248>
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0x114>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d056      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800483a:	e099      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800483c:	4b6f      	ldr	r3, [pc, #444]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d02d      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004848:	4b6c      	ldr	r3, [pc, #432]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	08db      	lsrs	r3, r3, #3
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	4a6b      	ldr	r2, [pc, #428]	@ (8004a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b62      	ldr	r3, [pc, #392]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a02 	vldr	s12, [r7, #8]
 8004886:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80048a2:	e087      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004a10 <HAL_RCC_GetSysClockFreq+0x2e8>
 80048b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b6:	4b51      	ldr	r3, [pc, #324]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048e6:	e065      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004a14 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fa:	4b40      	ldr	r3, [pc, #256]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490a:	ed97 6a02 	vldr	s12, [r7, #8]
 800490e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004926:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800492a:	e043      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004936:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004a18 <HAL_RCC_GetSysClockFreq+0x2f0>
 800493a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493e:	4b2f      	ldr	r3, [pc, #188]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004952:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800496e:	e021      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a14 <HAL_RCC_GetSysClockFreq+0x2ec>
 800497e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004982:	4b1e      	ldr	r3, [pc, #120]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004992:	ed97 6a02 	vldr	s12, [r7, #8]
 8004996:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800499a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80049b4:	4b11      	ldr	r3, [pc, #68]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b8:	0a5b      	lsrs	r3, r3, #9
 80049ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049be:	3301      	adds	r3, #1
 80049c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d8:	ee17 3a90 	vmov	r3, s15
 80049dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80049de:	e005      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61bb      	str	r3, [r7, #24]
      break;
 80049e4:	e002      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80049e6:	4b07      	ldr	r3, [pc, #28]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049e8:	61bb      	str	r3, [r7, #24]
      break;
 80049ea:	bf00      	nop
  }

  return sysclockfreq;
 80049ec:	69bb      	ldr	r3, [r7, #24]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3724      	adds	r7, #36	@ 0x24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	58024400 	.word	0x58024400
 8004a00:	03d09000 	.word	0x03d09000
 8004a04:	003d0900 	.word	0x003d0900
 8004a08:	017d7840 	.word	0x017d7840
 8004a0c:	46000000 	.word	0x46000000
 8004a10:	4c742400 	.word	0x4c742400
 8004a14:	4a742400 	.word	0x4a742400
 8004a18:	4bbebc20 	.word	0x4bbebc20

08004a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a22:	f7ff fe81 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4b10      	ldr	r3, [pc, #64]	@ (8004a6c <HAL_RCC_GetHCLKFreq+0x50>)
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	490f      	ldr	r1, [pc, #60]	@ (8004a70 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a34:	5ccb      	ldrb	r3, [r1, r3]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a40:	4b0a      	ldr	r3, [pc, #40]	@ (8004a6c <HAL_RCC_GetHCLKFreq+0x50>)
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	4a09      	ldr	r2, [pc, #36]	@ (8004a70 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a4a:	5cd3      	ldrb	r3, [r2, r3]
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	fa22 f303 	lsr.w	r3, r2, r3
 8004a56:	4a07      	ldr	r2, [pc, #28]	@ (8004a74 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a5a:	4a07      	ldr	r2, [pc, #28]	@ (8004a78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a60:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	58024400 	.word	0x58024400
 8004a70:	0800d974 	.word	0x0800d974
 8004a74:	24000004 	.word	0x24000004
 8004a78:	24000000 	.word	0x24000000

08004a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004a80:	f7ff ffcc 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	091b      	lsrs	r3, r3, #4
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	4904      	ldr	r1, [pc, #16]	@ (8004aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a92:	5ccb      	ldrb	r3, [r1, r3]
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	0800d974 	.word	0x0800d974

08004aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004aac:	f7ff ffb6 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	0a1b      	lsrs	r3, r3, #8
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4904      	ldr	r1, [pc, #16]	@ (8004ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	58024400 	.word	0x58024400
 8004ad0:	0800d974 	.word	0x0800d974

08004ad4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	223f      	movs	r2, #63	@ 0x3f
 8004ae2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b50 <HAL_RCC_GetClockConfig+0x7c>)
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f003 0207 	and.w	r2, r3, #7
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004af0:	4b17      	ldr	r3, [pc, #92]	@ (8004b50 <HAL_RCC_GetClockConfig+0x7c>)
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004afc:	4b14      	ldr	r3, [pc, #80]	@ (8004b50 <HAL_RCC_GetClockConfig+0x7c>)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f003 020f 	and.w	r2, r3, #15
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004b08:	4b11      	ldr	r3, [pc, #68]	@ (8004b50 <HAL_RCC_GetClockConfig+0x7c>)
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004b14:	4b0e      	ldr	r3, [pc, #56]	@ (8004b50 <HAL_RCC_GetClockConfig+0x7c>)
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004b20:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <HAL_RCC_GetClockConfig+0x7c>)
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004b2c:	4b08      	ldr	r3, [pc, #32]	@ (8004b50 <HAL_RCC_GetClockConfig+0x7c>)
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b38:	4b06      	ldr	r3, [pc, #24]	@ (8004b54 <HAL_RCC_GetClockConfig+0x80>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	601a      	str	r2, [r3, #0]
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	58024400 	.word	0x58024400
 8004b54:	52002000 	.word	0x52002000

08004b58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b5c:	b0ca      	sub	sp, #296	@ 0x128
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004b7c:	2500      	movs	r5, #0
 8004b7e:	ea54 0305 	orrs.w	r3, r4, r5
 8004b82:	d049      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b8e:	d02f      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004b90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b94:	d828      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b9a:	d01a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ba0:	d822      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004baa:	d007      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bac:	e01c      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bae:	4bb8      	ldr	r3, [pc, #736]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb2:	4ab7      	ldr	r2, [pc, #732]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bba:	e01a      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	2102      	movs	r1, #2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f002 fb61 	bl	800728c <RCCEx_PLL2_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bd0:	e00f      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd6:	3328      	adds	r3, #40	@ 0x28
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f002 fc08 	bl	80073f0 <RCCEx_PLL3_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004be6:	e004      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bee:	e000      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004bfa:	4ba5      	ldr	r3, [pc, #660]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bfe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c08:	4aa1      	ldr	r2, [pc, #644]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c0e:	e003      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004c24:	f04f 0900 	mov.w	r9, #0
 8004c28:	ea58 0309 	orrs.w	r3, r8, r9
 8004c2c:	d047      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d82a      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004c38:	a201      	add	r2, pc, #4	@ (adr r2, 8004c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c55 	.word	0x08004c55
 8004c44:	08004c63 	.word	0x08004c63
 8004c48:	08004c79 	.word	0x08004c79
 8004c4c:	08004c97 	.word	0x08004c97
 8004c50:	08004c97 	.word	0x08004c97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c54:	4b8e      	ldr	r3, [pc, #568]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	4a8d      	ldr	r2, [pc, #564]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c60:	e01a      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c66:	3308      	adds	r3, #8
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f002 fb0e 	bl	800728c <RCCEx_PLL2_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c76:	e00f      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7c:	3328      	adds	r3, #40	@ 0x28
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f002 fbb5 	bl	80073f0 <RCCEx_PLL3_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c8c:	e004      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c94:	e000      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca4:	f023 0107 	bic.w	r1, r3, #7
 8004ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	4a78      	ldr	r2, [pc, #480]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cb4:	e003      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004cca:	f04f 0b00 	mov.w	fp, #0
 8004cce:	ea5a 030b 	orrs.w	r3, sl, fp
 8004cd2:	d04c      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cde:	d030      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ce4:	d829      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ce6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ce8:	d02d      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004cea:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cec:	d825      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004cee:	2b80      	cmp	r3, #128	@ 0x80
 8004cf0:	d018      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004cf2:	2b80      	cmp	r3, #128	@ 0x80
 8004cf4:	d821      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004cfa:	2b40      	cmp	r3, #64	@ 0x40
 8004cfc:	d007      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004cfe:	e01c      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d00:	4b63      	ldr	r3, [pc, #396]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d04:	4a62      	ldr	r2, [pc, #392]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d0c:	e01c      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d12:	3308      	adds	r3, #8
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f002 fab8 	bl	800728c <RCCEx_PLL2_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d22:	e011      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d28:	3328      	adds	r3, #40	@ 0x28
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f002 fb5f 	bl	80073f0 <RCCEx_PLL3_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d40:	e002      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d50:	4b4f      	ldr	r3, [pc, #316]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d54:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d64:	e003      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004d7a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004d84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	d053      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d9a:	d035      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004d9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004da0:	d82e      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004da2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004da6:	d031      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004da8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004dac:	d828      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004db2:	d01a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004db8:	d822      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004dbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dc2:	d007      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004dc4:	e01c      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc6:	4b32      	ldr	r3, [pc, #200]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	4a31      	ldr	r2, [pc, #196]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dd2:	e01c      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd8:	3308      	adds	r3, #8
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f002 fa55 	bl	800728c <RCCEx_PLL2_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004de8:	e011      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dee:	3328      	adds	r3, #40	@ 0x28
 8004df0:	2100      	movs	r1, #0
 8004df2:	4618      	mov	r0, r3
 8004df4:	f002 fafc 	bl	80073f0 <RCCEx_PLL3_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dfe:	e006      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e06:	e002      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e16:	4b1e      	ldr	r3, [pc, #120]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e26:	4a1a      	ldr	r2, [pc, #104]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e2c:	e003      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004e42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e46:	2300      	movs	r3, #0
 8004e48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004e4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004e50:	460b      	mov	r3, r1
 8004e52:	4313      	orrs	r3, r2
 8004e54:	d056      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e62:	d038      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004e64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e68:	d831      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e6e:	d034      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004e70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e74:	d82b      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e7a:	d01d      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004e7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e80:	d825      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d006      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004e86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e8a:	d00a      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004e8c:	e01f      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e8e:	bf00      	nop
 8004e90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e94:	4ba2      	ldr	r3, [pc, #648]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	4aa1      	ldr	r2, [pc, #644]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ea0:	e01c      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f002 f9ee 	bl	800728c <RCCEx_PLL2_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004eb6:	e011      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebc:	3328      	adds	r3, #40	@ 0x28
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f002 fa95 	bl	80073f0 <RCCEx_PLL3_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ecc:	e006      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ed4:	e002      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e000      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10b      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ef4:	4a8a      	ldr	r2, [pc, #552]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004efa:	e003      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004f1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4313      	orrs	r3, r2
 8004f22:	d03a      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2a:	2b30      	cmp	r3, #48	@ 0x30
 8004f2c:	d01f      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004f2e:	2b30      	cmp	r3, #48	@ 0x30
 8004f30:	d819      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d00c      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d815      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d019      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004f3e:	2b10      	cmp	r3, #16
 8004f40:	d111      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f42:	4b77      	ldr	r3, [pc, #476]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f46:	4a76      	ldr	r2, [pc, #472]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f4e:	e011      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f54:	3308      	adds	r3, #8
 8004f56:	2102      	movs	r1, #2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f002 f997 	bl	800728c <RCCEx_PLL2_Config>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f64:	e006      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f6c:	e002      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f6e:	bf00      	nop
 8004f70:	e000      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f7c:	4b68      	ldr	r3, [pc, #416]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f80:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f8a:	4a65      	ldr	r2, [pc, #404]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f90:	e003      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004fa6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004faa:	2300      	movs	r3, #0
 8004fac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004fb0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	d051      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fc4:	d035      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004fc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fca:	d82e      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004fcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fd0:	d031      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004fd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fd6:	d828      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fdc:	d01a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe2:	d822      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fec:	d007      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004fee:	e01c      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ffc:	e01c      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005002:	3308      	adds	r3, #8
 8005004:	2100      	movs	r1, #0
 8005006:	4618      	mov	r0, r3
 8005008:	f002 f940 	bl	800728c <RCCEx_PLL2_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005012:	e011      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005018:	3328      	adds	r3, #40	@ 0x28
 800501a:	2100      	movs	r1, #0
 800501c:	4618      	mov	r0, r3
 800501e:	f002 f9e7 	bl	80073f0 <RCCEx_PLL3_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005028:	e006      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005030:	e002      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005040:	4b37      	ldr	r3, [pc, #220]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005044:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800504e:	4a34      	ldr	r2, [pc, #208]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005050:	430b      	orrs	r3, r1
 8005052:	6513      	str	r3, [r2, #80]	@ 0x50
 8005054:	e003      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800505a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800505e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800506a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800506e:	2300      	movs	r3, #0
 8005070:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005074:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005078:	460b      	mov	r3, r1
 800507a:	4313      	orrs	r3, r2
 800507c:	d056      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005088:	d033      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800508a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800508e:	d82c      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005090:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005094:	d02f      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005096:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800509a:	d826      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800509c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050a0:	d02b      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80050a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050a6:	d820      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050ac:	d012      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80050ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050b2:	d81a      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d022      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80050b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050bc:	d115      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c2:	3308      	adds	r3, #8
 80050c4:	2101      	movs	r1, #1
 80050c6:	4618      	mov	r0, r3
 80050c8:	f002 f8e0 	bl	800728c <RCCEx_PLL2_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80050d2:	e015      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d8:	3328      	adds	r3, #40	@ 0x28
 80050da:	2101      	movs	r1, #1
 80050dc:	4618      	mov	r0, r3
 80050de:	f002 f987 	bl	80073f0 <RCCEx_PLL3_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80050e8:	e00a      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050f0:	e006      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050f2:	bf00      	nop
 80050f4:	e004      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050f6:	bf00      	nop
 80050f8:	e002      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050fa:	bf00      	nop
 80050fc:	e000      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10d      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005108:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800510a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800510c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005116:	4a02      	ldr	r2, [pc, #8]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005118:	430b      	orrs	r3, r1
 800511a:	6513      	str	r3, [r2, #80]	@ 0x50
 800511c:	e006      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800511e:	bf00      	nop
 8005120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800512c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800513c:	2300      	movs	r3, #0
 800513e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005142:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005146:	460b      	mov	r3, r1
 8005148:	4313      	orrs	r3, r2
 800514a:	d055      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800514c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005150:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005154:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005158:	d033      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800515a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800515e:	d82c      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005164:	d02f      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516a:	d826      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800516c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005170:	d02b      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005172:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005176:	d820      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800517c:	d012      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800517e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005182:	d81a      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d022      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800518c:	d115      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	3308      	adds	r3, #8
 8005194:	2101      	movs	r1, #1
 8005196:	4618      	mov	r0, r3
 8005198:	f002 f878 	bl	800728c <RCCEx_PLL2_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051a2:	e015      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a8:	3328      	adds	r3, #40	@ 0x28
 80051aa:	2101      	movs	r1, #1
 80051ac:	4618      	mov	r0, r3
 80051ae:	f002 f91f 	bl	80073f0 <RCCEx_PLL3_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051b8:	e00a      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051c0:	e006      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051c2:	bf00      	nop
 80051c4:	e004      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051c6:	bf00      	nop
 80051c8:	e002      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051ca:	bf00      	nop
 80051cc:	e000      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80051d8:	4ba3      	ldr	r3, [pc, #652]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051dc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051e8:	4a9f      	ldr	r2, [pc, #636]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ea:	430b      	orrs	r3, r1
 80051ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80051ee:	e003      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005204:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005208:	2300      	movs	r3, #0
 800520a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800520e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005212:	460b      	mov	r3, r1
 8005214:	4313      	orrs	r3, r2
 8005216:	d037      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005222:	d00e      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005228:	d816      	bhi.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d018      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800522e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005232:	d111      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005234:	4b8c      	ldr	r3, [pc, #560]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	4a8b      	ldr	r2, [pc, #556]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800523a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800523e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005240:	e00f      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005246:	3308      	adds	r3, #8
 8005248:	2101      	movs	r1, #1
 800524a:	4618      	mov	r0, r3
 800524c:	f002 f81e 	bl	800728c <RCCEx_PLL2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005256:	e004      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800525e:	e000      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800526a:	4b7f      	ldr	r3, [pc, #508]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800526c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800526e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005278:	4a7b      	ldr	r2, [pc, #492]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800527a:	430b      	orrs	r3, r1
 800527c:	6513      	str	r3, [r2, #80]	@ 0x50
 800527e:	e003      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005298:	2300      	movs	r3, #0
 800529a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800529e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4313      	orrs	r3, r2
 80052a6:	d039      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80052a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d81c      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 80052b2:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052f5 	.word	0x080052f5
 80052bc:	080052c9 	.word	0x080052c9
 80052c0:	080052d7 	.word	0x080052d7
 80052c4:	080052f5 	.word	0x080052f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c8:	4b67      	ldr	r3, [pc, #412]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052cc:	4a66      	ldr	r2, [pc, #408]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80052d4:	e00f      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052da:	3308      	adds	r3, #8
 80052dc:	2102      	movs	r1, #2
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 ffd4 	bl	800728c <RCCEx_PLL2_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80052ea:	e004      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052f2:	e000      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80052f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80052fe:	4b5a      	ldr	r3, [pc, #360]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005302:	f023 0103 	bic.w	r1, r3, #3
 8005306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800530c:	4a56      	ldr	r2, [pc, #344]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800530e:	430b      	orrs	r3, r1
 8005310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005312:	e003      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005328:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800532c:	2300      	movs	r3, #0
 800532e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005332:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005336:	460b      	mov	r3, r1
 8005338:	4313      	orrs	r3, r2
 800533a:	f000 809f 	beq.w	800547c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800533e:	4b4b      	ldr	r3, [pc, #300]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a4a      	ldr	r2, [pc, #296]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005348:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800534a:	f7fc f8dd 	bl	8001508 <HAL_GetTick>
 800534e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005352:	e00b      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005354:	f7fc f8d8 	bl	8001508 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b64      	cmp	r3, #100	@ 0x64
 8005362:	d903      	bls.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800536a:	e005      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800536c:	4b3f      	ldr	r3, [pc, #252]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0ed      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800537c:	2b00      	cmp	r3, #0
 800537e:	d179      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005380:	4b39      	ldr	r3, [pc, #228]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005382:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005388:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800538c:	4053      	eors	r3, r2
 800538e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005392:	2b00      	cmp	r3, #0
 8005394:	d015      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005396:	4b34      	ldr	r3, [pc, #208]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800539e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053a2:	4b31      	ldr	r3, [pc, #196]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a6:	4a30      	ldr	r2, [pc, #192]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053ae:	4b2e      	ldr	r3, [pc, #184]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053b8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80053ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ce:	d118      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fc f89a 	bl	8001508 <HAL_GetTick>
 80053d4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053d8:	e00d      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fc f895 	bl	8001508 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80053e4:	1ad2      	subs	r2, r2, r3
 80053e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d903      	bls.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80053f4:	e005      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0eb      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005406:	2b00      	cmp	r3, #0
 8005408:	d129      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800540a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800541a:	d10e      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800541c:	4b12      	ldr	r3, [pc, #72]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005428:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800542c:	091a      	lsrs	r2, r3, #4
 800542e:	4b10      	ldr	r3, [pc, #64]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005430:	4013      	ands	r3, r2
 8005432:	4a0d      	ldr	r2, [pc, #52]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005434:	430b      	orrs	r3, r1
 8005436:	6113      	str	r3, [r2, #16]
 8005438:	e005      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800543a:	4b0b      	ldr	r3, [pc, #44]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	4a0a      	ldr	r2, [pc, #40]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005440:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005444:	6113      	str	r3, [r2, #16]
 8005446:	4b08      	ldr	r3, [pc, #32]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005448:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005456:	4a04      	ldr	r2, [pc, #16]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005458:	430b      	orrs	r3, r1
 800545a:	6713      	str	r3, [r2, #112]	@ 0x70
 800545c:	e00e      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800545e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005466:	e009      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005468:	58024400 	.word	0x58024400
 800546c:	58024800 	.word	0x58024800
 8005470:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	f002 0301 	and.w	r3, r2, #1
 8005488:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005492:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005496:	460b      	mov	r3, r1
 8005498:	4313      	orrs	r3, r2
 800549a:	f000 8089 	beq.w	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054a4:	2b28      	cmp	r3, #40	@ 0x28
 80054a6:	d86b      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80054a8:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	08005589 	.word	0x08005589
 80054b4:	08005581 	.word	0x08005581
 80054b8:	08005581 	.word	0x08005581
 80054bc:	08005581 	.word	0x08005581
 80054c0:	08005581 	.word	0x08005581
 80054c4:	08005581 	.word	0x08005581
 80054c8:	08005581 	.word	0x08005581
 80054cc:	08005581 	.word	0x08005581
 80054d0:	08005555 	.word	0x08005555
 80054d4:	08005581 	.word	0x08005581
 80054d8:	08005581 	.word	0x08005581
 80054dc:	08005581 	.word	0x08005581
 80054e0:	08005581 	.word	0x08005581
 80054e4:	08005581 	.word	0x08005581
 80054e8:	08005581 	.word	0x08005581
 80054ec:	08005581 	.word	0x08005581
 80054f0:	0800556b 	.word	0x0800556b
 80054f4:	08005581 	.word	0x08005581
 80054f8:	08005581 	.word	0x08005581
 80054fc:	08005581 	.word	0x08005581
 8005500:	08005581 	.word	0x08005581
 8005504:	08005581 	.word	0x08005581
 8005508:	08005581 	.word	0x08005581
 800550c:	08005581 	.word	0x08005581
 8005510:	08005589 	.word	0x08005589
 8005514:	08005581 	.word	0x08005581
 8005518:	08005581 	.word	0x08005581
 800551c:	08005581 	.word	0x08005581
 8005520:	08005581 	.word	0x08005581
 8005524:	08005581 	.word	0x08005581
 8005528:	08005581 	.word	0x08005581
 800552c:	08005581 	.word	0x08005581
 8005530:	08005589 	.word	0x08005589
 8005534:	08005581 	.word	0x08005581
 8005538:	08005581 	.word	0x08005581
 800553c:	08005581 	.word	0x08005581
 8005540:	08005581 	.word	0x08005581
 8005544:	08005581 	.word	0x08005581
 8005548:	08005581 	.word	0x08005581
 800554c:	08005581 	.word	0x08005581
 8005550:	08005589 	.word	0x08005589
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005558:	3308      	adds	r3, #8
 800555a:	2101      	movs	r1, #1
 800555c:	4618      	mov	r0, r3
 800555e:	f001 fe95 	bl	800728c <RCCEx_PLL2_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005568:	e00f      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556e:	3328      	adds	r3, #40	@ 0x28
 8005570:	2101      	movs	r1, #1
 8005572:	4618      	mov	r0, r3
 8005574:	f001 ff3c 	bl	80073f0 <RCCEx_PLL3_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800557e:	e004      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005586:	e000      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005592:	4bbf      	ldr	r3, [pc, #764]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005596:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055a0:	4abb      	ldr	r2, [pc, #748]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055a2:	430b      	orrs	r3, r1
 80055a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80055a6:	e003      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f002 0302 	and.w	r3, r2, #2
 80055bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80055c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80055ca:	460b      	mov	r3, r1
 80055cc:	4313      	orrs	r3, r2
 80055ce:	d041      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d824      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80055da:	a201      	add	r2, pc, #4	@ (adr r2, 80055e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	0800562d 	.word	0x0800562d
 80055e4:	080055f9 	.word	0x080055f9
 80055e8:	0800560f 	.word	0x0800560f
 80055ec:	0800562d 	.word	0x0800562d
 80055f0:	0800562d 	.word	0x0800562d
 80055f4:	0800562d 	.word	0x0800562d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fc:	3308      	adds	r3, #8
 80055fe:	2101      	movs	r1, #1
 8005600:	4618      	mov	r0, r3
 8005602:	f001 fe43 	bl	800728c <RCCEx_PLL2_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800560c:	e00f      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800560e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005612:	3328      	adds	r3, #40	@ 0x28
 8005614:	2101      	movs	r1, #1
 8005616:	4618      	mov	r0, r3
 8005618:	f001 feea 	bl	80073f0 <RCCEx_PLL3_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005622:	e004      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800562a:	e000      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800562c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10a      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005636:	4b96      	ldr	r3, [pc, #600]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563a:	f023 0107 	bic.w	r1, r3, #7
 800563e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005642:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005644:	4a92      	ldr	r2, [pc, #584]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005646:	430b      	orrs	r3, r1
 8005648:	6553      	str	r3, [r2, #84]	@ 0x54
 800564a:	e003      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f002 0304 	and.w	r3, r2, #4
 8005660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005664:	2300      	movs	r3, #0
 8005666:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800566a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800566e:	460b      	mov	r3, r1
 8005670:	4313      	orrs	r3, r2
 8005672:	d044      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800567c:	2b05      	cmp	r3, #5
 800567e:	d825      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005680:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	080056d5 	.word	0x080056d5
 800568c:	080056a1 	.word	0x080056a1
 8005690:	080056b7 	.word	0x080056b7
 8005694:	080056d5 	.word	0x080056d5
 8005698:	080056d5 	.word	0x080056d5
 800569c:	080056d5 	.word	0x080056d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a4:	3308      	adds	r3, #8
 80056a6:	2101      	movs	r1, #1
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 fdef 	bl	800728c <RCCEx_PLL2_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80056b4:	e00f      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ba:	3328      	adds	r3, #40	@ 0x28
 80056bc:	2101      	movs	r1, #1
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 fe96 	bl	80073f0 <RCCEx_PLL3_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80056ca:	e004      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056d2:	e000      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80056d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10b      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056de:	4b6c      	ldr	r3, [pc, #432]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e2:	f023 0107 	bic.w	r1, r3, #7
 80056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056ee:	4a68      	ldr	r2, [pc, #416]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80056f4:	e003      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f002 0320 	and.w	r3, r2, #32
 800570a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800570e:	2300      	movs	r3, #0
 8005710:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005714:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005718:	460b      	mov	r3, r1
 800571a:	4313      	orrs	r3, r2
 800571c:	d055      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005726:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800572a:	d033      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800572c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005730:	d82c      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005736:	d02f      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573c:	d826      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800573e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005742:	d02b      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005744:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005748:	d820      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800574a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800574e:	d012      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005754:	d81a      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005756:	2b00      	cmp	r3, #0
 8005758:	d022      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800575a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800575e:	d115      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005764:	3308      	adds	r3, #8
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f001 fd8f 	bl	800728c <RCCEx_PLL2_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005774:	e015      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577a:	3328      	adds	r3, #40	@ 0x28
 800577c:	2102      	movs	r1, #2
 800577e:	4618      	mov	r0, r3
 8005780:	f001 fe36 	bl	80073f0 <RCCEx_PLL3_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800578a:	e00a      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005792:	e006      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005794:	bf00      	nop
 8005796:	e004      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005798:	bf00      	nop
 800579a:	e002      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800579c:	bf00      	nop
 800579e:	e000      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80057a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057aa:	4b39      	ldr	r3, [pc, #228]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80057b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ba:	4a35      	ldr	r2, [pc, #212]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057bc:	430b      	orrs	r3, r1
 80057be:	6553      	str	r3, [r2, #84]	@ 0x54
 80057c0:	e003      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80057d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057da:	2300      	movs	r3, #0
 80057dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80057e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4313      	orrs	r3, r2
 80057e8:	d058      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80057f6:	d033      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80057f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80057fc:	d82c      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005802:	d02f      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005808:	d826      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800580a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800580e:	d02b      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005810:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005814:	d820      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005816:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800581a:	d012      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800581c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005820:	d81a      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d022      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800582a:	d115      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800582c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005830:	3308      	adds	r3, #8
 8005832:	2100      	movs	r1, #0
 8005834:	4618      	mov	r0, r3
 8005836:	f001 fd29 	bl	800728c <RCCEx_PLL2_Config>
 800583a:	4603      	mov	r3, r0
 800583c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005840:	e015      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005846:	3328      	adds	r3, #40	@ 0x28
 8005848:	2102      	movs	r1, #2
 800584a:	4618      	mov	r0, r3
 800584c:	f001 fdd0 	bl	80073f0 <RCCEx_PLL3_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005856:	e00a      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800585e:	e006      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005860:	bf00      	nop
 8005862:	e004      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005864:	bf00      	nop
 8005866:	e002      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005868:	bf00      	nop
 800586a:	e000      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800586c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10e      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005886:	4a02      	ldr	r2, [pc, #8]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005888:	430b      	orrs	r3, r1
 800588a:	6593      	str	r3, [r2, #88]	@ 0x58
 800588c:	e006      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800588e:	bf00      	nop
 8005890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80058a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058ac:	2300      	movs	r3, #0
 80058ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80058b6:	460b      	mov	r3, r1
 80058b8:	4313      	orrs	r3, r2
 80058ba:	d055      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80058bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80058c8:	d033      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80058ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80058ce:	d82c      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058d4:	d02f      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80058d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058da:	d826      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80058e0:	d02b      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80058e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80058e6:	d820      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058ec:	d012      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80058ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058f2:	d81a      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d022      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80058f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058fc:	d115      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005902:	3308      	adds	r3, #8
 8005904:	2100      	movs	r1, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f001 fcc0 	bl	800728c <RCCEx_PLL2_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005912:	e015      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005918:	3328      	adds	r3, #40	@ 0x28
 800591a:	2102      	movs	r1, #2
 800591c:	4618      	mov	r0, r3
 800591e:	f001 fd67 	bl	80073f0 <RCCEx_PLL3_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005928:	e00a      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005930:	e006      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005932:	bf00      	nop
 8005934:	e004      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005936:	bf00      	nop
 8005938:	e002      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800593a:	bf00      	nop
 800593c:	e000      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800593e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005948:	4ba1      	ldr	r3, [pc, #644]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005954:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005958:	4a9d      	ldr	r2, [pc, #628]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800595a:	430b      	orrs	r3, r1
 800595c:	6593      	str	r3, [r2, #88]	@ 0x58
 800595e:	e003      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005964:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	f002 0308 	and.w	r3, r2, #8
 8005974:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005978:	2300      	movs	r3, #0
 800597a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800597e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005982:	460b      	mov	r3, r1
 8005984:	4313      	orrs	r3, r2
 8005986:	d01e      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005994:	d10c      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599a:	3328      	adds	r3, #40	@ 0x28
 800599c:	2102      	movs	r1, #2
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 fd26 	bl	80073f0 <RCCEx_PLL3_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80059b0:	4b87      	ldr	r3, [pc, #540]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059c0:	4a83      	ldr	r2, [pc, #524]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059c2:	430b      	orrs	r3, r1
 80059c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f002 0310 	and.w	r3, r2, #16
 80059d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059d6:	2300      	movs	r3, #0
 80059d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80059dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80059e0:	460b      	mov	r3, r1
 80059e2:	4313      	orrs	r3, r2
 80059e4:	d01e      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059f2:	d10c      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f8:	3328      	adds	r3, #40	@ 0x28
 80059fa:	2102      	movs	r1, #2
 80059fc:	4618      	mov	r0, r3
 80059fe:	f001 fcf7 	bl	80073f0 <RCCEx_PLL3_Config>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a0e:	4b70      	ldr	r3, [pc, #448]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a1e:	4a6c      	ldr	r2, [pc, #432]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005a30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a34:	2300      	movs	r3, #0
 8005a36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a3a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4313      	orrs	r3, r2
 8005a42:	d03e      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a50:	d022      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005a52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a56:	d81b      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a60:	d00b      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005a62:	e015      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a68:	3308      	adds	r3, #8
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fc0d 	bl	800728c <RCCEx_PLL2_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a78:	e00f      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7e:	3328      	adds	r3, #40	@ 0x28
 8005a80:	2102      	movs	r1, #2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fcb4 	bl	80073f0 <RCCEx_PLL3_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a8e:	e004      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a96:	e000      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10b      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ab2:	4a47      	ldr	r2, [pc, #284]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ab8:	e003      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005ace:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ad4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4313      	orrs	r3, r2
 8005adc:	d03b      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005aea:	d01f      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005aec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005af0:	d818      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005af6:	d003      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005af8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005afc:	d007      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005afe:	e011      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b00:	4b33      	ldr	r3, [pc, #204]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	4a32      	ldr	r2, [pc, #200]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b0c:	e00f      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b12:	3328      	adds	r3, #40	@ 0x28
 8005b14:	2101      	movs	r1, #1
 8005b16:	4618      	mov	r0, r3
 8005b18:	f001 fc6a 	bl	80073f0 <RCCEx_PLL3_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b22:	e004      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b2a:	e000      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b36:	4b26      	ldr	r3, [pc, #152]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b46:	4a22      	ldr	r2, [pc, #136]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b4c:	e003      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005b62:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b64:	2300      	movs	r3, #0
 8005b66:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	d034      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b80:	d007      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005b82:	e011      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b84:	4b12      	ldr	r3, [pc, #72]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	4a11      	ldr	r2, [pc, #68]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b90:	e00e      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b96:	3308      	adds	r3, #8
 8005b98:	2102      	movs	r1, #2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fb76 	bl	800728c <RCCEx_PLL2_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ba6:	e003      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10d      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005bb8:	4b05      	ldr	r3, [pc, #20]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bbc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc6:	4a02      	ldr	r2, [pc, #8]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bcc:	e006      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005bce:	bf00      	nop
 8005bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005be8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bea:	2300      	movs	r3, #0
 8005bec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	d00c      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfc:	3328      	adds	r3, #40	@ 0x28
 8005bfe:	2102      	movs	r1, #2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 fbf5 	bl	80073f0 <RCCEx_PLL3_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005c1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c20:	2300      	movs	r3, #0
 8005c22:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	d038      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c3a:	d018      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005c3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c40:	d811      	bhi.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c46:	d014      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c4c:	d80b      	bhi.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d011      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c56:	d106      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c58:	4bc3      	ldr	r3, [pc, #780]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5c:	4ac2      	ldr	r2, [pc, #776]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005c64:	e008      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c6c:	e004      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c6e:	bf00      	nop
 8005c70:	e002      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c72:	bf00      	nop
 8005c74:	e000      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10b      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c80:	4bb9      	ldr	r3, [pc, #740]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c84:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c90:	4ab5      	ldr	r2, [pc, #724]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c92:	430b      	orrs	r3, r1
 8005c94:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c96:	e003      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005cac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cae:	2300      	movs	r3, #0
 8005cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cb2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cbc:	4baa      	ldr	r3, [pc, #680]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cca:	4aa7      	ldr	r2, [pc, #668]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005cdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cde:	2300      	movs	r3, #0
 8005ce0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ce2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005cec:	4b9e      	ldr	r3, [pc, #632]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005cfc:	4a9a      	ldr	r2, [pc, #616]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cfe:	430b      	orrs	r3, r1
 8005d00:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d10:	2300      	movs	r3, #0
 8005d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d1e:	4b92      	ldr	r3, [pc, #584]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d22:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d2c:	4a8e      	ldr	r2, [pc, #568]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d2e:	430b      	orrs	r3, r1
 8005d30:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d40:	2300      	movs	r3, #0
 8005d42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d44:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	d00e      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d4e:	4b86      	ldr	r3, [pc, #536]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	4a85      	ldr	r2, [pc, #532]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d54:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d58:	6113      	str	r3, [r2, #16]
 8005d5a:	4b83      	ldr	r3, [pc, #524]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d5c:	6919      	ldr	r1, [r3, #16]
 8005d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005d66:	4a80      	ldr	r2, [pc, #512]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005d78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005d82:	460b      	mov	r3, r1
 8005d84:	4313      	orrs	r3, r2
 8005d86:	d009      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d88:	4b77      	ldr	r3, [pc, #476]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d96:	4a74      	ldr	r2, [pc, #464]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005daa:	2300      	movs	r3, #0
 8005dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005db2:	460b      	mov	r3, r1
 8005db4:	4313      	orrs	r3, r2
 8005db6:	d00a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005db8:	4b6b      	ldr	r3, [pc, #428]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dbc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dc8:	4a67      	ldr	r2, [pc, #412]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005de0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005de4:	460b      	mov	r3, r1
 8005de6:	4313      	orrs	r3, r2
 8005de8:	d011      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dee:	3308      	adds	r3, #8
 8005df0:	2100      	movs	r1, #0
 8005df2:	4618      	mov	r0, r3
 8005df4:	f001 fa4a 	bl	800728c <RCCEx_PLL2_Config>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	2100      	movs	r1, #0
 8005e18:	6239      	str	r1, [r7, #32]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e24:	460b      	mov	r3, r1
 8005e26:	4313      	orrs	r3, r2
 8005e28:	d011      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2e:	3308      	adds	r3, #8
 8005e30:	2101      	movs	r1, #1
 8005e32:	4618      	mov	r0, r3
 8005e34:	f001 fa2a 	bl	800728c <RCCEx_PLL2_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	2100      	movs	r1, #0
 8005e58:	61b9      	str	r1, [r7, #24]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	61fb      	str	r3, [r7, #28]
 8005e60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d011      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6e:	3308      	adds	r3, #8
 8005e70:	2102      	movs	r1, #2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f001 fa0a 	bl	800728c <RCCEx_PLL2_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	2100      	movs	r1, #0
 8005e98:	6139      	str	r1, [r7, #16]
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	d011      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eae:	3328      	adds	r3, #40	@ 0x28
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fa9c 	bl	80073f0 <RCCEx_PLL3_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	f003 0310 	and.w	r3, r3, #16
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	d011      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eee:	3328      	adds	r3, #40	@ 0x28
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 fa7c 	bl	80073f0 <RCCEx_PLL3_Config>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	2100      	movs	r1, #0
 8005f18:	6039      	str	r1, [r7, #0]
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d011      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	3328      	adds	r3, #40	@ 0x28
 8005f30:	2102      	movs	r1, #2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 fa5c 	bl	80073f0 <RCCEx_PLL3_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005f4e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e000      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005f62:	46bd      	mov	sp, r7
 8005f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f68:	58024400 	.word	0x58024400

08005f6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b090      	sub	sp, #64	@ 0x40
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f7a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	f040 8094 	bne.w	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005f84:	4b9e      	ldr	r3, [pc, #632]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	f200 8087 	bhi.w	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005f96:	a201      	add	r2, pc, #4	@ (adr r2, 8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005fb1 	.word	0x08005fb1
 8005fa0:	08005fd9 	.word	0x08005fd9
 8005fa4:	08006001 	.word	0x08006001
 8005fa8:	0800609d 	.word	0x0800609d
 8005fac:	08006029 	.word	0x08006029
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fb0:	4b93      	ldr	r3, [pc, #588]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fbc:	d108      	bne.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 f810 	bl	8006fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fcc:	f000 bd45 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fd4:	f000 bd41 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fd8:	4b89      	ldr	r3, [pc, #548]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fe4:	d108      	bne.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fe6:	f107 0318 	add.w	r3, r7, #24
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fd54 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ff4:	f000 bd31 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ffc:	f000 bd2d 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006000:	4b7f      	ldr	r3, [pc, #508]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800600c:	d108      	bne.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800600e:	f107 030c 	add.w	r3, r7, #12
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fe94 	bl	8006d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800601c:	f000 bd1d 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006024:	f000 bd19 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006028:	4b75      	ldr	r3, [pc, #468]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800602a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800602c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006030:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006032:	4b73      	ldr	r3, [pc, #460]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b04      	cmp	r3, #4
 800603c:	d10c      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800603e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006044:	4b6e      	ldr	r3, [pc, #440]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	08db      	lsrs	r3, r3, #3
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	4a6d      	ldr	r2, [pc, #436]	@ (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
 8006054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006056:	e01f      	b.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006058:	4b69      	ldr	r3, [pc, #420]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006064:	d106      	bne.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800606c:	d102      	bne.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800606e:	4b66      	ldr	r3, [pc, #408]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006072:	e011      	b.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006074:	4b62      	ldr	r3, [pc, #392]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006080:	d106      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006088:	d102      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800608a:	4b60      	ldr	r3, [pc, #384]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800608c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800608e:	e003      	b.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006094:	f000 bce1 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006098:	f000 bcdf 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800609c:	4b5c      	ldr	r3, [pc, #368]	@ (8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800609e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060a0:	f000 bcdb 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060a8:	f000 bcd7 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80060ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80060b4:	430b      	orrs	r3, r1
 80060b6:	f040 80ad 	bne.w	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80060ba:	4b51      	ldr	r3, [pc, #324]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060be:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80060c2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ca:	d056      	beq.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060d2:	f200 8090 	bhi.w	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80060da:	f000 8088 	beq.w	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80060e2:	f200 8088 	bhi.w	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	2b80      	cmp	r3, #128	@ 0x80
 80060ea:	d032      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80060ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ee:	2b80      	cmp	r3, #128	@ 0x80
 80060f0:	f200 8081 	bhi.w	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	2b40      	cmp	r3, #64	@ 0x40
 80060fe:	d014      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006100:	e079      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006102:	4b3f      	ldr	r3, [pc, #252]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800610a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800610e:	d108      	bne.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006114:	4618      	mov	r0, r3
 8006116:	f000 ff67 	bl	8006fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800611e:	f000 bc9c 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006126:	f000 bc98 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800612a:	4b35      	ldr	r3, [pc, #212]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006136:	d108      	bne.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006138:	f107 0318 	add.w	r3, r7, #24
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fcab 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006146:	f000 bc88 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800614a:	2300      	movs	r3, #0
 800614c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800614e:	f000 bc84 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006152:	4b2b      	ldr	r3, [pc, #172]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800615a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800615e:	d108      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006160:	f107 030c 	add.w	r3, r7, #12
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fdeb 	bl	8006d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800616e:	f000 bc74 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006176:	f000 bc70 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800617a:	4b21      	ldr	r3, [pc, #132]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800617c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006182:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006184:	4b1e      	ldr	r3, [pc, #120]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b04      	cmp	r3, #4
 800618e:	d10c      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006196:	4b1a      	ldr	r3, [pc, #104]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	08db      	lsrs	r3, r3, #3
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	4a18      	ldr	r2, [pc, #96]	@ (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80061a2:	fa22 f303 	lsr.w	r3, r2, r3
 80061a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061a8:	e01f      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061aa:	4b15      	ldr	r3, [pc, #84]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b6:	d106      	bne.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80061b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061be:	d102      	bne.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80061c0:	4b11      	ldr	r3, [pc, #68]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80061c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061c4:	e011      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061d2:	d106      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80061d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061da:	d102      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80061dc:	4b0b      	ldr	r3, [pc, #44]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80061de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061e0:	e003      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80061e6:	f000 bc38 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80061ea:	f000 bc36 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80061ee:	4b08      	ldr	r3, [pc, #32]	@ (8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f2:	f000 bc32 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fa:	f000 bc2e 	b.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80061fe:	bf00      	nop
 8006200:	58024400 	.word	0x58024400
 8006204:	03d09000 	.word	0x03d09000
 8006208:	003d0900 	.word	0x003d0900
 800620c:	017d7840 	.word	0x017d7840
 8006210:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006218:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800621c:	430b      	orrs	r3, r1
 800621e:	f040 809c 	bne.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006222:	4b9e      	ldr	r3, [pc, #632]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006226:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800622a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006232:	d054      	beq.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006236:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800623a:	f200 808b 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006244:	f000 8083 	beq.w	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800624e:	f200 8081 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006258:	d02f      	beq.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006260:	d878      	bhi.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800626e:	d012      	beq.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006270:	e070      	b.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006272:	4b8a      	ldr	r3, [pc, #552]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800627a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800627e:	d107      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006284:	4618      	mov	r0, r3
 8006286:	f000 feaf 	bl	8006fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800628a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800628e:	e3e4      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006294:	e3e1      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006296:	4b81      	ldr	r3, [pc, #516]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800629e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062a2:	d107      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062a4:	f107 0318 	add.w	r3, r7, #24
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fbf5 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062b2:	e3d2      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b8:	e3cf      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062ba:	4b78      	ldr	r3, [pc, #480]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062c6:	d107      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062c8:	f107 030c 	add.w	r3, r7, #12
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fd37 	bl	8006d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062d6:	e3c0      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062dc:	e3bd      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062de:	4b6f      	ldr	r3, [pc, #444]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062e8:	4b6c      	ldr	r3, [pc, #432]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d10c      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062fa:	4b68      	ldr	r3, [pc, #416]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	08db      	lsrs	r3, r3, #3
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	4a66      	ldr	r2, [pc, #408]	@ (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006306:	fa22 f303 	lsr.w	r3, r2, r3
 800630a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800630c:	e01e      	b.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800630e:	4b63      	ldr	r3, [pc, #396]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800631a:	d106      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800631c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006322:	d102      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006324:	4b5f      	ldr	r3, [pc, #380]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006328:	e010      	b.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800632a:	4b5c      	ldr	r3, [pc, #368]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006336:	d106      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800633e:	d102      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006340:	4b59      	ldr	r3, [pc, #356]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006344:	e002      	b.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800634a:	e386      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800634c:	e385      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800634e:	4b57      	ldr	r3, [pc, #348]	@ (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006352:	e382      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006358:	e37f      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800635a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006362:	430b      	orrs	r3, r1
 8006364:	f040 80a7 	bne.w	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006368:	4b4c      	ldr	r3, [pc, #304]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800636a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006370:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006374:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006378:	d055      	beq.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006380:	f200 8096 	bhi.w	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800638a:	f000 8084 	beq.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006394:	f200 808c 	bhi.w	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800639e:	d030      	beq.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80063a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063a6:	f200 8083 	bhi.w	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063b6:	d012      	beq.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80063b8:	e07a      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063ba:	4b38      	ldr	r3, [pc, #224]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063c6:	d107      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fe0b 	bl	8006fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063d6:	e340      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063dc:	e33d      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063de:	4b2f      	ldr	r3, [pc, #188]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063ea:	d107      	bne.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ec:	f107 0318 	add.w	r3, r7, #24
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fb51 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063fa:	e32e      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063fc:	2300      	movs	r3, #0
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006400:	e32b      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006402:	4b26      	ldr	r3, [pc, #152]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800640a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800640e:	d107      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006410:	f107 030c 	add.w	r3, r7, #12
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fc93 	bl	8006d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800641e:	e31c      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006424:	e319      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006426:	4b1d      	ldr	r3, [pc, #116]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800642a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800642e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006430:	4b1a      	ldr	r3, [pc, #104]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b04      	cmp	r3, #4
 800643a:	d10c      	bne.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800643c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006442:	4b16      	ldr	r3, [pc, #88]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	08db      	lsrs	r3, r3, #3
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	4a14      	ldr	r2, [pc, #80]	@ (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800644e:	fa22 f303 	lsr.w	r3, r2, r3
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006454:	e01e      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006456:	4b11      	ldr	r3, [pc, #68]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006462:	d106      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006466:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800646a:	d102      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800646c:	4b0d      	ldr	r3, [pc, #52]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800646e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006470:	e010      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006472:	4b0a      	ldr	r3, [pc, #40]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800647a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800647e:	d106      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006486:	d102      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006488:	4b07      	ldr	r3, [pc, #28]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800648a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800648c:	e002      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006492:	e2e2      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006494:	e2e1      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006496:	4b05      	ldr	r3, [pc, #20]	@ (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800649a:	e2de      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800649c:	58024400 	.word	0x58024400
 80064a0:	03d09000 	.word	0x03d09000
 80064a4:	003d0900 	.word	0x003d0900
 80064a8:	017d7840 	.word	0x017d7840
 80064ac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064b4:	e2d1      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80064b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ba:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80064be:	430b      	orrs	r3, r1
 80064c0:	f040 809c 	bne.w	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80064c4:	4b93      	ldr	r3, [pc, #588]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80064cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80064ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064d4:	d054      	beq.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064dc:	f200 808b 	bhi.w	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80064e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064e6:	f000 8083 	beq.w	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80064ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064f0:	f200 8081 	bhi.w	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80064f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064fa:	d02f      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80064fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006502:	d878      	bhi.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800650a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006510:	d012      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006512:	e070      	b.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006514:	4b7f      	ldr	r3, [pc, #508]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800651c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006520:	d107      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fd5e 	bl	8006fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006530:	e293      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006536:	e290      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006538:	4b76      	ldr	r3, [pc, #472]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006544:	d107      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006546:	f107 0318 	add.w	r3, r7, #24
 800654a:	4618      	mov	r0, r3
 800654c:	f000 faa4 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006554:	e281      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800655a:	e27e      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800655c:	4b6d      	ldr	r3, [pc, #436]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006568:	d107      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800656a:	f107 030c 	add.w	r3, r7, #12
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fbe6 	bl	8006d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006578:	e26f      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800657e:	e26c      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006580:	4b64      	ldr	r3, [pc, #400]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006584:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800658a:	4b62      	ldr	r3, [pc, #392]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b04      	cmp	r3, #4
 8006594:	d10c      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006598:	2b00      	cmp	r3, #0
 800659a:	d109      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800659c:	4b5d      	ldr	r3, [pc, #372]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	08db      	lsrs	r3, r3, #3
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	4a5c      	ldr	r2, [pc, #368]	@ (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ae:	e01e      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065b0:	4b58      	ldr	r3, [pc, #352]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065bc:	d106      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80065be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065c4:	d102      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065c6:	4b55      	ldr	r3, [pc, #340]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80065c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ca:	e010      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065cc:	4b51      	ldr	r3, [pc, #324]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065d8:	d106      	bne.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80065da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065e0:	d102      	bne.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80065e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065e6:	e002      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80065ec:	e235      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065ee:	e234      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065f0:	4b4c      	ldr	r3, [pc, #304]	@ (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80065f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065f4:	e231      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065fa:	e22e      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80065fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006600:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006604:	430b      	orrs	r3, r1
 8006606:	f040 808f 	bne.w	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800660a:	4b42      	ldr	r3, [pc, #264]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800660c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800660e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006612:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006616:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800661a:	d06b      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800661c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006622:	d874      	bhi.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006626:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800662a:	d056      	beq.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800662c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006632:	d86c      	bhi.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006636:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800663a:	d03b      	beq.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006642:	d864      	bhi.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800664a:	d021      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006652:	d85c      	bhi.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006660:	d004      	beq.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006662:	e054      	b.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006664:	f7fe fa0a 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 8006668:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800666a:	e1f6      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800666c:	4b29      	ldr	r3, [pc, #164]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006678:	d107      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800667a:	f107 0318 	add.w	r3, r7, #24
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fa0a 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006688:	e1e7      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800668e:	e1e4      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006690:	4b20      	ldr	r3, [pc, #128]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800669c:	d107      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800669e:	f107 030c 	add.w	r3, r7, #12
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fb4c 	bl	8006d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066ac:	e1d5      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066b2:	e1d2      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066b4:	4b17      	ldr	r3, [pc, #92]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d109      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066c0:	4b14      	ldr	r3, [pc, #80]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	08db      	lsrs	r3, r3, #3
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	4a13      	ldr	r2, [pc, #76]	@ (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
 80066d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066d2:	e1c2      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066d8:	e1bf      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80066da:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066e6:	d102      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80066e8:	4b0c      	ldr	r3, [pc, #48]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80066ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066ec:	e1b5      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f2:	e1b2      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066f4:	4b07      	ldr	r3, [pc, #28]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006700:	d102      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006702:	4b07      	ldr	r3, [pc, #28]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006706:	e1a8      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800670c:	e1a5      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006712:	e1a2      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006714:	58024400 	.word	0x58024400
 8006718:	03d09000 	.word	0x03d09000
 800671c:	003d0900 	.word	0x003d0900
 8006720:	017d7840 	.word	0x017d7840
 8006724:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800672c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006730:	430b      	orrs	r3, r1
 8006732:	d173      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006734:	4b9c      	ldr	r3, [pc, #624]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800673c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800673e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006744:	d02f      	beq.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800674c:	d863      	bhi.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800675a:	d012      	beq.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800675c:	e05b      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800675e:	4b92      	ldr	r3, [pc, #584]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800676a:	d107      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800676c:	f107 0318 	add.w	r3, r7, #24
 8006770:	4618      	mov	r0, r3
 8006772:	f000 f991 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800677a:	e16e      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006780:	e16b      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006782:	4b89      	ldr	r3, [pc, #548]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800678a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800678e:	d107      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006790:	f107 030c 	add.w	r3, r7, #12
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fad3 	bl	8006d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800679e:	e15c      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a4:	e159      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067a6:	4b80      	ldr	r3, [pc, #512]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067b0:	4b7d      	ldr	r3, [pc, #500]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d10c      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80067bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067c2:	4b79      	ldr	r3, [pc, #484]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	08db      	lsrs	r3, r3, #3
 80067c8:	f003 0303 	and.w	r3, r3, #3
 80067cc:	4a77      	ldr	r2, [pc, #476]	@ (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80067ce:	fa22 f303 	lsr.w	r3, r2, r3
 80067d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067d4:	e01e      	b.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067d6:	4b74      	ldr	r3, [pc, #464]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067e2:	d106      	bne.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80067e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067ea:	d102      	bne.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067ec:	4b70      	ldr	r3, [pc, #448]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067f0:	e010      	b.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067f2:	4b6d      	ldr	r3, [pc, #436]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067fe:	d106      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006806:	d102      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006808:	4b6a      	ldr	r3, [pc, #424]	@ (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800680a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800680c:	e002      	b.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006812:	e122      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006814:	e121      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800681a:	e11e      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800681c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006820:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006824:	430b      	orrs	r3, r1
 8006826:	d133      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006828:	4b5f      	ldr	r3, [pc, #380]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800682a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800682c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006830:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800683e:	d012      	beq.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006840:	e023      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006842:	4b59      	ldr	r3, [pc, #356]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800684a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800684e:	d107      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fbc7 	bl	8006fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800685a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800685e:	e0fc      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006864:	e0f9      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006866:	4b50      	ldr	r3, [pc, #320]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800686e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006872:	d107      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006874:	f107 0318 	add.w	r3, r7, #24
 8006878:	4618      	mov	r0, r3
 800687a:	f000 f90d 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006882:	e0ea      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006888:	e0e7      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800688e:	e0e4      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006894:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006898:	430b      	orrs	r3, r1
 800689a:	f040 808d 	bne.w	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800689e:	4b42      	ldr	r3, [pc, #264]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80068a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80068a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068ae:	d06b      	beq.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80068b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068b6:	d874      	bhi.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80068b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068be:	d056      	beq.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80068c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c6:	d86c      	bhi.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80068c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068ce:	d03b      	beq.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80068d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068d6:	d864      	bhi.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80068d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068de:	d021      	beq.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80068e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068e6:	d85c      	bhi.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80068ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068f4:	d004      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80068f6:	e054      	b.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80068f8:	f000 f8b8 	bl	8006a6c <HAL_RCCEx_GetD3PCLK1Freq>
 80068fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068fe:	e0ac      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006900:	4b29      	ldr	r3, [pc, #164]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800690c:	d107      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800690e:	f107 0318 	add.w	r3, r7, #24
 8006912:	4618      	mov	r0, r3
 8006914:	f000 f8c0 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800691c:	e09d      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006922:	e09a      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006924:	4b20      	ldr	r3, [pc, #128]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800692c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006930:	d107      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006932:	f107 030c 	add.w	r3, r7, #12
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fa02 	bl	8006d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006940:	e08b      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006946:	e088      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006948:	4b17      	ldr	r3, [pc, #92]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b04      	cmp	r3, #4
 8006952:	d109      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006954:	4b14      	ldr	r3, [pc, #80]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	08db      	lsrs	r3, r3, #3
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	4a13      	ldr	r2, [pc, #76]	@ (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006960:	fa22 f303 	lsr.w	r3, r2, r3
 8006964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006966:	e078      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800696c:	e075      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800696e:	4b0e      	ldr	r3, [pc, #56]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800697a:	d102      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800697c:	4b0c      	ldr	r3, [pc, #48]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800697e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006980:	e06b      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006986:	e068      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006988:	4b07      	ldr	r3, [pc, #28]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006994:	d102      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006996:	4b07      	ldr	r3, [pc, #28]	@ (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800699a:	e05e      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069a0:	e05b      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069a6:	e058      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069a8:	58024400 	.word	0x58024400
 80069ac:	03d09000 	.word	0x03d09000
 80069b0:	003d0900 	.word	0x003d0900
 80069b4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80069b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069bc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80069c0:	430b      	orrs	r3, r1
 80069c2:	d148      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80069c4:	4b27      	ldr	r3, [pc, #156]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80069c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80069ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069d4:	d02a      	beq.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069dc:	d838      	bhi.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80069de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d004      	beq.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80069e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069ea:	d00d      	beq.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80069ec:	e030      	b.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80069ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069fa:	d102      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80069fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a00:	e02b      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a06:	e028      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a08:	4b16      	ldr	r3, [pc, #88]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a14:	d107      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fae4 	bl	8006fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a24:	e019      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a2a:	e016      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a38:	d107      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a3a:	f107 0318 	add.w	r3, r7, #24
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f82a 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a48:	e007      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a4e:	e004      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a54:	e001      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3740      	adds	r7, #64	@ 0x40
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	58024400 	.word	0x58024400
 8006a68:	017d7840 	.word	0x017d7840

08006a6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a70:	f7fd ffd4 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8006a74:	4602      	mov	r2, r0
 8006a76:	4b06      	ldr	r3, [pc, #24]	@ (8006a90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	091b      	lsrs	r3, r3, #4
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	4904      	ldr	r1, [pc, #16]	@ (8006a94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a82:	5ccb      	ldrb	r3, [r1, r3]
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	58024400 	.word	0x58024400
 8006a94:	0800d974 	.word	0x0800d974

08006a98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b089      	sub	sp, #36	@ 0x24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006aa0:	4ba1      	ldr	r3, [pc, #644]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006aaa:	4b9f      	ldr	r3, [pc, #636]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aae:	0b1b      	lsrs	r3, r3, #12
 8006ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ab4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006ac2:	4b99      	ldr	r3, [pc, #612]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac6:	08db      	lsrs	r3, r3, #3
 8006ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	fb02 f303 	mul.w	r3, r2, r3
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ada:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 8111 	beq.w	8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	f000 8083 	beq.w	8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	f200 80a1 	bhi.w	8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d056      	beq.n	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006b02:	e099      	b.n	8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b04:	4b88      	ldr	r3, [pc, #544]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d02d      	beq.n	8006b6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b10:	4b85      	ldr	r3, [pc, #532]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	08db      	lsrs	r3, r3, #3
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	4a84      	ldr	r2, [pc, #528]	@ (8006d2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	ee07 3a90 	vmov	s15, r3
 8006b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b6a:	e087      	b.n	8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bae:	e065      	b.n	8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc2:	4b59      	ldr	r3, [pc, #356]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bf2:	e043      	b.n	8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006d3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c06:	4b48      	ldr	r3, [pc, #288]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c36:	e021      	b.n	8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4a:	4b37      	ldr	r3, [pc, #220]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c80:	0a5b      	lsrs	r3, r3, #9
 8006c82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ca2:	ee17 2a90 	vmov	r2, s15
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006caa:	4b1f      	ldr	r3, [pc, #124]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cae:	0c1b      	lsrs	r3, r3, #16
 8006cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cb4:	ee07 3a90 	vmov	s15, r3
 8006cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd0:	ee17 2a90 	vmov	r2, s15
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006cd8:	4b13      	ldr	r3, [pc, #76]	@ (8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cdc:	0e1b      	lsrs	r3, r3, #24
 8006cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cfe:	ee17 2a90 	vmov	r2, s15
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d06:	e008      	b.n	8006d1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	609a      	str	r2, [r3, #8]
}
 8006d1a:	bf00      	nop
 8006d1c:	3724      	adds	r7, #36	@ 0x24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	58024400 	.word	0x58024400
 8006d2c:	03d09000 	.word	0x03d09000
 8006d30:	46000000 	.word	0x46000000
 8006d34:	4c742400 	.word	0x4c742400
 8006d38:	4a742400 	.word	0x4a742400
 8006d3c:	4bbebc20 	.word	0x4bbebc20

08006d40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b089      	sub	sp, #36	@ 0x24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d48:	4ba1      	ldr	r3, [pc, #644]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4c:	f003 0303 	and.w	r3, r3, #3
 8006d50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006d52:	4b9f      	ldr	r3, [pc, #636]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d56:	0d1b      	lsrs	r3, r3, #20
 8006d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d5e:	4b9c      	ldr	r3, [pc, #624]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d62:	0a1b      	lsrs	r3, r3, #8
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d6a:	4b99      	ldr	r3, [pc, #612]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d6e:	08db      	lsrs	r3, r3, #3
 8006d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	fb02 f303 	mul.w	r3, r2, r3
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 8111 	beq.w	8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	f000 8083 	beq.w	8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	f200 80a1 	bhi.w	8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d056      	beq.n	8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006daa:	e099      	b.n	8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dac:	4b88      	ldr	r3, [pc, #544]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d02d      	beq.n	8006e14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006db8:	4b85      	ldr	r3, [pc, #532]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	08db      	lsrs	r3, r3, #3
 8006dbe:	f003 0303 	and.w	r3, r3, #3
 8006dc2:	4a84      	ldr	r2, [pc, #528]	@ (8006fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	ee07 3a90 	vmov	s15, r3
 8006dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de2:	4b7b      	ldr	r3, [pc, #492]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006df6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e12:	e087      	b.n	8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006fdc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e26:	4b6a      	ldr	r3, [pc, #424]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e56:	e065      	b.n	8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	ee07 3a90 	vmov	s15, r3
 8006e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e6a:	4b59      	ldr	r3, [pc, #356]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e9a:	e043      	b.n	8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eae:	4b48      	ldr	r3, [pc, #288]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ec2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ede:	e021      	b.n	8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef2:	4b37      	ldr	r3, [pc, #220]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006f24:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f28:	0a5b      	lsrs	r3, r3, #9
 8006f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f4a:	ee17 2a90 	vmov	r2, s15
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006f52:	4b1f      	ldr	r3, [pc, #124]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	0c1b      	lsrs	r3, r3, #16
 8006f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f5c:	ee07 3a90 	vmov	s15, r3
 8006f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f78:	ee17 2a90 	vmov	r2, s15
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006f80:	4b13      	ldr	r3, [pc, #76]	@ (8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f84:	0e1b      	lsrs	r3, r3, #24
 8006f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa6:	ee17 2a90 	vmov	r2, s15
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006fae:	e008      	b.n	8006fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	609a      	str	r2, [r3, #8]
}
 8006fc2:	bf00      	nop
 8006fc4:	3724      	adds	r7, #36	@ 0x24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	58024400 	.word	0x58024400
 8006fd4:	03d09000 	.word	0x03d09000
 8006fd8:	46000000 	.word	0x46000000
 8006fdc:	4c742400 	.word	0x4c742400
 8006fe0:	4a742400 	.word	0x4a742400
 8006fe4:	4bbebc20 	.word	0x4bbebc20

08006fe8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b089      	sub	sp, #36	@ 0x24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ff0:	4ba0      	ldr	r3, [pc, #640]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff4:	f003 0303 	and.w	r3, r3, #3
 8006ff8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006ffa:	4b9e      	ldr	r3, [pc, #632]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffe:	091b      	lsrs	r3, r3, #4
 8007000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007004:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007006:	4b9b      	ldr	r3, [pc, #620]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007010:	4b98      	ldr	r3, [pc, #608]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007014:	08db      	lsrs	r3, r3, #3
 8007016:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	fb02 f303 	mul.w	r3, r2, r3
 8007020:	ee07 3a90 	vmov	s15, r3
 8007024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007028:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 8111 	beq.w	8007256 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	2b02      	cmp	r3, #2
 8007038:	f000 8083 	beq.w	8007142 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b02      	cmp	r3, #2
 8007040:	f200 80a1 	bhi.w	8007186 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d056      	beq.n	80070fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007050:	e099      	b.n	8007186 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007052:	4b88      	ldr	r3, [pc, #544]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d02d      	beq.n	80070ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800705e:	4b85      	ldr	r3, [pc, #532]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	08db      	lsrs	r3, r3, #3
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	4a83      	ldr	r2, [pc, #524]	@ (8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800706a:	fa22 f303 	lsr.w	r3, r2, r3
 800706e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	ee07 3a90 	vmov	s15, r3
 8007080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007088:	4b7a      	ldr	r3, [pc, #488]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800708a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007090:	ee07 3a90 	vmov	s15, r3
 8007094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007098:	ed97 6a03 	vldr	s12, [r7, #12]
 800709c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800727c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070b8:	e087      	b.n	80071ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	ee07 3a90 	vmov	s15, r3
 80070c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80070c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070cc:	4b69      	ldr	r3, [pc, #420]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d4:	ee07 3a90 	vmov	s15, r3
 80070d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800727c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070fc:	e065      	b.n	80071ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007108:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007284 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800710c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007110:	4b58      	ldr	r3, [pc, #352]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007118:	ee07 3a90 	vmov	s15, r3
 800711c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007120:	ed97 6a03 	vldr	s12, [r7, #12]
 8007124:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800727c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007130:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007140:	e043      	b.n	80071ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	ee07 3a90 	vmov	s15, r3
 8007148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007288 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007154:	4b47      	ldr	r3, [pc, #284]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007164:	ed97 6a03 	vldr	s12, [r7, #12]
 8007168:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800727c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800716c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007174:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007180:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007184:	e021      	b.n	80071ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	ee07 3a90 	vmov	s15, r3
 800718c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007190:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007198:	4b36      	ldr	r3, [pc, #216]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800719a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a0:	ee07 3a90 	vmov	s15, r3
 80071a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800727c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80071ca:	4b2a      	ldr	r3, [pc, #168]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ce:	0a5b      	lsrs	r3, r3, #9
 80071d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f0:	ee17 2a90 	vmov	r2, s15
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80071f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fc:	0c1b      	lsrs	r3, r3, #16
 80071fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800720e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007212:	edd7 6a07 	vldr	s13, [r7, #28]
 8007216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800721a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800721e:	ee17 2a90 	vmov	r2, s15
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007226:	4b13      	ldr	r3, [pc, #76]	@ (8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722a:	0e1b      	lsrs	r3, r3, #24
 800722c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007238:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800723c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007240:	edd7 6a07 	vldr	s13, [r7, #28]
 8007244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800724c:	ee17 2a90 	vmov	r2, s15
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007254:	e008      	b.n	8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	609a      	str	r2, [r3, #8]
}
 8007268:	bf00      	nop
 800726a:	3724      	adds	r7, #36	@ 0x24
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	58024400 	.word	0x58024400
 8007278:	03d09000 	.word	0x03d09000
 800727c:	46000000 	.word	0x46000000
 8007280:	4c742400 	.word	0x4c742400
 8007284:	4a742400 	.word	0x4a742400
 8007288:	4bbebc20 	.word	0x4bbebc20

0800728c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800729a:	4b53      	ldr	r3, [pc, #332]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 800729c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d101      	bne.n	80072aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e099      	b.n	80073de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072aa:	4b4f      	ldr	r3, [pc, #316]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a4e      	ldr	r2, [pc, #312]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 80072b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072b6:	f7fa f927 	bl	8001508 <HAL_GetTick>
 80072ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072bc:	e008      	b.n	80072d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072be:	f7fa f923 	bl	8001508 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d901      	bls.n	80072d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e086      	b.n	80073de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072d0:	4b45      	ldr	r3, [pc, #276]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1f0      	bne.n	80072be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072dc:	4b42      	ldr	r3, [pc, #264]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 80072de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	031b      	lsls	r3, r3, #12
 80072ea:	493f      	ldr	r1, [pc, #252]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	3b01      	subs	r3, #1
 8007300:	025b      	lsls	r3, r3, #9
 8007302:	b29b      	uxth	r3, r3
 8007304:	431a      	orrs	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	3b01      	subs	r3, #1
 800730c:	041b      	lsls	r3, r3, #16
 800730e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	3b01      	subs	r3, #1
 800731a:	061b      	lsls	r3, r3, #24
 800731c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007320:	4931      	ldr	r1, [pc, #196]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 8007322:	4313      	orrs	r3, r2
 8007324:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007326:	4b30      	ldr	r3, [pc, #192]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 8007328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	492d      	ldr	r1, [pc, #180]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 8007334:	4313      	orrs	r3, r2
 8007336:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007338:	4b2b      	ldr	r3, [pc, #172]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 800733a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733c:	f023 0220 	bic.w	r2, r3, #32
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	4928      	ldr	r1, [pc, #160]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 8007346:	4313      	orrs	r3, r2
 8007348:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800734a:	4b27      	ldr	r3, [pc, #156]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 800734c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734e:	4a26      	ldr	r2, [pc, #152]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 8007350:	f023 0310 	bic.w	r3, r3, #16
 8007354:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007356:	4b24      	ldr	r3, [pc, #144]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 8007358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800735a:	4b24      	ldr	r3, [pc, #144]	@ (80073ec <RCCEx_PLL2_Config+0x160>)
 800735c:	4013      	ands	r3, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	69d2      	ldr	r2, [r2, #28]
 8007362:	00d2      	lsls	r2, r2, #3
 8007364:	4920      	ldr	r1, [pc, #128]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 8007366:	4313      	orrs	r3, r2
 8007368:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800736a:	4b1f      	ldr	r3, [pc, #124]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 800736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736e:	4a1e      	ldr	r2, [pc, #120]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 8007370:	f043 0310 	orr.w	r3, r3, #16
 8007374:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d106      	bne.n	800738a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800737c:	4b1a      	ldr	r3, [pc, #104]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 800737e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007380:	4a19      	ldr	r2, [pc, #100]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 8007382:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007386:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007388:	e00f      	b.n	80073aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d106      	bne.n	800739e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007390:	4b15      	ldr	r3, [pc, #84]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 8007392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007394:	4a14      	ldr	r2, [pc, #80]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 8007396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800739a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800739c:	e005      	b.n	80073aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800739e:	4b12      	ldr	r3, [pc, #72]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 80073a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a2:	4a11      	ldr	r2, [pc, #68]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 80073a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073aa:	4b0f      	ldr	r3, [pc, #60]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a0e      	ldr	r2, [pc, #56]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 80073b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80073b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073b6:	f7fa f8a7 	bl	8001508 <HAL_GetTick>
 80073ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073bc:	e008      	b.n	80073d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073be:	f7fa f8a3 	bl	8001508 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e006      	b.n	80073de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073d0:	4b05      	ldr	r3, [pc, #20]	@ (80073e8 <RCCEx_PLL2_Config+0x15c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0f0      	beq.n	80073be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	58024400 	.word	0x58024400
 80073ec:	ffff0007 	.word	0xffff0007

080073f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073fe:	4b53      	ldr	r3, [pc, #332]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	2b03      	cmp	r3, #3
 8007408:	d101      	bne.n	800740e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e099      	b.n	8007542 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800740e:	4b4f      	ldr	r3, [pc, #316]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a4e      	ldr	r2, [pc, #312]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800741a:	f7fa f875 	bl	8001508 <HAL_GetTick>
 800741e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007420:	e008      	b.n	8007434 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007422:	f7fa f871 	bl	8001508 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d901      	bls.n	8007434 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e086      	b.n	8007542 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007434:	4b45      	ldr	r3, [pc, #276]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1f0      	bne.n	8007422 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007440:	4b42      	ldr	r3, [pc, #264]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007444:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	051b      	lsls	r3, r3, #20
 800744e:	493f      	ldr	r1, [pc, #252]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007450:	4313      	orrs	r3, r2
 8007452:	628b      	str	r3, [r1, #40]	@ 0x28
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	3b01      	subs	r3, #1
 800745a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	3b01      	subs	r3, #1
 8007464:	025b      	lsls	r3, r3, #9
 8007466:	b29b      	uxth	r3, r3
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	3b01      	subs	r3, #1
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	3b01      	subs	r3, #1
 800747e:	061b      	lsls	r3, r3, #24
 8007480:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007484:	4931      	ldr	r1, [pc, #196]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007486:	4313      	orrs	r3, r2
 8007488:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800748a:	4b30      	ldr	r3, [pc, #192]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	492d      	ldr	r1, [pc, #180]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007498:	4313      	orrs	r3, r2
 800749a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800749c:	4b2b      	ldr	r3, [pc, #172]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 800749e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	4928      	ldr	r1, [pc, #160]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074ae:	4b27      	ldr	r3, [pc, #156]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	4a26      	ldr	r2, [pc, #152]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 80074b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074ba:	4b24      	ldr	r3, [pc, #144]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 80074bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074be:	4b24      	ldr	r3, [pc, #144]	@ (8007550 <RCCEx_PLL3_Config+0x160>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	69d2      	ldr	r2, [r2, #28]
 80074c6:	00d2      	lsls	r2, r2, #3
 80074c8:	4920      	ldr	r1, [pc, #128]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074ce:	4b1f      	ldr	r3, [pc, #124]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 80074d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d2:	4a1e      	ldr	r2, [pc, #120]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 80074d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d106      	bne.n	80074ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074e0:	4b1a      	ldr	r3, [pc, #104]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	4a19      	ldr	r2, [pc, #100]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 80074e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80074ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074ec:	e00f      	b.n	800750e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d106      	bne.n	8007502 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80074f4:	4b15      	ldr	r3, [pc, #84]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 80074f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f8:	4a14      	ldr	r2, [pc, #80]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 80074fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80074fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007500:	e005      	b.n	800750e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007502:	4b12      	ldr	r3, [pc, #72]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007506:	4a11      	ldr	r2, [pc, #68]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007508:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800750c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800750e:	4b0f      	ldr	r3, [pc, #60]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a0e      	ldr	r2, [pc, #56]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751a:	f7f9 fff5 	bl	8001508 <HAL_GetTick>
 800751e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007520:	e008      	b.n	8007534 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007522:	f7f9 fff1 	bl	8001508 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d901      	bls.n	8007534 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e006      	b.n	8007542 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007534:	4b05      	ldr	r3, [pc, #20]	@ (800754c <RCCEx_PLL3_Config+0x15c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0f0      	beq.n	8007522 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	58024400 	.word	0x58024400
 8007550:	ffff0007 	.word	0xffff0007

08007554 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e10f      	b.n	8007786 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a87      	ldr	r2, [pc, #540]	@ (8007790 <HAL_SPI_Init+0x23c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00f      	beq.n	8007596 <HAL_SPI_Init+0x42>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a86      	ldr	r2, [pc, #536]	@ (8007794 <HAL_SPI_Init+0x240>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00a      	beq.n	8007596 <HAL_SPI_Init+0x42>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a84      	ldr	r2, [pc, #528]	@ (8007798 <HAL_SPI_Init+0x244>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d005      	beq.n	8007596 <HAL_SPI_Init+0x42>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	2b0f      	cmp	r3, #15
 8007590:	d901      	bls.n	8007596 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e0f7      	b.n	8007786 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f900 	bl	800779c <SPI_GetPacketSize>
 800759c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a7b      	ldr	r2, [pc, #492]	@ (8007790 <HAL_SPI_Init+0x23c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00c      	beq.n	80075c2 <HAL_SPI_Init+0x6e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a79      	ldr	r2, [pc, #484]	@ (8007794 <HAL_SPI_Init+0x240>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d007      	beq.n	80075c2 <HAL_SPI_Init+0x6e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a78      	ldr	r2, [pc, #480]	@ (8007798 <HAL_SPI_Init+0x244>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d002      	beq.n	80075c2 <HAL_SPI_Init+0x6e>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b08      	cmp	r3, #8
 80075c0:	d811      	bhi.n	80075e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075c6:	4a72      	ldr	r2, [pc, #456]	@ (8007790 <HAL_SPI_Init+0x23c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d009      	beq.n	80075e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a70      	ldr	r2, [pc, #448]	@ (8007794 <HAL_SPI_Init+0x240>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d004      	beq.n	80075e0 <HAL_SPI_Init+0x8c>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a6f      	ldr	r2, [pc, #444]	@ (8007798 <HAL_SPI_Init+0x244>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d104      	bne.n	80075ea <HAL_SPI_Init+0x96>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b10      	cmp	r3, #16
 80075e4:	d901      	bls.n	80075ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e0cd      	b.n	8007786 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d106      	bne.n	8007604 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7f9 fc68 	bl	8000ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0201 	bic.w	r2, r2, #1
 800761a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007626:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007630:	d119      	bne.n	8007666 <HAL_SPI_Init+0x112>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800763a:	d103      	bne.n	8007644 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007640:	2b00      	cmp	r3, #0
 8007642:	d008      	beq.n	8007656 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10c      	bne.n	8007666 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007650:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007654:	d107      	bne.n	8007666 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007664:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00f      	beq.n	8007692 <HAL_SPI_Init+0x13e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b06      	cmp	r3, #6
 8007678:	d90b      	bls.n	8007692 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	e007      	b.n	80076a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69da      	ldr	r2, [r3, #28]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	431a      	orrs	r2, r3
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b4:	ea42 0103 	orr.w	r1, r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076cc:	431a      	orrs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	431a      	orrs	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076f6:	431a      	orrs	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007702:	ea42 0103 	orr.w	r1, r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d113      	bne.n	8007742 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800772c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007740:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0201 	bic.w	r2, r2, #1
 8007750:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	40013000 	.word	0x40013000
 8007794:	40003800 	.word	0x40003800
 8007798:	40003c00 	.word	0x40003c00

0800779c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a8:	095b      	lsrs	r3, r3, #5
 80077aa:	3301      	adds	r3, #1
 80077ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	3301      	adds	r3, #1
 80077b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	3307      	adds	r3, #7
 80077ba:	08db      	lsrs	r3, r3, #3
 80077bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	fb02 f303 	mul.w	r3, r2, r3
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e049      	b.n	8007878 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d106      	bne.n	80077fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f841 	bl	8007880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3304      	adds	r3, #4
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f000 f9e7 	bl	8007be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d001      	beq.n	80078ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e054      	b.n	8007956 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0201 	orr.w	r2, r2, #1
 80078c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a26      	ldr	r2, [pc, #152]	@ (8007964 <HAL_TIM_Base_Start_IT+0xd0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d022      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x80>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d6:	d01d      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x80>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a22      	ldr	r2, [pc, #136]	@ (8007968 <HAL_TIM_Base_Start_IT+0xd4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d018      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x80>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a21      	ldr	r2, [pc, #132]	@ (800796c <HAL_TIM_Base_Start_IT+0xd8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d013      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x80>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007970 <HAL_TIM_Base_Start_IT+0xdc>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00e      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x80>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007974 <HAL_TIM_Base_Start_IT+0xe0>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d009      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x80>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a1c      	ldr	r2, [pc, #112]	@ (8007978 <HAL_TIM_Base_Start_IT+0xe4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d004      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x80>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a1b      	ldr	r2, [pc, #108]	@ (800797c <HAL_TIM_Base_Start_IT+0xe8>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d115      	bne.n	8007940 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	4b19      	ldr	r3, [pc, #100]	@ (8007980 <HAL_TIM_Base_Start_IT+0xec>)
 800791c:	4013      	ands	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b06      	cmp	r3, #6
 8007924:	d015      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0xbe>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800792c:	d011      	beq.n	8007952 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0201 	orr.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793e:	e008      	b.n	8007952 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0201 	orr.w	r2, r2, #1
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	e000      	b.n	8007954 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	40010000 	.word	0x40010000
 8007968:	40000400 	.word	0x40000400
 800796c:	40000800 	.word	0x40000800
 8007970:	40000c00 	.word	0x40000c00
 8007974:	40010400 	.word	0x40010400
 8007978:	40001800 	.word	0x40001800
 800797c:	40014000 	.word	0x40014000
 8007980:	00010007 	.word	0x00010007

08007984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d020      	beq.n	80079e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01b      	beq.n	80079e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0202 	mvn.w	r2, #2
 80079b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f8e9 	bl	8007ba6 <HAL_TIM_IC_CaptureCallback>
 80079d4:	e005      	b.n	80079e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f8db 	bl	8007b92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f8ec 	bl	8007bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d020      	beq.n	8007a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01b      	beq.n	8007a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f06f 0204 	mvn.w	r2, #4
 8007a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f8c3 	bl	8007ba6 <HAL_TIM_IC_CaptureCallback>
 8007a20:	e005      	b.n	8007a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f8b5 	bl	8007b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f8c6 	bl	8007bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d020      	beq.n	8007a80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01b      	beq.n	8007a80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f06f 0208 	mvn.w	r2, #8
 8007a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2204      	movs	r2, #4
 8007a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f89d 	bl	8007ba6 <HAL_TIM_IC_CaptureCallback>
 8007a6c:	e005      	b.n	8007a7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f88f 	bl	8007b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f8a0 	bl	8007bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f003 0310 	and.w	r3, r3, #16
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d020      	beq.n	8007acc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f003 0310 	and.w	r3, r3, #16
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01b      	beq.n	8007acc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f06f 0210 	mvn.w	r2, #16
 8007a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f877 	bl	8007ba6 <HAL_TIM_IC_CaptureCallback>
 8007ab8:	e005      	b.n	8007ac6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f869 	bl	8007b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f87a 	bl	8007bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00c      	beq.n	8007af0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0201 	mvn.w	r2, #1
 8007ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7f9 f984 	bl	8000df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d104      	bne.n	8007b04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00c      	beq.n	8007b1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f90d 	bl	8007d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00c      	beq.n	8007b42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f905 	bl	8007d4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00c      	beq.n	8007b66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f834 	bl	8007bce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00c      	beq.n	8007b8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f06f 0220 	mvn.w	r2, #32
 8007b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f8cd 	bl	8007d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b8a:	bf00      	nop
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
	...

08007be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a43      	ldr	r2, [pc, #268]	@ (8007d04 <TIM_Base_SetConfig+0x120>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d013      	beq.n	8007c24 <TIM_Base_SetConfig+0x40>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c02:	d00f      	beq.n	8007c24 <TIM_Base_SetConfig+0x40>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a40      	ldr	r2, [pc, #256]	@ (8007d08 <TIM_Base_SetConfig+0x124>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d00b      	beq.n	8007c24 <TIM_Base_SetConfig+0x40>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8007d0c <TIM_Base_SetConfig+0x128>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d007      	beq.n	8007c24 <TIM_Base_SetConfig+0x40>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a3e      	ldr	r2, [pc, #248]	@ (8007d10 <TIM_Base_SetConfig+0x12c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d003      	beq.n	8007c24 <TIM_Base_SetConfig+0x40>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a3d      	ldr	r2, [pc, #244]	@ (8007d14 <TIM_Base_SetConfig+0x130>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d108      	bne.n	8007c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a32      	ldr	r2, [pc, #200]	@ (8007d04 <TIM_Base_SetConfig+0x120>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d01f      	beq.n	8007c7e <TIM_Base_SetConfig+0x9a>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c44:	d01b      	beq.n	8007c7e <TIM_Base_SetConfig+0x9a>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a2f      	ldr	r2, [pc, #188]	@ (8007d08 <TIM_Base_SetConfig+0x124>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d017      	beq.n	8007c7e <TIM_Base_SetConfig+0x9a>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a2e      	ldr	r2, [pc, #184]	@ (8007d0c <TIM_Base_SetConfig+0x128>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d013      	beq.n	8007c7e <TIM_Base_SetConfig+0x9a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a2d      	ldr	r2, [pc, #180]	@ (8007d10 <TIM_Base_SetConfig+0x12c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00f      	beq.n	8007c7e <TIM_Base_SetConfig+0x9a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a2c      	ldr	r2, [pc, #176]	@ (8007d14 <TIM_Base_SetConfig+0x130>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d00b      	beq.n	8007c7e <TIM_Base_SetConfig+0x9a>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a2b      	ldr	r2, [pc, #172]	@ (8007d18 <TIM_Base_SetConfig+0x134>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d007      	beq.n	8007c7e <TIM_Base_SetConfig+0x9a>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a2a      	ldr	r2, [pc, #168]	@ (8007d1c <TIM_Base_SetConfig+0x138>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d003      	beq.n	8007c7e <TIM_Base_SetConfig+0x9a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a29      	ldr	r2, [pc, #164]	@ (8007d20 <TIM_Base_SetConfig+0x13c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d108      	bne.n	8007c90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a14      	ldr	r2, [pc, #80]	@ (8007d04 <TIM_Base_SetConfig+0x120>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d00f      	beq.n	8007cd6 <TIM_Base_SetConfig+0xf2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a16      	ldr	r2, [pc, #88]	@ (8007d14 <TIM_Base_SetConfig+0x130>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d00b      	beq.n	8007cd6 <TIM_Base_SetConfig+0xf2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a15      	ldr	r2, [pc, #84]	@ (8007d18 <TIM_Base_SetConfig+0x134>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d007      	beq.n	8007cd6 <TIM_Base_SetConfig+0xf2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a14      	ldr	r2, [pc, #80]	@ (8007d1c <TIM_Base_SetConfig+0x138>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d003      	beq.n	8007cd6 <TIM_Base_SetConfig+0xf2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a13      	ldr	r2, [pc, #76]	@ (8007d20 <TIM_Base_SetConfig+0x13c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d103      	bne.n	8007cde <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	691a      	ldr	r2, [r3, #16]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f043 0204 	orr.w	r2, r3, #4
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	601a      	str	r2, [r3, #0]
}
 8007cf6:	bf00      	nop
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40000400 	.word	0x40000400
 8007d0c:	40000800 	.word	0x40000800
 8007d10:	40000c00 	.word	0x40000c00
 8007d14:	40010400 	.word	0x40010400
 8007d18:	40014000 	.word	0x40014000
 8007d1c:	40014400 	.word	0x40014400
 8007d20:	40014800 	.word	0x40014800

08007d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e042      	b.n	8007df8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d106      	bne.n	8007d8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7f9 fad1 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2224      	movs	r2, #36	@ 0x24
 8007d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0201 	bic.w	r2, r2, #1
 8007da0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 faa8 	bl	8009300 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fd3d 	bl	8008830 <UART_SetConfig>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d101      	bne.n	8007dc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e01b      	b.n	8007df8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0201 	orr.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 fb27 	bl	8009444 <UART_CheckIdleState>
 8007df6:	4603      	mov	r3, r0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08a      	sub	sp, #40	@ 0x28
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	603b      	str	r3, [r7, #0]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	d17b      	bne.n	8007f12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <HAL_UART_Transmit+0x26>
 8007e20:	88fb      	ldrh	r3, [r7, #6]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e074      	b.n	8007f14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2221      	movs	r2, #33	@ 0x21
 8007e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e3a:	f7f9 fb65 	bl	8001508 <HAL_GetTick>
 8007e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	88fa      	ldrh	r2, [r7, #6]
 8007e44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	88fa      	ldrh	r2, [r7, #6]
 8007e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e58:	d108      	bne.n	8007e6c <HAL_UART_Transmit+0x6c>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d104      	bne.n	8007e6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	e003      	b.n	8007e74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e74:	e030      	b.n	8007ed8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2180      	movs	r1, #128	@ 0x80
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f001 fb89 	bl	8009598 <UART_WaitOnFlagUntilTimeout>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e03d      	b.n	8007f14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10b      	bne.n	8007eb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	3302      	adds	r3, #2
 8007eb2:	61bb      	str	r3, [r7, #24]
 8007eb4:	e007      	b.n	8007ec6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1c8      	bne.n	8007e76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2200      	movs	r2, #0
 8007eec:	2140      	movs	r1, #64	@ 0x40
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f001 fb52 	bl	8009598 <UART_WaitOnFlagUntilTimeout>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e006      	b.n	8007f14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	e000      	b.n	8007f14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007f12:	2302      	movs	r3, #2
  }
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3720      	adds	r7, #32
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b091      	sub	sp, #68	@ 0x44
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	4613      	mov	r3, r2
 8007f28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	d178      	bne.n	8008026 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <HAL_UART_Transmit_IT+0x24>
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e071      	b.n	8008028 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	88fa      	ldrh	r2, [r7, #6]
 8007f4e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	88fa      	ldrh	r2, [r7, #6]
 8007f56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2221      	movs	r2, #33	@ 0x21
 8007f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f78:	d12a      	bne.n	8007fd0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f82:	d107      	bne.n	8007f94 <HAL_UART_Transmit_IT+0x78>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d103      	bne.n	8007f94 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4a29      	ldr	r2, [pc, #164]	@ (8008034 <HAL_UART_Transmit_IT+0x118>)
 8007f90:	679a      	str	r2, [r3, #120]	@ 0x78
 8007f92:	e002      	b.n	8007f9a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a28      	ldr	r2, [pc, #160]	@ (8008038 <HAL_UART_Transmit_IT+0x11c>)
 8007f98:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3308      	adds	r3, #8
 8007fb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fba:	637a      	str	r2, [r7, #52]	@ 0x34
 8007fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007fc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e5      	bne.n	8007f9a <HAL_UART_Transmit_IT+0x7e>
 8007fce:	e028      	b.n	8008022 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fd8:	d107      	bne.n	8007fea <HAL_UART_Transmit_IT+0xce>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4a15      	ldr	r2, [pc, #84]	@ (800803c <HAL_UART_Transmit_IT+0x120>)
 8007fe6:	679a      	str	r2, [r3, #120]	@ 0x78
 8007fe8:	e002      	b.n	8007ff0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4a14      	ldr	r2, [pc, #80]	@ (8008040 <HAL_UART_Transmit_IT+0x124>)
 8007fee:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800800e:	623b      	str	r3, [r7, #32]
 8008010:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	69f9      	ldr	r1, [r7, #28]
 8008014:	6a3a      	ldr	r2, [r7, #32]
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	61bb      	str	r3, [r7, #24]
   return(result);
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e6      	bne.n	8007ff0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	e000      	b.n	8008028 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008026:	2302      	movs	r3, #2
  }
}
 8008028:	4618      	mov	r0, r3
 800802a:	3744      	adds	r7, #68	@ 0x44
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	080099bf 	.word	0x080099bf
 8008038:	080098df 	.word	0x080098df
 800803c:	0800981d 	.word	0x0800981d
 8008040:	08009765 	.word	0x08009765

08008044 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b0ba      	sub	sp, #232	@ 0xe8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800806a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800806e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008072:	4013      	ands	r3, r2
 8008074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800807c:	2b00      	cmp	r3, #0
 800807e:	d11b      	bne.n	80080b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b00      	cmp	r3, #0
 800808a:	d015      	beq.n	80080b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800808c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d105      	bne.n	80080a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800809c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d009      	beq.n	80080b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 8393 	beq.w	80087d4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
      }
      return;
 80080b6:	e38d      	b.n	80087d4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 8123 	beq.w	8008308 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080c6:	4b8d      	ldr	r3, [pc, #564]	@ (80082fc <HAL_UART_IRQHandler+0x2b8>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80080d2:	4b8b      	ldr	r3, [pc, #556]	@ (8008300 <HAL_UART_IRQHandler+0x2bc>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 8116 	beq.w	8008308 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d011      	beq.n	800810c <HAL_UART_IRQHandler+0xc8>
 80080e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2201      	movs	r2, #1
 80080fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008102:	f043 0201 	orr.w	r2, r3, #1
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800810c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d011      	beq.n	800813c <HAL_UART_IRQHandler+0xf8>
 8008118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2202      	movs	r2, #2
 800812a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008132:	f043 0204 	orr.w	r2, r3, #4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800813c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b00      	cmp	r3, #0
 8008146:	d011      	beq.n	800816c <HAL_UART_IRQHandler+0x128>
 8008148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2204      	movs	r2, #4
 800815a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008162:	f043 0202 	orr.w	r2, r3, #2
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800816c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008170:	f003 0308 	and.w	r3, r3, #8
 8008174:	2b00      	cmp	r3, #0
 8008176:	d017      	beq.n	80081a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008184:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008188:	4b5c      	ldr	r3, [pc, #368]	@ (80082fc <HAL_UART_IRQHandler+0x2b8>)
 800818a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2208      	movs	r2, #8
 8008196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819e:	f043 0208 	orr.w	r2, r3, #8
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d012      	beq.n	80081da <HAL_UART_IRQHandler+0x196>
 80081b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00c      	beq.n	80081da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d0:	f043 0220 	orr.w	r2, r3, #32
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 82f9 	beq.w	80087d8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d013      	beq.n	800821a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f6:	f003 0320 	and.w	r3, r3, #32
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d105      	bne.n	800820a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d007      	beq.n	800821a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008220:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822e:	2b40      	cmp	r3, #64	@ 0x40
 8008230:	d005      	beq.n	800823e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008236:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800823a:	2b00      	cmp	r3, #0
 800823c:	d054      	beq.n	80082e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 fa18 	bl	8009674 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800824e:	2b40      	cmp	r3, #64	@ 0x40
 8008250:	d146      	bne.n	80082e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008268:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800826c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800827e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008282:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800828a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1d9      	bne.n	8008252 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d017      	beq.n	80082d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ae:	4a15      	ldr	r2, [pc, #84]	@ (8008304 <HAL_UART_IRQHandler+0x2c0>)
 80082b0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fa ffa7 	bl	800320c <HAL_DMA_Abort_IT>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d019      	beq.n	80082f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80082d2:	4610      	mov	r0, r2
 80082d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d6:	e00f      	b.n	80082f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fa93 	bl	8008804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082de:	e00b      	b.n	80082f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fa8f 	bl	8008804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e6:	e007      	b.n	80082f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa8b 	bl	8008804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80082f6:	e26f      	b.n	80087d8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f8:	bf00      	nop
    return;
 80082fa:	e26d      	b.n	80087d8 <HAL_UART_IRQHandler+0x794>
 80082fc:	10000001 	.word	0x10000001
 8008300:	04000120 	.word	0x04000120
 8008304:	08009741 	.word	0x08009741

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800830c:	2b01      	cmp	r3, #1
 800830e:	f040 8203 	bne.w	8008718 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008316:	f003 0310 	and.w	r3, r3, #16
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 81fc 	beq.w	8008718 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008324:	f003 0310 	and.w	r3, r3, #16
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 81f5 	beq.w	8008718 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2210      	movs	r2, #16
 8008334:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008340:	2b40      	cmp	r3, #64	@ 0x40
 8008342:	f040 816d 	bne.w	8008620 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4aa4      	ldr	r2, [pc, #656]	@ (80085e0 <HAL_UART_IRQHandler+0x59c>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d068      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4aa1      	ldr	r2, [pc, #644]	@ (80085e4 <HAL_UART_IRQHandler+0x5a0>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d061      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a9f      	ldr	r2, [pc, #636]	@ (80085e8 <HAL_UART_IRQHandler+0x5a4>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d05a      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a9c      	ldr	r2, [pc, #624]	@ (80085ec <HAL_UART_IRQHandler+0x5a8>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d053      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a9a      	ldr	r2, [pc, #616]	@ (80085f0 <HAL_UART_IRQHandler+0x5ac>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d04c      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a97      	ldr	r2, [pc, #604]	@ (80085f4 <HAL_UART_IRQHandler+0x5b0>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d045      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a95      	ldr	r2, [pc, #596]	@ (80085f8 <HAL_UART_IRQHandler+0x5b4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d03e      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a92      	ldr	r2, [pc, #584]	@ (80085fc <HAL_UART_IRQHandler+0x5b8>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d037      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a90      	ldr	r2, [pc, #576]	@ (8008600 <HAL_UART_IRQHandler+0x5bc>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d030      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a8d      	ldr	r2, [pc, #564]	@ (8008604 <HAL_UART_IRQHandler+0x5c0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d029      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a8b      	ldr	r2, [pc, #556]	@ (8008608 <HAL_UART_IRQHandler+0x5c4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d022      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a88      	ldr	r2, [pc, #544]	@ (800860c <HAL_UART_IRQHandler+0x5c8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d01b      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a86      	ldr	r2, [pc, #536]	@ (8008610 <HAL_UART_IRQHandler+0x5cc>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d014      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a83      	ldr	r2, [pc, #524]	@ (8008614 <HAL_UART_IRQHandler+0x5d0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00d      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a81      	ldr	r2, [pc, #516]	@ (8008618 <HAL_UART_IRQHandler+0x5d4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d006      	beq.n	8008426 <HAL_UART_IRQHandler+0x3e2>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a7e      	ldr	r2, [pc, #504]	@ (800861c <HAL_UART_IRQHandler+0x5d8>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d106      	bne.n	8008434 <HAL_UART_IRQHandler+0x3f0>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	b29b      	uxth	r3, r3
 8008432:	e005      	b.n	8008440 <HAL_UART_IRQHandler+0x3fc>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	b29b      	uxth	r3, r3
 8008440:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80ad 	beq.w	80085a8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008454:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008458:	429a      	cmp	r2, r3
 800845a:	f080 80a5 	bcs.w	80085a8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008464:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008474:	f000 8087 	beq.w	8008586 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008480:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800848c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
 800849e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80084a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80084ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80084ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1da      	bne.n	8008478 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3308      	adds	r3, #8
 80084c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80084ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e1      	bne.n	80084c2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3308      	adds	r3, #8
 8008504:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800850e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3308      	adds	r3, #8
 800851e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008522:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008524:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008528:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e3      	bne.n	80084fe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008554:	f023 0310 	bic.w	r3, r3, #16
 8008558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008566:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008568:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800856c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e4      	bne.n	8008544 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008580:	4618      	mov	r0, r3
 8008582:	f7fa fb25 	bl	8002bd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2202      	movs	r2, #2
 800858a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008598:	b29b      	uxth	r3, r3
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	b29b      	uxth	r3, r3
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f939 	bl	8008818 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80085a6:	e119      	b.n	80087dc <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085b2:	429a      	cmp	r2, r3
 80085b4:	f040 8112 	bne.w	80087dc <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085c4:	f040 810a 	bne.w	80087dc <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f91e 	bl	8008818 <HAL_UARTEx_RxEventCallback>
      return;
 80085dc:	e0fe      	b.n	80087dc <HAL_UART_IRQHandler+0x798>
 80085de:	bf00      	nop
 80085e0:	40020010 	.word	0x40020010
 80085e4:	40020028 	.word	0x40020028
 80085e8:	40020040 	.word	0x40020040
 80085ec:	40020058 	.word	0x40020058
 80085f0:	40020070 	.word	0x40020070
 80085f4:	40020088 	.word	0x40020088
 80085f8:	400200a0 	.word	0x400200a0
 80085fc:	400200b8 	.word	0x400200b8
 8008600:	40020410 	.word	0x40020410
 8008604:	40020428 	.word	0x40020428
 8008608:	40020440 	.word	0x40020440
 800860c:	40020458 	.word	0x40020458
 8008610:	40020470 	.word	0x40020470
 8008614:	40020488 	.word	0x40020488
 8008618:	400204a0 	.word	0x400204a0
 800861c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800862c:	b29b      	uxth	r3, r3
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 80cf 	beq.w	80087e0 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 80ca 	beq.w	80087e0 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800865a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800866e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008670:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008672:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800867c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1e4      	bne.n	800864c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3308      	adds	r3, #8
 8008688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	623b      	str	r3, [r7, #32]
   return(result);
 8008692:	6a3a      	ldr	r2, [r7, #32]
 8008694:	4b55      	ldr	r3, [pc, #340]	@ (80087ec <HAL_UART_IRQHandler+0x7a8>)
 8008696:	4013      	ands	r3, r2
 8008698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3308      	adds	r3, #8
 80086a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80086a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80086a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e3      	bne.n	8008682 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2220      	movs	r2, #32
 80086be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	60fb      	str	r3, [r7, #12]
   return(result);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0310 	bic.w	r3, r3, #16
 80086e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	69b9      	ldr	r1, [r7, #24]
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	617b      	str	r3, [r7, #20]
   return(result);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e4      	bne.n	80086ce <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2202      	movs	r2, #2
 8008708:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800870a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f881 	bl	8008818 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008716:	e063      	b.n	80087e0 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800871c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00e      	beq.n	8008742 <HAL_UART_IRQHandler+0x6fe>
 8008724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d008      	beq.n	8008742 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008738:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 f9df 	bl	8009afe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008740:	e051      	b.n	80087e6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800874a:	2b00      	cmp	r3, #0
 800874c:	d014      	beq.n	8008778 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800874e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800875a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800875e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d008      	beq.n	8008778 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800876a:	2b00      	cmp	r3, #0
 800876c:	d03a      	beq.n	80087e4 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	4798      	blx	r3
    }
    return;
 8008776:	e035      	b.n	80087e4 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800877c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008780:	2b00      	cmp	r3, #0
 8008782:	d009      	beq.n	8008798 <HAL_UART_IRQHandler+0x754>
 8008784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 f989 	bl	8009aa8 <UART_EndTransmit_IT>
    return;
 8008796:	e026      	b.n	80087e6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800879c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d009      	beq.n	80087b8 <HAL_UART_IRQHandler+0x774>
 80087a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 f9b8 	bl	8009b26 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087b6:	e016      	b.n	80087e6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80087b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d010      	beq.n	80087e6 <HAL_UART_IRQHandler+0x7a2>
 80087c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	da0c      	bge.n	80087e6 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 f9a0 	bl	8009b12 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087d2:	e008      	b.n	80087e6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80087d4:	bf00      	nop
 80087d6:	e006      	b.n	80087e6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80087d8:	bf00      	nop
 80087da:	e004      	b.n	80087e6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80087dc:	bf00      	nop
 80087de:	e002      	b.n	80087e6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80087e0:	bf00      	nop
 80087e2:	e000      	b.n	80087e6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80087e4:	bf00      	nop
  }
}
 80087e6:	37e8      	adds	r7, #232	@ 0xe8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	effffffe 	.word	0xeffffffe

080087f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008834:	b092      	sub	sp, #72	@ 0x48
 8008836:	af00      	add	r7, sp, #0
 8008838:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	431a      	orrs	r2, r3
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	431a      	orrs	r2, r3
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	4313      	orrs	r3, r2
 8008856:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	4bbe      	ldr	r3, [pc, #760]	@ (8008b58 <UART_SetConfig+0x328>)
 8008860:	4013      	ands	r3, r2
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	6812      	ldr	r2, [r2, #0]
 8008866:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008868:	430b      	orrs	r3, r1
 800886a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4ab3      	ldr	r2, [pc, #716]	@ (8008b5c <UART_SetConfig+0x32c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d004      	beq.n	800889c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008898:	4313      	orrs	r3, r2
 800889a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689a      	ldr	r2, [r3, #8]
 80088a2:	4baf      	ldr	r3, [pc, #700]	@ (8008b60 <UART_SetConfig+0x330>)
 80088a4:	4013      	ands	r3, r2
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80088ac:	430b      	orrs	r3, r1
 80088ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b6:	f023 010f 	bic.w	r1, r3, #15
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4aa6      	ldr	r2, [pc, #664]	@ (8008b64 <UART_SetConfig+0x334>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d177      	bne.n	80089c0 <UART_SetConfig+0x190>
 80088d0:	4ba5      	ldr	r3, [pc, #660]	@ (8008b68 <UART_SetConfig+0x338>)
 80088d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088d8:	2b28      	cmp	r3, #40	@ 0x28
 80088da:	d86d      	bhi.n	80089b8 <UART_SetConfig+0x188>
 80088dc:	a201      	add	r2, pc, #4	@ (adr r2, 80088e4 <UART_SetConfig+0xb4>)
 80088de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e2:	bf00      	nop
 80088e4:	08008989 	.word	0x08008989
 80088e8:	080089b9 	.word	0x080089b9
 80088ec:	080089b9 	.word	0x080089b9
 80088f0:	080089b9 	.word	0x080089b9
 80088f4:	080089b9 	.word	0x080089b9
 80088f8:	080089b9 	.word	0x080089b9
 80088fc:	080089b9 	.word	0x080089b9
 8008900:	080089b9 	.word	0x080089b9
 8008904:	08008991 	.word	0x08008991
 8008908:	080089b9 	.word	0x080089b9
 800890c:	080089b9 	.word	0x080089b9
 8008910:	080089b9 	.word	0x080089b9
 8008914:	080089b9 	.word	0x080089b9
 8008918:	080089b9 	.word	0x080089b9
 800891c:	080089b9 	.word	0x080089b9
 8008920:	080089b9 	.word	0x080089b9
 8008924:	08008999 	.word	0x08008999
 8008928:	080089b9 	.word	0x080089b9
 800892c:	080089b9 	.word	0x080089b9
 8008930:	080089b9 	.word	0x080089b9
 8008934:	080089b9 	.word	0x080089b9
 8008938:	080089b9 	.word	0x080089b9
 800893c:	080089b9 	.word	0x080089b9
 8008940:	080089b9 	.word	0x080089b9
 8008944:	080089a1 	.word	0x080089a1
 8008948:	080089b9 	.word	0x080089b9
 800894c:	080089b9 	.word	0x080089b9
 8008950:	080089b9 	.word	0x080089b9
 8008954:	080089b9 	.word	0x080089b9
 8008958:	080089b9 	.word	0x080089b9
 800895c:	080089b9 	.word	0x080089b9
 8008960:	080089b9 	.word	0x080089b9
 8008964:	080089a9 	.word	0x080089a9
 8008968:	080089b9 	.word	0x080089b9
 800896c:	080089b9 	.word	0x080089b9
 8008970:	080089b9 	.word	0x080089b9
 8008974:	080089b9 	.word	0x080089b9
 8008978:	080089b9 	.word	0x080089b9
 800897c:	080089b9 	.word	0x080089b9
 8008980:	080089b9 	.word	0x080089b9
 8008984:	080089b1 	.word	0x080089b1
 8008988:	2301      	movs	r3, #1
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898e:	e222      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008990:	2304      	movs	r3, #4
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e21e      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008998:	2308      	movs	r3, #8
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899e:	e21a      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 80089a0:	2310      	movs	r3, #16
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e216      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 80089a8:	2320      	movs	r3, #32
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ae:	e212      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 80089b0:	2340      	movs	r3, #64	@ 0x40
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b6:	e20e      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 80089b8:	2380      	movs	r3, #128	@ 0x80
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089be:	e20a      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a69      	ldr	r2, [pc, #420]	@ (8008b6c <UART_SetConfig+0x33c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d130      	bne.n	8008a2c <UART_SetConfig+0x1fc>
 80089ca:	4b67      	ldr	r3, [pc, #412]	@ (8008b68 <UART_SetConfig+0x338>)
 80089cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	d826      	bhi.n	8008a24 <UART_SetConfig+0x1f4>
 80089d6:	a201      	add	r2, pc, #4	@ (adr r2, 80089dc <UART_SetConfig+0x1ac>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	080089f5 	.word	0x080089f5
 80089e0:	080089fd 	.word	0x080089fd
 80089e4:	08008a05 	.word	0x08008a05
 80089e8:	08008a0d 	.word	0x08008a0d
 80089ec:	08008a15 	.word	0x08008a15
 80089f0:	08008a1d 	.word	0x08008a1d
 80089f4:	2300      	movs	r3, #0
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e1ec      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 80089fc:	2304      	movs	r3, #4
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e1e8      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a04:	2308      	movs	r3, #8
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	e1e4      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a0c:	2310      	movs	r3, #16
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e1e0      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a14:	2320      	movs	r3, #32
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1a:	e1dc      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a1c:	2340      	movs	r3, #64	@ 0x40
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a22:	e1d8      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a24:	2380      	movs	r3, #128	@ 0x80
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2a:	e1d4      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a4f      	ldr	r2, [pc, #316]	@ (8008b70 <UART_SetConfig+0x340>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d130      	bne.n	8008a98 <UART_SetConfig+0x268>
 8008a36:	4b4c      	ldr	r3, [pc, #304]	@ (8008b68 <UART_SetConfig+0x338>)
 8008a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a3a:	f003 0307 	and.w	r3, r3, #7
 8008a3e:	2b05      	cmp	r3, #5
 8008a40:	d826      	bhi.n	8008a90 <UART_SetConfig+0x260>
 8008a42:	a201      	add	r2, pc, #4	@ (adr r2, 8008a48 <UART_SetConfig+0x218>)
 8008a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a48:	08008a61 	.word	0x08008a61
 8008a4c:	08008a69 	.word	0x08008a69
 8008a50:	08008a71 	.word	0x08008a71
 8008a54:	08008a79 	.word	0x08008a79
 8008a58:	08008a81 	.word	0x08008a81
 8008a5c:	08008a89 	.word	0x08008a89
 8008a60:	2300      	movs	r3, #0
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e1b6      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a68:	2304      	movs	r3, #4
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e1b2      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a70:	2308      	movs	r3, #8
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e1ae      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a78:	2310      	movs	r3, #16
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e1aa      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a80:	2320      	movs	r3, #32
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a86:	e1a6      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a88:	2340      	movs	r3, #64	@ 0x40
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8e:	e1a2      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a90:	2380      	movs	r3, #128	@ 0x80
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a96:	e19e      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a35      	ldr	r2, [pc, #212]	@ (8008b74 <UART_SetConfig+0x344>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d130      	bne.n	8008b04 <UART_SetConfig+0x2d4>
 8008aa2:	4b31      	ldr	r3, [pc, #196]	@ (8008b68 <UART_SetConfig+0x338>)
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b05      	cmp	r3, #5
 8008aac:	d826      	bhi.n	8008afc <UART_SetConfig+0x2cc>
 8008aae:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab4 <UART_SetConfig+0x284>)
 8008ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab4:	08008acd 	.word	0x08008acd
 8008ab8:	08008ad5 	.word	0x08008ad5
 8008abc:	08008add 	.word	0x08008add
 8008ac0:	08008ae5 	.word	0x08008ae5
 8008ac4:	08008aed 	.word	0x08008aed
 8008ac8:	08008af5 	.word	0x08008af5
 8008acc:	2300      	movs	r3, #0
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e180      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ada:	e17c      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008adc:	2308      	movs	r3, #8
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae2:	e178      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aea:	e174      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008aec:	2320      	movs	r3, #32
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af2:	e170      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008af4:	2340      	movs	r3, #64	@ 0x40
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afa:	e16c      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008afc:	2380      	movs	r3, #128	@ 0x80
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b02:	e168      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a1b      	ldr	r2, [pc, #108]	@ (8008b78 <UART_SetConfig+0x348>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d142      	bne.n	8008b94 <UART_SetConfig+0x364>
 8008b0e:	4b16      	ldr	r3, [pc, #88]	@ (8008b68 <UART_SetConfig+0x338>)
 8008b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b05      	cmp	r3, #5
 8008b18:	d838      	bhi.n	8008b8c <UART_SetConfig+0x35c>
 8008b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b20 <UART_SetConfig+0x2f0>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008b39 	.word	0x08008b39
 8008b24:	08008b41 	.word	0x08008b41
 8008b28:	08008b49 	.word	0x08008b49
 8008b2c:	08008b51 	.word	0x08008b51
 8008b30:	08008b7d 	.word	0x08008b7d
 8008b34:	08008b85 	.word	0x08008b85
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3e:	e14a      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008b40:	2304      	movs	r3, #4
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b46:	e146      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008b48:	2308      	movs	r3, #8
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4e:	e142      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008b50:	2310      	movs	r3, #16
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b56:	e13e      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008b58:	cfff69f3 	.word	0xcfff69f3
 8008b5c:	58000c00 	.word	0x58000c00
 8008b60:	11fff4ff 	.word	0x11fff4ff
 8008b64:	40011000 	.word	0x40011000
 8008b68:	58024400 	.word	0x58024400
 8008b6c:	40004400 	.word	0x40004400
 8008b70:	40004800 	.word	0x40004800
 8008b74:	40004c00 	.word	0x40004c00
 8008b78:	40005000 	.word	0x40005000
 8008b7c:	2320      	movs	r3, #32
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b82:	e128      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008b84:	2340      	movs	r3, #64	@ 0x40
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8a:	e124      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008b8c:	2380      	movs	r3, #128	@ 0x80
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b92:	e120      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4acb      	ldr	r2, [pc, #812]	@ (8008ec8 <UART_SetConfig+0x698>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d176      	bne.n	8008c8c <UART_SetConfig+0x45c>
 8008b9e:	4bcb      	ldr	r3, [pc, #812]	@ (8008ecc <UART_SetConfig+0x69c>)
 8008ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ba6:	2b28      	cmp	r3, #40	@ 0x28
 8008ba8:	d86c      	bhi.n	8008c84 <UART_SetConfig+0x454>
 8008baa:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb0 <UART_SetConfig+0x380>)
 8008bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb0:	08008c55 	.word	0x08008c55
 8008bb4:	08008c85 	.word	0x08008c85
 8008bb8:	08008c85 	.word	0x08008c85
 8008bbc:	08008c85 	.word	0x08008c85
 8008bc0:	08008c85 	.word	0x08008c85
 8008bc4:	08008c85 	.word	0x08008c85
 8008bc8:	08008c85 	.word	0x08008c85
 8008bcc:	08008c85 	.word	0x08008c85
 8008bd0:	08008c5d 	.word	0x08008c5d
 8008bd4:	08008c85 	.word	0x08008c85
 8008bd8:	08008c85 	.word	0x08008c85
 8008bdc:	08008c85 	.word	0x08008c85
 8008be0:	08008c85 	.word	0x08008c85
 8008be4:	08008c85 	.word	0x08008c85
 8008be8:	08008c85 	.word	0x08008c85
 8008bec:	08008c85 	.word	0x08008c85
 8008bf0:	08008c65 	.word	0x08008c65
 8008bf4:	08008c85 	.word	0x08008c85
 8008bf8:	08008c85 	.word	0x08008c85
 8008bfc:	08008c85 	.word	0x08008c85
 8008c00:	08008c85 	.word	0x08008c85
 8008c04:	08008c85 	.word	0x08008c85
 8008c08:	08008c85 	.word	0x08008c85
 8008c0c:	08008c85 	.word	0x08008c85
 8008c10:	08008c6d 	.word	0x08008c6d
 8008c14:	08008c85 	.word	0x08008c85
 8008c18:	08008c85 	.word	0x08008c85
 8008c1c:	08008c85 	.word	0x08008c85
 8008c20:	08008c85 	.word	0x08008c85
 8008c24:	08008c85 	.word	0x08008c85
 8008c28:	08008c85 	.word	0x08008c85
 8008c2c:	08008c85 	.word	0x08008c85
 8008c30:	08008c75 	.word	0x08008c75
 8008c34:	08008c85 	.word	0x08008c85
 8008c38:	08008c85 	.word	0x08008c85
 8008c3c:	08008c85 	.word	0x08008c85
 8008c40:	08008c85 	.word	0x08008c85
 8008c44:	08008c85 	.word	0x08008c85
 8008c48:	08008c85 	.word	0x08008c85
 8008c4c:	08008c85 	.word	0x08008c85
 8008c50:	08008c7d 	.word	0x08008c7d
 8008c54:	2301      	movs	r3, #1
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e0bc      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e0b8      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008c64:	2308      	movs	r3, #8
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6a:	e0b4      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c72:	e0b0      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008c74:	2320      	movs	r3, #32
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7a:	e0ac      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008c7c:	2340      	movs	r3, #64	@ 0x40
 8008c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c82:	e0a8      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008c84:	2380      	movs	r3, #128	@ 0x80
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8a:	e0a4      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a8f      	ldr	r2, [pc, #572]	@ (8008ed0 <UART_SetConfig+0x6a0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d130      	bne.n	8008cf8 <UART_SetConfig+0x4c8>
 8008c96:	4b8d      	ldr	r3, [pc, #564]	@ (8008ecc <UART_SetConfig+0x69c>)
 8008c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c9a:	f003 0307 	and.w	r3, r3, #7
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d826      	bhi.n	8008cf0 <UART_SetConfig+0x4c0>
 8008ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca8 <UART_SetConfig+0x478>)
 8008ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca8:	08008cc1 	.word	0x08008cc1
 8008cac:	08008cc9 	.word	0x08008cc9
 8008cb0:	08008cd1 	.word	0x08008cd1
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08008ce1 	.word	0x08008ce1
 8008cbc:	08008ce9 	.word	0x08008ce9
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e086      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cce:	e082      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008cd0:	2308      	movs	r3, #8
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd6:	e07e      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008cd8:	2310      	movs	r3, #16
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e07a      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce6:	e076      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008ce8:	2340      	movs	r3, #64	@ 0x40
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cee:	e072      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008cf0:	2380      	movs	r3, #128	@ 0x80
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf6:	e06e      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a75      	ldr	r2, [pc, #468]	@ (8008ed4 <UART_SetConfig+0x6a4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d130      	bne.n	8008d64 <UART_SetConfig+0x534>
 8008d02:	4b72      	ldr	r3, [pc, #456]	@ (8008ecc <UART_SetConfig+0x69c>)
 8008d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	d826      	bhi.n	8008d5c <UART_SetConfig+0x52c>
 8008d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d14 <UART_SetConfig+0x4e4>)
 8008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d14:	08008d2d 	.word	0x08008d2d
 8008d18:	08008d35 	.word	0x08008d35
 8008d1c:	08008d3d 	.word	0x08008d3d
 8008d20:	08008d45 	.word	0x08008d45
 8008d24:	08008d4d 	.word	0x08008d4d
 8008d28:	08008d55 	.word	0x08008d55
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e050      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008d34:	2304      	movs	r3, #4
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e04c      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e048      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008d44:	2310      	movs	r3, #16
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e044      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d52:	e040      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008d54:	2340      	movs	r3, #64	@ 0x40
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5a:	e03c      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008d5c:	2380      	movs	r3, #128	@ 0x80
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d62:	e038      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a5b      	ldr	r2, [pc, #364]	@ (8008ed8 <UART_SetConfig+0x6a8>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d130      	bne.n	8008dd0 <UART_SetConfig+0x5a0>
 8008d6e:	4b57      	ldr	r3, [pc, #348]	@ (8008ecc <UART_SetConfig+0x69c>)
 8008d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b05      	cmp	r3, #5
 8008d78:	d826      	bhi.n	8008dc8 <UART_SetConfig+0x598>
 8008d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d80 <UART_SetConfig+0x550>)
 8008d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d80:	08008d99 	.word	0x08008d99
 8008d84:	08008da1 	.word	0x08008da1
 8008d88:	08008da9 	.word	0x08008da9
 8008d8c:	08008db1 	.word	0x08008db1
 8008d90:	08008db9 	.word	0x08008db9
 8008d94:	08008dc1 	.word	0x08008dc1
 8008d98:	2302      	movs	r3, #2
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e01a      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008da0:	2304      	movs	r3, #4
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e016      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008da8:	2308      	movs	r3, #8
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e012      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008db0:	2310      	movs	r3, #16
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e00e      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008db8:	2320      	movs	r3, #32
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dbe:	e00a      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008dc0:	2340      	movs	r3, #64	@ 0x40
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc6:	e006      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008dc8:	2380      	movs	r3, #128	@ 0x80
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dce:	e002      	b.n	8008dd6 <UART_SetConfig+0x5a6>
 8008dd0:	2380      	movs	r3, #128	@ 0x80
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a3f      	ldr	r2, [pc, #252]	@ (8008ed8 <UART_SetConfig+0x6a8>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	f040 80f8 	bne.w	8008fd2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008de2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008de6:	2b20      	cmp	r3, #32
 8008de8:	dc46      	bgt.n	8008e78 <UART_SetConfig+0x648>
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	f2c0 8082 	blt.w	8008ef4 <UART_SetConfig+0x6c4>
 8008df0:	3b02      	subs	r3, #2
 8008df2:	2b1e      	cmp	r3, #30
 8008df4:	d87e      	bhi.n	8008ef4 <UART_SetConfig+0x6c4>
 8008df6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dfc <UART_SetConfig+0x5cc>)
 8008df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfc:	08008e7f 	.word	0x08008e7f
 8008e00:	08008ef5 	.word	0x08008ef5
 8008e04:	08008e87 	.word	0x08008e87
 8008e08:	08008ef5 	.word	0x08008ef5
 8008e0c:	08008ef5 	.word	0x08008ef5
 8008e10:	08008ef5 	.word	0x08008ef5
 8008e14:	08008e97 	.word	0x08008e97
 8008e18:	08008ef5 	.word	0x08008ef5
 8008e1c:	08008ef5 	.word	0x08008ef5
 8008e20:	08008ef5 	.word	0x08008ef5
 8008e24:	08008ef5 	.word	0x08008ef5
 8008e28:	08008ef5 	.word	0x08008ef5
 8008e2c:	08008ef5 	.word	0x08008ef5
 8008e30:	08008ef5 	.word	0x08008ef5
 8008e34:	08008ea7 	.word	0x08008ea7
 8008e38:	08008ef5 	.word	0x08008ef5
 8008e3c:	08008ef5 	.word	0x08008ef5
 8008e40:	08008ef5 	.word	0x08008ef5
 8008e44:	08008ef5 	.word	0x08008ef5
 8008e48:	08008ef5 	.word	0x08008ef5
 8008e4c:	08008ef5 	.word	0x08008ef5
 8008e50:	08008ef5 	.word	0x08008ef5
 8008e54:	08008ef5 	.word	0x08008ef5
 8008e58:	08008ef5 	.word	0x08008ef5
 8008e5c:	08008ef5 	.word	0x08008ef5
 8008e60:	08008ef5 	.word	0x08008ef5
 8008e64:	08008ef5 	.word	0x08008ef5
 8008e68:	08008ef5 	.word	0x08008ef5
 8008e6c:	08008ef5 	.word	0x08008ef5
 8008e70:	08008ef5 	.word	0x08008ef5
 8008e74:	08008ee7 	.word	0x08008ee7
 8008e78:	2b40      	cmp	r3, #64	@ 0x40
 8008e7a:	d037      	beq.n	8008eec <UART_SetConfig+0x6bc>
 8008e7c:	e03a      	b.n	8008ef4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008e7e:	f7fd fdf5 	bl	8006a6c <HAL_RCCEx_GetD3PCLK1Freq>
 8008e82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e84:	e03c      	b.n	8008f00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fd fe04 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e94:	e034      	b.n	8008f00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e96:	f107 0318 	add.w	r3, r7, #24
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fd ff50 	bl	8006d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ea4:	e02c      	b.n	8008f00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ea6:	4b09      	ldr	r3, [pc, #36]	@ (8008ecc <UART_SetConfig+0x69c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d016      	beq.n	8008ee0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008eb2:	4b06      	ldr	r3, [pc, #24]	@ (8008ecc <UART_SetConfig+0x69c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	08db      	lsrs	r3, r3, #3
 8008eb8:	f003 0303 	and.w	r3, r3, #3
 8008ebc:	4a07      	ldr	r2, [pc, #28]	@ (8008edc <UART_SetConfig+0x6ac>)
 8008ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ec4:	e01c      	b.n	8008f00 <UART_SetConfig+0x6d0>
 8008ec6:	bf00      	nop
 8008ec8:	40011400 	.word	0x40011400
 8008ecc:	58024400 	.word	0x58024400
 8008ed0:	40007800 	.word	0x40007800
 8008ed4:	40007c00 	.word	0x40007c00
 8008ed8:	58000c00 	.word	0x58000c00
 8008edc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008ee0:	4b9d      	ldr	r3, [pc, #628]	@ (8009158 <UART_SetConfig+0x928>)
 8008ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee4:	e00c      	b.n	8008f00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ee6:	4b9d      	ldr	r3, [pc, #628]	@ (800915c <UART_SetConfig+0x92c>)
 8008ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eea:	e009      	b.n	8008f00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef2:	e005      	b.n	8008f00 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008efe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 81de 	beq.w	80092c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0c:	4a94      	ldr	r2, [pc, #592]	@ (8009160 <UART_SetConfig+0x930>)
 8008f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f12:	461a      	mov	r2, r3
 8008f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f16:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f1a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	4613      	mov	r3, r2
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	4413      	add	r3, r2
 8008f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d305      	bcc.n	8008f38 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d903      	bls.n	8008f40 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f3e:	e1c1      	b.n	80092c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f42:	2200      	movs	r2, #0
 8008f44:	60bb      	str	r3, [r7, #8]
 8008f46:	60fa      	str	r2, [r7, #12]
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4c:	4a84      	ldr	r2, [pc, #528]	@ (8009160 <UART_SetConfig+0x930>)
 8008f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	2200      	movs	r2, #0
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f62:	f7f7 fa0d 	bl	8000380 <__aeabi_uldivmod>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	f04f 0200 	mov.w	r2, #0
 8008f72:	f04f 0300 	mov.w	r3, #0
 8008f76:	020b      	lsls	r3, r1, #8
 8008f78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f7c:	0202      	lsls	r2, r0, #8
 8008f7e:	6979      	ldr	r1, [r7, #20]
 8008f80:	6849      	ldr	r1, [r1, #4]
 8008f82:	0849      	lsrs	r1, r1, #1
 8008f84:	2000      	movs	r0, #0
 8008f86:	460c      	mov	r4, r1
 8008f88:	4605      	mov	r5, r0
 8008f8a:	eb12 0804 	adds.w	r8, r2, r4
 8008f8e:	eb43 0905 	adc.w	r9, r3, r5
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	469a      	mov	sl, r3
 8008f9a:	4693      	mov	fp, r2
 8008f9c:	4652      	mov	r2, sl
 8008f9e:	465b      	mov	r3, fp
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	f7f7 f9ec 	bl	8000380 <__aeabi_uldivmod>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4613      	mov	r3, r2
 8008fae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fb6:	d308      	bcc.n	8008fca <UART_SetConfig+0x79a>
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fbe:	d204      	bcs.n	8008fca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fc6:	60da      	str	r2, [r3, #12]
 8008fc8:	e17c      	b.n	80092c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008fd0:	e178      	b.n	80092c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fda:	f040 80c5 	bne.w	8009168 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008fde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	2b20      	cmp	r3, #32
 8008fe4:	dc48      	bgt.n	8009078 <UART_SetConfig+0x848>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	db7b      	blt.n	80090e2 <UART_SetConfig+0x8b2>
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	d879      	bhi.n	80090e2 <UART_SetConfig+0x8b2>
 8008fee:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff4 <UART_SetConfig+0x7c4>)
 8008ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff4:	0800907f 	.word	0x0800907f
 8008ff8:	08009087 	.word	0x08009087
 8008ffc:	080090e3 	.word	0x080090e3
 8009000:	080090e3 	.word	0x080090e3
 8009004:	0800908f 	.word	0x0800908f
 8009008:	080090e3 	.word	0x080090e3
 800900c:	080090e3 	.word	0x080090e3
 8009010:	080090e3 	.word	0x080090e3
 8009014:	0800909f 	.word	0x0800909f
 8009018:	080090e3 	.word	0x080090e3
 800901c:	080090e3 	.word	0x080090e3
 8009020:	080090e3 	.word	0x080090e3
 8009024:	080090e3 	.word	0x080090e3
 8009028:	080090e3 	.word	0x080090e3
 800902c:	080090e3 	.word	0x080090e3
 8009030:	080090e3 	.word	0x080090e3
 8009034:	080090af 	.word	0x080090af
 8009038:	080090e3 	.word	0x080090e3
 800903c:	080090e3 	.word	0x080090e3
 8009040:	080090e3 	.word	0x080090e3
 8009044:	080090e3 	.word	0x080090e3
 8009048:	080090e3 	.word	0x080090e3
 800904c:	080090e3 	.word	0x080090e3
 8009050:	080090e3 	.word	0x080090e3
 8009054:	080090e3 	.word	0x080090e3
 8009058:	080090e3 	.word	0x080090e3
 800905c:	080090e3 	.word	0x080090e3
 8009060:	080090e3 	.word	0x080090e3
 8009064:	080090e3 	.word	0x080090e3
 8009068:	080090e3 	.word	0x080090e3
 800906c:	080090e3 	.word	0x080090e3
 8009070:	080090e3 	.word	0x080090e3
 8009074:	080090d5 	.word	0x080090d5
 8009078:	2b40      	cmp	r3, #64	@ 0x40
 800907a:	d02e      	beq.n	80090da <UART_SetConfig+0x8aa>
 800907c:	e031      	b.n	80090e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800907e:	f7fb fcfd 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 8009082:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009084:	e033      	b.n	80090ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009086:	f7fb fd0f 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 800908a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800908c:	e02f      	b.n	80090ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800908e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009092:	4618      	mov	r0, r3
 8009094:	f7fd fd00 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800909c:	e027      	b.n	80090ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800909e:	f107 0318 	add.w	r3, r7, #24
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fd fe4c 	bl	8006d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ac:	e01f      	b.n	80090ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090ae:	4b2d      	ldr	r3, [pc, #180]	@ (8009164 <UART_SetConfig+0x934>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0320 	and.w	r3, r3, #32
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d009      	beq.n	80090ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009164 <UART_SetConfig+0x934>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	08db      	lsrs	r3, r3, #3
 80090c0:	f003 0303 	and.w	r3, r3, #3
 80090c4:	4a24      	ldr	r2, [pc, #144]	@ (8009158 <UART_SetConfig+0x928>)
 80090c6:	fa22 f303 	lsr.w	r3, r2, r3
 80090ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090cc:	e00f      	b.n	80090ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80090ce:	4b22      	ldr	r3, [pc, #136]	@ (8009158 <UART_SetConfig+0x928>)
 80090d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090d2:	e00c      	b.n	80090ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090d4:	4b21      	ldr	r3, [pc, #132]	@ (800915c <UART_SetConfig+0x92c>)
 80090d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090d8:	e009      	b.n	80090ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090e0:	e005      	b.n	80090ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80090ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 80e7 	beq.w	80092c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fa:	4a19      	ldr	r2, [pc, #100]	@ (8009160 <UART_SetConfig+0x930>)
 80090fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009100:	461a      	mov	r2, r3
 8009102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009104:	fbb3 f3f2 	udiv	r3, r3, r2
 8009108:	005a      	lsls	r2, r3, #1
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	085b      	lsrs	r3, r3, #1
 8009110:	441a      	add	r2, r3
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	fbb2 f3f3 	udiv	r3, r2, r3
 800911a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800911c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911e:	2b0f      	cmp	r3, #15
 8009120:	d916      	bls.n	8009150 <UART_SetConfig+0x920>
 8009122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009128:	d212      	bcs.n	8009150 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800912a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912c:	b29b      	uxth	r3, r3
 800912e:	f023 030f 	bic.w	r3, r3, #15
 8009132:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009136:	085b      	lsrs	r3, r3, #1
 8009138:	b29b      	uxth	r3, r3
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	b29a      	uxth	r2, r3
 8009140:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009142:	4313      	orrs	r3, r2
 8009144:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800914c:	60da      	str	r2, [r3, #12]
 800914e:	e0b9      	b.n	80092c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009156:	e0b5      	b.n	80092c4 <UART_SetConfig+0xa94>
 8009158:	03d09000 	.word	0x03d09000
 800915c:	003d0900 	.word	0x003d0900
 8009160:	0800da80 	.word	0x0800da80
 8009164:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009168:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800916c:	2b20      	cmp	r3, #32
 800916e:	dc49      	bgt.n	8009204 <UART_SetConfig+0x9d4>
 8009170:	2b00      	cmp	r3, #0
 8009172:	db7c      	blt.n	800926e <UART_SetConfig+0xa3e>
 8009174:	2b20      	cmp	r3, #32
 8009176:	d87a      	bhi.n	800926e <UART_SetConfig+0xa3e>
 8009178:	a201      	add	r2, pc, #4	@ (adr r2, 8009180 <UART_SetConfig+0x950>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	0800920b 	.word	0x0800920b
 8009184:	08009213 	.word	0x08009213
 8009188:	0800926f 	.word	0x0800926f
 800918c:	0800926f 	.word	0x0800926f
 8009190:	0800921b 	.word	0x0800921b
 8009194:	0800926f 	.word	0x0800926f
 8009198:	0800926f 	.word	0x0800926f
 800919c:	0800926f 	.word	0x0800926f
 80091a0:	0800922b 	.word	0x0800922b
 80091a4:	0800926f 	.word	0x0800926f
 80091a8:	0800926f 	.word	0x0800926f
 80091ac:	0800926f 	.word	0x0800926f
 80091b0:	0800926f 	.word	0x0800926f
 80091b4:	0800926f 	.word	0x0800926f
 80091b8:	0800926f 	.word	0x0800926f
 80091bc:	0800926f 	.word	0x0800926f
 80091c0:	0800923b 	.word	0x0800923b
 80091c4:	0800926f 	.word	0x0800926f
 80091c8:	0800926f 	.word	0x0800926f
 80091cc:	0800926f 	.word	0x0800926f
 80091d0:	0800926f 	.word	0x0800926f
 80091d4:	0800926f 	.word	0x0800926f
 80091d8:	0800926f 	.word	0x0800926f
 80091dc:	0800926f 	.word	0x0800926f
 80091e0:	0800926f 	.word	0x0800926f
 80091e4:	0800926f 	.word	0x0800926f
 80091e8:	0800926f 	.word	0x0800926f
 80091ec:	0800926f 	.word	0x0800926f
 80091f0:	0800926f 	.word	0x0800926f
 80091f4:	0800926f 	.word	0x0800926f
 80091f8:	0800926f 	.word	0x0800926f
 80091fc:	0800926f 	.word	0x0800926f
 8009200:	08009261 	.word	0x08009261
 8009204:	2b40      	cmp	r3, #64	@ 0x40
 8009206:	d02e      	beq.n	8009266 <UART_SetConfig+0xa36>
 8009208:	e031      	b.n	800926e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800920a:	f7fb fc37 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 800920e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009210:	e033      	b.n	800927a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009212:	f7fb fc49 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 8009216:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009218:	e02f      	b.n	800927a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800921a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800921e:	4618      	mov	r0, r3
 8009220:	f7fd fc3a 	bl	8006a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009228:	e027      	b.n	800927a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800922a:	f107 0318 	add.w	r3, r7, #24
 800922e:	4618      	mov	r0, r3
 8009230:	f7fd fd86 	bl	8006d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009238:	e01f      	b.n	800927a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800923a:	4b2d      	ldr	r3, [pc, #180]	@ (80092f0 <UART_SetConfig+0xac0>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0320 	and.w	r3, r3, #32
 8009242:	2b00      	cmp	r3, #0
 8009244:	d009      	beq.n	800925a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009246:	4b2a      	ldr	r3, [pc, #168]	@ (80092f0 <UART_SetConfig+0xac0>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	08db      	lsrs	r3, r3, #3
 800924c:	f003 0303 	and.w	r3, r3, #3
 8009250:	4a28      	ldr	r2, [pc, #160]	@ (80092f4 <UART_SetConfig+0xac4>)
 8009252:	fa22 f303 	lsr.w	r3, r2, r3
 8009256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009258:	e00f      	b.n	800927a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800925a:	4b26      	ldr	r3, [pc, #152]	@ (80092f4 <UART_SetConfig+0xac4>)
 800925c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800925e:	e00c      	b.n	800927a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009260:	4b25      	ldr	r3, [pc, #148]	@ (80092f8 <UART_SetConfig+0xac8>)
 8009262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009264:	e009      	b.n	800927a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800926a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800926c:	e005      	b.n	800927a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800926e:	2300      	movs	r3, #0
 8009270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009278:	bf00      	nop
    }

    if (pclk != 0U)
 800927a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800927c:	2b00      	cmp	r3, #0
 800927e:	d021      	beq.n	80092c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009284:	4a1d      	ldr	r2, [pc, #116]	@ (80092fc <UART_SetConfig+0xacc>)
 8009286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800928a:	461a      	mov	r2, r3
 800928c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800928e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	085b      	lsrs	r3, r3, #1
 8009298:	441a      	add	r2, r3
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a6:	2b0f      	cmp	r3, #15
 80092a8:	d909      	bls.n	80092be <UART_SetConfig+0xa8e>
 80092aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b0:	d205      	bcs.n	80092be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60da      	str	r2, [r3, #12]
 80092bc:	e002      	b.n	80092c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2200      	movs	r2, #0
 80092d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2200      	movs	r2, #0
 80092de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80092e0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3748      	adds	r7, #72	@ 0x48
 80092e8:	46bd      	mov	sp, r7
 80092ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ee:	bf00      	nop
 80092f0:	58024400 	.word	0x58024400
 80092f4:	03d09000 	.word	0x03d09000
 80092f8:	003d0900 	.word	0x003d0900
 80092fc:	0800da80 	.word	0x0800da80

08009300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800930c:	f003 0308 	and.w	r3, r3, #8
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00a      	beq.n	800932a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	430a      	orrs	r2, r1
 8009328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00a      	beq.n	800936e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	430a      	orrs	r2, r1
 800938e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009394:	f003 0310 	and.w	r3, r3, #16
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00a      	beq.n	80093b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b6:	f003 0320 	and.w	r3, r3, #32
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01a      	beq.n	8009416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093fe:	d10a      	bne.n	8009416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	430a      	orrs	r2, r1
 8009414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00a      	beq.n	8009438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	430a      	orrs	r2, r1
 8009436:	605a      	str	r2, [r3, #4]
  }
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b098      	sub	sp, #96	@ 0x60
 8009448:	af02      	add	r7, sp, #8
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009454:	f7f8 f858 	bl	8001508 <HAL_GetTick>
 8009458:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0308 	and.w	r3, r3, #8
 8009464:	2b08      	cmp	r3, #8
 8009466:	d12f      	bne.n	80094c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009468:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009470:	2200      	movs	r2, #0
 8009472:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f88e 	bl	8009598 <UART_WaitOnFlagUntilTimeout>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d022      	beq.n	80094c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948a:	e853 3f00 	ldrex	r3, [r3]
 800948e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009496:	653b      	str	r3, [r7, #80]	@ 0x50
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	461a      	mov	r2, r3
 800949e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80094a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094a8:	e841 2300 	strex	r3, r2, [r1]
 80094ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e6      	bne.n	8009482 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2220      	movs	r2, #32
 80094b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e063      	b.n	8009590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d149      	bne.n	800956a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094de:	2200      	movs	r2, #0
 80094e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f857 	bl	8009598 <UART_WaitOnFlagUntilTimeout>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d03c      	beq.n	800956a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f8:	e853 3f00 	ldrex	r3, [r3]
 80094fc:	623b      	str	r3, [r7, #32]
   return(result);
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800950e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009510:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009516:	e841 2300 	strex	r3, r2, [r1]
 800951a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800951c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e6      	bne.n	80094f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	e853 3f00 	ldrex	r3, [r3]
 8009530:	60fb      	str	r3, [r7, #12]
   return(result);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f023 0301 	bic.w	r3, r3, #1
 8009538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3308      	adds	r3, #8
 8009540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009542:	61fa      	str	r2, [r7, #28]
 8009544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	69b9      	ldr	r1, [r7, #24]
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	617b      	str	r3, [r7, #20]
   return(result);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e5      	bne.n	8009522 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2220      	movs	r2, #32
 800955a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e012      	b.n	8009590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2220      	movs	r2, #32
 800956e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2220      	movs	r2, #32
 8009576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3758      	adds	r7, #88	@ 0x58
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	603b      	str	r3, [r7, #0]
 80095a4:	4613      	mov	r3, r2
 80095a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095a8:	e04f      	b.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095b0:	d04b      	beq.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095b2:	f7f7 ffa9 	bl	8001508 <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d302      	bcc.n	80095c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e04e      	b.n	800966a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0304 	and.w	r3, r3, #4
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d037      	beq.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2b80      	cmp	r3, #128	@ 0x80
 80095de:	d034      	beq.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b40      	cmp	r3, #64	@ 0x40
 80095e4:	d031      	beq.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69db      	ldr	r3, [r3, #28]
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b08      	cmp	r3, #8
 80095f2:	d110      	bne.n	8009616 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2208      	movs	r2, #8
 80095fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f000 f839 	bl	8009674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2208      	movs	r2, #8
 8009606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e029      	b.n	800966a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	69db      	ldr	r3, [r3, #28]
 800961c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009624:	d111      	bne.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800962e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f000 f81f 	bl	8009674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2220      	movs	r2, #32
 800963a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e00f      	b.n	800966a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69da      	ldr	r2, [r3, #28]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4013      	ands	r3, r2
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	429a      	cmp	r2, r3
 8009658:	bf0c      	ite	eq
 800965a:	2301      	moveq	r3, #1
 800965c:	2300      	movne	r3, #0
 800965e:	b2db      	uxtb	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	79fb      	ldrb	r3, [r7, #7]
 8009664:	429a      	cmp	r2, r3
 8009666:	d0a0      	beq.n	80095aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009674:	b480      	push	{r7}
 8009676:	b095      	sub	sp, #84	@ 0x54
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800968a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009690:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	461a      	mov	r2, r3
 8009698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800969a:	643b      	str	r3, [r7, #64]	@ 0x40
 800969c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e6      	bne.n	800967c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3308      	adds	r3, #8
 80096b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80096be:	69fa      	ldr	r2, [r7, #28]
 80096c0:	4b1e      	ldr	r3, [pc, #120]	@ (800973c <UART_EndRxTransfer+0xc8>)
 80096c2:	4013      	ands	r3, r2
 80096c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3308      	adds	r3, #8
 80096cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096d6:	e841 2300 	strex	r3, r2, [r1]
 80096da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1e5      	bne.n	80096ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d118      	bne.n	800971c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	e853 3f00 	ldrex	r3, [r3]
 80096f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f023 0310 	bic.w	r3, r3, #16
 80096fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	461a      	mov	r2, r3
 8009706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009708:	61bb      	str	r3, [r7, #24]
 800970a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970c:	6979      	ldr	r1, [r7, #20]
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	e841 2300 	strex	r3, r2, [r1]
 8009714:	613b      	str	r3, [r7, #16]
   return(result);
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e6      	bne.n	80096ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2220      	movs	r2, #32
 8009720:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009730:	bf00      	nop
 8009732:	3754      	adds	r7, #84	@ 0x54
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	effffffe 	.word	0xeffffffe

08009740 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f7ff f854 	bl	8008804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800975c:	bf00      	nop
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009764:	b480      	push	{r7}
 8009766:	b08f      	sub	sp, #60	@ 0x3c
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009772:	2b21      	cmp	r3, #33	@ 0x21
 8009774:	d14c      	bne.n	8009810 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800977c:	b29b      	uxth	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d132      	bne.n	80097e8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	e853 3f00 	ldrex	r3, [r3]
 800978e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009796:	637b      	str	r3, [r7, #52]	@ 0x34
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097a8:	e841 2300 	strex	r3, r2, [r1]
 80097ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e6      	bne.n	8009782 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d2:	61bb      	str	r3, [r7, #24]
 80097d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	6979      	ldr	r1, [r7, #20]
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	613b      	str	r3, [r7, #16]
   return(result);
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e6      	bne.n	80097b4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80097e6:	e013      	b.n	8009810 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ec:	781a      	ldrb	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009810:	bf00      	nop
 8009812:	373c      	adds	r7, #60	@ 0x3c
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800981c:	b480      	push	{r7}
 800981e:	b091      	sub	sp, #68	@ 0x44
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800982a:	2b21      	cmp	r3, #33	@ 0x21
 800982c:	d151      	bne.n	80098d2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009834:	b29b      	uxth	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d132      	bne.n	80098a0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009842:	e853 3f00 	ldrex	r3, [r3]
 8009846:	623b      	str	r3, [r7, #32]
   return(result);
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800984e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	461a      	mov	r2, r3
 8009856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009858:	633b      	str	r3, [r7, #48]	@ 0x30
 800985a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800985e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009860:	e841 2300 	strex	r3, r2, [r1]
 8009864:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e6      	bne.n	800983a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	e853 3f00 	ldrex	r3, [r3]
 8009878:	60fb      	str	r3, [r7, #12]
   return(result);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009880:	637b      	str	r3, [r7, #52]	@ 0x34
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988e:	69b9      	ldr	r1, [r7, #24]
 8009890:	69fa      	ldr	r2, [r7, #28]
 8009892:	e841 2300 	strex	r3, r2, [r1]
 8009896:	617b      	str	r3, [r7, #20]
   return(result);
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1e6      	bne.n	800986c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800989e:	e018      	b.n	80098d2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80098a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	461a      	mov	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098b4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098ba:	1c9a      	adds	r2, r3, #2
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	3b01      	subs	r3, #1
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80098d2:	bf00      	nop
 80098d4:	3744      	adds	r7, #68	@ 0x44
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098de:	b480      	push	{r7}
 80098e0:	b091      	sub	sp, #68	@ 0x44
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098ec:	2b21      	cmp	r3, #33	@ 0x21
 80098ee:	d160      	bne.n	80099b2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80098f8:	e057      	b.n	80099aa <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009900:	b29b      	uxth	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d133      	bne.n	800996e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3308      	adds	r3, #8
 800990c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009910:	e853 3f00 	ldrex	r3, [r3]
 8009914:	623b      	str	r3, [r7, #32]
   return(result);
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800991c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3308      	adds	r3, #8
 8009924:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009926:	633a      	str	r2, [r7, #48]	@ 0x30
 8009928:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800992c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e5      	bne.n	8009906 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	e853 3f00 	ldrex	r3, [r3]
 8009946:	60fb      	str	r3, [r7, #12]
   return(result);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800994e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	461a      	mov	r2, r3
 8009956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009958:	61fb      	str	r3, [r7, #28]
 800995a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995c:	69b9      	ldr	r1, [r7, #24]
 800995e:	69fa      	ldr	r2, [r7, #28]
 8009960:	e841 2300 	strex	r3, r2, [r1]
 8009964:	617b      	str	r3, [r7, #20]
   return(result);
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e6      	bne.n	800993a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800996c:	e021      	b.n	80099b2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	69db      	ldr	r3, [r3, #28]
 8009974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009978:	2b00      	cmp	r3, #0
 800997a:	d013      	beq.n	80099a4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009980:	781a      	ldrb	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800998c:	1c5a      	adds	r2, r3, #1
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009998:	b29b      	uxth	r3, r3
 800999a:	3b01      	subs	r3, #1
 800999c:	b29a      	uxth	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80099a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80099a6:	3b01      	subs	r3, #1
 80099a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80099aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1a4      	bne.n	80098fa <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80099b0:	e7ff      	b.n	80099b2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80099b2:	bf00      	nop
 80099b4:	3744      	adds	r7, #68	@ 0x44
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr

080099be <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099be:	b480      	push	{r7}
 80099c0:	b091      	sub	sp, #68	@ 0x44
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099cc:	2b21      	cmp	r3, #33	@ 0x21
 80099ce:	d165      	bne.n	8009a9c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80099d8:	e05c      	b.n	8009a94 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d133      	bne.n	8009a4e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80099fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3308      	adds	r3, #8
 8009a04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e5      	bne.n	80099e6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	461a      	mov	r2, r3
 8009a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a38:	61bb      	str	r3, [r7, #24]
 8009a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3c:	6979      	ldr	r1, [r7, #20]
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	e841 2300 	strex	r3, r2, [r1]
 8009a44:	613b      	str	r3, [r7, #16]
   return(result);
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e6      	bne.n	8009a1a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009a4c:	e026      	b.n	8009a9c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d018      	beq.n	8009a8e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a60:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a70:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a76:	1c9a      	adds	r2, r3, #2
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	3b01      	subs	r3, #1
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009a8e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009a90:	3b01      	subs	r3, #1
 8009a92:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009a94:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d19f      	bne.n	80099da <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009a9a:	e7ff      	b.n	8009a9c <UART_TxISR_16BIT_FIFOEN+0xde>
 8009a9c:	bf00      	nop
 8009a9e:	3744      	adds	r7, #68	@ 0x44
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b088      	sub	sp, #32
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	e853 3f00 	ldrex	r3, [r3]
 8009abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	61bb      	str	r3, [r7, #24]
 8009ad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad2:	6979      	ldr	r1, [r7, #20]
 8009ad4:	69ba      	ldr	r2, [r7, #24]
 8009ad6:	e841 2300 	strex	r3, r2, [r1]
 8009ada:	613b      	str	r3, [r7, #16]
   return(result);
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1e6      	bne.n	8009ab0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7fe fe7d 	bl	80087f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009af6:	bf00      	nop
 8009af8:	3720      	adds	r7, #32
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b06:	bf00      	nop
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b083      	sub	sp, #12
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b2e:	bf00      	nop
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e027      	b.n	8009ba0 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2224      	movs	r2, #36	@ 0x24
 8009b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0201 	bic.w	r2, r2, #1
 8009b76:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d101      	bne.n	8009bc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e02d      	b.n	8009c20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2224      	movs	r2, #36	@ 0x24
 8009bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 0201 	bic.w	r2, r2, #1
 8009bea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f84f 	bl	8009ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d101      	bne.n	8009c40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e02d      	b.n	8009c9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2224      	movs	r2, #36	@ 0x24
 8009c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f022 0201 	bic.w	r2, r2, #1
 8009c66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f811 	bl	8009ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2220      	movs	r2, #32
 8009c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d108      	bne.n	8009cc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cc4:	e031      	b.n	8009d2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cc6:	2310      	movs	r3, #16
 8009cc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cca:	2310      	movs	r3, #16
 8009ccc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	0e5b      	lsrs	r3, r3, #25
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	f003 0307 	and.w	r3, r3, #7
 8009cdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	0f5b      	lsrs	r3, r3, #29
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	f003 0307 	and.w	r3, r3, #7
 8009cec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	7b3a      	ldrb	r2, [r7, #12]
 8009cf2:	4911      	ldr	r1, [pc, #68]	@ (8009d38 <UARTEx_SetNbDataToProcess+0x94>)
 8009cf4:	5c8a      	ldrb	r2, [r1, r2]
 8009cf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cfa:	7b3a      	ldrb	r2, [r7, #12]
 8009cfc:	490f      	ldr	r1, [pc, #60]	@ (8009d3c <UARTEx_SetNbDataToProcess+0x98>)
 8009cfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d00:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	7b7a      	ldrb	r2, [r7, #13]
 8009d10:	4909      	ldr	r1, [pc, #36]	@ (8009d38 <UARTEx_SetNbDataToProcess+0x94>)
 8009d12:	5c8a      	ldrb	r2, [r1, r2]
 8009d14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d18:	7b7a      	ldrb	r2, [r7, #13]
 8009d1a:	4908      	ldr	r1, [pc, #32]	@ (8009d3c <UARTEx_SetNbDataToProcess+0x98>)
 8009d1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d2a:	bf00      	nop
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	0800da98 	.word	0x0800da98
 8009d3c:	0800daa0 	.word	0x0800daa0

08009d40 <__NVIC_SetPriority>:
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4603      	mov	r3, r0
 8009d48:	6039      	str	r1, [r7, #0]
 8009d4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db0a      	blt.n	8009d6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	490c      	ldr	r1, [pc, #48]	@ (8009d8c <__NVIC_SetPriority+0x4c>)
 8009d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d5e:	0112      	lsls	r2, r2, #4
 8009d60:	b2d2      	uxtb	r2, r2
 8009d62:	440b      	add	r3, r1
 8009d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009d68:	e00a      	b.n	8009d80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	4908      	ldr	r1, [pc, #32]	@ (8009d90 <__NVIC_SetPriority+0x50>)
 8009d70:	88fb      	ldrh	r3, [r7, #6]
 8009d72:	f003 030f 	and.w	r3, r3, #15
 8009d76:	3b04      	subs	r3, #4
 8009d78:	0112      	lsls	r2, r2, #4
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	440b      	add	r3, r1
 8009d7e:	761a      	strb	r2, [r3, #24]
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	e000e100 	.word	0xe000e100
 8009d90:	e000ed00 	.word	0xe000ed00

08009d94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d98:	4b05      	ldr	r3, [pc, #20]	@ (8009db0 <SysTick_Handler+0x1c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d9c:	f002 f97a 	bl	800c094 <xTaskGetSchedulerState>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d001      	beq.n	8009daa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009da6:	f000 fdbf 	bl	800a928 <xPortSysTickHandler>
  }
}
 8009daa:	bf00      	nop
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	e000e010 	.word	0xe000e010

08009db4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009db4:	b580      	push	{r7, lr}
 8009db6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009db8:	2100      	movs	r1, #0
 8009dba:	f06f 0004 	mvn.w	r0, #4
 8009dbe:	f7ff ffbf 	bl	8009d40 <__NVIC_SetPriority>
#endif
}
 8009dc2:	bf00      	nop
 8009dc4:	bd80      	pop	{r7, pc}
	...

08009dc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dce:	f3ef 8305 	mrs	r3, IPSR
 8009dd2:	603b      	str	r3, [r7, #0]
  return(result);
 8009dd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009dda:	f06f 0305 	mvn.w	r3, #5
 8009dde:	607b      	str	r3, [r7, #4]
 8009de0:	e00c      	b.n	8009dfc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009de2:	4b0a      	ldr	r3, [pc, #40]	@ (8009e0c <osKernelInitialize+0x44>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d105      	bne.n	8009df6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009dea:	4b08      	ldr	r3, [pc, #32]	@ (8009e0c <osKernelInitialize+0x44>)
 8009dec:	2201      	movs	r2, #1
 8009dee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	607b      	str	r3, [r7, #4]
 8009df4:	e002      	b.n	8009dfc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009df6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009dfc:	687b      	ldr	r3, [r7, #4]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	2400027c 	.word	0x2400027c

08009e10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e16:	f3ef 8305 	mrs	r3, IPSR
 8009e1a:	603b      	str	r3, [r7, #0]
  return(result);
 8009e1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009e22:	f06f 0305 	mvn.w	r3, #5
 8009e26:	607b      	str	r3, [r7, #4]
 8009e28:	e010      	b.n	8009e4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009e58 <osKernelStart+0x48>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d109      	bne.n	8009e46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e32:	f7ff ffbf 	bl	8009db4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e36:	4b08      	ldr	r3, [pc, #32]	@ (8009e58 <osKernelStart+0x48>)
 8009e38:	2202      	movs	r2, #2
 8009e3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e3c:	f001 fcdc 	bl	800b7f8 <vTaskStartScheduler>
      stat = osOK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	607b      	str	r3, [r7, #4]
 8009e44:	e002      	b.n	8009e4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e4c:	687b      	ldr	r3, [r7, #4]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	2400027c 	.word	0x2400027c

08009e5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b08e      	sub	sp, #56	@ 0x38
 8009e60:	af04      	add	r7, sp, #16
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e6c:	f3ef 8305 	mrs	r3, IPSR
 8009e70:	617b      	str	r3, [r7, #20]
  return(result);
 8009e72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d17e      	bne.n	8009f76 <osThreadNew+0x11a>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d07b      	beq.n	8009f76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009e7e:	2380      	movs	r3, #128	@ 0x80
 8009e80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009e82:	2318      	movs	r3, #24
 8009e84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009e8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d045      	beq.n	8009f22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d002      	beq.n	8009ea4 <osThreadNew+0x48>
        name = attr->name;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d008      	beq.n	8009eca <osThreadNew+0x6e>
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	2b38      	cmp	r3, #56	@ 0x38
 8009ebc:	d805      	bhi.n	8009eca <osThreadNew+0x6e>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <osThreadNew+0x72>
        return (NULL);
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e054      	b.n	8009f78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d003      	beq.n	8009ede <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	089b      	lsrs	r3, r3, #2
 8009edc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00e      	beq.n	8009f04 <osThreadNew+0xa8>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	2b5b      	cmp	r3, #91	@ 0x5b
 8009eec:	d90a      	bls.n	8009f04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d006      	beq.n	8009f04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <osThreadNew+0xa8>
        mem = 1;
 8009efe:	2301      	movs	r3, #1
 8009f00:	61bb      	str	r3, [r7, #24]
 8009f02:	e010      	b.n	8009f26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10c      	bne.n	8009f26 <osThreadNew+0xca>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d108      	bne.n	8009f26 <osThreadNew+0xca>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d104      	bne.n	8009f26 <osThreadNew+0xca>
          mem = 0;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	61bb      	str	r3, [r7, #24]
 8009f20:	e001      	b.n	8009f26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d110      	bne.n	8009f4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f34:	9202      	str	r2, [sp, #8]
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	6a3a      	ldr	r2, [r7, #32]
 8009f40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f001 fa7c 	bl	800b440 <xTaskCreateStatic>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	613b      	str	r3, [r7, #16]
 8009f4c:	e013      	b.n	8009f76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d110      	bne.n	8009f76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	f107 0310 	add.w	r3, r7, #16
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f001 faca 	bl	800b500 <xTaskCreate>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d001      	beq.n	8009f76 <osThreadNew+0x11a>
            hTask = NULL;
 8009f72:	2300      	movs	r3, #0
 8009f74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f76:	693b      	ldr	r3, [r7, #16]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3728      	adds	r7, #40	@ 0x28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f86:	f3ef 8305 	mrs	r3, IPSR
 8009f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8009f8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <osThreadYield+0x1a>
    stat = osErrorISR;
 8009f92:	f06f 0305 	mvn.w	r3, #5
 8009f96:	607b      	str	r3, [r7, #4]
 8009f98:	e009      	b.n	8009fae <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8009f9e:	4b07      	ldr	r3, [pc, #28]	@ (8009fbc <osThreadYield+0x3c>)
 8009fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fa4:	601a      	str	r2, [r3, #0]
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8009fae:	687b      	ldr	r3, [r7, #4]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	e000ed04 	.word	0xe000ed04

08009fc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fc8:	f3ef 8305 	mrs	r3, IPSR
 8009fcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d003      	beq.n	8009fdc <osDelay+0x1c>
    stat = osErrorISR;
 8009fd4:	f06f 0305 	mvn.w	r3, #5
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	e007      	b.n	8009fec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <osDelay+0x2c>
      vTaskDelay(ticks);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f001 fbd0 	bl	800b78c <vTaskDelay>
    }
  }

  return (stat);
 8009fec:	68fb      	ldr	r3, [r7, #12]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4a07      	ldr	r2, [pc, #28]	@ (800a024 <vApplicationGetIdleTaskMemory+0x2c>)
 800a008:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	4a06      	ldr	r2, [pc, #24]	@ (800a028 <vApplicationGetIdleTaskMemory+0x30>)
 800a00e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2280      	movs	r2, #128	@ 0x80
 800a014:	601a      	str	r2, [r3, #0]
}
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	24000280 	.word	0x24000280
 800a028:	240002dc 	.word	0x240002dc

0800a02c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	4a07      	ldr	r2, [pc, #28]	@ (800a058 <vApplicationGetTimerTaskMemory+0x2c>)
 800a03c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	4a06      	ldr	r2, [pc, #24]	@ (800a05c <vApplicationGetTimerTaskMemory+0x30>)
 800a042:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a04a:	601a      	str	r2, [r3, #0]
}
 800a04c:	bf00      	nop
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	240004dc 	.word	0x240004dc
 800a05c:	24000538 	.word	0x24000538

0800a060 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b08a      	sub	sp, #40	@ 0x28
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a068:	2300      	movs	r3, #0
 800a06a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a06c:	f001 fc2c 	bl	800b8c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a070:	4b5c      	ldr	r3, [pc, #368]	@ (800a1e4 <pvPortMalloc+0x184>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a078:	f000 f924 	bl	800a2c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a07c:	4b5a      	ldr	r3, [pc, #360]	@ (800a1e8 <pvPortMalloc+0x188>)
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4013      	ands	r3, r2
 800a084:	2b00      	cmp	r3, #0
 800a086:	f040 8095 	bne.w	800a1b4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d01e      	beq.n	800a0ce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a090:	2208      	movs	r2, #8
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4413      	add	r3, r2
 800a096:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f003 0307 	and.w	r3, r3, #7
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d015      	beq.n	800a0ce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f023 0307 	bic.w	r3, r3, #7
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f003 0307 	and.w	r3, r3, #7
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00b      	beq.n	800a0ce <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0c8:	bf00      	nop
 800a0ca:	bf00      	nop
 800a0cc:	e7fd      	b.n	800a0ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d06f      	beq.n	800a1b4 <pvPortMalloc+0x154>
 800a0d4:	4b45      	ldr	r3, [pc, #276]	@ (800a1ec <pvPortMalloc+0x18c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d86a      	bhi.n	800a1b4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0de:	4b44      	ldr	r3, [pc, #272]	@ (800a1f0 <pvPortMalloc+0x190>)
 800a0e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0e2:	4b43      	ldr	r3, [pc, #268]	@ (800a1f0 <pvPortMalloc+0x190>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0e8:	e004      	b.n	800a0f4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d903      	bls.n	800a106 <pvPortMalloc+0xa6>
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f1      	bne.n	800a0ea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a106:	4b37      	ldr	r3, [pc, #220]	@ (800a1e4 <pvPortMalloc+0x184>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d051      	beq.n	800a1b4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2208      	movs	r2, #8
 800a116:	4413      	add	r3, r2
 800a118:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	1ad2      	subs	r2, r2, r3
 800a12a:	2308      	movs	r3, #8
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	429a      	cmp	r2, r3
 800a130:	d920      	bls.n	800a174 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4413      	add	r3, r2
 800a138:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	f003 0307 	and.w	r3, r3, #7
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <pvPortMalloc+0xfc>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	613b      	str	r3, [r7, #16]
}
 800a156:	bf00      	nop
 800a158:	bf00      	nop
 800a15a:	e7fd      	b.n	800a158 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	1ad2      	subs	r2, r2, r3
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a16e:	69b8      	ldr	r0, [r7, #24]
 800a170:	f000 f90a 	bl	800a388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a174:	4b1d      	ldr	r3, [pc, #116]	@ (800a1ec <pvPortMalloc+0x18c>)
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1ec <pvPortMalloc+0x18c>)
 800a180:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a182:	4b1a      	ldr	r3, [pc, #104]	@ (800a1ec <pvPortMalloc+0x18c>)
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	4b1b      	ldr	r3, [pc, #108]	@ (800a1f4 <pvPortMalloc+0x194>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d203      	bcs.n	800a196 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a18e:	4b17      	ldr	r3, [pc, #92]	@ (800a1ec <pvPortMalloc+0x18c>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a18      	ldr	r2, [pc, #96]	@ (800a1f4 <pvPortMalloc+0x194>)
 800a194:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a198:	685a      	ldr	r2, [r3, #4]
 800a19a:	4b13      	ldr	r3, [pc, #76]	@ (800a1e8 <pvPortMalloc+0x188>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1aa:	4b13      	ldr	r3, [pc, #76]	@ (800a1f8 <pvPortMalloc+0x198>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	4a11      	ldr	r2, [pc, #68]	@ (800a1f8 <pvPortMalloc+0x198>)
 800a1b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1b4:	f001 fb96 	bl	800b8e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00b      	beq.n	800a1da <pvPortMalloc+0x17a>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	60fb      	str	r3, [r7, #12]
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop
 800a1d8:	e7fd      	b.n	800a1d6 <pvPortMalloc+0x176>
	return pvReturn;
 800a1da:	69fb      	ldr	r3, [r7, #28]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3728      	adds	r7, #40	@ 0x28
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	24004540 	.word	0x24004540
 800a1e8:	24004554 	.word	0x24004554
 800a1ec:	24004544 	.word	0x24004544
 800a1f0:	24004538 	.word	0x24004538
 800a1f4:	24004548 	.word	0x24004548
 800a1f8:	2400454c 	.word	0x2400454c

0800a1fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d04f      	beq.n	800a2ae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a20e:	2308      	movs	r3, #8
 800a210:	425b      	negs	r3, r3
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	4413      	add	r3, r2
 800a216:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	4b25      	ldr	r3, [pc, #148]	@ (800a2b8 <vPortFree+0xbc>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4013      	ands	r3, r2
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10b      	bne.n	800a242 <vPortFree+0x46>
	__asm volatile
 800a22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22e:	f383 8811 	msr	BASEPRI, r3
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	60fb      	str	r3, [r7, #12]
}
 800a23c:	bf00      	nop
 800a23e:	bf00      	nop
 800a240:	e7fd      	b.n	800a23e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00b      	beq.n	800a262 <vPortFree+0x66>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	60bb      	str	r3, [r7, #8]
}
 800a25c:	bf00      	nop
 800a25e:	bf00      	nop
 800a260:	e7fd      	b.n	800a25e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	4b14      	ldr	r3, [pc, #80]	@ (800a2b8 <vPortFree+0xbc>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4013      	ands	r3, r2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d01e      	beq.n	800a2ae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d11a      	bne.n	800a2ae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b8 <vPortFree+0xbc>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	43db      	mvns	r3, r3
 800a282:	401a      	ands	r2, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a288:	f001 fb1e 	bl	800b8c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <vPortFree+0xc0>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4413      	add	r3, r2
 800a296:	4a09      	ldr	r2, [pc, #36]	@ (800a2bc <vPortFree+0xc0>)
 800a298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a29a:	6938      	ldr	r0, [r7, #16]
 800a29c:	f000 f874 	bl	800a388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2a0:	4b07      	ldr	r3, [pc, #28]	@ (800a2c0 <vPortFree+0xc4>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	4a06      	ldr	r2, [pc, #24]	@ (800a2c0 <vPortFree+0xc4>)
 800a2a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2aa:	f001 fb1b 	bl	800b8e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2ae:	bf00      	nop
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	24004554 	.word	0x24004554
 800a2bc:	24004544 	.word	0x24004544
 800a2c0:	24004550 	.word	0x24004550

0800a2c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a2ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2d0:	4b27      	ldr	r3, [pc, #156]	@ (800a370 <prvHeapInit+0xac>)
 800a2d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f003 0307 	and.w	r3, r3, #7
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00c      	beq.n	800a2f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3307      	adds	r3, #7
 800a2e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f023 0307 	bic.w	r3, r3, #7
 800a2ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	4a1f      	ldr	r2, [pc, #124]	@ (800a370 <prvHeapInit+0xac>)
 800a2f4:	4413      	add	r3, r2
 800a2f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a374 <prvHeapInit+0xb0>)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a302:	4b1c      	ldr	r3, [pc, #112]	@ (800a374 <prvHeapInit+0xb0>)
 800a304:	2200      	movs	r2, #0
 800a306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	4413      	add	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a310:	2208      	movs	r2, #8
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	1a9b      	subs	r3, r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f023 0307 	bic.w	r3, r3, #7
 800a31e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	4a15      	ldr	r2, [pc, #84]	@ (800a378 <prvHeapInit+0xb4>)
 800a324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a326:	4b14      	ldr	r3, [pc, #80]	@ (800a378 <prvHeapInit+0xb4>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2200      	movs	r2, #0
 800a32c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a32e:	4b12      	ldr	r3, [pc, #72]	@ (800a378 <prvHeapInit+0xb4>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	1ad2      	subs	r2, r2, r3
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a344:	4b0c      	ldr	r3, [pc, #48]	@ (800a378 <prvHeapInit+0xb4>)
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	4a0a      	ldr	r2, [pc, #40]	@ (800a37c <prvHeapInit+0xb8>)
 800a352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	4a09      	ldr	r2, [pc, #36]	@ (800a380 <prvHeapInit+0xbc>)
 800a35a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a35c:	4b09      	ldr	r3, [pc, #36]	@ (800a384 <prvHeapInit+0xc0>)
 800a35e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a362:	601a      	str	r2, [r3, #0]
}
 800a364:	bf00      	nop
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	24000938 	.word	0x24000938
 800a374:	24004538 	.word	0x24004538
 800a378:	24004540 	.word	0x24004540
 800a37c:	24004548 	.word	0x24004548
 800a380:	24004544 	.word	0x24004544
 800a384:	24004554 	.word	0x24004554

0800a388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a390:	4b28      	ldr	r3, [pc, #160]	@ (800a434 <prvInsertBlockIntoFreeList+0xac>)
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	e002      	b.n	800a39c <prvInsertBlockIntoFreeList+0x14>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d8f7      	bhi.n	800a396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d108      	bne.n	800a3ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	441a      	add	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	441a      	add	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d118      	bne.n	800a410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4b15      	ldr	r3, [pc, #84]	@ (800a438 <prvInsertBlockIntoFreeList+0xb0>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d00d      	beq.n	800a406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	441a      	add	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	e008      	b.n	800a418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a406:	4b0c      	ldr	r3, [pc, #48]	@ (800a438 <prvInsertBlockIntoFreeList+0xb0>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	e003      	b.n	800a418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d002      	beq.n	800a426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a426:	bf00      	nop
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	24004538 	.word	0x24004538
 800a438:	24004540 	.word	0x24004540

0800a43c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f103 0208 	add.w	r2, r3, #8
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f103 0208 	add.w	r2, r3, #8
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f103 0208 	add.w	r2, r3, #8
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a48a:	bf00      	nop
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a496:	b480      	push	{r7}
 800a498:	b085      	sub	sp, #20
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	689a      	ldr	r2, [r3, #8]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	1c5a      	adds	r2, r3, #1
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	601a      	str	r2, [r3, #0]
}
 800a4d2:	bf00      	nop
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b085      	sub	sp, #20
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4f4:	d103      	bne.n	800a4fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	e00c      	b.n	800a518 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3308      	adds	r3, #8
 800a502:	60fb      	str	r3, [r7, #12]
 800a504:	e002      	b.n	800a50c <vListInsert+0x2e>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	429a      	cmp	r2, r3
 800a516:	d2f6      	bcs.n	800a506 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	601a      	str	r2, [r3, #0]
}
 800a544:	bf00      	nop
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6892      	ldr	r2, [r2, #8]
 800a566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	6852      	ldr	r2, [r2, #4]
 800a570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d103      	bne.n	800a584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	689a      	ldr	r2, [r3, #8]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	1e5a      	subs	r2, r3, #1
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3714      	adds	r7, #20
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3b04      	subs	r3, #4
 800a5b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a5bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3b04      	subs	r3, #4
 800a5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	f023 0201 	bic.w	r2, r3, #1
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3b04      	subs	r3, #4
 800a5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5d4:	4a0c      	ldr	r2, [pc, #48]	@ (800a608 <pxPortInitialiseStack+0x64>)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3b14      	subs	r3, #20
 800a5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3b04      	subs	r3, #4
 800a5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f06f 0202 	mvn.w	r2, #2
 800a5f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3b20      	subs	r3, #32
 800a5f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	0800a60d 	.word	0x0800a60d

0800a60c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a616:	4b13      	ldr	r3, [pc, #76]	@ (800a664 <prvTaskExitError+0x58>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a61e:	d00b      	beq.n	800a638 <prvTaskExitError+0x2c>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	60fb      	str	r3, [r7, #12]
}
 800a632:	bf00      	nop
 800a634:	bf00      	nop
 800a636:	e7fd      	b.n	800a634 <prvTaskExitError+0x28>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	60bb      	str	r3, [r7, #8]
}
 800a64a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a64c:	bf00      	nop
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d0fc      	beq.n	800a64e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	24000010 	.word	0x24000010
	...

0800a670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a670:	4b07      	ldr	r3, [pc, #28]	@ (800a690 <pxCurrentTCBConst2>)
 800a672:	6819      	ldr	r1, [r3, #0]
 800a674:	6808      	ldr	r0, [r1, #0]
 800a676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67a:	f380 8809 	msr	PSP, r0
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f04f 0000 	mov.w	r0, #0
 800a686:	f380 8811 	msr	BASEPRI, r0
 800a68a:	4770      	bx	lr
 800a68c:	f3af 8000 	nop.w

0800a690 <pxCurrentTCBConst2>:
 800a690:	240045a0 	.word	0x240045a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a694:	bf00      	nop
 800a696:	bf00      	nop

0800a698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a698:	4808      	ldr	r0, [pc, #32]	@ (800a6bc <prvPortStartFirstTask+0x24>)
 800a69a:	6800      	ldr	r0, [r0, #0]
 800a69c:	6800      	ldr	r0, [r0, #0]
 800a69e:	f380 8808 	msr	MSP, r0
 800a6a2:	f04f 0000 	mov.w	r0, #0
 800a6a6:	f380 8814 	msr	CONTROL, r0
 800a6aa:	b662      	cpsie	i
 800a6ac:	b661      	cpsie	f
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	df00      	svc	0
 800a6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6ba:	bf00      	nop
 800a6bc:	e000ed08 	.word	0xe000ed08

0800a6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6c6:	4b47      	ldr	r3, [pc, #284]	@ (800a7e4 <xPortStartScheduler+0x124>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a47      	ldr	r2, [pc, #284]	@ (800a7e8 <xPortStartScheduler+0x128>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d10b      	bne.n	800a6e8 <xPortStartScheduler+0x28>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	60fb      	str	r3, [r7, #12]
}
 800a6e2:	bf00      	nop
 800a6e4:	bf00      	nop
 800a6e6:	e7fd      	b.n	800a6e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a7e4 <xPortStartScheduler+0x124>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a3f      	ldr	r2, [pc, #252]	@ (800a7ec <xPortStartScheduler+0x12c>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d10b      	bne.n	800a70a <xPortStartScheduler+0x4a>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	613b      	str	r3, [r7, #16]
}
 800a704:	bf00      	nop
 800a706:	bf00      	nop
 800a708:	e7fd      	b.n	800a706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a70a:	4b39      	ldr	r3, [pc, #228]	@ (800a7f0 <xPortStartScheduler+0x130>)
 800a70c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	22ff      	movs	r2, #255	@ 0xff
 800a71a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	b2db      	uxtb	r3, r3
 800a722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	b2db      	uxtb	r3, r3
 800a728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a72c:	b2da      	uxtb	r2, r3
 800a72e:	4b31      	ldr	r3, [pc, #196]	@ (800a7f4 <xPortStartScheduler+0x134>)
 800a730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a732:	4b31      	ldr	r3, [pc, #196]	@ (800a7f8 <xPortStartScheduler+0x138>)
 800a734:	2207      	movs	r2, #7
 800a736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a738:	e009      	b.n	800a74e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a73a:	4b2f      	ldr	r3, [pc, #188]	@ (800a7f8 <xPortStartScheduler+0x138>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3b01      	subs	r3, #1
 800a740:	4a2d      	ldr	r2, [pc, #180]	@ (800a7f8 <xPortStartScheduler+0x138>)
 800a742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	005b      	lsls	r3, r3, #1
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a74e:	78fb      	ldrb	r3, [r7, #3]
 800a750:	b2db      	uxtb	r3, r3
 800a752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a756:	2b80      	cmp	r3, #128	@ 0x80
 800a758:	d0ef      	beq.n	800a73a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a75a:	4b27      	ldr	r3, [pc, #156]	@ (800a7f8 <xPortStartScheduler+0x138>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f1c3 0307 	rsb	r3, r3, #7
 800a762:	2b04      	cmp	r3, #4
 800a764:	d00b      	beq.n	800a77e <xPortStartScheduler+0xbe>
	__asm volatile
 800a766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a76a:	f383 8811 	msr	BASEPRI, r3
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	f3bf 8f4f 	dsb	sy
 800a776:	60bb      	str	r3, [r7, #8]
}
 800a778:	bf00      	nop
 800a77a:	bf00      	nop
 800a77c:	e7fd      	b.n	800a77a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a77e:	4b1e      	ldr	r3, [pc, #120]	@ (800a7f8 <xPortStartScheduler+0x138>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	021b      	lsls	r3, r3, #8
 800a784:	4a1c      	ldr	r2, [pc, #112]	@ (800a7f8 <xPortStartScheduler+0x138>)
 800a786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a788:	4b1b      	ldr	r3, [pc, #108]	@ (800a7f8 <xPortStartScheduler+0x138>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a790:	4a19      	ldr	r2, [pc, #100]	@ (800a7f8 <xPortStartScheduler+0x138>)
 800a792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	b2da      	uxtb	r2, r3
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a79c:	4b17      	ldr	r3, [pc, #92]	@ (800a7fc <xPortStartScheduler+0x13c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a16      	ldr	r2, [pc, #88]	@ (800a7fc <xPortStartScheduler+0x13c>)
 800a7a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a7a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7a8:	4b14      	ldr	r3, [pc, #80]	@ (800a7fc <xPortStartScheduler+0x13c>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a13      	ldr	r2, [pc, #76]	@ (800a7fc <xPortStartScheduler+0x13c>)
 800a7ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a7b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7b4:	f000 f8da 	bl	800a96c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7b8:	4b11      	ldr	r3, [pc, #68]	@ (800a800 <xPortStartScheduler+0x140>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7be:	f000 f8f9 	bl	800a9b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7c2:	4b10      	ldr	r3, [pc, #64]	@ (800a804 <xPortStartScheduler+0x144>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a0f      	ldr	r2, [pc, #60]	@ (800a804 <xPortStartScheduler+0x144>)
 800a7c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a7cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7ce:	f7ff ff63 	bl	800a698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7d2:	f001 f9ef 	bl	800bbb4 <vTaskSwitchContext>
	prvTaskExitError();
 800a7d6:	f7ff ff19 	bl	800a60c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	e000ed00 	.word	0xe000ed00
 800a7e8:	410fc271 	.word	0x410fc271
 800a7ec:	410fc270 	.word	0x410fc270
 800a7f0:	e000e400 	.word	0xe000e400
 800a7f4:	24004558 	.word	0x24004558
 800a7f8:	2400455c 	.word	0x2400455c
 800a7fc:	e000ed20 	.word	0xe000ed20
 800a800:	24000010 	.word	0x24000010
 800a804:	e000ef34 	.word	0xe000ef34

0800a808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	607b      	str	r3, [r7, #4]
}
 800a820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a822:	4b10      	ldr	r3, [pc, #64]	@ (800a864 <vPortEnterCritical+0x5c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3301      	adds	r3, #1
 800a828:	4a0e      	ldr	r2, [pc, #56]	@ (800a864 <vPortEnterCritical+0x5c>)
 800a82a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a82c:	4b0d      	ldr	r3, [pc, #52]	@ (800a864 <vPortEnterCritical+0x5c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d110      	bne.n	800a856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a834:	4b0c      	ldr	r3, [pc, #48]	@ (800a868 <vPortEnterCritical+0x60>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00b      	beq.n	800a856 <vPortEnterCritical+0x4e>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	603b      	str	r3, [r7, #0]
}
 800a850:	bf00      	nop
 800a852:	bf00      	nop
 800a854:	e7fd      	b.n	800a852 <vPortEnterCritical+0x4a>
	}
}
 800a856:	bf00      	nop
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	24000010 	.word	0x24000010
 800a868:	e000ed04 	.word	0xe000ed04

0800a86c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a872:	4b12      	ldr	r3, [pc, #72]	@ (800a8bc <vPortExitCritical+0x50>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10b      	bne.n	800a892 <vPortExitCritical+0x26>
	__asm volatile
 800a87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	607b      	str	r3, [r7, #4]
}
 800a88c:	bf00      	nop
 800a88e:	bf00      	nop
 800a890:	e7fd      	b.n	800a88e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a892:	4b0a      	ldr	r3, [pc, #40]	@ (800a8bc <vPortExitCritical+0x50>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	3b01      	subs	r3, #1
 800a898:	4a08      	ldr	r2, [pc, #32]	@ (800a8bc <vPortExitCritical+0x50>)
 800a89a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a89c:	4b07      	ldr	r3, [pc, #28]	@ (800a8bc <vPortExitCritical+0x50>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d105      	bne.n	800a8b0 <vPortExitCritical+0x44>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	24000010 	.word	0x24000010

0800a8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8c0:	f3ef 8009 	mrs	r0, PSP
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	4b15      	ldr	r3, [pc, #84]	@ (800a920 <pxCurrentTCBConst>)
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	f01e 0f10 	tst.w	lr, #16
 800a8d0:	bf08      	it	eq
 800a8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8da:	6010      	str	r0, [r2, #0]
 800a8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a8e4:	f380 8811 	msr	BASEPRI, r0
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f001 f960 	bl	800bbb4 <vTaskSwitchContext>
 800a8f4:	f04f 0000 	mov.w	r0, #0
 800a8f8:	f380 8811 	msr	BASEPRI, r0
 800a8fc:	bc09      	pop	{r0, r3}
 800a8fe:	6819      	ldr	r1, [r3, #0]
 800a900:	6808      	ldr	r0, [r1, #0]
 800a902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a906:	f01e 0f10 	tst.w	lr, #16
 800a90a:	bf08      	it	eq
 800a90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a910:	f380 8809 	msr	PSP, r0
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	f3af 8000 	nop.w

0800a920 <pxCurrentTCBConst>:
 800a920:	240045a0 	.word	0x240045a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop

0800a928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	607b      	str	r3, [r7, #4]
}
 800a940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a942:	f001 f87d 	bl	800ba40 <xTaskIncrementTick>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d003      	beq.n	800a954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a94c:	4b06      	ldr	r3, [pc, #24]	@ (800a968 <xPortSysTickHandler+0x40>)
 800a94e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	2300      	movs	r3, #0
 800a956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	f383 8811 	msr	BASEPRI, r3
}
 800a95e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a960:	bf00      	nop
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	e000ed04 	.word	0xe000ed04

0800a96c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a96c:	b480      	push	{r7}
 800a96e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a970:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a0 <vPortSetupTimerInterrupt+0x34>)
 800a972:	2200      	movs	r2, #0
 800a974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a976:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a4 <vPortSetupTimerInterrupt+0x38>)
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a97c:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a8 <vPortSetupTimerInterrupt+0x3c>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a0a      	ldr	r2, [pc, #40]	@ (800a9ac <vPortSetupTimerInterrupt+0x40>)
 800a982:	fba2 2303 	umull	r2, r3, r2, r3
 800a986:	099b      	lsrs	r3, r3, #6
 800a988:	4a09      	ldr	r2, [pc, #36]	@ (800a9b0 <vPortSetupTimerInterrupt+0x44>)
 800a98a:	3b01      	subs	r3, #1
 800a98c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a98e:	4b04      	ldr	r3, [pc, #16]	@ (800a9a0 <vPortSetupTimerInterrupt+0x34>)
 800a990:	2207      	movs	r2, #7
 800a992:	601a      	str	r2, [r3, #0]
}
 800a994:	bf00      	nop
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	e000e010 	.word	0xe000e010
 800a9a4:	e000e018 	.word	0xe000e018
 800a9a8:	24000000 	.word	0x24000000
 800a9ac:	10624dd3 	.word	0x10624dd3
 800a9b0:	e000e014 	.word	0xe000e014

0800a9b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a9c4 <vPortEnableVFP+0x10>
 800a9b8:	6801      	ldr	r1, [r0, #0]
 800a9ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a9be:	6001      	str	r1, [r0, #0]
 800a9c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9c2:	bf00      	nop
 800a9c4:	e000ed88 	.word	0xe000ed88

0800a9c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9ce:	f3ef 8305 	mrs	r3, IPSR
 800a9d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2b0f      	cmp	r3, #15
 800a9d8:	d915      	bls.n	800aa06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9da:	4a18      	ldr	r2, [pc, #96]	@ (800aa3c <vPortValidateInterruptPriority+0x74>)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	4413      	add	r3, r2
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9e4:	4b16      	ldr	r3, [pc, #88]	@ (800aa40 <vPortValidateInterruptPriority+0x78>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	7afa      	ldrb	r2, [r7, #11]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d20b      	bcs.n	800aa06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	607b      	str	r3, [r7, #4]
}
 800aa00:	bf00      	nop
 800aa02:	bf00      	nop
 800aa04:	e7fd      	b.n	800aa02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa06:	4b0f      	ldr	r3, [pc, #60]	@ (800aa44 <vPortValidateInterruptPriority+0x7c>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aa0e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa48 <vPortValidateInterruptPriority+0x80>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d90b      	bls.n	800aa2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aa16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1a:	f383 8811 	msr	BASEPRI, r3
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	603b      	str	r3, [r7, #0]
}
 800aa28:	bf00      	nop
 800aa2a:	bf00      	nop
 800aa2c:	e7fd      	b.n	800aa2a <vPortValidateInterruptPriority+0x62>
	}
 800aa2e:	bf00      	nop
 800aa30:	3714      	adds	r7, #20
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	e000e3f0 	.word	0xe000e3f0
 800aa40:	24004558 	.word	0x24004558
 800aa44:	e000ed0c 	.word	0xe000ed0c
 800aa48:	2400455c 	.word	0x2400455c

0800aa4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10b      	bne.n	800aa78 <xQueueGenericReset+0x2c>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	60bb      	str	r3, [r7, #8]
}
 800aa72:	bf00      	nop
 800aa74:	bf00      	nop
 800aa76:	e7fd      	b.n	800aa74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa78:	f7ff fec6 	bl	800a808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa84:	68f9      	ldr	r1, [r7, #12]
 800aa86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aa88:	fb01 f303 	mul.w	r3, r1, r3
 800aa8c:	441a      	add	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	68f9      	ldr	r1, [r7, #12]
 800aaac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aaae:	fb01 f303 	mul.w	r3, r1, r3
 800aab2:	441a      	add	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	22ff      	movs	r2, #255	@ 0xff
 800aabc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	22ff      	movs	r2, #255	@ 0xff
 800aac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d114      	bne.n	800aaf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d01a      	beq.n	800ab0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	3310      	adds	r3, #16
 800aada:	4618      	mov	r0, r3
 800aadc:	f001 f91a 	bl	800bd14 <xTaskRemoveFromEventList>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d012      	beq.n	800ab0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aae6:	4b0d      	ldr	r3, [pc, #52]	@ (800ab1c <xQueueGenericReset+0xd0>)
 800aae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	e009      	b.n	800ab0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3310      	adds	r3, #16
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7ff fc9d 	bl	800a43c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3324      	adds	r3, #36	@ 0x24
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7ff fc98 	bl	800a43c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab0c:	f7ff feae 	bl	800a86c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab10:	2301      	movs	r3, #1
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	e000ed04 	.word	0xe000ed04

0800ab20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08e      	sub	sp, #56	@ 0x38
 800ab24:	af02      	add	r7, sp, #8
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10b      	bne.n	800ab4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab46:	bf00      	nop
 800ab48:	bf00      	nop
 800ab4a:	e7fd      	b.n	800ab48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10b      	bne.n	800ab6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab64:	bf00      	nop
 800ab66:	bf00      	nop
 800ab68:	e7fd      	b.n	800ab66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <xQueueGenericCreateStatic+0x56>
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <xQueueGenericCreateStatic+0x5a>
 800ab76:	2301      	movs	r3, #1
 800ab78:	e000      	b.n	800ab7c <xQueueGenericCreateStatic+0x5c>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10b      	bne.n	800ab98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	623b      	str	r3, [r7, #32]
}
 800ab92:	bf00      	nop
 800ab94:	bf00      	nop
 800ab96:	e7fd      	b.n	800ab94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <xQueueGenericCreateStatic+0x84>
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <xQueueGenericCreateStatic+0x88>
 800aba4:	2301      	movs	r3, #1
 800aba6:	e000      	b.n	800abaa <xQueueGenericCreateStatic+0x8a>
 800aba8:	2300      	movs	r3, #0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10b      	bne.n	800abc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	61fb      	str	r3, [r7, #28]
}
 800abc0:	bf00      	nop
 800abc2:	bf00      	nop
 800abc4:	e7fd      	b.n	800abc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abc6:	2350      	movs	r3, #80	@ 0x50
 800abc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b50      	cmp	r3, #80	@ 0x50
 800abce:	d00b      	beq.n	800abe8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	61bb      	str	r3, [r7, #24]
}
 800abe2:	bf00      	nop
 800abe4:	bf00      	nop
 800abe6:	e7fd      	b.n	800abe4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800abe8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800abee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00d      	beq.n	800ac10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800abf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abfc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ac00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	4613      	mov	r3, r2
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	68b9      	ldr	r1, [r7, #8]
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 f805 	bl	800ac1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3730      	adds	r7, #48	@ 0x30
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b084      	sub	sp, #16
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	607a      	str	r2, [r7, #4]
 800ac26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d103      	bne.n	800ac36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	e002      	b.n	800ac3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac48:	2101      	movs	r1, #1
 800ac4a:	69b8      	ldr	r0, [r7, #24]
 800ac4c:	f7ff fefe 	bl	800aa4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	78fa      	ldrb	r2, [r7, #3]
 800ac54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac58:	bf00      	nop
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b08e      	sub	sp, #56	@ 0x38
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
 800ac6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ac76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <xQueueGenericSend+0x34>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	e7fd      	b.n	800ac90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d103      	bne.n	800aca2 <xQueueGenericSend+0x42>
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <xQueueGenericSend+0x46>
 800aca2:	2301      	movs	r3, #1
 800aca4:	e000      	b.n	800aca8 <xQueueGenericSend+0x48>
 800aca6:	2300      	movs	r3, #0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10b      	bne.n	800acc4 <xQueueGenericSend+0x64>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800acbe:	bf00      	nop
 800acc0:	bf00      	nop
 800acc2:	e7fd      	b.n	800acc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d103      	bne.n	800acd2 <xQueueGenericSend+0x72>
 800acca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800accc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d101      	bne.n	800acd6 <xQueueGenericSend+0x76>
 800acd2:	2301      	movs	r3, #1
 800acd4:	e000      	b.n	800acd8 <xQueueGenericSend+0x78>
 800acd6:	2300      	movs	r3, #0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10b      	bne.n	800acf4 <xQueueGenericSend+0x94>
	__asm volatile
 800acdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	623b      	str	r3, [r7, #32]
}
 800acee:	bf00      	nop
 800acf0:	bf00      	nop
 800acf2:	e7fd      	b.n	800acf0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acf4:	f001 f9ce 	bl	800c094 <xTaskGetSchedulerState>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d102      	bne.n	800ad04 <xQueueGenericSend+0xa4>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <xQueueGenericSend+0xa8>
 800ad04:	2301      	movs	r3, #1
 800ad06:	e000      	b.n	800ad0a <xQueueGenericSend+0xaa>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10b      	bne.n	800ad26 <xQueueGenericSend+0xc6>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	61fb      	str	r3, [r7, #28]
}
 800ad20:	bf00      	nop
 800ad22:	bf00      	nop
 800ad24:	e7fd      	b.n	800ad22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad26:	f7ff fd6f 	bl	800a808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d302      	bcc.n	800ad3c <xQueueGenericSend+0xdc>
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d129      	bne.n	800ad90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	68b9      	ldr	r1, [r7, #8]
 800ad40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad42:	f000 fa0f 	bl	800b164 <prvCopyDataToQueue>
 800ad46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d010      	beq.n	800ad72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad52:	3324      	adds	r3, #36	@ 0x24
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 ffdd 	bl	800bd14 <xTaskRemoveFromEventList>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d013      	beq.n	800ad88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ad60:	4b3f      	ldr	r3, [pc, #252]	@ (800ae60 <xQueueGenericSend+0x200>)
 800ad62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	e00a      	b.n	800ad88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d007      	beq.n	800ad88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad78:	4b39      	ldr	r3, [pc, #228]	@ (800ae60 <xQueueGenericSend+0x200>)
 800ad7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad88:	f7ff fd70 	bl	800a86c <vPortExitCritical>
				return pdPASS;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e063      	b.n	800ae58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad96:	f7ff fd69 	bl	800a86c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e05c      	b.n	800ae58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d106      	bne.n	800adb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ada4:	f107 0314 	add.w	r3, r7, #20
 800ada8:	4618      	mov	r0, r3
 800adaa:	f001 f817 	bl	800bddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adae:	2301      	movs	r3, #1
 800adb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adb2:	f7ff fd5b 	bl	800a86c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adb6:	f000 fd87 	bl	800b8c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adba:	f7ff fd25 	bl	800a808 <vPortEnterCritical>
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adc4:	b25b      	sxtb	r3, r3
 800adc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adca:	d103      	bne.n	800add4 <xQueueGenericSend+0x174>
 800adcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adce:	2200      	movs	r2, #0
 800add0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800add4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adda:	b25b      	sxtb	r3, r3
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ade0:	d103      	bne.n	800adea <xQueueGenericSend+0x18a>
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adea:	f7ff fd3f 	bl	800a86c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adee:	1d3a      	adds	r2, r7, #4
 800adf0:	f107 0314 	add.w	r3, r7, #20
 800adf4:	4611      	mov	r1, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f001 f806 	bl	800be08 <xTaskCheckForTimeOut>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d124      	bne.n	800ae4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae04:	f000 faa6 	bl	800b354 <prvIsQueueFull>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d018      	beq.n	800ae40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae10:	3310      	adds	r3, #16
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	4611      	mov	r1, r2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 ff2a 	bl	800bc70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae1e:	f000 fa31 	bl	800b284 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae22:	f000 fd5f 	bl	800b8e4 <xTaskResumeAll>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f47f af7c 	bne.w	800ad26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ae2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae60 <xQueueGenericSend+0x200>)
 800ae30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	e772      	b.n	800ad26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ae40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae42:	f000 fa1f 	bl	800b284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae46:	f000 fd4d 	bl	800b8e4 <xTaskResumeAll>
 800ae4a:	e76c      	b.n	800ad26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae4e:	f000 fa19 	bl	800b284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae52:	f000 fd47 	bl	800b8e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3738      	adds	r7, #56	@ 0x38
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	e000ed04 	.word	0xe000ed04

0800ae64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b090      	sub	sp, #64	@ 0x40
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ae76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10b      	bne.n	800ae94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae8e:	bf00      	nop
 800ae90:	bf00      	nop
 800ae92:	e7fd      	b.n	800ae90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d103      	bne.n	800aea2 <xQueueGenericSendFromISR+0x3e>
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <xQueueGenericSendFromISR+0x42>
 800aea2:	2301      	movs	r3, #1
 800aea4:	e000      	b.n	800aea8 <xQueueGenericSendFromISR+0x44>
 800aea6:	2300      	movs	r3, #0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10b      	bne.n	800aec4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aebe:	bf00      	nop
 800aec0:	bf00      	nop
 800aec2:	e7fd      	b.n	800aec0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d103      	bne.n	800aed2 <xQueueGenericSendFromISR+0x6e>
 800aeca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d101      	bne.n	800aed6 <xQueueGenericSendFromISR+0x72>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e000      	b.n	800aed8 <xQueueGenericSendFromISR+0x74>
 800aed6:	2300      	movs	r3, #0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10b      	bne.n	800aef4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	623b      	str	r3, [r7, #32]
}
 800aeee:	bf00      	nop
 800aef0:	bf00      	nop
 800aef2:	e7fd      	b.n	800aef0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aef4:	f7ff fd68 	bl	800a9c8 <vPortValidateInterruptPriority>
	__asm volatile
 800aef8:	f3ef 8211 	mrs	r2, BASEPRI
 800aefc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	61fa      	str	r2, [r7, #28]
 800af0e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800af10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d302      	bcc.n	800af26 <xQueueGenericSendFromISR+0xc2>
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	2b02      	cmp	r3, #2
 800af24:	d12f      	bne.n	800af86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800af3c:	f000 f912 	bl	800b164 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800af44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af48:	d112      	bne.n	800af70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d016      	beq.n	800af80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af54:	3324      	adds	r3, #36	@ 0x24
 800af56:	4618      	mov	r0, r3
 800af58:	f000 fedc 	bl	800bd14 <xTaskRemoveFromEventList>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00e      	beq.n	800af80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00b      	beq.n	800af80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	e007      	b.n	800af80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800af74:	3301      	adds	r3, #1
 800af76:	b2db      	uxtb	r3, r3
 800af78:	b25a      	sxtb	r2, r3
 800af7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800af80:	2301      	movs	r3, #1
 800af82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800af84:	e001      	b.n	800af8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af86:	2300      	movs	r3, #0
 800af88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af8c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f383 8811 	msr	BASEPRI, r3
}
 800af94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3740      	adds	r7, #64	@ 0x40
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08c      	sub	sp, #48	@ 0x30
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800afac:	2300      	movs	r3, #0
 800afae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800afb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10b      	bne.n	800afd2 <xQueueReceive+0x32>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	623b      	str	r3, [r7, #32]
}
 800afcc:	bf00      	nop
 800afce:	bf00      	nop
 800afd0:	e7fd      	b.n	800afce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d103      	bne.n	800afe0 <xQueueReceive+0x40>
 800afd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <xQueueReceive+0x44>
 800afe0:	2301      	movs	r3, #1
 800afe2:	e000      	b.n	800afe6 <xQueueReceive+0x46>
 800afe4:	2300      	movs	r3, #0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10b      	bne.n	800b002 <xQueueReceive+0x62>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	61fb      	str	r3, [r7, #28]
}
 800affc:	bf00      	nop
 800affe:	bf00      	nop
 800b000:	e7fd      	b.n	800affe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b002:	f001 f847 	bl	800c094 <xTaskGetSchedulerState>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d102      	bne.n	800b012 <xQueueReceive+0x72>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <xQueueReceive+0x76>
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <xQueueReceive+0x78>
 800b016:	2300      	movs	r3, #0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10b      	bne.n	800b034 <xQueueReceive+0x94>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	61bb      	str	r3, [r7, #24]
}
 800b02e:	bf00      	nop
 800b030:	bf00      	nop
 800b032:	e7fd      	b.n	800b030 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b034:	f7ff fbe8 	bl	800a808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	d01f      	beq.n	800b084 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b044:	68b9      	ldr	r1, [r7, #8]
 800b046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b048:	f000 f8f6 	bl	800b238 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04e:	1e5a      	subs	r2, r3, #1
 800b050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b052:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00f      	beq.n	800b07c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05e:	3310      	adds	r3, #16
 800b060:	4618      	mov	r0, r3
 800b062:	f000 fe57 	bl	800bd14 <xTaskRemoveFromEventList>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d007      	beq.n	800b07c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b06c:	4b3c      	ldr	r3, [pc, #240]	@ (800b160 <xQueueReceive+0x1c0>)
 800b06e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b07c:	f7ff fbf6 	bl	800a86c <vPortExitCritical>
				return pdPASS;
 800b080:	2301      	movs	r3, #1
 800b082:	e069      	b.n	800b158 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d103      	bne.n	800b092 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b08a:	f7ff fbef 	bl	800a86c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b08e:	2300      	movs	r3, #0
 800b090:	e062      	b.n	800b158 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b094:	2b00      	cmp	r3, #0
 800b096:	d106      	bne.n	800b0a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b098:	f107 0310 	add.w	r3, r7, #16
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fe9d 	bl	800bddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0a6:	f7ff fbe1 	bl	800a86c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0aa:	f000 fc0d 	bl	800b8c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0ae:	f7ff fbab 	bl	800a808 <vPortEnterCritical>
 800b0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0b8:	b25b      	sxtb	r3, r3
 800b0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0be:	d103      	bne.n	800b0c8 <xQueueReceive+0x128>
 800b0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0ce:	b25b      	sxtb	r3, r3
 800b0d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0d4:	d103      	bne.n	800b0de <xQueueReceive+0x13e>
 800b0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0de:	f7ff fbc5 	bl	800a86c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0e2:	1d3a      	adds	r2, r7, #4
 800b0e4:	f107 0310 	add.w	r3, r7, #16
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 fe8c 	bl	800be08 <xTaskCheckForTimeOut>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d123      	bne.n	800b13e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0f8:	f000 f916 	bl	800b328 <prvIsQueueEmpty>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d017      	beq.n	800b132 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b104:	3324      	adds	r3, #36	@ 0x24
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	4611      	mov	r1, r2
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 fdb0 	bl	800bc70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b112:	f000 f8b7 	bl	800b284 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b116:	f000 fbe5 	bl	800b8e4 <xTaskResumeAll>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d189      	bne.n	800b034 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b120:	4b0f      	ldr	r3, [pc, #60]	@ (800b160 <xQueueReceive+0x1c0>)
 800b122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	f3bf 8f6f 	isb	sy
 800b130:	e780      	b.n	800b034 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b134:	f000 f8a6 	bl	800b284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b138:	f000 fbd4 	bl	800b8e4 <xTaskResumeAll>
 800b13c:	e77a      	b.n	800b034 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b13e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b140:	f000 f8a0 	bl	800b284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b144:	f000 fbce 	bl	800b8e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b14a:	f000 f8ed 	bl	800b328 <prvIsQueueEmpty>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	f43f af6f 	beq.w	800b034 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b156:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3730      	adds	r7, #48	@ 0x30
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	e000ed04 	.word	0xe000ed04

0800b164 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b170:	2300      	movs	r3, #0
 800b172:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b178:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10d      	bne.n	800b19e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d14d      	bne.n	800b226 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 ff9e 	bl	800c0d0 <xTaskPriorityDisinherit>
 800b194:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	609a      	str	r2, [r3, #8]
 800b19c:	e043      	b.n	800b226 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d119      	bne.n	800b1d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6858      	ldr	r0, [r3, #4]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	f001 fddb 	bl	800cd6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1bc:	441a      	add	r2, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d32b      	bcc.n	800b226 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	605a      	str	r2, [r3, #4]
 800b1d6:	e026      	b.n	800b226 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68d8      	ldr	r0, [r3, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	68b9      	ldr	r1, [r7, #8]
 800b1e4:	f001 fdc1 	bl	800cd6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1f0:	425b      	negs	r3, r3
 800b1f2:	441a      	add	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	68da      	ldr	r2, [r3, #12]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	429a      	cmp	r2, r3
 800b202:	d207      	bcs.n	800b214 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	689a      	ldr	r2, [r3, #8]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b20c:	425b      	negs	r3, r3
 800b20e:	441a      	add	r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b02      	cmp	r3, #2
 800b218:	d105      	bne.n	800b226 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	3b01      	subs	r3, #1
 800b224:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b22e:	697b      	ldr	r3, [r7, #20]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b246:	2b00      	cmp	r3, #0
 800b248:	d018      	beq.n	800b27c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68da      	ldr	r2, [r3, #12]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b252:	441a      	add	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	68da      	ldr	r2, [r3, #12]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	429a      	cmp	r2, r3
 800b262:	d303      	bcc.n	800b26c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68d9      	ldr	r1, [r3, #12]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b274:	461a      	mov	r2, r3
 800b276:	6838      	ldr	r0, [r7, #0]
 800b278:	f001 fd77 	bl	800cd6a <memcpy>
	}
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b28c:	f7ff fabc 	bl	800a808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b296:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b298:	e011      	b.n	800b2be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d012      	beq.n	800b2c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	3324      	adds	r3, #36	@ 0x24
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 fd34 	bl	800bd14 <xTaskRemoveFromEventList>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2b2:	f000 fe0d 	bl	800bed0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	dce9      	bgt.n	800b29a <prvUnlockQueue+0x16>
 800b2c6:	e000      	b.n	800b2ca <prvUnlockQueue+0x46>
					break;
 800b2c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	22ff      	movs	r2, #255	@ 0xff
 800b2ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b2d2:	f7ff facb 	bl	800a86c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2d6:	f7ff fa97 	bl	800a808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b2e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2e2:	e011      	b.n	800b308 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d012      	beq.n	800b312 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3310      	adds	r3, #16
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 fd0f 	bl	800bd14 <xTaskRemoveFromEventList>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2fc:	f000 fde8 	bl	800bed0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b300:	7bbb      	ldrb	r3, [r7, #14]
 800b302:	3b01      	subs	r3, #1
 800b304:	b2db      	uxtb	r3, r3
 800b306:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dce9      	bgt.n	800b2e4 <prvUnlockQueue+0x60>
 800b310:	e000      	b.n	800b314 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b312:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	22ff      	movs	r2, #255	@ 0xff
 800b318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b31c:	f7ff faa6 	bl	800a86c <vPortExitCritical>
}
 800b320:	bf00      	nop
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b330:	f7ff fa6a 	bl	800a808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d102      	bne.n	800b342 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b33c:	2301      	movs	r3, #1
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	e001      	b.n	800b346 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b346:	f7ff fa91 	bl	800a86c <vPortExitCritical>

	return xReturn;
 800b34a:	68fb      	ldr	r3, [r7, #12]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b35c:	f7ff fa54 	bl	800a808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b368:	429a      	cmp	r2, r3
 800b36a:	d102      	bne.n	800b372 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b36c:	2301      	movs	r3, #1
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	e001      	b.n	800b376 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b376:	f7ff fa79 	bl	800a86c <vPortExitCritical>

	return xReturn;
 800b37a:	68fb      	ldr	r3, [r7, #12]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]
 800b392:	e014      	b.n	800b3be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b394:	4a0f      	ldr	r2, [pc, #60]	@ (800b3d4 <vQueueAddToRegistry+0x50>)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10b      	bne.n	800b3b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b3a0:	490c      	ldr	r1, [pc, #48]	@ (800b3d4 <vQueueAddToRegistry+0x50>)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3aa:	4a0a      	ldr	r2, [pc, #40]	@ (800b3d4 <vQueueAddToRegistry+0x50>)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	00db      	lsls	r3, r3, #3
 800b3b0:	4413      	add	r3, r2
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3b6:	e006      	b.n	800b3c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	60fb      	str	r3, [r7, #12]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b07      	cmp	r3, #7
 800b3c2:	d9e7      	bls.n	800b394 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3c4:	bf00      	nop
 800b3c6:	bf00      	nop
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	24004560 	.word	0x24004560

0800b3d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b3e8:	f7ff fa0e 	bl	800a808 <vPortEnterCritical>
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3f2:	b25b      	sxtb	r3, r3
 800b3f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3f8:	d103      	bne.n	800b402 <vQueueWaitForMessageRestricted+0x2a>
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b408:	b25b      	sxtb	r3, r3
 800b40a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b40e:	d103      	bne.n	800b418 <vQueueWaitForMessageRestricted+0x40>
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b418:	f7ff fa28 	bl	800a86c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b420:	2b00      	cmp	r3, #0
 800b422:	d106      	bne.n	800b432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	3324      	adds	r3, #36	@ 0x24
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	68b9      	ldr	r1, [r7, #8]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f000 fc45 	bl	800bcbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b432:	6978      	ldr	r0, [r7, #20]
 800b434:	f7ff ff26 	bl	800b284 <prvUnlockQueue>
	}
 800b438:	bf00      	nop
 800b43a:	3718      	adds	r7, #24
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08e      	sub	sp, #56	@ 0x38
 800b444:	af04      	add	r7, sp, #16
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10b      	bne.n	800b46c <xTaskCreateStatic+0x2c>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	623b      	str	r3, [r7, #32]
}
 800b466:	bf00      	nop
 800b468:	bf00      	nop
 800b46a:	e7fd      	b.n	800b468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10b      	bne.n	800b48a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	61fb      	str	r3, [r7, #28]
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop
 800b488:	e7fd      	b.n	800b486 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b48a:	235c      	movs	r3, #92	@ 0x5c
 800b48c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	2b5c      	cmp	r3, #92	@ 0x5c
 800b492:	d00b      	beq.n	800b4ac <xTaskCreateStatic+0x6c>
	__asm volatile
 800b494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	61bb      	str	r3, [r7, #24]
}
 800b4a6:	bf00      	nop
 800b4a8:	bf00      	nop
 800b4aa:	e7fd      	b.n	800b4a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d01e      	beq.n	800b4f2 <xTaskCreateStatic+0xb2>
 800b4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d01b      	beq.n	800b4f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9303      	str	r3, [sp, #12]
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d2:	9302      	str	r3, [sp, #8]
 800b4d4:	f107 0314 	add.w	r3, r7, #20
 800b4d8:	9301      	str	r3, [sp, #4]
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	68b9      	ldr	r1, [r7, #8]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f850 	bl	800b58a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b4ec:	f000 f8de 	bl	800b6ac <prvAddNewTaskToReadyList>
 800b4f0:	e001      	b.n	800b4f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4f6:	697b      	ldr	r3, [r7, #20]
	}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3728      	adds	r7, #40	@ 0x28
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b500:	b580      	push	{r7, lr}
 800b502:	b08c      	sub	sp, #48	@ 0x30
 800b504:	af04      	add	r7, sp, #16
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	4613      	mov	r3, r2
 800b50e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b510:	88fb      	ldrh	r3, [r7, #6]
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4618      	mov	r0, r3
 800b516:	f7fe fda3 	bl	800a060 <pvPortMalloc>
 800b51a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00e      	beq.n	800b540 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b522:	205c      	movs	r0, #92	@ 0x5c
 800b524:	f7fe fd9c 	bl	800a060 <pvPortMalloc>
 800b528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d003      	beq.n	800b538 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	631a      	str	r2, [r3, #48]	@ 0x30
 800b536:	e005      	b.n	800b544 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b538:	6978      	ldr	r0, [r7, #20]
 800b53a:	f7fe fe5f 	bl	800a1fc <vPortFree>
 800b53e:	e001      	b.n	800b544 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b540:	2300      	movs	r3, #0
 800b542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d017      	beq.n	800b57a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b552:	88fa      	ldrh	r2, [r7, #6]
 800b554:	2300      	movs	r3, #0
 800b556:	9303      	str	r3, [sp, #12]
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	9302      	str	r3, [sp, #8]
 800b55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55e:	9301      	str	r3, [sp, #4]
 800b560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 f80e 	bl	800b58a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b56e:	69f8      	ldr	r0, [r7, #28]
 800b570:	f000 f89c 	bl	800b6ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b574:	2301      	movs	r3, #1
 800b576:	61bb      	str	r3, [r7, #24]
 800b578:	e002      	b.n	800b580 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b57a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b57e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b580:	69bb      	ldr	r3, [r7, #24]
	}
 800b582:	4618      	mov	r0, r3
 800b584:	3720      	adds	r7, #32
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b088      	sub	sp, #32
 800b58e:	af00      	add	r7, sp, #0
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	607a      	str	r2, [r7, #4]
 800b596:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	21a5      	movs	r1, #165	@ 0xa5
 800b5a4:	f001 fb65 	bl	800cc72 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b5b2:	440b      	add	r3, r1
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	f023 0307 	bic.w	r3, r3, #7
 800b5c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	f003 0307 	and.w	r3, r3, #7
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00b      	beq.n	800b5e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	617b      	str	r3, [r7, #20]
}
 800b5de:	bf00      	nop
 800b5e0:	bf00      	nop
 800b5e2:	e7fd      	b.n	800b5e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d01f      	beq.n	800b62a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	61fb      	str	r3, [r7, #28]
 800b5ee:	e012      	b.n	800b616 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	7819      	ldrb	r1, [r3, #0]
 800b5f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	3334      	adds	r3, #52	@ 0x34
 800b600:	460a      	mov	r2, r1
 800b602:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	4413      	add	r3, r2
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d006      	beq.n	800b61e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	3301      	adds	r3, #1
 800b614:	61fb      	str	r3, [r7, #28]
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	2b0f      	cmp	r3, #15
 800b61a:	d9e9      	bls.n	800b5f0 <prvInitialiseNewTask+0x66>
 800b61c:	e000      	b.n	800b620 <prvInitialiseNewTask+0x96>
			{
				break;
 800b61e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b622:	2200      	movs	r2, #0
 800b624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b628:	e003      	b.n	800b632 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b634:	2b37      	cmp	r3, #55	@ 0x37
 800b636:	d901      	bls.n	800b63c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b638:	2337      	movs	r3, #55	@ 0x37
 800b63a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b640:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b646:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64a:	2200      	movs	r2, #0
 800b64c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b650:	3304      	adds	r3, #4
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe ff12 	bl	800a47c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65a:	3318      	adds	r3, #24
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe ff0d 	bl	800a47c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b666:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b66a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b670:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b676:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b67a:	2200      	movs	r2, #0
 800b67c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	68f9      	ldr	r1, [r7, #12]
 800b68a:	69b8      	ldr	r0, [r7, #24]
 800b68c:	f7fe ff8a 	bl	800a5a4 <pxPortInitialiseStack>
 800b690:	4602      	mov	r2, r0
 800b692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b694:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b69e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6a2:	bf00      	nop
 800b6a4:	3720      	adds	r7, #32
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
	...

0800b6ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6b4:	f7ff f8a8 	bl	800a808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6b8:	4b2d      	ldr	r3, [pc, #180]	@ (800b770 <prvAddNewTaskToReadyList+0xc4>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	4a2c      	ldr	r2, [pc, #176]	@ (800b770 <prvAddNewTaskToReadyList+0xc4>)
 800b6c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6c2:	4b2c      	ldr	r3, [pc, #176]	@ (800b774 <prvAddNewTaskToReadyList+0xc8>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d109      	bne.n	800b6de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6ca:	4a2a      	ldr	r2, [pc, #168]	@ (800b774 <prvAddNewTaskToReadyList+0xc8>)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b6d0:	4b27      	ldr	r3, [pc, #156]	@ (800b770 <prvAddNewTaskToReadyList+0xc4>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d110      	bne.n	800b6fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b6d8:	f000 fc1e 	bl	800bf18 <prvInitialiseTaskLists>
 800b6dc:	e00d      	b.n	800b6fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b6de:	4b26      	ldr	r3, [pc, #152]	@ (800b778 <prvAddNewTaskToReadyList+0xcc>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d109      	bne.n	800b6fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b6e6:	4b23      	ldr	r3, [pc, #140]	@ (800b774 <prvAddNewTaskToReadyList+0xc8>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d802      	bhi.n	800b6fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b6f4:	4a1f      	ldr	r2, [pc, #124]	@ (800b774 <prvAddNewTaskToReadyList+0xc8>)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b6fa:	4b20      	ldr	r3, [pc, #128]	@ (800b77c <prvAddNewTaskToReadyList+0xd0>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	3301      	adds	r3, #1
 800b700:	4a1e      	ldr	r2, [pc, #120]	@ (800b77c <prvAddNewTaskToReadyList+0xd0>)
 800b702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b704:	4b1d      	ldr	r3, [pc, #116]	@ (800b77c <prvAddNewTaskToReadyList+0xd0>)
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b710:	4b1b      	ldr	r3, [pc, #108]	@ (800b780 <prvAddNewTaskToReadyList+0xd4>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	429a      	cmp	r2, r3
 800b716:	d903      	bls.n	800b720 <prvAddNewTaskToReadyList+0x74>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b71c:	4a18      	ldr	r2, [pc, #96]	@ (800b780 <prvAddNewTaskToReadyList+0xd4>)
 800b71e:	6013      	str	r3, [r2, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b724:	4613      	mov	r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4a15      	ldr	r2, [pc, #84]	@ (800b784 <prvAddNewTaskToReadyList+0xd8>)
 800b72e:	441a      	add	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3304      	adds	r3, #4
 800b734:	4619      	mov	r1, r3
 800b736:	4610      	mov	r0, r2
 800b738:	f7fe fead 	bl	800a496 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b73c:	f7ff f896 	bl	800a86c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b740:	4b0d      	ldr	r3, [pc, #52]	@ (800b778 <prvAddNewTaskToReadyList+0xcc>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00e      	beq.n	800b766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b748:	4b0a      	ldr	r3, [pc, #40]	@ (800b774 <prvAddNewTaskToReadyList+0xc8>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b752:	429a      	cmp	r2, r3
 800b754:	d207      	bcs.n	800b766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b756:	4b0c      	ldr	r3, [pc, #48]	@ (800b788 <prvAddNewTaskToReadyList+0xdc>)
 800b758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b75c:	601a      	str	r2, [r3, #0]
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b766:	bf00      	nop
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	24004a74 	.word	0x24004a74
 800b774:	240045a0 	.word	0x240045a0
 800b778:	24004a80 	.word	0x24004a80
 800b77c:	24004a90 	.word	0x24004a90
 800b780:	24004a7c 	.word	0x24004a7c
 800b784:	240045a4 	.word	0x240045a4
 800b788:	e000ed04 	.word	0xe000ed04

0800b78c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b794:	2300      	movs	r3, #0
 800b796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d018      	beq.n	800b7d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b79e:	4b14      	ldr	r3, [pc, #80]	@ (800b7f0 <vTaskDelay+0x64>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00b      	beq.n	800b7be <vTaskDelay+0x32>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60bb      	str	r3, [r7, #8]
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	e7fd      	b.n	800b7ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7be:	f000 f883 	bl	800b8c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fcf3 	bl	800c1b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7ca:	f000 f88b 	bl	800b8e4 <xTaskResumeAll>
 800b7ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d107      	bne.n	800b7e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b7d6:	4b07      	ldr	r3, [pc, #28]	@ (800b7f4 <vTaskDelay+0x68>)
 800b7d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7dc:	601a      	str	r2, [r3, #0]
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7e6:	bf00      	nop
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	24004a9c 	.word	0x24004a9c
 800b7f4:	e000ed04 	.word	0xe000ed04

0800b7f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08a      	sub	sp, #40	@ 0x28
 800b7fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b802:	2300      	movs	r3, #0
 800b804:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b806:	463a      	mov	r2, r7
 800b808:	1d39      	adds	r1, r7, #4
 800b80a:	f107 0308 	add.w	r3, r7, #8
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe fbf2 	bl	8009ff8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	9202      	str	r2, [sp, #8]
 800b81c:	9301      	str	r3, [sp, #4]
 800b81e:	2300      	movs	r3, #0
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	2300      	movs	r3, #0
 800b824:	460a      	mov	r2, r1
 800b826:	4922      	ldr	r1, [pc, #136]	@ (800b8b0 <vTaskStartScheduler+0xb8>)
 800b828:	4822      	ldr	r0, [pc, #136]	@ (800b8b4 <vTaskStartScheduler+0xbc>)
 800b82a:	f7ff fe09 	bl	800b440 <xTaskCreateStatic>
 800b82e:	4603      	mov	r3, r0
 800b830:	4a21      	ldr	r2, [pc, #132]	@ (800b8b8 <vTaskStartScheduler+0xc0>)
 800b832:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b834:	4b20      	ldr	r3, [pc, #128]	@ (800b8b8 <vTaskStartScheduler+0xc0>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b83c:	2301      	movs	r3, #1
 800b83e:	617b      	str	r3, [r7, #20]
 800b840:	e001      	b.n	800b846 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b842:	2300      	movs	r3, #0
 800b844:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d102      	bne.n	800b852 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b84c:	f000 fd04 	bl	800c258 <xTimerCreateTimerTask>
 800b850:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d116      	bne.n	800b886 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	613b      	str	r3, [r7, #16]
}
 800b86a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b86c:	4b13      	ldr	r3, [pc, #76]	@ (800b8bc <vTaskStartScheduler+0xc4>)
 800b86e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b872:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b874:	4b12      	ldr	r3, [pc, #72]	@ (800b8c0 <vTaskStartScheduler+0xc8>)
 800b876:	2201      	movs	r2, #1
 800b878:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b87a:	4b12      	ldr	r3, [pc, #72]	@ (800b8c4 <vTaskStartScheduler+0xcc>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b880:	f7fe ff1e 	bl	800a6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b884:	e00f      	b.n	800b8a6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b88c:	d10b      	bne.n	800b8a6 <vTaskStartScheduler+0xae>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	60fb      	str	r3, [r7, #12]
}
 800b8a0:	bf00      	nop
 800b8a2:	bf00      	nop
 800b8a4:	e7fd      	b.n	800b8a2 <vTaskStartScheduler+0xaa>
}
 800b8a6:	bf00      	nop
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	0800d90c 	.word	0x0800d90c
 800b8b4:	0800bee9 	.word	0x0800bee9
 800b8b8:	24004a98 	.word	0x24004a98
 800b8bc:	24004a94 	.word	0x24004a94
 800b8c0:	24004a80 	.word	0x24004a80
 800b8c4:	24004a78 	.word	0x24004a78

0800b8c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b8cc:	4b04      	ldr	r3, [pc, #16]	@ (800b8e0 <vTaskSuspendAll+0x18>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	4a03      	ldr	r2, [pc, #12]	@ (800b8e0 <vTaskSuspendAll+0x18>)
 800b8d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b8d6:	bf00      	nop
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	24004a9c 	.word	0x24004a9c

0800b8e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8f2:	4b42      	ldr	r3, [pc, #264]	@ (800b9fc <xTaskResumeAll+0x118>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10b      	bne.n	800b912 <xTaskResumeAll+0x2e>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	603b      	str	r3, [r7, #0]
}
 800b90c:	bf00      	nop
 800b90e:	bf00      	nop
 800b910:	e7fd      	b.n	800b90e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b912:	f7fe ff79 	bl	800a808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b916:	4b39      	ldr	r3, [pc, #228]	@ (800b9fc <xTaskResumeAll+0x118>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3b01      	subs	r3, #1
 800b91c:	4a37      	ldr	r2, [pc, #220]	@ (800b9fc <xTaskResumeAll+0x118>)
 800b91e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b920:	4b36      	ldr	r3, [pc, #216]	@ (800b9fc <xTaskResumeAll+0x118>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d162      	bne.n	800b9ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b928:	4b35      	ldr	r3, [pc, #212]	@ (800ba00 <xTaskResumeAll+0x11c>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d05e      	beq.n	800b9ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b930:	e02f      	b.n	800b992 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b932:	4b34      	ldr	r3, [pc, #208]	@ (800ba04 <xTaskResumeAll+0x120>)
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3318      	adds	r3, #24
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fe fe06 	bl	800a550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	3304      	adds	r3, #4
 800b948:	4618      	mov	r0, r3
 800b94a:	f7fe fe01 	bl	800a550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b952:	4b2d      	ldr	r3, [pc, #180]	@ (800ba08 <xTaskResumeAll+0x124>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d903      	bls.n	800b962 <xTaskResumeAll+0x7e>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b95e:	4a2a      	ldr	r2, [pc, #168]	@ (800ba08 <xTaskResumeAll+0x124>)
 800b960:	6013      	str	r3, [r2, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b966:	4613      	mov	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4413      	add	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4a27      	ldr	r2, [pc, #156]	@ (800ba0c <xTaskResumeAll+0x128>)
 800b970:	441a      	add	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3304      	adds	r3, #4
 800b976:	4619      	mov	r1, r3
 800b978:	4610      	mov	r0, r2
 800b97a:	f7fe fd8c 	bl	800a496 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b982:	4b23      	ldr	r3, [pc, #140]	@ (800ba10 <xTaskResumeAll+0x12c>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b988:	429a      	cmp	r2, r3
 800b98a:	d302      	bcc.n	800b992 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b98c:	4b21      	ldr	r3, [pc, #132]	@ (800ba14 <xTaskResumeAll+0x130>)
 800b98e:	2201      	movs	r2, #1
 800b990:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b992:	4b1c      	ldr	r3, [pc, #112]	@ (800ba04 <xTaskResumeAll+0x120>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1cb      	bne.n	800b932 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9a0:	f000 fb58 	bl	800c054 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b9a4:	4b1c      	ldr	r3, [pc, #112]	@ (800ba18 <xTaskResumeAll+0x134>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d010      	beq.n	800b9d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9b0:	f000 f846 	bl	800ba40 <xTaskIncrementTick>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d002      	beq.n	800b9c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b9ba:	4b16      	ldr	r3, [pc, #88]	@ (800ba14 <xTaskResumeAll+0x130>)
 800b9bc:	2201      	movs	r2, #1
 800b9be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1f1      	bne.n	800b9b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b9cc:	4b12      	ldr	r3, [pc, #72]	@ (800ba18 <xTaskResumeAll+0x134>)
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9d2:	4b10      	ldr	r3, [pc, #64]	@ (800ba14 <xTaskResumeAll+0x130>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d009      	beq.n	800b9ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9de:	4b0f      	ldr	r3, [pc, #60]	@ (800ba1c <xTaskResumeAll+0x138>)
 800b9e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9e4:	601a      	str	r2, [r3, #0]
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9ee:	f7fe ff3d 	bl	800a86c <vPortExitCritical>

	return xAlreadyYielded;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	24004a9c 	.word	0x24004a9c
 800ba00:	24004a74 	.word	0x24004a74
 800ba04:	24004a34 	.word	0x24004a34
 800ba08:	24004a7c 	.word	0x24004a7c
 800ba0c:	240045a4 	.word	0x240045a4
 800ba10:	240045a0 	.word	0x240045a0
 800ba14:	24004a88 	.word	0x24004a88
 800ba18:	24004a84 	.word	0x24004a84
 800ba1c:	e000ed04 	.word	0xe000ed04

0800ba20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba26:	4b05      	ldr	r3, [pc, #20]	@ (800ba3c <xTaskGetTickCount+0x1c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba2c:	687b      	ldr	r3, [r7, #4]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	24004a78 	.word	0x24004a78

0800ba40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba46:	2300      	movs	r3, #0
 800ba48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba4a:	4b4f      	ldr	r3, [pc, #316]	@ (800bb88 <xTaskIncrementTick+0x148>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f040 8090 	bne.w	800bb74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba54:	4b4d      	ldr	r3, [pc, #308]	@ (800bb8c <xTaskIncrementTick+0x14c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba5c:	4a4b      	ldr	r2, [pc, #300]	@ (800bb8c <xTaskIncrementTick+0x14c>)
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d121      	bne.n	800baac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba68:	4b49      	ldr	r3, [pc, #292]	@ (800bb90 <xTaskIncrementTick+0x150>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00b      	beq.n	800ba8a <xTaskIncrementTick+0x4a>
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	603b      	str	r3, [r7, #0]
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop
 800ba88:	e7fd      	b.n	800ba86 <xTaskIncrementTick+0x46>
 800ba8a:	4b41      	ldr	r3, [pc, #260]	@ (800bb90 <xTaskIncrementTick+0x150>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	60fb      	str	r3, [r7, #12]
 800ba90:	4b40      	ldr	r3, [pc, #256]	@ (800bb94 <xTaskIncrementTick+0x154>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a3e      	ldr	r2, [pc, #248]	@ (800bb90 <xTaskIncrementTick+0x150>)
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	4a3e      	ldr	r2, [pc, #248]	@ (800bb94 <xTaskIncrementTick+0x154>)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	4b3e      	ldr	r3, [pc, #248]	@ (800bb98 <xTaskIncrementTick+0x158>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3301      	adds	r3, #1
 800baa4:	4a3c      	ldr	r2, [pc, #240]	@ (800bb98 <xTaskIncrementTick+0x158>)
 800baa6:	6013      	str	r3, [r2, #0]
 800baa8:	f000 fad4 	bl	800c054 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800baac:	4b3b      	ldr	r3, [pc, #236]	@ (800bb9c <xTaskIncrementTick+0x15c>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d349      	bcc.n	800bb4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bab6:	4b36      	ldr	r3, [pc, #216]	@ (800bb90 <xTaskIncrementTick+0x150>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d104      	bne.n	800baca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bac0:	4b36      	ldr	r3, [pc, #216]	@ (800bb9c <xTaskIncrementTick+0x15c>)
 800bac2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bac6:	601a      	str	r2, [r3, #0]
					break;
 800bac8:	e03f      	b.n	800bb4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baca:	4b31      	ldr	r3, [pc, #196]	@ (800bb90 <xTaskIncrementTick+0x150>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d203      	bcs.n	800baea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bae2:	4a2e      	ldr	r2, [pc, #184]	@ (800bb9c <xTaskIncrementTick+0x15c>)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bae8:	e02f      	b.n	800bb4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	3304      	adds	r3, #4
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fe fd2e 	bl	800a550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d004      	beq.n	800bb06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	3318      	adds	r3, #24
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fe fd25 	bl	800a550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb0a:	4b25      	ldr	r3, [pc, #148]	@ (800bba0 <xTaskIncrementTick+0x160>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d903      	bls.n	800bb1a <xTaskIncrementTick+0xda>
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb16:	4a22      	ldr	r2, [pc, #136]	@ (800bba0 <xTaskIncrementTick+0x160>)
 800bb18:	6013      	str	r3, [r2, #0]
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb1e:	4613      	mov	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4a1f      	ldr	r2, [pc, #124]	@ (800bba4 <xTaskIncrementTick+0x164>)
 800bb28:	441a      	add	r2, r3
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	4619      	mov	r1, r3
 800bb30:	4610      	mov	r0, r2
 800bb32:	f7fe fcb0 	bl	800a496 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb3a:	4b1b      	ldr	r3, [pc, #108]	@ (800bba8 <xTaskIncrementTick+0x168>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d3b8      	bcc.n	800bab6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bb44:	2301      	movs	r3, #1
 800bb46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb48:	e7b5      	b.n	800bab6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb4a:	4b17      	ldr	r3, [pc, #92]	@ (800bba8 <xTaskIncrementTick+0x168>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb50:	4914      	ldr	r1, [pc, #80]	@ (800bba4 <xTaskIncrementTick+0x164>)
 800bb52:	4613      	mov	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	440b      	add	r3, r1
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d901      	bls.n	800bb66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bb62:	2301      	movs	r3, #1
 800bb64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb66:	4b11      	ldr	r3, [pc, #68]	@ (800bbac <xTaskIncrementTick+0x16c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d007      	beq.n	800bb7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	617b      	str	r3, [r7, #20]
 800bb72:	e004      	b.n	800bb7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb74:	4b0e      	ldr	r3, [pc, #56]	@ (800bbb0 <xTaskIncrementTick+0x170>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	4a0d      	ldr	r2, [pc, #52]	@ (800bbb0 <xTaskIncrementTick+0x170>)
 800bb7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb7e:	697b      	ldr	r3, [r7, #20]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	24004a9c 	.word	0x24004a9c
 800bb8c:	24004a78 	.word	0x24004a78
 800bb90:	24004a2c 	.word	0x24004a2c
 800bb94:	24004a30 	.word	0x24004a30
 800bb98:	24004a8c 	.word	0x24004a8c
 800bb9c:	24004a94 	.word	0x24004a94
 800bba0:	24004a7c 	.word	0x24004a7c
 800bba4:	240045a4 	.word	0x240045a4
 800bba8:	240045a0 	.word	0x240045a0
 800bbac:	24004a88 	.word	0x24004a88
 800bbb0:	24004a84 	.word	0x24004a84

0800bbb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bbba:	4b28      	ldr	r3, [pc, #160]	@ (800bc5c <vTaskSwitchContext+0xa8>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d003      	beq.n	800bbca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bbc2:	4b27      	ldr	r3, [pc, #156]	@ (800bc60 <vTaskSwitchContext+0xac>)
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bbc8:	e042      	b.n	800bc50 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800bbca:	4b25      	ldr	r3, [pc, #148]	@ (800bc60 <vTaskSwitchContext+0xac>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbd0:	4b24      	ldr	r3, [pc, #144]	@ (800bc64 <vTaskSwitchContext+0xb0>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	e011      	b.n	800bbfc <vTaskSwitchContext+0x48>
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d10b      	bne.n	800bbf6 <vTaskSwitchContext+0x42>
	__asm volatile
 800bbde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe2:	f383 8811 	msr	BASEPRI, r3
 800bbe6:	f3bf 8f6f 	isb	sy
 800bbea:	f3bf 8f4f 	dsb	sy
 800bbee:	607b      	str	r3, [r7, #4]
}
 800bbf0:	bf00      	nop
 800bbf2:	bf00      	nop
 800bbf4:	e7fd      	b.n	800bbf2 <vTaskSwitchContext+0x3e>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	491a      	ldr	r1, [pc, #104]	@ (800bc68 <vTaskSwitchContext+0xb4>)
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	4613      	mov	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	440b      	add	r3, r1
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d0e3      	beq.n	800bbd8 <vTaskSwitchContext+0x24>
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4a13      	ldr	r2, [pc, #76]	@ (800bc68 <vTaskSwitchContext+0xb4>)
 800bc1c:	4413      	add	r3, r2
 800bc1e:	60bb      	str	r3, [r7, #8]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	605a      	str	r2, [r3, #4]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	3308      	adds	r3, #8
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d104      	bne.n	800bc40 <vTaskSwitchContext+0x8c>
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	605a      	str	r2, [r3, #4]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	4a09      	ldr	r2, [pc, #36]	@ (800bc6c <vTaskSwitchContext+0xb8>)
 800bc48:	6013      	str	r3, [r2, #0]
 800bc4a:	4a06      	ldr	r2, [pc, #24]	@ (800bc64 <vTaskSwitchContext+0xb0>)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6013      	str	r3, [r2, #0]
}
 800bc50:	bf00      	nop
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	24004a9c 	.word	0x24004a9c
 800bc60:	24004a88 	.word	0x24004a88
 800bc64:	24004a7c 	.word	0x24004a7c
 800bc68:	240045a4 	.word	0x240045a4
 800bc6c:	240045a0 	.word	0x240045a0

0800bc70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10b      	bne.n	800bc98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	60fb      	str	r3, [r7, #12]
}
 800bc92:	bf00      	nop
 800bc94:	bf00      	nop
 800bc96:	e7fd      	b.n	800bc94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc98:	4b07      	ldr	r3, [pc, #28]	@ (800bcb8 <vTaskPlaceOnEventList+0x48>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3318      	adds	r3, #24
 800bc9e:	4619      	mov	r1, r3
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7fe fc1c 	bl	800a4de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bca6:	2101      	movs	r1, #1
 800bca8:	6838      	ldr	r0, [r7, #0]
 800bcaa:	f000 fa81 	bl	800c1b0 <prvAddCurrentTaskToDelayedList>
}
 800bcae:	bf00      	nop
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	240045a0 	.word	0x240045a0

0800bcbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d10b      	bne.n	800bce6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bcce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	617b      	str	r3, [r7, #20]
}
 800bce0:	bf00      	nop
 800bce2:	bf00      	nop
 800bce4:	e7fd      	b.n	800bce2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bce6:	4b0a      	ldr	r3, [pc, #40]	@ (800bd10 <vTaskPlaceOnEventListRestricted+0x54>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	3318      	adds	r3, #24
 800bcec:	4619      	mov	r1, r3
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7fe fbd1 	bl	800a496 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d002      	beq.n	800bd00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bcfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcfe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd00:	6879      	ldr	r1, [r7, #4]
 800bd02:	68b8      	ldr	r0, [r7, #8]
 800bd04:	f000 fa54 	bl	800c1b0 <prvAddCurrentTaskToDelayedList>
	}
 800bd08:	bf00      	nop
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	240045a0 	.word	0x240045a0

0800bd14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10b      	bne.n	800bd42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	60fb      	str	r3, [r7, #12]
}
 800bd3c:	bf00      	nop
 800bd3e:	bf00      	nop
 800bd40:	e7fd      	b.n	800bd3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	3318      	adds	r3, #24
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fe fc02 	bl	800a550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd4c:	4b1d      	ldr	r3, [pc, #116]	@ (800bdc4 <xTaskRemoveFromEventList+0xb0>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d11d      	bne.n	800bd90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	3304      	adds	r3, #4
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fe fbf9 	bl	800a550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd62:	4b19      	ldr	r3, [pc, #100]	@ (800bdc8 <xTaskRemoveFromEventList+0xb4>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d903      	bls.n	800bd72 <xTaskRemoveFromEventList+0x5e>
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd6e:	4a16      	ldr	r2, [pc, #88]	@ (800bdc8 <xTaskRemoveFromEventList+0xb4>)
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd76:	4613      	mov	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4413      	add	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4a13      	ldr	r2, [pc, #76]	@ (800bdcc <xTaskRemoveFromEventList+0xb8>)
 800bd80:	441a      	add	r2, r3
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	3304      	adds	r3, #4
 800bd86:	4619      	mov	r1, r3
 800bd88:	4610      	mov	r0, r2
 800bd8a:	f7fe fb84 	bl	800a496 <vListInsertEnd>
 800bd8e:	e005      	b.n	800bd9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	3318      	adds	r3, #24
 800bd94:	4619      	mov	r1, r3
 800bd96:	480e      	ldr	r0, [pc, #56]	@ (800bdd0 <xTaskRemoveFromEventList+0xbc>)
 800bd98:	f7fe fb7d 	bl	800a496 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bda0:	4b0c      	ldr	r3, [pc, #48]	@ (800bdd4 <xTaskRemoveFromEventList+0xc0>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d905      	bls.n	800bdb6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bdae:	4b0a      	ldr	r3, [pc, #40]	@ (800bdd8 <xTaskRemoveFromEventList+0xc4>)
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	601a      	str	r2, [r3, #0]
 800bdb4:	e001      	b.n	800bdba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bdba:	697b      	ldr	r3, [r7, #20]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3718      	adds	r7, #24
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	24004a9c 	.word	0x24004a9c
 800bdc8:	24004a7c 	.word	0x24004a7c
 800bdcc:	240045a4 	.word	0x240045a4
 800bdd0:	24004a34 	.word	0x24004a34
 800bdd4:	240045a0 	.word	0x240045a0
 800bdd8:	24004a88 	.word	0x24004a88

0800bddc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bde4:	4b06      	ldr	r3, [pc, #24]	@ (800be00 <vTaskInternalSetTimeOutState+0x24>)
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bdec:	4b05      	ldr	r3, [pc, #20]	@ (800be04 <vTaskInternalSetTimeOutState+0x28>)
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	605a      	str	r2, [r3, #4]
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	24004a8c 	.word	0x24004a8c
 800be04:	24004a78 	.word	0x24004a78

0800be08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b088      	sub	sp, #32
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10b      	bne.n	800be30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	613b      	str	r3, [r7, #16]
}
 800be2a:	bf00      	nop
 800be2c:	bf00      	nop
 800be2e:	e7fd      	b.n	800be2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10b      	bne.n	800be4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	60fb      	str	r3, [r7, #12]
}
 800be48:	bf00      	nop
 800be4a:	bf00      	nop
 800be4c:	e7fd      	b.n	800be4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800be4e:	f7fe fcdb 	bl	800a808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be52:	4b1d      	ldr	r3, [pc, #116]	@ (800bec8 <xTaskCheckForTimeOut+0xc0>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	69ba      	ldr	r2, [r7, #24]
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be6a:	d102      	bne.n	800be72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be6c:	2300      	movs	r3, #0
 800be6e:	61fb      	str	r3, [r7, #28]
 800be70:	e023      	b.n	800beba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	4b15      	ldr	r3, [pc, #84]	@ (800becc <xTaskCheckForTimeOut+0xc4>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d007      	beq.n	800be8e <xTaskCheckForTimeOut+0x86>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	69ba      	ldr	r2, [r7, #24]
 800be84:	429a      	cmp	r2, r3
 800be86:	d302      	bcc.n	800be8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be88:	2301      	movs	r3, #1
 800be8a:	61fb      	str	r3, [r7, #28]
 800be8c:	e015      	b.n	800beba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	697a      	ldr	r2, [r7, #20]
 800be94:	429a      	cmp	r2, r3
 800be96:	d20b      	bcs.n	800beb0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	1ad2      	subs	r2, r2, r3
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f7ff ff99 	bl	800bddc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800beaa:	2300      	movs	r3, #0
 800beac:	61fb      	str	r3, [r7, #28]
 800beae:	e004      	b.n	800beba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	2200      	movs	r2, #0
 800beb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800beb6:	2301      	movs	r3, #1
 800beb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800beba:	f7fe fcd7 	bl	800a86c <vPortExitCritical>

	return xReturn;
 800bebe:	69fb      	ldr	r3, [r7, #28]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3720      	adds	r7, #32
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	24004a78 	.word	0x24004a78
 800becc:	24004a8c 	.word	0x24004a8c

0800bed0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bed0:	b480      	push	{r7}
 800bed2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bed4:	4b03      	ldr	r3, [pc, #12]	@ (800bee4 <vTaskMissedYield+0x14>)
 800bed6:	2201      	movs	r2, #1
 800bed8:	601a      	str	r2, [r3, #0]
}
 800beda:	bf00      	nop
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	24004a88 	.word	0x24004a88

0800bee8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bef0:	f000 f852 	bl	800bf98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bef4:	4b06      	ldr	r3, [pc, #24]	@ (800bf10 <prvIdleTask+0x28>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d9f9      	bls.n	800bef0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800befc:	4b05      	ldr	r3, [pc, #20]	@ (800bf14 <prvIdleTask+0x2c>)
 800befe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf02:	601a      	str	r2, [r3, #0]
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf0c:	e7f0      	b.n	800bef0 <prvIdleTask+0x8>
 800bf0e:	bf00      	nop
 800bf10:	240045a4 	.word	0x240045a4
 800bf14:	e000ed04 	.word	0xe000ed04

0800bf18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf1e:	2300      	movs	r3, #0
 800bf20:	607b      	str	r3, [r7, #4]
 800bf22:	e00c      	b.n	800bf3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	4613      	mov	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4413      	add	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4a12      	ldr	r2, [pc, #72]	@ (800bf78 <prvInitialiseTaskLists+0x60>)
 800bf30:	4413      	add	r3, r2
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fe fa82 	bl	800a43c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	607b      	str	r3, [r7, #4]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b37      	cmp	r3, #55	@ 0x37
 800bf42:	d9ef      	bls.n	800bf24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf44:	480d      	ldr	r0, [pc, #52]	@ (800bf7c <prvInitialiseTaskLists+0x64>)
 800bf46:	f7fe fa79 	bl	800a43c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf4a:	480d      	ldr	r0, [pc, #52]	@ (800bf80 <prvInitialiseTaskLists+0x68>)
 800bf4c:	f7fe fa76 	bl	800a43c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf50:	480c      	ldr	r0, [pc, #48]	@ (800bf84 <prvInitialiseTaskLists+0x6c>)
 800bf52:	f7fe fa73 	bl	800a43c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf56:	480c      	ldr	r0, [pc, #48]	@ (800bf88 <prvInitialiseTaskLists+0x70>)
 800bf58:	f7fe fa70 	bl	800a43c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf5c:	480b      	ldr	r0, [pc, #44]	@ (800bf8c <prvInitialiseTaskLists+0x74>)
 800bf5e:	f7fe fa6d 	bl	800a43c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf62:	4b0b      	ldr	r3, [pc, #44]	@ (800bf90 <prvInitialiseTaskLists+0x78>)
 800bf64:	4a05      	ldr	r2, [pc, #20]	@ (800bf7c <prvInitialiseTaskLists+0x64>)
 800bf66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf68:	4b0a      	ldr	r3, [pc, #40]	@ (800bf94 <prvInitialiseTaskLists+0x7c>)
 800bf6a:	4a05      	ldr	r2, [pc, #20]	@ (800bf80 <prvInitialiseTaskLists+0x68>)
 800bf6c:	601a      	str	r2, [r3, #0]
}
 800bf6e:	bf00      	nop
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	240045a4 	.word	0x240045a4
 800bf7c:	24004a04 	.word	0x24004a04
 800bf80:	24004a18 	.word	0x24004a18
 800bf84:	24004a34 	.word	0x24004a34
 800bf88:	24004a48 	.word	0x24004a48
 800bf8c:	24004a60 	.word	0x24004a60
 800bf90:	24004a2c 	.word	0x24004a2c
 800bf94:	24004a30 	.word	0x24004a30

0800bf98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf9e:	e019      	b.n	800bfd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfa0:	f7fe fc32 	bl	800a808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfa4:	4b10      	ldr	r3, [pc, #64]	@ (800bfe8 <prvCheckTasksWaitingTermination+0x50>)
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3304      	adds	r3, #4
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fe facd 	bl	800a550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800bfec <prvCheckTasksWaitingTermination+0x54>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	4a0b      	ldr	r2, [pc, #44]	@ (800bfec <prvCheckTasksWaitingTermination+0x54>)
 800bfbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfc0:	4b0b      	ldr	r3, [pc, #44]	@ (800bff0 <prvCheckTasksWaitingTermination+0x58>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	4a0a      	ldr	r2, [pc, #40]	@ (800bff0 <prvCheckTasksWaitingTermination+0x58>)
 800bfc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfca:	f7fe fc4f 	bl	800a86c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f810 	bl	800bff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfd4:	4b06      	ldr	r3, [pc, #24]	@ (800bff0 <prvCheckTasksWaitingTermination+0x58>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1e1      	bne.n	800bfa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bfdc:	bf00      	nop
 800bfde:	bf00      	nop
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	24004a48 	.word	0x24004a48
 800bfec:	24004a74 	.word	0x24004a74
 800bff0:	24004a5c 	.word	0x24004a5c

0800bff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c002:	2b00      	cmp	r3, #0
 800c004:	d108      	bne.n	800c018 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fe f8f6 	bl	800a1fc <vPortFree>
				vPortFree( pxTCB );
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7fe f8f3 	bl	800a1fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c016:	e019      	b.n	800c04c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d103      	bne.n	800c02a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f7fe f8ea 	bl	800a1fc <vPortFree>
	}
 800c028:	e010      	b.n	800c04c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c030:	2b02      	cmp	r3, #2
 800c032:	d00b      	beq.n	800c04c <prvDeleteTCB+0x58>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	60fb      	str	r3, [r7, #12]
}
 800c046:	bf00      	nop
 800c048:	bf00      	nop
 800c04a:	e7fd      	b.n	800c048 <prvDeleteTCB+0x54>
	}
 800c04c:	bf00      	nop
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c05a:	4b0c      	ldr	r3, [pc, #48]	@ (800c08c <prvResetNextTaskUnblockTime+0x38>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d104      	bne.n	800c06e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c064:	4b0a      	ldr	r3, [pc, #40]	@ (800c090 <prvResetNextTaskUnblockTime+0x3c>)
 800c066:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c06a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c06c:	e008      	b.n	800c080 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c06e:	4b07      	ldr	r3, [pc, #28]	@ (800c08c <prvResetNextTaskUnblockTime+0x38>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	4a04      	ldr	r2, [pc, #16]	@ (800c090 <prvResetNextTaskUnblockTime+0x3c>)
 800c07e:	6013      	str	r3, [r2, #0]
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	24004a2c 	.word	0x24004a2c
 800c090:	24004a94 	.word	0x24004a94

0800c094 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c09a:	4b0b      	ldr	r3, [pc, #44]	@ (800c0c8 <xTaskGetSchedulerState+0x34>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d102      	bne.n	800c0a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	607b      	str	r3, [r7, #4]
 800c0a6:	e008      	b.n	800c0ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0a8:	4b08      	ldr	r3, [pc, #32]	@ (800c0cc <xTaskGetSchedulerState+0x38>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d102      	bne.n	800c0b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	607b      	str	r3, [r7, #4]
 800c0b4:	e001      	b.n	800c0ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0ba:	687b      	ldr	r3, [r7, #4]
	}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	24004a80 	.word	0x24004a80
 800c0cc:	24004a9c 	.word	0x24004a9c

0800c0d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d058      	beq.n	800c198 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c0e6:	4b2f      	ldr	r3, [pc, #188]	@ (800c1a4 <xTaskPriorityDisinherit+0xd4>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d00b      	beq.n	800c108 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	60fb      	str	r3, [r7, #12]
}
 800c102:	bf00      	nop
 800c104:	bf00      	nop
 800c106:	e7fd      	b.n	800c104 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10b      	bne.n	800c128 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	60bb      	str	r3, [r7, #8]
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	e7fd      	b.n	800c124 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c12c:	1e5a      	subs	r2, r3, #1
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d02c      	beq.n	800c198 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c142:	2b00      	cmp	r3, #0
 800c144:	d128      	bne.n	800c198 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	3304      	adds	r3, #4
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe fa00 	bl	800a550 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c15c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c168:	4b0f      	ldr	r3, [pc, #60]	@ (800c1a8 <xTaskPriorityDisinherit+0xd8>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d903      	bls.n	800c178 <xTaskPriorityDisinherit+0xa8>
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c174:	4a0c      	ldr	r2, [pc, #48]	@ (800c1a8 <xTaskPriorityDisinherit+0xd8>)
 800c176:	6013      	str	r3, [r2, #0]
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c17c:	4613      	mov	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4a09      	ldr	r2, [pc, #36]	@ (800c1ac <xTaskPriorityDisinherit+0xdc>)
 800c186:	441a      	add	r2, r3
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	3304      	adds	r3, #4
 800c18c:	4619      	mov	r1, r3
 800c18e:	4610      	mov	r0, r2
 800c190:	f7fe f981 	bl	800a496 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c194:	2301      	movs	r3, #1
 800c196:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c198:	697b      	ldr	r3, [r7, #20]
	}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	240045a0 	.word	0x240045a0
 800c1a8:	24004a7c 	.word	0x24004a7c
 800c1ac:	240045a4 	.word	0x240045a4

0800c1b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1ba:	4b21      	ldr	r3, [pc, #132]	@ (800c240 <prvAddCurrentTaskToDelayedList+0x90>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1c0:	4b20      	ldr	r3, [pc, #128]	@ (800c244 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fe f9c2 	bl	800a550 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1d2:	d10a      	bne.n	800c1ea <prvAddCurrentTaskToDelayedList+0x3a>
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d007      	beq.n	800c1ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1da:	4b1a      	ldr	r3, [pc, #104]	@ (800c244 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	3304      	adds	r3, #4
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4819      	ldr	r0, [pc, #100]	@ (800c248 <prvAddCurrentTaskToDelayedList+0x98>)
 800c1e4:	f7fe f957 	bl	800a496 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1e8:	e026      	b.n	800c238 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1ea:	68fa      	ldr	r2, [r7, #12]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1f2:	4b14      	ldr	r3, [pc, #80]	@ (800c244 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d209      	bcs.n	800c216 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c202:	4b12      	ldr	r3, [pc, #72]	@ (800c24c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	4b0f      	ldr	r3, [pc, #60]	@ (800c244 <prvAddCurrentTaskToDelayedList+0x94>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3304      	adds	r3, #4
 800c20c:	4619      	mov	r1, r3
 800c20e:	4610      	mov	r0, r2
 800c210:	f7fe f965 	bl	800a4de <vListInsert>
}
 800c214:	e010      	b.n	800c238 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c216:	4b0e      	ldr	r3, [pc, #56]	@ (800c250 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	4b0a      	ldr	r3, [pc, #40]	@ (800c244 <prvAddCurrentTaskToDelayedList+0x94>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3304      	adds	r3, #4
 800c220:	4619      	mov	r1, r3
 800c222:	4610      	mov	r0, r2
 800c224:	f7fe f95b 	bl	800a4de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c228:	4b0a      	ldr	r3, [pc, #40]	@ (800c254 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d202      	bcs.n	800c238 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c232:	4a08      	ldr	r2, [pc, #32]	@ (800c254 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	6013      	str	r3, [r2, #0]
}
 800c238:	bf00      	nop
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	24004a78 	.word	0x24004a78
 800c244:	240045a0 	.word	0x240045a0
 800c248:	24004a60 	.word	0x24004a60
 800c24c:	24004a30 	.word	0x24004a30
 800c250:	24004a2c 	.word	0x24004a2c
 800c254:	24004a94 	.word	0x24004a94

0800c258 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08a      	sub	sp, #40	@ 0x28
 800c25c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c25e:	2300      	movs	r3, #0
 800c260:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c262:	f000 fb13 	bl	800c88c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c266:	4b1d      	ldr	r3, [pc, #116]	@ (800c2dc <xTimerCreateTimerTask+0x84>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d021      	beq.n	800c2b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c26e:	2300      	movs	r3, #0
 800c270:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c272:	2300      	movs	r3, #0
 800c274:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c276:	1d3a      	adds	r2, r7, #4
 800c278:	f107 0108 	add.w	r1, r7, #8
 800c27c:	f107 030c 	add.w	r3, r7, #12
 800c280:	4618      	mov	r0, r3
 800c282:	f7fd fed3 	bl	800a02c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c286:	6879      	ldr	r1, [r7, #4]
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	9202      	str	r2, [sp, #8]
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	2302      	movs	r3, #2
 800c292:	9300      	str	r3, [sp, #0]
 800c294:	2300      	movs	r3, #0
 800c296:	460a      	mov	r2, r1
 800c298:	4911      	ldr	r1, [pc, #68]	@ (800c2e0 <xTimerCreateTimerTask+0x88>)
 800c29a:	4812      	ldr	r0, [pc, #72]	@ (800c2e4 <xTimerCreateTimerTask+0x8c>)
 800c29c:	f7ff f8d0 	bl	800b440 <xTaskCreateStatic>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	4a11      	ldr	r2, [pc, #68]	@ (800c2e8 <xTimerCreateTimerTask+0x90>)
 800c2a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c2a6:	4b10      	ldr	r3, [pc, #64]	@ (800c2e8 <xTimerCreateTimerTask+0x90>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10b      	bne.n	800c2d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	613b      	str	r3, [r7, #16]
}
 800c2ca:	bf00      	nop
 800c2cc:	bf00      	nop
 800c2ce:	e7fd      	b.n	800c2cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c2d0:	697b      	ldr	r3, [r7, #20]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3718      	adds	r7, #24
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	24004ad0 	.word	0x24004ad0
 800c2e0:	0800d914 	.word	0x0800d914
 800c2e4:	0800c425 	.word	0x0800c425
 800c2e8:	24004ad4 	.word	0x24004ad4

0800c2ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08a      	sub	sp, #40	@ 0x28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
 800c2f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10b      	bne.n	800c31c <xTimerGenericCommand+0x30>
	__asm volatile
 800c304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	623b      	str	r3, [r7, #32]
}
 800c316:	bf00      	nop
 800c318:	bf00      	nop
 800c31a:	e7fd      	b.n	800c318 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c31c:	4b19      	ldr	r3, [pc, #100]	@ (800c384 <xTimerGenericCommand+0x98>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d02a      	beq.n	800c37a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2b05      	cmp	r3, #5
 800c334:	dc18      	bgt.n	800c368 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c336:	f7ff fead 	bl	800c094 <xTaskGetSchedulerState>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d109      	bne.n	800c354 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c340:	4b10      	ldr	r3, [pc, #64]	@ (800c384 <xTimerGenericCommand+0x98>)
 800c342:	6818      	ldr	r0, [r3, #0]
 800c344:	f107 0110 	add.w	r1, r7, #16
 800c348:	2300      	movs	r3, #0
 800c34a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c34c:	f7fe fc88 	bl	800ac60 <xQueueGenericSend>
 800c350:	6278      	str	r0, [r7, #36]	@ 0x24
 800c352:	e012      	b.n	800c37a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c354:	4b0b      	ldr	r3, [pc, #44]	@ (800c384 <xTimerGenericCommand+0x98>)
 800c356:	6818      	ldr	r0, [r3, #0]
 800c358:	f107 0110 	add.w	r1, r7, #16
 800c35c:	2300      	movs	r3, #0
 800c35e:	2200      	movs	r2, #0
 800c360:	f7fe fc7e 	bl	800ac60 <xQueueGenericSend>
 800c364:	6278      	str	r0, [r7, #36]	@ 0x24
 800c366:	e008      	b.n	800c37a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c368:	4b06      	ldr	r3, [pc, #24]	@ (800c384 <xTimerGenericCommand+0x98>)
 800c36a:	6818      	ldr	r0, [r3, #0]
 800c36c:	f107 0110 	add.w	r1, r7, #16
 800c370:	2300      	movs	r3, #0
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	f7fe fd76 	bl	800ae64 <xQueueGenericSendFromISR>
 800c378:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3728      	adds	r7, #40	@ 0x28
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	24004ad0 	.word	0x24004ad0

0800c388 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b088      	sub	sp, #32
 800c38c:	af02      	add	r7, sp, #8
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c392:	4b23      	ldr	r3, [pc, #140]	@ (800c420 <prvProcessExpiredTimer+0x98>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	3304      	adds	r3, #4
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fe f8d5 	bl	800a550 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3ac:	f003 0304 	and.w	r3, r3, #4
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d023      	beq.n	800c3fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	699a      	ldr	r2, [r3, #24]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	18d1      	adds	r1, r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	683a      	ldr	r2, [r7, #0]
 800c3c0:	6978      	ldr	r0, [r7, #20]
 800c3c2:	f000 f8d5 	bl	800c570 <prvInsertTimerInActiveList>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d020      	beq.n	800c40e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	9300      	str	r3, [sp, #0]
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	6978      	ldr	r0, [r7, #20]
 800c3d8:	f7ff ff88 	bl	800c2ec <xTimerGenericCommand>
 800c3dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d114      	bne.n	800c40e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	60fb      	str	r3, [r7, #12]
}
 800c3f6:	bf00      	nop
 800c3f8:	bf00      	nop
 800c3fa:	e7fd      	b.n	800c3f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c402:	f023 0301 	bic.w	r3, r3, #1
 800c406:	b2da      	uxtb	r2, r3
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	6a1b      	ldr	r3, [r3, #32]
 800c412:	6978      	ldr	r0, [r7, #20]
 800c414:	4798      	blx	r3
}
 800c416:	bf00      	nop
 800c418:	3718      	adds	r7, #24
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	24004ac8 	.word	0x24004ac8

0800c424 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c42c:	f107 0308 	add.w	r3, r7, #8
 800c430:	4618      	mov	r0, r3
 800c432:	f000 f859 	bl	800c4e8 <prvGetNextExpireTime>
 800c436:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	4619      	mov	r1, r3
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f000 f805 	bl	800c44c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c442:	f000 f8d7 	bl	800c5f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c446:	bf00      	nop
 800c448:	e7f0      	b.n	800c42c <prvTimerTask+0x8>
	...

0800c44c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c456:	f7ff fa37 	bl	800b8c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c45a:	f107 0308 	add.w	r3, r7, #8
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 f866 	bl	800c530 <prvSampleTimeNow>
 800c464:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d130      	bne.n	800c4ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10a      	bne.n	800c488 <prvProcessTimerOrBlockTask+0x3c>
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	429a      	cmp	r2, r3
 800c478:	d806      	bhi.n	800c488 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c47a:	f7ff fa33 	bl	800b8e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c47e:	68f9      	ldr	r1, [r7, #12]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff ff81 	bl	800c388 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c486:	e024      	b.n	800c4d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d008      	beq.n	800c4a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c48e:	4b13      	ldr	r3, [pc, #76]	@ (800c4dc <prvProcessTimerOrBlockTask+0x90>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d101      	bne.n	800c49c <prvProcessTimerOrBlockTask+0x50>
 800c498:	2301      	movs	r3, #1
 800c49a:	e000      	b.n	800c49e <prvProcessTimerOrBlockTask+0x52>
 800c49c:	2300      	movs	r3, #0
 800c49e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c4e0 <prvProcessTimerOrBlockTask+0x94>)
 800c4a2:	6818      	ldr	r0, [r3, #0]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	f7fe ff93 	bl	800b3d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4b2:	f7ff fa17 	bl	800b8e4 <xTaskResumeAll>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10a      	bne.n	800c4d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c4bc:	4b09      	ldr	r3, [pc, #36]	@ (800c4e4 <prvProcessTimerOrBlockTask+0x98>)
 800c4be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4c2:	601a      	str	r2, [r3, #0]
 800c4c4:	f3bf 8f4f 	dsb	sy
 800c4c8:	f3bf 8f6f 	isb	sy
}
 800c4cc:	e001      	b.n	800c4d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c4ce:	f7ff fa09 	bl	800b8e4 <xTaskResumeAll>
}
 800c4d2:	bf00      	nop
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	24004acc 	.word	0x24004acc
 800c4e0:	24004ad0 	.word	0x24004ad0
 800c4e4:	e000ed04 	.word	0xe000ed04

0800c4e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c4f0:	4b0e      	ldr	r3, [pc, #56]	@ (800c52c <prvGetNextExpireTime+0x44>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d101      	bne.n	800c4fe <prvGetNextExpireTime+0x16>
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	e000      	b.n	800c500 <prvGetNextExpireTime+0x18>
 800c4fe:	2200      	movs	r2, #0
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d105      	bne.n	800c518 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c50c:	4b07      	ldr	r3, [pc, #28]	@ (800c52c <prvGetNextExpireTime+0x44>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	60fb      	str	r3, [r7, #12]
 800c516:	e001      	b.n	800c51c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c518:	2300      	movs	r3, #0
 800c51a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c51c:	68fb      	ldr	r3, [r7, #12]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	24004ac8 	.word	0x24004ac8

0800c530 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c538:	f7ff fa72 	bl	800ba20 <xTaskGetTickCount>
 800c53c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c53e:	4b0b      	ldr	r3, [pc, #44]	@ (800c56c <prvSampleTimeNow+0x3c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	429a      	cmp	r2, r3
 800c546:	d205      	bcs.n	800c554 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c548:	f000 f93a 	bl	800c7c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	601a      	str	r2, [r3, #0]
 800c552:	e002      	b.n	800c55a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c55a:	4a04      	ldr	r2, [pc, #16]	@ (800c56c <prvSampleTimeNow+0x3c>)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c560:	68fb      	ldr	r3, [r7, #12]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	24004ad8 	.word	0x24004ad8

0800c570 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
 800c57c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c57e:	2300      	movs	r3, #0
 800c580:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	429a      	cmp	r2, r3
 800c594:	d812      	bhi.n	800c5bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	1ad2      	subs	r2, r2, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d302      	bcc.n	800c5aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	617b      	str	r3, [r7, #20]
 800c5a8:	e01b      	b.n	800c5e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5aa:	4b10      	ldr	r3, [pc, #64]	@ (800c5ec <prvInsertTimerInActiveList+0x7c>)
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	f7fd ff92 	bl	800a4de <vListInsert>
 800c5ba:	e012      	b.n	800c5e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d206      	bcs.n	800c5d2 <prvInsertTimerInActiveList+0x62>
 800c5c4:	68ba      	ldr	r2, [r7, #8]
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d302      	bcc.n	800c5d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	617b      	str	r3, [r7, #20]
 800c5d0:	e007      	b.n	800c5e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5d2:	4b07      	ldr	r3, [pc, #28]	@ (800c5f0 <prvInsertTimerInActiveList+0x80>)
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3304      	adds	r3, #4
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4610      	mov	r0, r2
 800c5de:	f7fd ff7e 	bl	800a4de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c5e2:	697b      	ldr	r3, [r7, #20]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3718      	adds	r7, #24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	24004acc 	.word	0x24004acc
 800c5f0:	24004ac8 	.word	0x24004ac8

0800c5f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08e      	sub	sp, #56	@ 0x38
 800c5f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5fa:	e0ce      	b.n	800c79a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	da19      	bge.n	800c636 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c602:	1d3b      	adds	r3, r7, #4
 800c604:	3304      	adds	r3, #4
 800c606:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10b      	bne.n	800c626 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	61fb      	str	r3, [r7, #28]
}
 800c620:	bf00      	nop
 800c622:	bf00      	nop
 800c624:	e7fd      	b.n	800c622 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c62c:	6850      	ldr	r0, [r2, #4]
 800c62e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c630:	6892      	ldr	r2, [r2, #8]
 800c632:	4611      	mov	r1, r2
 800c634:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f2c0 80ae 	blt.w	800c79a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c644:	695b      	ldr	r3, [r3, #20]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d004      	beq.n	800c654 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64c:	3304      	adds	r3, #4
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fd ff7e 	bl	800a550 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c654:	463b      	mov	r3, r7
 800c656:	4618      	mov	r0, r3
 800c658:	f7ff ff6a 	bl	800c530 <prvSampleTimeNow>
 800c65c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b09      	cmp	r3, #9
 800c662:	f200 8097 	bhi.w	800c794 <prvProcessReceivedCommands+0x1a0>
 800c666:	a201      	add	r2, pc, #4	@ (adr r2, 800c66c <prvProcessReceivedCommands+0x78>)
 800c668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66c:	0800c695 	.word	0x0800c695
 800c670:	0800c695 	.word	0x0800c695
 800c674:	0800c695 	.word	0x0800c695
 800c678:	0800c70b 	.word	0x0800c70b
 800c67c:	0800c71f 	.word	0x0800c71f
 800c680:	0800c76b 	.word	0x0800c76b
 800c684:	0800c695 	.word	0x0800c695
 800c688:	0800c695 	.word	0x0800c695
 800c68c:	0800c70b 	.word	0x0800c70b
 800c690:	0800c71f 	.word	0x0800c71f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c69a:	f043 0301 	orr.w	r3, r3, #1
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	18d1      	adds	r1, r2, r3
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6b4:	f7ff ff5c 	bl	800c570 <prvInsertTimerInActiveList>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d06c      	beq.n	800c798 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6cc:	f003 0304 	and.w	r3, r3, #4
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d061      	beq.n	800c798 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d8:	699b      	ldr	r3, [r3, #24]
 800c6da:	441a      	add	r2, r3
 800c6dc:	2300      	movs	r3, #0
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6e6:	f7ff fe01 	bl	800c2ec <xTimerGenericCommand>
 800c6ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c6ec:	6a3b      	ldr	r3, [r7, #32]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d152      	bne.n	800c798 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f6:	f383 8811 	msr	BASEPRI, r3
 800c6fa:	f3bf 8f6f 	isb	sy
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	61bb      	str	r3, [r7, #24]
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop
 800c708:	e7fd      	b.n	800c706 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c70c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c710:	f023 0301 	bic.w	r3, r3, #1
 800c714:	b2da      	uxtb	r2, r3
 800c716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c718:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c71c:	e03d      	b.n	800c79a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c724:	f043 0301 	orr.w	r3, r3, #1
 800c728:	b2da      	uxtb	r2, r3
 800c72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c72c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c734:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10b      	bne.n	800c756 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	617b      	str	r3, [r7, #20]
}
 800c750:	bf00      	nop
 800c752:	bf00      	nop
 800c754:	e7fd      	b.n	800c752 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c758:	699a      	ldr	r2, [r3, #24]
 800c75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75c:	18d1      	adds	r1, r2, r3
 800c75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c764:	f7ff ff04 	bl	800c570 <prvInsertTimerInActiveList>
					break;
 800c768:	e017      	b.n	800c79a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c770:	f003 0302 	and.w	r3, r3, #2
 800c774:	2b00      	cmp	r3, #0
 800c776:	d103      	bne.n	800c780 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c77a:	f7fd fd3f 	bl	800a1fc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c77e:	e00c      	b.n	800c79a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c782:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c786:	f023 0301 	bic.w	r3, r3, #1
 800c78a:	b2da      	uxtb	r2, r3
 800c78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c78e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c792:	e002      	b.n	800c79a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c794:	bf00      	nop
 800c796:	e000      	b.n	800c79a <prvProcessReceivedCommands+0x1a6>
					break;
 800c798:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c79a:	4b08      	ldr	r3, [pc, #32]	@ (800c7bc <prvProcessReceivedCommands+0x1c8>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	1d39      	adds	r1, r7, #4
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fe fbfc 	bl	800afa0 <xQueueReceive>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f47f af26 	bne.w	800c5fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c7b0:	bf00      	nop
 800c7b2:	bf00      	nop
 800c7b4:	3730      	adds	r7, #48	@ 0x30
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	24004ad0 	.word	0x24004ad0

0800c7c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b088      	sub	sp, #32
 800c7c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7c6:	e049      	b.n	800c85c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7c8:	4b2e      	ldr	r3, [pc, #184]	@ (800c884 <prvSwitchTimerLists+0xc4>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7d2:	4b2c      	ldr	r3, [pc, #176]	@ (800c884 <prvSwitchTimerLists+0xc4>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	3304      	adds	r3, #4
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fd feb5 	bl	800a550 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6a1b      	ldr	r3, [r3, #32]
 800c7ea:	68f8      	ldr	r0, [r7, #12]
 800c7ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7f4:	f003 0304 	and.w	r3, r3, #4
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d02f      	beq.n	800c85c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	693a      	ldr	r2, [r7, #16]
 800c802:	4413      	add	r3, r2
 800c804:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d90e      	bls.n	800c82c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c81a:	4b1a      	ldr	r3, [pc, #104]	@ (800c884 <prvSwitchTimerLists+0xc4>)
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3304      	adds	r3, #4
 800c822:	4619      	mov	r1, r3
 800c824:	4610      	mov	r0, r2
 800c826:	f7fd fe5a 	bl	800a4de <vListInsert>
 800c82a:	e017      	b.n	800c85c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c82c:	2300      	movs	r3, #0
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	2300      	movs	r3, #0
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	2100      	movs	r1, #0
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f7ff fd58 	bl	800c2ec <xTimerGenericCommand>
 800c83c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d10b      	bne.n	800c85c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c848:	f383 8811 	msr	BASEPRI, r3
 800c84c:	f3bf 8f6f 	isb	sy
 800c850:	f3bf 8f4f 	dsb	sy
 800c854:	603b      	str	r3, [r7, #0]
}
 800c856:	bf00      	nop
 800c858:	bf00      	nop
 800c85a:	e7fd      	b.n	800c858 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c85c:	4b09      	ldr	r3, [pc, #36]	@ (800c884 <prvSwitchTimerLists+0xc4>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d1b0      	bne.n	800c7c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c866:	4b07      	ldr	r3, [pc, #28]	@ (800c884 <prvSwitchTimerLists+0xc4>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c86c:	4b06      	ldr	r3, [pc, #24]	@ (800c888 <prvSwitchTimerLists+0xc8>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a04      	ldr	r2, [pc, #16]	@ (800c884 <prvSwitchTimerLists+0xc4>)
 800c872:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c874:	4a04      	ldr	r2, [pc, #16]	@ (800c888 <prvSwitchTimerLists+0xc8>)
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	6013      	str	r3, [r2, #0]
}
 800c87a:	bf00      	nop
 800c87c:	3718      	adds	r7, #24
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	24004ac8 	.word	0x24004ac8
 800c888:	24004acc 	.word	0x24004acc

0800c88c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c892:	f7fd ffb9 	bl	800a808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c896:	4b15      	ldr	r3, [pc, #84]	@ (800c8ec <prvCheckForValidListAndQueue+0x60>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d120      	bne.n	800c8e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c89e:	4814      	ldr	r0, [pc, #80]	@ (800c8f0 <prvCheckForValidListAndQueue+0x64>)
 800c8a0:	f7fd fdcc 	bl	800a43c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8a4:	4813      	ldr	r0, [pc, #76]	@ (800c8f4 <prvCheckForValidListAndQueue+0x68>)
 800c8a6:	f7fd fdc9 	bl	800a43c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8aa:	4b13      	ldr	r3, [pc, #76]	@ (800c8f8 <prvCheckForValidListAndQueue+0x6c>)
 800c8ac:	4a10      	ldr	r2, [pc, #64]	@ (800c8f0 <prvCheckForValidListAndQueue+0x64>)
 800c8ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8b0:	4b12      	ldr	r3, [pc, #72]	@ (800c8fc <prvCheckForValidListAndQueue+0x70>)
 800c8b2:	4a10      	ldr	r2, [pc, #64]	@ (800c8f4 <prvCheckForValidListAndQueue+0x68>)
 800c8b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	4b11      	ldr	r3, [pc, #68]	@ (800c900 <prvCheckForValidListAndQueue+0x74>)
 800c8bc:	4a11      	ldr	r2, [pc, #68]	@ (800c904 <prvCheckForValidListAndQueue+0x78>)
 800c8be:	2110      	movs	r1, #16
 800c8c0:	200a      	movs	r0, #10
 800c8c2:	f7fe f92d 	bl	800ab20 <xQueueGenericCreateStatic>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	4a08      	ldr	r2, [pc, #32]	@ (800c8ec <prvCheckForValidListAndQueue+0x60>)
 800c8ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c8cc:	4b07      	ldr	r3, [pc, #28]	@ (800c8ec <prvCheckForValidListAndQueue+0x60>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d005      	beq.n	800c8e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c8d4:	4b05      	ldr	r3, [pc, #20]	@ (800c8ec <prvCheckForValidListAndQueue+0x60>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	490b      	ldr	r1, [pc, #44]	@ (800c908 <prvCheckForValidListAndQueue+0x7c>)
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fe fd52 	bl	800b384 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8e0:	f7fd ffc4 	bl	800a86c <vPortExitCritical>
}
 800c8e4:	bf00      	nop
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	24004ad0 	.word	0x24004ad0
 800c8f0:	24004aa0 	.word	0x24004aa0
 800c8f4:	24004ab4 	.word	0x24004ab4
 800c8f8:	24004ac8 	.word	0x24004ac8
 800c8fc:	24004acc 	.word	0x24004acc
 800c900:	24004b7c 	.word	0x24004b7c
 800c904:	24004adc 	.word	0x24004adc
 800c908:	0800d91c 	.word	0x0800d91c

0800c90c <idle_task>:
#include "task_header.h"

void idle_task(void *argument)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
	while (1){
 800c914:	bf00      	nop
 800c916:	e7fd      	b.n	800c914 <idle_task+0x8>

0800c918 <batterie_task>:
#include "batteries_task.h"

extern osThreadId_t batterieHandle;

void batterie_task(void *argument)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
	//setup

	int adc_reading = 0;
 800c920:	2300      	movs	r3, #0
 800c922:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, "Batt\n", 6, -1);
 800c924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c928:	2206      	movs	r2, #6
 800c92a:	490b      	ldr	r1, [pc, #44]	@ (800c958 <batterie_task+0x40>)
 800c92c:	480b      	ldr	r0, [pc, #44]	@ (800c95c <batterie_task+0x44>)
 800c92e:	f7fb fa67 	bl	8007e00 <HAL_UART_Transmit>
	//loop
	while(1)
	{
		HAL_ADC_Start_IT(&hadc1);
 800c932:	480b      	ldr	r0, [pc, #44]	@ (800c960 <batterie_task+0x48>)
 800c934:	f7f5 f996 	bl	8001c64 <HAL_ADC_Start_IT>
		osThreadYield();
 800c938:	f7fd fb22 	bl	8009f80 <osThreadYield>

		adc_reading = HAL_ADC_GetValue(&hadc1);
 800c93c:	4808      	ldr	r0, [pc, #32]	@ (800c960 <batterie_task+0x48>)
 800c93e:	f7f5 facf 	bl	8001ee0 <HAL_ADC_GetValue>
 800c942:	4603      	mov	r3, r0
 800c944:	60fb      	str	r3, [r7, #12]

			// Process ADC value (e.g., print or use)
		printf("ADC Value: %lu\r\n", adc_reading);
 800c946:	68f9      	ldr	r1, [r7, #12]
 800c948:	4806      	ldr	r0, [pc, #24]	@ (800c964 <batterie_task+0x4c>)
 800c94a:	f000 f93d 	bl	800cbc8 <iprintf>

			// Start next conversion
		osDelay(ADC_SAMPLE_PERIOD_UC);
 800c94e:	4806      	ldr	r0, [pc, #24]	@ (800c968 <batterie_task+0x50>)
 800c950:	f7fd fb36 	bl	8009fc0 <osDelay>
	{
 800c954:	bf00      	nop
 800c956:	e7ec      	b.n	800c932 <batterie_task+0x1a>
 800c958:	0800d924 	.word	0x0800d924
 800c95c:	240001e4 	.word	0x240001e4
 800c960:	2400008c 	.word	0x2400008c
 800c964:	0800d92c 	.word	0x0800d92c
 800c968:	000927c0 	.word	0x000927c0

0800c96c <cnss_task>:
 */

#include "cnss_task.h"

void cnss_task(void *argument)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit(&huart3, "Gnss\n", 6,-1);
 800c974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c978:	2206      	movs	r2, #6
 800c97a:	4904      	ldr	r1, [pc, #16]	@ (800c98c <cnss_task+0x20>)
 800c97c:	4804      	ldr	r0, [pc, #16]	@ (800c990 <cnss_task+0x24>)
 800c97e:	f7fb fa3f 	bl	8007e00 <HAL_UART_Transmit>
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 800c982:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c986:	f7fd fb1b 	bl	8009fc0 <osDelay>
 800c98a:	e7fa      	b.n	800c982 <cnss_task+0x16>
 800c98c:	0800d940 	.word	0x0800d940
 800c990:	240001e4 	.word	0x240001e4

0800c994 <imu_task>:
 */

#include "imu_task.h"

void imu_task(void *argument)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
	//setup
	HAL_UART_Transmit(&huart3, "IMU\n", 5,-1);
 800c99c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9a0:	2205      	movs	r2, #5
 800c9a2:	4907      	ldr	r1, [pc, #28]	@ (800c9c0 <imu_task+0x2c>)
 800c9a4:	4807      	ldr	r0, [pc, #28]	@ (800c9c4 <imu_task+0x30>)
 800c9a6:	f7fb fa2b 	bl	8007e00 <HAL_UART_Transmit>
	//loop
	while(1)
	{
		//to implement yet
		//osDelay(IMU_SAMPLE_PERIOD_UC);
		HAL_UART_Transmit_IT(&huart3, "Test\n", 6);
 800c9aa:	2206      	movs	r2, #6
 800c9ac:	4906      	ldr	r1, [pc, #24]	@ (800c9c8 <imu_task+0x34>)
 800c9ae:	4805      	ldr	r0, [pc, #20]	@ (800c9c4 <imu_task+0x30>)
 800c9b0:	f7fb fab4 	bl	8007f1c <HAL_UART_Transmit_IT>
		osDelay(100);
 800c9b4:	2064      	movs	r0, #100	@ 0x64
 800c9b6:	f7fd fb03 	bl	8009fc0 <osDelay>
		HAL_UART_Transmit_IT(&huart3, "Test\n", 6);
 800c9ba:	bf00      	nop
 800c9bc:	e7f5      	b.n	800c9aa <imu_task+0x16>
 800c9be:	bf00      	nop
 800c9c0:	0800d948 	.word	0x0800d948
 800c9c4:	240001e4 	.word	0x240001e4
 800c9c8:	0800d950 	.word	0x0800d950

0800c9cc <nb_iot_task>:
 */

#include "nb_iot_task.h"

void nb_iot_task(void *argument)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit(&huart3, "NB-Iot\n", 7,-1);
 800c9d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9d8:	2207      	movs	r2, #7
 800c9da:	4904      	ldr	r1, [pc, #16]	@ (800c9ec <nb_iot_task+0x20>)
 800c9dc:	4804      	ldr	r0, [pc, #16]	@ (800c9f0 <nb_iot_task+0x24>)
 800c9de:	f7fb fa0f 	bl	8007e00 <HAL_UART_Transmit>
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 800c9e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9e6:	f7fd faeb 	bl	8009fc0 <osDelay>
 800c9ea:	e7fa      	b.n	800c9e2 <nb_iot_task+0x16>
 800c9ec:	0800d958 	.word	0x0800d958
 800c9f0:	240001e4 	.word	0x240001e4

0800c9f4 <sd_card_task>:
 *  Created on: Apr 23, 2025
 *      Author: viny
 */
#include "sd_card_task.h"
void sd_card_task(void *argument)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit(&huart3, "SD-Card\n", 9,-1);
 800c9fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca00:	2209      	movs	r2, #9
 800ca02:	4904      	ldr	r1, [pc, #16]	@ (800ca14 <sd_card_task+0x20>)
 800ca04:	4804      	ldr	r0, [pc, #16]	@ (800ca18 <sd_card_task+0x24>)
 800ca06:	f7fb f9fb 	bl	8007e00 <HAL_UART_Transmit>
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 800ca0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca0e:	f7fd fad7 	bl	8009fc0 <osDelay>
 800ca12:	e7fa      	b.n	800ca0a <sd_card_task+0x16>
 800ca14:	0800d960 	.word	0x0800d960
 800ca18:	240001e4 	.word	0x240001e4

0800ca1c <temp_task>:
 */

#include "temp_task.h"

void temp_task(void *argument)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit(&huart3, "Temp\n", 6,-1);
 800ca24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca28:	2206      	movs	r2, #6
 800ca2a:	4904      	ldr	r1, [pc, #16]	@ (800ca3c <temp_task+0x20>)
 800ca2c:	4804      	ldr	r0, [pc, #16]	@ (800ca40 <temp_task+0x24>)
 800ca2e:	f7fb f9e7 	bl	8007e00 <HAL_UART_Transmit>
	//loop
	while(1)
	{
		//one wire comunication
		osDelay(DELAY_MAX);
 800ca32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca36:	f7fd fac3 	bl	8009fc0 <osDelay>
 800ca3a:	e7fa      	b.n	800ca32 <temp_task+0x16>
 800ca3c:	0800d96c 	.word	0x0800d96c
 800ca40:	240001e4 	.word	0x240001e4

0800ca44 <std>:
 800ca44:	2300      	movs	r3, #0
 800ca46:	b510      	push	{r4, lr}
 800ca48:	4604      	mov	r4, r0
 800ca4a:	e9c0 3300 	strd	r3, r3, [r0]
 800ca4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca52:	6083      	str	r3, [r0, #8]
 800ca54:	8181      	strh	r1, [r0, #12]
 800ca56:	6643      	str	r3, [r0, #100]	@ 0x64
 800ca58:	81c2      	strh	r2, [r0, #14]
 800ca5a:	6183      	str	r3, [r0, #24]
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	2208      	movs	r2, #8
 800ca60:	305c      	adds	r0, #92	@ 0x5c
 800ca62:	f000 f906 	bl	800cc72 <memset>
 800ca66:	4b0d      	ldr	r3, [pc, #52]	@ (800ca9c <std+0x58>)
 800ca68:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca6a:	4b0d      	ldr	r3, [pc, #52]	@ (800caa0 <std+0x5c>)
 800ca6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca6e:	4b0d      	ldr	r3, [pc, #52]	@ (800caa4 <std+0x60>)
 800ca70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca72:	4b0d      	ldr	r3, [pc, #52]	@ (800caa8 <std+0x64>)
 800ca74:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca76:	4b0d      	ldr	r3, [pc, #52]	@ (800caac <std+0x68>)
 800ca78:	6224      	str	r4, [r4, #32]
 800ca7a:	429c      	cmp	r4, r3
 800ca7c:	d006      	beq.n	800ca8c <std+0x48>
 800ca7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ca82:	4294      	cmp	r4, r2
 800ca84:	d002      	beq.n	800ca8c <std+0x48>
 800ca86:	33d0      	adds	r3, #208	@ 0xd0
 800ca88:	429c      	cmp	r4, r3
 800ca8a:	d105      	bne.n	800ca98 <std+0x54>
 800ca8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ca90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca94:	f000 b966 	b.w	800cd64 <__retarget_lock_init_recursive>
 800ca98:	bd10      	pop	{r4, pc}
 800ca9a:	bf00      	nop
 800ca9c:	0800cbed 	.word	0x0800cbed
 800caa0:	0800cc0f 	.word	0x0800cc0f
 800caa4:	0800cc47 	.word	0x0800cc47
 800caa8:	0800cc6b 	.word	0x0800cc6b
 800caac:	24004bcc 	.word	0x24004bcc

0800cab0 <stdio_exit_handler>:
 800cab0:	4a02      	ldr	r2, [pc, #8]	@ (800cabc <stdio_exit_handler+0xc>)
 800cab2:	4903      	ldr	r1, [pc, #12]	@ (800cac0 <stdio_exit_handler+0x10>)
 800cab4:	4803      	ldr	r0, [pc, #12]	@ (800cac4 <stdio_exit_handler+0x14>)
 800cab6:	f000 b869 	b.w	800cb8c <_fwalk_sglue>
 800caba:	bf00      	nop
 800cabc:	24000014 	.word	0x24000014
 800cac0:	0800d61d 	.word	0x0800d61d
 800cac4:	24000024 	.word	0x24000024

0800cac8 <cleanup_stdio>:
 800cac8:	6841      	ldr	r1, [r0, #4]
 800caca:	4b0c      	ldr	r3, [pc, #48]	@ (800cafc <cleanup_stdio+0x34>)
 800cacc:	4299      	cmp	r1, r3
 800cace:	b510      	push	{r4, lr}
 800cad0:	4604      	mov	r4, r0
 800cad2:	d001      	beq.n	800cad8 <cleanup_stdio+0x10>
 800cad4:	f000 fda2 	bl	800d61c <_fflush_r>
 800cad8:	68a1      	ldr	r1, [r4, #8]
 800cada:	4b09      	ldr	r3, [pc, #36]	@ (800cb00 <cleanup_stdio+0x38>)
 800cadc:	4299      	cmp	r1, r3
 800cade:	d002      	beq.n	800cae6 <cleanup_stdio+0x1e>
 800cae0:	4620      	mov	r0, r4
 800cae2:	f000 fd9b 	bl	800d61c <_fflush_r>
 800cae6:	68e1      	ldr	r1, [r4, #12]
 800cae8:	4b06      	ldr	r3, [pc, #24]	@ (800cb04 <cleanup_stdio+0x3c>)
 800caea:	4299      	cmp	r1, r3
 800caec:	d004      	beq.n	800caf8 <cleanup_stdio+0x30>
 800caee:	4620      	mov	r0, r4
 800caf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caf4:	f000 bd92 	b.w	800d61c <_fflush_r>
 800caf8:	bd10      	pop	{r4, pc}
 800cafa:	bf00      	nop
 800cafc:	24004bcc 	.word	0x24004bcc
 800cb00:	24004c34 	.word	0x24004c34
 800cb04:	24004c9c 	.word	0x24004c9c

0800cb08 <global_stdio_init.part.0>:
 800cb08:	b510      	push	{r4, lr}
 800cb0a:	4b0b      	ldr	r3, [pc, #44]	@ (800cb38 <global_stdio_init.part.0+0x30>)
 800cb0c:	4c0b      	ldr	r4, [pc, #44]	@ (800cb3c <global_stdio_init.part.0+0x34>)
 800cb0e:	4a0c      	ldr	r2, [pc, #48]	@ (800cb40 <global_stdio_init.part.0+0x38>)
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	4620      	mov	r0, r4
 800cb14:	2200      	movs	r2, #0
 800cb16:	2104      	movs	r1, #4
 800cb18:	f7ff ff94 	bl	800ca44 <std>
 800cb1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cb20:	2201      	movs	r2, #1
 800cb22:	2109      	movs	r1, #9
 800cb24:	f7ff ff8e 	bl	800ca44 <std>
 800cb28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cb2c:	2202      	movs	r2, #2
 800cb2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb32:	2112      	movs	r1, #18
 800cb34:	f7ff bf86 	b.w	800ca44 <std>
 800cb38:	24004d04 	.word	0x24004d04
 800cb3c:	24004bcc 	.word	0x24004bcc
 800cb40:	0800cab1 	.word	0x0800cab1

0800cb44 <__sfp_lock_acquire>:
 800cb44:	4801      	ldr	r0, [pc, #4]	@ (800cb4c <__sfp_lock_acquire+0x8>)
 800cb46:	f000 b90e 	b.w	800cd66 <__retarget_lock_acquire_recursive>
 800cb4a:	bf00      	nop
 800cb4c:	24004d0d 	.word	0x24004d0d

0800cb50 <__sfp_lock_release>:
 800cb50:	4801      	ldr	r0, [pc, #4]	@ (800cb58 <__sfp_lock_release+0x8>)
 800cb52:	f000 b909 	b.w	800cd68 <__retarget_lock_release_recursive>
 800cb56:	bf00      	nop
 800cb58:	24004d0d 	.word	0x24004d0d

0800cb5c <__sinit>:
 800cb5c:	b510      	push	{r4, lr}
 800cb5e:	4604      	mov	r4, r0
 800cb60:	f7ff fff0 	bl	800cb44 <__sfp_lock_acquire>
 800cb64:	6a23      	ldr	r3, [r4, #32]
 800cb66:	b11b      	cbz	r3, 800cb70 <__sinit+0x14>
 800cb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb6c:	f7ff bff0 	b.w	800cb50 <__sfp_lock_release>
 800cb70:	4b04      	ldr	r3, [pc, #16]	@ (800cb84 <__sinit+0x28>)
 800cb72:	6223      	str	r3, [r4, #32]
 800cb74:	4b04      	ldr	r3, [pc, #16]	@ (800cb88 <__sinit+0x2c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1f5      	bne.n	800cb68 <__sinit+0xc>
 800cb7c:	f7ff ffc4 	bl	800cb08 <global_stdio_init.part.0>
 800cb80:	e7f2      	b.n	800cb68 <__sinit+0xc>
 800cb82:	bf00      	nop
 800cb84:	0800cac9 	.word	0x0800cac9
 800cb88:	24004d04 	.word	0x24004d04

0800cb8c <_fwalk_sglue>:
 800cb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb90:	4607      	mov	r7, r0
 800cb92:	4688      	mov	r8, r1
 800cb94:	4614      	mov	r4, r2
 800cb96:	2600      	movs	r6, #0
 800cb98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb9c:	f1b9 0901 	subs.w	r9, r9, #1
 800cba0:	d505      	bpl.n	800cbae <_fwalk_sglue+0x22>
 800cba2:	6824      	ldr	r4, [r4, #0]
 800cba4:	2c00      	cmp	r4, #0
 800cba6:	d1f7      	bne.n	800cb98 <_fwalk_sglue+0xc>
 800cba8:	4630      	mov	r0, r6
 800cbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbae:	89ab      	ldrh	r3, [r5, #12]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d907      	bls.n	800cbc4 <_fwalk_sglue+0x38>
 800cbb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	d003      	beq.n	800cbc4 <_fwalk_sglue+0x38>
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	47c0      	blx	r8
 800cbc2:	4306      	orrs	r6, r0
 800cbc4:	3568      	adds	r5, #104	@ 0x68
 800cbc6:	e7e9      	b.n	800cb9c <_fwalk_sglue+0x10>

0800cbc8 <iprintf>:
 800cbc8:	b40f      	push	{r0, r1, r2, r3}
 800cbca:	b507      	push	{r0, r1, r2, lr}
 800cbcc:	4906      	ldr	r1, [pc, #24]	@ (800cbe8 <iprintf+0x20>)
 800cbce:	ab04      	add	r3, sp, #16
 800cbd0:	6808      	ldr	r0, [r1, #0]
 800cbd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbd6:	6881      	ldr	r1, [r0, #8]
 800cbd8:	9301      	str	r3, [sp, #4]
 800cbda:	f000 f9f7 	bl	800cfcc <_vfiprintf_r>
 800cbde:	b003      	add	sp, #12
 800cbe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbe4:	b004      	add	sp, #16
 800cbe6:	4770      	bx	lr
 800cbe8:	24000020 	.word	0x24000020

0800cbec <__sread>:
 800cbec:	b510      	push	{r4, lr}
 800cbee:	460c      	mov	r4, r1
 800cbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf4:	f000 f868 	bl	800ccc8 <_read_r>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	bfab      	itete	ge
 800cbfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbfe:	89a3      	ldrhlt	r3, [r4, #12]
 800cc00:	181b      	addge	r3, r3, r0
 800cc02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cc06:	bfac      	ite	ge
 800cc08:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cc0a:	81a3      	strhlt	r3, [r4, #12]
 800cc0c:	bd10      	pop	{r4, pc}

0800cc0e <__swrite>:
 800cc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc12:	461f      	mov	r7, r3
 800cc14:	898b      	ldrh	r3, [r1, #12]
 800cc16:	05db      	lsls	r3, r3, #23
 800cc18:	4605      	mov	r5, r0
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	4616      	mov	r6, r2
 800cc1e:	d505      	bpl.n	800cc2c <__swrite+0x1e>
 800cc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc24:	2302      	movs	r3, #2
 800cc26:	2200      	movs	r2, #0
 800cc28:	f000 f83c 	bl	800cca4 <_lseek_r>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc36:	81a3      	strh	r3, [r4, #12]
 800cc38:	4632      	mov	r2, r6
 800cc3a:	463b      	mov	r3, r7
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc42:	f000 b853 	b.w	800ccec <_write_r>

0800cc46 <__sseek>:
 800cc46:	b510      	push	{r4, lr}
 800cc48:	460c      	mov	r4, r1
 800cc4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc4e:	f000 f829 	bl	800cca4 <_lseek_r>
 800cc52:	1c43      	adds	r3, r0, #1
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	bf15      	itete	ne
 800cc58:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc62:	81a3      	strheq	r3, [r4, #12]
 800cc64:	bf18      	it	ne
 800cc66:	81a3      	strhne	r3, [r4, #12]
 800cc68:	bd10      	pop	{r4, pc}

0800cc6a <__sclose>:
 800cc6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc6e:	f000 b809 	b.w	800cc84 <_close_r>

0800cc72 <memset>:
 800cc72:	4402      	add	r2, r0
 800cc74:	4603      	mov	r3, r0
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d100      	bne.n	800cc7c <memset+0xa>
 800cc7a:	4770      	bx	lr
 800cc7c:	f803 1b01 	strb.w	r1, [r3], #1
 800cc80:	e7f9      	b.n	800cc76 <memset+0x4>
	...

0800cc84 <_close_r>:
 800cc84:	b538      	push	{r3, r4, r5, lr}
 800cc86:	4d06      	ldr	r5, [pc, #24]	@ (800cca0 <_close_r+0x1c>)
 800cc88:	2300      	movs	r3, #0
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	4608      	mov	r0, r1
 800cc8e:	602b      	str	r3, [r5, #0]
 800cc90:	f7f4 fa95 	bl	80011be <_close>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_close_r+0x1a>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_close_r+0x1a>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	24004d08 	.word	0x24004d08

0800cca4 <_lseek_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d07      	ldr	r5, [pc, #28]	@ (800ccc4 <_lseek_r+0x20>)
 800cca8:	4604      	mov	r4, r0
 800ccaa:	4608      	mov	r0, r1
 800ccac:	4611      	mov	r1, r2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	602a      	str	r2, [r5, #0]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	f7f4 faaa 	bl	800120c <_lseek>
 800ccb8:	1c43      	adds	r3, r0, #1
 800ccba:	d102      	bne.n	800ccc2 <_lseek_r+0x1e>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	b103      	cbz	r3, 800ccc2 <_lseek_r+0x1e>
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	bd38      	pop	{r3, r4, r5, pc}
 800ccc4:	24004d08 	.word	0x24004d08

0800ccc8 <_read_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4d07      	ldr	r5, [pc, #28]	@ (800cce8 <_read_r+0x20>)
 800cccc:	4604      	mov	r4, r0
 800ccce:	4608      	mov	r0, r1
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	602a      	str	r2, [r5, #0]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f7f4 fa38 	bl	800114c <_read>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_read_r+0x1e>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_read_r+0x1e>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	24004d08 	.word	0x24004d08

0800ccec <_write_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d07      	ldr	r5, [pc, #28]	@ (800cd0c <_write_r+0x20>)
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	4608      	mov	r0, r1
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	602a      	str	r2, [r5, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	f7f4 fa43 	bl	8001186 <_write>
 800cd00:	1c43      	adds	r3, r0, #1
 800cd02:	d102      	bne.n	800cd0a <_write_r+0x1e>
 800cd04:	682b      	ldr	r3, [r5, #0]
 800cd06:	b103      	cbz	r3, 800cd0a <_write_r+0x1e>
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
 800cd0c:	24004d08 	.word	0x24004d08

0800cd10 <__errno>:
 800cd10:	4b01      	ldr	r3, [pc, #4]	@ (800cd18 <__errno+0x8>)
 800cd12:	6818      	ldr	r0, [r3, #0]
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	24000020 	.word	0x24000020

0800cd1c <__libc_init_array>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	4d0d      	ldr	r5, [pc, #52]	@ (800cd54 <__libc_init_array+0x38>)
 800cd20:	4c0d      	ldr	r4, [pc, #52]	@ (800cd58 <__libc_init_array+0x3c>)
 800cd22:	1b64      	subs	r4, r4, r5
 800cd24:	10a4      	asrs	r4, r4, #2
 800cd26:	2600      	movs	r6, #0
 800cd28:	42a6      	cmp	r6, r4
 800cd2a:	d109      	bne.n	800cd40 <__libc_init_array+0x24>
 800cd2c:	4d0b      	ldr	r5, [pc, #44]	@ (800cd5c <__libc_init_array+0x40>)
 800cd2e:	4c0c      	ldr	r4, [pc, #48]	@ (800cd60 <__libc_init_array+0x44>)
 800cd30:	f000 fdc4 	bl	800d8bc <_init>
 800cd34:	1b64      	subs	r4, r4, r5
 800cd36:	10a4      	asrs	r4, r4, #2
 800cd38:	2600      	movs	r6, #0
 800cd3a:	42a6      	cmp	r6, r4
 800cd3c:	d105      	bne.n	800cd4a <__libc_init_array+0x2e>
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd44:	4798      	blx	r3
 800cd46:	3601      	adds	r6, #1
 800cd48:	e7ee      	b.n	800cd28 <__libc_init_array+0xc>
 800cd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd4e:	4798      	blx	r3
 800cd50:	3601      	adds	r6, #1
 800cd52:	e7f2      	b.n	800cd3a <__libc_init_array+0x1e>
 800cd54:	0800dae4 	.word	0x0800dae4
 800cd58:	0800dae4 	.word	0x0800dae4
 800cd5c:	0800dae4 	.word	0x0800dae4
 800cd60:	0800dae8 	.word	0x0800dae8

0800cd64 <__retarget_lock_init_recursive>:
 800cd64:	4770      	bx	lr

0800cd66 <__retarget_lock_acquire_recursive>:
 800cd66:	4770      	bx	lr

0800cd68 <__retarget_lock_release_recursive>:
 800cd68:	4770      	bx	lr

0800cd6a <memcpy>:
 800cd6a:	440a      	add	r2, r1
 800cd6c:	4291      	cmp	r1, r2
 800cd6e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cd72:	d100      	bne.n	800cd76 <memcpy+0xc>
 800cd74:	4770      	bx	lr
 800cd76:	b510      	push	{r4, lr}
 800cd78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd80:	4291      	cmp	r1, r2
 800cd82:	d1f9      	bne.n	800cd78 <memcpy+0xe>
 800cd84:	bd10      	pop	{r4, pc}
	...

0800cd88 <_free_r>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	2900      	cmp	r1, #0
 800cd8e:	d041      	beq.n	800ce14 <_free_r+0x8c>
 800cd90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd94:	1f0c      	subs	r4, r1, #4
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	bfb8      	it	lt
 800cd9a:	18e4      	addlt	r4, r4, r3
 800cd9c:	f000 f8e0 	bl	800cf60 <__malloc_lock>
 800cda0:	4a1d      	ldr	r2, [pc, #116]	@ (800ce18 <_free_r+0x90>)
 800cda2:	6813      	ldr	r3, [r2, #0]
 800cda4:	b933      	cbnz	r3, 800cdb4 <_free_r+0x2c>
 800cda6:	6063      	str	r3, [r4, #4]
 800cda8:	6014      	str	r4, [r2, #0]
 800cdaa:	4628      	mov	r0, r5
 800cdac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdb0:	f000 b8dc 	b.w	800cf6c <__malloc_unlock>
 800cdb4:	42a3      	cmp	r3, r4
 800cdb6:	d908      	bls.n	800cdca <_free_r+0x42>
 800cdb8:	6820      	ldr	r0, [r4, #0]
 800cdba:	1821      	adds	r1, r4, r0
 800cdbc:	428b      	cmp	r3, r1
 800cdbe:	bf01      	itttt	eq
 800cdc0:	6819      	ldreq	r1, [r3, #0]
 800cdc2:	685b      	ldreq	r3, [r3, #4]
 800cdc4:	1809      	addeq	r1, r1, r0
 800cdc6:	6021      	streq	r1, [r4, #0]
 800cdc8:	e7ed      	b.n	800cda6 <_free_r+0x1e>
 800cdca:	461a      	mov	r2, r3
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	b10b      	cbz	r3, 800cdd4 <_free_r+0x4c>
 800cdd0:	42a3      	cmp	r3, r4
 800cdd2:	d9fa      	bls.n	800cdca <_free_r+0x42>
 800cdd4:	6811      	ldr	r1, [r2, #0]
 800cdd6:	1850      	adds	r0, r2, r1
 800cdd8:	42a0      	cmp	r0, r4
 800cdda:	d10b      	bne.n	800cdf4 <_free_r+0x6c>
 800cddc:	6820      	ldr	r0, [r4, #0]
 800cdde:	4401      	add	r1, r0
 800cde0:	1850      	adds	r0, r2, r1
 800cde2:	4283      	cmp	r3, r0
 800cde4:	6011      	str	r1, [r2, #0]
 800cde6:	d1e0      	bne.n	800cdaa <_free_r+0x22>
 800cde8:	6818      	ldr	r0, [r3, #0]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	6053      	str	r3, [r2, #4]
 800cdee:	4408      	add	r0, r1
 800cdf0:	6010      	str	r0, [r2, #0]
 800cdf2:	e7da      	b.n	800cdaa <_free_r+0x22>
 800cdf4:	d902      	bls.n	800cdfc <_free_r+0x74>
 800cdf6:	230c      	movs	r3, #12
 800cdf8:	602b      	str	r3, [r5, #0]
 800cdfa:	e7d6      	b.n	800cdaa <_free_r+0x22>
 800cdfc:	6820      	ldr	r0, [r4, #0]
 800cdfe:	1821      	adds	r1, r4, r0
 800ce00:	428b      	cmp	r3, r1
 800ce02:	bf04      	itt	eq
 800ce04:	6819      	ldreq	r1, [r3, #0]
 800ce06:	685b      	ldreq	r3, [r3, #4]
 800ce08:	6063      	str	r3, [r4, #4]
 800ce0a:	bf04      	itt	eq
 800ce0c:	1809      	addeq	r1, r1, r0
 800ce0e:	6021      	streq	r1, [r4, #0]
 800ce10:	6054      	str	r4, [r2, #4]
 800ce12:	e7ca      	b.n	800cdaa <_free_r+0x22>
 800ce14:	bd38      	pop	{r3, r4, r5, pc}
 800ce16:	bf00      	nop
 800ce18:	24004d14 	.word	0x24004d14

0800ce1c <sbrk_aligned>:
 800ce1c:	b570      	push	{r4, r5, r6, lr}
 800ce1e:	4e0f      	ldr	r6, [pc, #60]	@ (800ce5c <sbrk_aligned+0x40>)
 800ce20:	460c      	mov	r4, r1
 800ce22:	6831      	ldr	r1, [r6, #0]
 800ce24:	4605      	mov	r5, r0
 800ce26:	b911      	cbnz	r1, 800ce2e <sbrk_aligned+0x12>
 800ce28:	f000 fcb4 	bl	800d794 <_sbrk_r>
 800ce2c:	6030      	str	r0, [r6, #0]
 800ce2e:	4621      	mov	r1, r4
 800ce30:	4628      	mov	r0, r5
 800ce32:	f000 fcaf 	bl	800d794 <_sbrk_r>
 800ce36:	1c43      	adds	r3, r0, #1
 800ce38:	d103      	bne.n	800ce42 <sbrk_aligned+0x26>
 800ce3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ce3e:	4620      	mov	r0, r4
 800ce40:	bd70      	pop	{r4, r5, r6, pc}
 800ce42:	1cc4      	adds	r4, r0, #3
 800ce44:	f024 0403 	bic.w	r4, r4, #3
 800ce48:	42a0      	cmp	r0, r4
 800ce4a:	d0f8      	beq.n	800ce3e <sbrk_aligned+0x22>
 800ce4c:	1a21      	subs	r1, r4, r0
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f000 fca0 	bl	800d794 <_sbrk_r>
 800ce54:	3001      	adds	r0, #1
 800ce56:	d1f2      	bne.n	800ce3e <sbrk_aligned+0x22>
 800ce58:	e7ef      	b.n	800ce3a <sbrk_aligned+0x1e>
 800ce5a:	bf00      	nop
 800ce5c:	24004d10 	.word	0x24004d10

0800ce60 <_malloc_r>:
 800ce60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce64:	1ccd      	adds	r5, r1, #3
 800ce66:	f025 0503 	bic.w	r5, r5, #3
 800ce6a:	3508      	adds	r5, #8
 800ce6c:	2d0c      	cmp	r5, #12
 800ce6e:	bf38      	it	cc
 800ce70:	250c      	movcc	r5, #12
 800ce72:	2d00      	cmp	r5, #0
 800ce74:	4606      	mov	r6, r0
 800ce76:	db01      	blt.n	800ce7c <_malloc_r+0x1c>
 800ce78:	42a9      	cmp	r1, r5
 800ce7a:	d904      	bls.n	800ce86 <_malloc_r+0x26>
 800ce7c:	230c      	movs	r3, #12
 800ce7e:	6033      	str	r3, [r6, #0]
 800ce80:	2000      	movs	r0, #0
 800ce82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf5c <_malloc_r+0xfc>
 800ce8a:	f000 f869 	bl	800cf60 <__malloc_lock>
 800ce8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce92:	461c      	mov	r4, r3
 800ce94:	bb44      	cbnz	r4, 800cee8 <_malloc_r+0x88>
 800ce96:	4629      	mov	r1, r5
 800ce98:	4630      	mov	r0, r6
 800ce9a:	f7ff ffbf 	bl	800ce1c <sbrk_aligned>
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	4604      	mov	r4, r0
 800cea2:	d158      	bne.n	800cf56 <_malloc_r+0xf6>
 800cea4:	f8d8 4000 	ldr.w	r4, [r8]
 800cea8:	4627      	mov	r7, r4
 800ceaa:	2f00      	cmp	r7, #0
 800ceac:	d143      	bne.n	800cf36 <_malloc_r+0xd6>
 800ceae:	2c00      	cmp	r4, #0
 800ceb0:	d04b      	beq.n	800cf4a <_malloc_r+0xea>
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	4639      	mov	r1, r7
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	eb04 0903 	add.w	r9, r4, r3
 800cebc:	f000 fc6a 	bl	800d794 <_sbrk_r>
 800cec0:	4581      	cmp	r9, r0
 800cec2:	d142      	bne.n	800cf4a <_malloc_r+0xea>
 800cec4:	6821      	ldr	r1, [r4, #0]
 800cec6:	1a6d      	subs	r5, r5, r1
 800cec8:	4629      	mov	r1, r5
 800ceca:	4630      	mov	r0, r6
 800cecc:	f7ff ffa6 	bl	800ce1c <sbrk_aligned>
 800ced0:	3001      	adds	r0, #1
 800ced2:	d03a      	beq.n	800cf4a <_malloc_r+0xea>
 800ced4:	6823      	ldr	r3, [r4, #0]
 800ced6:	442b      	add	r3, r5
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	f8d8 3000 	ldr.w	r3, [r8]
 800cede:	685a      	ldr	r2, [r3, #4]
 800cee0:	bb62      	cbnz	r2, 800cf3c <_malloc_r+0xdc>
 800cee2:	f8c8 7000 	str.w	r7, [r8]
 800cee6:	e00f      	b.n	800cf08 <_malloc_r+0xa8>
 800cee8:	6822      	ldr	r2, [r4, #0]
 800ceea:	1b52      	subs	r2, r2, r5
 800ceec:	d420      	bmi.n	800cf30 <_malloc_r+0xd0>
 800ceee:	2a0b      	cmp	r2, #11
 800cef0:	d917      	bls.n	800cf22 <_malloc_r+0xc2>
 800cef2:	1961      	adds	r1, r4, r5
 800cef4:	42a3      	cmp	r3, r4
 800cef6:	6025      	str	r5, [r4, #0]
 800cef8:	bf18      	it	ne
 800cefa:	6059      	strne	r1, [r3, #4]
 800cefc:	6863      	ldr	r3, [r4, #4]
 800cefe:	bf08      	it	eq
 800cf00:	f8c8 1000 	streq.w	r1, [r8]
 800cf04:	5162      	str	r2, [r4, r5]
 800cf06:	604b      	str	r3, [r1, #4]
 800cf08:	4630      	mov	r0, r6
 800cf0a:	f000 f82f 	bl	800cf6c <__malloc_unlock>
 800cf0e:	f104 000b 	add.w	r0, r4, #11
 800cf12:	1d23      	adds	r3, r4, #4
 800cf14:	f020 0007 	bic.w	r0, r0, #7
 800cf18:	1ac2      	subs	r2, r0, r3
 800cf1a:	bf1c      	itt	ne
 800cf1c:	1a1b      	subne	r3, r3, r0
 800cf1e:	50a3      	strne	r3, [r4, r2]
 800cf20:	e7af      	b.n	800ce82 <_malloc_r+0x22>
 800cf22:	6862      	ldr	r2, [r4, #4]
 800cf24:	42a3      	cmp	r3, r4
 800cf26:	bf0c      	ite	eq
 800cf28:	f8c8 2000 	streq.w	r2, [r8]
 800cf2c:	605a      	strne	r2, [r3, #4]
 800cf2e:	e7eb      	b.n	800cf08 <_malloc_r+0xa8>
 800cf30:	4623      	mov	r3, r4
 800cf32:	6864      	ldr	r4, [r4, #4]
 800cf34:	e7ae      	b.n	800ce94 <_malloc_r+0x34>
 800cf36:	463c      	mov	r4, r7
 800cf38:	687f      	ldr	r7, [r7, #4]
 800cf3a:	e7b6      	b.n	800ceaa <_malloc_r+0x4a>
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	42a3      	cmp	r3, r4
 800cf42:	d1fb      	bne.n	800cf3c <_malloc_r+0xdc>
 800cf44:	2300      	movs	r3, #0
 800cf46:	6053      	str	r3, [r2, #4]
 800cf48:	e7de      	b.n	800cf08 <_malloc_r+0xa8>
 800cf4a:	230c      	movs	r3, #12
 800cf4c:	6033      	str	r3, [r6, #0]
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f000 f80c 	bl	800cf6c <__malloc_unlock>
 800cf54:	e794      	b.n	800ce80 <_malloc_r+0x20>
 800cf56:	6005      	str	r5, [r0, #0]
 800cf58:	e7d6      	b.n	800cf08 <_malloc_r+0xa8>
 800cf5a:	bf00      	nop
 800cf5c:	24004d14 	.word	0x24004d14

0800cf60 <__malloc_lock>:
 800cf60:	4801      	ldr	r0, [pc, #4]	@ (800cf68 <__malloc_lock+0x8>)
 800cf62:	f7ff bf00 	b.w	800cd66 <__retarget_lock_acquire_recursive>
 800cf66:	bf00      	nop
 800cf68:	24004d0c 	.word	0x24004d0c

0800cf6c <__malloc_unlock>:
 800cf6c:	4801      	ldr	r0, [pc, #4]	@ (800cf74 <__malloc_unlock+0x8>)
 800cf6e:	f7ff befb 	b.w	800cd68 <__retarget_lock_release_recursive>
 800cf72:	bf00      	nop
 800cf74:	24004d0c 	.word	0x24004d0c

0800cf78 <__sfputc_r>:
 800cf78:	6893      	ldr	r3, [r2, #8]
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	b410      	push	{r4}
 800cf80:	6093      	str	r3, [r2, #8]
 800cf82:	da08      	bge.n	800cf96 <__sfputc_r+0x1e>
 800cf84:	6994      	ldr	r4, [r2, #24]
 800cf86:	42a3      	cmp	r3, r4
 800cf88:	db01      	blt.n	800cf8e <__sfputc_r+0x16>
 800cf8a:	290a      	cmp	r1, #10
 800cf8c:	d103      	bne.n	800cf96 <__sfputc_r+0x1e>
 800cf8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf92:	f000 bb6b 	b.w	800d66c <__swbuf_r>
 800cf96:	6813      	ldr	r3, [r2, #0]
 800cf98:	1c58      	adds	r0, r3, #1
 800cf9a:	6010      	str	r0, [r2, #0]
 800cf9c:	7019      	strb	r1, [r3, #0]
 800cf9e:	4608      	mov	r0, r1
 800cfa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <__sfputs_r>:
 800cfa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa8:	4606      	mov	r6, r0
 800cfaa:	460f      	mov	r7, r1
 800cfac:	4614      	mov	r4, r2
 800cfae:	18d5      	adds	r5, r2, r3
 800cfb0:	42ac      	cmp	r4, r5
 800cfb2:	d101      	bne.n	800cfb8 <__sfputs_r+0x12>
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	e007      	b.n	800cfc8 <__sfputs_r+0x22>
 800cfb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfbc:	463a      	mov	r2, r7
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	f7ff ffda 	bl	800cf78 <__sfputc_r>
 800cfc4:	1c43      	adds	r3, r0, #1
 800cfc6:	d1f3      	bne.n	800cfb0 <__sfputs_r+0xa>
 800cfc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfcc <_vfiprintf_r>:
 800cfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd0:	460d      	mov	r5, r1
 800cfd2:	b09d      	sub	sp, #116	@ 0x74
 800cfd4:	4614      	mov	r4, r2
 800cfd6:	4698      	mov	r8, r3
 800cfd8:	4606      	mov	r6, r0
 800cfda:	b118      	cbz	r0, 800cfe4 <_vfiprintf_r+0x18>
 800cfdc:	6a03      	ldr	r3, [r0, #32]
 800cfde:	b90b      	cbnz	r3, 800cfe4 <_vfiprintf_r+0x18>
 800cfe0:	f7ff fdbc 	bl	800cb5c <__sinit>
 800cfe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfe6:	07d9      	lsls	r1, r3, #31
 800cfe8:	d405      	bmi.n	800cff6 <_vfiprintf_r+0x2a>
 800cfea:	89ab      	ldrh	r3, [r5, #12]
 800cfec:	059a      	lsls	r2, r3, #22
 800cfee:	d402      	bmi.n	800cff6 <_vfiprintf_r+0x2a>
 800cff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cff2:	f7ff feb8 	bl	800cd66 <__retarget_lock_acquire_recursive>
 800cff6:	89ab      	ldrh	r3, [r5, #12]
 800cff8:	071b      	lsls	r3, r3, #28
 800cffa:	d501      	bpl.n	800d000 <_vfiprintf_r+0x34>
 800cffc:	692b      	ldr	r3, [r5, #16]
 800cffe:	b99b      	cbnz	r3, 800d028 <_vfiprintf_r+0x5c>
 800d000:	4629      	mov	r1, r5
 800d002:	4630      	mov	r0, r6
 800d004:	f000 fb70 	bl	800d6e8 <__swsetup_r>
 800d008:	b170      	cbz	r0, 800d028 <_vfiprintf_r+0x5c>
 800d00a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d00c:	07dc      	lsls	r4, r3, #31
 800d00e:	d504      	bpl.n	800d01a <_vfiprintf_r+0x4e>
 800d010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d014:	b01d      	add	sp, #116	@ 0x74
 800d016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01a:	89ab      	ldrh	r3, [r5, #12]
 800d01c:	0598      	lsls	r0, r3, #22
 800d01e:	d4f7      	bmi.n	800d010 <_vfiprintf_r+0x44>
 800d020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d022:	f7ff fea1 	bl	800cd68 <__retarget_lock_release_recursive>
 800d026:	e7f3      	b.n	800d010 <_vfiprintf_r+0x44>
 800d028:	2300      	movs	r3, #0
 800d02a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d02c:	2320      	movs	r3, #32
 800d02e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d032:	f8cd 800c 	str.w	r8, [sp, #12]
 800d036:	2330      	movs	r3, #48	@ 0x30
 800d038:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d1e8 <_vfiprintf_r+0x21c>
 800d03c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d040:	f04f 0901 	mov.w	r9, #1
 800d044:	4623      	mov	r3, r4
 800d046:	469a      	mov	sl, r3
 800d048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d04c:	b10a      	cbz	r2, 800d052 <_vfiprintf_r+0x86>
 800d04e:	2a25      	cmp	r2, #37	@ 0x25
 800d050:	d1f9      	bne.n	800d046 <_vfiprintf_r+0x7a>
 800d052:	ebba 0b04 	subs.w	fp, sl, r4
 800d056:	d00b      	beq.n	800d070 <_vfiprintf_r+0xa4>
 800d058:	465b      	mov	r3, fp
 800d05a:	4622      	mov	r2, r4
 800d05c:	4629      	mov	r1, r5
 800d05e:	4630      	mov	r0, r6
 800d060:	f7ff ffa1 	bl	800cfa6 <__sfputs_r>
 800d064:	3001      	adds	r0, #1
 800d066:	f000 80a7 	beq.w	800d1b8 <_vfiprintf_r+0x1ec>
 800d06a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d06c:	445a      	add	r2, fp
 800d06e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d070:	f89a 3000 	ldrb.w	r3, [sl]
 800d074:	2b00      	cmp	r3, #0
 800d076:	f000 809f 	beq.w	800d1b8 <_vfiprintf_r+0x1ec>
 800d07a:	2300      	movs	r3, #0
 800d07c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d084:	f10a 0a01 	add.w	sl, sl, #1
 800d088:	9304      	str	r3, [sp, #16]
 800d08a:	9307      	str	r3, [sp, #28]
 800d08c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d090:	931a      	str	r3, [sp, #104]	@ 0x68
 800d092:	4654      	mov	r4, sl
 800d094:	2205      	movs	r2, #5
 800d096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d09a:	4853      	ldr	r0, [pc, #332]	@ (800d1e8 <_vfiprintf_r+0x21c>)
 800d09c:	f7f3 f920 	bl	80002e0 <memchr>
 800d0a0:	9a04      	ldr	r2, [sp, #16]
 800d0a2:	b9d8      	cbnz	r0, 800d0dc <_vfiprintf_r+0x110>
 800d0a4:	06d1      	lsls	r1, r2, #27
 800d0a6:	bf44      	itt	mi
 800d0a8:	2320      	movmi	r3, #32
 800d0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0ae:	0713      	lsls	r3, r2, #28
 800d0b0:	bf44      	itt	mi
 800d0b2:	232b      	movmi	r3, #43	@ 0x2b
 800d0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800d0bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0be:	d015      	beq.n	800d0ec <_vfiprintf_r+0x120>
 800d0c0:	9a07      	ldr	r2, [sp, #28]
 800d0c2:	4654      	mov	r4, sl
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	f04f 0c0a 	mov.w	ip, #10
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0d0:	3b30      	subs	r3, #48	@ 0x30
 800d0d2:	2b09      	cmp	r3, #9
 800d0d4:	d94b      	bls.n	800d16e <_vfiprintf_r+0x1a2>
 800d0d6:	b1b0      	cbz	r0, 800d106 <_vfiprintf_r+0x13a>
 800d0d8:	9207      	str	r2, [sp, #28]
 800d0da:	e014      	b.n	800d106 <_vfiprintf_r+0x13a>
 800d0dc:	eba0 0308 	sub.w	r3, r0, r8
 800d0e0:	fa09 f303 	lsl.w	r3, r9, r3
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	9304      	str	r3, [sp, #16]
 800d0e8:	46a2      	mov	sl, r4
 800d0ea:	e7d2      	b.n	800d092 <_vfiprintf_r+0xc6>
 800d0ec:	9b03      	ldr	r3, [sp, #12]
 800d0ee:	1d19      	adds	r1, r3, #4
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	9103      	str	r1, [sp, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	bfbb      	ittet	lt
 800d0f8:	425b      	neglt	r3, r3
 800d0fa:	f042 0202 	orrlt.w	r2, r2, #2
 800d0fe:	9307      	strge	r3, [sp, #28]
 800d100:	9307      	strlt	r3, [sp, #28]
 800d102:	bfb8      	it	lt
 800d104:	9204      	strlt	r2, [sp, #16]
 800d106:	7823      	ldrb	r3, [r4, #0]
 800d108:	2b2e      	cmp	r3, #46	@ 0x2e
 800d10a:	d10a      	bne.n	800d122 <_vfiprintf_r+0x156>
 800d10c:	7863      	ldrb	r3, [r4, #1]
 800d10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d110:	d132      	bne.n	800d178 <_vfiprintf_r+0x1ac>
 800d112:	9b03      	ldr	r3, [sp, #12]
 800d114:	1d1a      	adds	r2, r3, #4
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	9203      	str	r2, [sp, #12]
 800d11a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d11e:	3402      	adds	r4, #2
 800d120:	9305      	str	r3, [sp, #20]
 800d122:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d1f8 <_vfiprintf_r+0x22c>
 800d126:	7821      	ldrb	r1, [r4, #0]
 800d128:	2203      	movs	r2, #3
 800d12a:	4650      	mov	r0, sl
 800d12c:	f7f3 f8d8 	bl	80002e0 <memchr>
 800d130:	b138      	cbz	r0, 800d142 <_vfiprintf_r+0x176>
 800d132:	9b04      	ldr	r3, [sp, #16]
 800d134:	eba0 000a 	sub.w	r0, r0, sl
 800d138:	2240      	movs	r2, #64	@ 0x40
 800d13a:	4082      	lsls	r2, r0
 800d13c:	4313      	orrs	r3, r2
 800d13e:	3401      	adds	r4, #1
 800d140:	9304      	str	r3, [sp, #16]
 800d142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d146:	4829      	ldr	r0, [pc, #164]	@ (800d1ec <_vfiprintf_r+0x220>)
 800d148:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d14c:	2206      	movs	r2, #6
 800d14e:	f7f3 f8c7 	bl	80002e0 <memchr>
 800d152:	2800      	cmp	r0, #0
 800d154:	d03f      	beq.n	800d1d6 <_vfiprintf_r+0x20a>
 800d156:	4b26      	ldr	r3, [pc, #152]	@ (800d1f0 <_vfiprintf_r+0x224>)
 800d158:	bb1b      	cbnz	r3, 800d1a2 <_vfiprintf_r+0x1d6>
 800d15a:	9b03      	ldr	r3, [sp, #12]
 800d15c:	3307      	adds	r3, #7
 800d15e:	f023 0307 	bic.w	r3, r3, #7
 800d162:	3308      	adds	r3, #8
 800d164:	9303      	str	r3, [sp, #12]
 800d166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d168:	443b      	add	r3, r7
 800d16a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d16c:	e76a      	b.n	800d044 <_vfiprintf_r+0x78>
 800d16e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d172:	460c      	mov	r4, r1
 800d174:	2001      	movs	r0, #1
 800d176:	e7a8      	b.n	800d0ca <_vfiprintf_r+0xfe>
 800d178:	2300      	movs	r3, #0
 800d17a:	3401      	adds	r4, #1
 800d17c:	9305      	str	r3, [sp, #20]
 800d17e:	4619      	mov	r1, r3
 800d180:	f04f 0c0a 	mov.w	ip, #10
 800d184:	4620      	mov	r0, r4
 800d186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d18a:	3a30      	subs	r2, #48	@ 0x30
 800d18c:	2a09      	cmp	r2, #9
 800d18e:	d903      	bls.n	800d198 <_vfiprintf_r+0x1cc>
 800d190:	2b00      	cmp	r3, #0
 800d192:	d0c6      	beq.n	800d122 <_vfiprintf_r+0x156>
 800d194:	9105      	str	r1, [sp, #20]
 800d196:	e7c4      	b.n	800d122 <_vfiprintf_r+0x156>
 800d198:	fb0c 2101 	mla	r1, ip, r1, r2
 800d19c:	4604      	mov	r4, r0
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e7f0      	b.n	800d184 <_vfiprintf_r+0x1b8>
 800d1a2:	ab03      	add	r3, sp, #12
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	462a      	mov	r2, r5
 800d1a8:	4b12      	ldr	r3, [pc, #72]	@ (800d1f4 <_vfiprintf_r+0x228>)
 800d1aa:	a904      	add	r1, sp, #16
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f3af 8000 	nop.w
 800d1b2:	4607      	mov	r7, r0
 800d1b4:	1c78      	adds	r0, r7, #1
 800d1b6:	d1d6      	bne.n	800d166 <_vfiprintf_r+0x19a>
 800d1b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1ba:	07d9      	lsls	r1, r3, #31
 800d1bc:	d405      	bmi.n	800d1ca <_vfiprintf_r+0x1fe>
 800d1be:	89ab      	ldrh	r3, [r5, #12]
 800d1c0:	059a      	lsls	r2, r3, #22
 800d1c2:	d402      	bmi.n	800d1ca <_vfiprintf_r+0x1fe>
 800d1c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1c6:	f7ff fdcf 	bl	800cd68 <__retarget_lock_release_recursive>
 800d1ca:	89ab      	ldrh	r3, [r5, #12]
 800d1cc:	065b      	lsls	r3, r3, #25
 800d1ce:	f53f af1f 	bmi.w	800d010 <_vfiprintf_r+0x44>
 800d1d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1d4:	e71e      	b.n	800d014 <_vfiprintf_r+0x48>
 800d1d6:	ab03      	add	r3, sp, #12
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	462a      	mov	r2, r5
 800d1dc:	4b05      	ldr	r3, [pc, #20]	@ (800d1f4 <_vfiprintf_r+0x228>)
 800d1de:	a904      	add	r1, sp, #16
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	f000 f879 	bl	800d2d8 <_printf_i>
 800d1e6:	e7e4      	b.n	800d1b2 <_vfiprintf_r+0x1e6>
 800d1e8:	0800daa8 	.word	0x0800daa8
 800d1ec:	0800dab2 	.word	0x0800dab2
 800d1f0:	00000000 	.word	0x00000000
 800d1f4:	0800cfa7 	.word	0x0800cfa7
 800d1f8:	0800daae 	.word	0x0800daae

0800d1fc <_printf_common>:
 800d1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d200:	4616      	mov	r6, r2
 800d202:	4698      	mov	r8, r3
 800d204:	688a      	ldr	r2, [r1, #8]
 800d206:	690b      	ldr	r3, [r1, #16]
 800d208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d20c:	4293      	cmp	r3, r2
 800d20e:	bfb8      	it	lt
 800d210:	4613      	movlt	r3, r2
 800d212:	6033      	str	r3, [r6, #0]
 800d214:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d218:	4607      	mov	r7, r0
 800d21a:	460c      	mov	r4, r1
 800d21c:	b10a      	cbz	r2, 800d222 <_printf_common+0x26>
 800d21e:	3301      	adds	r3, #1
 800d220:	6033      	str	r3, [r6, #0]
 800d222:	6823      	ldr	r3, [r4, #0]
 800d224:	0699      	lsls	r1, r3, #26
 800d226:	bf42      	ittt	mi
 800d228:	6833      	ldrmi	r3, [r6, #0]
 800d22a:	3302      	addmi	r3, #2
 800d22c:	6033      	strmi	r3, [r6, #0]
 800d22e:	6825      	ldr	r5, [r4, #0]
 800d230:	f015 0506 	ands.w	r5, r5, #6
 800d234:	d106      	bne.n	800d244 <_printf_common+0x48>
 800d236:	f104 0a19 	add.w	sl, r4, #25
 800d23a:	68e3      	ldr	r3, [r4, #12]
 800d23c:	6832      	ldr	r2, [r6, #0]
 800d23e:	1a9b      	subs	r3, r3, r2
 800d240:	42ab      	cmp	r3, r5
 800d242:	dc26      	bgt.n	800d292 <_printf_common+0x96>
 800d244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d248:	6822      	ldr	r2, [r4, #0]
 800d24a:	3b00      	subs	r3, #0
 800d24c:	bf18      	it	ne
 800d24e:	2301      	movne	r3, #1
 800d250:	0692      	lsls	r2, r2, #26
 800d252:	d42b      	bmi.n	800d2ac <_printf_common+0xb0>
 800d254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d258:	4641      	mov	r1, r8
 800d25a:	4638      	mov	r0, r7
 800d25c:	47c8      	blx	r9
 800d25e:	3001      	adds	r0, #1
 800d260:	d01e      	beq.n	800d2a0 <_printf_common+0xa4>
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	6922      	ldr	r2, [r4, #16]
 800d266:	f003 0306 	and.w	r3, r3, #6
 800d26a:	2b04      	cmp	r3, #4
 800d26c:	bf02      	ittt	eq
 800d26e:	68e5      	ldreq	r5, [r4, #12]
 800d270:	6833      	ldreq	r3, [r6, #0]
 800d272:	1aed      	subeq	r5, r5, r3
 800d274:	68a3      	ldr	r3, [r4, #8]
 800d276:	bf0c      	ite	eq
 800d278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d27c:	2500      	movne	r5, #0
 800d27e:	4293      	cmp	r3, r2
 800d280:	bfc4      	itt	gt
 800d282:	1a9b      	subgt	r3, r3, r2
 800d284:	18ed      	addgt	r5, r5, r3
 800d286:	2600      	movs	r6, #0
 800d288:	341a      	adds	r4, #26
 800d28a:	42b5      	cmp	r5, r6
 800d28c:	d11a      	bne.n	800d2c4 <_printf_common+0xc8>
 800d28e:	2000      	movs	r0, #0
 800d290:	e008      	b.n	800d2a4 <_printf_common+0xa8>
 800d292:	2301      	movs	r3, #1
 800d294:	4652      	mov	r2, sl
 800d296:	4641      	mov	r1, r8
 800d298:	4638      	mov	r0, r7
 800d29a:	47c8      	blx	r9
 800d29c:	3001      	adds	r0, #1
 800d29e:	d103      	bne.n	800d2a8 <_printf_common+0xac>
 800d2a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2a8:	3501      	adds	r5, #1
 800d2aa:	e7c6      	b.n	800d23a <_printf_common+0x3e>
 800d2ac:	18e1      	adds	r1, r4, r3
 800d2ae:	1c5a      	adds	r2, r3, #1
 800d2b0:	2030      	movs	r0, #48	@ 0x30
 800d2b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d2b6:	4422      	add	r2, r4
 800d2b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d2bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d2c0:	3302      	adds	r3, #2
 800d2c2:	e7c7      	b.n	800d254 <_printf_common+0x58>
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	4622      	mov	r2, r4
 800d2c8:	4641      	mov	r1, r8
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	47c8      	blx	r9
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	d0e6      	beq.n	800d2a0 <_printf_common+0xa4>
 800d2d2:	3601      	adds	r6, #1
 800d2d4:	e7d9      	b.n	800d28a <_printf_common+0x8e>
	...

0800d2d8 <_printf_i>:
 800d2d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2dc:	7e0f      	ldrb	r7, [r1, #24]
 800d2de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d2e0:	2f78      	cmp	r7, #120	@ 0x78
 800d2e2:	4691      	mov	r9, r2
 800d2e4:	4680      	mov	r8, r0
 800d2e6:	460c      	mov	r4, r1
 800d2e8:	469a      	mov	sl, r3
 800d2ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d2ee:	d807      	bhi.n	800d300 <_printf_i+0x28>
 800d2f0:	2f62      	cmp	r7, #98	@ 0x62
 800d2f2:	d80a      	bhi.n	800d30a <_printf_i+0x32>
 800d2f4:	2f00      	cmp	r7, #0
 800d2f6:	f000 80d1 	beq.w	800d49c <_printf_i+0x1c4>
 800d2fa:	2f58      	cmp	r7, #88	@ 0x58
 800d2fc:	f000 80b8 	beq.w	800d470 <_printf_i+0x198>
 800d300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d308:	e03a      	b.n	800d380 <_printf_i+0xa8>
 800d30a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d30e:	2b15      	cmp	r3, #21
 800d310:	d8f6      	bhi.n	800d300 <_printf_i+0x28>
 800d312:	a101      	add	r1, pc, #4	@ (adr r1, 800d318 <_printf_i+0x40>)
 800d314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d318:	0800d371 	.word	0x0800d371
 800d31c:	0800d385 	.word	0x0800d385
 800d320:	0800d301 	.word	0x0800d301
 800d324:	0800d301 	.word	0x0800d301
 800d328:	0800d301 	.word	0x0800d301
 800d32c:	0800d301 	.word	0x0800d301
 800d330:	0800d385 	.word	0x0800d385
 800d334:	0800d301 	.word	0x0800d301
 800d338:	0800d301 	.word	0x0800d301
 800d33c:	0800d301 	.word	0x0800d301
 800d340:	0800d301 	.word	0x0800d301
 800d344:	0800d483 	.word	0x0800d483
 800d348:	0800d3af 	.word	0x0800d3af
 800d34c:	0800d43d 	.word	0x0800d43d
 800d350:	0800d301 	.word	0x0800d301
 800d354:	0800d301 	.word	0x0800d301
 800d358:	0800d4a5 	.word	0x0800d4a5
 800d35c:	0800d301 	.word	0x0800d301
 800d360:	0800d3af 	.word	0x0800d3af
 800d364:	0800d301 	.word	0x0800d301
 800d368:	0800d301 	.word	0x0800d301
 800d36c:	0800d445 	.word	0x0800d445
 800d370:	6833      	ldr	r3, [r6, #0]
 800d372:	1d1a      	adds	r2, r3, #4
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	6032      	str	r2, [r6, #0]
 800d378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d37c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d380:	2301      	movs	r3, #1
 800d382:	e09c      	b.n	800d4be <_printf_i+0x1e6>
 800d384:	6833      	ldr	r3, [r6, #0]
 800d386:	6820      	ldr	r0, [r4, #0]
 800d388:	1d19      	adds	r1, r3, #4
 800d38a:	6031      	str	r1, [r6, #0]
 800d38c:	0606      	lsls	r6, r0, #24
 800d38e:	d501      	bpl.n	800d394 <_printf_i+0xbc>
 800d390:	681d      	ldr	r5, [r3, #0]
 800d392:	e003      	b.n	800d39c <_printf_i+0xc4>
 800d394:	0645      	lsls	r5, r0, #25
 800d396:	d5fb      	bpl.n	800d390 <_printf_i+0xb8>
 800d398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d39c:	2d00      	cmp	r5, #0
 800d39e:	da03      	bge.n	800d3a8 <_printf_i+0xd0>
 800d3a0:	232d      	movs	r3, #45	@ 0x2d
 800d3a2:	426d      	negs	r5, r5
 800d3a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3a8:	4858      	ldr	r0, [pc, #352]	@ (800d50c <_printf_i+0x234>)
 800d3aa:	230a      	movs	r3, #10
 800d3ac:	e011      	b.n	800d3d2 <_printf_i+0xfa>
 800d3ae:	6821      	ldr	r1, [r4, #0]
 800d3b0:	6833      	ldr	r3, [r6, #0]
 800d3b2:	0608      	lsls	r0, r1, #24
 800d3b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d3b8:	d402      	bmi.n	800d3c0 <_printf_i+0xe8>
 800d3ba:	0649      	lsls	r1, r1, #25
 800d3bc:	bf48      	it	mi
 800d3be:	b2ad      	uxthmi	r5, r5
 800d3c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d3c2:	4852      	ldr	r0, [pc, #328]	@ (800d50c <_printf_i+0x234>)
 800d3c4:	6033      	str	r3, [r6, #0]
 800d3c6:	bf14      	ite	ne
 800d3c8:	230a      	movne	r3, #10
 800d3ca:	2308      	moveq	r3, #8
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d3d2:	6866      	ldr	r6, [r4, #4]
 800d3d4:	60a6      	str	r6, [r4, #8]
 800d3d6:	2e00      	cmp	r6, #0
 800d3d8:	db05      	blt.n	800d3e6 <_printf_i+0x10e>
 800d3da:	6821      	ldr	r1, [r4, #0]
 800d3dc:	432e      	orrs	r6, r5
 800d3de:	f021 0104 	bic.w	r1, r1, #4
 800d3e2:	6021      	str	r1, [r4, #0]
 800d3e4:	d04b      	beq.n	800d47e <_printf_i+0x1a6>
 800d3e6:	4616      	mov	r6, r2
 800d3e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800d3ec:	fb03 5711 	mls	r7, r3, r1, r5
 800d3f0:	5dc7      	ldrb	r7, [r0, r7]
 800d3f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3f6:	462f      	mov	r7, r5
 800d3f8:	42bb      	cmp	r3, r7
 800d3fa:	460d      	mov	r5, r1
 800d3fc:	d9f4      	bls.n	800d3e8 <_printf_i+0x110>
 800d3fe:	2b08      	cmp	r3, #8
 800d400:	d10b      	bne.n	800d41a <_printf_i+0x142>
 800d402:	6823      	ldr	r3, [r4, #0]
 800d404:	07df      	lsls	r7, r3, #31
 800d406:	d508      	bpl.n	800d41a <_printf_i+0x142>
 800d408:	6923      	ldr	r3, [r4, #16]
 800d40a:	6861      	ldr	r1, [r4, #4]
 800d40c:	4299      	cmp	r1, r3
 800d40e:	bfde      	ittt	le
 800d410:	2330      	movle	r3, #48	@ 0x30
 800d412:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d416:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d41a:	1b92      	subs	r2, r2, r6
 800d41c:	6122      	str	r2, [r4, #16]
 800d41e:	f8cd a000 	str.w	sl, [sp]
 800d422:	464b      	mov	r3, r9
 800d424:	aa03      	add	r2, sp, #12
 800d426:	4621      	mov	r1, r4
 800d428:	4640      	mov	r0, r8
 800d42a:	f7ff fee7 	bl	800d1fc <_printf_common>
 800d42e:	3001      	adds	r0, #1
 800d430:	d14a      	bne.n	800d4c8 <_printf_i+0x1f0>
 800d432:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d436:	b004      	add	sp, #16
 800d438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d43c:	6823      	ldr	r3, [r4, #0]
 800d43e:	f043 0320 	orr.w	r3, r3, #32
 800d442:	6023      	str	r3, [r4, #0]
 800d444:	4832      	ldr	r0, [pc, #200]	@ (800d510 <_printf_i+0x238>)
 800d446:	2778      	movs	r7, #120	@ 0x78
 800d448:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d44c:	6823      	ldr	r3, [r4, #0]
 800d44e:	6831      	ldr	r1, [r6, #0]
 800d450:	061f      	lsls	r7, r3, #24
 800d452:	f851 5b04 	ldr.w	r5, [r1], #4
 800d456:	d402      	bmi.n	800d45e <_printf_i+0x186>
 800d458:	065f      	lsls	r7, r3, #25
 800d45a:	bf48      	it	mi
 800d45c:	b2ad      	uxthmi	r5, r5
 800d45e:	6031      	str	r1, [r6, #0]
 800d460:	07d9      	lsls	r1, r3, #31
 800d462:	bf44      	itt	mi
 800d464:	f043 0320 	orrmi.w	r3, r3, #32
 800d468:	6023      	strmi	r3, [r4, #0]
 800d46a:	b11d      	cbz	r5, 800d474 <_printf_i+0x19c>
 800d46c:	2310      	movs	r3, #16
 800d46e:	e7ad      	b.n	800d3cc <_printf_i+0xf4>
 800d470:	4826      	ldr	r0, [pc, #152]	@ (800d50c <_printf_i+0x234>)
 800d472:	e7e9      	b.n	800d448 <_printf_i+0x170>
 800d474:	6823      	ldr	r3, [r4, #0]
 800d476:	f023 0320 	bic.w	r3, r3, #32
 800d47a:	6023      	str	r3, [r4, #0]
 800d47c:	e7f6      	b.n	800d46c <_printf_i+0x194>
 800d47e:	4616      	mov	r6, r2
 800d480:	e7bd      	b.n	800d3fe <_printf_i+0x126>
 800d482:	6833      	ldr	r3, [r6, #0]
 800d484:	6825      	ldr	r5, [r4, #0]
 800d486:	6961      	ldr	r1, [r4, #20]
 800d488:	1d18      	adds	r0, r3, #4
 800d48a:	6030      	str	r0, [r6, #0]
 800d48c:	062e      	lsls	r6, r5, #24
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	d501      	bpl.n	800d496 <_printf_i+0x1be>
 800d492:	6019      	str	r1, [r3, #0]
 800d494:	e002      	b.n	800d49c <_printf_i+0x1c4>
 800d496:	0668      	lsls	r0, r5, #25
 800d498:	d5fb      	bpl.n	800d492 <_printf_i+0x1ba>
 800d49a:	8019      	strh	r1, [r3, #0]
 800d49c:	2300      	movs	r3, #0
 800d49e:	6123      	str	r3, [r4, #16]
 800d4a0:	4616      	mov	r6, r2
 800d4a2:	e7bc      	b.n	800d41e <_printf_i+0x146>
 800d4a4:	6833      	ldr	r3, [r6, #0]
 800d4a6:	1d1a      	adds	r2, r3, #4
 800d4a8:	6032      	str	r2, [r6, #0]
 800d4aa:	681e      	ldr	r6, [r3, #0]
 800d4ac:	6862      	ldr	r2, [r4, #4]
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	f7f2 ff15 	bl	80002e0 <memchr>
 800d4b6:	b108      	cbz	r0, 800d4bc <_printf_i+0x1e4>
 800d4b8:	1b80      	subs	r0, r0, r6
 800d4ba:	6060      	str	r0, [r4, #4]
 800d4bc:	6863      	ldr	r3, [r4, #4]
 800d4be:	6123      	str	r3, [r4, #16]
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4c6:	e7aa      	b.n	800d41e <_printf_i+0x146>
 800d4c8:	6923      	ldr	r3, [r4, #16]
 800d4ca:	4632      	mov	r2, r6
 800d4cc:	4649      	mov	r1, r9
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	47d0      	blx	sl
 800d4d2:	3001      	adds	r0, #1
 800d4d4:	d0ad      	beq.n	800d432 <_printf_i+0x15a>
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	079b      	lsls	r3, r3, #30
 800d4da:	d413      	bmi.n	800d504 <_printf_i+0x22c>
 800d4dc:	68e0      	ldr	r0, [r4, #12]
 800d4de:	9b03      	ldr	r3, [sp, #12]
 800d4e0:	4298      	cmp	r0, r3
 800d4e2:	bfb8      	it	lt
 800d4e4:	4618      	movlt	r0, r3
 800d4e6:	e7a6      	b.n	800d436 <_printf_i+0x15e>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	4632      	mov	r2, r6
 800d4ec:	4649      	mov	r1, r9
 800d4ee:	4640      	mov	r0, r8
 800d4f0:	47d0      	blx	sl
 800d4f2:	3001      	adds	r0, #1
 800d4f4:	d09d      	beq.n	800d432 <_printf_i+0x15a>
 800d4f6:	3501      	adds	r5, #1
 800d4f8:	68e3      	ldr	r3, [r4, #12]
 800d4fa:	9903      	ldr	r1, [sp, #12]
 800d4fc:	1a5b      	subs	r3, r3, r1
 800d4fe:	42ab      	cmp	r3, r5
 800d500:	dcf2      	bgt.n	800d4e8 <_printf_i+0x210>
 800d502:	e7eb      	b.n	800d4dc <_printf_i+0x204>
 800d504:	2500      	movs	r5, #0
 800d506:	f104 0619 	add.w	r6, r4, #25
 800d50a:	e7f5      	b.n	800d4f8 <_printf_i+0x220>
 800d50c:	0800dab9 	.word	0x0800dab9
 800d510:	0800daca 	.word	0x0800daca

0800d514 <__sflush_r>:
 800d514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d51c:	0716      	lsls	r6, r2, #28
 800d51e:	4605      	mov	r5, r0
 800d520:	460c      	mov	r4, r1
 800d522:	d454      	bmi.n	800d5ce <__sflush_r+0xba>
 800d524:	684b      	ldr	r3, [r1, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	dc02      	bgt.n	800d530 <__sflush_r+0x1c>
 800d52a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	dd48      	ble.n	800d5c2 <__sflush_r+0xae>
 800d530:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d532:	2e00      	cmp	r6, #0
 800d534:	d045      	beq.n	800d5c2 <__sflush_r+0xae>
 800d536:	2300      	movs	r3, #0
 800d538:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d53c:	682f      	ldr	r7, [r5, #0]
 800d53e:	6a21      	ldr	r1, [r4, #32]
 800d540:	602b      	str	r3, [r5, #0]
 800d542:	d030      	beq.n	800d5a6 <__sflush_r+0x92>
 800d544:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d546:	89a3      	ldrh	r3, [r4, #12]
 800d548:	0759      	lsls	r1, r3, #29
 800d54a:	d505      	bpl.n	800d558 <__sflush_r+0x44>
 800d54c:	6863      	ldr	r3, [r4, #4]
 800d54e:	1ad2      	subs	r2, r2, r3
 800d550:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d552:	b10b      	cbz	r3, 800d558 <__sflush_r+0x44>
 800d554:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d556:	1ad2      	subs	r2, r2, r3
 800d558:	2300      	movs	r3, #0
 800d55a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d55c:	6a21      	ldr	r1, [r4, #32]
 800d55e:	4628      	mov	r0, r5
 800d560:	47b0      	blx	r6
 800d562:	1c43      	adds	r3, r0, #1
 800d564:	89a3      	ldrh	r3, [r4, #12]
 800d566:	d106      	bne.n	800d576 <__sflush_r+0x62>
 800d568:	6829      	ldr	r1, [r5, #0]
 800d56a:	291d      	cmp	r1, #29
 800d56c:	d82b      	bhi.n	800d5c6 <__sflush_r+0xb2>
 800d56e:	4a2a      	ldr	r2, [pc, #168]	@ (800d618 <__sflush_r+0x104>)
 800d570:	40ca      	lsrs	r2, r1
 800d572:	07d6      	lsls	r6, r2, #31
 800d574:	d527      	bpl.n	800d5c6 <__sflush_r+0xb2>
 800d576:	2200      	movs	r2, #0
 800d578:	6062      	str	r2, [r4, #4]
 800d57a:	04d9      	lsls	r1, r3, #19
 800d57c:	6922      	ldr	r2, [r4, #16]
 800d57e:	6022      	str	r2, [r4, #0]
 800d580:	d504      	bpl.n	800d58c <__sflush_r+0x78>
 800d582:	1c42      	adds	r2, r0, #1
 800d584:	d101      	bne.n	800d58a <__sflush_r+0x76>
 800d586:	682b      	ldr	r3, [r5, #0]
 800d588:	b903      	cbnz	r3, 800d58c <__sflush_r+0x78>
 800d58a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d58c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d58e:	602f      	str	r7, [r5, #0]
 800d590:	b1b9      	cbz	r1, 800d5c2 <__sflush_r+0xae>
 800d592:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d596:	4299      	cmp	r1, r3
 800d598:	d002      	beq.n	800d5a0 <__sflush_r+0x8c>
 800d59a:	4628      	mov	r0, r5
 800d59c:	f7ff fbf4 	bl	800cd88 <_free_r>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5a4:	e00d      	b.n	800d5c2 <__sflush_r+0xae>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	47b0      	blx	r6
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	1c50      	adds	r0, r2, #1
 800d5b0:	d1c9      	bne.n	800d546 <__sflush_r+0x32>
 800d5b2:	682b      	ldr	r3, [r5, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d0c6      	beq.n	800d546 <__sflush_r+0x32>
 800d5b8:	2b1d      	cmp	r3, #29
 800d5ba:	d001      	beq.n	800d5c0 <__sflush_r+0xac>
 800d5bc:	2b16      	cmp	r3, #22
 800d5be:	d11e      	bne.n	800d5fe <__sflush_r+0xea>
 800d5c0:	602f      	str	r7, [r5, #0]
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	e022      	b.n	800d60c <__sflush_r+0xf8>
 800d5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ca:	b21b      	sxth	r3, r3
 800d5cc:	e01b      	b.n	800d606 <__sflush_r+0xf2>
 800d5ce:	690f      	ldr	r7, [r1, #16]
 800d5d0:	2f00      	cmp	r7, #0
 800d5d2:	d0f6      	beq.n	800d5c2 <__sflush_r+0xae>
 800d5d4:	0793      	lsls	r3, r2, #30
 800d5d6:	680e      	ldr	r6, [r1, #0]
 800d5d8:	bf08      	it	eq
 800d5da:	694b      	ldreq	r3, [r1, #20]
 800d5dc:	600f      	str	r7, [r1, #0]
 800d5de:	bf18      	it	ne
 800d5e0:	2300      	movne	r3, #0
 800d5e2:	eba6 0807 	sub.w	r8, r6, r7
 800d5e6:	608b      	str	r3, [r1, #8]
 800d5e8:	f1b8 0f00 	cmp.w	r8, #0
 800d5ec:	dde9      	ble.n	800d5c2 <__sflush_r+0xae>
 800d5ee:	6a21      	ldr	r1, [r4, #32]
 800d5f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d5f2:	4643      	mov	r3, r8
 800d5f4:	463a      	mov	r2, r7
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	47b0      	blx	r6
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	dc08      	bgt.n	800d610 <__sflush_r+0xfc>
 800d5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d606:	81a3      	strh	r3, [r4, #12]
 800d608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d610:	4407      	add	r7, r0
 800d612:	eba8 0800 	sub.w	r8, r8, r0
 800d616:	e7e7      	b.n	800d5e8 <__sflush_r+0xd4>
 800d618:	20400001 	.word	0x20400001

0800d61c <_fflush_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	690b      	ldr	r3, [r1, #16]
 800d620:	4605      	mov	r5, r0
 800d622:	460c      	mov	r4, r1
 800d624:	b913      	cbnz	r3, 800d62c <_fflush_r+0x10>
 800d626:	2500      	movs	r5, #0
 800d628:	4628      	mov	r0, r5
 800d62a:	bd38      	pop	{r3, r4, r5, pc}
 800d62c:	b118      	cbz	r0, 800d636 <_fflush_r+0x1a>
 800d62e:	6a03      	ldr	r3, [r0, #32]
 800d630:	b90b      	cbnz	r3, 800d636 <_fflush_r+0x1a>
 800d632:	f7ff fa93 	bl	800cb5c <__sinit>
 800d636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d0f3      	beq.n	800d626 <_fflush_r+0xa>
 800d63e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d640:	07d0      	lsls	r0, r2, #31
 800d642:	d404      	bmi.n	800d64e <_fflush_r+0x32>
 800d644:	0599      	lsls	r1, r3, #22
 800d646:	d402      	bmi.n	800d64e <_fflush_r+0x32>
 800d648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d64a:	f7ff fb8c 	bl	800cd66 <__retarget_lock_acquire_recursive>
 800d64e:	4628      	mov	r0, r5
 800d650:	4621      	mov	r1, r4
 800d652:	f7ff ff5f 	bl	800d514 <__sflush_r>
 800d656:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d658:	07da      	lsls	r2, r3, #31
 800d65a:	4605      	mov	r5, r0
 800d65c:	d4e4      	bmi.n	800d628 <_fflush_r+0xc>
 800d65e:	89a3      	ldrh	r3, [r4, #12]
 800d660:	059b      	lsls	r3, r3, #22
 800d662:	d4e1      	bmi.n	800d628 <_fflush_r+0xc>
 800d664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d666:	f7ff fb7f 	bl	800cd68 <__retarget_lock_release_recursive>
 800d66a:	e7dd      	b.n	800d628 <_fflush_r+0xc>

0800d66c <__swbuf_r>:
 800d66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66e:	460e      	mov	r6, r1
 800d670:	4614      	mov	r4, r2
 800d672:	4605      	mov	r5, r0
 800d674:	b118      	cbz	r0, 800d67e <__swbuf_r+0x12>
 800d676:	6a03      	ldr	r3, [r0, #32]
 800d678:	b90b      	cbnz	r3, 800d67e <__swbuf_r+0x12>
 800d67a:	f7ff fa6f 	bl	800cb5c <__sinit>
 800d67e:	69a3      	ldr	r3, [r4, #24]
 800d680:	60a3      	str	r3, [r4, #8]
 800d682:	89a3      	ldrh	r3, [r4, #12]
 800d684:	071a      	lsls	r2, r3, #28
 800d686:	d501      	bpl.n	800d68c <__swbuf_r+0x20>
 800d688:	6923      	ldr	r3, [r4, #16]
 800d68a:	b943      	cbnz	r3, 800d69e <__swbuf_r+0x32>
 800d68c:	4621      	mov	r1, r4
 800d68e:	4628      	mov	r0, r5
 800d690:	f000 f82a 	bl	800d6e8 <__swsetup_r>
 800d694:	b118      	cbz	r0, 800d69e <__swbuf_r+0x32>
 800d696:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d69a:	4638      	mov	r0, r7
 800d69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	6922      	ldr	r2, [r4, #16]
 800d6a2:	1a98      	subs	r0, r3, r2
 800d6a4:	6963      	ldr	r3, [r4, #20]
 800d6a6:	b2f6      	uxtb	r6, r6
 800d6a8:	4283      	cmp	r3, r0
 800d6aa:	4637      	mov	r7, r6
 800d6ac:	dc05      	bgt.n	800d6ba <__swbuf_r+0x4e>
 800d6ae:	4621      	mov	r1, r4
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	f7ff ffb3 	bl	800d61c <_fflush_r>
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d1ed      	bne.n	800d696 <__swbuf_r+0x2a>
 800d6ba:	68a3      	ldr	r3, [r4, #8]
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	60a3      	str	r3, [r4, #8]
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	1c5a      	adds	r2, r3, #1
 800d6c4:	6022      	str	r2, [r4, #0]
 800d6c6:	701e      	strb	r6, [r3, #0]
 800d6c8:	6962      	ldr	r2, [r4, #20]
 800d6ca:	1c43      	adds	r3, r0, #1
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d004      	beq.n	800d6da <__swbuf_r+0x6e>
 800d6d0:	89a3      	ldrh	r3, [r4, #12]
 800d6d2:	07db      	lsls	r3, r3, #31
 800d6d4:	d5e1      	bpl.n	800d69a <__swbuf_r+0x2e>
 800d6d6:	2e0a      	cmp	r6, #10
 800d6d8:	d1df      	bne.n	800d69a <__swbuf_r+0x2e>
 800d6da:	4621      	mov	r1, r4
 800d6dc:	4628      	mov	r0, r5
 800d6de:	f7ff ff9d 	bl	800d61c <_fflush_r>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d0d9      	beq.n	800d69a <__swbuf_r+0x2e>
 800d6e6:	e7d6      	b.n	800d696 <__swbuf_r+0x2a>

0800d6e8 <__swsetup_r>:
 800d6e8:	b538      	push	{r3, r4, r5, lr}
 800d6ea:	4b29      	ldr	r3, [pc, #164]	@ (800d790 <__swsetup_r+0xa8>)
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	6818      	ldr	r0, [r3, #0]
 800d6f0:	460c      	mov	r4, r1
 800d6f2:	b118      	cbz	r0, 800d6fc <__swsetup_r+0x14>
 800d6f4:	6a03      	ldr	r3, [r0, #32]
 800d6f6:	b90b      	cbnz	r3, 800d6fc <__swsetup_r+0x14>
 800d6f8:	f7ff fa30 	bl	800cb5c <__sinit>
 800d6fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d700:	0719      	lsls	r1, r3, #28
 800d702:	d422      	bmi.n	800d74a <__swsetup_r+0x62>
 800d704:	06da      	lsls	r2, r3, #27
 800d706:	d407      	bmi.n	800d718 <__swsetup_r+0x30>
 800d708:	2209      	movs	r2, #9
 800d70a:	602a      	str	r2, [r5, #0]
 800d70c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d710:	81a3      	strh	r3, [r4, #12]
 800d712:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d716:	e033      	b.n	800d780 <__swsetup_r+0x98>
 800d718:	0758      	lsls	r0, r3, #29
 800d71a:	d512      	bpl.n	800d742 <__swsetup_r+0x5a>
 800d71c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d71e:	b141      	cbz	r1, 800d732 <__swsetup_r+0x4a>
 800d720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d724:	4299      	cmp	r1, r3
 800d726:	d002      	beq.n	800d72e <__swsetup_r+0x46>
 800d728:	4628      	mov	r0, r5
 800d72a:	f7ff fb2d 	bl	800cd88 <_free_r>
 800d72e:	2300      	movs	r3, #0
 800d730:	6363      	str	r3, [r4, #52]	@ 0x34
 800d732:	89a3      	ldrh	r3, [r4, #12]
 800d734:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d738:	81a3      	strh	r3, [r4, #12]
 800d73a:	2300      	movs	r3, #0
 800d73c:	6063      	str	r3, [r4, #4]
 800d73e:	6923      	ldr	r3, [r4, #16]
 800d740:	6023      	str	r3, [r4, #0]
 800d742:	89a3      	ldrh	r3, [r4, #12]
 800d744:	f043 0308 	orr.w	r3, r3, #8
 800d748:	81a3      	strh	r3, [r4, #12]
 800d74a:	6923      	ldr	r3, [r4, #16]
 800d74c:	b94b      	cbnz	r3, 800d762 <__swsetup_r+0x7a>
 800d74e:	89a3      	ldrh	r3, [r4, #12]
 800d750:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d758:	d003      	beq.n	800d762 <__swsetup_r+0x7a>
 800d75a:	4621      	mov	r1, r4
 800d75c:	4628      	mov	r0, r5
 800d75e:	f000 f84f 	bl	800d800 <__smakebuf_r>
 800d762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d766:	f013 0201 	ands.w	r2, r3, #1
 800d76a:	d00a      	beq.n	800d782 <__swsetup_r+0x9a>
 800d76c:	2200      	movs	r2, #0
 800d76e:	60a2      	str	r2, [r4, #8]
 800d770:	6962      	ldr	r2, [r4, #20]
 800d772:	4252      	negs	r2, r2
 800d774:	61a2      	str	r2, [r4, #24]
 800d776:	6922      	ldr	r2, [r4, #16]
 800d778:	b942      	cbnz	r2, 800d78c <__swsetup_r+0xa4>
 800d77a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d77e:	d1c5      	bne.n	800d70c <__swsetup_r+0x24>
 800d780:	bd38      	pop	{r3, r4, r5, pc}
 800d782:	0799      	lsls	r1, r3, #30
 800d784:	bf58      	it	pl
 800d786:	6962      	ldrpl	r2, [r4, #20]
 800d788:	60a2      	str	r2, [r4, #8]
 800d78a:	e7f4      	b.n	800d776 <__swsetup_r+0x8e>
 800d78c:	2000      	movs	r0, #0
 800d78e:	e7f7      	b.n	800d780 <__swsetup_r+0x98>
 800d790:	24000020 	.word	0x24000020

0800d794 <_sbrk_r>:
 800d794:	b538      	push	{r3, r4, r5, lr}
 800d796:	4d06      	ldr	r5, [pc, #24]	@ (800d7b0 <_sbrk_r+0x1c>)
 800d798:	2300      	movs	r3, #0
 800d79a:	4604      	mov	r4, r0
 800d79c:	4608      	mov	r0, r1
 800d79e:	602b      	str	r3, [r5, #0]
 800d7a0:	f7f3 fd42 	bl	8001228 <_sbrk>
 800d7a4:	1c43      	adds	r3, r0, #1
 800d7a6:	d102      	bne.n	800d7ae <_sbrk_r+0x1a>
 800d7a8:	682b      	ldr	r3, [r5, #0]
 800d7aa:	b103      	cbz	r3, 800d7ae <_sbrk_r+0x1a>
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	bd38      	pop	{r3, r4, r5, pc}
 800d7b0:	24004d08 	.word	0x24004d08

0800d7b4 <__swhatbuf_r>:
 800d7b4:	b570      	push	{r4, r5, r6, lr}
 800d7b6:	460c      	mov	r4, r1
 800d7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7bc:	2900      	cmp	r1, #0
 800d7be:	b096      	sub	sp, #88	@ 0x58
 800d7c0:	4615      	mov	r5, r2
 800d7c2:	461e      	mov	r6, r3
 800d7c4:	da0d      	bge.n	800d7e2 <__swhatbuf_r+0x2e>
 800d7c6:	89a3      	ldrh	r3, [r4, #12]
 800d7c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d7cc:	f04f 0100 	mov.w	r1, #0
 800d7d0:	bf14      	ite	ne
 800d7d2:	2340      	movne	r3, #64	@ 0x40
 800d7d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d7d8:	2000      	movs	r0, #0
 800d7da:	6031      	str	r1, [r6, #0]
 800d7dc:	602b      	str	r3, [r5, #0]
 800d7de:	b016      	add	sp, #88	@ 0x58
 800d7e0:	bd70      	pop	{r4, r5, r6, pc}
 800d7e2:	466a      	mov	r2, sp
 800d7e4:	f000 f848 	bl	800d878 <_fstat_r>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	dbec      	blt.n	800d7c6 <__swhatbuf_r+0x12>
 800d7ec:	9901      	ldr	r1, [sp, #4]
 800d7ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d7f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d7f6:	4259      	negs	r1, r3
 800d7f8:	4159      	adcs	r1, r3
 800d7fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7fe:	e7eb      	b.n	800d7d8 <__swhatbuf_r+0x24>

0800d800 <__smakebuf_r>:
 800d800:	898b      	ldrh	r3, [r1, #12]
 800d802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d804:	079d      	lsls	r5, r3, #30
 800d806:	4606      	mov	r6, r0
 800d808:	460c      	mov	r4, r1
 800d80a:	d507      	bpl.n	800d81c <__smakebuf_r+0x1c>
 800d80c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d810:	6023      	str	r3, [r4, #0]
 800d812:	6123      	str	r3, [r4, #16]
 800d814:	2301      	movs	r3, #1
 800d816:	6163      	str	r3, [r4, #20]
 800d818:	b003      	add	sp, #12
 800d81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d81c:	ab01      	add	r3, sp, #4
 800d81e:	466a      	mov	r2, sp
 800d820:	f7ff ffc8 	bl	800d7b4 <__swhatbuf_r>
 800d824:	9f00      	ldr	r7, [sp, #0]
 800d826:	4605      	mov	r5, r0
 800d828:	4639      	mov	r1, r7
 800d82a:	4630      	mov	r0, r6
 800d82c:	f7ff fb18 	bl	800ce60 <_malloc_r>
 800d830:	b948      	cbnz	r0, 800d846 <__smakebuf_r+0x46>
 800d832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d836:	059a      	lsls	r2, r3, #22
 800d838:	d4ee      	bmi.n	800d818 <__smakebuf_r+0x18>
 800d83a:	f023 0303 	bic.w	r3, r3, #3
 800d83e:	f043 0302 	orr.w	r3, r3, #2
 800d842:	81a3      	strh	r3, [r4, #12]
 800d844:	e7e2      	b.n	800d80c <__smakebuf_r+0xc>
 800d846:	89a3      	ldrh	r3, [r4, #12]
 800d848:	6020      	str	r0, [r4, #0]
 800d84a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d84e:	81a3      	strh	r3, [r4, #12]
 800d850:	9b01      	ldr	r3, [sp, #4]
 800d852:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d856:	b15b      	cbz	r3, 800d870 <__smakebuf_r+0x70>
 800d858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d85c:	4630      	mov	r0, r6
 800d85e:	f000 f81d 	bl	800d89c <_isatty_r>
 800d862:	b128      	cbz	r0, 800d870 <__smakebuf_r+0x70>
 800d864:	89a3      	ldrh	r3, [r4, #12]
 800d866:	f023 0303 	bic.w	r3, r3, #3
 800d86a:	f043 0301 	orr.w	r3, r3, #1
 800d86e:	81a3      	strh	r3, [r4, #12]
 800d870:	89a3      	ldrh	r3, [r4, #12]
 800d872:	431d      	orrs	r5, r3
 800d874:	81a5      	strh	r5, [r4, #12]
 800d876:	e7cf      	b.n	800d818 <__smakebuf_r+0x18>

0800d878 <_fstat_r>:
 800d878:	b538      	push	{r3, r4, r5, lr}
 800d87a:	4d07      	ldr	r5, [pc, #28]	@ (800d898 <_fstat_r+0x20>)
 800d87c:	2300      	movs	r3, #0
 800d87e:	4604      	mov	r4, r0
 800d880:	4608      	mov	r0, r1
 800d882:	4611      	mov	r1, r2
 800d884:	602b      	str	r3, [r5, #0]
 800d886:	f7f3 fca6 	bl	80011d6 <_fstat>
 800d88a:	1c43      	adds	r3, r0, #1
 800d88c:	d102      	bne.n	800d894 <_fstat_r+0x1c>
 800d88e:	682b      	ldr	r3, [r5, #0]
 800d890:	b103      	cbz	r3, 800d894 <_fstat_r+0x1c>
 800d892:	6023      	str	r3, [r4, #0]
 800d894:	bd38      	pop	{r3, r4, r5, pc}
 800d896:	bf00      	nop
 800d898:	24004d08 	.word	0x24004d08

0800d89c <_isatty_r>:
 800d89c:	b538      	push	{r3, r4, r5, lr}
 800d89e:	4d06      	ldr	r5, [pc, #24]	@ (800d8b8 <_isatty_r+0x1c>)
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	4608      	mov	r0, r1
 800d8a6:	602b      	str	r3, [r5, #0]
 800d8a8:	f7f3 fca5 	bl	80011f6 <_isatty>
 800d8ac:	1c43      	adds	r3, r0, #1
 800d8ae:	d102      	bne.n	800d8b6 <_isatty_r+0x1a>
 800d8b0:	682b      	ldr	r3, [r5, #0]
 800d8b2:	b103      	cbz	r3, 800d8b6 <_isatty_r+0x1a>
 800d8b4:	6023      	str	r3, [r4, #0]
 800d8b6:	bd38      	pop	{r3, r4, r5, pc}
 800d8b8:	24004d08 	.word	0x24004d08

0800d8bc <_init>:
 800d8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8be:	bf00      	nop
 800d8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8c2:	bc08      	pop	{r3}
 800d8c4:	469e      	mov	lr, r3
 800d8c6:	4770      	bx	lr

0800d8c8 <_fini>:
 800d8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ca:	bf00      	nop
 800d8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ce:	bc08      	pop	{r3}
 800d8d0:	469e      	mov	lr, r3
 800d8d2:	4770      	bx	lr
