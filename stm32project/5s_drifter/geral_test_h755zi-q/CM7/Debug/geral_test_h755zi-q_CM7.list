
geral_test_h755zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139c0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  08013c60  08013c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013fb4  08013fb4  00015064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013fb4  08013fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013fbc  08013fbc  00015064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013fbc  08013fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013fc0  08013fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  24000000  08013fc4  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052f4  24000064  08014028  00015064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005358  08014028  00015358  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00015064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035a83  00000000  00000000  00015092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000758a  00000000  00000000  0004ab15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a60  00000000  00000000  000520a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000207a  00000000  00000000  00054b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047c02  00000000  00000000  00056b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e890  00000000  00000000  0009e77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b558c  00000000  00000000  000dd00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00292598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b5b4  00000000  00000000  002925dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0029db90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013c48 	.word	0x08013c48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08013c48 	.word	0x08013c48

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <SystemInit+0x12c>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <SystemInit+0x12c>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <SystemInit+0x12c>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a44      	ldr	r2, [pc, #272]	@ (80007e8 <SystemInit+0x12c>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <SystemInit+0x130>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <SystemInit+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a3e      	ldr	r2, [pc, #248]	@ (80007ec <SystemInit+0x130>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <SystemInit+0x134>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	@ (80007f0 <SystemInit+0x134>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <SystemInit+0x134>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b39      	ldr	r3, [pc, #228]	@ (80007f0 <SystemInit+0x134>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4938      	ldr	r1, [pc, #224]	@ (80007f0 <SystemInit+0x134>)
 8000710:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <SystemInit+0x138>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <SystemInit+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <SystemInit+0x130>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <SystemInit+0x130>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <SystemInit+0x134>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <SystemInit+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <SystemInit+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemInit+0x134>)
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <SystemInit+0x13c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <SystemInit+0x134>)
 800074c:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <SystemInit+0x140>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemInit+0x134>)
 8000752:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <SystemInit+0x144>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <SystemInit+0x134>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemInit+0x134>)
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemInit+0x144>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemInit+0x134>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <SystemInit+0x134>)
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <SystemInit+0x144>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemInit+0x134>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <SystemInit+0x134>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <SystemInit+0x134>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <SystemInit+0x134>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemInit+0x148>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <SystemInit+0x148>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <SystemInit+0x14c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <SystemInit+0x150>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x154>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <SystemInit+0x134>)
 80007a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <SystemInit+0x134>)
 80007b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <SystemInit+0x134>)
 80007bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <SystemInit+0x158>)
 80007c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <SystemInit+0x134>)
 80007ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <SystemInit+0x134>)
 80007d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	52002000 	.word	0x52002000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007f8:	02020200 	.word	0x02020200
 80007fc:	01ff0000 	.word	0x01ff0000
 8000800:	01010280 	.word	0x01010280
 8000804:	580000c0 	.word	0x580000c0
 8000808:	5c001000 	.word	0x5c001000
 800080c:	ffff0000 	.word	0xffff0000
 8000810:	51008108 	.word	0x51008108
 8000814:	52004000 	.word	0x52004000

08000818 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <ExitRun0Mode+0x2c>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <ExitRun0Mode+0x2c>)
 8000822:	f023 0302 	bic.w	r3, r3, #2
 8000826:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000828:	bf00      	nop
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <ExitRun0Mode+0x2c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	58024800 	.word	0x58024800

08000848 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800086c:	4b31      	ldr	r3, [pc, #196]	@ (8000934 <MX_ADC1_Init+0xec>)
 800086e:	4a32      	ldr	r2, [pc, #200]	@ (8000938 <MX_ADC1_Init+0xf0>)
 8000870:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000872:	4b30      	ldr	r3, [pc, #192]	@ (8000934 <MX_ADC1_Init+0xec>)
 8000874:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000878:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800087a:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <MX_ADC1_Init+0xec>)
 800087c:	2210      	movs	r2, #16
 800087e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000880:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <MX_ADC1_Init+0xec>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000886:	4b2b      	ldr	r3, [pc, #172]	@ (8000934 <MX_ADC1_Init+0xec>)
 8000888:	2204      	movs	r2, #4
 800088a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800088c:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <MX_ADC1_Init+0xec>)
 800088e:	2200      	movs	r2, #0
 8000890:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000892:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <MX_ADC1_Init+0xec>)
 8000894:	2200      	movs	r2, #0
 8000896:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000898:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <MX_ADC1_Init+0xec>)
 800089a:	2201      	movs	r2, #1
 800089c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089e:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a4:	4b23      	ldr	r3, [pc, #140]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008aa:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008b0:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008be:	2200      	movs	r2, #0
 80008c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d0:	4818      	ldr	r0, [pc, #96]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008d2:	f001 f909 	bl	8001ae8 <HAL_ADC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008dc:	f000 faac 	bl	8000e38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4812      	ldr	r0, [pc, #72]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008ec:	f002 f896 	bl	8002a1c <HAL_ADCEx_MultiModeConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008f6:	f000 fa9f 	bl	8000e38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_ADC1_Init+0xf4>)
 80008fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fe:	2306      	movs	r3, #6
 8000900:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000906:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800090a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090c:	2304      	movs	r3, #4
 800090e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_ADC1_Init+0xec>)
 800091e:	f001 fbd1 	bl	80020c4 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000928:	f000 fa86 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	24000080 	.word	0x24000080
 8000938:	40022000 	.word	0x40022000
 800093c:	3ef08000 	.word	0x3ef08000

08000940 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0ba      	sub	sp, #232	@ 0xe8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	22c0      	movs	r2, #192	@ 0xc0
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f012 fcf3 	bl	801334c <memset>
  if(adcHandle->Instance==ADC1)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a18 <HAL_ADC_MspInit+0xd8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d14f      	bne.n	8000a10 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000970:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000974:	f04f 0300 	mov.w	r3, #0
 8000978:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800097c:	2304      	movs	r3, #4
 800097e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000980:	230a      	movs	r3, #10
 8000982:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000990:	23c0      	movs	r3, #192	@ 0xc0
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000994:	2320      	movs	r3, #32
 8000996:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800099c:	2300      	movs	r3, #0
 800099e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	4618      	mov	r0, r3
 80009a8:	f004 f9d2 	bl	8004d50 <HAL_RCCEx_PeriphCLKConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80009b2:	f000 fa41 	bl	8000e38 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009b6:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009bc:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009be:	f043 0320 	orr.w	r3, r3, #32
 80009c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009cc:	f003 0320 	and.w	r3, r3, #32
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009f2:	2308      	movs	r3, #8
 80009f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f8:	2303      	movs	r3, #3
 80009fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <HAL_ADC_MspInit+0xe0>)
 8000a0c:	f002 ff28 	bl	8003860 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	37e8      	adds	r7, #232	@ 0xe8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40022000 	.word	0x40022000
 8000a1c:	58024400 	.word	0x58024400
 8000a20:	58020000 	.word	0x58020000

08000a24 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idle */
  idleHandle = osThreadNew(idle_task, NULL, &idle_attributes);
 8000a28:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <MX_FREERTOS_Init+0x78>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	481c      	ldr	r0, [pc, #112]	@ (8000aa0 <MX_FREERTOS_Init+0x7c>)
 8000a2e:	f00e f95a 	bl	800ece6 <osThreadNew>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <MX_FREERTOS_Init+0x80>)
 8000a36:	6013      	str	r3, [r2, #0]

  /* creation of nb_iot */
  nb_iotHandle = osThreadNew(nb_iot_task, NULL, &nb_iot_attributes);
 8000a38:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa8 <MX_FREERTOS_Init+0x84>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	481b      	ldr	r0, [pc, #108]	@ (8000aac <MX_FREERTOS_Init+0x88>)
 8000a3e:	f00e f952 	bl	800ece6 <osThreadNew>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab0 <MX_FREERTOS_Init+0x8c>)
 8000a46:	6013      	str	r3, [r2, #0]

  /* creation of cnss */
  cnssHandle = osThreadNew(cnss_task, NULL, &cnss_attributes);
 8000a48:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab4 <MX_FREERTOS_Init+0x90>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	481a      	ldr	r0, [pc, #104]	@ (8000ab8 <MX_FREERTOS_Init+0x94>)
 8000a4e:	f00e f94a 	bl	800ece6 <osThreadNew>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a19      	ldr	r2, [pc, #100]	@ (8000abc <MX_FREERTOS_Init+0x98>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* creation of sd_card */
  sd_cardHandle = osThreadNew(sd_card_task, NULL, &sd_card_attributes);
 8000a58:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <MX_FREERTOS_Init+0x9c>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4819      	ldr	r0, [pc, #100]	@ (8000ac4 <MX_FREERTOS_Init+0xa0>)
 8000a5e:	f00e f942 	bl	800ece6 <osThreadNew>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a18      	ldr	r2, [pc, #96]	@ (8000ac8 <MX_FREERTOS_Init+0xa4>)
 8000a66:	6013      	str	r3, [r2, #0]

  /* creation of temp */
  tempHandle = osThreadNew(temp_task, NULL, &temp_attributes);
 8000a68:	4a18      	ldr	r2, [pc, #96]	@ (8000acc <MX_FREERTOS_Init+0xa8>)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <MX_FREERTOS_Init+0xac>)
 8000a6e:	f00e f93a 	bl	800ece6 <osThreadNew>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4a17      	ldr	r2, [pc, #92]	@ (8000ad4 <MX_FREERTOS_Init+0xb0>)
 8000a76:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(imu_task, NULL, &imu_attributes);
 8000a78:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <MX_FREERTOS_Init+0xb4>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4817      	ldr	r0, [pc, #92]	@ (8000adc <MX_FREERTOS_Init+0xb8>)
 8000a7e:	f00e f932 	bl	800ece6 <osThreadNew>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4a16      	ldr	r2, [pc, #88]	@ (8000ae0 <MX_FREERTOS_Init+0xbc>)
 8000a86:	6013      	str	r3, [r2, #0]

  /* creation of batterie */
  batterieHandle = osThreadNew(batterie_task, NULL, &batterie_attributes);
 8000a88:	4a16      	ldr	r2, [pc, #88]	@ (8000ae4 <MX_FREERTOS_Init+0xc0>)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4816      	ldr	r0, [pc, #88]	@ (8000ae8 <MX_FREERTOS_Init+0xc4>)
 8000a8e:	f00e f92a 	bl	800ece6 <osThreadNew>
 8000a92:	4603      	mov	r3, r0
 8000a94:	4a15      	ldr	r2, [pc, #84]	@ (8000aec <MX_FREERTOS_Init+0xc8>)
 8000a96:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08013da4 	.word	0x08013da4
 8000aa0:	0801252d 	.word	0x0801252d
 8000aa4:	240000e4 	.word	0x240000e4
 8000aa8:	08013dc8 	.word	0x08013dc8
 8000aac:	080131c1 	.word	0x080131c1
 8000ab0:	240000e8 	.word	0x240000e8
 8000ab4:	08013dec 	.word	0x08013dec
 8000ab8:	08013185 	.word	0x08013185
 8000abc:	240000ec 	.word	0x240000ec
 8000ac0:	08013e10 	.word	0x08013e10
 8000ac4:	08013221 	.word	0x08013221
 8000ac8:	240000f0 	.word	0x240000f0
 8000acc:	08013e34 	.word	0x08013e34
 8000ad0:	080132f1 	.word	0x080132f1
 8000ad4:	240000f4 	.word	0x240000f4
 8000ad8:	08013e58 	.word	0x08013e58
 8000adc:	08013199 	.word	0x08013199
 8000ae0:	240000f8 	.word	0x240000f8
 8000ae4:	08013e7c 	.word	0x08013e7c
 8000ae8:	08013151 	.word	0x08013151
 8000aec:	240000fc 	.word	0x240000fc

08000af0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	4b51      	ldr	r3, [pc, #324]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b16:	4b4d      	ldr	r3, [pc, #308]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b49      	ldr	r3, [pc, #292]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	4a48      	ldr	r2, [pc, #288]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b34:	4b45      	ldr	r3, [pc, #276]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b42      	ldr	r3, [pc, #264]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b48:	4a40      	ldr	r2, [pc, #256]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b4a:	f043 0302 	orr.w	r3, r3, #2
 8000b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b52:	4b3e      	ldr	r3, [pc, #248]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b60:	4b3a      	ldr	r3, [pc, #232]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b66:	4a39      	ldr	r2, [pc, #228]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b70:	4b36      	ldr	r3, [pc, #216]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7e:	4b33      	ldr	r3, [pc, #204]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	4a31      	ldr	r2, [pc, #196]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <MX_GPIO_Init+0x15c>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b9c:	2332      	movs	r3, #50	@ 0x32
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bac:	230b      	movs	r3, #11
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4826      	ldr	r0, [pc, #152]	@ (8000c50 <MX_GPIO_Init+0x160>)
 8000bb8:	f002 fe52 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bbc:	2386      	movs	r3, #134	@ 0x86
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481f      	ldr	r0, [pc, #124]	@ (8000c54 <MX_GPIO_Init+0x164>)
 8000bd8:	f002 fe42 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bee:	230b      	movs	r3, #11
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4817      	ldr	r0, [pc, #92]	@ (8000c58 <MX_GPIO_Init+0x168>)
 8000bfa:	f002 fe31 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bfe:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c10:	230a      	movs	r3, #10
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <MX_GPIO_Init+0x164>)
 8000c1c:	f002 fe20 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c20:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c32:	230b      	movs	r3, #11
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4807      	ldr	r0, [pc, #28]	@ (8000c5c <MX_GPIO_Init+0x16c>)
 8000c3e:	f002 fe0f 	bl	8003860 <HAL_GPIO_Init>

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	@ 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	58024400 	.word	0x58024400
 8000c50:	58020800 	.word	0x58020800
 8000c54:	58020000 	.word	0x58020000
 8000c58:	58020400 	.word	0x58020400
 8000c5c:	58021800 	.word	0x58021800

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c6a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c6c:	bf00      	nop
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d18 <main+0xb8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d004      	beq.n	8000c84 <main+0x24>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	1e5a      	subs	r2, r3, #1
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dcf4      	bgt.n	8000c6e <main+0xe>
  if ( timeout < 0 )
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	da01      	bge.n	8000c8e <main+0x2e>
  {
  Error_Handler();
 8000c8a:	f000 f8d5 	bl	8000e38 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8e:	f000 fcab 	bl	80015e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c92:	f000 f843 	bl	8000d1c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c96:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <main+0xb8>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8000d18 <main+0xb8>)
 8000c9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <main+0xb8>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f002 ff9b 	bl	8003bf0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f002 ffb1 	bl	8003c24 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000cc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cc6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000cc8:	bf00      	nop
 8000cca:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <main+0xb8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d104      	bne.n	8000ce0 <main+0x80>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	1e5a      	subs	r2, r3, #1
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	dcf4      	bgt.n	8000cca <main+0x6a>
if ( timeout < 0 )
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da01      	bge.n	8000cea <main+0x8a>
{
Error_Handler();
 8000ce6:	f000 f8a7 	bl	8000e38 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cea:	f7ff ff01 	bl	8000af0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cee:	f000 f959 	bl	8000fa4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000cf2:	f000 fb8f 	bl	8001414 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000cf6:	f7ff fda7 	bl	8000848 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000cfa:	f000 fb1b 	bl	8001334 <MX_TIM3_Init>
  MX_SDMMC1_SD_Init();
 8000cfe:	f000 f8a1 	bl	8000e44 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000d02:	f00b fa79 	bl	800c1f8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d06:	f00d ff6d 	bl	800ebe4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d0a:	f7ff fe8b 	bl	8000a24 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d0e:	f00d ffaf 	bl	800ec70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d12:	bf00      	nop
 8000d14:	e7fd      	b.n	8000d12 <main+0xb2>
 8000d16:	bf00      	nop
 8000d18:	58024400 	.word	0x58024400

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b09c      	sub	sp, #112	@ 0x70
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d26:	224c      	movs	r2, #76	@ 0x4c
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f012 fb0e 	bl	801334c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2220      	movs	r2, #32
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f012 fb08 	bl	801334c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d3c:	2004      	movs	r0, #4
 8000d3e:	f002 ff85 	bl	8003c4c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b31      	ldr	r3, [pc, #196]	@ (8000e0c <SystemClock_Config+0xf0>)
 8000d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4a:	4a30      	ldr	r2, [pc, #192]	@ (8000e0c <SystemClock_Config+0xf0>)
 8000d4c:	f023 0301 	bic.w	r3, r3, #1
 8000d50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d52:	4b2e      	ldr	r3, [pc, #184]	@ (8000e0c <SystemClock_Config+0xf0>)
 8000d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <SystemClock_Config+0xf4>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d64:	4a2a      	ldr	r2, [pc, #168]	@ (8000e10 <SystemClock_Config+0xf4>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b28      	ldr	r3, [pc, #160]	@ (8000e10 <SystemClock_Config+0xf4>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d78:	bf00      	nop
 8000d7a:	4b25      	ldr	r3, [pc, #148]	@ (8000e10 <SystemClock_Config+0xf4>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d86:	d1f8      	bne.n	8000d7a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d90:	2340      	movs	r3, #64	@ 0x40
 8000d92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d94:	2302      	movs	r3, #2
 8000d96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000da0:	230a      	movs	r3, #10
 8000da2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000db0:	230c      	movs	r3, #12
 8000db2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000db4:	2302      	movs	r3, #2
 8000db6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 ff9d 	bl	8003d00 <HAL_RCC_OscConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dcc:	f000 f834 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	233f      	movs	r3, #63	@ 0x3f
 8000dd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000de4:	2340      	movs	r3, #64	@ 0x40
 8000de6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2101      	movs	r1, #1
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 fbdd 	bl	80045b4 <HAL_RCC_ClockConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000e00:	f000 f81a 	bl	8000e38 <Error_Handler>
  }
}
 8000e04:	bf00      	nop
 8000e06:	3770      	adds	r7, #112	@ 0x70
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	58000400 	.word	0x58000400
 8000e10:	58024800 	.word	0x58024800

08000e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e26:	f000 fc1b 	bl	8001660 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40010000 	.word	0x40010000

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <Error_Handler+0x8>

08000e44 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e84 <MX_SDMMC1_SD_Init+0x40>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	@ (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e6e:	f006 fc6d 	bl	800774c <HAL_SD_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000e78:	f7ff ffde 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	24000100 	.word	0x24000100
 8000e84:	52007000 	.word	0x52007000

08000e88 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0bc      	sub	sp, #240	@ 0xf0
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	22c0      	movs	r2, #192	@ 0xc0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f012 fa4f 	bl	801334c <memset>
  if(sdHandle->Instance==SDMMC1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a38      	ldr	r2, [pc, #224]	@ (8000f94 <HAL_SD_MspInit+0x10c>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d169      	bne.n	8000f8c <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000eb8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 ff3f 	bl	8004d50 <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000ed8:	f7ff ffae 	bl	8000e38 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000edc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <HAL_SD_MspInit+0x110>)
 8000ede:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f98 <HAL_SD_MspInit+0x110>)
 8000ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000eec:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <HAL_SD_MspInit+0x110>)
 8000eee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <HAL_SD_MspInit+0x110>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f00:	4a25      	ldr	r2, [pc, #148]	@ (8000f98 <HAL_SD_MspInit+0x110>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f0a:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <HAL_SD_MspInit+0x110>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f18:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <HAL_SD_MspInit+0x110>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f98 <HAL_SD_MspInit+0x110>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <HAL_SD_MspInit+0x110>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000f36:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f50:	230c      	movs	r3, #12
 8000f52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480f      	ldr	r0, [pc, #60]	@ (8000f9c <HAL_SD_MspInit+0x114>)
 8000f5e:	f002 fc7f 	bl	8003860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f62:	2304      	movs	r3, #4
 8000f64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f7a:	230c      	movs	r3, #12
 8000f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <HAL_SD_MspInit+0x118>)
 8000f88:	f002 fc6a 	bl	8003860 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	37f0      	adds	r7, #240	@ 0xf0
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	52007000 	.word	0x52007000
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020800 	.word	0x58020800
 8000fa0:	58020c00 	.word	0x58020c00

08000fa4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fa8:	4b27      	ldr	r3, [pc, #156]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000faa:	4a28      	ldr	r2, [pc, #160]	@ (800104c <MX_SPI1_Init+0xa8>)
 8000fac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fae:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000fb0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fb6:	4b24      	ldr	r3, [pc, #144]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000fd0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fee:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000ff6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ffa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_SPI1_Init+0xa4>)
 800100a:	2200      	movs	r2, #0
 800100c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <MX_SPI1_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8001028:	2200      	movs	r2, #0
 800102a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_SPI1_Init+0xa4>)
 800102e:	2200      	movs	r2, #0
 8001030:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_SPI1_Init+0xa4>)
 8001034:	f007 fd74 	bl	8008b20 <HAL_SPI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800103e:	f7ff fefb 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2400017c 	.word	0x2400017c
 800104c:	40013000 	.word	0x40013000

08001050 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0bc      	sub	sp, #240	@ 0xf0
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	22c0      	movs	r2, #192	@ 0xc0
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f012 f96b 	bl	801334c <memset>
  if(spiHandle->Instance==SPI1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a38      	ldr	r2, [pc, #224]	@ (800115c <HAL_SPI_MspInit+0x10c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d168      	bne.n	8001152 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001080:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800108c:	2300      	movs	r3, #0
 800108e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fe5b 	bl	8004d50 <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80010a0:	f7ff feca 	bl	8000e38 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001160 <HAL_SPI_MspInit+0x110>)
 80010a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001160 <HAL_SPI_MspInit+0x110>)
 80010ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001160 <HAL_SPI_MspInit+0x110>)
 80010b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b27      	ldr	r3, [pc, #156]	@ (8001160 <HAL_SPI_MspInit+0x110>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c8:	4a25      	ldr	r2, [pc, #148]	@ (8001160 <HAL_SPI_MspInit+0x110>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d2:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <HAL_SPI_MspInit+0x110>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <HAL_SPI_MspInit+0x110>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001160 <HAL_SPI_MspInit+0x110>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <HAL_SPI_MspInit+0x110>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010fe:	2360      	movs	r3, #96	@ 0x60
 8001100:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001116:	2305      	movs	r3, #5
 8001118:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001120:	4619      	mov	r1, r3
 8001122:	4810      	ldr	r0, [pc, #64]	@ (8001164 <HAL_SPI_MspInit+0x114>)
 8001124:	f002 fb9c 	bl	8003860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001140:	2305      	movs	r3, #5
 8001142:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800114a:	4619      	mov	r1, r3
 800114c:	4806      	ldr	r0, [pc, #24]	@ (8001168 <HAL_SPI_MspInit+0x118>)
 800114e:	f002 fb87 	bl	8003860 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001152:	bf00      	nop
 8001154:	37f0      	adds	r7, #240	@ 0xf0
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40013000 	.word	0x40013000
 8001160:	58024400 	.word	0x58024400
 8001164:	58020000 	.word	0x58020000
 8001168:	58020c00 	.word	0x58020c00

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_MspInit+0x38>)
 8001174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001178:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <HAL_MspInit+0x38>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_MspInit+0x38>)
 8001184:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	210f      	movs	r1, #15
 8001194:	f06f 0001 	mvn.w	r0, #1
 8001198:	f001 fdd6 	bl	8002d48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	58024400 	.word	0x58024400

080011a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08e      	sub	sp, #56	@ 0x38
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	d842      	bhi.n	800123c <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	2019      	movs	r0, #25
 80011bc:	f001 fdc4 	bl	8002d48 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011c0:	2019      	movs	r0, #25
 80011c2:	f001 fddb 	bl	8002d7c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80011c6:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <HAL_InitTick+0xac>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011cc:	4b22      	ldr	r3, [pc, #136]	@ (8001258 <HAL_InitTick+0xb0>)
 80011ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011d2:	4a21      	ldr	r2, [pc, #132]	@ (8001258 <HAL_InitTick+0xb0>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001258 <HAL_InitTick+0xb0>)
 80011de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 fd69 	bl	8004ccc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011fa:	f003 fd51 	bl	8004ca0 <HAL_RCC_GetPCLK2Freq>
 80011fe:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001202:	4a16      	ldr	r2, [pc, #88]	@ (800125c <HAL_InitTick+0xb4>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	0c9b      	lsrs	r3, r3, #18
 800120a:	3b01      	subs	r3, #1
 800120c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_InitTick+0xb8>)
 8001210:	4a14      	ldr	r2, [pc, #80]	@ (8001264 <HAL_InitTick+0xbc>)
 8001212:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_InitTick+0xb8>)
 8001216:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800121a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800121c:	4a10      	ldr	r2, [pc, #64]	@ (8001260 <HAL_InitTick+0xb8>)
 800121e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001220:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_InitTick+0xb8>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_InitTick+0xb8>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800122e:	480c      	ldr	r0, [pc, #48]	@ (8001260 <HAL_InitTick+0xb8>)
 8001230:	f007 fdb5 	bl	8008d9e <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d107      	bne.n	800124a <HAL_InitTick+0xa2>
 800123a:	e001      	b.n	8001240 <HAL_InitTick+0x98>
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e005      	b.n	800124c <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001240:	4807      	ldr	r0, [pc, #28]	@ (8001260 <HAL_InitTick+0xb8>)
 8001242:	f007 fe73 	bl	8008f2c <HAL_TIM_Base_Start_IT>
 8001246:	4603      	mov	r3, r0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3738      	adds	r7, #56	@ 0x38
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	24000008 	.word	0x24000008
 8001258:	58024400 	.word	0x58024400
 800125c:	431bde83 	.word	0x431bde83
 8001260:	24000204 	.word	0x24000204
 8001264:	40010000 	.word	0x40010000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <TIM1_UP_IRQHandler+0x10>)
 80012a6:	f007 feb9 	bl	800901c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24000204 	.word	0x24000204

080012b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <USART3_IRQHandler+0x10>)
 80012ba:	f008 fba5 	bl	8009a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	240002a0 	.word	0x240002a0

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f012 f830 	bl	801335c <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	24080000 	.word	0x24080000
 8001328:	00000400 	.word	0x00000400
 800132c:	24000250 	.word	0x24000250
 8001330:	24005358 	.word	0x24005358

08001334 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001352:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <MX_TIM3_Init+0x94>)
 8001354:	4a1d      	ldr	r2, [pc, #116]	@ (80013cc <MX_TIM3_Init+0x98>)
 8001356:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <MX_TIM3_Init+0x94>)
 800135a:	22ef      	movs	r2, #239	@ 0xef
 800135c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <MX_TIM3_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001364:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <MX_TIM3_Init+0x94>)
 8001366:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800136a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <MX_TIM3_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <MX_TIM3_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001378:	4813      	ldr	r0, [pc, #76]	@ (80013c8 <MX_TIM3_Init+0x94>)
 800137a:	f007 fd10 	bl	8008d9e <HAL_TIM_Base_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001384:	f7ff fd58 	bl	8000e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	@ (80013c8 <MX_TIM3_Init+0x94>)
 8001396:	f007 ff49 	bl	800922c <HAL_TIM_ConfigClockSource>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013a0:	f7ff fd4a 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <MX_TIM3_Init+0x94>)
 80013b2:	f008 f999 	bl	80096e8 <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013bc:	f7ff fd3c 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	24000254 	.word	0x24000254
 80013cc:	40000400 	.word	0x40000400

080013d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10e      	bne.n	8001400 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_TIM_Base_MspInit+0x40>)
 80013e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013e8:	4a09      	ldr	r2, [pc, #36]	@ (8001410 <HAL_TIM_Base_MspInit+0x40>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <HAL_TIM_Base_MspInit+0x40>)
 80013f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40000400 	.word	0x40000400
 8001410:	58024400 	.word	0x58024400

08001414 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 800141a:	4a23      	ldr	r2, [pc, #140]	@ (80014a8 <MX_USART3_UART_Init+0x94>)
 800141c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001432:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001456:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800145c:	4811      	ldr	r0, [pc, #68]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 800145e:	f008 f9ef 	bl	8009840 <HAL_UART_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001468:	f7ff fce6 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146c:	2100      	movs	r1, #0
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 8001470:	f00a f87e 	bl	800b570 <HAL_UARTEx_SetTxFifoThreshold>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800147a:	f7ff fcdd 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147e:	2100      	movs	r1, #0
 8001480:	4808      	ldr	r0, [pc, #32]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 8001482:	f00a f8b3 	bl	800b5ec <HAL_UARTEx_SetRxFifoThreshold>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800148c:	f7ff fcd4 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_USART3_UART_Init+0x90>)
 8001492:	f00a f834 	bl	800b4fe <HAL_UARTEx_DisableFifoMode>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800149c:	f7ff fccc 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	240002a0 	.word	0x240002a0
 80014a8:	40004800 	.word	0x40004800

080014ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0ba      	sub	sp, #232	@ 0xe8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	22c0      	movs	r2, #192	@ 0xc0
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f011 ff3d 	bl	801334c <memset>
  if(uartHandle->Instance==USART3)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001584 <HAL_UART_MspInit+0xd8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d14e      	bne.n	800157a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014dc:	f04f 0202 	mov.w	r2, #2
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fc2c 	bl	8004d50 <HAL_RCCEx_PeriphCLKConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014fe:	f7ff fc9b 	bl	8000e38 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001502:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <HAL_UART_MspInit+0xdc>)
 8001504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001508:	4a1f      	ldr	r2, [pc, #124]	@ (8001588 <HAL_UART_MspInit+0xdc>)
 800150a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800150e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <HAL_UART_MspInit+0xdc>)
 8001514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <HAL_UART_MspInit+0xdc>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001526:	4a18      	ldr	r2, [pc, #96]	@ (8001588 <HAL_UART_MspInit+0xdc>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_UART_MspInit+0xdc>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800153e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001542:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001558:	2307      	movs	r3, #7
 800155a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001562:	4619      	mov	r1, r3
 8001564:	4809      	ldr	r0, [pc, #36]	@ (800158c <HAL_UART_MspInit+0xe0>)
 8001566:	f002 f97b 	bl	8003860 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2105      	movs	r1, #5
 800156e:	2027      	movs	r0, #39	@ 0x27
 8001570:	f001 fbea 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001574:	2027      	movs	r0, #39	@ 0x27
 8001576:	f001 fc01 	bl	8002d7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800157a:	bf00      	nop
 800157c:	37e8      	adds	r7, #232	@ 0xe8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40004800 	.word	0x40004800
 8001588:	58024400 	.word	0x58024400
 800158c:	58020c00 	.word	0x58020c00

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001590:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80015cc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001594:	f7ff f940 	bl	8000818 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001598:	f7ff f890 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800159c:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159e:	490d      	ldr	r1, [pc, #52]	@ (80015d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a0:	4a0d      	ldr	r2, [pc, #52]	@ (80015d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b4:	4c0a      	ldr	r4, [pc, #40]	@ (80015e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c2:	f011 fed1 	bl	8013368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c6:	f7ff fb4b 	bl	8000c60 <main>
  bx  lr
 80015ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015d4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80015d8:	08013fc4 	.word	0x08013fc4
  ldr r2, =_sbss
 80015dc:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80015e0:	24005358 	.word	0x24005358

080015e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC3_IRQHandler>
	...

080015e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ee:	2003      	movs	r0, #3
 80015f0:	f001 fb9f 	bl	8002d32 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015f4:	f003 f994 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <HAL_Init+0x68>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	4913      	ldr	r1, [pc, #76]	@ (8001654 <HAL_Init+0x6c>)
 8001606:	5ccb      	ldrb	r3, [r1, r3]
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001612:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <HAL_Init+0x68>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	4a0e      	ldr	r2, [pc, #56]	@ (8001654 <HAL_Init+0x6c>)
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	4a0b      	ldr	r2, [pc, #44]	@ (8001658 <HAL_Init+0x70>)
 800162a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800162c:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <HAL_Init+0x74>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001632:	200f      	movs	r0, #15
 8001634:	f7ff fdb8 	bl	80011a8 <HAL_InitTick>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e002      	b.n	8001648 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001642:	f7ff fd93 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	58024400 	.word	0x58024400
 8001654:	08013d94 	.word	0x08013d94
 8001658:	24000004 	.word	0x24000004
 800165c:	24000000 	.word	0x24000000

08001660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	@ (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	2400000c 	.word	0x2400000c
 8001684:	24000334 	.word	0x24000334

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	24000334 	.word	0x24000334

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff ffee 	bl	8001688 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_Delay+0x44>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffde 	bl	8001688 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2400000c 	.word	0x2400000c

080016e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_GetREVID+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0c1b      	lsrs	r3, r3, #16
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	5c001000 	.word	0x5c001000

08001700 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <LL_ADC_SetChannelPreselection+0x24>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	0e9b      	lsrs	r3, r3, #26
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	2201      	movs	r2, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	e015      	b.n	80017b8 <LL_ADC_SetChannelPreselection+0x50>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80017a2:	2320      	movs	r3, #32
 80017a4:	e003      	b.n	80017ae <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fab3 f383 	clz	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	2201      	movs	r2, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	69d2      	ldr	r2, [r2, #28]
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80017c2:	bf00      	nop
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b087      	sub	sp, #28
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3360      	adds	r3, #96	@ 0x60
 80017e0:	461a      	mov	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	430b      	orrs	r3, r1
 80017fc:	431a      	orrs	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001802:	bf00      	nop
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	431a      	orrs	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	611a      	str	r2, [r3, #16]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3360      	adds	r3, #96	@ 0x60
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	431a      	orrs	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	601a      	str	r2, [r3, #0]
  }
}
 800186a:	bf00      	nop
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001876:	b480      	push	{r7}
 8001878:	b087      	sub	sp, #28
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3330      	adds	r3, #48	@ 0x30
 8001886:	461a      	mov	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	4413      	add	r3, r2
 8001894:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	211f      	movs	r1, #31
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	401a      	ands	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	0e9b      	lsrs	r3, r3, #26
 80018ae:	f003 011f 	and.w	r1, r3, #31
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b087      	sub	sp, #28
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3314      	adds	r3, #20
 80018de:	461a      	mov	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	0e5b      	lsrs	r3, r3, #25
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	0d1b      	lsrs	r3, r3, #20
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	2107      	movs	r1, #7
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	0d1b      	lsrs	r3, r3, #20
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	431a      	orrs	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800193c:	43db      	mvns	r3, r3
 800193e:	401a      	ands	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0318 	and.w	r3, r3, #24
 8001946:	4908      	ldr	r1, [pc, #32]	@ (8001968 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001948:	40d9      	lsrs	r1, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	400b      	ands	r3, r1
 800194e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001952:	431a      	orrs	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	000fffff 	.word	0x000fffff

0800196c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 031f 	and.w	r3, r3, #31
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001996:	4013      	ands	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6093      	str	r3, [r2, #8]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	5fffffc0 	.word	0x5fffffc0

080019ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019c0:	d101      	bne.n	80019c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	6fffffc0 	.word	0x6fffffc0

080019fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a10:	d101      	bne.n	8001a16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <LL_ADC_Enable+0x24>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	7fffffc0 	.word	0x7fffffc0

08001a4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <LL_ADC_IsEnabled+0x18>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <LL_ADC_IsEnabled+0x1a>
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <LL_ADC_REG_StartConversion+0x24>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	f043 0204 	orr.w	r2, r3, #4
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	7fffffc0 	.word	0x7fffffc0

08001a9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d101      	bne.n	8001ab4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b089      	sub	sp, #36	@ 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e18f      	b.n	8001e22 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7fe ff15 	bl	8000940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff3f 	bl	80019ac <LL_ADC_IsDeepPowerDownEnabled>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff25 	bl	8001988 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff5a 	bl	80019fc <LL_ADC_IsInternalRegulatorEnabled>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d114      	bne.n	8001b78 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff3e 	bl	80019d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b58:	4b87      	ldr	r3, [pc, #540]	@ (8001d78 <HAL_ADC_Init+0x290>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	4a87      	ldr	r2, [pc, #540]	@ (8001d7c <HAL_ADC_Init+0x294>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	3301      	adds	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b6a:	e002      	b.n	8001b72 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f9      	bne.n	8001b6c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff3d 	bl	80019fc <LL_ADC_IsInternalRegulatorEnabled>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10d      	bne.n	8001ba4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8c:	f043 0210 	orr.w	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff77 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8001bae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 8129 	bne.w	8001e10 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f040 8125 	bne.w	8001e10 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001bce:	f043 0202 	orr.w	r2, r3, #2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff36 	bl	8001a4c <LL_ADC_IsEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d136      	bne.n	8001c54 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a65      	ldr	r2, [pc, #404]	@ (8001d80 <HAL_ADC_Init+0x298>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d004      	beq.n	8001bfa <HAL_ADC_Init+0x112>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a63      	ldr	r2, [pc, #396]	@ (8001d84 <HAL_ADC_Init+0x29c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10e      	bne.n	8001c18 <HAL_ADC_Init+0x130>
 8001bfa:	4861      	ldr	r0, [pc, #388]	@ (8001d80 <HAL_ADC_Init+0x298>)
 8001bfc:	f7ff ff26 	bl	8001a4c <LL_ADC_IsEnabled>
 8001c00:	4604      	mov	r4, r0
 8001c02:	4860      	ldr	r0, [pc, #384]	@ (8001d84 <HAL_ADC_Init+0x29c>)
 8001c04:	f7ff ff22 	bl	8001a4c <LL_ADC_IsEnabled>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4323      	orrs	r3, r4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e008      	b.n	8001c2a <HAL_ADC_Init+0x142>
 8001c18:	485b      	ldr	r0, [pc, #364]	@ (8001d88 <HAL_ADC_Init+0x2a0>)
 8001c1a:	f7ff ff17 	bl	8001a4c <LL_ADC_IsEnabled>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf0c      	ite	eq
 8001c24:	2301      	moveq	r3, #1
 8001c26:	2300      	movne	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d012      	beq.n	8001c54 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a53      	ldr	r2, [pc, #332]	@ (8001d80 <HAL_ADC_Init+0x298>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d004      	beq.n	8001c42 <HAL_ADC_Init+0x15a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a51      	ldr	r2, [pc, #324]	@ (8001d84 <HAL_ADC_Init+0x29c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x15e>
 8001c42:	4a52      	ldr	r2, [pc, #328]	@ (8001d8c <HAL_ADC_Init+0x2a4>)
 8001c44:	e000      	b.n	8001c48 <HAL_ADC_Init+0x160>
 8001c46:	4a52      	ldr	r2, [pc, #328]	@ (8001d90 <HAL_ADC_Init+0x2a8>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f7ff fd56 	bl	8001700 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c54:	f7ff fd48 	bl	80016e8 <HAL_GetREVID>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d914      	bls.n	8001c8c <HAL_ADC_Init+0x1a4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d110      	bne.n	8001c8c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7d5b      	ldrb	r3, [r3, #21]
 8001c6e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c74:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c7a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7f1b      	ldrb	r3, [r3, #28]
 8001c80:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c82:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c84:	f043 030c 	orr.w	r3, r3, #12
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	e00d      	b.n	8001ca8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7d5b      	ldrb	r3, [r3, #21]
 8001c90:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c96:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c9c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7f1b      	ldrb	r3, [r3, #28]
 8001ca2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7f1b      	ldrb	r3, [r3, #28]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	045b      	lsls	r3, r3, #17
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d94 <HAL_ADC_Init+0x2ac>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	69b9      	ldr	r1, [r7, #24]
 8001cea:	430b      	orrs	r3, r1
 8001cec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fed2 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8001cf8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fedf 	bl	8001ac2 <LL_ADC_INJ_IsConversionOngoing>
 8001d04:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d15f      	bne.n	8001dcc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d15c      	bne.n	8001dcc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7d1b      	ldrb	r3, [r3, #20]
 8001d16:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <HAL_ADC_Init+0x2b0>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	69b9      	ldr	r1, [r7, #24]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d130      	bne.n	8001da0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <HAL_ADC_Init+0x2b4>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d52:	3a01      	subs	r2, #1
 8001d54:	0411      	lsls	r1, r2, #16
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d66:	430a      	orrs	r2, r1
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	e01c      	b.n	8001db0 <HAL_ADC_Init+0x2c8>
 8001d76:	bf00      	nop
 8001d78:	24000000 	.word	0x24000000
 8001d7c:	053e2d63 	.word	0x053e2d63
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40022100 	.word	0x40022100
 8001d88:	58026000 	.word	0x58026000
 8001d8c:	40022300 	.word	0x40022300
 8001d90:	58026300 	.word	0x58026300
 8001d94:	fff0c003 	.word	0xfff0c003
 8001d98:	ffffbffc 	.word	0xffffbffc
 8001d9c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fcf6 	bl	80027b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10c      	bne.n	8001dee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f023 010f 	bic.w	r1, r3, #15
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	1e5a      	subs	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dec:	e007      	b.n	8001dfe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 020f 	bic.w	r2, r2, #15
 8001dfc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e02:	f023 0303 	bic.w	r3, r3, #3
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e0e:	e007      	b.n	8001e20 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e14:	f043 0210 	orr.w	r2, r3, #16
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	@ 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	bf00      	nop

08001e2c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a92      	ldr	r2, [pc, #584]	@ (8002084 <HAL_ADC_Start_IT+0x258>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_ADC_Start_IT+0x1c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a91      	ldr	r2, [pc, #580]	@ (8002088 <HAL_ADC_Start_IT+0x25c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_Start_IT+0x20>
 8001e48:	4b90      	ldr	r3, [pc, #576]	@ (800208c <HAL_ADC_Start_IT+0x260>)
 8001e4a:	e000      	b.n	8001e4e <HAL_ADC_Start_IT+0x22>
 8001e4c:	4b90      	ldr	r3, [pc, #576]	@ (8002090 <HAL_ADC_Start_IT+0x264>)
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fd8c 	bl	800196c <LL_ADC_GetMultimode>
 8001e54:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fe1e 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 8118 	bne.w	8002098 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Start_IT+0x4a>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e113      	b.n	800209e <HAL_ADC_Start_IT+0x272>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fc10 	bl	80026a4 <ADC_Enable>
 8001e84:	4603      	mov	r3, r0
 8001e86:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 80f5 	bne.w	800207a <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e94:	4b7f      	ldr	r3, [pc, #508]	@ (8002094 <HAL_ADC_Start_IT+0x268>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a78      	ldr	r2, [pc, #480]	@ (8002088 <HAL_ADC_Start_IT+0x25c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d002      	beq.n	8001eb0 <HAL_ADC_Start_IT+0x84>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e000      	b.n	8001eb2 <HAL_ADC_Start_IT+0x86>
 8001eb0:	4b74      	ldr	r3, [pc, #464]	@ (8002084 <HAL_ADC_Start_IT+0x258>)
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d002      	beq.n	8001ec0 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001edc:	f023 0206 	bic.w	r2, r3, #6
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ee4:	e002      	b.n	8001eec <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	221c      	movs	r2, #28
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 021c 	bic.w	r2, r2, #28
 8001f0a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d108      	bne.n	8001f26 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0208 	orr.w	r2, r2, #8
 8001f22:	605a      	str	r2, [r3, #4]
          break;
 8001f24:	e008      	b.n	8001f38 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0204 	orr.w	r2, r2, #4
 8001f34:	605a      	str	r2, [r3, #4]
          break;
 8001f36:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0210 	orr.w	r2, r2, #16
 8001f4e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a4c      	ldr	r2, [pc, #304]	@ (8002088 <HAL_ADC_Start_IT+0x25c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d002      	beq.n	8001f60 <HAL_ADC_Start_IT+0x134>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	e000      	b.n	8001f62 <HAL_ADC_Start_IT+0x136>
 8001f60:	4b48      	ldr	r3, [pc, #288]	@ (8002084 <HAL_ADC_Start_IT+0x258>)
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d008      	beq.n	8001f7c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d002      	beq.n	8001f7c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b09      	cmp	r3, #9
 8001f7a:	d13a      	bne.n	8001ff2 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d02d      	beq.n	8001fe6 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d110      	bne.n	8001fc4 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0220 	bic.w	r2, r2, #32
 8001fb0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fc0:	605a      	str	r2, [r3, #4]
              break;
 8001fc2:	e010      	b.n	8001fe6 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fd2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0220 	orr.w	r2, r2, #32
 8001fe2:	605a      	str	r2, [r3, #4]
              break;
 8001fe4:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fd42 	bl	8001a74 <LL_ADC_REG_StartConversion>
 8001ff0:	e054      	b.n	800209c <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a21      	ldr	r2, [pc, #132]	@ (8002088 <HAL_ADC_Start_IT+0x25c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d002      	beq.n	800200e <HAL_ADC_Start_IT+0x1e2>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	e000      	b.n	8002010 <HAL_ADC_Start_IT+0x1e4>
 800200e:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <HAL_ADC_Start_IT+0x258>)
 8002010:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d03e      	beq.n	800209c <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002022:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002026:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b08      	cmp	r3, #8
 8002034:	d110      	bne.n	8002058 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0220 	bic.w	r2, r2, #32
 8002044:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002054:	605a      	str	r2, [r3, #4]
              break;
 8002056:	e021      	b.n	800209c <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002066:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0220 	orr.w	r2, r2, #32
 8002076:	605a      	str	r2, [r3, #4]
              break;
 8002078:	e010      	b.n	800209c <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002082:	e00b      	b.n	800209c <HAL_ADC_Start_IT+0x270>
 8002084:	40022000 	.word	0x40022000
 8002088:	40022100 	.word	0x40022100
 800208c:	40022300 	.word	0x40022300
 8002090:	58026300 	.word	0x58026300
 8002094:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002098:	2302      	movs	r3, #2
 800209a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800209c:	7dfb      	ldrb	r3, [r7, #23]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop

080020a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b08d      	sub	sp, #52	@ 0x34
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a65      	ldr	r2, [pc, #404]	@ (8002274 <HAL_ADC_ConfigChannel+0x1b0>)
 80020de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x2a>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e2c7      	b.n	800267e <HAL_ADC_ConfigChannel+0x5ba>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fcce 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 82ac 	bne.w	8002660 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db2c      	blt.n	800216a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002118:	2b00      	cmp	r3, #0
 800211a:	d108      	bne.n	800212e <HAL_ADC_ConfigChannel+0x6a>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	2201      	movs	r2, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	e016      	b.n	800215c <HAL_ADC_ConfigChannel+0x98>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	613b      	str	r3, [r7, #16]
  return result;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002146:	2320      	movs	r3, #32
 8002148:	e003      	b.n	8002152 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2201      	movs	r2, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	69d1      	ldr	r1, [r2, #28]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	430b      	orrs	r3, r1
 8002168:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6859      	ldr	r1, [r3, #4]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	f7ff fb7d 	bl	8001876 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fc8b 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8002186:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fc98 	bl	8001ac2 <LL_ADC_INJ_IsConversionOngoing>
 8002192:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 80b8 	bne.w	800230c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 80b4 	bne.w	800230c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	461a      	mov	r2, r3
 80021b2:	f7ff fb8c 	bl	80018ce <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021b6:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <HAL_ADC_ConfigChannel+0x1b4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80021be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021c2:	d10b      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x118>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	e01d      	b.n	8002218 <HAL_ADC_ConfigChannel+0x154>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10b      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x13e>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	e00a      	b.n	8002218 <HAL_ADC_ConfigChannel+0x154>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b04      	cmp	r3, #4
 8002220:	d02c      	beq.n	800227c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f7ff facd 	bl	80017ce <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6919      	ldr	r1, [r3, #16]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	7e5b      	ldrb	r3, [r3, #25]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <HAL_ADC_ConfigChannel+0x186>
 8002244:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002248:	e000      	b.n	800224c <HAL_ADC_ConfigChannel+0x188>
 800224a:	2300      	movs	r3, #0
 800224c:	461a      	mov	r2, r3
 800224e:	f7ff faf7 	bl	8001840 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6919      	ldr	r1, [r3, #16]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	7e1b      	ldrb	r3, [r3, #24]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1a4>
 8002262:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002266:	e000      	b.n	800226a <HAL_ADC_ConfigChannel+0x1a6>
 8002268:	2300      	movs	r3, #0
 800226a:	461a      	mov	r2, r3
 800226c:	f7ff facf 	bl	800180e <LL_ADC_SetDataRightShift>
 8002270:	e04c      	b.n	800230c <HAL_ADC_ConfigChannel+0x248>
 8002272:	bf00      	nop
 8002274:	47ff0000 	.word	0x47ff0000
 8002278:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002282:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	069b      	lsls	r3, r3, #26
 800228c:	429a      	cmp	r2, r3
 800228e:	d107      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800229e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	069b      	lsls	r3, r3, #26
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d107      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022c2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	069b      	lsls	r3, r3, #26
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d107      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022e6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	069b      	lsls	r3, r3, #26
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d107      	bne.n	800230c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800230a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fb9b 	bl	8001a4c <LL_ADC_IsEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	f040 81aa 	bne.w	8002672 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6819      	ldr	r1, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	461a      	mov	r2, r3
 800232c:	f7ff fafa 	bl	8001924 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a87      	ldr	r2, [pc, #540]	@ (8002554 <HAL_ADC_ConfigChannel+0x490>)
 8002336:	4293      	cmp	r3, r2
 8002338:	f040 809a 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4984      	ldr	r1, [pc, #528]	@ (8002558 <HAL_ADC_ConfigChannel+0x494>)
 8002346:	428b      	cmp	r3, r1
 8002348:	d147      	bne.n	80023da <HAL_ADC_ConfigChannel+0x316>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4983      	ldr	r1, [pc, #524]	@ (800255c <HAL_ADC_ConfigChannel+0x498>)
 8002350:	428b      	cmp	r3, r1
 8002352:	d040      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x312>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4981      	ldr	r1, [pc, #516]	@ (8002560 <HAL_ADC_ConfigChannel+0x49c>)
 800235a:	428b      	cmp	r3, r1
 800235c:	d039      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x30e>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4980      	ldr	r1, [pc, #512]	@ (8002564 <HAL_ADC_ConfigChannel+0x4a0>)
 8002364:	428b      	cmp	r3, r1
 8002366:	d032      	beq.n	80023ce <HAL_ADC_ConfigChannel+0x30a>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	497e      	ldr	r1, [pc, #504]	@ (8002568 <HAL_ADC_ConfigChannel+0x4a4>)
 800236e:	428b      	cmp	r3, r1
 8002370:	d02b      	beq.n	80023ca <HAL_ADC_ConfigChannel+0x306>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	497d      	ldr	r1, [pc, #500]	@ (800256c <HAL_ADC_ConfigChannel+0x4a8>)
 8002378:	428b      	cmp	r3, r1
 800237a:	d024      	beq.n	80023c6 <HAL_ADC_ConfigChannel+0x302>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	497b      	ldr	r1, [pc, #492]	@ (8002570 <HAL_ADC_ConfigChannel+0x4ac>)
 8002382:	428b      	cmp	r3, r1
 8002384:	d01d      	beq.n	80023c2 <HAL_ADC_ConfigChannel+0x2fe>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	497a      	ldr	r1, [pc, #488]	@ (8002574 <HAL_ADC_ConfigChannel+0x4b0>)
 800238c:	428b      	cmp	r3, r1
 800238e:	d016      	beq.n	80023be <HAL_ADC_ConfigChannel+0x2fa>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4978      	ldr	r1, [pc, #480]	@ (8002578 <HAL_ADC_ConfigChannel+0x4b4>)
 8002396:	428b      	cmp	r3, r1
 8002398:	d00f      	beq.n	80023ba <HAL_ADC_ConfigChannel+0x2f6>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4977      	ldr	r1, [pc, #476]	@ (800257c <HAL_ADC_ConfigChannel+0x4b8>)
 80023a0:	428b      	cmp	r3, r1
 80023a2:	d008      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x2f2>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4975      	ldr	r1, [pc, #468]	@ (8002580 <HAL_ADC_ConfigChannel+0x4bc>)
 80023aa:	428b      	cmp	r3, r1
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x2ee>
 80023ae:	4b75      	ldr	r3, [pc, #468]	@ (8002584 <HAL_ADC_ConfigChannel+0x4c0>)
 80023b0:	e05a      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 80023b2:	2300      	movs	r3, #0
 80023b4:	e058      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 80023b6:	4b74      	ldr	r3, [pc, #464]	@ (8002588 <HAL_ADC_ConfigChannel+0x4c4>)
 80023b8:	e056      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 80023ba:	4b74      	ldr	r3, [pc, #464]	@ (800258c <HAL_ADC_ConfigChannel+0x4c8>)
 80023bc:	e054      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 80023be:	4b6e      	ldr	r3, [pc, #440]	@ (8002578 <HAL_ADC_ConfigChannel+0x4b4>)
 80023c0:	e052      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 80023c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002574 <HAL_ADC_ConfigChannel+0x4b0>)
 80023c4:	e050      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 80023c6:	4b72      	ldr	r3, [pc, #456]	@ (8002590 <HAL_ADC_ConfigChannel+0x4cc>)
 80023c8:	e04e      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 80023ca:	4b72      	ldr	r3, [pc, #456]	@ (8002594 <HAL_ADC_ConfigChannel+0x4d0>)
 80023cc:	e04c      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 80023ce:	4b72      	ldr	r3, [pc, #456]	@ (8002598 <HAL_ADC_ConfigChannel+0x4d4>)
 80023d0:	e04a      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 80023d2:	4b72      	ldr	r3, [pc, #456]	@ (800259c <HAL_ADC_ConfigChannel+0x4d8>)
 80023d4:	e048      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e046      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4970      	ldr	r1, [pc, #448]	@ (80025a0 <HAL_ADC_ConfigChannel+0x4dc>)
 80023e0:	428b      	cmp	r3, r1
 80023e2:	d140      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x3a2>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	495c      	ldr	r1, [pc, #368]	@ (800255c <HAL_ADC_ConfigChannel+0x498>)
 80023ea:	428b      	cmp	r3, r1
 80023ec:	d039      	beq.n	8002462 <HAL_ADC_ConfigChannel+0x39e>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	495b      	ldr	r1, [pc, #364]	@ (8002560 <HAL_ADC_ConfigChannel+0x49c>)
 80023f4:	428b      	cmp	r3, r1
 80023f6:	d032      	beq.n	800245e <HAL_ADC_ConfigChannel+0x39a>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4959      	ldr	r1, [pc, #356]	@ (8002564 <HAL_ADC_ConfigChannel+0x4a0>)
 80023fe:	428b      	cmp	r3, r1
 8002400:	d02b      	beq.n	800245a <HAL_ADC_ConfigChannel+0x396>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4958      	ldr	r1, [pc, #352]	@ (8002568 <HAL_ADC_ConfigChannel+0x4a4>)
 8002408:	428b      	cmp	r3, r1
 800240a:	d024      	beq.n	8002456 <HAL_ADC_ConfigChannel+0x392>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4956      	ldr	r1, [pc, #344]	@ (800256c <HAL_ADC_ConfigChannel+0x4a8>)
 8002412:	428b      	cmp	r3, r1
 8002414:	d01d      	beq.n	8002452 <HAL_ADC_ConfigChannel+0x38e>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4955      	ldr	r1, [pc, #340]	@ (8002570 <HAL_ADC_ConfigChannel+0x4ac>)
 800241c:	428b      	cmp	r3, r1
 800241e:	d016      	beq.n	800244e <HAL_ADC_ConfigChannel+0x38a>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4953      	ldr	r1, [pc, #332]	@ (8002574 <HAL_ADC_ConfigChannel+0x4b0>)
 8002426:	428b      	cmp	r3, r1
 8002428:	d00f      	beq.n	800244a <HAL_ADC_ConfigChannel+0x386>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4952      	ldr	r1, [pc, #328]	@ (8002578 <HAL_ADC_ConfigChannel+0x4b4>)
 8002430:	428b      	cmp	r3, r1
 8002432:	d008      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x382>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4951      	ldr	r1, [pc, #324]	@ (8002580 <HAL_ADC_ConfigChannel+0x4bc>)
 800243a:	428b      	cmp	r3, r1
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x37e>
 800243e:	4b51      	ldr	r3, [pc, #324]	@ (8002584 <HAL_ADC_ConfigChannel+0x4c0>)
 8002440:	e012      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 8002442:	2300      	movs	r3, #0
 8002444:	e010      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 8002446:	4b51      	ldr	r3, [pc, #324]	@ (800258c <HAL_ADC_ConfigChannel+0x4c8>)
 8002448:	e00e      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 800244a:	4b4b      	ldr	r3, [pc, #300]	@ (8002578 <HAL_ADC_ConfigChannel+0x4b4>)
 800244c:	e00c      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 800244e:	4b49      	ldr	r3, [pc, #292]	@ (8002574 <HAL_ADC_ConfigChannel+0x4b0>)
 8002450:	e00a      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 8002452:	4b4f      	ldr	r3, [pc, #316]	@ (8002590 <HAL_ADC_ConfigChannel+0x4cc>)
 8002454:	e008      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 8002456:	4b4f      	ldr	r3, [pc, #316]	@ (8002594 <HAL_ADC_ConfigChannel+0x4d0>)
 8002458:	e006      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 800245a:	4b4f      	ldr	r3, [pc, #316]	@ (8002598 <HAL_ADC_ConfigChannel+0x4d4>)
 800245c:	e004      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 800245e:	4b4f      	ldr	r3, [pc, #316]	@ (800259c <HAL_ADC_ConfigChannel+0x4d8>)
 8002460:	e002      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3a4>
 8002466:	2300      	movs	r3, #0
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f7ff f97c 	bl	8001768 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f280 80fc 	bge.w	8002672 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a36      	ldr	r2, [pc, #216]	@ (8002558 <HAL_ADC_ConfigChannel+0x494>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d004      	beq.n	800248e <HAL_ADC_ConfigChannel+0x3ca>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a45      	ldr	r2, [pc, #276]	@ (80025a0 <HAL_ADC_ConfigChannel+0x4dc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x3ce>
 800248e:	4b45      	ldr	r3, [pc, #276]	@ (80025a4 <HAL_ADC_ConfigChannel+0x4e0>)
 8002490:	e000      	b.n	8002494 <HAL_ADC_ConfigChannel+0x3d0>
 8002492:	4b45      	ldr	r3, [pc, #276]	@ (80025a8 <HAL_ADC_ConfigChannel+0x4e4>)
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f959 	bl	800174c <LL_ADC_GetCommonPathInternalCh>
 800249a:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002558 <HAL_ADC_ConfigChannel+0x494>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d004      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0x3ec>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a3d      	ldr	r2, [pc, #244]	@ (80025a0 <HAL_ADC_ConfigChannel+0x4dc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d10e      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x40a>
 80024b0:	4829      	ldr	r0, [pc, #164]	@ (8002558 <HAL_ADC_ConfigChannel+0x494>)
 80024b2:	f7ff facb 	bl	8001a4c <LL_ADC_IsEnabled>
 80024b6:	4604      	mov	r4, r0
 80024b8:	4839      	ldr	r0, [pc, #228]	@ (80025a0 <HAL_ADC_ConfigChannel+0x4dc>)
 80024ba:	f7ff fac7 	bl	8001a4c <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	4323      	orrs	r3, r4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	e008      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x41c>
 80024ce:	4837      	ldr	r0, [pc, #220]	@ (80025ac <HAL_ADC_ConfigChannel+0x4e8>)
 80024d0:	f7ff fabc 	bl	8001a4c <LL_ADC_IsEnabled>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf0c      	ite	eq
 80024da:	2301      	moveq	r3, #1
 80024dc:	2300      	movne	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80b3 	beq.w	800264c <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a31      	ldr	r2, [pc, #196]	@ (80025b0 <HAL_ADC_ConfigChannel+0x4ec>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d165      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x4f8>
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d160      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2b      	ldr	r2, [pc, #172]	@ (80025ac <HAL_ADC_ConfigChannel+0x4e8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	f040 80b6 	bne.w	8002672 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a13      	ldr	r2, [pc, #76]	@ (8002558 <HAL_ADC_ConfigChannel+0x494>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d004      	beq.n	800251a <HAL_ADC_ConfigChannel+0x456>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a22      	ldr	r2, [pc, #136]	@ (80025a0 <HAL_ADC_ConfigChannel+0x4dc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x45a>
 800251a:	4a22      	ldr	r2, [pc, #136]	@ (80025a4 <HAL_ADC_ConfigChannel+0x4e0>)
 800251c:	e000      	b.n	8002520 <HAL_ADC_ConfigChannel+0x45c>
 800251e:	4a22      	ldr	r2, [pc, #136]	@ (80025a8 <HAL_ADC_ConfigChannel+0x4e4>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f7ff f8fc 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800252e:	4b21      	ldr	r3, [pc, #132]	@ (80025b4 <HAL_ADC_ConfigChannel+0x4f0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	4a20      	ldr	r2, [pc, #128]	@ (80025b8 <HAL_ADC_ConfigChannel+0x4f4>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	099b      	lsrs	r3, r3, #6
 800253c:	3301      	adds	r3, #1
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002542:	e002      	b.n	800254a <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3b01      	subs	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f9      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002550:	e08f      	b.n	8002672 <HAL_ADC_ConfigChannel+0x5ae>
 8002552:	bf00      	nop
 8002554:	47ff0000 	.word	0x47ff0000
 8002558:	40022000 	.word	0x40022000
 800255c:	04300002 	.word	0x04300002
 8002560:	08600004 	.word	0x08600004
 8002564:	0c900008 	.word	0x0c900008
 8002568:	10c00010 	.word	0x10c00010
 800256c:	14f00020 	.word	0x14f00020
 8002570:	2a000400 	.word	0x2a000400
 8002574:	2e300800 	.word	0x2e300800
 8002578:	32601000 	.word	0x32601000
 800257c:	43210000 	.word	0x43210000
 8002580:	4b840000 	.word	0x4b840000
 8002584:	4fb80000 	.word	0x4fb80000
 8002588:	47520000 	.word	0x47520000
 800258c:	36902000 	.word	0x36902000
 8002590:	25b00200 	.word	0x25b00200
 8002594:	21800100 	.word	0x21800100
 8002598:	1d500080 	.word	0x1d500080
 800259c:	19200040 	.word	0x19200040
 80025a0:	40022100 	.word	0x40022100
 80025a4:	40022300 	.word	0x40022300
 80025a8:	58026300 	.word	0x58026300
 80025ac:	58026000 	.word	0x58026000
 80025b0:	cb840000 	.word	0xcb840000
 80025b4:	24000000 	.word	0x24000000
 80025b8:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a31      	ldr	r2, [pc, #196]	@ (8002688 <HAL_ADC_ConfigChannel+0x5c4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d11e      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x540>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d119      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a2d      	ldr	r2, [pc, #180]	@ (800268c <HAL_ADC_ConfigChannel+0x5c8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d14b      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a2c      	ldr	r2, [pc, #176]	@ (8002690 <HAL_ADC_ConfigChannel+0x5cc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x52a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002694 <HAL_ADC_ConfigChannel+0x5d0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x52e>
 80025ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002698 <HAL_ADC_ConfigChannel+0x5d4>)
 80025f0:	e000      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x530>
 80025f2:	4a2a      	ldr	r2, [pc, #168]	@ (800269c <HAL_ADC_ConfigChannel+0x5d8>)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025fa:	4619      	mov	r1, r3
 80025fc:	4610      	mov	r0, r2
 80025fe:	f7ff f892 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002602:	e036      	b.n	8002672 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a25      	ldr	r2, [pc, #148]	@ (80026a0 <HAL_ADC_ConfigChannel+0x5dc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d131      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x5ae>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d12c      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1b      	ldr	r2, [pc, #108]	@ (800268c <HAL_ADC_ConfigChannel+0x5c8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d127      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1a      	ldr	r2, [pc, #104]	@ (8002690 <HAL_ADC_ConfigChannel+0x5cc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x572>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a18      	ldr	r2, [pc, #96]	@ (8002694 <HAL_ADC_ConfigChannel+0x5d0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x576>
 8002636:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <HAL_ADC_ConfigChannel+0x5d4>)
 8002638:	e000      	b.n	800263c <HAL_ADC_ConfigChannel+0x578>
 800263a:	4a18      	ldr	r2, [pc, #96]	@ (800269c <HAL_ADC_ConfigChannel+0x5d8>)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f7ff f86e 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
 800264a:	e012      	b.n	8002672 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800265e:	e008      	b.n	8002672 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002664:	f043 0220 	orr.w	r2, r3, #32
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800267a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800267e:	4618      	mov	r0, r3
 8002680:	3734      	adds	r7, #52	@ 0x34
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	bf00      	nop
 8002688:	c7520000 	.word	0xc7520000
 800268c:	58026000 	.word	0x58026000
 8002690:	40022000 	.word	0x40022000
 8002694:	40022100 	.word	0x40022100
 8002698:	40022300 	.word	0x40022300
 800269c:	58026300 	.word	0x58026300
 80026a0:	cfb80000 	.word	0xcfb80000

080026a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff f9cb 	bl	8001a4c <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d16e      	bne.n	800279a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	4b38      	ldr	r3, [pc, #224]	@ (80027a4 <ADC_Enable+0x100>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e05a      	b.n	800279c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff f99a 	bl	8001a24 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026f0:	f7fe ffca 	bl	8001688 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2b      	ldr	r2, [pc, #172]	@ (80027a8 <ADC_Enable+0x104>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d004      	beq.n	800270a <ADC_Enable+0x66>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a29      	ldr	r2, [pc, #164]	@ (80027ac <ADC_Enable+0x108>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <ADC_Enable+0x6a>
 800270a:	4b29      	ldr	r3, [pc, #164]	@ (80027b0 <ADC_Enable+0x10c>)
 800270c:	e000      	b.n	8002710 <ADC_Enable+0x6c>
 800270e:	4b29      	ldr	r3, [pc, #164]	@ (80027b4 <ADC_Enable+0x110>)
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff f92b 	bl	800196c <LL_ADC_GetMultimode>
 8002716:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a23      	ldr	r2, [pc, #140]	@ (80027ac <ADC_Enable+0x108>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d002      	beq.n	8002728 <ADC_Enable+0x84>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e000      	b.n	800272a <ADC_Enable+0x86>
 8002728:	4b1f      	ldr	r3, [pc, #124]	@ (80027a8 <ADC_Enable+0x104>)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	4293      	cmp	r3, r2
 8002730:	d02c      	beq.n	800278c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d130      	bne.n	800279a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002738:	e028      	b.n	800278c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff f984 	bl	8001a4c <LL_ADC_IsEnabled>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff f968 	bl	8001a24 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002754:	f7fe ff98 	bl	8001688 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d914      	bls.n	800278c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d00d      	beq.n	800278c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002774:	f043 0210 	orr.w	r2, r3, #16
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e007      	b.n	800279c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d1cf      	bne.n	800273a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	8000003f 	.word	0x8000003f
 80027a8:	40022000 	.word	0x40022000
 80027ac:	40022100 	.word	0x40022100
 80027b0:	40022300 	.word	0x40022300
 80027b4:	58026300 	.word	0x58026300

080027b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a7a      	ldr	r2, [pc, #488]	@ (80029b0 <ADC_ConfigureBoostMode+0x1f8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d004      	beq.n	80027d4 <ADC_ConfigureBoostMode+0x1c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a79      	ldr	r2, [pc, #484]	@ (80029b4 <ADC_ConfigureBoostMode+0x1fc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d109      	bne.n	80027e8 <ADC_ConfigureBoostMode+0x30>
 80027d4:	4b78      	ldr	r3, [pc, #480]	@ (80029b8 <ADC_ConfigureBoostMode+0x200>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e008      	b.n	80027fa <ADC_ConfigureBoostMode+0x42>
 80027e8:	4b74      	ldr	r3, [pc, #464]	@ (80029bc <ADC_ConfigureBoostMode+0x204>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf14      	ite	ne
 80027f4:	2301      	movne	r3, #1
 80027f6:	2300      	moveq	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01c      	beq.n	8002838 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027fe:	f002 fa09 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8002802:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800280c:	d010      	beq.n	8002830 <ADC_ConfigureBoostMode+0x78>
 800280e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002812:	d873      	bhi.n	80028fc <ADC_ConfigureBoostMode+0x144>
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002818:	d002      	beq.n	8002820 <ADC_ConfigureBoostMode+0x68>
 800281a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800281e:	d16d      	bne.n	80028fc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	60fb      	str	r3, [r7, #12]
        break;
 800282e:	e068      	b.n	8002902 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	60fb      	str	r3, [r7, #12]
        break;
 8002836:	e064      	b.n	8002902 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002838:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	f003 fc90 	bl	8006164 <HAL_RCCEx_GetPeriphCLKFreq>
 8002844:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800284e:	d051      	beq.n	80028f4 <ADC_ConfigureBoostMode+0x13c>
 8002850:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002854:	d854      	bhi.n	8002900 <ADC_ConfigureBoostMode+0x148>
 8002856:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800285a:	d047      	beq.n	80028ec <ADC_ConfigureBoostMode+0x134>
 800285c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002860:	d84e      	bhi.n	8002900 <ADC_ConfigureBoostMode+0x148>
 8002862:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002866:	d03d      	beq.n	80028e4 <ADC_ConfigureBoostMode+0x12c>
 8002868:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800286c:	d848      	bhi.n	8002900 <ADC_ConfigureBoostMode+0x148>
 800286e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002872:	d033      	beq.n	80028dc <ADC_ConfigureBoostMode+0x124>
 8002874:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002878:	d842      	bhi.n	8002900 <ADC_ConfigureBoostMode+0x148>
 800287a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800287e:	d029      	beq.n	80028d4 <ADC_ConfigureBoostMode+0x11c>
 8002880:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002884:	d83c      	bhi.n	8002900 <ADC_ConfigureBoostMode+0x148>
 8002886:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800288a:	d01a      	beq.n	80028c2 <ADC_ConfigureBoostMode+0x10a>
 800288c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002890:	d836      	bhi.n	8002900 <ADC_ConfigureBoostMode+0x148>
 8002892:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002896:	d014      	beq.n	80028c2 <ADC_ConfigureBoostMode+0x10a>
 8002898:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800289c:	d830      	bhi.n	8002900 <ADC_ConfigureBoostMode+0x148>
 800289e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028a2:	d00e      	beq.n	80028c2 <ADC_ConfigureBoostMode+0x10a>
 80028a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028a8:	d82a      	bhi.n	8002900 <ADC_ConfigureBoostMode+0x148>
 80028aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028ae:	d008      	beq.n	80028c2 <ADC_ConfigureBoostMode+0x10a>
 80028b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028b4:	d824      	bhi.n	8002900 <ADC_ConfigureBoostMode+0x148>
 80028b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028ba:	d002      	beq.n	80028c2 <ADC_ConfigureBoostMode+0x10a>
 80028bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028c0:	d11e      	bne.n	8002900 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	0c9b      	lsrs	r3, r3, #18
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d0:	60fb      	str	r3, [r7, #12]
        break;
 80028d2:	e016      	b.n	8002902 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	60fb      	str	r3, [r7, #12]
        break;
 80028da:	e012      	b.n	8002902 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	60fb      	str	r3, [r7, #12]
        break;
 80028e2:	e00e      	b.n	8002902 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	60fb      	str	r3, [r7, #12]
        break;
 80028ea:	e00a      	b.n	8002902 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	09db      	lsrs	r3, r3, #7
 80028f0:	60fb      	str	r3, [r7, #12]
        break;
 80028f2:	e006      	b.n	8002902 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	60fb      	str	r3, [r7, #12]
        break;
 80028fa:	e002      	b.n	8002902 <ADC_ConfigureBoostMode+0x14a>
        break;
 80028fc:	bf00      	nop
 80028fe:	e000      	b.n	8002902 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002900:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002902:	f7fe fef1 	bl	80016e8 <HAL_GetREVID>
 8002906:	4603      	mov	r3, r0
 8002908:	f241 0203 	movw	r2, #4099	@ 0x1003
 800290c:	4293      	cmp	r3, r2
 800290e:	d815      	bhi.n	800293c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a2b      	ldr	r2, [pc, #172]	@ (80029c0 <ADC_ConfigureBoostMode+0x208>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d908      	bls.n	800292a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002926:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002928:	e03e      	b.n	80029a8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002938:	609a      	str	r2, [r3, #8]
}
 800293a:	e035      	b.n	80029a8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4a1f      	ldr	r2, [pc, #124]	@ (80029c4 <ADC_ConfigureBoostMode+0x20c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d808      	bhi.n	800295c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002958:	609a      	str	r2, [r3, #8]
}
 800295a:	e025      	b.n	80029a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a1a      	ldr	r2, [pc, #104]	@ (80029c8 <ADC_ConfigureBoostMode+0x210>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d80a      	bhi.n	800297a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002976:	609a      	str	r2, [r3, #8]
}
 8002978:	e016      	b.n	80029a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a13      	ldr	r2, [pc, #76]	@ (80029cc <ADC_ConfigureBoostMode+0x214>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d80a      	bhi.n	8002998 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002994:	609a      	str	r2, [r3, #8]
}
 8002996:	e007      	b.n	80029a8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40022000 	.word	0x40022000
 80029b4:	40022100 	.word	0x40022100
 80029b8:	40022300 	.word	0x40022300
 80029bc:	58026300 	.word	0x58026300
 80029c0:	01312d00 	.word	0x01312d00
 80029c4:	005f5e10 	.word	0x005f5e10
 80029c8:	00bebc20 	.word	0x00bebc20
 80029cc:	017d7840 	.word	0x017d7840

080029d0 <LL_ADC_IsEnabled>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <LL_ADC_IsEnabled+0x18>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <LL_ADC_IsEnabled+0x1a>
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d101      	bne.n	8002a0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b09f      	sub	sp, #124	@ 0x7c
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e0be      	b.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a5c      	ldr	r2, [pc, #368]	@ (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d102      	bne.n	8002a5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a54:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	e001      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e09d      	b.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ffb9 	bl	80029f6 <LL_ADC_REG_IsConversionOngoing>
 8002a84:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ffb3 	bl	80029f6 <LL_ADC_REG_IsConversionOngoing>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d17f      	bne.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d17c      	bne.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a47      	ldr	r2, [pc, #284]	@ (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a46      	ldr	r2, [pc, #280]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002ab0:	4b45      	ldr	r3, [pc, #276]	@ (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ab2:	e000      	b.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002ab4:	4b45      	ldr	r3, [pc, #276]	@ (8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d039      	beq.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ad0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a3a      	ldr	r2, [pc, #232]	@ (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d004      	beq.n	8002ae6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a38      	ldr	r2, [pc, #224]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10e      	bne.n	8002b04 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002ae6:	4836      	ldr	r0, [pc, #216]	@ (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ae8:	f7ff ff72 	bl	80029d0 <LL_ADC_IsEnabled>
 8002aec:	4604      	mov	r4, r0
 8002aee:	4835      	ldr	r0, [pc, #212]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002af0:	f7ff ff6e 	bl	80029d0 <LL_ADC_IsEnabled>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4323      	orrs	r3, r4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e008      	b.n	8002b16 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002b04:	4832      	ldr	r0, [pc, #200]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b06:	f7ff ff63 	bl	80029d0 <LL_ADC_IsEnabled>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d047      	beq.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	6811      	ldr	r1, [r2, #0]
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	6892      	ldr	r2, [r2, #8]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b30:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b32:	e03a      	b.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b3e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10e      	bne.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002b54:	481a      	ldr	r0, [pc, #104]	@ (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b56:	f7ff ff3b 	bl	80029d0 <LL_ADC_IsEnabled>
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	4819      	ldr	r0, [pc, #100]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b5e:	f7ff ff37 	bl	80029d0 <LL_ADC_IsEnabled>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4323      	orrs	r3, r4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	e008      	b.n	8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002b72:	4817      	ldr	r0, [pc, #92]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b74:	f7ff ff2c 	bl	80029d0 <LL_ADC_IsEnabled>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b92:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b94:	e009      	b.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002ba8:	e000      	b.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002baa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bb4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	377c      	adds	r7, #124	@ 0x7c
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd90      	pop	{r4, r7, pc}
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40022100 	.word	0x40022100
 8002bc8:	40022300 	.word	0x40022300
 8002bcc:	58026300 	.word	0x58026300
 8002bd0:	58026000 	.word	0x58026000
 8002bd4:	fffff0e0 	.word	0xfffff0e0

08002bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x40>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c00:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c06:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x40>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	60d3      	str	r3, [r2, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00
 8002c1c:	05fa0000 	.word	0x05fa0000

08002c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c24:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <__NVIC_GetPriorityGrouping+0x18>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 0307 	and.w	r3, r3, #7
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0b      	blt.n	8002c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4907      	ldr	r1, [pc, #28]	@ (8002c74 <__NVIC_EnableIRQ+0x38>)
 8002c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db0a      	blt.n	8002ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	490c      	ldr	r1, [pc, #48]	@ (8002cc4 <__NVIC_SetPriority+0x4c>)
 8002c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca0:	e00a      	b.n	8002cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4908      	ldr	r1, [pc, #32]	@ (8002cc8 <__NVIC_SetPriority+0x50>)
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	761a      	strb	r2, [r3, #24]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	@ 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f1c3 0307 	rsb	r3, r3, #7
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	bf28      	it	cs
 8002cea:	2304      	movcs	r3, #4
 8002cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d902      	bls.n	8002cfc <NVIC_EncodePriority+0x30>
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3b03      	subs	r3, #3
 8002cfa:	e000      	b.n	8002cfe <NVIC_EncodePriority+0x32>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	401a      	ands	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	43d9      	mvns	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	4313      	orrs	r3, r2
         );
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3724      	adds	r7, #36	@ 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ff4c 	bl	8002bd8 <__NVIC_SetPriorityGrouping>
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d56:	f7ff ff63 	bl	8002c20 <__NVIC_GetPriorityGrouping>
 8002d5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	6978      	ldr	r0, [r7, #20]
 8002d62:	f7ff ffb3 	bl	8002ccc <NVIC_EncodePriority>
 8002d66:	4602      	mov	r2, r0
 8002d68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff82 	bl	8002c78 <__NVIC_SetPriority>
}
 8002d74:	bf00      	nop
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff56 	bl	8002c3c <__NVIC_EnableIRQ>
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002da0:	f7fe fc72 	bl	8001688 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e2dc      	b.n	800336a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d008      	beq.n	8002dce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2280      	movs	r2, #128	@ 0x80
 8002dc0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e2cd      	b.n	800336a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a76      	ldr	r2, [pc, #472]	@ (8002fac <HAL_DMA_Abort+0x214>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d04a      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a74      	ldr	r2, [pc, #464]	@ (8002fb0 <HAL_DMA_Abort+0x218>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d045      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a73      	ldr	r2, [pc, #460]	@ (8002fb4 <HAL_DMA_Abort+0x21c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d040      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a71      	ldr	r2, [pc, #452]	@ (8002fb8 <HAL_DMA_Abort+0x220>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d03b      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a70      	ldr	r2, [pc, #448]	@ (8002fbc <HAL_DMA_Abort+0x224>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d036      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc0 <HAL_DMA_Abort+0x228>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d031      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a6d      	ldr	r2, [pc, #436]	@ (8002fc4 <HAL_DMA_Abort+0x22c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d02c      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6b      	ldr	r2, [pc, #428]	@ (8002fc8 <HAL_DMA_Abort+0x230>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d027      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6a      	ldr	r2, [pc, #424]	@ (8002fcc <HAL_DMA_Abort+0x234>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d022      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a68      	ldr	r2, [pc, #416]	@ (8002fd0 <HAL_DMA_Abort+0x238>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01d      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a67      	ldr	r2, [pc, #412]	@ (8002fd4 <HAL_DMA_Abort+0x23c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d018      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a65      	ldr	r2, [pc, #404]	@ (8002fd8 <HAL_DMA_Abort+0x240>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a64      	ldr	r2, [pc, #400]	@ (8002fdc <HAL_DMA_Abort+0x244>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a62      	ldr	r2, [pc, #392]	@ (8002fe0 <HAL_DMA_Abort+0x248>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a61      	ldr	r2, [pc, #388]	@ (8002fe4 <HAL_DMA_Abort+0x24c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_DMA_Abort+0xd6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a5f      	ldr	r2, [pc, #380]	@ (8002fe8 <HAL_DMA_Abort+0x250>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_DMA_Abort+0xda>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_DMA_Abort+0xdc>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d013      	beq.n	8002ea0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 021e 	bic.w	r2, r2, #30
 8002e86:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e96:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	e00a      	b.n	8002eb6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 020e 	bic.w	r2, r2, #14
 8002eae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a3c      	ldr	r2, [pc, #240]	@ (8002fac <HAL_DMA_Abort+0x214>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d072      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8002fb0 <HAL_DMA_Abort+0x218>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d06d      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a39      	ldr	r2, [pc, #228]	@ (8002fb4 <HAL_DMA_Abort+0x21c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d068      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a37      	ldr	r2, [pc, #220]	@ (8002fb8 <HAL_DMA_Abort+0x220>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d063      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a36      	ldr	r2, [pc, #216]	@ (8002fbc <HAL_DMA_Abort+0x224>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d05e      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a34      	ldr	r2, [pc, #208]	@ (8002fc0 <HAL_DMA_Abort+0x228>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d059      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a33      	ldr	r2, [pc, #204]	@ (8002fc4 <HAL_DMA_Abort+0x22c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d054      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a31      	ldr	r2, [pc, #196]	@ (8002fc8 <HAL_DMA_Abort+0x230>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d04f      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a30      	ldr	r2, [pc, #192]	@ (8002fcc <HAL_DMA_Abort+0x234>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d04a      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd0 <HAL_DMA_Abort+0x238>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d045      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd4 <HAL_DMA_Abort+0x23c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d040      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd8 <HAL_DMA_Abort+0x240>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d03b      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2a      	ldr	r2, [pc, #168]	@ (8002fdc <HAL_DMA_Abort+0x244>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d036      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a28      	ldr	r2, [pc, #160]	@ (8002fe0 <HAL_DMA_Abort+0x248>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d031      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a27      	ldr	r2, [pc, #156]	@ (8002fe4 <HAL_DMA_Abort+0x24c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d02c      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a25      	ldr	r2, [pc, #148]	@ (8002fe8 <HAL_DMA_Abort+0x250>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d027      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a24      	ldr	r2, [pc, #144]	@ (8002fec <HAL_DMA_Abort+0x254>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a22      	ldr	r2, [pc, #136]	@ (8002ff0 <HAL_DMA_Abort+0x258>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01d      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a21      	ldr	r2, [pc, #132]	@ (8002ff4 <HAL_DMA_Abort+0x25c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d018      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <HAL_DMA_Abort+0x260>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1e      	ldr	r2, [pc, #120]	@ (8002ffc <HAL_DMA_Abort+0x264>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <HAL_DMA_Abort+0x268>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1b      	ldr	r2, [pc, #108]	@ (8003004 <HAL_DMA_Abort+0x26c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_DMA_Abort+0x20e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	@ (8003008 <HAL_DMA_Abort+0x270>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d132      	bne.n	800300c <HAL_DMA_Abort+0x274>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e031      	b.n	800300e <HAL_DMA_Abort+0x276>
 8002faa:	bf00      	nop
 8002fac:	40020010 	.word	0x40020010
 8002fb0:	40020028 	.word	0x40020028
 8002fb4:	40020040 	.word	0x40020040
 8002fb8:	40020058 	.word	0x40020058
 8002fbc:	40020070 	.word	0x40020070
 8002fc0:	40020088 	.word	0x40020088
 8002fc4:	400200a0 	.word	0x400200a0
 8002fc8:	400200b8 	.word	0x400200b8
 8002fcc:	40020410 	.word	0x40020410
 8002fd0:	40020428 	.word	0x40020428
 8002fd4:	40020440 	.word	0x40020440
 8002fd8:	40020458 	.word	0x40020458
 8002fdc:	40020470 	.word	0x40020470
 8002fe0:	40020488 	.word	0x40020488
 8002fe4:	400204a0 	.word	0x400204a0
 8002fe8:	400204b8 	.word	0x400204b8
 8002fec:	58025408 	.word	0x58025408
 8002ff0:	5802541c 	.word	0x5802541c
 8002ff4:	58025430 	.word	0x58025430
 8002ff8:	58025444 	.word	0x58025444
 8002ffc:	58025458 	.word	0x58025458
 8003000:	5802546c 	.word	0x5802546c
 8003004:	58025480 	.word	0x58025480
 8003008:	58025494 	.word	0x58025494
 800300c:	2300      	movs	r3, #0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003020:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a6d      	ldr	r2, [pc, #436]	@ (80031dc <HAL_DMA_Abort+0x444>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d04a      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a6b      	ldr	r2, [pc, #428]	@ (80031e0 <HAL_DMA_Abort+0x448>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d045      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6a      	ldr	r2, [pc, #424]	@ (80031e4 <HAL_DMA_Abort+0x44c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d040      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a68      	ldr	r2, [pc, #416]	@ (80031e8 <HAL_DMA_Abort+0x450>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d03b      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a67      	ldr	r2, [pc, #412]	@ (80031ec <HAL_DMA_Abort+0x454>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d036      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a65      	ldr	r2, [pc, #404]	@ (80031f0 <HAL_DMA_Abort+0x458>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d031      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a64      	ldr	r2, [pc, #400]	@ (80031f4 <HAL_DMA_Abort+0x45c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d02c      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a62      	ldr	r2, [pc, #392]	@ (80031f8 <HAL_DMA_Abort+0x460>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d027      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a61      	ldr	r2, [pc, #388]	@ (80031fc <HAL_DMA_Abort+0x464>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a5f      	ldr	r2, [pc, #380]	@ (8003200 <HAL_DMA_Abort+0x468>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01d      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a5e      	ldr	r2, [pc, #376]	@ (8003204 <HAL_DMA_Abort+0x46c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a5c      	ldr	r2, [pc, #368]	@ (8003208 <HAL_DMA_Abort+0x470>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a5b      	ldr	r2, [pc, #364]	@ (800320c <HAL_DMA_Abort+0x474>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a59      	ldr	r2, [pc, #356]	@ (8003210 <HAL_DMA_Abort+0x478>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a58      	ldr	r2, [pc, #352]	@ (8003214 <HAL_DMA_Abort+0x47c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_DMA_Abort+0x32a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a56      	ldr	r2, [pc, #344]	@ (8003218 <HAL_DMA_Abort+0x480>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d108      	bne.n	80030d4 <HAL_DMA_Abort+0x33c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	e007      	b.n	80030e4 <HAL_DMA_Abort+0x34c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030e4:	e013      	b.n	800310e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030e6:	f7fe facf 	bl	8001688 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b05      	cmp	r3, #5
 80030f2:	d90c      	bls.n	800310e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2203      	movs	r2, #3
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e12d      	b.n	800336a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e5      	bne.n	80030e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2f      	ldr	r2, [pc, #188]	@ (80031dc <HAL_DMA_Abort+0x444>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d04a      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2d      	ldr	r2, [pc, #180]	@ (80031e0 <HAL_DMA_Abort+0x448>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d045      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2c      	ldr	r2, [pc, #176]	@ (80031e4 <HAL_DMA_Abort+0x44c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d040      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2a      	ldr	r2, [pc, #168]	@ (80031e8 <HAL_DMA_Abort+0x450>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d03b      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a29      	ldr	r2, [pc, #164]	@ (80031ec <HAL_DMA_Abort+0x454>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d036      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a27      	ldr	r2, [pc, #156]	@ (80031f0 <HAL_DMA_Abort+0x458>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d031      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a26      	ldr	r2, [pc, #152]	@ (80031f4 <HAL_DMA_Abort+0x45c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d02c      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a24      	ldr	r2, [pc, #144]	@ (80031f8 <HAL_DMA_Abort+0x460>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d027      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a23      	ldr	r2, [pc, #140]	@ (80031fc <HAL_DMA_Abort+0x464>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d022      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a21      	ldr	r2, [pc, #132]	@ (8003200 <HAL_DMA_Abort+0x468>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01d      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a20      	ldr	r2, [pc, #128]	@ (8003204 <HAL_DMA_Abort+0x46c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d018      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1e      	ldr	r2, [pc, #120]	@ (8003208 <HAL_DMA_Abort+0x470>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1d      	ldr	r2, [pc, #116]	@ (800320c <HAL_DMA_Abort+0x474>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00e      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003210 <HAL_DMA_Abort+0x478>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d009      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003214 <HAL_DMA_Abort+0x47c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_DMA_Abort+0x422>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a18      	ldr	r2, [pc, #96]	@ (8003218 <HAL_DMA_Abort+0x480>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_DMA_Abort+0x426>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_DMA_Abort+0x428>
 80031be:	2300      	movs	r3, #0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02b      	beq.n	800321c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	223f      	movs	r2, #63	@ 0x3f
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	609a      	str	r2, [r3, #8]
 80031da:	e02a      	b.n	8003232 <HAL_DMA_Abort+0x49a>
 80031dc:	40020010 	.word	0x40020010
 80031e0:	40020028 	.word	0x40020028
 80031e4:	40020040 	.word	0x40020040
 80031e8:	40020058 	.word	0x40020058
 80031ec:	40020070 	.word	0x40020070
 80031f0:	40020088 	.word	0x40020088
 80031f4:	400200a0 	.word	0x400200a0
 80031f8:	400200b8 	.word	0x400200b8
 80031fc:	40020410 	.word	0x40020410
 8003200:	40020428 	.word	0x40020428
 8003204:	40020440 	.word	0x40020440
 8003208:	40020458 	.word	0x40020458
 800320c:	40020470 	.word	0x40020470
 8003210:	40020488 	.word	0x40020488
 8003214:	400204a0 	.word	0x400204a0
 8003218:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2201      	movs	r2, #1
 800322c:	409a      	lsls	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a4f      	ldr	r2, [pc, #316]	@ (8003374 <HAL_DMA_Abort+0x5dc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d072      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a4d      	ldr	r2, [pc, #308]	@ (8003378 <HAL_DMA_Abort+0x5e0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d06d      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a4c      	ldr	r2, [pc, #304]	@ (800337c <HAL_DMA_Abort+0x5e4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d068      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a4a      	ldr	r2, [pc, #296]	@ (8003380 <HAL_DMA_Abort+0x5e8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d063      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a49      	ldr	r2, [pc, #292]	@ (8003384 <HAL_DMA_Abort+0x5ec>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d05e      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a47      	ldr	r2, [pc, #284]	@ (8003388 <HAL_DMA_Abort+0x5f0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d059      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a46      	ldr	r2, [pc, #280]	@ (800338c <HAL_DMA_Abort+0x5f4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d054      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a44      	ldr	r2, [pc, #272]	@ (8003390 <HAL_DMA_Abort+0x5f8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d04f      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a43      	ldr	r2, [pc, #268]	@ (8003394 <HAL_DMA_Abort+0x5fc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d04a      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a41      	ldr	r2, [pc, #260]	@ (8003398 <HAL_DMA_Abort+0x600>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d045      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a40      	ldr	r2, [pc, #256]	@ (800339c <HAL_DMA_Abort+0x604>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d040      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a3e      	ldr	r2, [pc, #248]	@ (80033a0 <HAL_DMA_Abort+0x608>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d03b      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a3d      	ldr	r2, [pc, #244]	@ (80033a4 <HAL_DMA_Abort+0x60c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d036      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a3b      	ldr	r2, [pc, #236]	@ (80033a8 <HAL_DMA_Abort+0x610>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3a      	ldr	r2, [pc, #232]	@ (80033ac <HAL_DMA_Abort+0x614>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d02c      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a38      	ldr	r2, [pc, #224]	@ (80033b0 <HAL_DMA_Abort+0x618>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d027      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a37      	ldr	r2, [pc, #220]	@ (80033b4 <HAL_DMA_Abort+0x61c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d022      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a35      	ldr	r2, [pc, #212]	@ (80033b8 <HAL_DMA_Abort+0x620>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01d      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a34      	ldr	r2, [pc, #208]	@ (80033bc <HAL_DMA_Abort+0x624>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d018      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a32      	ldr	r2, [pc, #200]	@ (80033c0 <HAL_DMA_Abort+0x628>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a31      	ldr	r2, [pc, #196]	@ (80033c4 <HAL_DMA_Abort+0x62c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00e      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a2f      	ldr	r2, [pc, #188]	@ (80033c8 <HAL_DMA_Abort+0x630>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d009      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2e      	ldr	r2, [pc, #184]	@ (80033cc <HAL_DMA_Abort+0x634>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d004      	beq.n	8003322 <HAL_DMA_Abort+0x58a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2c      	ldr	r2, [pc, #176]	@ (80033d0 <HAL_DMA_Abort+0x638>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_DMA_Abort+0x58e>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_DMA_Abort+0x590>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d015      	beq.n	8003358 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003334:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00c      	beq.n	8003358 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003348:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800334c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003356:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40020010 	.word	0x40020010
 8003378:	40020028 	.word	0x40020028
 800337c:	40020040 	.word	0x40020040
 8003380:	40020058 	.word	0x40020058
 8003384:	40020070 	.word	0x40020070
 8003388:	40020088 	.word	0x40020088
 800338c:	400200a0 	.word	0x400200a0
 8003390:	400200b8 	.word	0x400200b8
 8003394:	40020410 	.word	0x40020410
 8003398:	40020428 	.word	0x40020428
 800339c:	40020440 	.word	0x40020440
 80033a0:	40020458 	.word	0x40020458
 80033a4:	40020470 	.word	0x40020470
 80033a8:	40020488 	.word	0x40020488
 80033ac:	400204a0 	.word	0x400204a0
 80033b0:	400204b8 	.word	0x400204b8
 80033b4:	58025408 	.word	0x58025408
 80033b8:	5802541c 	.word	0x5802541c
 80033bc:	58025430 	.word	0x58025430
 80033c0:	58025444 	.word	0x58025444
 80033c4:	58025458 	.word	0x58025458
 80033c8:	5802546c 	.word	0x5802546c
 80033cc:	58025480 	.word	0x58025480
 80033d0:	58025494 	.word	0x58025494

080033d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e237      	b.n	8003856 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d004      	beq.n	80033fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2280      	movs	r2, #128	@ 0x80
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e22c      	b.n	8003856 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a5c      	ldr	r2, [pc, #368]	@ (8003574 <HAL_DMA_Abort_IT+0x1a0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d04a      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a5b      	ldr	r2, [pc, #364]	@ (8003578 <HAL_DMA_Abort_IT+0x1a4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d045      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a59      	ldr	r2, [pc, #356]	@ (800357c <HAL_DMA_Abort_IT+0x1a8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d040      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a58      	ldr	r2, [pc, #352]	@ (8003580 <HAL_DMA_Abort_IT+0x1ac>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d03b      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a56      	ldr	r2, [pc, #344]	@ (8003584 <HAL_DMA_Abort_IT+0x1b0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d036      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a55      	ldr	r2, [pc, #340]	@ (8003588 <HAL_DMA_Abort_IT+0x1b4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d031      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a53      	ldr	r2, [pc, #332]	@ (800358c <HAL_DMA_Abort_IT+0x1b8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d02c      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a52      	ldr	r2, [pc, #328]	@ (8003590 <HAL_DMA_Abort_IT+0x1bc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d027      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a50      	ldr	r2, [pc, #320]	@ (8003594 <HAL_DMA_Abort_IT+0x1c0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a4f      	ldr	r2, [pc, #316]	@ (8003598 <HAL_DMA_Abort_IT+0x1c4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a4d      	ldr	r2, [pc, #308]	@ (800359c <HAL_DMA_Abort_IT+0x1c8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d018      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a4c      	ldr	r2, [pc, #304]	@ (80035a0 <HAL_DMA_Abort_IT+0x1cc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a4a      	ldr	r2, [pc, #296]	@ (80035a4 <HAL_DMA_Abort_IT+0x1d0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a49      	ldr	r2, [pc, #292]	@ (80035a8 <HAL_DMA_Abort_IT+0x1d4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a47      	ldr	r2, [pc, #284]	@ (80035ac <HAL_DMA_Abort_IT+0x1d8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_DMA_Abort_IT+0xc8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a46      	ldr	r2, [pc, #280]	@ (80035b0 <HAL_DMA_Abort_IT+0x1dc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_DMA_Abort_IT+0xcc>
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <HAL_DMA_Abort_IT+0xce>
 80034a0:	2300      	movs	r3, #0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8086 	beq.w	80035b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2204      	movs	r2, #4
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003574 <HAL_DMA_Abort_IT+0x1a0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d04a      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2e      	ldr	r2, [pc, #184]	@ (8003578 <HAL_DMA_Abort_IT+0x1a4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d045      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2c      	ldr	r2, [pc, #176]	@ (800357c <HAL_DMA_Abort_IT+0x1a8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d040      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003580 <HAL_DMA_Abort_IT+0x1ac>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d03b      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a29      	ldr	r2, [pc, #164]	@ (8003584 <HAL_DMA_Abort_IT+0x1b0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d036      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a28      	ldr	r2, [pc, #160]	@ (8003588 <HAL_DMA_Abort_IT+0x1b4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d031      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a26      	ldr	r2, [pc, #152]	@ (800358c <HAL_DMA_Abort_IT+0x1b8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d02c      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a25      	ldr	r2, [pc, #148]	@ (8003590 <HAL_DMA_Abort_IT+0x1bc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d027      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	@ (8003594 <HAL_DMA_Abort_IT+0x1c0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d022      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a22      	ldr	r2, [pc, #136]	@ (8003598 <HAL_DMA_Abort_IT+0x1c4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d01d      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a20      	ldr	r2, [pc, #128]	@ (800359c <HAL_DMA_Abort_IT+0x1c8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d018      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1f      	ldr	r2, [pc, #124]	@ (80035a0 <HAL_DMA_Abort_IT+0x1cc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d013      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1d      	ldr	r2, [pc, #116]	@ (80035a4 <HAL_DMA_Abort_IT+0x1d0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1c      	ldr	r2, [pc, #112]	@ (80035a8 <HAL_DMA_Abort_IT+0x1d4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1a      	ldr	r2, [pc, #104]	@ (80035ac <HAL_DMA_Abort_IT+0x1d8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_DMA_Abort_IT+0x17c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a19      	ldr	r2, [pc, #100]	@ (80035b0 <HAL_DMA_Abort_IT+0x1dc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d108      	bne.n	8003562 <HAL_DMA_Abort_IT+0x18e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e178      	b.n	8003854 <HAL_DMA_Abort_IT+0x480>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e16f      	b.n	8003854 <HAL_DMA_Abort_IT+0x480>
 8003574:	40020010 	.word	0x40020010
 8003578:	40020028 	.word	0x40020028
 800357c:	40020040 	.word	0x40020040
 8003580:	40020058 	.word	0x40020058
 8003584:	40020070 	.word	0x40020070
 8003588:	40020088 	.word	0x40020088
 800358c:	400200a0 	.word	0x400200a0
 8003590:	400200b8 	.word	0x400200b8
 8003594:	40020410 	.word	0x40020410
 8003598:	40020428 	.word	0x40020428
 800359c:	40020440 	.word	0x40020440
 80035a0:	40020458 	.word	0x40020458
 80035a4:	40020470 	.word	0x40020470
 80035a8:	40020488 	.word	0x40020488
 80035ac:	400204a0 	.word	0x400204a0
 80035b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 020e 	bic.w	r2, r2, #14
 80035c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a6c      	ldr	r2, [pc, #432]	@ (800377c <HAL_DMA_Abort_IT+0x3a8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d04a      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a6b      	ldr	r2, [pc, #428]	@ (8003780 <HAL_DMA_Abort_IT+0x3ac>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d045      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a69      	ldr	r2, [pc, #420]	@ (8003784 <HAL_DMA_Abort_IT+0x3b0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d040      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a68      	ldr	r2, [pc, #416]	@ (8003788 <HAL_DMA_Abort_IT+0x3b4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d03b      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a66      	ldr	r2, [pc, #408]	@ (800378c <HAL_DMA_Abort_IT+0x3b8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d036      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a65      	ldr	r2, [pc, #404]	@ (8003790 <HAL_DMA_Abort_IT+0x3bc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d031      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a63      	ldr	r2, [pc, #396]	@ (8003794 <HAL_DMA_Abort_IT+0x3c0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02c      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a62      	ldr	r2, [pc, #392]	@ (8003798 <HAL_DMA_Abort_IT+0x3c4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d027      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a60      	ldr	r2, [pc, #384]	@ (800379c <HAL_DMA_Abort_IT+0x3c8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d022      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a5f      	ldr	r2, [pc, #380]	@ (80037a0 <HAL_DMA_Abort_IT+0x3cc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d01d      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a5d      	ldr	r2, [pc, #372]	@ (80037a4 <HAL_DMA_Abort_IT+0x3d0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a5c      	ldr	r2, [pc, #368]	@ (80037a8 <HAL_DMA_Abort_IT+0x3d4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d013      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a5a      	ldr	r2, [pc, #360]	@ (80037ac <HAL_DMA_Abort_IT+0x3d8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a59      	ldr	r2, [pc, #356]	@ (80037b0 <HAL_DMA_Abort_IT+0x3dc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a57      	ldr	r2, [pc, #348]	@ (80037b4 <HAL_DMA_Abort_IT+0x3e0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_DMA_Abort_IT+0x290>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a56      	ldr	r2, [pc, #344]	@ (80037b8 <HAL_DMA_Abort_IT+0x3e4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d108      	bne.n	8003676 <HAL_DMA_Abort_IT+0x2a2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e007      	b.n	8003686 <HAL_DMA_Abort_IT+0x2b2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a3c      	ldr	r2, [pc, #240]	@ (800377c <HAL_DMA_Abort_IT+0x3a8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d072      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a3a      	ldr	r2, [pc, #232]	@ (8003780 <HAL_DMA_Abort_IT+0x3ac>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d06d      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a39      	ldr	r2, [pc, #228]	@ (8003784 <HAL_DMA_Abort_IT+0x3b0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d068      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a37      	ldr	r2, [pc, #220]	@ (8003788 <HAL_DMA_Abort_IT+0x3b4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d063      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a36      	ldr	r2, [pc, #216]	@ (800378c <HAL_DMA_Abort_IT+0x3b8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d05e      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a34      	ldr	r2, [pc, #208]	@ (8003790 <HAL_DMA_Abort_IT+0x3bc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d059      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a33      	ldr	r2, [pc, #204]	@ (8003794 <HAL_DMA_Abort_IT+0x3c0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d054      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a31      	ldr	r2, [pc, #196]	@ (8003798 <HAL_DMA_Abort_IT+0x3c4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d04f      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a30      	ldr	r2, [pc, #192]	@ (800379c <HAL_DMA_Abort_IT+0x3c8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d04a      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a2e      	ldr	r2, [pc, #184]	@ (80037a0 <HAL_DMA_Abort_IT+0x3cc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d045      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a2d      	ldr	r2, [pc, #180]	@ (80037a4 <HAL_DMA_Abort_IT+0x3d0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d040      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a2b      	ldr	r2, [pc, #172]	@ (80037a8 <HAL_DMA_Abort_IT+0x3d4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d03b      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2a      	ldr	r2, [pc, #168]	@ (80037ac <HAL_DMA_Abort_IT+0x3d8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d036      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a28      	ldr	r2, [pc, #160]	@ (80037b0 <HAL_DMA_Abort_IT+0x3dc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d031      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a27      	ldr	r2, [pc, #156]	@ (80037b4 <HAL_DMA_Abort_IT+0x3e0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d02c      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a25      	ldr	r2, [pc, #148]	@ (80037b8 <HAL_DMA_Abort_IT+0x3e4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d027      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a24      	ldr	r2, [pc, #144]	@ (80037bc <HAL_DMA_Abort_IT+0x3e8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d022      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a22      	ldr	r2, [pc, #136]	@ (80037c0 <HAL_DMA_Abort_IT+0x3ec>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01d      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a21      	ldr	r2, [pc, #132]	@ (80037c4 <HAL_DMA_Abort_IT+0x3f0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d018      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1f      	ldr	r2, [pc, #124]	@ (80037c8 <HAL_DMA_Abort_IT+0x3f4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1e      	ldr	r2, [pc, #120]	@ (80037cc <HAL_DMA_Abort_IT+0x3f8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1c      	ldr	r2, [pc, #112]	@ (80037d0 <HAL_DMA_Abort_IT+0x3fc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d009      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1b      	ldr	r2, [pc, #108]	@ (80037d4 <HAL_DMA_Abort_IT+0x400>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_DMA_Abort_IT+0x3a2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a19      	ldr	r2, [pc, #100]	@ (80037d8 <HAL_DMA_Abort_IT+0x404>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d132      	bne.n	80037dc <HAL_DMA_Abort_IT+0x408>
 8003776:	2301      	movs	r3, #1
 8003778:	e031      	b.n	80037de <HAL_DMA_Abort_IT+0x40a>
 800377a:	bf00      	nop
 800377c:	40020010 	.word	0x40020010
 8003780:	40020028 	.word	0x40020028
 8003784:	40020040 	.word	0x40020040
 8003788:	40020058 	.word	0x40020058
 800378c:	40020070 	.word	0x40020070
 8003790:	40020088 	.word	0x40020088
 8003794:	400200a0 	.word	0x400200a0
 8003798:	400200b8 	.word	0x400200b8
 800379c:	40020410 	.word	0x40020410
 80037a0:	40020428 	.word	0x40020428
 80037a4:	40020440 	.word	0x40020440
 80037a8:	40020458 	.word	0x40020458
 80037ac:	40020470 	.word	0x40020470
 80037b0:	40020488 	.word	0x40020488
 80037b4:	400204a0 	.word	0x400204a0
 80037b8:	400204b8 	.word	0x400204b8
 80037bc:	58025408 	.word	0x58025408
 80037c0:	5802541c 	.word	0x5802541c
 80037c4:	58025430 	.word	0x58025430
 80037c8:	58025444 	.word	0x58025444
 80037cc:	58025458 	.word	0x58025458
 80037d0:	5802546c 	.word	0x5802546c
 80037d4:	58025480 	.word	0x58025480
 80037d8:	58025494 	.word	0x58025494
 80037dc:	2300      	movs	r3, #0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d028      	beq.n	8003834 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	2201      	movs	r2, #1
 8003802:	409a      	lsls	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003810:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003824:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003828:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003832:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop

08003860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	@ 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800386e:	4b89      	ldr	r3, [pc, #548]	@ (8003a94 <HAL_GPIO_Init+0x234>)
 8003870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003872:	e194      	b.n	8003b9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2101      	movs	r1, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8186 	beq.w	8003b98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d005      	beq.n	80038a4 <HAL_GPIO_Init+0x44>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d130      	bne.n	8003906 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	2203      	movs	r2, #3
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038da:	2201      	movs	r2, #1
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	f003 0201 	and.w	r2, r3, #1
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b03      	cmp	r3, #3
 8003910:	d017      	beq.n	8003942 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	2203      	movs	r2, #3
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d123      	bne.n	8003996 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	08da      	lsrs	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3208      	adds	r2, #8
 8003956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	220f      	movs	r2, #15
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	08da      	lsrs	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3208      	adds	r2, #8
 8003990:	69b9      	ldr	r1, [r7, #24]
 8003992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	2203      	movs	r2, #3
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0203 	and.w	r2, r3, #3
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80e0 	beq.w	8003b98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003a98 <HAL_GPIO_Init+0x238>)
 80039da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039de:	4a2e      	ldr	r2, [pc, #184]	@ (8003a98 <HAL_GPIO_Init+0x238>)
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80039e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a98 <HAL_GPIO_Init+0x238>)
 80039ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039f6:	4a29      	ldr	r2, [pc, #164]	@ (8003a9c <HAL_GPIO_Init+0x23c>)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	3302      	adds	r3, #2
 80039fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	220f      	movs	r2, #15
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a20      	ldr	r2, [pc, #128]	@ (8003aa0 <HAL_GPIO_Init+0x240>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d052      	beq.n	8003ac8 <HAL_GPIO_Init+0x268>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa4 <HAL_GPIO_Init+0x244>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d031      	beq.n	8003a8e <HAL_GPIO_Init+0x22e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa8 <HAL_GPIO_Init+0x248>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d02b      	beq.n	8003a8a <HAL_GPIO_Init+0x22a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a1d      	ldr	r2, [pc, #116]	@ (8003aac <HAL_GPIO_Init+0x24c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d025      	beq.n	8003a86 <HAL_GPIO_Init+0x226>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab0 <HAL_GPIO_Init+0x250>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01f      	beq.n	8003a82 <HAL_GPIO_Init+0x222>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab4 <HAL_GPIO_Init+0x254>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d019      	beq.n	8003a7e <HAL_GPIO_Init+0x21e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab8 <HAL_GPIO_Init+0x258>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_GPIO_Init+0x21a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a19      	ldr	r2, [pc, #100]	@ (8003abc <HAL_GPIO_Init+0x25c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00d      	beq.n	8003a76 <HAL_GPIO_Init+0x216>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a18      	ldr	r2, [pc, #96]	@ (8003ac0 <HAL_GPIO_Init+0x260>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <HAL_GPIO_Init+0x212>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a17      	ldr	r2, [pc, #92]	@ (8003ac4 <HAL_GPIO_Init+0x264>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_GPIO_Init+0x20e>
 8003a6a:	2309      	movs	r3, #9
 8003a6c:	e02d      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a6e:	230a      	movs	r3, #10
 8003a70:	e02b      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a72:	2308      	movs	r3, #8
 8003a74:	e029      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a76:	2307      	movs	r3, #7
 8003a78:	e027      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a7a:	2306      	movs	r3, #6
 8003a7c:	e025      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a7e:	2305      	movs	r3, #5
 8003a80:	e023      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a82:	2304      	movs	r3, #4
 8003a84:	e021      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a86:	2303      	movs	r3, #3
 8003a88:	e01f      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e01d      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e01b      	b.n	8003aca <HAL_GPIO_Init+0x26a>
 8003a92:	bf00      	nop
 8003a94:	58000080 	.word	0x58000080
 8003a98:	58024400 	.word	0x58024400
 8003a9c:	58000400 	.word	0x58000400
 8003aa0:	58020000 	.word	0x58020000
 8003aa4:	58020400 	.word	0x58020400
 8003aa8:	58020800 	.word	0x58020800
 8003aac:	58020c00 	.word	0x58020c00
 8003ab0:	58021000 	.word	0x58021000
 8003ab4:	58021400 	.word	0x58021400
 8003ab8:	58021800 	.word	0x58021800
 8003abc:	58021c00 	.word	0x58021c00
 8003ac0:	58022000 	.word	0x58022000
 8003ac4:	58022400 	.word	0x58022400
 8003ac8:	2300      	movs	r3, #0
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	f002 0203 	and.w	r2, r2, #3
 8003ad0:	0092      	lsls	r2, r2, #2
 8003ad2:	4093      	lsls	r3, r2
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ada:	4938      	ldr	r1, [pc, #224]	@ (8003bbc <HAL_GPIO_Init+0x35c>)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f47f ae63 	bne.w	8003874 <HAL_GPIO_Init+0x14>
  }
}
 8003bae:	bf00      	nop
 8003bb0:	bf00      	nop
 8003bb2:	3724      	adds	r7, #36	@ 0x24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	58000400 	.word	0x58000400

08003bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	887b      	ldrh	r3, [r7, #2]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
 8003bdc:	e001      	b.n	8003be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003bf8:	4a08      	ldr	r2, [pc, #32]	@ (8003c1c <HAL_HSEM_FastTake+0x2c>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3320      	adds	r3, #32
 8003bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c02:	4a07      	ldr	r2, [pc, #28]	@ (8003c20 <HAL_HSEM_FastTake+0x30>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d101      	bne.n	8003c0c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	58026400 	.word	0x58026400
 8003c20:	80000300 	.word	0x80000300

08003c24 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003c2e:	4906      	ldr	r1, [pc, #24]	@ (8003c48 <HAL_HSEM_Release+0x24>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	58026400 	.word	0x58026400

08003c4c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003c54:	4b29      	ldr	r3, [pc, #164]	@ (8003cfc <HAL_PWREx_ConfigSupply+0xb0>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	2b06      	cmp	r3, #6
 8003c5e:	d00a      	beq.n	8003c76 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c60:	4b26      	ldr	r3, [pc, #152]	@ (8003cfc <HAL_PWREx_ConfigSupply+0xb0>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d001      	beq.n	8003c72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e040      	b.n	8003cf4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e03e      	b.n	8003cf4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c76:	4b21      	ldr	r3, [pc, #132]	@ (8003cfc <HAL_PWREx_ConfigSupply+0xb0>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003c7e:	491f      	ldr	r1, [pc, #124]	@ (8003cfc <HAL_PWREx_ConfigSupply+0xb0>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c86:	f7fd fcff 	bl	8001688 <HAL_GetTick>
 8003c8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c8c:	e009      	b.n	8003ca2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c8e:	f7fd fcfb 	bl	8001688 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c9c:	d901      	bls.n	8003ca2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e028      	b.n	8003cf4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ca2:	4b16      	ldr	r3, [pc, #88]	@ (8003cfc <HAL_PWREx_ConfigSupply+0xb0>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cae:	d1ee      	bne.n	8003c8e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b1e      	cmp	r3, #30
 8003cb4:	d008      	beq.n	8003cc8 <HAL_PWREx_ConfigSupply+0x7c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cba:	d005      	beq.n	8003cc8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b1d      	cmp	r3, #29
 8003cc0:	d002      	beq.n	8003cc8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b2d      	cmp	r3, #45	@ 0x2d
 8003cc6:	d114      	bne.n	8003cf2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003cc8:	f7fd fcde 	bl	8001688 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003cce:	e009      	b.n	8003ce4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003cd0:	f7fd fcda 	bl	8001688 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cde:	d901      	bls.n	8003ce4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e007      	b.n	8003cf4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ce4:	4b05      	ldr	r3, [pc, #20]	@ (8003cfc <HAL_PWREx_ConfigSupply+0xb0>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf0:	d1ee      	bne.n	8003cd0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	58024800 	.word	0x58024800

08003d00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	@ 0x30
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f000 bc48 	b.w	80045a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8088 	beq.w	8003e32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d22:	4b99      	ldr	r3, [pc, #612]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d2c:	4b96      	ldr	r3, [pc, #600]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d007      	beq.n	8003d48 <HAL_RCC_OscConfig+0x48>
 8003d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3a:	2b18      	cmp	r3, #24
 8003d3c:	d111      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62>
 8003d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d10c      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	4b8f      	ldr	r3, [pc, #572]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d06d      	beq.n	8003e30 <HAL_RCC_OscConfig+0x130>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d169      	bne.n	8003e30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f000 bc21 	b.w	80045a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x7a>
 8003d6c:	4b86      	ldr	r3, [pc, #536]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a85      	ldr	r2, [pc, #532]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	e02e      	b.n	8003dd8 <HAL_RCC_OscConfig+0xd8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x9c>
 8003d82:	4b81      	ldr	r3, [pc, #516]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a80      	ldr	r2, [pc, #512]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b7e      	ldr	r3, [pc, #504]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7d      	ldr	r2, [pc, #500]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003d94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e01d      	b.n	8003dd8 <HAL_RCC_OscConfig+0xd8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0xc0>
 8003da6:	4b78      	ldr	r3, [pc, #480]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a77      	ldr	r2, [pc, #476]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003dac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	4b75      	ldr	r3, [pc, #468]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a74      	ldr	r2, [pc, #464]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCC_OscConfig+0xd8>
 8003dc0:	4b71      	ldr	r3, [pc, #452]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a70      	ldr	r2, [pc, #448]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b6e      	ldr	r3, [pc, #440]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a6d      	ldr	r2, [pc, #436]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003dd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d013      	beq.n	8003e08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd fc52 	bl	8001688 <HAL_GetTick>
 8003de4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de8:	f7fd fc4e 	bl	8001688 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b64      	cmp	r3, #100	@ 0x64
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e3d4      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dfa:	4b63      	ldr	r3, [pc, #396]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0xe8>
 8003e06:	e014      	b.n	8003e32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd fc3e 	bl	8001688 <HAL_GetTick>
 8003e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fd fc3a 	bl	8001688 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	@ 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e3c0      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e22:	4b59      	ldr	r3, [pc, #356]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x110>
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80ca 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e40:	4b51      	ldr	r3, [pc, #324]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e4a:	4b4f      	ldr	r3, [pc, #316]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <HAL_RCC_OscConfig+0x166>
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	2b18      	cmp	r3, #24
 8003e5a:	d156      	bne.n	8003f0a <HAL_RCC_OscConfig+0x20a>
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d151      	bne.n	8003f0a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e66:	4b48      	ldr	r3, [pc, #288]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_RCC_OscConfig+0x17e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e392      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e7e:	4b42      	ldr	r3, [pc, #264]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 0219 	bic.w	r2, r3, #25
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	493f      	ldr	r1, [pc, #252]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fd fbfa 	bl	8001688 <HAL_GetTick>
 8003e94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e98:	f7fd fbf6 	bl	8001688 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e37c      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003eaa:	4b37      	ldr	r3, [pc, #220]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	f7fd fc17 	bl	80016e8 <HAL_GetREVID>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d817      	bhi.n	8003ef4 <HAL_RCC_OscConfig+0x1f4>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b40      	cmp	r3, #64	@ 0x40
 8003eca:	d108      	bne.n	8003ede <HAL_RCC_OscConfig+0x1de>
 8003ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eda:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003edc:	e07a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ede:	4b2a      	ldr	r3, [pc, #168]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	031b      	lsls	r3, r3, #12
 8003eec:	4926      	ldr	r1, [pc, #152]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef2:	e06f      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef4:	4b24      	ldr	r3, [pc, #144]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	4921      	ldr	r1, [pc, #132]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f08:	e064      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d047      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f12:	4b1d      	ldr	r3, [pc, #116]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 0219 	bic.w	r2, r3, #25
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	491a      	ldr	r1, [pc, #104]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fd fbb0 	bl	8001688 <HAL_GetTick>
 8003f28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2c:	f7fd fbac 	bl	8001688 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e332      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f3e:	4b12      	ldr	r3, [pc, #72]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4a:	f7fd fbcd 	bl	80016e8 <HAL_GetREVID>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d819      	bhi.n	8003f8c <HAL_RCC_OscConfig+0x28c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b40      	cmp	r3, #64	@ 0x40
 8003f5e:	d108      	bne.n	8003f72 <HAL_RCC_OscConfig+0x272>
 8003f60:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f68:	4a07      	ldr	r2, [pc, #28]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f6e:	6053      	str	r3, [r2, #4]
 8003f70:	e030      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2d4>
 8003f72:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	031b      	lsls	r3, r3, #12
 8003f80:	4901      	ldr	r1, [pc, #4]	@ (8003f88 <HAL_RCC_OscConfig+0x288>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
 8003f86:	e025      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2d4>
 8003f88:	58024400 	.word	0x58024400
 8003f8c:	4b9a      	ldr	r3, [pc, #616]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	061b      	lsls	r3, r3, #24
 8003f9a:	4997      	ldr	r1, [pc, #604]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
 8003fa0:	e018      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa2:	4b95      	ldr	r3, [pc, #596]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a94      	ldr	r2, [pc, #592]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fae:	f7fd fb6b 	bl	8001688 <HAL_GetTick>
 8003fb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb6:	f7fd fb67 	bl	8001688 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e2ed      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fc8:	4b8b      	ldr	r3, [pc, #556]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f0      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80a9 	beq.w	8004134 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe2:	4b85      	ldr	r3, [pc, #532]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fec:	4b82      	ldr	r3, [pc, #520]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d007      	beq.n	8004008 <HAL_RCC_OscConfig+0x308>
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b18      	cmp	r3, #24
 8003ffc:	d13a      	bne.n	8004074 <HAL_RCC_OscConfig+0x374>
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d135      	bne.n	8004074 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004008:	4b7b      	ldr	r3, [pc, #492]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_RCC_OscConfig+0x320>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2b80      	cmp	r3, #128	@ 0x80
 800401a:	d001      	beq.n	8004020 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e2c1      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004020:	f7fd fb62 	bl	80016e8 <HAL_GetREVID>
 8004024:	4603      	mov	r3, r0
 8004026:	f241 0203 	movw	r2, #4099	@ 0x1003
 800402a:	4293      	cmp	r3, r2
 800402c:	d817      	bhi.n	800405e <HAL_RCC_OscConfig+0x35e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	2b20      	cmp	r3, #32
 8004034:	d108      	bne.n	8004048 <HAL_RCC_OscConfig+0x348>
 8004036:	4b70      	ldr	r3, [pc, #448]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800403e:	4a6e      	ldr	r2, [pc, #440]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8004040:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004044:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004046:	e075      	b.n	8004134 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004048:	4b6b      	ldr	r3, [pc, #428]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	069b      	lsls	r3, r3, #26
 8004056:	4968      	ldr	r1, [pc, #416]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800405c:	e06a      	b.n	8004134 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800405e:	4b66      	ldr	r3, [pc, #408]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	061b      	lsls	r3, r3, #24
 800406c:	4962      	ldr	r1, [pc, #392]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 800406e:	4313      	orrs	r3, r2
 8004070:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004072:	e05f      	b.n	8004134 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d042      	beq.n	8004102 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800407c:	4b5e      	ldr	r3, [pc, #376]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a5d      	ldr	r2, [pc, #372]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8004082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fd fafe 	bl	8001688 <HAL_GetTick>
 800408c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004090:	f7fd fafa 	bl	8001688 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e280      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040a2:	4b55      	ldr	r3, [pc, #340]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040ae:	f7fd fb1b 	bl	80016e8 <HAL_GetREVID>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d817      	bhi.n	80040ec <HAL_RCC_OscConfig+0x3ec>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d108      	bne.n	80040d6 <HAL_RCC_OscConfig+0x3d6>
 80040c4:	4b4c      	ldr	r3, [pc, #304]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80040cc:	4a4a      	ldr	r2, [pc, #296]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 80040ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040d2:	6053      	str	r3, [r2, #4]
 80040d4:	e02e      	b.n	8004134 <HAL_RCC_OscConfig+0x434>
 80040d6:	4b48      	ldr	r3, [pc, #288]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	069b      	lsls	r3, r3, #26
 80040e4:	4944      	ldr	r1, [pc, #272]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	604b      	str	r3, [r1, #4]
 80040ea:	e023      	b.n	8004134 <HAL_RCC_OscConfig+0x434>
 80040ec:	4b42      	ldr	r3, [pc, #264]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	061b      	lsls	r3, r3, #24
 80040fa:	493f      	ldr	r1, [pc, #252]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60cb      	str	r3, [r1, #12]
 8004100:	e018      	b.n	8004134 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004102:	4b3d      	ldr	r3, [pc, #244]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a3c      	ldr	r2, [pc, #240]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8004108:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800410c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fd fabb 	bl	8001688 <HAL_GetTick>
 8004112:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004116:	f7fd fab7 	bl	8001688 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e23d      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004128:	4b33      	ldr	r3, [pc, #204]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d036      	beq.n	80041ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d019      	beq.n	800417c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004148:	4b2b      	ldr	r3, [pc, #172]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 800414a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414c:	4a2a      	ldr	r2, [pc, #168]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fd fa98 	bl	8001688 <HAL_GetTick>
 8004158:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415c:	f7fd fa94 	bl	8001688 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e21a      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800416e:	4b22      	ldr	r3, [pc, #136]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8004170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x45c>
 800417a:	e018      	b.n	80041ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800417c:	4b1e      	ldr	r3, [pc, #120]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 800417e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004180:	4a1d      	ldr	r2, [pc, #116]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004188:	f7fd fa7e 	bl	8001688 <HAL_GetTick>
 800418c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004190:	f7fd fa7a 	bl	8001688 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e200      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041a2:	4b15      	ldr	r3, [pc, #84]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 80041a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d039      	beq.n	800422e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01c      	beq.n	80041fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041c2:	4b0d      	ldr	r3, [pc, #52]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a0c      	ldr	r2, [pc, #48]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 80041c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80041cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041ce:	f7fd fa5b 	bl	8001688 <HAL_GetTick>
 80041d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041d6:	f7fd fa57 	bl	8001688 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e1dd      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041e8:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x4d6>
 80041f4:	e01b      	b.n	800422e <HAL_RCC_OscConfig+0x52e>
 80041f6:	bf00      	nop
 80041f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041fc:	4b9b      	ldr	r3, [pc, #620]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a9a      	ldr	r2, [pc, #616]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004202:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004206:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004208:	f7fd fa3e 	bl	8001688 <HAL_GetTick>
 800420c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004210:	f7fd fa3a 	bl	8001688 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e1c0      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004222:	4b92      	ldr	r3, [pc, #584]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8081 	beq.w	800433e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800423c:	4b8c      	ldr	r3, [pc, #560]	@ (8004470 <HAL_RCC_OscConfig+0x770>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a8b      	ldr	r2, [pc, #556]	@ (8004470 <HAL_RCC_OscConfig+0x770>)
 8004242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004248:	f7fd fa1e 	bl	8001688 <HAL_GetTick>
 800424c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004250:	f7fd fa1a 	bl	8001688 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	@ 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1a0      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004262:	4b83      	ldr	r3, [pc, #524]	@ (8004470 <HAL_RCC_OscConfig+0x770>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d106      	bne.n	8004284 <HAL_RCC_OscConfig+0x584>
 8004276:	4b7d      	ldr	r3, [pc, #500]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427a:	4a7c      	ldr	r2, [pc, #496]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6713      	str	r3, [r2, #112]	@ 0x70
 8004282:	e02d      	b.n	80042e0 <HAL_RCC_OscConfig+0x5e0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10c      	bne.n	80042a6 <HAL_RCC_OscConfig+0x5a6>
 800428c:	4b77      	ldr	r3, [pc, #476]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004290:	4a76      	ldr	r2, [pc, #472]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	6713      	str	r3, [r2, #112]	@ 0x70
 8004298:	4b74      	ldr	r3, [pc, #464]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429c:	4a73      	ldr	r2, [pc, #460]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 800429e:	f023 0304 	bic.w	r3, r3, #4
 80042a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a4:	e01c      	b.n	80042e0 <HAL_RCC_OscConfig+0x5e0>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x5c8>
 80042ae:	4b6f      	ldr	r3, [pc, #444]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b2:	4a6e      	ldr	r2, [pc, #440]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ba:	4b6c      	ldr	r3, [pc, #432]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	4a6b      	ldr	r2, [pc, #428]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0x5e0>
 80042c8:	4b68      	ldr	r3, [pc, #416]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	4a67      	ldr	r2, [pc, #412]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d4:	4b65      	ldr	r3, [pc, #404]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d8:	4a64      	ldr	r2, [pc, #400]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d015      	beq.n	8004314 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fd f9ce 	bl	8001688 <HAL_GetTick>
 80042ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fd f9ca 	bl	8001688 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e14e      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004306:	4b59      	ldr	r3, [pc, #356]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ee      	beq.n	80042f0 <HAL_RCC_OscConfig+0x5f0>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fd f9b8 	bl	8001688 <HAL_GetTick>
 8004318:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fd f9b4 	bl	8001688 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e138      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004332:	4b4e      	ldr	r3, [pc, #312]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ee      	bne.n	800431c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 812d 	beq.w	80045a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004348:	4b48      	ldr	r3, [pc, #288]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004350:	2b18      	cmp	r3, #24
 8004352:	f000 80bd 	beq.w	80044d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	2b02      	cmp	r3, #2
 800435c:	f040 809e 	bne.w	800449c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004360:	4b42      	ldr	r3, [pc, #264]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a41      	ldr	r2, [pc, #260]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800436a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fd f98c 	bl	8001688 <HAL_GetTick>
 8004370:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004374:	f7fd f988 	bl	8001688 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e10e      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004386:	4b39      	ldr	r3, [pc, #228]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004392:	4b36      	ldr	r3, [pc, #216]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004394:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004396:	4b37      	ldr	r3, [pc, #220]	@ (8004474 <HAL_RCC_OscConfig+0x774>)
 8004398:	4013      	ands	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80043a2:	0112      	lsls	r2, r2, #4
 80043a4:	430a      	orrs	r2, r1
 80043a6:	4931      	ldr	r1, [pc, #196]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b0:	3b01      	subs	r3, #1
 80043b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ba:	3b01      	subs	r3, #1
 80043bc:	025b      	lsls	r3, r3, #9
 80043be:	b29b      	uxth	r3, r3
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c6:	3b01      	subs	r3, #1
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d4:	3b01      	subs	r3, #1
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043dc:	4923      	ldr	r1, [pc, #140]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80043e2:	4b22      	ldr	r3, [pc, #136]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	4a21      	ldr	r2, [pc, #132]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043ee:	4b1f      	ldr	r3, [pc, #124]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80043f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043f2:	4b21      	ldr	r3, [pc, #132]	@ (8004478 <HAL_RCC_OscConfig+0x778>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043fa:	00d2      	lsls	r2, r2, #3
 80043fc:	491b      	ldr	r1, [pc, #108]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004402:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004406:	f023 020c 	bic.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	4917      	ldr	r1, [pc, #92]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004410:	4313      	orrs	r3, r2
 8004412:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004414:	4b15      	ldr	r3, [pc, #84]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	f023 0202 	bic.w	r2, r3, #2
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004420:	4912      	ldr	r1, [pc, #72]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004422:	4313      	orrs	r3, r2
 8004424:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004426:	4b11      	ldr	r3, [pc, #68]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	4a10      	ldr	r2, [pc, #64]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004432:	4b0e      	ldr	r3, [pc, #56]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	4a0d      	ldr	r2, [pc, #52]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800443c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800443e:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	4a0a      	ldr	r2, [pc, #40]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004448:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800444a:	4b08      	ldr	r3, [pc, #32]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	4a07      	ldr	r2, [pc, #28]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004456:	4b05      	ldr	r3, [pc, #20]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a04      	ldr	r2, [pc, #16]	@ (800446c <HAL_RCC_OscConfig+0x76c>)
 800445c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004462:	f7fd f911 	bl	8001688 <HAL_GetTick>
 8004466:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004468:	e011      	b.n	800448e <HAL_RCC_OscConfig+0x78e>
 800446a:	bf00      	nop
 800446c:	58024400 	.word	0x58024400
 8004470:	58024800 	.word	0x58024800
 8004474:	fffffc0c 	.word	0xfffffc0c
 8004478:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447c:	f7fd f904 	bl	8001688 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e08a      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800448e:	4b47      	ldr	r3, [pc, #284]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCC_OscConfig+0x77c>
 800449a:	e082      	b.n	80045a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449c:	4b43      	ldr	r3, [pc, #268]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a42      	ldr	r2, [pc, #264]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 80044a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd f8ee 	bl	8001688 <HAL_GetTick>
 80044ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fd f8ea 	bl	8001688 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e070      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044c2:	4b3a      	ldr	r3, [pc, #232]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x7b0>
 80044ce:	e068      	b.n	80045a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80044d0:	4b36      	ldr	r3, [pc, #216]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044d6:	4b35      	ldr	r3, [pc, #212]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d031      	beq.n	8004548 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f003 0203 	and.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d12a      	bne.n	8004548 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d122      	bne.n	8004548 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d11a      	bne.n	8004548 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	0a5b      	lsrs	r3, r3, #9
 8004516:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d111      	bne.n	8004548 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d108      	bne.n	8004548 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	0e1b      	lsrs	r3, r3, #24
 800453a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004542:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e02b      	b.n	80045a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800454c:	4b17      	ldr	r3, [pc, #92]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 800454e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004550:	08db      	lsrs	r3, r3, #3
 8004552:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004556:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	429a      	cmp	r2, r3
 8004560:	d01f      	beq.n	80045a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004562:	4b12      	ldr	r3, [pc, #72]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 8004564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004566:	4a11      	ldr	r2, [pc, #68]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800456e:	f7fd f88b 	bl	8001688 <HAL_GetTick>
 8004572:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004574:	bf00      	nop
 8004576:	f7fd f887 	bl	8001688 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	4293      	cmp	r3, r2
 8004580:	d0f9      	beq.n	8004576 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004582:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 8004584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004586:	4b0a      	ldr	r3, [pc, #40]	@ (80045b0 <HAL_RCC_OscConfig+0x8b0>)
 8004588:	4013      	ands	r3, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800458e:	00d2      	lsls	r2, r2, #3
 8004590:	4906      	ldr	r1, [pc, #24]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 8004592:	4313      	orrs	r3, r2
 8004594:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004596:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	4a04      	ldr	r2, [pc, #16]	@ (80045ac <HAL_RCC_OscConfig+0x8ac>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3730      	adds	r7, #48	@ 0x30
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	58024400 	.word	0x58024400
 80045b0:	ffff0007 	.word	0xffff0007

080045b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e19c      	b.n	8004902 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c8:	4b8a      	ldr	r3, [pc, #552]	@ (80047f4 <HAL_RCC_ClockConfig+0x240>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d910      	bls.n	80045f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b87      	ldr	r3, [pc, #540]	@ (80047f4 <HAL_RCC_ClockConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 020f 	bic.w	r2, r3, #15
 80045de:	4985      	ldr	r1, [pc, #532]	@ (80047f4 <HAL_RCC_ClockConfig+0x240>)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b83      	ldr	r3, [pc, #524]	@ (80047f4 <HAL_RCC_ClockConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e184      	b.n	8004902 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d010      	beq.n	8004626 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	4b7b      	ldr	r3, [pc, #492]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004610:	429a      	cmp	r2, r3
 8004612:	d908      	bls.n	8004626 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004614:	4b78      	ldr	r3, [pc, #480]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	4975      	ldr	r1, [pc, #468]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004622:	4313      	orrs	r3, r2
 8004624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d010      	beq.n	8004654 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	4b70      	ldr	r3, [pc, #448]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800463e:	429a      	cmp	r2, r3
 8004640:	d908      	bls.n	8004654 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004642:	4b6d      	ldr	r3, [pc, #436]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	496a      	ldr	r1, [pc, #424]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004650:	4313      	orrs	r3, r2
 8004652:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	d010      	beq.n	8004682 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	4b64      	ldr	r3, [pc, #400]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800466c:	429a      	cmp	r2, r3
 800466e:	d908      	bls.n	8004682 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004670:	4b61      	ldr	r3, [pc, #388]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	495e      	ldr	r1, [pc, #376]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 800467e:	4313      	orrs	r3, r2
 8004680:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d010      	beq.n	80046b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	4b59      	ldr	r3, [pc, #356]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800469a:	429a      	cmp	r2, r3
 800469c:	d908      	bls.n	80046b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800469e:	4b56      	ldr	r3, [pc, #344]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	4953      	ldr	r1, [pc, #332]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d010      	beq.n	80046de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	4b4d      	ldr	r3, [pc, #308]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d908      	bls.n	80046de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046cc:	4b4a      	ldr	r3, [pc, #296]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f023 020f 	bic.w	r2, r3, #15
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4947      	ldr	r1, [pc, #284]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d055      	beq.n	8004796 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046ea:	4b43      	ldr	r3, [pc, #268]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4940      	ldr	r1, [pc, #256]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d107      	bne.n	8004714 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004704:	4b3c      	ldr	r3, [pc, #240]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d121      	bne.n	8004754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0f6      	b.n	8004902 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d107      	bne.n	800472c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800471c:	4b36      	ldr	r3, [pc, #216]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d115      	bne.n	8004754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0ea      	b.n	8004902 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d107      	bne.n	8004744 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004734:	4b30      	ldr	r3, [pc, #192]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0de      	b.n	8004902 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004744:	4b2c      	ldr	r3, [pc, #176]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0d6      	b.n	8004902 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004754:	4b28      	ldr	r3, [pc, #160]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f023 0207 	bic.w	r2, r3, #7
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4925      	ldr	r1, [pc, #148]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004762:	4313      	orrs	r3, r2
 8004764:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004766:	f7fc ff8f 	bl	8001688 <HAL_GetTick>
 800476a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476c:	e00a      	b.n	8004784 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476e:	f7fc ff8b 	bl	8001688 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e0be      	b.n	8004902 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004784:	4b1c      	ldr	r3, [pc, #112]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	429a      	cmp	r2, r3
 8004794:	d1eb      	bne.n	800476e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d010      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	4b14      	ldr	r3, [pc, #80]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d208      	bcs.n	80047c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b2:	4b11      	ldr	r3, [pc, #68]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f023 020f 	bic.w	r2, r3, #15
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	490e      	ldr	r1, [pc, #56]	@ (80047f8 <HAL_RCC_ClockConfig+0x244>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047c4:	4b0b      	ldr	r3, [pc, #44]	@ (80047f4 <HAL_RCC_ClockConfig+0x240>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d214      	bcs.n	80047fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b08      	ldr	r3, [pc, #32]	@ (80047f4 <HAL_RCC_ClockConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 020f 	bic.w	r2, r3, #15
 80047da:	4906      	ldr	r1, [pc, #24]	@ (80047f4 <HAL_RCC_ClockConfig+0x240>)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	4313      	orrs	r3, r2
 80047e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e2:	4b04      	ldr	r3, [pc, #16]	@ (80047f4 <HAL_RCC_ClockConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e086      	b.n	8004902 <HAL_RCC_ClockConfig+0x34e>
 80047f4:	52002000 	.word	0x52002000
 80047f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	4b3f      	ldr	r3, [pc, #252]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004814:	429a      	cmp	r2, r3
 8004816:	d208      	bcs.n	800482a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004818:	4b3c      	ldr	r3, [pc, #240]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	4939      	ldr	r1, [pc, #228]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 8004826:	4313      	orrs	r3, r2
 8004828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d010      	beq.n	8004858 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	4b34      	ldr	r3, [pc, #208]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004842:	429a      	cmp	r2, r3
 8004844:	d208      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004846:	4b31      	ldr	r3, [pc, #196]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	492e      	ldr	r1, [pc, #184]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 8004854:	4313      	orrs	r3, r2
 8004856:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	d010      	beq.n	8004886 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	4b28      	ldr	r3, [pc, #160]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004870:	429a      	cmp	r2, r3
 8004872:	d208      	bcs.n	8004886 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004874:	4b25      	ldr	r3, [pc, #148]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	4922      	ldr	r1, [pc, #136]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 8004882:	4313      	orrs	r3, r2
 8004884:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	4b1d      	ldr	r3, [pc, #116]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800489e:	429a      	cmp	r2, r3
 80048a0:	d208      	bcs.n	80048b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80048a2:	4b1a      	ldr	r3, [pc, #104]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	4917      	ldr	r1, [pc, #92]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048b4:	f000 f834 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b14      	ldr	r3, [pc, #80]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	4912      	ldr	r1, [pc, #72]	@ (8004910 <HAL_RCC_ClockConfig+0x35c>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
 80048d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048d2:	4b0e      	ldr	r3, [pc, #56]	@ (800490c <HAL_RCC_ClockConfig+0x358>)
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	4a0d      	ldr	r2, [pc, #52]	@ (8004910 <HAL_RCC_ClockConfig+0x35c>)
 80048dc:	5cd3      	ldrb	r3, [r2, r3]
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004914 <HAL_RCC_ClockConfig+0x360>)
 80048ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004918 <HAL_RCC_ClockConfig+0x364>)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80048f2:	4b0a      	ldr	r3, [pc, #40]	@ (800491c <HAL_RCC_ClockConfig+0x368>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fc fc56 	bl	80011a8 <HAL_InitTick>
 80048fc:	4603      	mov	r3, r0
 80048fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
 8004910:	08013d94 	.word	0x08013d94
 8004914:	24000004 	.word	0x24000004
 8004918:	24000000 	.word	0x24000000
 800491c:	24000008 	.word	0x24000008

08004920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	@ 0x24
 8004924:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004926:	4bb3      	ldr	r3, [pc, #716]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800492e:	2b18      	cmp	r3, #24
 8004930:	f200 8155 	bhi.w	8004bde <HAL_RCC_GetSysClockFreq+0x2be>
 8004934:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493a:	bf00      	nop
 800493c:	080049a1 	.word	0x080049a1
 8004940:	08004bdf 	.word	0x08004bdf
 8004944:	08004bdf 	.word	0x08004bdf
 8004948:	08004bdf 	.word	0x08004bdf
 800494c:	08004bdf 	.word	0x08004bdf
 8004950:	08004bdf 	.word	0x08004bdf
 8004954:	08004bdf 	.word	0x08004bdf
 8004958:	08004bdf 	.word	0x08004bdf
 800495c:	080049c7 	.word	0x080049c7
 8004960:	08004bdf 	.word	0x08004bdf
 8004964:	08004bdf 	.word	0x08004bdf
 8004968:	08004bdf 	.word	0x08004bdf
 800496c:	08004bdf 	.word	0x08004bdf
 8004970:	08004bdf 	.word	0x08004bdf
 8004974:	08004bdf 	.word	0x08004bdf
 8004978:	08004bdf 	.word	0x08004bdf
 800497c:	080049cd 	.word	0x080049cd
 8004980:	08004bdf 	.word	0x08004bdf
 8004984:	08004bdf 	.word	0x08004bdf
 8004988:	08004bdf 	.word	0x08004bdf
 800498c:	08004bdf 	.word	0x08004bdf
 8004990:	08004bdf 	.word	0x08004bdf
 8004994:	08004bdf 	.word	0x08004bdf
 8004998:	08004bdf 	.word	0x08004bdf
 800499c:	080049d3 	.word	0x080049d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a0:	4b94      	ldr	r3, [pc, #592]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d009      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049ac:	4b91      	ldr	r3, [pc, #580]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	08db      	lsrs	r3, r3, #3
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	4a90      	ldr	r2, [pc, #576]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
 80049bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80049be:	e111      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049c0:	4b8d      	ldr	r3, [pc, #564]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049c2:	61bb      	str	r3, [r7, #24]
      break;
 80049c4:	e10e      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80049c6:	4b8d      	ldr	r3, [pc, #564]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049c8:	61bb      	str	r3, [r7, #24]
      break;
 80049ca:	e10b      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80049cc:	4b8c      	ldr	r3, [pc, #560]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80049ce:	61bb      	str	r3, [r7, #24]
      break;
 80049d0:	e108      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049d2:	4b88      	ldr	r3, [pc, #544]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80049dc:	4b85      	ldr	r3, [pc, #532]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049e8:	4b82      	ldr	r3, [pc, #520]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80049f2:	4b80      	ldr	r3, [pc, #512]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f6:	08db      	lsrs	r3, r3, #3
 80049f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80e1 	beq.w	8004bd8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	f000 8083 	beq.w	8004b24 <HAL_RCC_GetSysClockFreq+0x204>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	f200 80a1 	bhi.w	8004b68 <HAL_RCC_GetSysClockFreq+0x248>
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x114>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d056      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a32:	e099      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a34:	4b6f      	ldr	r3, [pc, #444]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d02d      	beq.n	8004a9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a40:	4b6c      	ldr	r3, [pc, #432]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	08db      	lsrs	r3, r3, #3
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	4a6b      	ldr	r2, [pc, #428]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	ee07 3a90 	vmov	s15, r3
 8004a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6a:	4b62      	ldr	r3, [pc, #392]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004c04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004a9a:	e087      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004c08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aae:	4b51      	ldr	r3, [pc, #324]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ac2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004c04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ada:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ade:	e065      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004c0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af2:	4b40      	ldr	r3, [pc, #256]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004c04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b22:	e043      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004c10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b36:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004c04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b66:	e021      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004c0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004c04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004baa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004bac:	4b11      	ldr	r3, [pc, #68]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb0:	0a5b      	lsrs	r3, r3, #9
 8004bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd0:	ee17 3a90 	vmov	r3, s15
 8004bd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004bd6:	e005      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61bb      	str	r3, [r7, #24]
      break;
 8004bdc:	e002      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004bde:	4b07      	ldr	r3, [pc, #28]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004be0:	61bb      	str	r3, [r7, #24]
      break;
 8004be2:	bf00      	nop
  }

  return sysclockfreq;
 8004be4:	69bb      	ldr	r3, [r7, #24]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3724      	adds	r7, #36	@ 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	58024400 	.word	0x58024400
 8004bf8:	03d09000 	.word	0x03d09000
 8004bfc:	003d0900 	.word	0x003d0900
 8004c00:	017d7840 	.word	0x017d7840
 8004c04:	46000000 	.word	0x46000000
 8004c08:	4c742400 	.word	0x4c742400
 8004c0c:	4a742400 	.word	0x4a742400
 8004c10:	4bbebc20 	.word	0x4bbebc20

08004c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c1a:	f7ff fe81 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4b10      	ldr	r3, [pc, #64]	@ (8004c64 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	490f      	ldr	r1, [pc, #60]	@ (8004c68 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c2c:	5ccb      	ldrb	r3, [r1, r3]
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	fa22 f303 	lsr.w	r3, r2, r3
 8004c36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c38:	4b0a      	ldr	r3, [pc, #40]	@ (8004c64 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	4a09      	ldr	r2, [pc, #36]	@ (8004c68 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c42:	5cd3      	ldrb	r3, [r2, r3]
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4e:	4a07      	ldr	r2, [pc, #28]	@ (8004c6c <HAL_RCC_GetHCLKFreq+0x58>)
 8004c50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c52:	4a07      	ldr	r2, [pc, #28]	@ (8004c70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c58:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <HAL_RCC_GetHCLKFreq+0x58>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	58024400 	.word	0x58024400
 8004c68:	08013d94 	.word	0x08013d94
 8004c6c:	24000004 	.word	0x24000004
 8004c70:	24000000 	.word	0x24000000

08004c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c78:	f7ff ffcc 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4b06      	ldr	r3, [pc, #24]	@ (8004c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4904      	ldr	r1, [pc, #16]	@ (8004c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c8a:	5ccb      	ldrb	r3, [r1, r3]
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	58024400 	.word	0x58024400
 8004c9c:	08013d94 	.word	0x08013d94

08004ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ca4:	f7ff ffb6 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	4904      	ldr	r1, [pc, #16]	@ (8004cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	58024400 	.word	0x58024400
 8004cc8:	08013d94 	.word	0x08013d94

08004ccc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	223f      	movs	r2, #63	@ 0x3f
 8004cda:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004d48 <HAL_RCC_GetClockConfig+0x7c>)
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f003 0207 	and.w	r2, r3, #7
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004ce8:	4b17      	ldr	r3, [pc, #92]	@ (8004d48 <HAL_RCC_GetClockConfig+0x7c>)
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004cf4:	4b14      	ldr	r3, [pc, #80]	@ (8004d48 <HAL_RCC_GetClockConfig+0x7c>)
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f003 020f 	and.w	r2, r3, #15
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004d00:	4b11      	ldr	r3, [pc, #68]	@ (8004d48 <HAL_RCC_GetClockConfig+0x7c>)
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d48 <HAL_RCC_GetClockConfig+0x7c>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004d18:	4b0b      	ldr	r3, [pc, #44]	@ (8004d48 <HAL_RCC_GetClockConfig+0x7c>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004d24:	4b08      	ldr	r3, [pc, #32]	@ (8004d48 <HAL_RCC_GetClockConfig+0x7c>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d30:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <HAL_RCC_GetClockConfig+0x80>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 020f 	and.w	r2, r3, #15
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	601a      	str	r2, [r3, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	58024400 	.word	0x58024400
 8004d4c:	52002000 	.word	0x52002000

08004d50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d54:	b0ca      	sub	sp, #296	@ 0x128
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004d74:	2500      	movs	r5, #0
 8004d76:	ea54 0305 	orrs.w	r3, r4, r5
 8004d7a:	d049      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d86:	d02f      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004d88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d8c:	d828      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d92:	d01a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d98:	d822      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004da2:	d007      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004da4:	e01c      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da6:	4bb8      	ldr	r3, [pc, #736]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004daa:	4ab7      	ldr	r2, [pc, #732]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004db2:	e01a      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db8:	3308      	adds	r3, #8
 8004dba:	2102      	movs	r1, #2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f002 fb61 	bl	8007484 <RCCEx_PLL2_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dc8:	e00f      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dce:	3328      	adds	r3, #40	@ 0x28
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f002 fc08 	bl	80075e8 <RCCEx_PLL3_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dde:	e004      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004de6:	e000      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004df2:	4ba5      	ldr	r3, [pc, #660]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e00:	4aa1      	ldr	r2, [pc, #644]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e02:	430b      	orrs	r3, r1
 8004e04:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e06:	e003      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004e1c:	f04f 0900 	mov.w	r9, #0
 8004e20:	ea58 0309 	orrs.w	r3, r8, r9
 8004e24:	d047      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d82a      	bhi.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e30:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e4d 	.word	0x08004e4d
 8004e3c:	08004e5b 	.word	0x08004e5b
 8004e40:	08004e71 	.word	0x08004e71
 8004e44:	08004e8f 	.word	0x08004e8f
 8004e48:	08004e8f 	.word	0x08004e8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	4a8d      	ldr	r2, [pc, #564]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e58:	e01a      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5e:	3308      	adds	r3, #8
 8004e60:	2100      	movs	r1, #0
 8004e62:	4618      	mov	r0, r3
 8004e64:	f002 fb0e 	bl	8007484 <RCCEx_PLL2_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e6e:	e00f      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e74:	3328      	adds	r3, #40	@ 0x28
 8004e76:	2100      	movs	r1, #0
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f002 fbb5 	bl	80075e8 <RCCEx_PLL3_Config>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e84:	e004      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e8c:	e000      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e98:	4b7b      	ldr	r3, [pc, #492]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e9c:	f023 0107 	bic.w	r1, r3, #7
 8004ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea6:	4a78      	ldr	r2, [pc, #480]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004eac:	e003      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004ec2:	f04f 0b00 	mov.w	fp, #0
 8004ec6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004eca:	d04c      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed6:	d030      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004edc:	d829      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ede:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ee0:	d02d      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004ee2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ee4:	d825      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ee6:	2b80      	cmp	r3, #128	@ 0x80
 8004ee8:	d018      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004eea:	2b80      	cmp	r3, #128	@ 0x80
 8004eec:	d821      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004ef2:	2b40      	cmp	r3, #64	@ 0x40
 8004ef4:	d007      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004ef6:	e01c      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef8:	4b63      	ldr	r3, [pc, #396]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	4a62      	ldr	r2, [pc, #392]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f04:	e01c      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f002 fab8 	bl	8007484 <RCCEx_PLL2_Config>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f1a:	e011      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f20:	3328      	adds	r3, #40	@ 0x28
 8004f22:	2100      	movs	r1, #0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f002 fb5f 	bl	80075e8 <RCCEx_PLL3_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f30:	e006      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f38:	e002      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f48:	4b4f      	ldr	r3, [pc, #316]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f56:	4a4c      	ldr	r2, [pc, #304]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004f72:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004f76:	2300      	movs	r3, #0
 8004f78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004f7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004f80:	460b      	mov	r3, r1
 8004f82:	4313      	orrs	r3, r2
 8004f84:	d053      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f92:	d035      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004f94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f98:	d82e      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f9e:	d031      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004fa0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004fa4:	d828      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004faa:	d01a      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fb0:	d822      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004fb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fba:	d007      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004fbc:	e01c      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fbe:	4b32      	ldr	r3, [pc, #200]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc2:	4a31      	ldr	r2, [pc, #196]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fca:	e01c      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f002 fa55 	bl	8007484 <RCCEx_PLL2_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004fe0:	e011      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe6:	3328      	adds	r3, #40	@ 0x28
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f002 fafc 	bl	80075e8 <RCCEx_PLL3_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ff6:	e006      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ffe:	e002      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005000:	bf00      	nop
 8005002:	e000      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800500e:	4b1e      	ldr	r3, [pc, #120]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005012:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800501e:	4a1a      	ldr	r2, [pc, #104]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005020:	430b      	orrs	r3, r1
 8005022:	6593      	str	r3, [r2, #88]	@ 0x58
 8005024:	e003      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800502a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800502e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800503a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800503e:	2300      	movs	r3, #0
 8005040:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005044:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005048:	460b      	mov	r3, r1
 800504a:	4313      	orrs	r3, r2
 800504c:	d056      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800504e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005056:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800505a:	d038      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800505c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005060:	d831      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005062:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005066:	d034      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005068:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800506c:	d82b      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800506e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005072:	d01d      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005074:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005078:	d825      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d006      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800507e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005082:	d00a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005084:	e01f      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005086:	bf00      	nop
 8005088:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800508c:	4ba2      	ldr	r3, [pc, #648]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800508e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005090:	4aa1      	ldr	r2, [pc, #644]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005096:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005098:	e01c      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509e:	3308      	adds	r3, #8
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f002 f9ee 	bl	8007484 <RCCEx_PLL2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050ae:	e011      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b4:	3328      	adds	r3, #40	@ 0x28
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f002 fa95 	bl	80075e8 <RCCEx_PLL3_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050c4:	e006      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050cc:	e002      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050ce:	bf00      	nop
 80050d0:	e000      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10b      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050dc:	4b8e      	ldr	r3, [pc, #568]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050ec:	4a8a      	ldr	r2, [pc, #552]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050ee:	430b      	orrs	r3, r1
 80050f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80050f2:	e003      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005108:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800510c:	2300      	movs	r3, #0
 800510e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005112:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005116:	460b      	mov	r3, r1
 8005118:	4313      	orrs	r3, r2
 800511a:	d03a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005122:	2b30      	cmp	r3, #48	@ 0x30
 8005124:	d01f      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005126:	2b30      	cmp	r3, #48	@ 0x30
 8005128:	d819      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800512a:	2b20      	cmp	r3, #32
 800512c:	d00c      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800512e:	2b20      	cmp	r3, #32
 8005130:	d815      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d019      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005136:	2b10      	cmp	r3, #16
 8005138:	d111      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800513a:	4b77      	ldr	r3, [pc, #476]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800513c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513e:	4a76      	ldr	r2, [pc, #472]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005144:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005146:	e011      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514c:	3308      	adds	r3, #8
 800514e:	2102      	movs	r1, #2
 8005150:	4618      	mov	r0, r3
 8005152:	f002 f997 	bl	8007484 <RCCEx_PLL2_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800515c:	e006      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005164:	e002      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005166:	bf00      	nop
 8005168:	e000      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800516a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800516c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005174:	4b68      	ldr	r3, [pc, #416]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005178:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800517c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005182:	4a65      	ldr	r2, [pc, #404]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005184:	430b      	orrs	r3, r1
 8005186:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005188:	e003      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800518e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800519e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051a2:	2300      	movs	r3, #0
 80051a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4313      	orrs	r3, r2
 80051b0:	d051      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051bc:	d035      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80051be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051c2:	d82e      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051c8:	d031      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80051ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051ce:	d828      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051d4:	d01a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80051d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051da:	d822      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e4:	d007      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80051e6:	e01c      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051f4:	e01c      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051fa:	3308      	adds	r3, #8
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f002 f940 	bl	8007484 <RCCEx_PLL2_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800520a:	e011      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800520c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005210:	3328      	adds	r3, #40	@ 0x28
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f002 f9e7 	bl	80075e8 <RCCEx_PLL3_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005220:	e006      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005228:	e002      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800522e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005238:	4b37      	ldr	r3, [pc, #220]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800523a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800523c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005246:	4a34      	ldr	r2, [pc, #208]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005248:	430b      	orrs	r3, r1
 800524a:	6513      	str	r3, [r2, #80]	@ 0x50
 800524c:	e003      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005252:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005262:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005266:	2300      	movs	r3, #0
 8005268:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800526c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005270:	460b      	mov	r3, r1
 8005272:	4313      	orrs	r3, r2
 8005274:	d056      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800527c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005280:	d033      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005282:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005286:	d82c      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005288:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800528c:	d02f      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800528e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005292:	d826      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005294:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005298:	d02b      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800529a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800529e:	d820      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052a4:	d012      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80052a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052aa:	d81a      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d022      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b4:	d115      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ba:	3308      	adds	r3, #8
 80052bc:	2101      	movs	r1, #1
 80052be:	4618      	mov	r0, r3
 80052c0:	f002 f8e0 	bl	8007484 <RCCEx_PLL2_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052ca:	e015      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d0:	3328      	adds	r3, #40	@ 0x28
 80052d2:	2101      	movs	r1, #1
 80052d4:	4618      	mov	r0, r3
 80052d6:	f002 f987 	bl	80075e8 <RCCEx_PLL3_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052e0:	e00a      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052e8:	e006      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052ea:	bf00      	nop
 80052ec:	e004      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052ee:	bf00      	nop
 80052f0:	e002      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052f2:	bf00      	nop
 80052f4:	e000      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10d      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005300:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005304:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800530e:	4a02      	ldr	r2, [pc, #8]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005310:	430b      	orrs	r3, r1
 8005312:	6513      	str	r3, [r2, #80]	@ 0x50
 8005314:	e006      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005316:	bf00      	nop
 8005318:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005320:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005334:	2300      	movs	r3, #0
 8005336:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800533a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800533e:	460b      	mov	r3, r1
 8005340:	4313      	orrs	r3, r2
 8005342:	d055      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005348:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800534c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005350:	d033      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005352:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005356:	d82c      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535c:	d02f      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005362:	d826      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005364:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005368:	d02b      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800536a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800536e:	d820      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005374:	d012      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800537a:	d81a      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d022      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005380:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005384:	d115      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538a:	3308      	adds	r3, #8
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f002 f878 	bl	8007484 <RCCEx_PLL2_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800539a:	e015      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800539c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a0:	3328      	adds	r3, #40	@ 0x28
 80053a2:	2101      	movs	r1, #1
 80053a4:	4618      	mov	r0, r3
 80053a6:	f002 f91f 	bl	80075e8 <RCCEx_PLL3_Config>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053b0:	e00a      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053ba:	bf00      	nop
 80053bc:	e004      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053be:	bf00      	nop
 80053c0:	e002      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10b      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80053d0:	4ba3      	ldr	r3, [pc, #652]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053e0:	4a9f      	ldr	r2, [pc, #636]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053e2:	430b      	orrs	r3, r1
 80053e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80053e6:	e003      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80053fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005400:	2300      	movs	r3, #0
 8005402:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800540a:	460b      	mov	r3, r1
 800540c:	4313      	orrs	r3, r2
 800540e:	d037      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800541a:	d00e      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800541c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005420:	d816      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d018      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542a:	d111      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800542c:	4b8c      	ldr	r3, [pc, #560]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800542e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005430:	4a8b      	ldr	r2, [pc, #556]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005438:	e00f      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800543a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543e:	3308      	adds	r3, #8
 8005440:	2101      	movs	r1, #1
 8005442:	4618      	mov	r0, r3
 8005444:	f002 f81e 	bl	8007484 <RCCEx_PLL2_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800544e:	e004      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005456:	e000      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005462:	4b7f      	ldr	r3, [pc, #508]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005466:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005470:	4a7b      	ldr	r2, [pc, #492]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005472:	430b      	orrs	r3, r1
 8005474:	6513      	str	r3, [r2, #80]	@ 0x50
 8005476:	e003      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800547c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800548c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005490:	2300      	movs	r3, #0
 8005492:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005496:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800549a:	460b      	mov	r3, r1
 800549c:	4313      	orrs	r3, r2
 800549e:	d039      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d81c      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80054aa:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054ed 	.word	0x080054ed
 80054b4:	080054c1 	.word	0x080054c1
 80054b8:	080054cf 	.word	0x080054cf
 80054bc:	080054ed 	.word	0x080054ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c0:	4b67      	ldr	r3, [pc, #412]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	4a66      	ldr	r2, [pc, #408]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054cc:	e00f      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d2:	3308      	adds	r3, #8
 80054d4:	2102      	movs	r1, #2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 ffd4 	bl	8007484 <RCCEx_PLL2_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054e2:	e004      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ea:	e000      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80054ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054f6:	4b5a      	ldr	r3, [pc, #360]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054fa:	f023 0103 	bic.w	r1, r3, #3
 80054fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005504:	4a56      	ldr	r2, [pc, #344]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005506:	430b      	orrs	r3, r1
 8005508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800550a:	e003      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005510:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005520:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005524:	2300      	movs	r3, #0
 8005526:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800552a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800552e:	460b      	mov	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	f000 809f 	beq.w	8005674 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005536:	4b4b      	ldr	r3, [pc, #300]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a4a      	ldr	r2, [pc, #296]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800553c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005540:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005542:	f7fc f8a1 	bl	8001688 <HAL_GetTick>
 8005546:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800554a:	e00b      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800554c:	f7fc f89c 	bl	8001688 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b64      	cmp	r3, #100	@ 0x64
 800555a:	d903      	bls.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005562:	e005      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005564:	4b3f      	ldr	r3, [pc, #252]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0ed      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005574:	2b00      	cmp	r3, #0
 8005576:	d179      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005578:	4b39      	ldr	r3, [pc, #228]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800557a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005580:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005584:	4053      	eors	r3, r2
 8005586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558a:	2b00      	cmp	r3, #0
 800558c:	d015      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800558e:	4b34      	ldr	r3, [pc, #208]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005596:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800559a:	4b31      	ldr	r3, [pc, #196]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800559e:	4a30      	ldr	r2, [pc, #192]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055b2:	4a2b      	ldr	r2, [pc, #172]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c6:	d118      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c8:	f7fc f85e 	bl	8001688 <HAL_GetTick>
 80055cc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055d0:	e00d      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d2:	f7fc f859 	bl	8001688 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80055dc:	1ad2      	subs	r2, r2, r3
 80055de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d903      	bls.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80055ec:	e005      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0eb      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80055fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d129      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005606:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800560a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800560e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005612:	d10e      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005614:	4b12      	ldr	r3, [pc, #72]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005624:	091a      	lsrs	r2, r3, #4
 8005626:	4b10      	ldr	r3, [pc, #64]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005628:	4013      	ands	r3, r2
 800562a:	4a0d      	ldr	r2, [pc, #52]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800562c:	430b      	orrs	r3, r1
 800562e:	6113      	str	r3, [r2, #16]
 8005630:	e005      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005632:	4b0b      	ldr	r3, [pc, #44]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	4a0a      	ldr	r2, [pc, #40]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005638:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800563c:	6113      	str	r3, [r2, #16]
 800563e:	4b08      	ldr	r3, [pc, #32]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005640:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005646:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800564a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800564e:	4a04      	ldr	r2, [pc, #16]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005650:	430b      	orrs	r3, r1
 8005652:	6713      	str	r3, [r2, #112]	@ 0x70
 8005654:	e00e      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800565a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800565e:	e009      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005660:	58024400 	.word	0x58024400
 8005664:	58024800 	.word	0x58024800
 8005668:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005670:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f002 0301 	and.w	r3, r2, #1
 8005680:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005684:	2300      	movs	r3, #0
 8005686:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800568a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800568e:	460b      	mov	r3, r1
 8005690:	4313      	orrs	r3, r2
 8005692:	f000 8089 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800569c:	2b28      	cmp	r3, #40	@ 0x28
 800569e:	d86b      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80056a0:	a201      	add	r2, pc, #4	@ (adr r2, 80056a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	08005781 	.word	0x08005781
 80056ac:	08005779 	.word	0x08005779
 80056b0:	08005779 	.word	0x08005779
 80056b4:	08005779 	.word	0x08005779
 80056b8:	08005779 	.word	0x08005779
 80056bc:	08005779 	.word	0x08005779
 80056c0:	08005779 	.word	0x08005779
 80056c4:	08005779 	.word	0x08005779
 80056c8:	0800574d 	.word	0x0800574d
 80056cc:	08005779 	.word	0x08005779
 80056d0:	08005779 	.word	0x08005779
 80056d4:	08005779 	.word	0x08005779
 80056d8:	08005779 	.word	0x08005779
 80056dc:	08005779 	.word	0x08005779
 80056e0:	08005779 	.word	0x08005779
 80056e4:	08005779 	.word	0x08005779
 80056e8:	08005763 	.word	0x08005763
 80056ec:	08005779 	.word	0x08005779
 80056f0:	08005779 	.word	0x08005779
 80056f4:	08005779 	.word	0x08005779
 80056f8:	08005779 	.word	0x08005779
 80056fc:	08005779 	.word	0x08005779
 8005700:	08005779 	.word	0x08005779
 8005704:	08005779 	.word	0x08005779
 8005708:	08005781 	.word	0x08005781
 800570c:	08005779 	.word	0x08005779
 8005710:	08005779 	.word	0x08005779
 8005714:	08005779 	.word	0x08005779
 8005718:	08005779 	.word	0x08005779
 800571c:	08005779 	.word	0x08005779
 8005720:	08005779 	.word	0x08005779
 8005724:	08005779 	.word	0x08005779
 8005728:	08005781 	.word	0x08005781
 800572c:	08005779 	.word	0x08005779
 8005730:	08005779 	.word	0x08005779
 8005734:	08005779 	.word	0x08005779
 8005738:	08005779 	.word	0x08005779
 800573c:	08005779 	.word	0x08005779
 8005740:	08005779 	.word	0x08005779
 8005744:	08005779 	.word	0x08005779
 8005748:	08005781 	.word	0x08005781
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005750:	3308      	adds	r3, #8
 8005752:	2101      	movs	r1, #1
 8005754:	4618      	mov	r0, r3
 8005756:	f001 fe95 	bl	8007484 <RCCEx_PLL2_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005760:	e00f      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005766:	3328      	adds	r3, #40	@ 0x28
 8005768:	2101      	movs	r1, #1
 800576a:	4618      	mov	r0, r3
 800576c:	f001 ff3c 	bl	80075e8 <RCCEx_PLL3_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005776:	e004      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800577e:	e000      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800578a:	4bbf      	ldr	r3, [pc, #764]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800578c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005796:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005798:	4abb      	ldr	r2, [pc, #748]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800579a:	430b      	orrs	r3, r1
 800579c:	6553      	str	r3, [r2, #84]	@ 0x54
 800579e:	e003      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f002 0302 	and.w	r3, r2, #2
 80057b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057b8:	2300      	movs	r3, #0
 80057ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80057be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80057c2:	460b      	mov	r3, r1
 80057c4:	4313      	orrs	r3, r2
 80057c6:	d041      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057ce:	2b05      	cmp	r3, #5
 80057d0:	d824      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80057d2:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	08005825 	.word	0x08005825
 80057dc:	080057f1 	.word	0x080057f1
 80057e0:	08005807 	.word	0x08005807
 80057e4:	08005825 	.word	0x08005825
 80057e8:	08005825 	.word	0x08005825
 80057ec:	08005825 	.word	0x08005825
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f4:	3308      	adds	r3, #8
 80057f6:	2101      	movs	r1, #1
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 fe43 	bl	8007484 <RCCEx_PLL2_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005804:	e00f      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580a:	3328      	adds	r3, #40	@ 0x28
 800580c:	2101      	movs	r1, #1
 800580e:	4618      	mov	r0, r3
 8005810:	f001 feea 	bl	80075e8 <RCCEx_PLL3_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800581a:	e004      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005822:	e000      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800582e:	4b96      	ldr	r3, [pc, #600]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	f023 0107 	bic.w	r1, r3, #7
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800583c:	4a92      	ldr	r2, [pc, #584]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800583e:	430b      	orrs	r3, r1
 8005840:	6553      	str	r3, [r2, #84]	@ 0x54
 8005842:	e003      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f002 0304 	and.w	r3, r2, #4
 8005858:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800585c:	2300      	movs	r3, #0
 800585e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005862:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005866:	460b      	mov	r3, r1
 8005868:	4313      	orrs	r3, r2
 800586a:	d044      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800586c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005874:	2b05      	cmp	r3, #5
 8005876:	d825      	bhi.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005878:	a201      	add	r2, pc, #4	@ (adr r2, 8005880 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	080058cd 	.word	0x080058cd
 8005884:	08005899 	.word	0x08005899
 8005888:	080058af 	.word	0x080058af
 800588c:	080058cd 	.word	0x080058cd
 8005890:	080058cd 	.word	0x080058cd
 8005894:	080058cd 	.word	0x080058cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589c:	3308      	adds	r3, #8
 800589e:	2101      	movs	r1, #1
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 fdef 	bl	8007484 <RCCEx_PLL2_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058ac:	e00f      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b2:	3328      	adds	r3, #40	@ 0x28
 80058b4:	2101      	movs	r1, #1
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 fe96 	bl	80075e8 <RCCEx_PLL3_Config>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058c2:	e004      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ca:	e000      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80058cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058d6:	4b6c      	ldr	r3, [pc, #432]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058da:	f023 0107 	bic.w	r1, r3, #7
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058e6:	4a68      	ldr	r2, [pc, #416]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80058ec:	e003      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f002 0320 	and.w	r3, r2, #32
 8005902:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005906:	2300      	movs	r3, #0
 8005908:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800590c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005910:	460b      	mov	r3, r1
 8005912:	4313      	orrs	r3, r2
 8005914:	d055      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005922:	d033      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005928:	d82c      	bhi.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592e:	d02f      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005934:	d826      	bhi.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005936:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800593a:	d02b      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800593c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005940:	d820      	bhi.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005946:	d012      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800594c:	d81a      	bhi.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d022      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005956:	d115      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595c:	3308      	adds	r3, #8
 800595e:	2100      	movs	r1, #0
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fd8f 	bl	8007484 <RCCEx_PLL2_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800596c:	e015      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005972:	3328      	adds	r3, #40	@ 0x28
 8005974:	2102      	movs	r1, #2
 8005976:	4618      	mov	r0, r3
 8005978:	f001 fe36 	bl	80075e8 <RCCEx_PLL3_Config>
 800597c:	4603      	mov	r3, r0
 800597e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005982:	e00a      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800598a:	e006      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800598c:	bf00      	nop
 800598e:	e004      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005990:	bf00      	nop
 8005992:	e002      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005994:	bf00      	nop
 8005996:	e000      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800599a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a2:	4b39      	ldr	r3, [pc, #228]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b2:	4a35      	ldr	r2, [pc, #212]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059b4:	430b      	orrs	r3, r1
 80059b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80059b8:	e003      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80059ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059d2:	2300      	movs	r3, #0
 80059d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80059dc:	460b      	mov	r3, r1
 80059de:	4313      	orrs	r3, r2
 80059e0:	d058      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80059ee:	d033      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80059f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80059f4:	d82c      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059fa:	d02f      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80059fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a00:	d826      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a06:	d02b      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005a08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a0c:	d820      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a12:	d012      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a18:	d81a      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d022      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a22:	d115      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a28:	3308      	adds	r3, #8
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 fd29 	bl	8007484 <RCCEx_PLL2_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a38:	e015      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3e:	3328      	adds	r3, #40	@ 0x28
 8005a40:	2102      	movs	r1, #2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 fdd0 	bl	80075e8 <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a4e:	e00a      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a56:	e006      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a58:	bf00      	nop
 8005a5a:	e004      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a5c:	bf00      	nop
 8005a5e:	e002      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a60:	bf00      	nop
 8005a62:	e000      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10e      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a6e:	4b06      	ldr	r3, [pc, #24]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a72:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a7e:	4a02      	ldr	r2, [pc, #8]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a84:	e006      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005a86:	bf00      	nop
 8005a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005aaa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	d055      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005abc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ac0:	d033      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005ac2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ac6:	d82c      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005acc:	d02f      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005ace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad2:	d826      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ad4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ad8:	d02b      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005ada:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ade:	d820      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ae0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ae4:	d012      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005ae6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aea:	d81a      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d022      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af4:	d115      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afa:	3308      	adds	r3, #8
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 fcc0 	bl	8007484 <RCCEx_PLL2_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b0a:	e015      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	3328      	adds	r3, #40	@ 0x28
 8005b12:	2102      	movs	r1, #2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 fd67 	bl	80075e8 <RCCEx_PLL3_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b20:	e00a      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b28:	e006      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b2a:	bf00      	nop
 8005b2c:	e004      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b2e:	bf00      	nop
 8005b30:	e002      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10b      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b40:	4ba1      	ldr	r3, [pc, #644]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b44:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b50:	4a9d      	ldr	r2, [pc, #628]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b52:	430b      	orrs	r3, r1
 8005b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b56:	e003      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f002 0308 	and.w	r3, r2, #8
 8005b6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	d01e      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b92:	3328      	adds	r3, #40	@ 0x28
 8005b94:	2102      	movs	r1, #2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 fd26 	bl	80075e8 <RCCEx_PLL3_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ba8:	4b87      	ldr	r3, [pc, #540]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bb8:	4a83      	ldr	r2, [pc, #524]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	f002 0310 	and.w	r3, r2, #16
 8005bca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bd4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	d01e      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bea:	d10c      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf0:	3328      	adds	r3, #40	@ 0x28
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fcf7 	bl	80075e8 <RCCEx_PLL3_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c06:	4b70      	ldr	r3, [pc, #448]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c16:	4a6c      	ldr	r2, [pc, #432]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c36:	460b      	mov	r3, r1
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	d03e      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c48:	d022      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005c4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c4e:	d81b      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c58:	d00b      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005c5a:	e015      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c60:	3308      	adds	r3, #8
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 fc0d 	bl	8007484 <RCCEx_PLL2_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c70:	e00f      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c76:	3328      	adds	r3, #40	@ 0x28
 8005c78:	2102      	movs	r1, #2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 fcb4 	bl	80075e8 <RCCEx_PLL3_Config>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c86:	e004      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c8e:	e000      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10b      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c9e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005caa:	4a47      	ldr	r2, [pc, #284]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cac:	430b      	orrs	r3, r1
 8005cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cb0:	e003      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cc8:	2300      	movs	r3, #0
 8005cca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ccc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	d03b      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ce2:	d01f      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005ce4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ce8:	d818      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cee:	d003      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005cf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cf4:	d007      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005cf6:	e011      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cf8:	4b33      	ldr	r3, [pc, #204]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfc:	4a32      	ldr	r2, [pc, #200]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d04:	e00f      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0a:	3328      	adds	r3, #40	@ 0x28
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 fc6a 	bl	80075e8 <RCCEx_PLL3_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d1a:	e004      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d22:	e000      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d2e:	4b26      	ldr	r3, [pc, #152]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3e:	4a22      	ldr	r2, [pc, #136]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d44:	e003      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d64:	460b      	mov	r3, r1
 8005d66:	4313      	orrs	r3, r2
 8005d68:	d034      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d78:	d007      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005d7a:	e011      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d7c:	4b12      	ldr	r3, [pc, #72]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	4a11      	ldr	r2, [pc, #68]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d88:	e00e      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8e:	3308      	adds	r3, #8
 8005d90:	2102      	movs	r1, #2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 fb76 	bl	8007484 <RCCEx_PLL2_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d9e:	e003      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10d      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005db0:	4b05      	ldr	r3, [pc, #20]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dbe:	4a02      	ldr	r2, [pc, #8]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005dc4:	e006      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005dc6:	bf00      	nop
 8005dc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005de0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005de2:	2300      	movs	r3, #0
 8005de4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005de6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005dea:	460b      	mov	r3, r1
 8005dec:	4313      	orrs	r3, r2
 8005dee:	d00c      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df4:	3328      	adds	r3, #40	@ 0x28
 8005df6:	2102      	movs	r1, #2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 fbf5 	bl	80075e8 <RCCEx_PLL3_Config>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e16:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e18:	2300      	movs	r3, #0
 8005e1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e20:	460b      	mov	r3, r1
 8005e22:	4313      	orrs	r3, r2
 8005e24:	d038      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e32:	d018      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005e34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e38:	d811      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e3e:	d014      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e44:	d80b      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d011      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e4e:	d106      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e50:	4bc3      	ldr	r3, [pc, #780]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	4ac2      	ldr	r2, [pc, #776]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e5c:	e008      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e64:	e004      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10b      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e78:	4bb9      	ldr	r3, [pc, #740]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e88:	4ab5      	ldr	r2, [pc, #724]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e8e:	e003      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ea4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eaa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	d009      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005eb4:	4baa      	ldr	r3, [pc, #680]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ec2:	4aa7      	ldr	r2, [pc, #668]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005ed4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	d00a      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005ee4:	4b9e      	ldr	r3, [pc, #632]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ef4:	4a9a      	ldr	r2, [pc, #616]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f08:	2300      	movs	r3, #0
 8005f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f10:	460b      	mov	r3, r1
 8005f12:	4313      	orrs	r3, r2
 8005f14:	d009      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f16:	4b92      	ldr	r3, [pc, #584]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f1a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f24:	4a8e      	ldr	r2, [pc, #568]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f26:	430b      	orrs	r3, r1
 8005f28:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f36:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f38:	2300      	movs	r3, #0
 8005f3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f40:	460b      	mov	r3, r1
 8005f42:	4313      	orrs	r3, r2
 8005f44:	d00e      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f46:	4b86      	ldr	r3, [pc, #536]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	4a85      	ldr	r2, [pc, #532]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f4c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f50:	6113      	str	r3, [r2, #16]
 8005f52:	4b83      	ldr	r3, [pc, #524]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f54:	6919      	ldr	r1, [r3, #16]
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f5e:	4a80      	ldr	r2, [pc, #512]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005f70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f72:	2300      	movs	r3, #0
 8005f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	d009      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f80:	4b77      	ldr	r3, [pc, #476]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f84:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8e:	4a74      	ldr	r2, [pc, #464]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f90:	430b      	orrs	r3, r1
 8005f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005faa:	460b      	mov	r3, r1
 8005fac:	4313      	orrs	r3, r2
 8005fae:	d00a      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fb0:	4b6b      	ldr	r3, [pc, #428]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fc0:	4a67      	ldr	r2, [pc, #412]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	2100      	movs	r1, #0
 8005fd0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fd8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	d011      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f001 fa4a 	bl	8007484 <RCCEx_PLL2_Config>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006002:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	2100      	movs	r1, #0
 8006010:	6239      	str	r1, [r7, #32]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	627b      	str	r3, [r7, #36]	@ 0x24
 8006018:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800601c:	460b      	mov	r3, r1
 800601e:	4313      	orrs	r3, r2
 8006020:	d011      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006026:	3308      	adds	r3, #8
 8006028:	2101      	movs	r1, #1
 800602a:	4618      	mov	r0, r3
 800602c:	f001 fa2a 	bl	8007484 <RCCEx_PLL2_Config>
 8006030:	4603      	mov	r3, r0
 8006032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	2100      	movs	r1, #0
 8006050:	61b9      	str	r1, [r7, #24]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800605c:	460b      	mov	r3, r1
 800605e:	4313      	orrs	r3, r2
 8006060:	d011      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006066:	3308      	adds	r3, #8
 8006068:	2102      	movs	r1, #2
 800606a:	4618      	mov	r0, r3
 800606c:	f001 fa0a 	bl	8007484 <RCCEx_PLL2_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	2100      	movs	r1, #0
 8006090:	6139      	str	r1, [r7, #16]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800609c:	460b      	mov	r3, r1
 800609e:	4313      	orrs	r3, r2
 80060a0:	d011      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a6:	3328      	adds	r3, #40	@ 0x28
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 fa9c 	bl	80075e8 <RCCEx_PLL3_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80060b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	2100      	movs	r1, #0
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	f003 0310 	and.w	r3, r3, #16
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060dc:	460b      	mov	r3, r1
 80060de:	4313      	orrs	r3, r2
 80060e0:	d011      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e6:	3328      	adds	r3, #40	@ 0x28
 80060e8:	2101      	movs	r1, #1
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fa7c 	bl	80075e8 <RCCEx_PLL3_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006102:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	2100      	movs	r1, #0
 8006110:	6039      	str	r1, [r7, #0]
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	e9d7 1200 	ldrd	r1, r2, [r7]
 800611c:	460b      	mov	r3, r1
 800611e:	4313      	orrs	r3, r2
 8006120:	d011      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006126:	3328      	adds	r3, #40	@ 0x28
 8006128:	2102      	movs	r1, #2
 800612a:	4618      	mov	r0, r3
 800612c:	f001 fa5c 	bl	80075e8 <RCCEx_PLL3_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006146:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e000      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
}
 8006154:	4618      	mov	r0, r3
 8006156:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800615a:	46bd      	mov	sp, r7
 800615c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006160:	58024400 	.word	0x58024400

08006164 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b090      	sub	sp, #64	@ 0x40
 8006168:	af00      	add	r7, sp, #0
 800616a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800616e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006172:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006176:	430b      	orrs	r3, r1
 8006178:	f040 8094 	bne.w	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800617c:	4b9e      	ldr	r3, [pc, #632]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800617e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	2b04      	cmp	r3, #4
 800618a:	f200 8087 	bhi.w	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800618e:	a201      	add	r2, pc, #4	@ (adr r2, 8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061a9 	.word	0x080061a9
 8006198:	080061d1 	.word	0x080061d1
 800619c:	080061f9 	.word	0x080061f9
 80061a0:	08006295 	.word	0x08006295
 80061a4:	08006221 	.word	0x08006221
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061a8:	4b93      	ldr	r3, [pc, #588]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061b4:	d108      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 f810 	bl	80071e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061c4:	f000 bd45 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061cc:	f000 bd41 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061d0:	4b89      	ldr	r3, [pc, #548]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061dc:	d108      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061de:	f107 0318 	add.w	r3, r7, #24
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fd54 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ec:	f000 bd31 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f4:	f000 bd2d 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061f8:	4b7f      	ldr	r3, [pc, #508]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006204:	d108      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006206:	f107 030c 	add.w	r3, r7, #12
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fe94 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006214:	f000 bd1d 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800621c:	f000 bd19 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006220:	4b75      	ldr	r3, [pc, #468]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006224:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006228:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800622a:	4b73      	ldr	r3, [pc, #460]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	2b04      	cmp	r3, #4
 8006234:	d10c      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800623c:	4b6e      	ldr	r3, [pc, #440]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	08db      	lsrs	r3, r3, #3
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	4a6d      	ldr	r2, [pc, #436]	@ (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006248:	fa22 f303 	lsr.w	r3, r2, r3
 800624c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800624e:	e01f      	b.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006250:	4b69      	ldr	r3, [pc, #420]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800625c:	d106      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800625e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006264:	d102      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006266:	4b66      	ldr	r3, [pc, #408]	@ (8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006268:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800626a:	e011      	b.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800626c:	4b62      	ldr	r3, [pc, #392]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006274:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006278:	d106      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800627a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800627c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006280:	d102      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006282:	4b60      	ldr	r3, [pc, #384]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006286:	e003      	b.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800628c:	f000 bce1 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006290:	f000 bcdf 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006294:	4b5c      	ldr	r3, [pc, #368]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006298:	f000 bcdb 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a0:	f000 bcd7 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80062a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80062ac:	430b      	orrs	r3, r1
 80062ae:	f040 80ad 	bne.w	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80062b2:	4b51      	ldr	r3, [pc, #324]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80062ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c2:	d056      	beq.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ca:	f200 8090 	bhi.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80062ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80062d2:	f000 8088 	beq.w	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80062da:	f200 8088 	bhi.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80062de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e0:	2b80      	cmp	r3, #128	@ 0x80
 80062e2:	d032      	beq.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	2b80      	cmp	r3, #128	@ 0x80
 80062e8:	f200 8081 	bhi.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80062ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	d014      	beq.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80062f8:	e079      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062fa:	4b3f      	ldr	r3, [pc, #252]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006306:	d108      	bne.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800630c:	4618      	mov	r0, r3
 800630e:	f000 ff67 	bl	80071e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006316:	f000 bc9c 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800631e:	f000 bc98 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006322:	4b35      	ldr	r3, [pc, #212]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800632a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800632e:	d108      	bne.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006330:	f107 0318 	add.w	r3, r7, #24
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fcab 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800633e:	f000 bc88 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006346:	f000 bc84 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800634a:	4b2b      	ldr	r3, [pc, #172]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006356:	d108      	bne.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006358:	f107 030c 	add.w	r3, r7, #12
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fdeb 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006366:	f000 bc74 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800636e:	f000 bc70 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006372:	4b21      	ldr	r3, [pc, #132]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006376:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800637a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800637c:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d10c      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800638e:	4b1a      	ldr	r3, [pc, #104]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	08db      	lsrs	r3, r3, #3
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	4a18      	ldr	r2, [pc, #96]	@ (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800639a:	fa22 f303 	lsr.w	r3, r2, r3
 800639e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063a0:	e01f      	b.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063a2:	4b15      	ldr	r3, [pc, #84]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ae:	d106      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80063b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063b6:	d102      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063b8:	4b11      	ldr	r3, [pc, #68]	@ (8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80063ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063bc:	e011      	b.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063be:	4b0e      	ldr	r3, [pc, #56]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ca:	d106      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80063cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d2:	d102      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80063d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063d8:	e003      	b.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80063de:	f000 bc38 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063e2:	f000 bc36 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063e6:	4b08      	ldr	r3, [pc, #32]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80063e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ea:	f000 bc32 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063f2:	f000 bc2e 	b.w	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063f6:	bf00      	nop
 80063f8:	58024400 	.word	0x58024400
 80063fc:	03d09000 	.word	0x03d09000
 8006400:	003d0900 	.word	0x003d0900
 8006404:	017d7840 	.word	0x017d7840
 8006408:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800640c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006410:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006414:	430b      	orrs	r3, r1
 8006416:	f040 809c 	bne.w	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800641a:	4b9e      	ldr	r3, [pc, #632]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800641c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800641e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006422:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800642a:	d054      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006432:	f200 808b 	bhi.w	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800643c:	f000 8083 	beq.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006442:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006446:	f200 8081 	bhi.w	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006450:	d02f      	beq.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006458:	d878      	bhi.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006466:	d012      	beq.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006468:	e070      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800646a:	4b8a      	ldr	r3, [pc, #552]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006472:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006476:	d107      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800647c:	4618      	mov	r0, r3
 800647e:	f000 feaf 	bl	80071e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006486:	e3e4      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800648c:	e3e1      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800648e:	4b81      	ldr	r3, [pc, #516]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800649a:	d107      	bne.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800649c:	f107 0318 	add.w	r3, r7, #24
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fbf5 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064aa:	e3d2      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064b0:	e3cf      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064b2:	4b78      	ldr	r3, [pc, #480]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064be:	d107      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c0:	f107 030c 	add.w	r3, r7, #12
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fd37 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ce:	e3c0      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d4:	e3bd      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d10c      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80064ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064f2:	4b68      	ldr	r3, [pc, #416]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	08db      	lsrs	r3, r3, #3
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	4a66      	ldr	r2, [pc, #408]	@ (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80064fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006504:	e01e      	b.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006506:	4b63      	ldr	r3, [pc, #396]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006512:	d106      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800651a:	d102      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800651c:	4b5f      	ldr	r3, [pc, #380]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006520:	e010      	b.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006522:	4b5c      	ldr	r3, [pc, #368]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800652e:	d106      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006536:	d102      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006538:	4b59      	ldr	r3, [pc, #356]	@ (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800653c:	e002      	b.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006542:	e386      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006544:	e385      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006546:	4b57      	ldr	r3, [pc, #348]	@ (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800654a:	e382      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006550:	e37f      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006556:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800655a:	430b      	orrs	r3, r1
 800655c:	f040 80a7 	bne.w	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006560:	4b4c      	ldr	r3, [pc, #304]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006564:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006568:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006570:	d055      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006578:	f200 8096 	bhi.w	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800657c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006582:	f000 8084 	beq.w	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800658c:	f200 808c 	bhi.w	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006592:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006596:	d030      	beq.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800659e:	f200 8083 	bhi.w	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80065a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065ae:	d012      	beq.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80065b0:	e07a      	b.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065b2:	4b38      	ldr	r3, [pc, #224]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065be:	d107      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fe0b 	bl	80071e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065ce:	e340      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d4:	e33d      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065e2:	d107      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065e4:	f107 0318 	add.w	r3, r7, #24
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fb51 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065f2:	e32e      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065f8:	e32b      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065fa:	4b26      	ldr	r3, [pc, #152]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006606:	d107      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fc93 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006616:	e31c      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661c:	e319      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800661e:	4b1d      	ldr	r3, [pc, #116]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006622:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006626:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006628:	4b1a      	ldr	r3, [pc, #104]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b04      	cmp	r3, #4
 8006632:	d10c      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800663a:	4b16      	ldr	r3, [pc, #88]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	08db      	lsrs	r3, r3, #3
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	4a14      	ldr	r2, [pc, #80]	@ (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006646:	fa22 f303 	lsr.w	r3, r2, r3
 800664a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800664c:	e01e      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800664e:	4b11      	ldr	r3, [pc, #68]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800665a:	d106      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800665c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800665e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006662:	d102      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006664:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006668:	e010      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800666a:	4b0a      	ldr	r3, [pc, #40]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006672:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006676:	d106      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800667e:	d102      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006680:	4b07      	ldr	r3, [pc, #28]	@ (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006684:	e002      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006686:	2300      	movs	r3, #0
 8006688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800668a:	e2e2      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800668c:	e2e1      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800668e:	4b05      	ldr	r3, [pc, #20]	@ (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006692:	e2de      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006694:	58024400 	.word	0x58024400
 8006698:	03d09000 	.word	0x03d09000
 800669c:	003d0900 	.word	0x003d0900
 80066a0:	017d7840 	.word	0x017d7840
 80066a4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ac:	e2d1      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80066ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80066b6:	430b      	orrs	r3, r1
 80066b8:	f040 809c 	bne.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80066bc:	4b93      	ldr	r3, [pc, #588]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80066c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80066c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066cc:	d054      	beq.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80066ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066d4:	f200 808b 	bhi.w	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80066d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066de:	f000 8083 	beq.w	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80066e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066e8:	f200 8081 	bhi.w	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f2:	d02f      	beq.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066fa:	d878      	bhi.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80066fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006708:	d012      	beq.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800670a:	e070      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800670c:	4b7f      	ldr	r3, [pc, #508]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006714:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006718:	d107      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800671a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fd5e 	bl	80071e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006728:	e293      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800672e:	e290      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006730:	4b76      	ldr	r3, [pc, #472]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006738:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800673c:	d107      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800673e:	f107 0318 	add.w	r3, r7, #24
 8006742:	4618      	mov	r0, r3
 8006744:	f000 faa4 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800674c:	e281      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006752:	e27e      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006754:	4b6d      	ldr	r3, [pc, #436]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800675c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006760:	d107      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006762:	f107 030c 	add.w	r3, r7, #12
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fbe6 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006770:	e26f      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006776:	e26c      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006778:	4b64      	ldr	r3, [pc, #400]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800677a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800677c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006780:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006782:	4b62      	ldr	r3, [pc, #392]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0304 	and.w	r3, r3, #4
 800678a:	2b04      	cmp	r3, #4
 800678c:	d10c      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800678e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006790:	2b00      	cmp	r3, #0
 8006792:	d109      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006794:	4b5d      	ldr	r3, [pc, #372]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	08db      	lsrs	r3, r3, #3
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	4a5c      	ldr	r2, [pc, #368]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80067a0:	fa22 f303 	lsr.w	r3, r2, r3
 80067a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067a6:	e01e      	b.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067a8:	4b58      	ldr	r3, [pc, #352]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067b4:	d106      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80067b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067bc:	d102      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067be:	4b55      	ldr	r3, [pc, #340]	@ (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067c2:	e010      	b.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067c4:	4b51      	ldr	r3, [pc, #324]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067d0:	d106      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80067d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067d8:	d102      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067da:	4b4f      	ldr	r3, [pc, #316]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80067dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067de:	e002      	b.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80067e4:	e235      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067e6:	e234      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067e8:	4b4c      	ldr	r3, [pc, #304]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80067ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067ec:	e231      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067f2:	e22e      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80067f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067f8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80067fc:	430b      	orrs	r3, r1
 80067fe:	f040 808f 	bne.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006802:	4b42      	ldr	r3, [pc, #264]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006806:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800680a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800680c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006812:	d06b      	beq.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006816:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800681a:	d874      	bhi.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006822:	d056      	beq.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006826:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800682a:	d86c      	bhi.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800682c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006832:	d03b      	beq.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006836:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800683a:	d864      	bhi.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006842:	d021      	beq.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800684a:	d85c      	bhi.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006858:	d004      	beq.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800685a:	e054      	b.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800685c:	f7fe fa0a 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8006860:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006862:	e1f6      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006864:	4b29      	ldr	r3, [pc, #164]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800686c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006870:	d107      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006872:	f107 0318 	add.w	r3, r7, #24
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fa0a 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006880:	e1e7      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006886:	e1e4      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006888:	4b20      	ldr	r3, [pc, #128]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006894:	d107      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006896:	f107 030c 	add.w	r3, r7, #12
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fb4c 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a4:	e1d5      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068aa:	e1d2      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068ac:	4b17      	ldr	r3, [pc, #92]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d109      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068b8:	4b14      	ldr	r3, [pc, #80]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	08db      	lsrs	r3, r3, #3
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	4a13      	ldr	r2, [pc, #76]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80068c4:	fa22 f303 	lsr.w	r3, r2, r3
 80068c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ca:	e1c2      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068d0:	e1bf      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80068d2:	4b0e      	ldr	r3, [pc, #56]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068de:	d102      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80068e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80068e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e4:	e1b5      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ea:	e1b2      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068ec:	4b07      	ldr	r3, [pc, #28]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f8:	d102      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80068fa:	4b07      	ldr	r3, [pc, #28]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80068fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068fe:	e1a8      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006904:	e1a5      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690a:	e1a2      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800690c:	58024400 	.word	0x58024400
 8006910:	03d09000 	.word	0x03d09000
 8006914:	003d0900 	.word	0x003d0900
 8006918:	017d7840 	.word	0x017d7840
 800691c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006924:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006928:	430b      	orrs	r3, r1
 800692a:	d173      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800692c:	4b9c      	ldr	r3, [pc, #624]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800692e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006934:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800693c:	d02f      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800693e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006940:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006944:	d863      	bhi.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d004      	beq.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800694c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006952:	d012      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006954:	e05b      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006956:	4b92      	ldr	r3, [pc, #584]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800695e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006962:	d107      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006964:	f107 0318 	add.w	r3, r7, #24
 8006968:	4618      	mov	r0, r3
 800696a:	f000 f991 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006972:	e16e      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006978:	e16b      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800697a:	4b89      	ldr	r3, [pc, #548]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006986:	d107      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006988:	f107 030c 	add.w	r3, r7, #12
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fad3 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006996:	e15c      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699c:	e159      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800699e:	4b80      	ldr	r3, [pc, #512]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069a8:	4b7d      	ldr	r3, [pc, #500]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d10c      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80069b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069ba:	4b79      	ldr	r3, [pc, #484]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	08db      	lsrs	r3, r3, #3
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	4a77      	ldr	r2, [pc, #476]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80069c6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069cc:	e01e      	b.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069ce:	4b74      	ldr	r3, [pc, #464]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069da:	d106      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80069dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069e2:	d102      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069e4:	4b70      	ldr	r3, [pc, #448]	@ (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80069e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069e8:	e010      	b.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069ea:	4b6d      	ldr	r3, [pc, #436]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069f6:	d106      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069fe:	d102      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a00:	4b6a      	ldr	r3, [pc, #424]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a04:	e002      	b.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a0a:	e122      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a0c:	e121      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a12:	e11e      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a18:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	d133      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006a20:	4b5f      	ldr	r3, [pc, #380]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d004      	beq.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a36:	d012      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006a38:	e023      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a3a:	4b59      	ldr	r3, [pc, #356]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a46:	d107      	bne.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fbc7 	bl	80071e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a56:	e0fc      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a5c:	e0f9      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a5e:	4b50      	ldr	r3, [pc, #320]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a6a:	d107      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a6c:	f107 0318 	add.w	r3, r7, #24
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 f90d 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a7a:	e0ea      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a80:	e0e7      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a86:	e0e4      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a8c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006a90:	430b      	orrs	r3, r1
 8006a92:	f040 808d 	bne.w	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006a96:	4b42      	ldr	r3, [pc, #264]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006a9e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006aa6:	d06b      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006aae:	d874      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab6:	d056      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006abe:	d86c      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ac6:	d03b      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ace:	d864      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ad6:	d021      	beq.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ade:	d85c      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aec:	d004      	beq.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006aee:	e054      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006af0:	f000 f8b8 	bl	8006c64 <HAL_RCCEx_GetD3PCLK1Freq>
 8006af4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006af6:	e0ac      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006af8:	4b29      	ldr	r3, [pc, #164]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b04:	d107      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b06:	f107 0318 	add.w	r3, r7, #24
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 f8c0 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b14:	e09d      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b1a:	e09a      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b1c:	4b20      	ldr	r3, [pc, #128]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b28:	d107      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b2a:	f107 030c 	add.w	r3, r7, #12
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fa02 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b38:	e08b      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3e:	e088      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b40:	4b17      	ldr	r3, [pc, #92]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d109      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b4c:	4b14      	ldr	r3, [pc, #80]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	08db      	lsrs	r3, r3, #3
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	4a13      	ldr	r2, [pc, #76]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5e:	e078      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b64:	e075      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b66:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b72:	d102      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006b74:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b78:	e06b      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b7e:	e068      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b80:	4b07      	ldr	r3, [pc, #28]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b8c:	d102      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006b8e:	4b07      	ldr	r3, [pc, #28]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b92:	e05e      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b98:	e05b      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b9e:	e058      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	03d09000 	.word	0x03d09000
 8006ba8:	003d0900 	.word	0x003d0900
 8006bac:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	d148      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006bbc:	4b27      	ldr	r3, [pc, #156]	@ (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006bc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bcc:	d02a      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bd4:	d838      	bhi.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d004      	beq.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006be2:	d00d      	beq.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006be4:	e030      	b.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006be6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bf2:	d102      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bf8:	e02b      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bfe:	e028      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c00:	4b16      	ldr	r3, [pc, #88]	@ (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c0c:	d107      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fae4 	bl	80071e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c1c:	e019      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c22:	e016      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c24:	4b0d      	ldr	r3, [pc, #52]	@ (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c30:	d107      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c32:	f107 0318 	add.w	r3, r7, #24
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f82a 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c40:	e007      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c46:	e004      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c4c:	e001      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3740      	adds	r7, #64	@ 0x40
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	58024400 	.word	0x58024400
 8006c60:	017d7840 	.word	0x017d7840

08006c64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c68:	f7fd ffd4 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	091b      	lsrs	r3, r3, #4
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	4904      	ldr	r1, [pc, #16]	@ (8006c8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c7a:	5ccb      	ldrb	r3, [r1, r3]
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	58024400 	.word	0x58024400
 8006c8c:	08013d94 	.word	0x08013d94

08006c90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b089      	sub	sp, #36	@ 0x24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c98:	4ba1      	ldr	r3, [pc, #644]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006ca2:	4b9f      	ldr	r3, [pc, #636]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca6:	0b1b      	lsrs	r3, r3, #12
 8006ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cae:	4b9c      	ldr	r3, [pc, #624]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006cba:	4b99      	ldr	r3, [pc, #612]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbe:	08db      	lsrs	r3, r3, #3
 8006cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 8111 	beq.w	8006f00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	f000 8083 	beq.w	8006dec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	f200 80a1 	bhi.w	8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d056      	beq.n	8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006cfa:	e099      	b.n	8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cfc:	4b88      	ldr	r3, [pc, #544]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0320 	and.w	r3, r3, #32
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d02d      	beq.n	8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d08:	4b85      	ldr	r3, [pc, #532]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	08db      	lsrs	r3, r3, #3
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	4a84      	ldr	r2, [pc, #528]	@ (8006f24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
 8006d18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	ee07 3a90 	vmov	s15, r3
 8006d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d32:	4b7b      	ldr	r3, [pc, #492]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d62:	e087      	b.n	8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d76:	4b6a      	ldr	r3, [pc, #424]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006da6:	e065      	b.n	8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dba:	4b59      	ldr	r3, [pc, #356]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dea:	e043      	b.n	8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfe:	4b48      	ldr	r3, [pc, #288]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e2e:	e021      	b.n	8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e42:	4b37      	ldr	r3, [pc, #220]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006e74:	4b2a      	ldr	r3, [pc, #168]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e78:	0a5b      	lsrs	r3, r3, #9
 8006e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e9a:	ee17 2a90 	vmov	r2, s15
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea6:	0c1b      	lsrs	r3, r3, #16
 8006ea8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eac:	ee07 3a90 	vmov	s15, r3
 8006eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec8:	ee17 2a90 	vmov	r2, s15
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ed0:	4b13      	ldr	r3, [pc, #76]	@ (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed4:	0e1b      	lsrs	r3, r3, #24
 8006ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ef6:	ee17 2a90 	vmov	r2, s15
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006efe:	e008      	b.n	8006f12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	609a      	str	r2, [r3, #8]
}
 8006f12:	bf00      	nop
 8006f14:	3724      	adds	r7, #36	@ 0x24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	58024400 	.word	0x58024400
 8006f24:	03d09000 	.word	0x03d09000
 8006f28:	46000000 	.word	0x46000000
 8006f2c:	4c742400 	.word	0x4c742400
 8006f30:	4a742400 	.word	0x4a742400
 8006f34:	4bbebc20 	.word	0x4bbebc20

08006f38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	@ 0x24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f40:	4ba1      	ldr	r3, [pc, #644]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f44:	f003 0303 	and.w	r3, r3, #3
 8006f48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f4a:	4b9f      	ldr	r3, [pc, #636]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4e:	0d1b      	lsrs	r3, r3, #20
 8006f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f56:	4b9c      	ldr	r3, [pc, #624]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f62:	4b99      	ldr	r3, [pc, #612]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f66:	08db      	lsrs	r3, r3, #3
 8006f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8111 	beq.w	80071a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	f000 8083 	beq.w	8007094 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	f200 80a1 	bhi.w	80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d056      	beq.n	8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fa2:	e099      	b.n	80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa4:	4b88      	ldr	r3, [pc, #544]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d02d      	beq.n	800700c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fb0:	4b85      	ldr	r3, [pc, #532]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	08db      	lsrs	r3, r3, #3
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	4a84      	ldr	r2, [pc, #528]	@ (80071cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	ee07 3a90 	vmov	s15, r3
 8006fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fda:	4b7b      	ldr	r3, [pc, #492]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007006:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800700a:	e087      	b.n	800711c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007016:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800701a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701e:	4b6a      	ldr	r3, [pc, #424]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007032:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800704e:	e065      	b.n	800711c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800705e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007062:	4b59      	ldr	r3, [pc, #356]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007072:	ed97 6a03 	vldr	s12, [r7, #12]
 8007076:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800707a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007092:	e043      	b.n	800711c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a6:	4b48      	ldr	r3, [pc, #288]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d6:	e021      	b.n	800711c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80070e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ea:	4b37      	ldr	r3, [pc, #220]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800710e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800711a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800711c:	4b2a      	ldr	r3, [pc, #168]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800711e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007120:	0a5b      	lsrs	r3, r3, #9
 8007122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007136:	edd7 6a07 	vldr	s13, [r7, #28]
 800713a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007142:	ee17 2a90 	vmov	r2, s15
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800714a:	4b1f      	ldr	r3, [pc, #124]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714e:	0c1b      	lsrs	r3, r3, #16
 8007150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007160:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007164:	edd7 6a07 	vldr	s13, [r7, #28]
 8007168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007170:	ee17 2a90 	vmov	r2, s15
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007178:	4b13      	ldr	r3, [pc, #76]	@ (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717c:	0e1b      	lsrs	r3, r3, #24
 800717e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800718e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007192:	edd7 6a07 	vldr	s13, [r7, #28]
 8007196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800719e:	ee17 2a90 	vmov	r2, s15
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071a6:	e008      	b.n	80071ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	609a      	str	r2, [r3, #8]
}
 80071ba:	bf00      	nop
 80071bc:	3724      	adds	r7, #36	@ 0x24
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	58024400 	.word	0x58024400
 80071cc:	03d09000 	.word	0x03d09000
 80071d0:	46000000 	.word	0x46000000
 80071d4:	4c742400 	.word	0x4c742400
 80071d8:	4a742400 	.word	0x4a742400
 80071dc:	4bbebc20 	.word	0x4bbebc20

080071e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b089      	sub	sp, #36	@ 0x24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071e8:	4ba0      	ldr	r3, [pc, #640]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ec:	f003 0303 	and.w	r3, r3, #3
 80071f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80071f2:	4b9e      	ldr	r3, [pc, #632]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f6:	091b      	lsrs	r3, r3, #4
 80071f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80071fe:	4b9b      	ldr	r3, [pc, #620]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007208:	4b98      	ldr	r3, [pc, #608]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800720a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800720c:	08db      	lsrs	r3, r3, #3
 800720e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	fb02 f303 	mul.w	r3, r2, r3
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007220:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 8111 	beq.w	800744e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	2b02      	cmp	r3, #2
 8007230:	f000 8083 	beq.w	800733a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b02      	cmp	r3, #2
 8007238:	f200 80a1 	bhi.w	800737e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d056      	beq.n	80072f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007248:	e099      	b.n	800737e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800724a:	4b88      	ldr	r3, [pc, #544]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b00      	cmp	r3, #0
 8007254:	d02d      	beq.n	80072b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007256:	4b85      	ldr	r3, [pc, #532]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	08db      	lsrs	r3, r3, #3
 800725c:	f003 0303 	and.w	r3, r3, #3
 8007260:	4a83      	ldr	r2, [pc, #524]	@ (8007470 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007262:	fa22 f303 	lsr.w	r3, r2, r3
 8007266:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007280:	4b7a      	ldr	r3, [pc, #488]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007288:	ee07 3a90 	vmov	s15, r3
 800728c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007290:	ed97 6a03 	vldr	s12, [r7, #12]
 8007294:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072b0:	e087      	b.n	80073c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	ee07 3a90 	vmov	s15, r3
 80072b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072bc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007478 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80072c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c4:	4b69      	ldr	r3, [pc, #420]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072cc:	ee07 3a90 	vmov	s15, r3
 80072d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f4:	e065      	b.n	80073c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007300:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800747c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007308:	4b58      	ldr	r3, [pc, #352]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800730a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007310:	ee07 3a90 	vmov	s15, r3
 8007314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007318:	ed97 6a03 	vldr	s12, [r7, #12]
 800731c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800732c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007334:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007338:	e043      	b.n	80073c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	ee07 3a90 	vmov	s15, r3
 8007340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007344:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734c:	4b47      	ldr	r3, [pc, #284]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800734e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007354:	ee07 3a90 	vmov	s15, r3
 8007358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007360:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007378:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800737c:	e021      	b.n	80073c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	ee07 3a90 	vmov	s15, r3
 8007384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007388:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007478 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800738c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007390:	4b36      	ldr	r3, [pc, #216]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007398:	ee07 3a90 	vmov	s15, r3
 800739c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80073c2:	4b2a      	ldr	r3, [pc, #168]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c6:	0a5b      	lsrs	r3, r3, #9
 80073c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073cc:	ee07 3a90 	vmov	s15, r3
 80073d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e8:	ee17 2a90 	vmov	r2, s15
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80073f0:	4b1e      	ldr	r3, [pc, #120]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f4:	0c1b      	lsrs	r3, r3, #16
 80073f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800740a:	edd7 6a07 	vldr	s13, [r7, #28]
 800740e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007416:	ee17 2a90 	vmov	r2, s15
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800741e:	4b13      	ldr	r3, [pc, #76]	@ (800746c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007422:	0e1b      	lsrs	r3, r3, #24
 8007424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007428:	ee07 3a90 	vmov	s15, r3
 800742c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007430:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007434:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007438:	edd7 6a07 	vldr	s13, [r7, #28]
 800743c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007444:	ee17 2a90 	vmov	r2, s15
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800744c:	e008      	b.n	8007460 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	609a      	str	r2, [r3, #8]
}
 8007460:	bf00      	nop
 8007462:	3724      	adds	r7, #36	@ 0x24
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	58024400 	.word	0x58024400
 8007470:	03d09000 	.word	0x03d09000
 8007474:	46000000 	.word	0x46000000
 8007478:	4c742400 	.word	0x4c742400
 800747c:	4a742400 	.word	0x4a742400
 8007480:	4bbebc20 	.word	0x4bbebc20

08007484 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007492:	4b53      	ldr	r3, [pc, #332]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b03      	cmp	r3, #3
 800749c:	d101      	bne.n	80074a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e099      	b.n	80075d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074a2:	4b4f      	ldr	r3, [pc, #316]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a4e      	ldr	r2, [pc, #312]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ae:	f7fa f8eb 	bl	8001688 <HAL_GetTick>
 80074b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074b4:	e008      	b.n	80074c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074b6:	f7fa f8e7 	bl	8001688 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e086      	b.n	80075d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074c8:	4b45      	ldr	r3, [pc, #276]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1f0      	bne.n	80074b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074d4:	4b42      	ldr	r3, [pc, #264]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	031b      	lsls	r3, r3, #12
 80074e2:	493f      	ldr	r1, [pc, #252]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	025b      	lsls	r3, r3, #9
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	3b01      	subs	r3, #1
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	3b01      	subs	r3, #1
 8007512:	061b      	lsls	r3, r3, #24
 8007514:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007518:	4931      	ldr	r1, [pc, #196]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800751a:	4313      	orrs	r3, r2
 800751c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800751e:	4b30      	ldr	r3, [pc, #192]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007522:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	492d      	ldr	r1, [pc, #180]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800752c:	4313      	orrs	r3, r2
 800752e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007530:	4b2b      	ldr	r3, [pc, #172]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007534:	f023 0220 	bic.w	r2, r3, #32
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	4928      	ldr	r1, [pc, #160]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800753e:	4313      	orrs	r3, r2
 8007540:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007542:	4b27      	ldr	r3, [pc, #156]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007546:	4a26      	ldr	r2, [pc, #152]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007548:	f023 0310 	bic.w	r3, r3, #16
 800754c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800754e:	4b24      	ldr	r3, [pc, #144]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007552:	4b24      	ldr	r3, [pc, #144]	@ (80075e4 <RCCEx_PLL2_Config+0x160>)
 8007554:	4013      	ands	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	69d2      	ldr	r2, [r2, #28]
 800755a:	00d2      	lsls	r2, r2, #3
 800755c:	4920      	ldr	r1, [pc, #128]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800755e:	4313      	orrs	r3, r2
 8007560:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007562:	4b1f      	ldr	r3, [pc, #124]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007566:	4a1e      	ldr	r2, [pc, #120]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007568:	f043 0310 	orr.w	r3, r3, #16
 800756c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d106      	bne.n	8007582 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007574:	4b1a      	ldr	r3, [pc, #104]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007578:	4a19      	ldr	r2, [pc, #100]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800757a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800757e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007580:	e00f      	b.n	80075a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d106      	bne.n	8007596 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007588:	4b15      	ldr	r3, [pc, #84]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758c:	4a14      	ldr	r2, [pc, #80]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800758e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007594:	e005      	b.n	80075a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007596:	4b12      	ldr	r3, [pc, #72]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	4a11      	ldr	r2, [pc, #68]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800759c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075a2:	4b0f      	ldr	r3, [pc, #60]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a0e      	ldr	r2, [pc, #56]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80075a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ae:	f7fa f86b 	bl	8001688 <HAL_GetTick>
 80075b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075b4:	e008      	b.n	80075c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075b6:	f7fa f867 	bl	8001688 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e006      	b.n	80075d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075c8:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0f0      	beq.n	80075b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	58024400 	.word	0x58024400
 80075e4:	ffff0007 	.word	0xffff0007

080075e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075f6:	4b53      	ldr	r3, [pc, #332]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80075f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d101      	bne.n	8007606 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e099      	b.n	800773a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007606:	4b4f      	ldr	r3, [pc, #316]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a4e      	ldr	r2, [pc, #312]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800760c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007612:	f7fa f839 	bl	8001688 <HAL_GetTick>
 8007616:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007618:	e008      	b.n	800762c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800761a:	f7fa f835 	bl	8001688 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e086      	b.n	800773a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800762c:	4b45      	ldr	r3, [pc, #276]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f0      	bne.n	800761a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007638:	4b42      	ldr	r3, [pc, #264]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	051b      	lsls	r3, r3, #20
 8007646:	493f      	ldr	r1, [pc, #252]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007648:	4313      	orrs	r3, r2
 800764a:	628b      	str	r3, [r1, #40]	@ 0x28
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	3b01      	subs	r3, #1
 8007652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	3b01      	subs	r3, #1
 800765c:	025b      	lsls	r3, r3, #9
 800765e:	b29b      	uxth	r3, r3
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	3b01      	subs	r3, #1
 8007668:	041b      	lsls	r3, r3, #16
 800766a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	3b01      	subs	r3, #1
 8007676:	061b      	lsls	r3, r3, #24
 8007678:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800767c:	4931      	ldr	r1, [pc, #196]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800767e:	4313      	orrs	r3, r2
 8007680:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007682:	4b30      	ldr	r3, [pc, #192]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007686:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	492d      	ldr	r1, [pc, #180]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007690:	4313      	orrs	r3, r2
 8007692:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007694:	4b2b      	ldr	r3, [pc, #172]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007698:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	4928      	ldr	r1, [pc, #160]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076a6:	4b27      	ldr	r3, [pc, #156]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076aa:	4a26      	ldr	r2, [pc, #152]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076b2:	4b24      	ldr	r3, [pc, #144]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076b6:	4b24      	ldr	r3, [pc, #144]	@ (8007748 <RCCEx_PLL3_Config+0x160>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	69d2      	ldr	r2, [r2, #28]
 80076be:	00d2      	lsls	r2, r2, #3
 80076c0:	4920      	ldr	r1, [pc, #128]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d106      	bne.n	80076e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076dc:	4a19      	ldr	r2, [pc, #100]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80076e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076e4:	e00f      	b.n	8007706 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d106      	bne.n	80076fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076ec:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f0:	4a14      	ldr	r2, [pc, #80]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80076f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076f8:	e005      	b.n	8007706 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80076fa:	4b12      	ldr	r3, [pc, #72]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fe:	4a11      	ldr	r2, [pc, #68]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007700:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007704:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007706:	4b0f      	ldr	r3, [pc, #60]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a0e      	ldr	r2, [pc, #56]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800770c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007712:	f7f9 ffb9 	bl	8001688 <HAL_GetTick>
 8007716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007718:	e008      	b.n	800772c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800771a:	f7f9 ffb5 	bl	8001688 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d901      	bls.n	800772c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e006      	b.n	800773a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800772c:	4b05      	ldr	r3, [pc, #20]	@ (8007744 <RCCEx_PLL3_Config+0x15c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0f0      	beq.n	800771a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	58024400 	.word	0x58024400
 8007748:	ffff0007 	.word	0xffff0007

0800774c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	@ 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e075      	b.n	800784a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d105      	bne.n	8007776 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7f9 fb89 	bl	8000e88 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2204      	movs	r2, #4
 800777a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f868 	bl	8007854 <HAL_SD_InitCard>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e05d      	b.n	800784a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800778e:	f107 0308 	add.w	r3, r7, #8
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fbed 	bl	8007f74 <HAL_SD_GetCardStatus>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e052      	b.n	800784a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80077a4:	7e3b      	ldrb	r3, [r7, #24]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80077aa:	7e7b      	ldrb	r3, [r7, #25]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d10a      	bne.n	80077ce <HAL_SD_Init+0x82>
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d102      	bne.n	80077c4 <HAL_SD_Init+0x78>
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80077cc:	e00b      	b.n	80077e6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d104      	bne.n	80077e0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80077de:	e002      	b.n	80077e6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fcab 	bl	8008148 <HAL_SD_ConfigWideBusOperation>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e026      	b.n	800784a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80077fc:	f7f9 ff44 	bl	8001688 <HAL_GetTick>
 8007800:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007802:	e011      	b.n	8007828 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007804:	f7f9 ff40 	bl	8001688 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007812:	d109      	bne.n	8007828 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800781a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e010      	b.n	800784a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fd9f 	bl	800836c <HAL_SD_GetCardState>
 800782e:	4603      	mov	r3, r0
 8007830:	2b04      	cmp	r3, #4
 8007832:	d1e7      	bne.n	8007804 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3728      	adds	r7, #40	@ 0x28
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007854:	b590      	push	{r4, r7, lr}
 8007856:	b08d      	sub	sp, #52	@ 0x34
 8007858:	af02      	add	r7, sp, #8
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007860:	2300      	movs	r3, #0
 8007862:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007864:	2300      	movs	r3, #0
 8007866:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007868:	2300      	movs	r3, #0
 800786a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800786c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007870:	f04f 0100 	mov.w	r1, #0
 8007874:	f7fe fc76 	bl	8006164 <HAL_RCCEx_GetPeriphCLKFreq>
 8007878:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d109      	bne.n	8007894 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800788e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e070      	b.n	8007976 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007896:	0a1b      	lsrs	r3, r3, #8
 8007898:	4a39      	ldr	r2, [pc, #228]	@ (8007980 <HAL_SD_InitCard+0x12c>)
 800789a:	fba2 2303 	umull	r2, r3, r2, r3
 800789e:	091b      	lsrs	r3, r3, #4
 80078a0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681c      	ldr	r4, [r3, #0]
 80078a6:	466a      	mov	r2, sp
 80078a8:	f107 0318 	add.w	r3, r7, #24
 80078ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078b0:	e882 0003 	stmia.w	r2, {r0, r1}
 80078b4:	f107 030c 	add.w	r3, r7, #12
 80078b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078ba:	4620      	mov	r0, r4
 80078bc:	f003 ff22 	bl	800b704 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f003 ff54 	bl	800b772 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d005      	beq.n	80078dc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80078e2:	4a28      	ldr	r2, [pc, #160]	@ (8007984 <HAL_SD_InitCard+0x130>)
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ea:	3301      	adds	r3, #1
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7f9 fed7 	bl	80016a0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fe28 	bl	8008548 <SD_PowerON>
 80078f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e02e      	b.n	8007976 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fd47 	bl	80083ac <SD_InitCard>
 800791e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e01b      	b.n	8007976 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007946:	4618      	mov	r0, r3
 8007948:	f003 ffa8 	bl	800b89c <SDMMC_CmdBlockLength>
 800794c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00f      	beq.n	8007974 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a0b      	ldr	r2, [pc, #44]	@ (8007988 <HAL_SD_InitCard+0x134>)
 800795a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	431a      	orrs	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	372c      	adds	r7, #44	@ 0x2c
 800797a:	46bd      	mov	sp, r7
 800797c:	bd90      	pop	{r4, r7, pc}
 800797e:	bf00      	nop
 8007980:	014f8b59 	.word	0x014f8b59
 8007984:	00012110 	.word	0x00012110
 8007988:	1fe00fff 	.word	0x1fe00fff

0800798c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08c      	sub	sp, #48	@ 0x30
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d107      	bne.n	80079b4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e08d      	b.n	8007ad0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b01      	cmp	r3, #1
 80079be:	f040 8086 	bne.w	8007ace <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80079c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	441a      	add	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d907      	bls.n	80079e6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079da:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e074      	b.n	8007ad0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2203      	movs	r2, #3
 80079ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2200      	movs	r2, #0
 80079f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	025a      	lsls	r2, r3, #9
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d002      	beq.n	8007a12 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 8007a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0e:	025b      	lsls	r3, r3, #9
 8007a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a16:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	025b      	lsls	r3, r3, #9
 8007a1c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a1e:	2390      	movs	r3, #144	@ 0x90
 8007a20:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a22:	2302      	movs	r3, #2
 8007a24:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f107 0210 	add.w	r2, r7, #16
 8007a36:	4611      	mov	r1, r2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f003 ff03 	bl	800b844 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a4c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d90a      	bls.n	8007a7a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2282      	movs	r2, #130	@ 0x82
 8007a68:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a70:	4618      	mov	r0, r3
 8007a72:	f003 ff59 	bl	800b928 <SDMMC_CmdReadMultiBlock>
 8007a76:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007a78:	e009      	b.n	8007a8e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2281      	movs	r2, #129	@ 0x81
 8007a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a86:	4618      	mov	r0, r3
 8007a88:	f003 ff2b 	bl	800b8e2 <SDMMC_CmdReadSingleBlock>
 8007a8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d012      	beq.n	8007aba <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a0f      	ldr	r2, [pc, #60]	@ (8007ad8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007a9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e00a      	b.n	8007ad0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007ac8:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e000      	b.n	8007ad0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007ace:	2302      	movs	r3, #2
  }
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3730      	adds	r7, #48	@ 0x30
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	1fe00fff 	.word	0x1fe00fff

08007adc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08c      	sub	sp, #48	@ 0x30
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d107      	bne.n	8007b04 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007af8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e08d      	b.n	8007c20 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	f040 8086 	bne.w	8007c1e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	441a      	add	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d907      	bls.n	8007b36 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b2a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e074      	b.n	8007c20 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2203      	movs	r2, #3
 8007b3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2200      	movs	r2, #0
 8007b44:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	025a      	lsls	r2, r3, #9
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d002      	beq.n	8007b62 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	025b      	lsls	r3, r3, #9
 8007b60:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b66:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	025b      	lsls	r3, r3, #9
 8007b6c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007b6e:	2390      	movs	r3, #144	@ 0x90
 8007b70:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007b72:	2300      	movs	r3, #0
 8007b74:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f107 0210 	add.w	r2, r7, #16
 8007b86:	4611      	mov	r1, r2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f003 fe5b 	bl	800b844 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b9c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2201      	movs	r2, #1
 8007bac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d90a      	bls.n	8007bca <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	22a0      	movs	r2, #160	@ 0xa0
 8007bb8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f003 fef7 	bl	800b9b4 <SDMMC_CmdWriteMultiBlock>
 8007bc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007bc8:	e009      	b.n	8007bde <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2290      	movs	r2, #144	@ 0x90
 8007bce:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f003 fec9 	bl	800b96e <SDMMC_CmdWriteSingleBlock>
 8007bdc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d012      	beq.n	8007c0a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a0f      	ldr	r2, [pc, #60]	@ (8007c28 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007bea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e00a      	b.n	8007c20 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8007c18:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e000      	b.n	8007c20 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007c1e:	2302      	movs	r3, #2
  }
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3730      	adds	r7, #48	@ 0x30
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	1fe00fff 	.word	0x1fe00fff

08007c2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c3a:	0f9b      	lsrs	r3, r3, #30
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c46:	0e9b      	lsrs	r3, r3, #26
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f003 030f 	and.w	r3, r3, #15
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c58:	0e1b      	lsrs	r3, r3, #24
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c6a:	0c1b      	lsrs	r3, r3, #16
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c76:	0a1b      	lsrs	r3, r3, #8
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c8c:	0d1b      	lsrs	r3, r3, #20
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c98:	0c1b      	lsrs	r3, r3, #16
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007caa:	0bdb      	lsrs	r3, r3, #15
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cbc:	0b9b      	lsrs	r3, r3, #14
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cce:	0b5b      	lsrs	r3, r3, #13
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ce0:	0b1b      	lsrs	r3, r3, #12
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d163      	bne.n	8007dc4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d00:	009a      	lsls	r2, r3, #2
 8007d02:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007d06:	4013      	ands	r3, r2
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8007d0c:	0f92      	lsrs	r2, r2, #30
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d18:	0edb      	lsrs	r3, r3, #27
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d2a:	0e1b      	lsrs	r3, r3, #24
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d3c:	0d5b      	lsrs	r3, r3, #21
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d4e:	0c9b      	lsrs	r3, r3, #18
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d60:	0bdb      	lsrs	r3, r3, #15
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	7e1b      	ldrb	r3, [r3, #24]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	3302      	adds	r3, #2
 8007d84:	2201      	movs	r2, #1
 8007d86:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007d8e:	fb03 f202 	mul.w	r2, r3, r2
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	7a1b      	ldrb	r3, [r3, #8]
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	f003 030f 	and.w	r3, r3, #15
 8007da0:	2201      	movs	r2, #1
 8007da2:	409a      	lsls	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007db0:	0a52      	lsrs	r2, r2, #9
 8007db2:	fb03 f202 	mul.w	r2, r3, r2
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8007dc2:	e031      	b.n	8007e28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d11d      	bne.n	8007e08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dd0:	041b      	lsls	r3, r3, #16
 8007dd2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dda:	0c1b      	lsrs	r3, r3, #16
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	3301      	adds	r3, #1
 8007de8:	029a      	lsls	r2, r3, #10
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	655a      	str	r2, [r3, #84]	@ 0x54
 8007e06:	e00f      	b.n	8007e28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a58      	ldr	r2, [pc, #352]	@ (8007f70 <HAL_SD_GetCardCSD+0x344>)
 8007e0e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e09d      	b.n	8007f64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e2c:	0b9b      	lsrs	r3, r3, #14
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e3e:	09db      	lsrs	r3, r3, #7
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e60:	0fdb      	lsrs	r3, r3, #31
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e6c:	0f5b      	lsrs	r3, r3, #29
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	f003 0303 	and.w	r3, r3, #3
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e7e:	0e9b      	lsrs	r3, r3, #26
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e90:	0d9b      	lsrs	r3, r3, #22
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f003 030f 	and.w	r3, r3, #15
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ea2:	0d5b      	lsrs	r3, r3, #21
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ebe:	0c1b      	lsrs	r3, r3, #16
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ed2:	0bdb      	lsrs	r3, r3, #15
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ee6:	0b9b      	lsrs	r3, r3, #14
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007efa:	0b5b      	lsrs	r3, r3, #13
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f0e:	0b1b      	lsrs	r3, r3, #12
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f22:	0a9b      	lsrs	r3, r3, #10
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f36:	0a1b      	lsrs	r3, r3, #8
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	1fe00fff 	.word	0x1fe00fff

08007f74 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b094      	sub	sp, #80	@ 0x50
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d101      	bne.n	8007f94 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e0a7      	b.n	80080e4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007f94:	f107 0308 	add.w	r3, r7, #8
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fb62 	bl	8008664 <SD_SendSDStatus>
 8007fa0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d011      	beq.n	8007fcc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a4f      	ldr	r2, [pc, #316]	@ (80080ec <HAL_SD_GetCardStatus+0x178>)
 8007fae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007fca:	e070      	b.n	80080ae <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	099b      	lsrs	r3, r3, #6
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f003 0303 	and.w	r3, r3, #3
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	095b      	lsrs	r3, r3, #5
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	0a1b      	lsrs	r3, r3, #8
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	0e1b      	lsrs	r3, r3, #24
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	4313      	orrs	r3, r2
 8008000:	b29a      	uxth	r2, r3
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	061a      	lsls	r2, r3, #24
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	021b      	lsls	r3, r3, #8
 800800e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008012:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	0a1b      	lsrs	r3, r3, #8
 8008018:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800801c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	0e1b      	lsrs	r3, r3, #24
 8008022:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	b2da      	uxtb	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	0a1b      	lsrs	r3, r3, #8
 8008034:	b2da      	uxtb	r2, r3
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	0d1b      	lsrs	r3, r3, #20
 800803e:	b2db      	uxtb	r3, r3
 8008040:	f003 030f 	and.w	r3, r3, #15
 8008044:	b2da      	uxtb	r2, r3
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	0c1b      	lsrs	r3, r3, #16
 800804e:	b29b      	uxth	r3, r3
 8008050:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008054:	b29a      	uxth	r2, r3
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	b29b      	uxth	r3, r3
 800805a:	b2db      	uxtb	r3, r3
 800805c:	b29b      	uxth	r3, r3
 800805e:	4313      	orrs	r3, r2
 8008060:	b29a      	uxth	r2, r3
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	0a9b      	lsrs	r3, r3, #10
 800806a:	b2db      	uxtb	r3, r3
 800806c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008070:	b2da      	uxtb	r2, r3
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	0a1b      	lsrs	r3, r3, #8
 800807a:	b2db      	uxtb	r3, r3
 800807c:	f003 0303 	and.w	r3, r3, #3
 8008080:	b2da      	uxtb	r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	091b      	lsrs	r3, r3, #4
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 030f 	and.w	r3, r3, #15
 8008090:	b2da      	uxtb	r2, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 030f 	and.w	r3, r3, #15
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	0e1b      	lsrs	r3, r3, #24
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80080b6:	4618      	mov	r0, r3
 80080b8:	f003 fbf0 	bl	800b89c <SDMMC_CmdBlockLength>
 80080bc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80080be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00d      	beq.n	80080e0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a08      	ldr	r2, [pc, #32]	@ (80080ec <HAL_SD_GetCardStatus+0x178>)
 80080ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080d0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 80080e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3750      	adds	r7, #80	@ 0x50
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	1fe00fff 	.word	0x1fe00fff

080080f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008148:	b590      	push	{r4, r7, lr}
 800814a:	b08d      	sub	sp, #52	@ 0x34
 800814c:	af02      	add	r7, sp, #8
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2203      	movs	r2, #3
 800815c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008164:	2b03      	cmp	r3, #3
 8008166:	d02e      	beq.n	80081c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800816e:	d106      	bne.n	800817e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008174:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	635a      	str	r2, [r3, #52]	@ 0x34
 800817c:	e029      	b.n	80081d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008184:	d10a      	bne.n	800819c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fb64 	bl	8008854 <SD_WideBus_Enable>
 800818c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	635a      	str	r2, [r3, #52]	@ 0x34
 800819a:	e01a      	b.n	80081d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10a      	bne.n	80081b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fba1 	bl	80088ea <SD_WideBus_Disable>
 80081a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80081b6:	e00c      	b.n	80081d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80081c4:	e005      	b.n	80081d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ca:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a5f      	ldr	r2, [pc, #380]	@ (800835c <HAL_SD_ConfigWideBusOperation+0x214>)
 80081e0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80081e8:	e096      	b.n	8008318 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80081ea:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80081ee:	f04f 0100 	mov.w	r1, #0
 80081f2:	f7fd ffb7 	bl	8006164 <HAL_RCCEx_GetPeriphCLKFreq>
 80081f6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8083 	beq.w	8008306 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	695a      	ldr	r2, [r3, #20]
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	4950      	ldr	r1, [pc, #320]	@ (8008360 <HAL_SD_ConfigWideBusOperation+0x218>)
 800821e:	fba1 1303 	umull	r1, r3, r1, r3
 8008222:	0e1b      	lsrs	r3, r3, #24
 8008224:	429a      	cmp	r2, r3
 8008226:	d303      	bcc.n	8008230 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	61bb      	str	r3, [r7, #24]
 800822e:	e05a      	b.n	80082e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008238:	d103      	bne.n	8008242 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	61bb      	str	r3, [r7, #24]
 8008240:	e051      	b.n	80082e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800824a:	d126      	bne.n	800829a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10e      	bne.n	8008272 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	4a43      	ldr	r2, [pc, #268]	@ (8008364 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d906      	bls.n	800826a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4a40      	ldr	r2, [pc, #256]	@ (8008360 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008260:	fba2 2303 	umull	r2, r3, r2, r3
 8008264:	0e5b      	lsrs	r3, r3, #25
 8008266:	61bb      	str	r3, [r7, #24]
 8008268:	e03d      	b.n	80082e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	61bb      	str	r3, [r7, #24]
 8008270:	e039      	b.n	80082e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	fbb2 f3f3 	udiv	r3, r2, r3
 800827e:	4a39      	ldr	r2, [pc, #228]	@ (8008364 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d906      	bls.n	8008292 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	4a36      	ldr	r2, [pc, #216]	@ (8008360 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008288:	fba2 2303 	umull	r2, r3, r2, r3
 800828c:	0e5b      	lsrs	r3, r3, #25
 800828e:	61bb      	str	r3, [r7, #24]
 8008290:	e029      	b.n	80082e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	61bb      	str	r3, [r7, #24]
 8008298:	e025      	b.n	80082e6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10e      	bne.n	80082c0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4a30      	ldr	r2, [pc, #192]	@ (8008368 <HAL_SD_ConfigWideBusOperation+0x220>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d906      	bls.n	80082b8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	4a2c      	ldr	r2, [pc, #176]	@ (8008360 <HAL_SD_ConfigWideBusOperation+0x218>)
 80082ae:	fba2 2303 	umull	r2, r3, r2, r3
 80082b2:	0e1b      	lsrs	r3, r3, #24
 80082b4:	61bb      	str	r3, [r7, #24]
 80082b6:	e016      	b.n	80082e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	61bb      	str	r3, [r7, #24]
 80082be:	e012      	b.n	80082e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	69fa      	ldr	r2, [r7, #28]
 80082c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082cc:	4a26      	ldr	r2, [pc, #152]	@ (8008368 <HAL_SD_ConfigWideBusOperation+0x220>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d906      	bls.n	80082e0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	4a22      	ldr	r2, [pc, #136]	@ (8008360 <HAL_SD_ConfigWideBusOperation+0x218>)
 80082d6:	fba2 2303 	umull	r2, r3, r2, r3
 80082da:	0e1b      	lsrs	r3, r3, #24
 80082dc:	61bb      	str	r3, [r7, #24]
 80082de:	e002      	b.n	80082e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681c      	ldr	r4, [r3, #0]
 80082ea:	466a      	mov	r2, sp
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80082f8:	f107 0308 	add.w	r3, r7, #8
 80082fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082fe:	4620      	mov	r0, r4
 8008300:	f003 fa00 	bl	800b704 <SDMMC_Init>
 8008304:	e008      	b.n	8008318 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800830a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008320:	4618      	mov	r0, r3
 8008322:	f003 fabb 	bl	800b89c <SDMMC_CmdBlockLength>
 8008326:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a0a      	ldr	r2, [pc, #40]	@ (800835c <HAL_SD_ConfigWideBusOperation+0x214>)
 8008334:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008354:	4618      	mov	r0, r3
 8008356:	372c      	adds	r7, #44	@ 0x2c
 8008358:	46bd      	mov	sp, r7
 800835a:	bd90      	pop	{r4, r7, pc}
 800835c:	1fe00fff 	.word	0x1fe00fff
 8008360:	55e63b89 	.word	0x55e63b89
 8008364:	02faf080 	.word	0x02faf080
 8008368:	017d7840 	.word	0x017d7840

0800836c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008378:	f107 030c 	add.w	r3, r7, #12
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa40 	bl	8008804 <SD_SendStatus>
 8008384:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d005      	beq.n	8008398 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	0a5b      	lsrs	r3, r3, #9
 800839c:	f003 030f 	and.w	r3, r3, #15
 80083a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80083a2:	693b      	ldr	r3, [r7, #16]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b090      	sub	sp, #64	@ 0x40
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80083b8:	f7f9 f966 	bl	8001688 <HAL_GetTick>
 80083bc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f003 f9e6 	bl	800b794 <SDMMC_GetPowerState>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d102      	bne.n	80083d4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80083ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80083d2:	e0b5      	b.n	8008540 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d02e      	beq.n	800843a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f003 fbf3 	bl	800bbcc <SDMMC_CmdSendCID>
 80083e6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80083e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <SD_InitCard+0x46>
    {
      return errorstate;
 80083ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f0:	e0a6      	b.n	8008540 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2100      	movs	r1, #0
 80083f8:	4618      	mov	r0, r3
 80083fa:	f003 fa10 	bl	800b81e <SDMMC_GetResponse>
 80083fe:	4602      	mov	r2, r0
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2104      	movs	r1, #4
 800840a:	4618      	mov	r0, r3
 800840c:	f003 fa07 	bl	800b81e <SDMMC_GetResponse>
 8008410:	4602      	mov	r2, r0
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2108      	movs	r1, #8
 800841c:	4618      	mov	r0, r3
 800841e:	f003 f9fe 	bl	800b81e <SDMMC_GetResponse>
 8008422:	4602      	mov	r2, r0
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	210c      	movs	r1, #12
 800842e:	4618      	mov	r0, r3
 8008430:	f003 f9f5 	bl	800b81e <SDMMC_GetResponse>
 8008434:	4602      	mov	r2, r0
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843e:	2b03      	cmp	r3, #3
 8008440:	d01d      	beq.n	800847e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008442:	e019      	b.n	8008478 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f107 020a 	add.w	r2, r7, #10
 800844c:	4611      	mov	r1, r2
 800844e:	4618      	mov	r0, r3
 8008450:	f003 fbfb 	bl	800bc4a <SDMMC_CmdSetRelAdd>
 8008454:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <SD_InitCard+0xb4>
      {
        return errorstate;
 800845c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845e:	e06f      	b.n	8008540 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008460:	f7f9 f912 	bl	8001688 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800846e:	4293      	cmp	r3, r2
 8008470:	d902      	bls.n	8008478 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008472:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008476:	e063      	b.n	8008540 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008478:	897b      	ldrh	r3, [r7, #10]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0e2      	beq.n	8008444 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008482:	2b03      	cmp	r3, #3
 8008484:	d036      	beq.n	80084f4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008486:	897b      	ldrh	r3, [r7, #10]
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008496:	041b      	lsls	r3, r3, #16
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f003 fbb5 	bl	800bc0a <SDMMC_CmdSendCSD>
 80084a0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80084a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <SD_InitCard+0x100>
    {
      return errorstate;
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	e049      	b.n	8008540 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2100      	movs	r1, #0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f003 f9b3 	bl	800b81e <SDMMC_GetResponse>
 80084b8:	4602      	mov	r2, r0
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2104      	movs	r1, #4
 80084c4:	4618      	mov	r0, r3
 80084c6:	f003 f9aa 	bl	800b81e <SDMMC_GetResponse>
 80084ca:	4602      	mov	r2, r0
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2108      	movs	r1, #8
 80084d6:	4618      	mov	r0, r3
 80084d8:	f003 f9a1 	bl	800b81e <SDMMC_GetResponse>
 80084dc:	4602      	mov	r2, r0
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	210c      	movs	r1, #12
 80084e8:	4618      	mov	r0, r3
 80084ea:	f003 f998 	bl	800b81e <SDMMC_GetResponse>
 80084ee:	4602      	mov	r2, r0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2104      	movs	r1, #4
 80084fa:	4618      	mov	r0, r3
 80084fc:	f003 f98f 	bl	800b81e <SDMMC_GetResponse>
 8008500:	4603      	mov	r3, r0
 8008502:	0d1a      	lsrs	r2, r3, #20
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008508:	f107 030c 	add.w	r3, r7, #12
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7ff fb8c 	bl	8007c2c <HAL_SD_GetCardCSD>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800851a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800851e:	e00f      	b.n	8008540 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008528:	041b      	lsls	r3, r3, #16
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f003 fa64 	bl	800b9fa <SDMMC_CmdSelDesel>
 8008532:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <SD_InitCard+0x192>
  {
    return errorstate;
 800853a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853c:	e000      	b.n	8008540 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3740      	adds	r7, #64	@ 0x40
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4618      	mov	r0, r3
 8008562:	f003 fa6d 	bl	800ba40 <SDMMC_CmdGoIdleState>
 8008566:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <SD_PowerON+0x2a>
  {
    return errorstate;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	e072      	b.n	8008658 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f003 fa80 	bl	800ba7c <SDMMC_CmdOperCond>
 800857c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008584:	d10d      	bne.n	80085a2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4618      	mov	r0, r3
 8008592:	f003 fa55 	bl	800ba40 <SDMMC_CmdGoIdleState>
 8008596:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d004      	beq.n	80085a8 <SD_PowerON+0x60>
    {
      return errorstate;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	e05a      	b.n	8008658 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d137      	bne.n	8008620 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2100      	movs	r1, #0
 80085b6:	4618      	mov	r0, r3
 80085b8:	f003 fa80 	bl	800babc <SDMMC_CmdAppCommand>
 80085bc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d02d      	beq.n	8008620 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085c4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80085c8:	e046      	b.n	8008658 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2100      	movs	r1, #0
 80085d0:	4618      	mov	r0, r3
 80085d2:	f003 fa73 	bl	800babc <SDMMC_CmdAppCommand>
 80085d6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <SD_PowerON+0x9a>
    {
      return errorstate;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	e03a      	b.n	8008658 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	491e      	ldr	r1, [pc, #120]	@ (8008660 <SD_PowerON+0x118>)
 80085e8:	4618      	mov	r0, r3
 80085ea:	f003 fa8a 	bl	800bb02 <SDMMC_CmdAppOperCommand>
 80085ee:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80085fa:	e02d      	b.n	8008658 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2100      	movs	r1, #0
 8008602:	4618      	mov	r0, r3
 8008604:	f003 f90b 	bl	800b81e <SDMMC_GetResponse>
 8008608:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	0fdb      	lsrs	r3, r3, #31
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <SD_PowerON+0xce>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <SD_PowerON+0xd0>
 8008616:	2300      	movs	r3, #0
 8008618:	613b      	str	r3, [r7, #16]

    count++;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	3301      	adds	r3, #1
 800861e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008626:	4293      	cmp	r3, r2
 8008628:	d802      	bhi.n	8008630 <SD_PowerON+0xe8>
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d0cc      	beq.n	80085ca <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008636:	4293      	cmp	r3, r2
 8008638:	d902      	bls.n	8008640 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800863a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800863e:	e00b      	b.n	8008658 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	c1100000 	.word	0xc1100000

08008664 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08c      	sub	sp, #48	@ 0x30
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800866e:	f7f9 f80b 	bl	8001688 <HAL_GetTick>
 8008672:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2100      	movs	r1, #0
 800867e:	4618      	mov	r0, r3
 8008680:	f003 f8cd 	bl	800b81e <SDMMC_GetResponse>
 8008684:	4603      	mov	r3, r0
 8008686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800868a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800868e:	d102      	bne.n	8008696 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008690:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008694:	e0b0      	b.n	80087f8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2140      	movs	r1, #64	@ 0x40
 800869c:	4618      	mov	r0, r3
 800869e:	f003 f8fd 	bl	800b89c <SDMMC_CmdBlockLength>
 80086a2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	e0a0      	b.n	80087f8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086be:	041b      	lsls	r3, r3, #16
 80086c0:	4619      	mov	r1, r3
 80086c2:	4610      	mov	r0, r2
 80086c4:	f003 f9fa 	bl	800babc <SDMMC_CmdAppCommand>
 80086c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	e08d      	b.n	80087f8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086e0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80086e2:	2340      	movs	r3, #64	@ 0x40
 80086e4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80086e6:	2360      	movs	r3, #96	@ 0x60
 80086e8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80086ea:	2302      	movs	r3, #2
 80086ec:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80086f2:	2301      	movs	r3, #1
 80086f4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f107 0208 	add.w	r2, r7, #8
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f003 f89f 	bl	800b844 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4618      	mov	r0, r3
 800870c:	f003 fae2 	bl	800bcd4 <SDMMC_CmdStatusRegister>
 8008710:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d02b      	beq.n	8008770 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	e069      	b.n	80087f8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800872a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d013      	beq.n	800875a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008732:	2300      	movs	r3, #0
 8008734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008736:	e00d      	b.n	8008754 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f003 f80b 	bl	800b758 <SDMMC_ReadFIFO>
 8008742:	4602      	mov	r2, r0
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	601a      	str	r2, [r3, #0]
        pData++;
 8008748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874a:	3304      	adds	r3, #4
 800874c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800874e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008750:	3301      	adds	r3, #1
 8008752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008756:	2b07      	cmp	r3, #7
 8008758:	d9ee      	bls.n	8008738 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800875a:	f7f8 ff95 	bl	8001688 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008768:	d102      	bne.n	8008770 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800876a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800876e:	e043      	b.n	80087f8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008776:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0d2      	beq.n	8008724 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008784:	f003 0308 	and.w	r3, r3, #8
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800878c:	2308      	movs	r3, #8
 800878e:	e033      	b.n	80087f8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800879e:	2302      	movs	r3, #2
 80087a0:	e02a      	b.n	80087f8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d017      	beq.n	80087e0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80087b0:	2320      	movs	r3, #32
 80087b2:	e021      	b.n	80087f8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f002 ffcd 	bl	800b758 <SDMMC_ReadFIFO>
 80087be:	4602      	mov	r2, r0
 80087c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c2:	601a      	str	r2, [r3, #0]
    pData++;
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	3304      	adds	r3, #4
 80087c8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80087ca:	f7f8 ff5d 	bl	8001688 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087d8:	d102      	bne.n	80087e0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80087da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80087de:	e00b      	b.n	80087f8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1e2      	bne.n	80087b4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a03      	ldr	r2, [pc, #12]	@ (8008800 <SD_SendSDStatus+0x19c>)
 80087f4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3730      	adds	r7, #48	@ 0x30
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	18000f3a 	.word	0x18000f3a

08008804 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d102      	bne.n	800881a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008814:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008818:	e018      	b.n	800884c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008822:	041b      	lsls	r3, r3, #16
 8008824:	4619      	mov	r1, r3
 8008826:	4610      	mov	r0, r2
 8008828:	f003 fa31 	bl	800bc8e <SDMMC_CmdSendStatus>
 800882c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	e009      	b.n	800884c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2100      	movs	r1, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f002 ffed 	bl	800b81e <SDMMC_GetResponse>
 8008844:	4602      	mov	r2, r0
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	2300      	movs	r3, #0
 8008862:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f002 ffd7 	bl	800b81e <SDMMC_GetResponse>
 8008870:	4603      	mov	r3, r0
 8008872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800887a:	d102      	bne.n	8008882 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800887c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008880:	e02f      	b.n	80088e2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008882:	f107 030c 	add.w	r3, r7, #12
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f879 	bl	8008980 <SD_FindSCR>
 800888e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	e023      	b.n	80088e2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d01c      	beq.n	80088de <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ac:	041b      	lsls	r3, r3, #16
 80088ae:	4619      	mov	r1, r3
 80088b0:	4610      	mov	r0, r2
 80088b2:	f003 f903 	bl	800babc <SDMMC_CmdAppCommand>
 80088b6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	e00f      	b.n	80088e2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2102      	movs	r1, #2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f003 f93a 	bl	800bb42 <SDMMC_CmdBusWidth>
 80088ce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	e003      	b.n	80088e2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088da:	2300      	movs	r3, #0
 80088dc:	e001      	b.n	80088e2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3718      	adds	r7, #24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b086      	sub	sp, #24
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	2300      	movs	r3, #0
 80088f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2100      	movs	r1, #0
 8008900:	4618      	mov	r0, r3
 8008902:	f002 ff8c 	bl	800b81e <SDMMC_GetResponse>
 8008906:	4603      	mov	r3, r0
 8008908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800890c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008910:	d102      	bne.n	8008918 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008912:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008916:	e02f      	b.n	8008978 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008918:	f107 030c 	add.w	r3, r7, #12
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f82e 	bl	8008980 <SD_FindSCR>
 8008924:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	e023      	b.n	8008978 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d01c      	beq.n	8008974 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	4619      	mov	r1, r3
 8008946:	4610      	mov	r0, r2
 8008948:	f003 f8b8 	bl	800babc <SDMMC_CmdAppCommand>
 800894c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	e00f      	b.n	8008978 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2100      	movs	r1, #0
 800895e:	4618      	mov	r0, r3
 8008960:	f003 f8ef 	bl	800bb42 <SDMMC_CmdBusWidth>
 8008964:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	e003      	b.n	8008978 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008970:	2300      	movs	r3, #0
 8008972:	e001      	b.n	8008978 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008974:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008978:	4618      	mov	r0, r3
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08e      	sub	sp, #56	@ 0x38
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800898a:	f7f8 fe7d 	bl	8001688 <HAL_GetTick>
 800898e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008994:	2300      	movs	r3, #0
 8008996:	60bb      	str	r3, [r7, #8]
 8008998:	2300      	movs	r3, #0
 800899a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2108      	movs	r1, #8
 80089a6:	4618      	mov	r0, r3
 80089a8:	f002 ff78 	bl	800b89c <SDMMC_CmdBlockLength>
 80089ac:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80089ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80089b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b6:	e0ad      	b.n	8008b14 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c0:	041b      	lsls	r3, r3, #16
 80089c2:	4619      	mov	r1, r3
 80089c4:	4610      	mov	r0, r2
 80089c6:	f003 f879 	bl	800babc <SDMMC_CmdAppCommand>
 80089ca:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80089cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80089d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d4:	e09e      	b.n	8008b14 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80089dc:	2308      	movs	r3, #8
 80089de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80089e0:	2330      	movs	r3, #48	@ 0x30
 80089e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80089e4:	2302      	movs	r3, #2
 80089e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80089ec:	2301      	movs	r3, #1
 80089ee:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f107 0210 	add.w	r2, r7, #16
 80089f8:	4611      	mov	r1, r2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f002 ff22 	bl	800b844 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f003 f8bf 	bl	800bb88 <SDMMC_CmdSendSCR>
 8008a0a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d027      	beq.n	8008a62 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a14:	e07e      	b.n	8008b14 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d113      	bne.n	8008a4c <SD_FindSCR+0xcc>
 8008a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d110      	bne.n	8008a4c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f002 fe92 	bl	800b758 <SDMMC_ReadFIFO>
 8008a34:	4603      	mov	r3, r0
 8008a36:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f002 fe8b 	bl	800b758 <SDMMC_ReadFIFO>
 8008a42:	4603      	mov	r3, r0
 8008a44:	60fb      	str	r3, [r7, #12]
      index++;
 8008a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a48:	3301      	adds	r3, #1
 8008a4a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008a4c:	f7f8 fe1c 	bl	8001688 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a5a:	d102      	bne.n	8008a62 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a60:	e058      	b.n	8008b14 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a68:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0d1      	beq.n	8008a16 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d005      	beq.n	8008a8c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2208      	movs	r2, #8
 8008a86:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a88:	2308      	movs	r3, #8
 8008a8a:	e043      	b.n	8008b14 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a92:	f003 0302 	and.w	r3, r3, #2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d005      	beq.n	8008aa6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	e036      	b.n	8008b14 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008abc:	2320      	movs	r3, #32
 8008abe:	e029      	b.n	8008b14 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a15      	ldr	r2, [pc, #84]	@ (8008b1c <SD_FindSCR+0x19c>)
 8008ac6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	061a      	lsls	r2, r3, #24
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	021b      	lsls	r3, r3, #8
 8008ad0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ad4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	0a1b      	lsrs	r3, r3, #8
 8008ada:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8008ade:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	0e1b      	lsrs	r3, r3, #24
 8008ae4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8008ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae8:	601a      	str	r2, [r3, #0]
    scr++;
 8008aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aec:	3304      	adds	r3, #4
 8008aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	061a      	lsls	r2, r3, #24
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008afc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	0a1b      	lsrs	r3, r3, #8
 8008b02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8008b06:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	0e1b      	lsrs	r3, r3, #24
 8008b0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8008b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b10:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3738      	adds	r7, #56	@ 0x38
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	18000f3a 	.word	0x18000f3a

08008b20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e10f      	b.n	8008d52 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a87      	ldr	r2, [pc, #540]	@ (8008d5c <HAL_SPI_Init+0x23c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00f      	beq.n	8008b62 <HAL_SPI_Init+0x42>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a86      	ldr	r2, [pc, #536]	@ (8008d60 <HAL_SPI_Init+0x240>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d00a      	beq.n	8008b62 <HAL_SPI_Init+0x42>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a84      	ldr	r2, [pc, #528]	@ (8008d64 <HAL_SPI_Init+0x244>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d005      	beq.n	8008b62 <HAL_SPI_Init+0x42>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	2b0f      	cmp	r3, #15
 8008b5c:	d901      	bls.n	8008b62 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e0f7      	b.n	8008d52 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f900 	bl	8008d68 <SPI_GetPacketSize>
 8008b68:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a7b      	ldr	r2, [pc, #492]	@ (8008d5c <HAL_SPI_Init+0x23c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00c      	beq.n	8008b8e <HAL_SPI_Init+0x6e>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a79      	ldr	r2, [pc, #484]	@ (8008d60 <HAL_SPI_Init+0x240>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d007      	beq.n	8008b8e <HAL_SPI_Init+0x6e>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a78      	ldr	r2, [pc, #480]	@ (8008d64 <HAL_SPI_Init+0x244>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d002      	beq.n	8008b8e <HAL_SPI_Init+0x6e>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b08      	cmp	r3, #8
 8008b8c:	d811      	bhi.n	8008bb2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008b92:	4a72      	ldr	r2, [pc, #456]	@ (8008d5c <HAL_SPI_Init+0x23c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d009      	beq.n	8008bac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a70      	ldr	r2, [pc, #448]	@ (8008d60 <HAL_SPI_Init+0x240>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d004      	beq.n	8008bac <HAL_SPI_Init+0x8c>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a6f      	ldr	r2, [pc, #444]	@ (8008d64 <HAL_SPI_Init+0x244>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d104      	bne.n	8008bb6 <HAL_SPI_Init+0x96>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b10      	cmp	r3, #16
 8008bb0:	d901      	bls.n	8008bb6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e0cd      	b.n	8008d52 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7f8 fa40 	bl	8001050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0201 	bic.w	r2, r2, #1
 8008be6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008bf2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bfc:	d119      	bne.n	8008c32 <HAL_SPI_Init+0x112>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c06:	d103      	bne.n	8008c10 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d008      	beq.n	8008c22 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10c      	bne.n	8008c32 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c20:	d107      	bne.n	8008c32 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00f      	beq.n	8008c5e <HAL_SPI_Init+0x13e>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	2b06      	cmp	r3, #6
 8008c44:	d90b      	bls.n	8008c5e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	e007      	b.n	8008c6e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	69da      	ldr	r2, [r3, #28]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c76:	431a      	orrs	r2, r3
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c80:	ea42 0103 	orr.w	r1, r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cce:	ea42 0103 	orr.w	r1, r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d113      	bne.n	8008d0e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cf8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d0c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 0201 	bic.w	r2, r2, #1
 8008d1c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	40013000 	.word	0x40013000
 8008d60:	40003800 	.word	0x40003800
 8008d64:	40003c00 	.word	0x40003c00

08008d68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d74:	095b      	lsrs	r3, r3, #5
 8008d76:	3301      	adds	r3, #1
 8008d78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	3307      	adds	r3, #7
 8008d86:	08db      	lsrs	r3, r3, #3
 8008d88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e049      	b.n	8008e44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d106      	bne.n	8008dca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7f8 fb03 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f000 fb45 	bl	800946c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d001      	beq.n	8008e64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e04c      	b.n	8008efe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2202      	movs	r2, #2
 8008e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a26      	ldr	r2, [pc, #152]	@ (8008f0c <HAL_TIM_Base_Start+0xc0>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d022      	beq.n	8008ebc <HAL_TIM_Base_Start+0x70>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e7e:	d01d      	beq.n	8008ebc <HAL_TIM_Base_Start+0x70>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a22      	ldr	r2, [pc, #136]	@ (8008f10 <HAL_TIM_Base_Start+0xc4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d018      	beq.n	8008ebc <HAL_TIM_Base_Start+0x70>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a21      	ldr	r2, [pc, #132]	@ (8008f14 <HAL_TIM_Base_Start+0xc8>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d013      	beq.n	8008ebc <HAL_TIM_Base_Start+0x70>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a1f      	ldr	r2, [pc, #124]	@ (8008f18 <HAL_TIM_Base_Start+0xcc>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00e      	beq.n	8008ebc <HAL_TIM_Base_Start+0x70>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8008f1c <HAL_TIM_Base_Start+0xd0>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d009      	beq.n	8008ebc <HAL_TIM_Base_Start+0x70>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a1c      	ldr	r2, [pc, #112]	@ (8008f20 <HAL_TIM_Base_Start+0xd4>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d004      	beq.n	8008ebc <HAL_TIM_Base_Start+0x70>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8008f24 <HAL_TIM_Base_Start+0xd8>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d115      	bne.n	8008ee8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689a      	ldr	r2, [r3, #8]
 8008ec2:	4b19      	ldr	r3, [pc, #100]	@ (8008f28 <HAL_TIM_Base_Start+0xdc>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b06      	cmp	r3, #6
 8008ecc:	d015      	beq.n	8008efa <HAL_TIM_Base_Start+0xae>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ed4:	d011      	beq.n	8008efa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f042 0201 	orr.w	r2, r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee6:	e008      	b.n	8008efa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0201 	orr.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e000      	b.n	8008efc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008efa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	40010000 	.word	0x40010000
 8008f10:	40000400 	.word	0x40000400
 8008f14:	40000800 	.word	0x40000800
 8008f18:	40000c00 	.word	0x40000c00
 8008f1c:	40010400 	.word	0x40010400
 8008f20:	40001800 	.word	0x40001800
 8008f24:	40014000 	.word	0x40014000
 8008f28:	00010007 	.word	0x00010007

08008f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d001      	beq.n	8008f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e054      	b.n	8008fee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f042 0201 	orr.w	r2, r2, #1
 8008f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a26      	ldr	r2, [pc, #152]	@ (8008ffc <HAL_TIM_Base_Start_IT+0xd0>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d022      	beq.n	8008fac <HAL_TIM_Base_Start_IT+0x80>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f6e:	d01d      	beq.n	8008fac <HAL_TIM_Base_Start_IT+0x80>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a22      	ldr	r2, [pc, #136]	@ (8009000 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d018      	beq.n	8008fac <HAL_TIM_Base_Start_IT+0x80>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a21      	ldr	r2, [pc, #132]	@ (8009004 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d013      	beq.n	8008fac <HAL_TIM_Base_Start_IT+0x80>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a1f      	ldr	r2, [pc, #124]	@ (8009008 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d00e      	beq.n	8008fac <HAL_TIM_Base_Start_IT+0x80>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a1e      	ldr	r2, [pc, #120]	@ (800900c <HAL_TIM_Base_Start_IT+0xe0>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d009      	beq.n	8008fac <HAL_TIM_Base_Start_IT+0x80>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8009010 <HAL_TIM_Base_Start_IT+0xe4>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d004      	beq.n	8008fac <HAL_TIM_Base_Start_IT+0x80>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8009014 <HAL_TIM_Base_Start_IT+0xe8>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d115      	bne.n	8008fd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689a      	ldr	r2, [r3, #8]
 8008fb2:	4b19      	ldr	r3, [pc, #100]	@ (8009018 <HAL_TIM_Base_Start_IT+0xec>)
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b06      	cmp	r3, #6
 8008fbc:	d015      	beq.n	8008fea <HAL_TIM_Base_Start_IT+0xbe>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fc4:	d011      	beq.n	8008fea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f042 0201 	orr.w	r2, r2, #1
 8008fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fd6:	e008      	b.n	8008fea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f042 0201 	orr.w	r2, r2, #1
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	e000      	b.n	8008fec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	40010000 	.word	0x40010000
 8009000:	40000400 	.word	0x40000400
 8009004:	40000800 	.word	0x40000800
 8009008:	40000c00 	.word	0x40000c00
 800900c:	40010400 	.word	0x40010400
 8009010:	40001800 	.word	0x40001800
 8009014:	40014000 	.word	0x40014000
 8009018:	00010007 	.word	0x00010007

0800901c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d020      	beq.n	8009080 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d01b      	beq.n	8009080 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f06f 0202 	mvn.w	r2, #2
 8009050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f9e2 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 800906c:	e005      	b.n	800907a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f9d4 	bl	800941c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f9e5 	bl	8009444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f003 0304 	and.w	r3, r3, #4
 8009086:	2b00      	cmp	r3, #0
 8009088:	d020      	beq.n	80090cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01b      	beq.n	80090cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f06f 0204 	mvn.w	r2, #4
 800909c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2202      	movs	r2, #2
 80090a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9bc 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 80090b8:	e005      	b.n	80090c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f9ae 	bl	800941c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f9bf 	bl	8009444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f003 0308 	and.w	r3, r3, #8
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d020      	beq.n	8009118 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f003 0308 	and.w	r3, r3, #8
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d01b      	beq.n	8009118 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f06f 0208 	mvn.w	r2, #8
 80090e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2204      	movs	r2, #4
 80090ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f996 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 8009104:	e005      	b.n	8009112 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f988 	bl	800941c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f999 	bl	8009444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f003 0310 	and.w	r3, r3, #16
 800911e:	2b00      	cmp	r3, #0
 8009120:	d020      	beq.n	8009164 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f003 0310 	and.w	r3, r3, #16
 8009128:	2b00      	cmp	r3, #0
 800912a:	d01b      	beq.n	8009164 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f06f 0210 	mvn.w	r2, #16
 8009134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2208      	movs	r2, #8
 800913a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f970 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 8009150:	e005      	b.n	800915e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f962 	bl	800941c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f973 	bl	8009444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00c      	beq.n	8009188 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	2b00      	cmp	r3, #0
 8009176:	d007      	beq.n	8009188 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0201 	mvn.w	r2, #1
 8009180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7f7 fe46 	bl	8000e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800918e:	2b00      	cmp	r3, #0
 8009190:	d104      	bne.n	800919c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00c      	beq.n	80091b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d007      	beq.n	80091b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80091ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fb31 	bl	8009818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00c      	beq.n	80091da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d007      	beq.n	80091da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80091d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fb29 	bl	800982c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00c      	beq.n	80091fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80091f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f92d 	bl	8009458 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f003 0320 	and.w	r3, r3, #32
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00c      	beq.n	8009222 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f003 0320 	and.w	r3, r3, #32
 800920e:	2b00      	cmp	r3, #0
 8009210:	d007      	beq.n	8009222 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f06f 0220 	mvn.w	r2, #32
 800921a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 faf1 	bl	8009804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <HAL_TIM_ConfigClockSource+0x1c>
 8009244:	2302      	movs	r3, #2
 8009246:	e0dc      	b.n	8009402 <HAL_TIM_ConfigClockSource+0x1d6>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2202      	movs	r2, #2
 8009254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	4b6a      	ldr	r3, [pc, #424]	@ (800940c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009264:	4013      	ands	r3, r2
 8009266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800926e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a64      	ldr	r2, [pc, #400]	@ (8009410 <HAL_TIM_ConfigClockSource+0x1e4>)
 800927e:	4293      	cmp	r3, r2
 8009280:	f000 80a9 	beq.w	80093d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009284:	4a62      	ldr	r2, [pc, #392]	@ (8009410 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	f200 80ae 	bhi.w	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800928c:	4a61      	ldr	r2, [pc, #388]	@ (8009414 <HAL_TIM_ConfigClockSource+0x1e8>)
 800928e:	4293      	cmp	r3, r2
 8009290:	f000 80a1 	beq.w	80093d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009294:	4a5f      	ldr	r2, [pc, #380]	@ (8009414 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009296:	4293      	cmp	r3, r2
 8009298:	f200 80a6 	bhi.w	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800929c:	4a5e      	ldr	r2, [pc, #376]	@ (8009418 <HAL_TIM_ConfigClockSource+0x1ec>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	f000 8099 	beq.w	80093d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80092a4:	4a5c      	ldr	r2, [pc, #368]	@ (8009418 <HAL_TIM_ConfigClockSource+0x1ec>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	f200 809e 	bhi.w	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80092ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092b0:	f000 8091 	beq.w	80093d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80092b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092b8:	f200 8096 	bhi.w	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80092bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092c0:	f000 8089 	beq.w	80093d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80092c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092c8:	f200 808e 	bhi.w	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80092cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d0:	d03e      	beq.n	8009350 <HAL_TIM_ConfigClockSource+0x124>
 80092d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d6:	f200 8087 	bhi.w	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80092da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092de:	f000 8086 	beq.w	80093ee <HAL_TIM_ConfigClockSource+0x1c2>
 80092e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092e6:	d87f      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80092e8:	2b70      	cmp	r3, #112	@ 0x70
 80092ea:	d01a      	beq.n	8009322 <HAL_TIM_ConfigClockSource+0xf6>
 80092ec:	2b70      	cmp	r3, #112	@ 0x70
 80092ee:	d87b      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80092f0:	2b60      	cmp	r3, #96	@ 0x60
 80092f2:	d050      	beq.n	8009396 <HAL_TIM_ConfigClockSource+0x16a>
 80092f4:	2b60      	cmp	r3, #96	@ 0x60
 80092f6:	d877      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80092f8:	2b50      	cmp	r3, #80	@ 0x50
 80092fa:	d03c      	beq.n	8009376 <HAL_TIM_ConfigClockSource+0x14a>
 80092fc:	2b50      	cmp	r3, #80	@ 0x50
 80092fe:	d873      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009300:	2b40      	cmp	r3, #64	@ 0x40
 8009302:	d058      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x18a>
 8009304:	2b40      	cmp	r3, #64	@ 0x40
 8009306:	d86f      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009308:	2b30      	cmp	r3, #48	@ 0x30
 800930a:	d064      	beq.n	80093d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800930c:	2b30      	cmp	r3, #48	@ 0x30
 800930e:	d86b      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009310:	2b20      	cmp	r3, #32
 8009312:	d060      	beq.n	80093d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009314:	2b20      	cmp	r3, #32
 8009316:	d867      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d05c      	beq.n	80093d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800931c:	2b10      	cmp	r3, #16
 800931e:	d05a      	beq.n	80093d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009320:	e062      	b.n	80093e8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009332:	f000 f9b9 	bl	80096a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	609a      	str	r2, [r3, #8]
      break;
 800934e:	e04f      	b.n	80093f0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009360:	f000 f9a2 	bl	80096a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689a      	ldr	r2, [r3, #8]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009372:	609a      	str	r2, [r3, #8]
      break;
 8009374:	e03c      	b.n	80093f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009382:	461a      	mov	r2, r3
 8009384:	f000 f912 	bl	80095ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2150      	movs	r1, #80	@ 0x50
 800938e:	4618      	mov	r0, r3
 8009390:	f000 f96c 	bl	800966c <TIM_ITRx_SetConfig>
      break;
 8009394:	e02c      	b.n	80093f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093a2:	461a      	mov	r2, r3
 80093a4:	f000 f931 	bl	800960a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2160      	movs	r1, #96	@ 0x60
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 f95c 	bl	800966c <TIM_ITRx_SetConfig>
      break;
 80093b4:	e01c      	b.n	80093f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c2:	461a      	mov	r2, r3
 80093c4:	f000 f8f2 	bl	80095ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2140      	movs	r1, #64	@ 0x40
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 f94c 	bl	800966c <TIM_ITRx_SetConfig>
      break;
 80093d4:	e00c      	b.n	80093f0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4619      	mov	r1, r3
 80093e0:	4610      	mov	r0, r2
 80093e2:	f000 f943 	bl	800966c <TIM_ITRx_SetConfig>
      break;
 80093e6:	e003      	b.n	80093f0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	73fb      	strb	r3, [r7, #15]
      break;
 80093ec:	e000      	b.n	80093f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80093ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009400:	7bfb      	ldrb	r3, [r7, #15]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	ffceff88 	.word	0xffceff88
 8009410:	00100040 	.word	0x00100040
 8009414:	00100030 	.word	0x00100030
 8009418:	00100020 	.word	0x00100020

0800941c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a43      	ldr	r2, [pc, #268]	@ (800958c <TIM_Base_SetConfig+0x120>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d013      	beq.n	80094ac <TIM_Base_SetConfig+0x40>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800948a:	d00f      	beq.n	80094ac <TIM_Base_SetConfig+0x40>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a40      	ldr	r2, [pc, #256]	@ (8009590 <TIM_Base_SetConfig+0x124>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d00b      	beq.n	80094ac <TIM_Base_SetConfig+0x40>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a3f      	ldr	r2, [pc, #252]	@ (8009594 <TIM_Base_SetConfig+0x128>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d007      	beq.n	80094ac <TIM_Base_SetConfig+0x40>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a3e      	ldr	r2, [pc, #248]	@ (8009598 <TIM_Base_SetConfig+0x12c>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d003      	beq.n	80094ac <TIM_Base_SetConfig+0x40>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a3d      	ldr	r2, [pc, #244]	@ (800959c <TIM_Base_SetConfig+0x130>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d108      	bne.n	80094be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a32      	ldr	r2, [pc, #200]	@ (800958c <TIM_Base_SetConfig+0x120>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d01f      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094cc:	d01b      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a2f      	ldr	r2, [pc, #188]	@ (8009590 <TIM_Base_SetConfig+0x124>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d017      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a2e      	ldr	r2, [pc, #184]	@ (8009594 <TIM_Base_SetConfig+0x128>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d013      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009598 <TIM_Base_SetConfig+0x12c>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d00f      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a2c      	ldr	r2, [pc, #176]	@ (800959c <TIM_Base_SetConfig+0x130>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d00b      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a2b      	ldr	r2, [pc, #172]	@ (80095a0 <TIM_Base_SetConfig+0x134>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d007      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a2a      	ldr	r2, [pc, #168]	@ (80095a4 <TIM_Base_SetConfig+0x138>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d003      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a29      	ldr	r2, [pc, #164]	@ (80095a8 <TIM_Base_SetConfig+0x13c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d108      	bne.n	8009518 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800950c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	4313      	orrs	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	4313      	orrs	r3, r2
 8009524:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	689a      	ldr	r2, [r3, #8]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a14      	ldr	r2, [pc, #80]	@ (800958c <TIM_Base_SetConfig+0x120>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d00f      	beq.n	800955e <TIM_Base_SetConfig+0xf2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a16      	ldr	r2, [pc, #88]	@ (800959c <TIM_Base_SetConfig+0x130>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d00b      	beq.n	800955e <TIM_Base_SetConfig+0xf2>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a15      	ldr	r2, [pc, #84]	@ (80095a0 <TIM_Base_SetConfig+0x134>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d007      	beq.n	800955e <TIM_Base_SetConfig+0xf2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a14      	ldr	r2, [pc, #80]	@ (80095a4 <TIM_Base_SetConfig+0x138>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d003      	beq.n	800955e <TIM_Base_SetConfig+0xf2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a13      	ldr	r2, [pc, #76]	@ (80095a8 <TIM_Base_SetConfig+0x13c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d103      	bne.n	8009566 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	691a      	ldr	r2, [r3, #16]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f043 0204 	orr.w	r2, r3, #4
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	601a      	str	r2, [r3, #0]
}
 800957e:	bf00      	nop
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	40010000 	.word	0x40010000
 8009590:	40000400 	.word	0x40000400
 8009594:	40000800 	.word	0x40000800
 8009598:	40000c00 	.word	0x40000c00
 800959c:	40010400 	.word	0x40010400
 80095a0:	40014000 	.word	0x40014000
 80095a4:	40014400 	.word	0x40014400
 80095a8:	40014800 	.word	0x40014800

080095ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6a1b      	ldr	r3, [r3, #32]
 80095bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	f023 0201 	bic.w	r2, r3, #1
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	011b      	lsls	r3, r3, #4
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	4313      	orrs	r3, r2
 80095e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f023 030a 	bic.w	r3, r3, #10
 80095e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	621a      	str	r2, [r3, #32]
}
 80095fe:	bf00      	nop
 8009600:	371c      	adds	r7, #28
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800960a:	b480      	push	{r7}
 800960c:	b087      	sub	sp, #28
 800960e:	af00      	add	r7, sp, #0
 8009610:	60f8      	str	r0, [r7, #12]
 8009612:	60b9      	str	r1, [r7, #8]
 8009614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6a1b      	ldr	r3, [r3, #32]
 8009620:	f023 0210 	bic.w	r2, r3, #16
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	031b      	lsls	r3, r3, #12
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	4313      	orrs	r3, r2
 800963e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009646:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	011b      	lsls	r3, r3, #4
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	621a      	str	r2, [r3, #32]
}
 800965e:	bf00      	nop
 8009660:	371c      	adds	r7, #28
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
	...

0800966c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	4b09      	ldr	r3, [pc, #36]	@ (80096a4 <TIM_ITRx_SetConfig+0x38>)
 8009680:	4013      	ands	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	4313      	orrs	r3, r2
 800968a:	f043 0307 	orr.w	r3, r3, #7
 800968e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	609a      	str	r2, [r3, #8]
}
 8009696:	bf00      	nop
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	ffcfff8f 	.word	0xffcfff8f

080096a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	021a      	lsls	r2, r3, #8
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	431a      	orrs	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	609a      	str	r2, [r3, #8]
}
 80096dc:	bf00      	nop
 80096de:	371c      	adds	r7, #28
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d101      	bne.n	8009700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096fc:	2302      	movs	r3, #2
 80096fe:	e06d      	b.n	80097dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a30      	ldr	r2, [pc, #192]	@ (80097e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d004      	beq.n	8009734 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a2f      	ldr	r2, [pc, #188]	@ (80097ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d108      	bne.n	8009746 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800973a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800974c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a20      	ldr	r2, [pc, #128]	@ (80097e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d022      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009772:	d01d      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a1d      	ldr	r2, [pc, #116]	@ (80097f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d018      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a1c      	ldr	r2, [pc, #112]	@ (80097f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d013      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a1a      	ldr	r2, [pc, #104]	@ (80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d00e      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a15      	ldr	r2, [pc, #84]	@ (80097ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d009      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a16      	ldr	r2, [pc, #88]	@ (80097fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d004      	beq.n	80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a15      	ldr	r2, [pc, #84]	@ (8009800 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d10c      	bne.n	80097ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	4313      	orrs	r3, r2
 80097c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	40010000 	.word	0x40010000
 80097ec:	40010400 	.word	0x40010400
 80097f0:	40000400 	.word	0x40000400
 80097f4:	40000800 	.word	0x40000800
 80097f8:	40000c00 	.word	0x40000c00
 80097fc:	40001800 	.word	0x40001800
 8009800:	40014000 	.word	0x40014000

08009804 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e042      	b.n	80098d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009858:	2b00      	cmp	r3, #0
 800985a:	d106      	bne.n	800986a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7f7 fe21 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2224      	movs	r2, #36	@ 0x24
 800986e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f022 0201 	bic.w	r2, r2, #1
 8009880:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d002      	beq.n	8009890 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 fa1a 	bl	800acc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fcaf 	bl	800a1f4 <UART_SetConfig>
 8009896:	4603      	mov	r3, r0
 8009898:	2b01      	cmp	r3, #1
 800989a:	d101      	bne.n	80098a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e01b      	b.n	80098d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80098ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80098be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0201 	orr.w	r2, r2, #1
 80098ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 fa99 	bl	800ae08 <UART_CheckIdleState>
 80098d6:	4603      	mov	r3, r0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b091      	sub	sp, #68	@ 0x44
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	4613      	mov	r3, r2
 80098ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	d178      	bne.n	80099ea <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <HAL_UART_Transmit_IT+0x24>
 80098fe:	88fb      	ldrh	r3, [r7, #6]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e071      	b.n	80099ec <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	88fa      	ldrh	r2, [r7, #6]
 8009912:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	88fa      	ldrh	r2, [r7, #6]
 800991a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2221      	movs	r2, #33	@ 0x21
 8009930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800993c:	d12a      	bne.n	8009994 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009946:	d107      	bne.n	8009958 <HAL_UART_Transmit_IT+0x78>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d103      	bne.n	8009958 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4a29      	ldr	r2, [pc, #164]	@ (80099f8 <HAL_UART_Transmit_IT+0x118>)
 8009954:	679a      	str	r2, [r3, #120]	@ 0x78
 8009956:	e002      	b.n	800995e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4a28      	ldr	r2, [pc, #160]	@ (80099fc <HAL_UART_Transmit_IT+0x11c>)
 800995c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3308      	adds	r3, #8
 8009964:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800996e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009970:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009974:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3308      	adds	r3, #8
 800997c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800997e:	637a      	str	r2, [r7, #52]	@ 0x34
 8009980:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009984:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800998c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e5      	bne.n	800995e <HAL_UART_Transmit_IT+0x7e>
 8009992:	e028      	b.n	80099e6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800999c:	d107      	bne.n	80099ae <HAL_UART_Transmit_IT+0xce>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d103      	bne.n	80099ae <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4a15      	ldr	r2, [pc, #84]	@ (8009a00 <HAL_UART_Transmit_IT+0x120>)
 80099aa:	679a      	str	r2, [r3, #120]	@ 0x78
 80099ac:	e002      	b.n	80099b4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4a14      	ldr	r2, [pc, #80]	@ (8009a04 <HAL_UART_Transmit_IT+0x124>)
 80099b2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	e853 3f00 	ldrex	r3, [r3]
 80099c0:	613b      	str	r3, [r7, #16]
   return(result);
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d2:	623b      	str	r3, [r7, #32]
 80099d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	69f9      	ldr	r1, [r7, #28]
 80099d8:	6a3a      	ldr	r2, [r7, #32]
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	61bb      	str	r3, [r7, #24]
   return(result);
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e6      	bne.n	80099b4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	e000      	b.n	80099ec <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80099ea:	2302      	movs	r3, #2
  }
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3744      	adds	r7, #68	@ 0x44
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	0800b383 	.word	0x0800b383
 80099fc:	0800b2a3 	.word	0x0800b2a3
 8009a00:	0800b1e1 	.word	0x0800b1e1
 8009a04:	0800b129 	.word	0x0800b129

08009a08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009a32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009a36:	4013      	ands	r3, r2
 8009a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d11b      	bne.n	8009a7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a48:	f003 0320 	and.w	r3, r3, #32
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d015      	beq.n	8009a7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d105      	bne.n	8009a68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d009      	beq.n	8009a7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8393 	beq.w	800a198 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	4798      	blx	r3
      }
      return;
 8009a7a:	e38d      	b.n	800a198 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 8123 	beq.w	8009ccc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8009cc0 <HAL_UART_IRQHandler+0x2b8>)
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d106      	bne.n	8009aa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009a96:	4b8b      	ldr	r3, [pc, #556]	@ (8009cc4 <HAL_UART_IRQHandler+0x2bc>)
 8009a98:	4013      	ands	r3, r2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8116 	beq.w	8009ccc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aa4:	f003 0301 	and.w	r3, r3, #1
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d011      	beq.n	8009ad0 <HAL_UART_IRQHandler+0xc8>
 8009aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00b      	beq.n	8009ad0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2201      	movs	r2, #1
 8009abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ac6:	f043 0201 	orr.w	r2, r3, #1
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ad4:	f003 0302 	and.w	r3, r3, #2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d011      	beq.n	8009b00 <HAL_UART_IRQHandler+0xf8>
 8009adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2202      	movs	r2, #2
 8009aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009af6:	f043 0204 	orr.w	r2, r3, #4
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d011      	beq.n	8009b30 <HAL_UART_IRQHandler+0x128>
 8009b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2204      	movs	r2, #4
 8009b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b26:	f043 0202 	orr.w	r2, r3, #2
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b34:	f003 0308 	and.w	r3, r3, #8
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d017      	beq.n	8009b6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b40:	f003 0320 	and.w	r3, r3, #32
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d105      	bne.n	8009b54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8009cc0 <HAL_UART_IRQHandler+0x2b8>)
 8009b4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00b      	beq.n	8009b6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2208      	movs	r2, #8
 8009b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b62:	f043 0208 	orr.w	r2, r3, #8
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d012      	beq.n	8009b9e <HAL_UART_IRQHandler+0x196>
 8009b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00c      	beq.n	8009b9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b94:	f043 0220 	orr.w	r2, r3, #32
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 82f9 	beq.w	800a19c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bae:	f003 0320 	and.w	r3, r3, #32
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d013      	beq.n	8009bde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bba:	f003 0320 	and.w	r3, r3, #32
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d105      	bne.n	8009bce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d007      	beq.n	8009bde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009be4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf2:	2b40      	cmp	r3, #64	@ 0x40
 8009bf4:	d005      	beq.n	8009c02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009bfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d054      	beq.n	8009cac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 fa18 	bl	800b038 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c12:	2b40      	cmp	r3, #64	@ 0x40
 8009c14:	d146      	bne.n	8009ca4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009c42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009c52:	e841 2300 	strex	r3, r2, [r1]
 8009c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1d9      	bne.n	8009c16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d017      	beq.n	8009c9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c72:	4a15      	ldr	r2, [pc, #84]	@ (8009cc8 <HAL_UART_IRQHandler+0x2c0>)
 8009c74:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7f9 fba9 	bl	80033d4 <HAL_DMA_Abort_IT>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d019      	beq.n	8009cbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009c96:	4610      	mov	r0, r2
 8009c98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c9a:	e00f      	b.n	8009cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fa93 	bl	800a1c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca2:	e00b      	b.n	8009cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fa8f 	bl	800a1c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009caa:	e007      	b.n	8009cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fa8b 	bl	800a1c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009cba:	e26f      	b.n	800a19c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cbc:	bf00      	nop
    return;
 8009cbe:	e26d      	b.n	800a19c <HAL_UART_IRQHandler+0x794>
 8009cc0:	10000001 	.word	0x10000001
 8009cc4:	04000120 	.word	0x04000120
 8009cc8:	0800b105 	.word	0x0800b105

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	f040 8203 	bne.w	800a0dc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cda:	f003 0310 	and.w	r3, r3, #16
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f000 81fc 	beq.w	800a0dc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce8:	f003 0310 	and.w	r3, r3, #16
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f000 81f5 	beq.w	800a0dc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2210      	movs	r2, #16
 8009cf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d04:	2b40      	cmp	r3, #64	@ 0x40
 8009d06:	f040 816d 	bne.w	8009fe4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4aa4      	ldr	r2, [pc, #656]	@ (8009fa4 <HAL_UART_IRQHandler+0x59c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d068      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4aa1      	ldr	r2, [pc, #644]	@ (8009fa8 <HAL_UART_IRQHandler+0x5a0>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d061      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a9f      	ldr	r2, [pc, #636]	@ (8009fac <HAL_UART_IRQHandler+0x5a4>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d05a      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a9c      	ldr	r2, [pc, #624]	@ (8009fb0 <HAL_UART_IRQHandler+0x5a8>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d053      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a9a      	ldr	r2, [pc, #616]	@ (8009fb4 <HAL_UART_IRQHandler+0x5ac>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d04c      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a97      	ldr	r2, [pc, #604]	@ (8009fb8 <HAL_UART_IRQHandler+0x5b0>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d045      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a95      	ldr	r2, [pc, #596]	@ (8009fbc <HAL_UART_IRQHandler+0x5b4>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d03e      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a92      	ldr	r2, [pc, #584]	@ (8009fc0 <HAL_UART_IRQHandler+0x5b8>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d037      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a90      	ldr	r2, [pc, #576]	@ (8009fc4 <HAL_UART_IRQHandler+0x5bc>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d030      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a8d      	ldr	r2, [pc, #564]	@ (8009fc8 <HAL_UART_IRQHandler+0x5c0>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d029      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a8b      	ldr	r2, [pc, #556]	@ (8009fcc <HAL_UART_IRQHandler+0x5c4>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d022      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a88      	ldr	r2, [pc, #544]	@ (8009fd0 <HAL_UART_IRQHandler+0x5c8>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d01b      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a86      	ldr	r2, [pc, #536]	@ (8009fd4 <HAL_UART_IRQHandler+0x5cc>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d014      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a83      	ldr	r2, [pc, #524]	@ (8009fd8 <HAL_UART_IRQHandler+0x5d0>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d00d      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a81      	ldr	r2, [pc, #516]	@ (8009fdc <HAL_UART_IRQHandler+0x5d4>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d006      	beq.n	8009dea <HAL_UART_IRQHandler+0x3e2>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a7e      	ldr	r2, [pc, #504]	@ (8009fe0 <HAL_UART_IRQHandler+0x5d8>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d106      	bne.n	8009df8 <HAL_UART_IRQHandler+0x3f0>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	e005      	b.n	8009e04 <HAL_UART_IRQHandler+0x3fc>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 80ad 	beq.w	8009f6c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	f080 80a5 	bcs.w	8009f6c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e32:	69db      	ldr	r3, [r3, #28]
 8009e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e38:	f000 8087 	beq.w	8009f4a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e48:	e853 3f00 	ldrex	r3, [r3]
 8009e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e76:	e841 2300 	strex	r3, r2, [r1]
 8009e7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1da      	bne.n	8009e3c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e98:	f023 0301 	bic.w	r3, r3, #1
 8009e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009eaa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009eae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009eb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009eb6:	e841 2300 	strex	r3, r2, [r1]
 8009eba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ebc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1e1      	bne.n	8009e86 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	3308      	adds	r3, #8
 8009ec8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ecc:	e853 3f00 	ldrex	r3, [r3]
 8009ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ee6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009eec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e3      	bne.n	8009ec2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f10:	e853 3f00 	ldrex	r3, [r3]
 8009f14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f18:	f023 0310 	bic.w	r3, r3, #16
 8009f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	461a      	mov	r2, r3
 8009f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1e4      	bne.n	8009f08 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7f8 ff27 	bl	8002d98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2202      	movs	r2, #2
 8009f4e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f939 	bl	800a1dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009f6a:	e119      	b.n	800a1a0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f76:	429a      	cmp	r2, r3
 8009f78:	f040 8112 	bne.w	800a1a0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f88:	f040 810a 	bne.w	800a1a0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f91e 	bl	800a1dc <HAL_UARTEx_RxEventCallback>
      return;
 8009fa0:	e0fe      	b.n	800a1a0 <HAL_UART_IRQHandler+0x798>
 8009fa2:	bf00      	nop
 8009fa4:	40020010 	.word	0x40020010
 8009fa8:	40020028 	.word	0x40020028
 8009fac:	40020040 	.word	0x40020040
 8009fb0:	40020058 	.word	0x40020058
 8009fb4:	40020070 	.word	0x40020070
 8009fb8:	40020088 	.word	0x40020088
 8009fbc:	400200a0 	.word	0x400200a0
 8009fc0:	400200b8 	.word	0x400200b8
 8009fc4:	40020410 	.word	0x40020410
 8009fc8:	40020428 	.word	0x40020428
 8009fcc:	40020440 	.word	0x40020440
 8009fd0:	40020458 	.word	0x40020458
 8009fd4:	40020470 	.word	0x40020470
 8009fd8:	40020488 	.word	0x40020488
 8009fdc:	400204a0 	.word	0x400204a0
 8009fe0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 80cf 	beq.w	800a1a4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800a006:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 80ca 	beq.w	800a1a4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a018:	e853 3f00 	ldrex	r3, [r3]
 800a01c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	461a      	mov	r2, r3
 800a02e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a032:	647b      	str	r3, [r7, #68]	@ 0x44
 800a034:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a036:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a03a:	e841 2300 	strex	r3, r2, [r1]
 800a03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1e4      	bne.n	800a010 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3308      	adds	r3, #8
 800a04c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	623b      	str	r3, [r7, #32]
   return(result);
 800a056:	6a3a      	ldr	r2, [r7, #32]
 800a058:	4b55      	ldr	r3, [pc, #340]	@ (800a1b0 <HAL_UART_IRQHandler+0x7a8>)
 800a05a:	4013      	ands	r3, r2
 800a05c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3308      	adds	r3, #8
 800a066:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a06a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e3      	bne.n	800a046 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2220      	movs	r2, #32
 800a082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f023 0310 	bic.w	r3, r3, #16
 800a0a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a0b4:	61fb      	str	r3, [r7, #28]
 800a0b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b8:	69b9      	ldr	r1, [r7, #24]
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	e841 2300 	strex	r3, r2, [r1]
 800a0c0:	617b      	str	r3, [r7, #20]
   return(result);
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e4      	bne.n	800a092 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f881 	bl	800a1dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a0da:	e063      	b.n	800a1a4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00e      	beq.n	800a106 <HAL_UART_IRQHandler+0x6fe>
 800a0e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d008      	beq.n	800a106 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a0fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f001 f9df 	bl	800b4c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a104:	e051      	b.n	800a1aa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a10a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d014      	beq.n	800a13c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d105      	bne.n	800a12a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a11e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a126:	2b00      	cmp	r3, #0
 800a128:	d008      	beq.n	800a13c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d03a      	beq.n	800a1a8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	4798      	blx	r3
    }
    return;
 800a13a:	e035      	b.n	800a1a8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a144:	2b00      	cmp	r3, #0
 800a146:	d009      	beq.n	800a15c <HAL_UART_IRQHandler+0x754>
 800a148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a150:	2b00      	cmp	r3, #0
 800a152:	d003      	beq.n	800a15c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 f989 	bl	800b46c <UART_EndTransmit_IT>
    return;
 800a15a:	e026      	b.n	800a1aa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d009      	beq.n	800a17c <HAL_UART_IRQHandler+0x774>
 800a168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a16c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d003      	beq.n	800a17c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 f9b8 	bl	800b4ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a17a:	e016      	b.n	800a1aa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a17c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d010      	beq.n	800a1aa <HAL_UART_IRQHandler+0x7a2>
 800a188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	da0c      	bge.n	800a1aa <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f001 f9a0 	bl	800b4d6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a196:	e008      	b.n	800a1aa <HAL_UART_IRQHandler+0x7a2>
      return;
 800a198:	bf00      	nop
 800a19a:	e006      	b.n	800a1aa <HAL_UART_IRQHandler+0x7a2>
    return;
 800a19c:	bf00      	nop
 800a19e:	e004      	b.n	800a1aa <HAL_UART_IRQHandler+0x7a2>
      return;
 800a1a0:	bf00      	nop
 800a1a2:	e002      	b.n	800a1aa <HAL_UART_IRQHandler+0x7a2>
      return;
 800a1a4:	bf00      	nop
 800a1a6:	e000      	b.n	800a1aa <HAL_UART_IRQHandler+0x7a2>
    return;
 800a1a8:	bf00      	nop
  }
}
 800a1aa:	37e8      	adds	r7, #232	@ 0xe8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	effffffe 	.word	0xeffffffe

0800a1b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1f8:	b092      	sub	sp, #72	@ 0x48
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	431a      	orrs	r2, r3
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	431a      	orrs	r2, r3
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	69db      	ldr	r3, [r3, #28]
 800a218:	4313      	orrs	r3, r2
 800a21a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	4bbe      	ldr	r3, [pc, #760]	@ (800a51c <UART_SetConfig+0x328>)
 800a224:	4013      	ands	r3, r2
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	6812      	ldr	r2, [r2, #0]
 800a22a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a22c:	430b      	orrs	r3, r1
 800a22e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	68da      	ldr	r2, [r3, #12]
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	430a      	orrs	r2, r1
 800a244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4ab3      	ldr	r2, [pc, #716]	@ (800a520 <UART_SetConfig+0x32c>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d004      	beq.n	800a260 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a25c:	4313      	orrs	r3, r2
 800a25e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	4baf      	ldr	r3, [pc, #700]	@ (800a524 <UART_SetConfig+0x330>)
 800a268:	4013      	ands	r3, r2
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	6812      	ldr	r2, [r2, #0]
 800a26e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a270:	430b      	orrs	r3, r1
 800a272:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27a:	f023 010f 	bic.w	r1, r3, #15
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4aa6      	ldr	r2, [pc, #664]	@ (800a528 <UART_SetConfig+0x334>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d177      	bne.n	800a384 <UART_SetConfig+0x190>
 800a294:	4ba5      	ldr	r3, [pc, #660]	@ (800a52c <UART_SetConfig+0x338>)
 800a296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a298:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a29c:	2b28      	cmp	r3, #40	@ 0x28
 800a29e:	d86d      	bhi.n	800a37c <UART_SetConfig+0x188>
 800a2a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a8 <UART_SetConfig+0xb4>)
 800a2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a6:	bf00      	nop
 800a2a8:	0800a34d 	.word	0x0800a34d
 800a2ac:	0800a37d 	.word	0x0800a37d
 800a2b0:	0800a37d 	.word	0x0800a37d
 800a2b4:	0800a37d 	.word	0x0800a37d
 800a2b8:	0800a37d 	.word	0x0800a37d
 800a2bc:	0800a37d 	.word	0x0800a37d
 800a2c0:	0800a37d 	.word	0x0800a37d
 800a2c4:	0800a37d 	.word	0x0800a37d
 800a2c8:	0800a355 	.word	0x0800a355
 800a2cc:	0800a37d 	.word	0x0800a37d
 800a2d0:	0800a37d 	.word	0x0800a37d
 800a2d4:	0800a37d 	.word	0x0800a37d
 800a2d8:	0800a37d 	.word	0x0800a37d
 800a2dc:	0800a37d 	.word	0x0800a37d
 800a2e0:	0800a37d 	.word	0x0800a37d
 800a2e4:	0800a37d 	.word	0x0800a37d
 800a2e8:	0800a35d 	.word	0x0800a35d
 800a2ec:	0800a37d 	.word	0x0800a37d
 800a2f0:	0800a37d 	.word	0x0800a37d
 800a2f4:	0800a37d 	.word	0x0800a37d
 800a2f8:	0800a37d 	.word	0x0800a37d
 800a2fc:	0800a37d 	.word	0x0800a37d
 800a300:	0800a37d 	.word	0x0800a37d
 800a304:	0800a37d 	.word	0x0800a37d
 800a308:	0800a365 	.word	0x0800a365
 800a30c:	0800a37d 	.word	0x0800a37d
 800a310:	0800a37d 	.word	0x0800a37d
 800a314:	0800a37d 	.word	0x0800a37d
 800a318:	0800a37d 	.word	0x0800a37d
 800a31c:	0800a37d 	.word	0x0800a37d
 800a320:	0800a37d 	.word	0x0800a37d
 800a324:	0800a37d 	.word	0x0800a37d
 800a328:	0800a36d 	.word	0x0800a36d
 800a32c:	0800a37d 	.word	0x0800a37d
 800a330:	0800a37d 	.word	0x0800a37d
 800a334:	0800a37d 	.word	0x0800a37d
 800a338:	0800a37d 	.word	0x0800a37d
 800a33c:	0800a37d 	.word	0x0800a37d
 800a340:	0800a37d 	.word	0x0800a37d
 800a344:	0800a37d 	.word	0x0800a37d
 800a348:	0800a375 	.word	0x0800a375
 800a34c:	2301      	movs	r3, #1
 800a34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a352:	e222      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a354:	2304      	movs	r3, #4
 800a356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35a:	e21e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a35c:	2308      	movs	r3, #8
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a362:	e21a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a364:	2310      	movs	r3, #16
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36a:	e216      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a36c:	2320      	movs	r3, #32
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a372:	e212      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a374:	2340      	movs	r3, #64	@ 0x40
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37a:	e20e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a37c:	2380      	movs	r3, #128	@ 0x80
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e20a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a69      	ldr	r2, [pc, #420]	@ (800a530 <UART_SetConfig+0x33c>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d130      	bne.n	800a3f0 <UART_SetConfig+0x1fc>
 800a38e:	4b67      	ldr	r3, [pc, #412]	@ (800a52c <UART_SetConfig+0x338>)
 800a390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	2b05      	cmp	r3, #5
 800a398:	d826      	bhi.n	800a3e8 <UART_SetConfig+0x1f4>
 800a39a:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a0 <UART_SetConfig+0x1ac>)
 800a39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a0:	0800a3b9 	.word	0x0800a3b9
 800a3a4:	0800a3c1 	.word	0x0800a3c1
 800a3a8:	0800a3c9 	.word	0x0800a3c9
 800a3ac:	0800a3d1 	.word	0x0800a3d1
 800a3b0:	0800a3d9 	.word	0x0800a3d9
 800a3b4:	0800a3e1 	.word	0x0800a3e1
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e1ec      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e1e8      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e1e4      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e1e0      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3d8:	2320      	movs	r3, #32
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3de:	e1dc      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3e0:	2340      	movs	r3, #64	@ 0x40
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e1d8      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3e8:	2380      	movs	r3, #128	@ 0x80
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e1d4      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a4f      	ldr	r2, [pc, #316]	@ (800a534 <UART_SetConfig+0x340>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d130      	bne.n	800a45c <UART_SetConfig+0x268>
 800a3fa:	4b4c      	ldr	r3, [pc, #304]	@ (800a52c <UART_SetConfig+0x338>)
 800a3fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3fe:	f003 0307 	and.w	r3, r3, #7
 800a402:	2b05      	cmp	r3, #5
 800a404:	d826      	bhi.n	800a454 <UART_SetConfig+0x260>
 800a406:	a201      	add	r2, pc, #4	@ (adr r2, 800a40c <UART_SetConfig+0x218>)
 800a408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40c:	0800a425 	.word	0x0800a425
 800a410:	0800a42d 	.word	0x0800a42d
 800a414:	0800a435 	.word	0x0800a435
 800a418:	0800a43d 	.word	0x0800a43d
 800a41c:	0800a445 	.word	0x0800a445
 800a420:	0800a44d 	.word	0x0800a44d
 800a424:	2300      	movs	r3, #0
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42a:	e1b6      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a42c:	2304      	movs	r3, #4
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e1b2      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a434:	2308      	movs	r3, #8
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43a:	e1ae      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a43c:	2310      	movs	r3, #16
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a442:	e1aa      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a444:	2320      	movs	r3, #32
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44a:	e1a6      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a44c:	2340      	movs	r3, #64	@ 0x40
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e1a2      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a454:	2380      	movs	r3, #128	@ 0x80
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e19e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a35      	ldr	r2, [pc, #212]	@ (800a538 <UART_SetConfig+0x344>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d130      	bne.n	800a4c8 <UART_SetConfig+0x2d4>
 800a466:	4b31      	ldr	r3, [pc, #196]	@ (800a52c <UART_SetConfig+0x338>)
 800a468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a46a:	f003 0307 	and.w	r3, r3, #7
 800a46e:	2b05      	cmp	r3, #5
 800a470:	d826      	bhi.n	800a4c0 <UART_SetConfig+0x2cc>
 800a472:	a201      	add	r2, pc, #4	@ (adr r2, 800a478 <UART_SetConfig+0x284>)
 800a474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a478:	0800a491 	.word	0x0800a491
 800a47c:	0800a499 	.word	0x0800a499
 800a480:	0800a4a1 	.word	0x0800a4a1
 800a484:	0800a4a9 	.word	0x0800a4a9
 800a488:	0800a4b1 	.word	0x0800a4b1
 800a48c:	0800a4b9 	.word	0x0800a4b9
 800a490:	2300      	movs	r3, #0
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a496:	e180      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a498:	2304      	movs	r3, #4
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49e:	e17c      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a6:	e178      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4a8:	2310      	movs	r3, #16
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ae:	e174      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4b0:	2320      	movs	r3, #32
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	e170      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4b8:	2340      	movs	r3, #64	@ 0x40
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4be:	e16c      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4c0:	2380      	movs	r3, #128	@ 0x80
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c6:	e168      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a1b      	ldr	r2, [pc, #108]	@ (800a53c <UART_SetConfig+0x348>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d142      	bne.n	800a558 <UART_SetConfig+0x364>
 800a4d2:	4b16      	ldr	r3, [pc, #88]	@ (800a52c <UART_SetConfig+0x338>)
 800a4d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b05      	cmp	r3, #5
 800a4dc:	d838      	bhi.n	800a550 <UART_SetConfig+0x35c>
 800a4de:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e4 <UART_SetConfig+0x2f0>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a4fd 	.word	0x0800a4fd
 800a4e8:	0800a505 	.word	0x0800a505
 800a4ec:	0800a50d 	.word	0x0800a50d
 800a4f0:	0800a515 	.word	0x0800a515
 800a4f4:	0800a541 	.word	0x0800a541
 800a4f8:	0800a549 	.word	0x0800a549
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a502:	e14a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a504:	2304      	movs	r3, #4
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e146      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a50c:	2308      	movs	r3, #8
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a512:	e142      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a514:	2310      	movs	r3, #16
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51a:	e13e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a51c:	cfff69f3 	.word	0xcfff69f3
 800a520:	58000c00 	.word	0x58000c00
 800a524:	11fff4ff 	.word	0x11fff4ff
 800a528:	40011000 	.word	0x40011000
 800a52c:	58024400 	.word	0x58024400
 800a530:	40004400 	.word	0x40004400
 800a534:	40004800 	.word	0x40004800
 800a538:	40004c00 	.word	0x40004c00
 800a53c:	40005000 	.word	0x40005000
 800a540:	2320      	movs	r3, #32
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a546:	e128      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a548:	2340      	movs	r3, #64	@ 0x40
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54e:	e124      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a550:	2380      	movs	r3, #128	@ 0x80
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a556:	e120      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4acb      	ldr	r2, [pc, #812]	@ (800a88c <UART_SetConfig+0x698>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d176      	bne.n	800a650 <UART_SetConfig+0x45c>
 800a562:	4bcb      	ldr	r3, [pc, #812]	@ (800a890 <UART_SetConfig+0x69c>)
 800a564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a56a:	2b28      	cmp	r3, #40	@ 0x28
 800a56c:	d86c      	bhi.n	800a648 <UART_SetConfig+0x454>
 800a56e:	a201      	add	r2, pc, #4	@ (adr r2, 800a574 <UART_SetConfig+0x380>)
 800a570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a574:	0800a619 	.word	0x0800a619
 800a578:	0800a649 	.word	0x0800a649
 800a57c:	0800a649 	.word	0x0800a649
 800a580:	0800a649 	.word	0x0800a649
 800a584:	0800a649 	.word	0x0800a649
 800a588:	0800a649 	.word	0x0800a649
 800a58c:	0800a649 	.word	0x0800a649
 800a590:	0800a649 	.word	0x0800a649
 800a594:	0800a621 	.word	0x0800a621
 800a598:	0800a649 	.word	0x0800a649
 800a59c:	0800a649 	.word	0x0800a649
 800a5a0:	0800a649 	.word	0x0800a649
 800a5a4:	0800a649 	.word	0x0800a649
 800a5a8:	0800a649 	.word	0x0800a649
 800a5ac:	0800a649 	.word	0x0800a649
 800a5b0:	0800a649 	.word	0x0800a649
 800a5b4:	0800a629 	.word	0x0800a629
 800a5b8:	0800a649 	.word	0x0800a649
 800a5bc:	0800a649 	.word	0x0800a649
 800a5c0:	0800a649 	.word	0x0800a649
 800a5c4:	0800a649 	.word	0x0800a649
 800a5c8:	0800a649 	.word	0x0800a649
 800a5cc:	0800a649 	.word	0x0800a649
 800a5d0:	0800a649 	.word	0x0800a649
 800a5d4:	0800a631 	.word	0x0800a631
 800a5d8:	0800a649 	.word	0x0800a649
 800a5dc:	0800a649 	.word	0x0800a649
 800a5e0:	0800a649 	.word	0x0800a649
 800a5e4:	0800a649 	.word	0x0800a649
 800a5e8:	0800a649 	.word	0x0800a649
 800a5ec:	0800a649 	.word	0x0800a649
 800a5f0:	0800a649 	.word	0x0800a649
 800a5f4:	0800a639 	.word	0x0800a639
 800a5f8:	0800a649 	.word	0x0800a649
 800a5fc:	0800a649 	.word	0x0800a649
 800a600:	0800a649 	.word	0x0800a649
 800a604:	0800a649 	.word	0x0800a649
 800a608:	0800a649 	.word	0x0800a649
 800a60c:	0800a649 	.word	0x0800a649
 800a610:	0800a649 	.word	0x0800a649
 800a614:	0800a641 	.word	0x0800a641
 800a618:	2301      	movs	r3, #1
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61e:	e0bc      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a620:	2304      	movs	r3, #4
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a626:	e0b8      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a628:	2308      	movs	r3, #8
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62e:	e0b4      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a630:	2310      	movs	r3, #16
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a636:	e0b0      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a638:	2320      	movs	r3, #32
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63e:	e0ac      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a640:	2340      	movs	r3, #64	@ 0x40
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a646:	e0a8      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a648:	2380      	movs	r3, #128	@ 0x80
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64e:	e0a4      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a8f      	ldr	r2, [pc, #572]	@ (800a894 <UART_SetConfig+0x6a0>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d130      	bne.n	800a6bc <UART_SetConfig+0x4c8>
 800a65a:	4b8d      	ldr	r3, [pc, #564]	@ (800a890 <UART_SetConfig+0x69c>)
 800a65c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a65e:	f003 0307 	and.w	r3, r3, #7
 800a662:	2b05      	cmp	r3, #5
 800a664:	d826      	bhi.n	800a6b4 <UART_SetConfig+0x4c0>
 800a666:	a201      	add	r2, pc, #4	@ (adr r2, 800a66c <UART_SetConfig+0x478>)
 800a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66c:	0800a685 	.word	0x0800a685
 800a670:	0800a68d 	.word	0x0800a68d
 800a674:	0800a695 	.word	0x0800a695
 800a678:	0800a69d 	.word	0x0800a69d
 800a67c:	0800a6a5 	.word	0x0800a6a5
 800a680:	0800a6ad 	.word	0x0800a6ad
 800a684:	2300      	movs	r3, #0
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68a:	e086      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a68c:	2304      	movs	r3, #4
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a692:	e082      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a694:	2308      	movs	r3, #8
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69a:	e07e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a69c:	2310      	movs	r3, #16
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a2:	e07a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a6a4:	2320      	movs	r3, #32
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	e076      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a6ac:	2340      	movs	r3, #64	@ 0x40
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b2:	e072      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a6b4:	2380      	movs	r3, #128	@ 0x80
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ba:	e06e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a75      	ldr	r2, [pc, #468]	@ (800a898 <UART_SetConfig+0x6a4>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d130      	bne.n	800a728 <UART_SetConfig+0x534>
 800a6c6:	4b72      	ldr	r3, [pc, #456]	@ (800a890 <UART_SetConfig+0x69c>)
 800a6c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ca:	f003 0307 	and.w	r3, r3, #7
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	d826      	bhi.n	800a720 <UART_SetConfig+0x52c>
 800a6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d8 <UART_SetConfig+0x4e4>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a6f1 	.word	0x0800a6f1
 800a6dc:	0800a6f9 	.word	0x0800a6f9
 800a6e0:	0800a701 	.word	0x0800a701
 800a6e4:	0800a709 	.word	0x0800a709
 800a6e8:	0800a711 	.word	0x0800a711
 800a6ec:	0800a719 	.word	0x0800a719
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e050      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a6f8:	2304      	movs	r3, #4
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e04c      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a700:	2308      	movs	r3, #8
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a706:	e048      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a708:	2310      	movs	r3, #16
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70e:	e044      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a710:	2320      	movs	r3, #32
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a716:	e040      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a718:	2340      	movs	r3, #64	@ 0x40
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71e:	e03c      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a720:	2380      	movs	r3, #128	@ 0x80
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a726:	e038      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a5b      	ldr	r2, [pc, #364]	@ (800a89c <UART_SetConfig+0x6a8>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d130      	bne.n	800a794 <UART_SetConfig+0x5a0>
 800a732:	4b57      	ldr	r3, [pc, #348]	@ (800a890 <UART_SetConfig+0x69c>)
 800a734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a736:	f003 0307 	and.w	r3, r3, #7
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	d826      	bhi.n	800a78c <UART_SetConfig+0x598>
 800a73e:	a201      	add	r2, pc, #4	@ (adr r2, 800a744 <UART_SetConfig+0x550>)
 800a740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a744:	0800a75d 	.word	0x0800a75d
 800a748:	0800a765 	.word	0x0800a765
 800a74c:	0800a76d 	.word	0x0800a76d
 800a750:	0800a775 	.word	0x0800a775
 800a754:	0800a77d 	.word	0x0800a77d
 800a758:	0800a785 	.word	0x0800a785
 800a75c:	2302      	movs	r3, #2
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a762:	e01a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a764:	2304      	movs	r3, #4
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76a:	e016      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a76c:	2308      	movs	r3, #8
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a772:	e012      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a774:	2310      	movs	r3, #16
 800a776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77a:	e00e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a77c:	2320      	movs	r3, #32
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a782:	e00a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a784:	2340      	movs	r3, #64	@ 0x40
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78a:	e006      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a78c:	2380      	movs	r3, #128	@ 0x80
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a792:	e002      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a794:	2380      	movs	r3, #128	@ 0x80
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a3f      	ldr	r2, [pc, #252]	@ (800a89c <UART_SetConfig+0x6a8>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	f040 80f8 	bne.w	800a996 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a7aa:	2b20      	cmp	r3, #32
 800a7ac:	dc46      	bgt.n	800a83c <UART_SetConfig+0x648>
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	f2c0 8082 	blt.w	800a8b8 <UART_SetConfig+0x6c4>
 800a7b4:	3b02      	subs	r3, #2
 800a7b6:	2b1e      	cmp	r3, #30
 800a7b8:	d87e      	bhi.n	800a8b8 <UART_SetConfig+0x6c4>
 800a7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c0 <UART_SetConfig+0x5cc>)
 800a7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c0:	0800a843 	.word	0x0800a843
 800a7c4:	0800a8b9 	.word	0x0800a8b9
 800a7c8:	0800a84b 	.word	0x0800a84b
 800a7cc:	0800a8b9 	.word	0x0800a8b9
 800a7d0:	0800a8b9 	.word	0x0800a8b9
 800a7d4:	0800a8b9 	.word	0x0800a8b9
 800a7d8:	0800a85b 	.word	0x0800a85b
 800a7dc:	0800a8b9 	.word	0x0800a8b9
 800a7e0:	0800a8b9 	.word	0x0800a8b9
 800a7e4:	0800a8b9 	.word	0x0800a8b9
 800a7e8:	0800a8b9 	.word	0x0800a8b9
 800a7ec:	0800a8b9 	.word	0x0800a8b9
 800a7f0:	0800a8b9 	.word	0x0800a8b9
 800a7f4:	0800a8b9 	.word	0x0800a8b9
 800a7f8:	0800a86b 	.word	0x0800a86b
 800a7fc:	0800a8b9 	.word	0x0800a8b9
 800a800:	0800a8b9 	.word	0x0800a8b9
 800a804:	0800a8b9 	.word	0x0800a8b9
 800a808:	0800a8b9 	.word	0x0800a8b9
 800a80c:	0800a8b9 	.word	0x0800a8b9
 800a810:	0800a8b9 	.word	0x0800a8b9
 800a814:	0800a8b9 	.word	0x0800a8b9
 800a818:	0800a8b9 	.word	0x0800a8b9
 800a81c:	0800a8b9 	.word	0x0800a8b9
 800a820:	0800a8b9 	.word	0x0800a8b9
 800a824:	0800a8b9 	.word	0x0800a8b9
 800a828:	0800a8b9 	.word	0x0800a8b9
 800a82c:	0800a8b9 	.word	0x0800a8b9
 800a830:	0800a8b9 	.word	0x0800a8b9
 800a834:	0800a8b9 	.word	0x0800a8b9
 800a838:	0800a8ab 	.word	0x0800a8ab
 800a83c:	2b40      	cmp	r3, #64	@ 0x40
 800a83e:	d037      	beq.n	800a8b0 <UART_SetConfig+0x6bc>
 800a840:	e03a      	b.n	800a8b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a842:	f7fc fa0f 	bl	8006c64 <HAL_RCCEx_GetD3PCLK1Freq>
 800a846:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a848:	e03c      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a84a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fc fa1e 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a858:	e034      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a85a:	f107 0318 	add.w	r3, r7, #24
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fc fb6a 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a868:	e02c      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a86a:	4b09      	ldr	r3, [pc, #36]	@ (800a890 <UART_SetConfig+0x69c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0320 	and.w	r3, r3, #32
 800a872:	2b00      	cmp	r3, #0
 800a874:	d016      	beq.n	800a8a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a876:	4b06      	ldr	r3, [pc, #24]	@ (800a890 <UART_SetConfig+0x69c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	08db      	lsrs	r3, r3, #3
 800a87c:	f003 0303 	and.w	r3, r3, #3
 800a880:	4a07      	ldr	r2, [pc, #28]	@ (800a8a0 <UART_SetConfig+0x6ac>)
 800a882:	fa22 f303 	lsr.w	r3, r2, r3
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a888:	e01c      	b.n	800a8c4 <UART_SetConfig+0x6d0>
 800a88a:	bf00      	nop
 800a88c:	40011400 	.word	0x40011400
 800a890:	58024400 	.word	0x58024400
 800a894:	40007800 	.word	0x40007800
 800a898:	40007c00 	.word	0x40007c00
 800a89c:	58000c00 	.word	0x58000c00
 800a8a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a8a4:	4b9d      	ldr	r3, [pc, #628]	@ (800ab1c <UART_SetConfig+0x928>)
 800a8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a8:	e00c      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8aa:	4b9d      	ldr	r3, [pc, #628]	@ (800ab20 <UART_SetConfig+0x92c>)
 800a8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ae:	e009      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b6:	e005      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 81de 	beq.w	800ac88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d0:	4a94      	ldr	r2, [pc, #592]	@ (800ab24 <UART_SetConfig+0x930>)
 800a8d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	4413      	add	r3, r2
 800a8ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d305      	bcc.n	800a8fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d903      	bls.n	800a904 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a902:	e1c1      	b.n	800ac88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a906:	2200      	movs	r2, #0
 800a908:	60bb      	str	r3, [r7, #8]
 800a90a:	60fa      	str	r2, [r7, #12]
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a910:	4a84      	ldr	r2, [pc, #528]	@ (800ab24 <UART_SetConfig+0x930>)
 800a912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a916:	b29b      	uxth	r3, r3
 800a918:	2200      	movs	r2, #0
 800a91a:	603b      	str	r3, [r7, #0]
 800a91c:	607a      	str	r2, [r7, #4]
 800a91e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a926:	f7f5 fd33 	bl	8000390 <__aeabi_uldivmod>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	4610      	mov	r0, r2
 800a930:	4619      	mov	r1, r3
 800a932:	f04f 0200 	mov.w	r2, #0
 800a936:	f04f 0300 	mov.w	r3, #0
 800a93a:	020b      	lsls	r3, r1, #8
 800a93c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a940:	0202      	lsls	r2, r0, #8
 800a942:	6979      	ldr	r1, [r7, #20]
 800a944:	6849      	ldr	r1, [r1, #4]
 800a946:	0849      	lsrs	r1, r1, #1
 800a948:	2000      	movs	r0, #0
 800a94a:	460c      	mov	r4, r1
 800a94c:	4605      	mov	r5, r0
 800a94e:	eb12 0804 	adds.w	r8, r2, r4
 800a952:	eb43 0905 	adc.w	r9, r3, r5
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	469a      	mov	sl, r3
 800a95e:	4693      	mov	fp, r2
 800a960:	4652      	mov	r2, sl
 800a962:	465b      	mov	r3, fp
 800a964:	4640      	mov	r0, r8
 800a966:	4649      	mov	r1, r9
 800a968:	f7f5 fd12 	bl	8000390 <__aeabi_uldivmod>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4613      	mov	r3, r2
 800a972:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a97a:	d308      	bcc.n	800a98e <UART_SetConfig+0x79a>
 800a97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a982:	d204      	bcs.n	800a98e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a98a:	60da      	str	r2, [r3, #12]
 800a98c:	e17c      	b.n	800ac88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a994:	e178      	b.n	800ac88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a99e:	f040 80c5 	bne.w	800ab2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a9a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9a6:	2b20      	cmp	r3, #32
 800a9a8:	dc48      	bgt.n	800aa3c <UART_SetConfig+0x848>
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	db7b      	blt.n	800aaa6 <UART_SetConfig+0x8b2>
 800a9ae:	2b20      	cmp	r3, #32
 800a9b0:	d879      	bhi.n	800aaa6 <UART_SetConfig+0x8b2>
 800a9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b8 <UART_SetConfig+0x7c4>)
 800a9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b8:	0800aa43 	.word	0x0800aa43
 800a9bc:	0800aa4b 	.word	0x0800aa4b
 800a9c0:	0800aaa7 	.word	0x0800aaa7
 800a9c4:	0800aaa7 	.word	0x0800aaa7
 800a9c8:	0800aa53 	.word	0x0800aa53
 800a9cc:	0800aaa7 	.word	0x0800aaa7
 800a9d0:	0800aaa7 	.word	0x0800aaa7
 800a9d4:	0800aaa7 	.word	0x0800aaa7
 800a9d8:	0800aa63 	.word	0x0800aa63
 800a9dc:	0800aaa7 	.word	0x0800aaa7
 800a9e0:	0800aaa7 	.word	0x0800aaa7
 800a9e4:	0800aaa7 	.word	0x0800aaa7
 800a9e8:	0800aaa7 	.word	0x0800aaa7
 800a9ec:	0800aaa7 	.word	0x0800aaa7
 800a9f0:	0800aaa7 	.word	0x0800aaa7
 800a9f4:	0800aaa7 	.word	0x0800aaa7
 800a9f8:	0800aa73 	.word	0x0800aa73
 800a9fc:	0800aaa7 	.word	0x0800aaa7
 800aa00:	0800aaa7 	.word	0x0800aaa7
 800aa04:	0800aaa7 	.word	0x0800aaa7
 800aa08:	0800aaa7 	.word	0x0800aaa7
 800aa0c:	0800aaa7 	.word	0x0800aaa7
 800aa10:	0800aaa7 	.word	0x0800aaa7
 800aa14:	0800aaa7 	.word	0x0800aaa7
 800aa18:	0800aaa7 	.word	0x0800aaa7
 800aa1c:	0800aaa7 	.word	0x0800aaa7
 800aa20:	0800aaa7 	.word	0x0800aaa7
 800aa24:	0800aaa7 	.word	0x0800aaa7
 800aa28:	0800aaa7 	.word	0x0800aaa7
 800aa2c:	0800aaa7 	.word	0x0800aaa7
 800aa30:	0800aaa7 	.word	0x0800aaa7
 800aa34:	0800aaa7 	.word	0x0800aaa7
 800aa38:	0800aa99 	.word	0x0800aa99
 800aa3c:	2b40      	cmp	r3, #64	@ 0x40
 800aa3e:	d02e      	beq.n	800aa9e <UART_SetConfig+0x8aa>
 800aa40:	e031      	b.n	800aaa6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa42:	f7fa f917 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 800aa46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa48:	e033      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa4a:	f7fa f929 	bl	8004ca0 <HAL_RCC_GetPCLK2Freq>
 800aa4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa50:	e02f      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fc f91a 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa60:	e027      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa62:	f107 0318 	add.w	r3, r7, #24
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fc fa66 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa70:	e01f      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa72:	4b2d      	ldr	r3, [pc, #180]	@ (800ab28 <UART_SetConfig+0x934>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0320 	and.w	r3, r3, #32
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d009      	beq.n	800aa92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa7e:	4b2a      	ldr	r3, [pc, #168]	@ (800ab28 <UART_SetConfig+0x934>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	08db      	lsrs	r3, r3, #3
 800aa84:	f003 0303 	and.w	r3, r3, #3
 800aa88:	4a24      	ldr	r2, [pc, #144]	@ (800ab1c <UART_SetConfig+0x928>)
 800aa8a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa90:	e00f      	b.n	800aab2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aa92:	4b22      	ldr	r3, [pc, #136]	@ (800ab1c <UART_SetConfig+0x928>)
 800aa94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa96:	e00c      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa98:	4b21      	ldr	r3, [pc, #132]	@ (800ab20 <UART_SetConfig+0x92c>)
 800aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa9c:	e009      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa4:	e005      	b.n	800aab2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 80e7 	beq.w	800ac88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aabe:	4a19      	ldr	r2, [pc, #100]	@ (800ab24 <UART_SetConfig+0x930>)
 800aac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aac4:	461a      	mov	r2, r3
 800aac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aacc:	005a      	lsls	r2, r3, #1
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	085b      	lsrs	r3, r3, #1
 800aad4:	441a      	add	r2, r3
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	fbb2 f3f3 	udiv	r3, r2, r3
 800aade:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae2:	2b0f      	cmp	r3, #15
 800aae4:	d916      	bls.n	800ab14 <UART_SetConfig+0x920>
 800aae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaec:	d212      	bcs.n	800ab14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	f023 030f 	bic.w	r3, r3, #15
 800aaf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	085b      	lsrs	r3, r3, #1
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab06:	4313      	orrs	r3, r2
 800ab08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ab10:	60da      	str	r2, [r3, #12]
 800ab12:	e0b9      	b.n	800ac88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab1a:	e0b5      	b.n	800ac88 <UART_SetConfig+0xa94>
 800ab1c:	03d09000 	.word	0x03d09000
 800ab20:	003d0900 	.word	0x003d0900
 800ab24:	08013ea0 	.word	0x08013ea0
 800ab28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab30:	2b20      	cmp	r3, #32
 800ab32:	dc49      	bgt.n	800abc8 <UART_SetConfig+0x9d4>
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	db7c      	blt.n	800ac32 <UART_SetConfig+0xa3e>
 800ab38:	2b20      	cmp	r3, #32
 800ab3a:	d87a      	bhi.n	800ac32 <UART_SetConfig+0xa3e>
 800ab3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab44 <UART_SetConfig+0x950>)
 800ab3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab42:	bf00      	nop
 800ab44:	0800abcf 	.word	0x0800abcf
 800ab48:	0800abd7 	.word	0x0800abd7
 800ab4c:	0800ac33 	.word	0x0800ac33
 800ab50:	0800ac33 	.word	0x0800ac33
 800ab54:	0800abdf 	.word	0x0800abdf
 800ab58:	0800ac33 	.word	0x0800ac33
 800ab5c:	0800ac33 	.word	0x0800ac33
 800ab60:	0800ac33 	.word	0x0800ac33
 800ab64:	0800abef 	.word	0x0800abef
 800ab68:	0800ac33 	.word	0x0800ac33
 800ab6c:	0800ac33 	.word	0x0800ac33
 800ab70:	0800ac33 	.word	0x0800ac33
 800ab74:	0800ac33 	.word	0x0800ac33
 800ab78:	0800ac33 	.word	0x0800ac33
 800ab7c:	0800ac33 	.word	0x0800ac33
 800ab80:	0800ac33 	.word	0x0800ac33
 800ab84:	0800abff 	.word	0x0800abff
 800ab88:	0800ac33 	.word	0x0800ac33
 800ab8c:	0800ac33 	.word	0x0800ac33
 800ab90:	0800ac33 	.word	0x0800ac33
 800ab94:	0800ac33 	.word	0x0800ac33
 800ab98:	0800ac33 	.word	0x0800ac33
 800ab9c:	0800ac33 	.word	0x0800ac33
 800aba0:	0800ac33 	.word	0x0800ac33
 800aba4:	0800ac33 	.word	0x0800ac33
 800aba8:	0800ac33 	.word	0x0800ac33
 800abac:	0800ac33 	.word	0x0800ac33
 800abb0:	0800ac33 	.word	0x0800ac33
 800abb4:	0800ac33 	.word	0x0800ac33
 800abb8:	0800ac33 	.word	0x0800ac33
 800abbc:	0800ac33 	.word	0x0800ac33
 800abc0:	0800ac33 	.word	0x0800ac33
 800abc4:	0800ac25 	.word	0x0800ac25
 800abc8:	2b40      	cmp	r3, #64	@ 0x40
 800abca:	d02e      	beq.n	800ac2a <UART_SetConfig+0xa36>
 800abcc:	e031      	b.n	800ac32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abce:	f7fa f851 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 800abd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abd4:	e033      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abd6:	f7fa f863 	bl	8004ca0 <HAL_RCC_GetPCLK2Freq>
 800abda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abdc:	e02f      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fc f854 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abec:	e027      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abee:	f107 0318 	add.w	r3, r7, #24
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fc f9a0 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abfc:	e01f      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abfe:	4b2d      	ldr	r3, [pc, #180]	@ (800acb4 <UART_SetConfig+0xac0>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 0320 	and.w	r3, r3, #32
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d009      	beq.n	800ac1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac0a:	4b2a      	ldr	r3, [pc, #168]	@ (800acb4 <UART_SetConfig+0xac0>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	08db      	lsrs	r3, r3, #3
 800ac10:	f003 0303 	and.w	r3, r3, #3
 800ac14:	4a28      	ldr	r2, [pc, #160]	@ (800acb8 <UART_SetConfig+0xac4>)
 800ac16:	fa22 f303 	lsr.w	r3, r2, r3
 800ac1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac1c:	e00f      	b.n	800ac3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ac1e:	4b26      	ldr	r3, [pc, #152]	@ (800acb8 <UART_SetConfig+0xac4>)
 800ac20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac22:	e00c      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac24:	4b25      	ldr	r3, [pc, #148]	@ (800acbc <UART_SetConfig+0xac8>)
 800ac26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac28:	e009      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac30:	e005      	b.n	800ac3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ac32:	2300      	movs	r3, #0
 800ac34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac3c:	bf00      	nop
    }

    if (pclk != 0U)
 800ac3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d021      	beq.n	800ac88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac48:	4a1d      	ldr	r2, [pc, #116]	@ (800acc0 <UART_SetConfig+0xacc>)
 800ac4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac52:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	085b      	lsrs	r3, r3, #1
 800ac5c:	441a      	add	r2, r3
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6a:	2b0f      	cmp	r3, #15
 800ac6c:	d909      	bls.n	800ac82 <UART_SetConfig+0xa8e>
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac74:	d205      	bcs.n	800ac82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	60da      	str	r2, [r3, #12]
 800ac80:	e002      	b.n	800ac88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2200      	movs	r2, #0
 800aca2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aca4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3748      	adds	r7, #72	@ 0x48
 800acac:	46bd      	mov	sp, r7
 800acae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acb2:	bf00      	nop
 800acb4:	58024400 	.word	0x58024400
 800acb8:	03d09000 	.word	0x03d09000
 800acbc:	003d0900 	.word	0x003d0900
 800acc0:	08013ea0 	.word	0x08013ea0

0800acc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd0:	f003 0308 	and.w	r3, r3, #8
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00a      	beq.n	800acee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00a      	beq.n	800ad10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad14:	f003 0302 	and.w	r3, r3, #2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad36:	f003 0304 	and.w	r3, r3, #4
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	430a      	orrs	r2, r1
 800ad52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad58:	f003 0310 	and.w	r3, r3, #16
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00a      	beq.n	800ad76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	430a      	orrs	r2, r1
 800ad96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d01a      	beq.n	800adda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adc2:	d10a      	bne.n	800adda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00a      	beq.n	800adfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	605a      	str	r2, [r3, #4]
  }
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b098      	sub	sp, #96	@ 0x60
 800ae0c:	af02      	add	r7, sp, #8
 800ae0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae18:	f7f6 fc36 	bl	8001688 <HAL_GetTick>
 800ae1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0308 	and.w	r3, r3, #8
 800ae28:	2b08      	cmp	r3, #8
 800ae2a:	d12f      	bne.n	800ae8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae34:	2200      	movs	r2, #0
 800ae36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f88e 	bl	800af5c <UART_WaitOnFlagUntilTimeout>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d022      	beq.n	800ae8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4e:	e853 3f00 	ldrex	r3, [r3]
 800ae52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	461a      	mov	r2, r3
 800ae62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae6c:	e841 2300 	strex	r3, r2, [r1]
 800ae70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e6      	bne.n	800ae46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e063      	b.n	800af54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0304 	and.w	r3, r3, #4
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d149      	bne.n	800af2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aea2:	2200      	movs	r2, #0
 800aea4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f857 	bl	800af5c <UART_WaitOnFlagUntilTimeout>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d03c      	beq.n	800af2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebc:	e853 3f00 	ldrex	r3, [r3]
 800aec0:	623b      	str	r3, [r7, #32]
   return(result);
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aed2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeda:	e841 2300 	strex	r3, r2, [r1]
 800aede:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1e6      	bne.n	800aeb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3308      	adds	r3, #8
 800aeec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f023 0301 	bic.w	r3, r3, #1
 800aefc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3308      	adds	r3, #8
 800af04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af06:	61fa      	str	r2, [r7, #28]
 800af08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	69b9      	ldr	r1, [r7, #24]
 800af0c:	69fa      	ldr	r2, [r7, #28]
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	617b      	str	r3, [r7, #20]
   return(result);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e5      	bne.n	800aee6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2220      	movs	r2, #32
 800af1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e012      	b.n	800af54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2220      	movs	r2, #32
 800af32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2220      	movs	r2, #32
 800af3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3758      	adds	r7, #88	@ 0x58
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	4613      	mov	r3, r2
 800af6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af6c:	e04f      	b.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af74:	d04b      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af76:	f7f6 fb87 	bl	8001688 <HAL_GetTick>
 800af7a:	4602      	mov	r2, r0
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	429a      	cmp	r2, r3
 800af84:	d302      	bcc.n	800af8c <UART_WaitOnFlagUntilTimeout+0x30>
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e04e      	b.n	800b02e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 0304 	and.w	r3, r3, #4
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d037      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b80      	cmp	r3, #128	@ 0x80
 800afa2:	d034      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2b40      	cmp	r3, #64	@ 0x40
 800afa8:	d031      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	d110      	bne.n	800afda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2208      	movs	r2, #8
 800afbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f000 f839 	bl	800b038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2208      	movs	r2, #8
 800afca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e029      	b.n	800b02e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69db      	ldr	r3, [r3, #28]
 800afe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800afe8:	d111      	bne.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f000 f81f 	bl	800b038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2220      	movs	r2, #32
 800affe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e00f      	b.n	800b02e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	69da      	ldr	r2, [r3, #28]
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	4013      	ands	r3, r2
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	bf0c      	ite	eq
 800b01e:	2301      	moveq	r3, #1
 800b020:	2300      	movne	r3, #0
 800b022:	b2db      	uxtb	r3, r3
 800b024:	461a      	mov	r2, r3
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d0a0      	beq.n	800af6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b038:	b480      	push	{r7}
 800b03a:	b095      	sub	sp, #84	@ 0x54
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b048:	e853 3f00 	ldrex	r3, [r3]
 800b04c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b05e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b060:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b066:	e841 2300 	strex	r3, r2, [r1]
 800b06a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1e6      	bne.n	800b040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3308      	adds	r3, #8
 800b078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	e853 3f00 	ldrex	r3, [r3]
 800b080:	61fb      	str	r3, [r7, #28]
   return(result);
 800b082:	69fa      	ldr	r2, [r7, #28]
 800b084:	4b1e      	ldr	r3, [pc, #120]	@ (800b100 <UART_EndRxTransfer+0xc8>)
 800b086:	4013      	ands	r3, r2
 800b088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3308      	adds	r3, #8
 800b090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b094:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b09a:	e841 2300 	strex	r3, r2, [r1]
 800b09e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1e5      	bne.n	800b072 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d118      	bne.n	800b0e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	e853 3f00 	ldrex	r3, [r3]
 800b0ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f023 0310 	bic.w	r3, r3, #16
 800b0c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0cc:	61bb      	str	r3, [r7, #24]
 800b0ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d0:	6979      	ldr	r1, [r7, #20]
 800b0d2:	69ba      	ldr	r2, [r7, #24]
 800b0d4:	e841 2300 	strex	r3, r2, [r1]
 800b0d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e6      	bne.n	800b0ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b0f4:	bf00      	nop
 800b0f6:	3754      	adds	r7, #84	@ 0x54
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	effffffe 	.word	0xeffffffe

0800b104 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b110:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7ff f854 	bl	800a1c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b120:	bf00      	nop
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b128:	b480      	push	{r7}
 800b12a:	b08f      	sub	sp, #60	@ 0x3c
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b136:	2b21      	cmp	r3, #33	@ 0x21
 800b138:	d14c      	bne.n	800b1d4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b140:	b29b      	uxth	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d132      	bne.n	800b1ac <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	e853 3f00 	ldrex	r3, [r3]
 800b152:	61fb      	str	r3, [r7, #28]
   return(result);
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b15a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	461a      	mov	r2, r3
 800b162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b166:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b16a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b16c:	e841 2300 	strex	r3, r2, [r1]
 800b170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1e6      	bne.n	800b146 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	60bb      	str	r3, [r7, #8]
   return(result);
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b18c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	461a      	mov	r2, r3
 800b194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b196:	61bb      	str	r3, [r7, #24]
 800b198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19a:	6979      	ldr	r1, [r7, #20]
 800b19c:	69ba      	ldr	r2, [r7, #24]
 800b19e:	e841 2300 	strex	r3, r2, [r1]
 800b1a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1e6      	bne.n	800b178 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b1aa:	e013      	b.n	800b1d4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1b0:	781a      	ldrb	r2, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1bc:	1c5a      	adds	r2, r3, #1
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b1d4:	bf00      	nop
 800b1d6:	373c      	adds	r7, #60	@ 0x3c
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b091      	sub	sp, #68	@ 0x44
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ee:	2b21      	cmp	r3, #33	@ 0x21
 800b1f0:	d151      	bne.n	800b296 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d132      	bne.n	800b264 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b206:	e853 3f00 	ldrex	r3, [r3]
 800b20a:	623b      	str	r3, [r7, #32]
   return(result);
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b212:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	461a      	mov	r2, r3
 800b21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b21e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b220:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b224:	e841 2300 	strex	r3, r2, [r1]
 800b228:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1e6      	bne.n	800b1fe <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b244:	637b      	str	r3, [r7, #52]	@ 0x34
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b24e:	61fb      	str	r3, [r7, #28]
 800b250:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	69b9      	ldr	r1, [r7, #24]
 800b254:	69fa      	ldr	r2, [r7, #28]
 800b256:	e841 2300 	strex	r3, r2, [r1]
 800b25a:	617b      	str	r3, [r7, #20]
   return(result);
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1e6      	bne.n	800b230 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b262:	e018      	b.n	800b296 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b268:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26c:	881b      	ldrh	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b278:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b27e:	1c9a      	adds	r2, r3, #2
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	3b01      	subs	r3, #1
 800b28e:	b29a      	uxth	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b296:	bf00      	nop
 800b298:	3744      	adds	r7, #68	@ 0x44
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b091      	sub	sp, #68	@ 0x44
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2b0:	2b21      	cmp	r3, #33	@ 0x21
 800b2b2:	d160      	bne.n	800b376 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b2bc:	e057      	b.n	800b36e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d133      	bne.n	800b332 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d4:	e853 3f00 	ldrex	r3, [r3]
 800b2d8:	623b      	str	r3, [r7, #32]
   return(result);
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b2e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	3308      	adds	r3, #8
 800b2e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2f2:	e841 2300 	strex	r3, r2, [r1]
 800b2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1e5      	bne.n	800b2ca <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	e853 3f00 	ldrex	r3, [r3]
 800b30a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b312:	637b      	str	r3, [r7, #52]	@ 0x34
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	461a      	mov	r2, r3
 800b31a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b31c:	61fb      	str	r3, [r7, #28]
 800b31e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b320:	69b9      	ldr	r1, [r7, #24]
 800b322:	69fa      	ldr	r2, [r7, #28]
 800b324:	e841 2300 	strex	r3, r2, [r1]
 800b328:	617b      	str	r3, [r7, #20]
   return(result);
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1e6      	bne.n	800b2fe <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b330:	e021      	b.n	800b376 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69db      	ldr	r3, [r3, #28]
 800b338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d013      	beq.n	800b368 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b344:	781a      	ldrb	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	3b01      	subs	r3, #1
 800b360:	b29a      	uxth	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b368:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b36a:	3b01      	subs	r3, #1
 800b36c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b36e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1a4      	bne.n	800b2be <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b374:	e7ff      	b.n	800b376 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800b376:	bf00      	nop
 800b378:	3744      	adds	r7, #68	@ 0x44
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b382:	b480      	push	{r7}
 800b384:	b091      	sub	sp, #68	@ 0x44
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b390:	2b21      	cmp	r3, #33	@ 0x21
 800b392:	d165      	bne.n	800b460 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b39a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b39c:	e05c      	b.n	800b458 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d133      	bne.n	800b412 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b3c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3308      	adds	r3, #8
 800b3c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e5      	bne.n	800b3aa <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	e853 3f00 	ldrex	r3, [r3]
 800b3ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fc:	61bb      	str	r3, [r7, #24]
 800b3fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b400:	6979      	ldr	r1, [r7, #20]
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	e841 2300 	strex	r3, r2, [r1]
 800b408:	613b      	str	r3, [r7, #16]
   return(result);
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1e6      	bne.n	800b3de <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b410:	e026      	b.n	800b460 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	69db      	ldr	r3, [r3, #28]
 800b418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d018      	beq.n	800b452 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b424:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b434:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b43a:	1c9a      	adds	r2, r3, #2
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b446:	b29b      	uxth	r3, r3
 800b448:	3b01      	subs	r3, #1
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b452:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b454:	3b01      	subs	r3, #1
 800b456:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b458:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d19f      	bne.n	800b39e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b45e:	e7ff      	b.n	800b460 <UART_TxISR_16BIT_FIFOEN+0xde>
 800b460:	bf00      	nop
 800b462:	3744      	adds	r7, #68	@ 0x44
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	e853 3f00 	ldrex	r3, [r3]
 800b480:	60bb      	str	r3, [r7, #8]
   return(result);
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b488:	61fb      	str	r3, [r7, #28]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	61bb      	str	r3, [r7, #24]
 800b494:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b496:	6979      	ldr	r1, [r7, #20]
 800b498:	69ba      	ldr	r2, [r7, #24]
 800b49a:	e841 2300 	strex	r3, r2, [r1]
 800b49e:	613b      	str	r3, [r7, #16]
   return(result);
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1e6      	bne.n	800b474 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f7fe fe7d 	bl	800a1b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4ba:	bf00      	nop
 800b4bc:	3720      	adds	r7, #32
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b083      	sub	sp, #12
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b4ca:	bf00      	nop
 800b4cc:	370c      	adds	r7, #12
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	b083      	sub	sp, #12
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b4de:	bf00      	nop
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b4f2:	bf00      	nop
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b085      	sub	sp, #20
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d101      	bne.n	800b514 <HAL_UARTEx_DisableFifoMode+0x16>
 800b510:	2302      	movs	r3, #2
 800b512:	e027      	b.n	800b564 <HAL_UARTEx_DisableFifoMode+0x66>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2224      	movs	r2, #36	@ 0x24
 800b520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f022 0201 	bic.w	r2, r2, #1
 800b53a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b542:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2220      	movs	r2, #32
 800b556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b580:	2b01      	cmp	r3, #1
 800b582:	d101      	bne.n	800b588 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b584:	2302      	movs	r3, #2
 800b586:	e02d      	b.n	800b5e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2224      	movs	r2, #36	@ 0x24
 800b594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f022 0201 	bic.w	r2, r2, #1
 800b5ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	430a      	orrs	r2, r1
 800b5c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f84f 	bl	800b668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2220      	movs	r2, #32
 800b5d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d101      	bne.n	800b604 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b600:	2302      	movs	r3, #2
 800b602:	e02d      	b.n	800b660 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2224      	movs	r2, #36	@ 0x24
 800b610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f022 0201 	bic.w	r2, r2, #1
 800b62a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	430a      	orrs	r2, r1
 800b63e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f811 	bl	800b668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2220      	movs	r2, #32
 800b652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b674:	2b00      	cmp	r3, #0
 800b676:	d108      	bne.n	800b68a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b688:	e031      	b.n	800b6ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b68a:	2310      	movs	r3, #16
 800b68c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b68e:	2310      	movs	r3, #16
 800b690:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	0e5b      	lsrs	r3, r3, #25
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	f003 0307 	and.w	r3, r3, #7
 800b6a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	0f5b      	lsrs	r3, r3, #29
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	f003 0307 	and.w	r3, r3, #7
 800b6b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6b2:	7bbb      	ldrb	r3, [r7, #14]
 800b6b4:	7b3a      	ldrb	r2, [r7, #12]
 800b6b6:	4911      	ldr	r1, [pc, #68]	@ (800b6fc <UARTEx_SetNbDataToProcess+0x94>)
 800b6b8:	5c8a      	ldrb	r2, [r1, r2]
 800b6ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6be:	7b3a      	ldrb	r2, [r7, #12]
 800b6c0:	490f      	ldr	r1, [pc, #60]	@ (800b700 <UARTEx_SetNbDataToProcess+0x98>)
 800b6c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6c8:	b29a      	uxth	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	7b7a      	ldrb	r2, [r7, #13]
 800b6d4:	4909      	ldr	r1, [pc, #36]	@ (800b6fc <UARTEx_SetNbDataToProcess+0x94>)
 800b6d6:	5c8a      	ldrb	r2, [r1, r2]
 800b6d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6dc:	7b7a      	ldrb	r2, [r7, #13]
 800b6de:	4908      	ldr	r1, [pc, #32]	@ (800b700 <UARTEx_SetNbDataToProcess+0x98>)
 800b6e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b6ee:	bf00      	nop
 800b6f0:	3714      	adds	r7, #20
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	08013eb8 	.word	0x08013eb8
 800b700:	08013ec0 	.word	0x08013ec0

0800b704 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b704:	b084      	sub	sp, #16
 800b706:	b480      	push	{r7}
 800b708:	b085      	sub	sp, #20
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	f107 001c 	add.w	r0, r7, #28
 800b712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b71a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b71c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b71e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b722:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b726:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b72a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	4313      	orrs	r3, r2
 800b730:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	4b07      	ldr	r3, [pc, #28]	@ (800b754 <SDMMC_Init+0x50>)
 800b738:	4013      	ands	r3, r2
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	431a      	orrs	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3714      	adds	r7, #20
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	b004      	add	sp, #16
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	ffc02c00 	.word	0xffc02c00

0800b758 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b766:	4618      	mov	r0, r3
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b772:	b480      	push	{r7}
 800b774:	b083      	sub	sp, #12
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f043 0203 	orr.w	r2, r3, #3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0303 	and.w	r3, r3, #3
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b7ce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b7d4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b7da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	68da      	ldr	r2, [r3, #12]
 800b7e6:	4b06      	ldr	r3, [pc, #24]	@ (800b800 <SDMMC_SendCommand+0x50>)
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr
 800b800:	fffee0c0 	.word	0xfffee0c0

0800b804 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	b2db      	uxtb	r3, r3
}
 800b812:	4618      	mov	r0, r3
 800b814:	370c      	adds	r7, #12
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b81e:	b480      	push	{r7}
 800b820:	b085      	sub	sp, #20
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	3314      	adds	r3, #20
 800b82c:	461a      	mov	r2, r3
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	4413      	add	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3714      	adds	r7, #20
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b86a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b870:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b876:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b882:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	431a      	orrs	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0

}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b8aa:	2310      	movs	r3, #16
 800b8ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b8b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8be:	f107 0308 	add.w	r3, r7, #8
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff ff73 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b8ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8ce:	2110      	movs	r1, #16
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fa21 	bl	800bd18 <SDMMC_GetCmdResp1>
 800b8d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8d8:	69fb      	ldr	r3, [r7, #28]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3720      	adds	r7, #32
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b088      	sub	sp, #32
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b8f0:	2311      	movs	r3, #17
 800b8f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b8f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b902:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b904:	f107 0308 	add.w	r3, r7, #8
 800b908:	4619      	mov	r1, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff ff50 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b910:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b914:	2111      	movs	r1, #17
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f9fe 	bl	800bd18 <SDMMC_GetCmdResp1>
 800b91c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b91e:	69fb      	ldr	r3, [r7, #28]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3720      	adds	r7, #32
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b088      	sub	sp, #32
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b936:	2312      	movs	r3, #18
 800b938:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b93a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b93e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b940:	2300      	movs	r3, #0
 800b942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b948:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b94a:	f107 0308 	add.w	r3, r7, #8
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7ff ff2d 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b95a:	2112      	movs	r1, #18
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f9db 	bl	800bd18 <SDMMC_GetCmdResp1>
 800b962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b964:	69fb      	ldr	r3, [r7, #28]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3720      	adds	r7, #32
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b088      	sub	sp, #32
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b97c:	2318      	movs	r3, #24
 800b97e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b986:	2300      	movs	r3, #0
 800b988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b98a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b98e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b990:	f107 0308 	add.w	r3, r7, #8
 800b994:	4619      	mov	r1, r3
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7ff ff0a 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b99c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9a0:	2118      	movs	r1, #24
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f9b8 	bl	800bd18 <SDMMC_GetCmdResp1>
 800b9a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9aa:	69fb      	ldr	r3, [r7, #28]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3720      	adds	r7, #32
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b088      	sub	sp, #32
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b9c2:	2319      	movs	r3, #25
 800b9c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b9ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b9d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9d6:	f107 0308 	add.w	r3, r7, #8
 800b9da:	4619      	mov	r1, r3
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7ff fee7 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b9e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9e6:	2119      	movs	r1, #25
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f995 	bl	800bd18 <SDMMC_GetCmdResp1>
 800b9ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9f0:	69fb      	ldr	r3, [r7, #28]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3720      	adds	r7, #32
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b088      	sub	sp, #32
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ba08:	2307      	movs	r3, #7
 800ba0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba12:	2300      	movs	r3, #0
 800ba14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba1c:	f107 0308 	add.w	r3, r7, #8
 800ba20:	4619      	mov	r1, r3
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7ff fec4 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ba28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba2c:	2107      	movs	r1, #7
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f972 	bl	800bd18 <SDMMC_GetCmdResp1>
 800ba34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba36:	69fb      	ldr	r3, [r7, #28]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3720      	adds	r7, #32
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b088      	sub	sp, #32
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ba50:	2300      	movs	r3, #0
 800ba52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba54:	2300      	movs	r3, #0
 800ba56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba5e:	f107 0308 	add.w	r3, r7, #8
 800ba62:	4619      	mov	r1, r3
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7ff fea3 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fb96 	bl	800c19c <SDMMC_GetCmdError>
 800ba70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba72:	69fb      	ldr	r3, [r7, #28]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3720      	adds	r7, #32
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b088      	sub	sp, #32
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ba84:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ba88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ba8a:	2308      	movs	r3, #8
 800ba8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba94:	2300      	movs	r3, #0
 800ba96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba9e:	f107 0308 	add.w	r3, r7, #8
 800baa2:	4619      	mov	r1, r3
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7ff fe83 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fb28 	bl	800c100 <SDMMC_GetCmdResp7>
 800bab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bab2:	69fb      	ldr	r3, [r7, #28]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3720      	adds	r7, #32
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b088      	sub	sp, #32
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800baca:	2337      	movs	r3, #55	@ 0x37
 800bacc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bace:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bad4:	2300      	movs	r3, #0
 800bad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800badc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bade:	f107 0308 	add.w	r3, r7, #8
 800bae2:	4619      	mov	r1, r3
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7ff fe63 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800baea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800baee:	2137      	movs	r1, #55	@ 0x37
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 f911 	bl	800bd18 <SDMMC_GetCmdResp1>
 800baf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baf8:	69fb      	ldr	r3, [r7, #28]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3720      	adds	r7, #32
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b088      	sub	sp, #32
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bb10:	2329      	movs	r3, #41	@ 0x29
 800bb12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb24:	f107 0308 	add.w	r3, r7, #8
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7ff fe40 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 fa2d 	bl	800bf90 <SDMMC_GetCmdResp3>
 800bb36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb38:	69fb      	ldr	r3, [r7, #28]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3720      	adds	r7, #32
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b088      	sub	sp, #32
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bb50:	2306      	movs	r3, #6
 800bb52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb64:	f107 0308 	add.w	r3, r7, #8
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff fe20 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bb70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb74:	2106      	movs	r1, #6
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f8ce 	bl	800bd18 <SDMMC_GetCmdResp1>
 800bb7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb7e:	69fb      	ldr	r3, [r7, #28]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3720      	adds	r7, #32
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bb90:	2300      	movs	r3, #0
 800bb92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bb94:	2333      	movs	r3, #51	@ 0x33
 800bb96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bba2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bba6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bba8:	f107 0308 	add.w	r3, r7, #8
 800bbac:	4619      	mov	r1, r3
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7ff fdfe 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bbb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbb8:	2133      	movs	r1, #51	@ 0x33
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f8ac 	bl	800bd18 <SDMMC_GetCmdResp1>
 800bbc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbc2:	69fb      	ldr	r3, [r7, #28]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3720      	adds	r7, #32
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b088      	sub	sp, #32
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bbd8:	2302      	movs	r3, #2
 800bbda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bbdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800bbe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bbea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbec:	f107 0308 	add.w	r3, r7, #8
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7ff fddc 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f97f 	bl	800befc <SDMMC_GetCmdResp2>
 800bbfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc00:	69fb      	ldr	r3, [r7, #28]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3720      	adds	r7, #32
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b088      	sub	sp, #32
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bc18:	2309      	movs	r3, #9
 800bc1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bc1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800bc20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc22:	2300      	movs	r3, #0
 800bc24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc2c:	f107 0308 	add.w	r3, r7, #8
 800bc30:	4619      	mov	r1, r3
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f7ff fdbc 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f95f 	bl	800befc <SDMMC_GetCmdResp2>
 800bc3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc40:	69fb      	ldr	r3, [r7, #28]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3720      	adds	r7, #32
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b088      	sub	sp, #32
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bc54:	2300      	movs	r3, #0
 800bc56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc62:	2300      	movs	r3, #0
 800bc64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc6c:	f107 0308 	add.w	r3, r7, #8
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7ff fd9c 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bc78:	683a      	ldr	r2, [r7, #0]
 800bc7a:	2103      	movs	r1, #3
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 f9c7 	bl	800c010 <SDMMC_GetCmdResp6>
 800bc82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc84:	69fb      	ldr	r3, [r7, #28]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3720      	adds	r7, #32
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b088      	sub	sp, #32
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bc9c:	230d      	movs	r3, #13
 800bc9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bca0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bca6:	2300      	movs	r3, #0
 800bca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcb0:	f107 0308 	add.w	r3, r7, #8
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f7ff fd7a 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bcbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcc0:	210d      	movs	r1, #13
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f828 	bl	800bd18 <SDMMC_GetCmdResp1>
 800bcc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcca:	69fb      	ldr	r3, [r7, #28]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3720      	adds	r7, #32
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bce0:	230d      	movs	r3, #13
 800bce2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bce4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bce8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcea:	2300      	movs	r3, #0
 800bcec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcf4:	f107 0308 	add.w	r3, r7, #8
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7ff fd58 	bl	800b7b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bd00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd04:	210d      	movs	r1, #13
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f806 	bl	800bd18 <SDMMC_GetCmdResp1>
 800bd0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd0e:	69fb      	ldr	r3, [r7, #28]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3720      	adds	r7, #32
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b088      	sub	sp, #32
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	460b      	mov	r3, r1
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd26:	4b70      	ldr	r3, [pc, #448]	@ (800bee8 <SDMMC_GetCmdResp1+0x1d0>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a70      	ldr	r2, [pc, #448]	@ (800beec <SDMMC_GetCmdResp1+0x1d4>)
 800bd2c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd30:	0a5a      	lsrs	r2, r3, #9
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	fb02 f303 	mul.w	r3, r2, r3
 800bd38:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	1e5a      	subs	r2, r3, #1
 800bd3e:	61fa      	str	r2, [r7, #28]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d102      	bne.n	800bd4a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bd48:	e0c9      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd4e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bd50:	69ba      	ldr	r2, [r7, #24]
 800bd52:	4b67      	ldr	r3, [pc, #412]	@ (800bef0 <SDMMC_GetCmdResp1+0x1d8>)
 800bd54:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d0ef      	beq.n	800bd3a <SDMMC_GetCmdResp1+0x22>
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1ea      	bne.n	800bd3a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd68:	f003 0304 	and.w	r3, r3, #4
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d004      	beq.n	800bd7a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2204      	movs	r2, #4
 800bd74:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd76:	2304      	movs	r3, #4
 800bd78:	e0b1      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd7e:	f003 0301 	and.w	r3, r3, #1
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d004      	beq.n	800bd90 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e0a6      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4a58      	ldr	r2, [pc, #352]	@ (800bef4 <SDMMC_GetCmdResp1+0x1dc>)
 800bd94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f7ff fd34 	bl	800b804 <SDMMC_GetCommandResponse>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	461a      	mov	r2, r3
 800bda0:	7afb      	ldrb	r3, [r7, #11]
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d001      	beq.n	800bdaa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e099      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bdaa:	2100      	movs	r1, #0
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f7ff fd36 	bl	800b81e <SDMMC_GetResponse>
 800bdb2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	4b50      	ldr	r3, [pc, #320]	@ (800bef8 <SDMMC_GetCmdResp1+0x1e0>)
 800bdb8:	4013      	ands	r3, r2
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	e08d      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	da02      	bge.n	800bdce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bdc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bdcc:	e087      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d001      	beq.n	800bddc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bdd8:	2340      	movs	r3, #64	@ 0x40
 800bdda:	e080      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bde6:	2380      	movs	r3, #128	@ 0x80
 800bde8:	e079      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bdf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bdf8:	e071      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800be04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be08:	e069      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800be14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be18:	e061      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d002      	beq.n	800be2a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800be28:	e059      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be38:	e051      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800be48:	e049      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d002      	beq.n	800be5a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800be58:	e041      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800be64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be68:	e039      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800be74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800be78:	e031      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800be84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800be88:	e029      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800be94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be98:	e021      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bea4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bea8:	e019      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800beb4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800beb8:	e011      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d002      	beq.n	800beca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bec4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800bec8:	e009      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	f003 0308 	and.w	r3, r3, #8
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bed4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800bed8:	e001      	b.n	800bede <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800beda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3720      	adds	r7, #32
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	24000000 	.word	0x24000000
 800beec:	10624dd3 	.word	0x10624dd3
 800bef0:	00200045 	.word	0x00200045
 800bef4:	002000c5 	.word	0x002000c5
 800bef8:	fdffe008 	.word	0xfdffe008

0800befc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf04:	4b1f      	ldr	r3, [pc, #124]	@ (800bf84 <SDMMC_GetCmdResp2+0x88>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a1f      	ldr	r2, [pc, #124]	@ (800bf88 <SDMMC_GetCmdResp2+0x8c>)
 800bf0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf0e:	0a5b      	lsrs	r3, r3, #9
 800bf10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf14:	fb02 f303 	mul.w	r3, r2, r3
 800bf18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	1e5a      	subs	r2, r3, #1
 800bf1e:	60fa      	str	r2, [r7, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d102      	bne.n	800bf2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bf28:	e026      	b.n	800bf78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf2e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d0ef      	beq.n	800bf1a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1ea      	bne.n	800bf1a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf48:	f003 0304 	and.w	r3, r3, #4
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d004      	beq.n	800bf5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2204      	movs	r2, #4
 800bf54:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf56:	2304      	movs	r3, #4
 800bf58:	e00e      	b.n	800bf78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d004      	beq.n	800bf70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e003      	b.n	800bf78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a06      	ldr	r2, [pc, #24]	@ (800bf8c <SDMMC_GetCmdResp2+0x90>)
 800bf74:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr
 800bf84:	24000000 	.word	0x24000000
 800bf88:	10624dd3 	.word	0x10624dd3
 800bf8c:	002000c5 	.word	0x002000c5

0800bf90 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf98:	4b1a      	ldr	r3, [pc, #104]	@ (800c004 <SDMMC_GetCmdResp3+0x74>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a1a      	ldr	r2, [pc, #104]	@ (800c008 <SDMMC_GetCmdResp3+0x78>)
 800bf9e:	fba2 2303 	umull	r2, r3, r2, r3
 800bfa2:	0a5b      	lsrs	r3, r3, #9
 800bfa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfa8:	fb02 f303 	mul.w	r3, r2, r3
 800bfac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	1e5a      	subs	r2, r3, #1
 800bfb2:	60fa      	str	r2, [r7, #12]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d102      	bne.n	800bfbe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bfbc:	e01b      	b.n	800bff6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfc2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d0ef      	beq.n	800bfae <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1ea      	bne.n	800bfae <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d004      	beq.n	800bfee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2204      	movs	r2, #4
 800bfe8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfea:	2304      	movs	r3, #4
 800bfec:	e003      	b.n	800bff6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a06      	ldr	r2, [pc, #24]	@ (800c00c <SDMMC_GetCmdResp3+0x7c>)
 800bff2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3714      	adds	r7, #20
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	24000000 	.word	0x24000000
 800c008:	10624dd3 	.word	0x10624dd3
 800c00c:	002000c5 	.word	0x002000c5

0800c010 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b088      	sub	sp, #32
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	460b      	mov	r3, r1
 800c01a:	607a      	str	r2, [r7, #4]
 800c01c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c01e:	4b35      	ldr	r3, [pc, #212]	@ (800c0f4 <SDMMC_GetCmdResp6+0xe4>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a35      	ldr	r2, [pc, #212]	@ (800c0f8 <SDMMC_GetCmdResp6+0xe8>)
 800c024:	fba2 2303 	umull	r2, r3, r2, r3
 800c028:	0a5b      	lsrs	r3, r3, #9
 800c02a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c02e:	fb02 f303 	mul.w	r3, r2, r3
 800c032:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	1e5a      	subs	r2, r3, #1
 800c038:	61fa      	str	r2, [r7, #28]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d102      	bne.n	800c044 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c03e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c042:	e052      	b.n	800c0ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c048:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c050:	2b00      	cmp	r3, #0
 800c052:	d0ef      	beq.n	800c034 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1ea      	bne.n	800c034 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c062:	f003 0304 	and.w	r3, r3, #4
 800c066:	2b00      	cmp	r3, #0
 800c068:	d004      	beq.n	800c074 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2204      	movs	r2, #4
 800c06e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c070:	2304      	movs	r3, #4
 800c072:	e03a      	b.n	800c0ea <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d004      	beq.n	800c08a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2201      	movs	r2, #1
 800c084:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c086:	2301      	movs	r3, #1
 800c088:	e02f      	b.n	800c0ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f7ff fbba 	bl	800b804 <SDMMC_GetCommandResponse>
 800c090:	4603      	mov	r3, r0
 800c092:	461a      	mov	r2, r3
 800c094:	7afb      	ldrb	r3, [r7, #11]
 800c096:	4293      	cmp	r3, r2
 800c098:	d001      	beq.n	800c09e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e025      	b.n	800c0ea <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	4a16      	ldr	r2, [pc, #88]	@ (800c0fc <SDMMC_GetCmdResp6+0xec>)
 800c0a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f7ff fbb9 	bl	800b81e <SDMMC_GetResponse>
 800c0ac:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d106      	bne.n	800c0c6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	0c1b      	lsrs	r3, r3, #16
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	e011      	b.n	800c0ea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c0d4:	e009      	b.n	800c0ea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c0e4:	e001      	b.n	800c0ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3720      	adds	r7, #32
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	24000000 	.word	0x24000000
 800c0f8:	10624dd3 	.word	0x10624dd3
 800c0fc:	002000c5 	.word	0x002000c5

0800c100 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c100:	b480      	push	{r7}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c108:	4b22      	ldr	r3, [pc, #136]	@ (800c194 <SDMMC_GetCmdResp7+0x94>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a22      	ldr	r2, [pc, #136]	@ (800c198 <SDMMC_GetCmdResp7+0x98>)
 800c10e:	fba2 2303 	umull	r2, r3, r2, r3
 800c112:	0a5b      	lsrs	r3, r3, #9
 800c114:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c118:	fb02 f303 	mul.w	r3, r2, r3
 800c11c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	1e5a      	subs	r2, r3, #1
 800c122:	60fa      	str	r2, [r7, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d102      	bne.n	800c12e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c128:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c12c:	e02c      	b.n	800c188 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c132:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d0ef      	beq.n	800c11e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c144:	2b00      	cmp	r3, #0
 800c146:	d1ea      	bne.n	800c11e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c14c:	f003 0304 	and.w	r3, r3, #4
 800c150:	2b00      	cmp	r3, #0
 800c152:	d004      	beq.n	800c15e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2204      	movs	r2, #4
 800c158:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c15a:	2304      	movs	r3, #4
 800c15c:	e014      	b.n	800c188 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c162:	f003 0301 	and.w	r3, r3, #1
 800c166:	2b00      	cmp	r3, #0
 800c168:	d004      	beq.n	800c174 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c170:	2301      	movs	r3, #1
 800c172:	e009      	b.n	800c188 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2240      	movs	r2, #64	@ 0x40
 800c184:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c186:	2300      	movs	r3, #0

}
 800c188:	4618      	mov	r0, r3
 800c18a:	3714      	adds	r7, #20
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr
 800c194:	24000000 	.word	0x24000000
 800c198:	10624dd3 	.word	0x10624dd3

0800c19c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b085      	sub	sp, #20
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c1a4:	4b11      	ldr	r3, [pc, #68]	@ (800c1ec <SDMMC_GetCmdError+0x50>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a11      	ldr	r2, [pc, #68]	@ (800c1f0 <SDMMC_GetCmdError+0x54>)
 800c1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ae:	0a5b      	lsrs	r3, r3, #9
 800c1b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1b4:	fb02 f303 	mul.w	r3, r2, r3
 800c1b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	1e5a      	subs	r2, r3, #1
 800c1be:	60fa      	str	r2, [r7, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d102      	bne.n	800c1ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c1c8:	e009      	b.n	800c1de <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d0f1      	beq.n	800c1ba <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a06      	ldr	r2, [pc, #24]	@ (800c1f4 <SDMMC_GetCmdError+0x58>)
 800c1da:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3714      	adds	r7, #20
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	24000000 	.word	0x24000000
 800c1f0:	10624dd3 	.word	0x10624dd3
 800c1f4:	002000c5 	.word	0x002000c5

0800c1f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c1fc:	4904      	ldr	r1, [pc, #16]	@ (800c210 <MX_FATFS_Init+0x18>)
 800c1fe:	4805      	ldr	r0, [pc, #20]	@ (800c214 <MX_FATFS_Init+0x1c>)
 800c200:	f002 fc56 	bl	800eab0 <FATFS_LinkDriver>
 800c204:	4603      	mov	r3, r0
 800c206:	461a      	mov	r2, r3
 800c208:	4b03      	ldr	r3, [pc, #12]	@ (800c218 <MX_FATFS_Init+0x20>)
 800c20a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c20c:	bf00      	nop
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	2400033c 	.word	0x2400033c
 800c214:	08013ec8 	.word	0x08013ec8
 800c218:	24000338 	.word	0x24000338

0800c21c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c21c:	b480      	push	{r7}
 800c21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c220:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c222:	4618      	mov	r0, r3
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c236:	f000 f863 	bl	800c300 <BSP_SD_IsDetected>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d001      	beq.n	800c244 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c240:	2302      	movs	r3, #2
 800c242:	e005      	b.n	800c250 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c244:	4804      	ldr	r0, [pc, #16]	@ (800c258 <BSP_SD_Init+0x2c>)
 800c246:	f7fb fa81 	bl	800774c <HAL_SD_Init>
 800c24a:	4603      	mov	r3, r0
 800c24c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800c24e:	79fb      	ldrb	r3, [r7, #7]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	24000100 	.word	0x24000100

0800c25c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b086      	sub	sp, #24
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c268:	2300      	movs	r3, #0
 800c26a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	68f9      	ldr	r1, [r7, #12]
 800c272:	4806      	ldr	r0, [pc, #24]	@ (800c28c <BSP_SD_ReadBlocks_DMA+0x30>)
 800c274:	f7fb fb8a 	bl	800798c <HAL_SD_ReadBlocks_DMA>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d001      	beq.n	800c282 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c27e:	2301      	movs	r3, #1
 800c280:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c282:	7dfb      	ldrb	r3, [r7, #23]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3718      	adds	r7, #24
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	24000100 	.word	0x24000100

0800c290 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	68f9      	ldr	r1, [r7, #12]
 800c2a6:	4806      	ldr	r0, [pc, #24]	@ (800c2c0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c2a8:	f7fb fc18 	bl	8007adc <HAL_SD_WriteBlocks_DMA>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d001      	beq.n	800c2b6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3718      	adds	r7, #24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	24000100 	.word	0x24000100

0800c2c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c2c8:	4805      	ldr	r0, [pc, #20]	@ (800c2e0 <BSP_SD_GetCardState+0x1c>)
 800c2ca:	f7fc f84f 	bl	800836c <HAL_SD_GetCardState>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b04      	cmp	r3, #4
 800c2d2:	bf14      	ite	ne
 800c2d4:	2301      	movne	r3, #1
 800c2d6:	2300      	moveq	r3, #0
 800c2d8:	b2db      	uxtb	r3, r3
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	24000100 	.word	0x24000100

0800c2e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c2ec:	6879      	ldr	r1, [r7, #4]
 800c2ee:	4803      	ldr	r0, [pc, #12]	@ (800c2fc <BSP_SD_GetCardInfo+0x18>)
 800c2f0:	f7fb fefe 	bl	80080f0 <HAL_SD_GetCardInfo>
}
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	24000100 	.word	0x24000100

0800c300 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c306:	2301      	movs	r3, #1
 800c308:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800c30a:	79fb      	ldrb	r3, [r7, #7]
 800c30c:	b2db      	uxtb	r3, r3
}
 800c30e:	4618      	mov	r0, r3
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b084      	sub	sp, #16
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800c322:	f002 fccb 	bl	800ecbc <osKernelGetTickCount>
 800c326:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800c328:	e006      	b.n	800c338 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c32a:	f7ff ffcb 	bl	800c2c4 <BSP_SD_GetCardState>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c334:	2300      	movs	r3, #0
 800c336:	e009      	b.n	800c34c <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800c338:	f002 fcc0 	bl	800ecbc <osKernelGetTickCount>
 800c33c:	4602      	mov	r2, r0
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	429a      	cmp	r2, r3
 800c346:	d8f0      	bhi.n	800c32a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3710      	adds	r7, #16
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c35e:	4b0b      	ldr	r3, [pc, #44]	@ (800c38c <SD_CheckStatus+0x38>)
 800c360:	2201      	movs	r2, #1
 800c362:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c364:	f7ff ffae 	bl	800c2c4 <BSP_SD_GetCardState>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d107      	bne.n	800c37e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c36e:	4b07      	ldr	r3, [pc, #28]	@ (800c38c <SD_CheckStatus+0x38>)
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	b2db      	uxtb	r3, r3
 800c374:	f023 0301 	bic.w	r3, r3, #1
 800c378:	b2da      	uxtb	r2, r3
 800c37a:	4b04      	ldr	r3, [pc, #16]	@ (800c38c <SD_CheckStatus+0x38>)
 800c37c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c37e:	4b03      	ldr	r3, [pc, #12]	@ (800c38c <SD_CheckStatus+0x38>)
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b2db      	uxtb	r3, r3
}
 800c384:	4618      	mov	r0, r3
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	2400000d 	.word	0x2400000d

0800c390 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	4603      	mov	r3, r0
 800c398:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c39a:	4b1c      	ldr	r3, [pc, #112]	@ (800c40c <SD_initialize+0x7c>)
 800c39c:	2201      	movs	r2, #1
 800c39e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800c3a0:	f002 fc44 	bl	800ec2c <osKernelGetState>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	d129      	bne.n	800c3fe <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c3aa:	f7ff ff3f 	bl	800c22c <BSP_SD_Init>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d107      	bne.n	800c3c4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c3b4:	79fb      	ldrb	r3, [r7, #7]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff ffcc 	bl	800c354 <SD_CheckStatus>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	461a      	mov	r2, r3
 800c3c0:	4b12      	ldr	r3, [pc, #72]	@ (800c40c <SD_initialize+0x7c>)
 800c3c2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c3c4:	4b11      	ldr	r3, [pc, #68]	@ (800c40c <SD_initialize+0x7c>)
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d017      	beq.n	800c3fe <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800c3ce:	4b10      	ldr	r3, [pc, #64]	@ (800c410 <SD_initialize+0x80>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d107      	bne.n	800c3e6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	2102      	movs	r1, #2
 800c3da:	200a      	movs	r0, #10
 800c3dc:	f002 fe94 	bl	800f108 <osMessageQueueNew>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	4a0b      	ldr	r2, [pc, #44]	@ (800c410 <SD_initialize+0x80>)
 800c3e4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800c3e6:	4b0a      	ldr	r3, [pc, #40]	@ (800c410 <SD_initialize+0x80>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d107      	bne.n	800c3fe <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800c3ee:	4b07      	ldr	r3, [pc, #28]	@ (800c40c <SD_initialize+0x7c>)
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	f043 0301 	orr.w	r3, r3, #1
 800c3f8:	b2da      	uxtb	r2, r3
 800c3fa:	4b04      	ldr	r3, [pc, #16]	@ (800c40c <SD_initialize+0x7c>)
 800c3fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c3fe:	4b03      	ldr	r3, [pc, #12]	@ (800c40c <SD_initialize+0x7c>)
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	b2db      	uxtb	r3, r3
}
 800c404:	4618      	mov	r0, r3
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	2400000d 	.word	0x2400000d
 800c410:	24000340 	.word	0x24000340

0800c414 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c41e:	79fb      	ldrb	r3, [r7, #7]
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff ff97 	bl	800c354 <SD_CheckStatus>
 800c426:	4603      	mov	r3, r0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b088      	sub	sp, #32
 800c434:	af00      	add	r7, sp, #0
 800c436:	60b9      	str	r1, [r7, #8]
 800c438:	607a      	str	r2, [r7, #4]
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c444:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c448:	f7ff ff67 	bl	800c31a <SD_CheckStatusWithTimeout>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	da01      	bge.n	800c456 <SD_read+0x26>
  {
    return res;
 800c452:	7ffb      	ldrb	r3, [r7, #31]
 800c454:	e02f      	b.n	800c4b6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c456:	683a      	ldr	r2, [r7, #0]
 800c458:	6879      	ldr	r1, [r7, #4]
 800c45a:	68b8      	ldr	r0, [r7, #8]
 800c45c:	f7ff fefe 	bl	800c25c <BSP_SD_ReadBlocks_DMA>
 800c460:	4603      	mov	r3, r0
 800c462:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800c464:	7fbb      	ldrb	r3, [r7, #30]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d124      	bne.n	800c4b4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c46a:	4b15      	ldr	r3, [pc, #84]	@ (800c4c0 <SD_read+0x90>)
 800c46c:	6818      	ldr	r0, [r3, #0]
 800c46e:	f107 0112 	add.w	r1, r7, #18
 800c472:	f247 5330 	movw	r3, #30000	@ 0x7530
 800c476:	2200      	movs	r2, #0
 800c478:	f002 feba 	bl	800f1f0 <osMessageQueueGet>
 800c47c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d117      	bne.n	800c4b4 <SD_read+0x84>
 800c484:	8a7b      	ldrh	r3, [r7, #18]
 800c486:	2b01      	cmp	r3, #1
 800c488:	d114      	bne.n	800c4b4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800c48a:	f002 fc17 	bl	800ecbc <osKernelGetTickCount>
 800c48e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c490:	e007      	b.n	800c4a2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c492:	f7ff ff17 	bl	800c2c4 <BSP_SD_GetCardState>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d102      	bne.n	800c4a2 <SD_read+0x72>
              {
                res = RES_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c4a0:	e008      	b.n	800c4b4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c4a2:	f002 fc0b 	bl	800ecbc <osKernelGetTickCount>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d9ee      	bls.n	800c492 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c4b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3720      	adds	r7, #32
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	24000340 	.word	0x24000340

0800c4c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60b9      	str	r1, [r7, #8]
 800c4cc:	607a      	str	r2, [r7, #4]
 800c4ce:	603b      	str	r3, [r7, #0]
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c4d8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c4dc:	f7ff ff1d 	bl	800c31a <SD_CheckStatusWithTimeout>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	da01      	bge.n	800c4ea <SD_write+0x26>
  {
    return res;
 800c4e6:	7ffb      	ldrb	r3, [r7, #31]
 800c4e8:	e02d      	b.n	800c546 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c4ea:	683a      	ldr	r2, [r7, #0]
 800c4ec:	6879      	ldr	r1, [r7, #4]
 800c4ee:	68b8      	ldr	r0, [r7, #8]
 800c4f0:	f7ff fece 	bl	800c290 <BSP_SD_WriteBlocks_DMA>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d124      	bne.n	800c544 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c4fa:	4b15      	ldr	r3, [pc, #84]	@ (800c550 <SD_write+0x8c>)
 800c4fc:	6818      	ldr	r0, [r3, #0]
 800c4fe:	f107 0112 	add.w	r1, r7, #18
 800c502:	f247 5330 	movw	r3, #30000	@ 0x7530
 800c506:	2200      	movs	r2, #0
 800c508:	f002 fe72 	bl	800f1f0 <osMessageQueueGet>
 800c50c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d117      	bne.n	800c544 <SD_write+0x80>
 800c514:	8a7b      	ldrh	r3, [r7, #18]
 800c516:	2b02      	cmp	r3, #2
 800c518:	d114      	bne.n	800c544 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800c51a:	f002 fbcf 	bl	800ecbc <osKernelGetTickCount>
 800c51e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c520:	e007      	b.n	800c532 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c522:	f7ff fecf 	bl	800c2c4 <BSP_SD_GetCardState>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d102      	bne.n	800c532 <SD_write+0x6e>
          {
            res = RES_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	77fb      	strb	r3, [r7, #31]
            break;
 800c530:	e008      	b.n	800c544 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c532:	f002 fbc3 	bl	800ecbc <osKernelGetTickCount>
 800c536:	4602      	mov	r2, r0
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	1ad3      	subs	r3, r2, r3
 800c53c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c540:	4293      	cmp	r3, r2
 800c542:	d9ee      	bls.n	800c522 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800c544:	7ffb      	ldrb	r3, [r7, #31]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3720      	adds	r7, #32
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	24000340 	.word	0x24000340

0800c554 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b08c      	sub	sp, #48	@ 0x30
 800c558:	af00      	add	r7, sp, #0
 800c55a:	4603      	mov	r3, r0
 800c55c:	603a      	str	r2, [r7, #0]
 800c55e:	71fb      	strb	r3, [r7, #7]
 800c560:	460b      	mov	r3, r1
 800c562:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c56a:	4b25      	ldr	r3, [pc, #148]	@ (800c600 <SD_ioctl+0xac>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	f003 0301 	and.w	r3, r3, #1
 800c574:	2b00      	cmp	r3, #0
 800c576:	d001      	beq.n	800c57c <SD_ioctl+0x28>
 800c578:	2303      	movs	r3, #3
 800c57a:	e03c      	b.n	800c5f6 <SD_ioctl+0xa2>

  switch (cmd)
 800c57c:	79bb      	ldrb	r3, [r7, #6]
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d834      	bhi.n	800c5ec <SD_ioctl+0x98>
 800c582:	a201      	add	r2, pc, #4	@ (adr r2, 800c588 <SD_ioctl+0x34>)
 800c584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c588:	0800c599 	.word	0x0800c599
 800c58c:	0800c5a1 	.word	0x0800c5a1
 800c590:	0800c5b9 	.word	0x0800c5b9
 800c594:	0800c5d3 	.word	0x0800c5d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c598:	2300      	movs	r3, #0
 800c59a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c59e:	e028      	b.n	800c5f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c5a0:	f107 0308 	add.w	r3, r7, #8
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7ff fe9d 	bl	800c2e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c5aa:	6a3a      	ldr	r2, [r7, #32]
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c5b6:	e01c      	b.n	800c5f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c5b8:	f107 0308 	add.w	r3, r7, #8
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff fe91 	bl	800c2e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c5d0:	e00f      	b.n	800c5f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c5d2:	f107 0308 	add.w	r3, r7, #8
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7ff fe84 	bl	800c2e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5de:	0a5a      	lsrs	r2, r3, #9
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c5ea:	e002      	b.n	800c5f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c5ec:	2304      	movs	r3, #4
 800c5ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c5f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3730      	adds	r7, #48	@ 0x30
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	2400000d 	.word	0x2400000d

0800c604 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	4603      	mov	r3, r0
 800c60c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	4a08      	ldr	r2, [pc, #32]	@ (800c634 <disk_status+0x30>)
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	4413      	add	r3, r2
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	79fa      	ldrb	r2, [r7, #7]
 800c61c:	4905      	ldr	r1, [pc, #20]	@ (800c634 <disk_status+0x30>)
 800c61e:	440a      	add	r2, r1
 800c620:	7a12      	ldrb	r2, [r2, #8]
 800c622:	4610      	mov	r0, r2
 800c624:	4798      	blx	r3
 800c626:	4603      	mov	r3, r0
 800c628:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	2400036c 	.word	0x2400036c

0800c638 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	4603      	mov	r3, r0
 800c640:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c642:	2300      	movs	r3, #0
 800c644:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c646:	79fb      	ldrb	r3, [r7, #7]
 800c648:	4a0e      	ldr	r2, [pc, #56]	@ (800c684 <disk_initialize+0x4c>)
 800c64a:	5cd3      	ldrb	r3, [r2, r3]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d114      	bne.n	800c67a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c650:	79fb      	ldrb	r3, [r7, #7]
 800c652:	4a0c      	ldr	r2, [pc, #48]	@ (800c684 <disk_initialize+0x4c>)
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	4413      	add	r3, r2
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	79fa      	ldrb	r2, [r7, #7]
 800c65e:	4909      	ldr	r1, [pc, #36]	@ (800c684 <disk_initialize+0x4c>)
 800c660:	440a      	add	r2, r1
 800c662:	7a12      	ldrb	r2, [r2, #8]
 800c664:	4610      	mov	r0, r2
 800c666:	4798      	blx	r3
 800c668:	4603      	mov	r3, r0
 800c66a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d103      	bne.n	800c67a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c672:	79fb      	ldrb	r3, [r7, #7]
 800c674:	4a03      	ldr	r2, [pc, #12]	@ (800c684 <disk_initialize+0x4c>)
 800c676:	2101      	movs	r1, #1
 800c678:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	2400036c 	.word	0x2400036c

0800c688 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c688:	b590      	push	{r4, r7, lr}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60b9      	str	r1, [r7, #8]
 800c690:	607a      	str	r2, [r7, #4]
 800c692:	603b      	str	r3, [r7, #0]
 800c694:	4603      	mov	r3, r0
 800c696:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c698:	7bfb      	ldrb	r3, [r7, #15]
 800c69a:	4a0a      	ldr	r2, [pc, #40]	@ (800c6c4 <disk_read+0x3c>)
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	4413      	add	r3, r2
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	689c      	ldr	r4, [r3, #8]
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
 800c6a6:	4a07      	ldr	r2, [pc, #28]	@ (800c6c4 <disk_read+0x3c>)
 800c6a8:	4413      	add	r3, r2
 800c6aa:	7a18      	ldrb	r0, [r3, #8]
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	68b9      	ldr	r1, [r7, #8]
 800c6b2:	47a0      	blx	r4
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	371c      	adds	r7, #28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd90      	pop	{r4, r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	2400036c 	.word	0x2400036c

0800c6c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c6c8:	b590      	push	{r4, r7, lr}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60b9      	str	r1, [r7, #8]
 800c6d0:	607a      	str	r2, [r7, #4]
 800c6d2:	603b      	str	r3, [r7, #0]
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c6d8:	7bfb      	ldrb	r3, [r7, #15]
 800c6da:	4a0a      	ldr	r2, [pc, #40]	@ (800c704 <disk_write+0x3c>)
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4413      	add	r3, r2
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	68dc      	ldr	r4, [r3, #12]
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
 800c6e6:	4a07      	ldr	r2, [pc, #28]	@ (800c704 <disk_write+0x3c>)
 800c6e8:	4413      	add	r3, r2
 800c6ea:	7a18      	ldrb	r0, [r3, #8]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	68b9      	ldr	r1, [r7, #8]
 800c6f2:	47a0      	blx	r4
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	371c      	adds	r7, #28
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd90      	pop	{r4, r7, pc}
 800c702:	bf00      	nop
 800c704:	2400036c 	.word	0x2400036c

0800c708 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	4603      	mov	r3, r0
 800c710:	603a      	str	r2, [r7, #0]
 800c712:	71fb      	strb	r3, [r7, #7]
 800c714:	460b      	mov	r3, r1
 800c716:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c718:	79fb      	ldrb	r3, [r7, #7]
 800c71a:	4a09      	ldr	r2, [pc, #36]	@ (800c740 <disk_ioctl+0x38>)
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	4413      	add	r3, r2
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	79fa      	ldrb	r2, [r7, #7]
 800c726:	4906      	ldr	r1, [pc, #24]	@ (800c740 <disk_ioctl+0x38>)
 800c728:	440a      	add	r2, r1
 800c72a:	7a10      	ldrb	r0, [r2, #8]
 800c72c:	79b9      	ldrb	r1, [r7, #6]
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	4798      	blx	r3
 800c732:	4603      	mov	r3, r0
 800c734:	73fb      	strb	r3, [r7, #15]
  return res;
 800c736:	7bfb      	ldrb	r3, [r7, #15]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	2400036c 	.word	0x2400036c

0800c744 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	3301      	adds	r3, #1
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c754:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c758:	021b      	lsls	r3, r3, #8
 800c75a:	b21a      	sxth	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	b21b      	sxth	r3, r3
 800c762:	4313      	orrs	r3, r2
 800c764:	b21b      	sxth	r3, r3
 800c766:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c768:	89fb      	ldrh	r3, [r7, #14]
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3714      	adds	r7, #20
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr

0800c776 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c776:	b480      	push	{r7}
 800c778:	b085      	sub	sp, #20
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	3303      	adds	r3, #3
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	021b      	lsls	r3, r3, #8
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	3202      	adds	r2, #2
 800c78e:	7812      	ldrb	r2, [r2, #0]
 800c790:	4313      	orrs	r3, r2
 800c792:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	021b      	lsls	r3, r3, #8
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	3201      	adds	r2, #1
 800c79c:	7812      	ldrb	r2, [r2, #0]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	021b      	lsls	r3, r3, #8
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	7812      	ldrb	r2, [r2, #0]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	60fb      	str	r3, [r7, #12]
	return rv;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	1c5a      	adds	r2, r3, #1
 800c7cc:	607a      	str	r2, [r7, #4]
 800c7ce:	887a      	ldrh	r2, [r7, #2]
 800c7d0:	b2d2      	uxtb	r2, r2
 800c7d2:	701a      	strb	r2, [r3, #0]
 800c7d4:	887b      	ldrh	r3, [r7, #2]
 800c7d6:	0a1b      	lsrs	r3, r3, #8
 800c7d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	1c5a      	adds	r2, r3, #1
 800c7de:	607a      	str	r2, [r7, #4]
 800c7e0:	887a      	ldrh	r2, [r7, #2]
 800c7e2:	b2d2      	uxtb	r2, r2
 800c7e4:	701a      	strb	r2, [r3, #0]
}
 800c7e6:	bf00      	nop
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b083      	sub	sp, #12
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	1c5a      	adds	r2, r3, #1
 800c800:	607a      	str	r2, [r7, #4]
 800c802:	683a      	ldr	r2, [r7, #0]
 800c804:	b2d2      	uxtb	r2, r2
 800c806:	701a      	strb	r2, [r3, #0]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	0a1b      	lsrs	r3, r3, #8
 800c80c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	607a      	str	r2, [r7, #4]
 800c814:	683a      	ldr	r2, [r7, #0]
 800c816:	b2d2      	uxtb	r2, r2
 800c818:	701a      	strb	r2, [r3, #0]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	0a1b      	lsrs	r3, r3, #8
 800c81e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	1c5a      	adds	r2, r3, #1
 800c824:	607a      	str	r2, [r7, #4]
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	b2d2      	uxtb	r2, r2
 800c82a:	701a      	strb	r2, [r3, #0]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	0a1b      	lsrs	r3, r3, #8
 800c830:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	607a      	str	r2, [r7, #4]
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	b2d2      	uxtb	r2, r2
 800c83c:	701a      	strb	r2, [r3, #0]
}
 800c83e:	bf00      	nop
 800c840:	370c      	adds	r7, #12
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr

0800c84a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c84a:	b480      	push	{r7}
 800c84c:	b087      	sub	sp, #28
 800c84e:	af00      	add	r7, sp, #0
 800c850:	60f8      	str	r0, [r7, #12]
 800c852:	60b9      	str	r1, [r7, #8]
 800c854:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00d      	beq.n	800c880 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	1c53      	adds	r3, r2, #1
 800c868:	613b      	str	r3, [r7, #16]
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	1c59      	adds	r1, r3, #1
 800c86e:	6179      	str	r1, [r7, #20]
 800c870:	7812      	ldrb	r2, [r2, #0]
 800c872:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	3b01      	subs	r3, #1
 800c878:	607b      	str	r3, [r7, #4]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1f1      	bne.n	800c864 <mem_cpy+0x1a>
	}
}
 800c880:	bf00      	nop
 800c882:	371c      	adds	r7, #28
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c88c:	b480      	push	{r7}
 800c88e:	b087      	sub	sp, #28
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	1c5a      	adds	r2, r3, #1
 800c8a0:	617a      	str	r2, [r7, #20]
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	b2d2      	uxtb	r2, r2
 800c8a6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	607b      	str	r3, [r7, #4]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1f3      	bne.n	800c89c <mem_set+0x10>
}
 800c8b4:	bf00      	nop
 800c8b6:	bf00      	nop
 800c8b8:	371c      	adds	r7, #28
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c8c2:	b480      	push	{r7}
 800c8c4:	b089      	sub	sp, #36	@ 0x24
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	60f8      	str	r0, [r7, #12]
 800c8ca:	60b9      	str	r1, [r7, #8]
 800c8cc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	61fb      	str	r3, [r7, #28]
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	1c5a      	adds	r2, r3, #1
 800c8de:	61fa      	str	r2, [r7, #28]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	1c5a      	adds	r2, r3, #1
 800c8e8:	61ba      	str	r2, [r7, #24]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	1acb      	subs	r3, r1, r3
 800c8ee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	607b      	str	r3, [r7, #4]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <mem_cmp+0x40>
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d0eb      	beq.n	800c8da <mem_cmp+0x18>

	return r;
 800c902:	697b      	ldr	r3, [r7, #20]
}
 800c904:	4618      	mov	r0, r3
 800c906:	3724      	adds	r7, #36	@ 0x24
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c91a:	e002      	b.n	800c922 <chk_chr+0x12>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	3301      	adds	r3, #1
 800c920:	607b      	str	r3, [r7, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d005      	beq.n	800c936 <chk_chr+0x26>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	4293      	cmp	r3, r2
 800c934:	d1f2      	bne.n	800c91c <chk_chr+0xc>
	return *str;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	781b      	ldrb	r3, [r3, #0]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	370c      	adds	r7, #12
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b082      	sub	sp, #8
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d009      	beq.n	800c968 <lock_fs+0x22>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	4618      	mov	r0, r3
 800c95a:	f002 f8df 	bl	800eb1c <ff_req_grant>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d001      	beq.n	800c968 <lock_fs+0x22>
 800c964:	2301      	movs	r3, #1
 800c966:	e000      	b.n	800c96a <lock_fs+0x24>
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b082      	sub	sp, #8
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	460b      	mov	r3, r1
 800c97c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00d      	beq.n	800c9a0 <unlock_fs+0x2e>
 800c984:	78fb      	ldrb	r3, [r7, #3]
 800c986:	2b0c      	cmp	r3, #12
 800c988:	d00a      	beq.n	800c9a0 <unlock_fs+0x2e>
 800c98a:	78fb      	ldrb	r3, [r7, #3]
 800c98c:	2b0b      	cmp	r3, #11
 800c98e:	d007      	beq.n	800c9a0 <unlock_fs+0x2e>
 800c990:	78fb      	ldrb	r3, [r7, #3]
 800c992:	2b0f      	cmp	r3, #15
 800c994:	d004      	beq.n	800c9a0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f002 f8d3 	bl	800eb46 <ff_rel_grant>
	}
}
 800c9a0:	bf00      	nop
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	60bb      	str	r3, [r7, #8]
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	60fb      	str	r3, [r7, #12]
 800c9ba:	e029      	b.n	800ca10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c9bc:	4a27      	ldr	r2, [pc, #156]	@ (800ca5c <chk_lock+0xb4>)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	011b      	lsls	r3, r3, #4
 800c9c2:	4413      	add	r3, r2
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d01d      	beq.n	800ca06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c9ca:	4a24      	ldr	r2, [pc, #144]	@ (800ca5c <chk_lock+0xb4>)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	011b      	lsls	r3, r3, #4
 800c9d0:	4413      	add	r3, r2
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d116      	bne.n	800ca0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c9dc:	4a1f      	ldr	r2, [pc, #124]	@ (800ca5c <chk_lock+0xb4>)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	011b      	lsls	r3, r3, #4
 800c9e2:	4413      	add	r3, r2
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d10c      	bne.n	800ca0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c9f0:	4a1a      	ldr	r2, [pc, #104]	@ (800ca5c <chk_lock+0xb4>)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	011b      	lsls	r3, r3, #4
 800c9f6:	4413      	add	r3, r2
 800c9f8:	3308      	adds	r3, #8
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d102      	bne.n	800ca0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ca04:	e007      	b.n	800ca16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ca06:	2301      	movs	r3, #1
 800ca08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	60fb      	str	r3, [r7, #12]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d9d2      	bls.n	800c9bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	d109      	bne.n	800ca30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d102      	bne.n	800ca28 <chk_lock+0x80>
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d101      	bne.n	800ca2c <chk_lock+0x84>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	e010      	b.n	800ca4e <chk_lock+0xa6>
 800ca2c:	2312      	movs	r3, #18
 800ca2e:	e00e      	b.n	800ca4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d108      	bne.n	800ca48 <chk_lock+0xa0>
 800ca36:	4a09      	ldr	r2, [pc, #36]	@ (800ca5c <chk_lock+0xb4>)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	011b      	lsls	r3, r3, #4
 800ca3c:	4413      	add	r3, r2
 800ca3e:	330c      	adds	r3, #12
 800ca40:	881b      	ldrh	r3, [r3, #0]
 800ca42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca46:	d101      	bne.n	800ca4c <chk_lock+0xa4>
 800ca48:	2310      	movs	r3, #16
 800ca4a:	e000      	b.n	800ca4e <chk_lock+0xa6>
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3714      	adds	r7, #20
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	2400034c 	.word	0x2400034c

0800ca60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ca66:	2300      	movs	r3, #0
 800ca68:	607b      	str	r3, [r7, #4]
 800ca6a:	e002      	b.n	800ca72 <enq_lock+0x12>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	607b      	str	r3, [r7, #4]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d806      	bhi.n	800ca86 <enq_lock+0x26>
 800ca78:	4a09      	ldr	r2, [pc, #36]	@ (800caa0 <enq_lock+0x40>)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	011b      	lsls	r3, r3, #4
 800ca7e:	4413      	add	r3, r2
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1f2      	bne.n	800ca6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b02      	cmp	r3, #2
 800ca8a:	bf14      	ite	ne
 800ca8c:	2301      	movne	r3, #1
 800ca8e:	2300      	moveq	r3, #0
 800ca90:	b2db      	uxtb	r3, r3
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	370c      	adds	r7, #12
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	2400034c 	.word	0x2400034c

0800caa4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800caae:	2300      	movs	r3, #0
 800cab0:	60fb      	str	r3, [r7, #12]
 800cab2:	e01f      	b.n	800caf4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cab4:	4a41      	ldr	r2, [pc, #260]	@ (800cbbc <inc_lock+0x118>)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	011b      	lsls	r3, r3, #4
 800caba:	4413      	add	r3, r2
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d113      	bne.n	800caee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cac6:	4a3d      	ldr	r2, [pc, #244]	@ (800cbbc <inc_lock+0x118>)
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	011b      	lsls	r3, r3, #4
 800cacc:	4413      	add	r3, r2
 800cace:	3304      	adds	r3, #4
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d109      	bne.n	800caee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cada:	4a38      	ldr	r2, [pc, #224]	@ (800cbbc <inc_lock+0x118>)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	011b      	lsls	r3, r3, #4
 800cae0:	4413      	add	r3, r2
 800cae2:	3308      	adds	r3, #8
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800caea:	429a      	cmp	r2, r3
 800caec:	d006      	beq.n	800cafc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3301      	adds	r3, #1
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d9dc      	bls.n	800cab4 <inc_lock+0x10>
 800cafa:	e000      	b.n	800cafe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cafc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2b02      	cmp	r3, #2
 800cb02:	d132      	bne.n	800cb6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb04:	2300      	movs	r3, #0
 800cb06:	60fb      	str	r3, [r7, #12]
 800cb08:	e002      	b.n	800cb10 <inc_lock+0x6c>
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	60fb      	str	r3, [r7, #12]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d806      	bhi.n	800cb24 <inc_lock+0x80>
 800cb16:	4a29      	ldr	r2, [pc, #164]	@ (800cbbc <inc_lock+0x118>)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	011b      	lsls	r3, r3, #4
 800cb1c:	4413      	add	r3, r2
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1f2      	bne.n	800cb0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d101      	bne.n	800cb2e <inc_lock+0x8a>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e040      	b.n	800cbb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	4922      	ldr	r1, [pc, #136]	@ (800cbbc <inc_lock+0x118>)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	011b      	lsls	r3, r3, #4
 800cb38:	440b      	add	r3, r1
 800cb3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	689a      	ldr	r2, [r3, #8]
 800cb40:	491e      	ldr	r1, [pc, #120]	@ (800cbbc <inc_lock+0x118>)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	011b      	lsls	r3, r3, #4
 800cb46:	440b      	add	r3, r1
 800cb48:	3304      	adds	r3, #4
 800cb4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	695a      	ldr	r2, [r3, #20]
 800cb50:	491a      	ldr	r1, [pc, #104]	@ (800cbbc <inc_lock+0x118>)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	011b      	lsls	r3, r3, #4
 800cb56:	440b      	add	r3, r1
 800cb58:	3308      	adds	r3, #8
 800cb5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cb5c:	4a17      	ldr	r2, [pc, #92]	@ (800cbbc <inc_lock+0x118>)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	011b      	lsls	r3, r3, #4
 800cb62:	4413      	add	r3, r2
 800cb64:	330c      	adds	r3, #12
 800cb66:	2200      	movs	r2, #0
 800cb68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d009      	beq.n	800cb84 <inc_lock+0xe0>
 800cb70:	4a12      	ldr	r2, [pc, #72]	@ (800cbbc <inc_lock+0x118>)
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	011b      	lsls	r3, r3, #4
 800cb76:	4413      	add	r3, r2
 800cb78:	330c      	adds	r3, #12
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d001      	beq.n	800cb84 <inc_lock+0xe0>
 800cb80:	2300      	movs	r3, #0
 800cb82:	e015      	b.n	800cbb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d108      	bne.n	800cb9c <inc_lock+0xf8>
 800cb8a:	4a0c      	ldr	r2, [pc, #48]	@ (800cbbc <inc_lock+0x118>)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	011b      	lsls	r3, r3, #4
 800cb90:	4413      	add	r3, r2
 800cb92:	330c      	adds	r3, #12
 800cb94:	881b      	ldrh	r3, [r3, #0]
 800cb96:	3301      	adds	r3, #1
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	e001      	b.n	800cba0 <inc_lock+0xfc>
 800cb9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cba0:	4906      	ldr	r1, [pc, #24]	@ (800cbbc <inc_lock+0x118>)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	011b      	lsls	r3, r3, #4
 800cba6:	440b      	add	r3, r1
 800cba8:	330c      	adds	r3, #12
 800cbaa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	3301      	adds	r3, #1
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3714      	adds	r7, #20
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	2400034c 	.word	0x2400034c

0800cbc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	607b      	str	r3, [r7, #4]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d825      	bhi.n	800cc20 <dec_lock+0x60>
		n = Files[i].ctr;
 800cbd4:	4a17      	ldr	r2, [pc, #92]	@ (800cc34 <dec_lock+0x74>)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	011b      	lsls	r3, r3, #4
 800cbda:	4413      	add	r3, r2
 800cbdc:	330c      	adds	r3, #12
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cbe2:	89fb      	ldrh	r3, [r7, #14]
 800cbe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbe8:	d101      	bne.n	800cbee <dec_lock+0x2e>
 800cbea:	2300      	movs	r3, #0
 800cbec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cbee:	89fb      	ldrh	r3, [r7, #14]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <dec_lock+0x3a>
 800cbf4:	89fb      	ldrh	r3, [r7, #14]
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cbfa:	4a0e      	ldr	r2, [pc, #56]	@ (800cc34 <dec_lock+0x74>)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	011b      	lsls	r3, r3, #4
 800cc00:	4413      	add	r3, r2
 800cc02:	330c      	adds	r3, #12
 800cc04:	89fa      	ldrh	r2, [r7, #14]
 800cc06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cc08:	89fb      	ldrh	r3, [r7, #14]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d105      	bne.n	800cc1a <dec_lock+0x5a>
 800cc0e:	4a09      	ldr	r2, [pc, #36]	@ (800cc34 <dec_lock+0x74>)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	011b      	lsls	r3, r3, #4
 800cc14:	4413      	add	r3, r2
 800cc16:	2200      	movs	r2, #0
 800cc18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	737b      	strb	r3, [r7, #13]
 800cc1e:	e001      	b.n	800cc24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cc20:	2302      	movs	r3, #2
 800cc22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cc24:	7b7b      	ldrb	r3, [r7, #13]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3714      	adds	r7, #20
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	2400034c 	.word	0x2400034c

0800cc38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cc40:	2300      	movs	r3, #0
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	e010      	b.n	800cc68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cc46:	4a0d      	ldr	r2, [pc, #52]	@ (800cc7c <clear_lock+0x44>)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	011b      	lsls	r3, r3, #4
 800cc4c:	4413      	add	r3, r2
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d105      	bne.n	800cc62 <clear_lock+0x2a>
 800cc56:	4a09      	ldr	r2, [pc, #36]	@ (800cc7c <clear_lock+0x44>)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	011b      	lsls	r3, r3, #4
 800cc5c:	4413      	add	r3, r2
 800cc5e:	2200      	movs	r2, #0
 800cc60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3301      	adds	r3, #1
 800cc66:	60fb      	str	r3, [r7, #12]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d9eb      	bls.n	800cc46 <clear_lock+0xe>
	}
}
 800cc6e:	bf00      	nop
 800cc70:	bf00      	nop
 800cc72:	3714      	adds	r7, #20
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr
 800cc7c:	2400034c 	.word	0x2400034c

0800cc80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b086      	sub	sp, #24
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	78db      	ldrb	r3, [r3, #3]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d034      	beq.n	800ccfe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	7858      	ldrb	r0, [r3, #1]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cca4:	2301      	movs	r3, #1
 800cca6:	697a      	ldr	r2, [r7, #20]
 800cca8:	f7ff fd0e 	bl	800c6c8 <disk_write>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d002      	beq.n	800ccb8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	73fb      	strb	r3, [r7, #15]
 800ccb6:	e022      	b.n	800ccfe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	1ad2      	subs	r2, r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d217      	bcs.n	800ccfe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	789b      	ldrb	r3, [r3, #2]
 800ccd2:	613b      	str	r3, [r7, #16]
 800ccd4:	e010      	b.n	800ccf8 <sync_window+0x78>
					wsect += fs->fsize;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	69db      	ldr	r3, [r3, #28]
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	4413      	add	r3, r2
 800ccde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	7858      	ldrb	r0, [r3, #1]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ccea:	2301      	movs	r3, #1
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	f7ff fceb 	bl	800c6c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	613b      	str	r3, [r7, #16]
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d8eb      	bhi.n	800ccd6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3718      	adds	r7, #24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d01b      	beq.n	800cd58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f7ff ffad 	bl	800cc80 <sync_window>
 800cd26:	4603      	mov	r3, r0
 800cd28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cd2a:	7bfb      	ldrb	r3, [r7, #15]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d113      	bne.n	800cd58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	7858      	ldrb	r0, [r3, #1]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	683a      	ldr	r2, [r7, #0]
 800cd3e:	f7ff fca3 	bl	800c688 <disk_read>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d004      	beq.n	800cd52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cd48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
	...

0800cd64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f7ff ff87 	bl	800cc80 <sync_window>
 800cd72:	4603      	mov	r3, r0
 800cd74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cd76:	7bfb      	ldrb	r3, [r7, #15]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d158      	bne.n	800ce2e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	2b03      	cmp	r3, #3
 800cd82:	d148      	bne.n	800ce16 <sync_fs+0xb2>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	791b      	ldrb	r3, [r3, #4]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d144      	bne.n	800ce16 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	3334      	adds	r3, #52	@ 0x34
 800cd90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd94:	2100      	movs	r1, #0
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7ff fd78 	bl	800c88c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	3334      	adds	r3, #52	@ 0x34
 800cda0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cda4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7ff fd07 	bl	800c7bc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	3334      	adds	r3, #52	@ 0x34
 800cdb2:	4921      	ldr	r1, [pc, #132]	@ (800ce38 <sync_fs+0xd4>)
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7ff fd1c 	bl	800c7f2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	3334      	adds	r3, #52	@ 0x34
 800cdbe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cdc2:	491e      	ldr	r1, [pc, #120]	@ (800ce3c <sync_fs+0xd8>)
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7ff fd14 	bl	800c7f2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	3334      	adds	r3, #52	@ 0x34
 800cdce:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	695b      	ldr	r3, [r3, #20]
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	4610      	mov	r0, r2
 800cdda:	f7ff fd0a 	bl	800c7f2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	3334      	adds	r3, #52	@ 0x34
 800cde2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	4619      	mov	r1, r3
 800cdec:	4610      	mov	r0, r2
 800cdee:	f7ff fd00 	bl	800c7f2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	1c5a      	adds	r2, r3, #1
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	7858      	ldrb	r0, [r3, #1]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	f7ff fc5c 	bl	800c6c8 <disk_write>
			fs->fsi_flag = 0;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	785b      	ldrb	r3, [r3, #1]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7ff fc72 	bl	800c708 <disk_ioctl>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d001      	beq.n	800ce2e <sync_fs+0xca>
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	41615252 	.word	0x41615252
 800ce3c:	61417272 	.word	0x61417272

0800ce40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	3b02      	subs	r3, #2
 800ce4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	699b      	ldr	r3, [r3, #24]
 800ce54:	3b02      	subs	r3, #2
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d301      	bcc.n	800ce60 <clust2sect+0x20>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	e008      	b.n	800ce72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	895b      	ldrh	r3, [r3, #10]
 800ce64:	461a      	mov	r2, r3
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	fb03 f202 	mul.w	r2, r3, r2
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce70:	4413      	add	r3, r2
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	370c      	adds	r7, #12
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr

0800ce7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b086      	sub	sp, #24
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d904      	bls.n	800ce9e <get_fat+0x20>
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	683a      	ldr	r2, [r7, #0]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d302      	bcc.n	800cea4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ce9e:	2301      	movs	r3, #1
 800cea0:	617b      	str	r3, [r7, #20]
 800cea2:	e08e      	b.n	800cfc2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cea4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cea8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	2b03      	cmp	r3, #3
 800ceb0:	d061      	beq.n	800cf76 <get_fat+0xf8>
 800ceb2:	2b03      	cmp	r3, #3
 800ceb4:	dc7b      	bgt.n	800cfae <get_fat+0x130>
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d002      	beq.n	800cec0 <get_fat+0x42>
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d041      	beq.n	800cf42 <get_fat+0xc4>
 800cebe:	e076      	b.n	800cfae <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	085b      	lsrs	r3, r3, #1
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	4413      	add	r3, r2
 800cecc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	0a5b      	lsrs	r3, r3, #9
 800ced6:	4413      	add	r3, r2
 800ced8:	4619      	mov	r1, r3
 800ceda:	6938      	ldr	r0, [r7, #16]
 800cedc:	f7ff ff14 	bl	800cd08 <move_window>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d166      	bne.n	800cfb4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	60fa      	str	r2, [r7, #12]
 800ceec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cef0:	693a      	ldr	r2, [r7, #16]
 800cef2:	4413      	add	r3, r2
 800cef4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cef8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	0a5b      	lsrs	r3, r3, #9
 800cf02:	4413      	add	r3, r2
 800cf04:	4619      	mov	r1, r3
 800cf06:	6938      	ldr	r0, [r7, #16]
 800cf08:	f7ff fefe 	bl	800cd08 <move_window>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d152      	bne.n	800cfb8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cf20:	021b      	lsls	r3, r3, #8
 800cf22:	68ba      	ldr	r2, [r7, #8]
 800cf24:	4313      	orrs	r3, r2
 800cf26:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	f003 0301 	and.w	r3, r3, #1
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d002      	beq.n	800cf38 <get_fat+0xba>
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	091b      	lsrs	r3, r3, #4
 800cf36:	e002      	b.n	800cf3e <get_fat+0xc0>
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf3e:	617b      	str	r3, [r7, #20]
			break;
 800cf40:	e03f      	b.n	800cfc2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	0a1b      	lsrs	r3, r3, #8
 800cf4a:	4413      	add	r3, r2
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	6938      	ldr	r0, [r7, #16]
 800cf50:	f7ff feda 	bl	800cd08 <move_window>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d130      	bne.n	800cfbc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cf68:	4413      	add	r3, r2
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7ff fbea 	bl	800c744 <ld_word>
 800cf70:	4603      	mov	r3, r0
 800cf72:	617b      	str	r3, [r7, #20]
			break;
 800cf74:	e025      	b.n	800cfc2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	09db      	lsrs	r3, r3, #7
 800cf7e:	4413      	add	r3, r2
 800cf80:	4619      	mov	r1, r3
 800cf82:	6938      	ldr	r0, [r7, #16]
 800cf84:	f7ff fec0 	bl	800cd08 <move_window>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d118      	bne.n	800cfc0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cf9c:	4413      	add	r3, r2
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7ff fbe9 	bl	800c776 <ld_dword>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800cfaa:	617b      	str	r3, [r7, #20]
			break;
 800cfac:	e009      	b.n	800cfc2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cfae:	2301      	movs	r3, #1
 800cfb0:	617b      	str	r3, [r7, #20]
 800cfb2:	e006      	b.n	800cfc2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfb4:	bf00      	nop
 800cfb6:	e004      	b.n	800cfc2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfb8:	bf00      	nop
 800cfba:	e002      	b.n	800cfc2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cfbc:	bf00      	nop
 800cfbe:	e000      	b.n	800cfc2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cfc0:	bf00      	nop
		}
	}

	return val;
 800cfc2:	697b      	ldr	r3, [r7, #20]
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3718      	adds	r7, #24
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cfcc:	b590      	push	{r4, r7, lr}
 800cfce:	b089      	sub	sp, #36	@ 0x24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cfd8:	2302      	movs	r3, #2
 800cfda:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	f240 80d9 	bls.w	800d196 <put_fat+0x1ca>
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	68ba      	ldr	r2, [r7, #8]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	f080 80d3 	bcs.w	800d196 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	2b03      	cmp	r3, #3
 800cff6:	f000 8096 	beq.w	800d126 <put_fat+0x15a>
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	f300 80cb 	bgt.w	800d196 <put_fat+0x1ca>
 800d000:	2b01      	cmp	r3, #1
 800d002:	d002      	beq.n	800d00a <put_fat+0x3e>
 800d004:	2b02      	cmp	r3, #2
 800d006:	d06e      	beq.n	800d0e6 <put_fat+0x11a>
 800d008:	e0c5      	b.n	800d196 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	61bb      	str	r3, [r7, #24]
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	085b      	lsrs	r3, r3, #1
 800d012:	69ba      	ldr	r2, [r7, #24]
 800d014:	4413      	add	r3, r2
 800d016:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	0a5b      	lsrs	r3, r3, #9
 800d020:	4413      	add	r3, r2
 800d022:	4619      	mov	r1, r3
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f7ff fe6f 	bl	800cd08 <move_window>
 800d02a:	4603      	mov	r3, r0
 800d02c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d02e:	7ffb      	ldrb	r3, [r7, #31]
 800d030:	2b00      	cmp	r3, #0
 800d032:	f040 80a9 	bne.w	800d188 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	1c59      	adds	r1, r3, #1
 800d040:	61b9      	str	r1, [r7, #24]
 800d042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d046:	4413      	add	r3, r2
 800d048:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	f003 0301 	and.w	r3, r3, #1
 800d050:	2b00      	cmp	r3, #0
 800d052:	d00d      	beq.n	800d070 <put_fat+0xa4>
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	b25b      	sxtb	r3, r3
 800d05a:	f003 030f 	and.w	r3, r3, #15
 800d05e:	b25a      	sxtb	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	b25b      	sxtb	r3, r3
 800d064:	011b      	lsls	r3, r3, #4
 800d066:	b25b      	sxtb	r3, r3
 800d068:	4313      	orrs	r3, r2
 800d06a:	b25b      	sxtb	r3, r3
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	e001      	b.n	800d074 <put_fat+0xa8>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	b2db      	uxtb	r3, r3
 800d074:	697a      	ldr	r2, [r7, #20]
 800d076:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2201      	movs	r2, #1
 800d07c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	0a5b      	lsrs	r3, r3, #9
 800d086:	4413      	add	r3, r2
 800d088:	4619      	mov	r1, r3
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f7ff fe3c 	bl	800cd08 <move_window>
 800d090:	4603      	mov	r3, r0
 800d092:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d094:	7ffb      	ldrb	r3, [r7, #31]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d178      	bne.n	800d18c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a6:	4413      	add	r3, r2
 800d0a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	f003 0301 	and.w	r3, r3, #1
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d003      	beq.n	800d0bc <put_fat+0xf0>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	091b      	lsrs	r3, r3, #4
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	e00e      	b.n	800d0da <put_fat+0x10e>
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	b25b      	sxtb	r3, r3
 800d0c2:	f023 030f 	bic.w	r3, r3, #15
 800d0c6:	b25a      	sxtb	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	0a1b      	lsrs	r3, r3, #8
 800d0cc:	b25b      	sxtb	r3, r3
 800d0ce:	f003 030f 	and.w	r3, r3, #15
 800d0d2:	b25b      	sxtb	r3, r3
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	b25b      	sxtb	r3, r3
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	70da      	strb	r2, [r3, #3]
			break;
 800d0e4:	e057      	b.n	800d196 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	0a1b      	lsrs	r3, r3, #8
 800d0ee:	4413      	add	r3, r2
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f7ff fe08 	bl	800cd08 <move_window>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0fc:	7ffb      	ldrb	r3, [r7, #31]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d146      	bne.n	800d190 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	005b      	lsls	r3, r3, #1
 800d10c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d110:	4413      	add	r3, r2
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	b292      	uxth	r2, r2
 800d116:	4611      	mov	r1, r2
 800d118:	4618      	mov	r0, r3
 800d11a:	f7ff fb4f 	bl	800c7bc <st_word>
			fs->wflag = 1;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2201      	movs	r2, #1
 800d122:	70da      	strb	r2, [r3, #3]
			break;
 800d124:	e037      	b.n	800d196 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	09db      	lsrs	r3, r3, #7
 800d12e:	4413      	add	r3, r2
 800d130:	4619      	mov	r1, r3
 800d132:	68f8      	ldr	r0, [r7, #12]
 800d134:	f7ff fde8 	bl	800cd08 <move_window>
 800d138:	4603      	mov	r3, r0
 800d13a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d13c:	7ffb      	ldrb	r3, [r7, #31]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d128      	bne.n	800d194 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d156:	4413      	add	r3, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff fb0c 	bl	800c776 <ld_dword>
 800d15e:	4603      	mov	r3, r0
 800d160:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d164:	4323      	orrs	r3, r4
 800d166:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d176:	4413      	add	r3, r2
 800d178:	6879      	ldr	r1, [r7, #4]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7ff fb39 	bl	800c7f2 <st_dword>
			fs->wflag = 1;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2201      	movs	r2, #1
 800d184:	70da      	strb	r2, [r3, #3]
			break;
 800d186:	e006      	b.n	800d196 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d188:	bf00      	nop
 800d18a:	e004      	b.n	800d196 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d18c:	bf00      	nop
 800d18e:	e002      	b.n	800d196 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d190:	bf00      	nop
 800d192:	e000      	b.n	800d196 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d194:	bf00      	nop
		}
	}
	return res;
 800d196:	7ffb      	ldrb	r3, [r7, #31]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3724      	adds	r7, #36	@ 0x24
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd90      	pop	{r4, r7, pc}

0800d1a0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b088      	sub	sp, #32
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d904      	bls.n	800d1c6 <remove_chain+0x26>
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	699b      	ldr	r3, [r3, #24]
 800d1c0:	68ba      	ldr	r2, [r7, #8]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d301      	bcc.n	800d1ca <remove_chain+0x2a>
 800d1c6:	2302      	movs	r3, #2
 800d1c8:	e04b      	b.n	800d262 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00c      	beq.n	800d1ea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d1d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d1d4:	6879      	ldr	r1, [r7, #4]
 800d1d6:	69b8      	ldr	r0, [r7, #24]
 800d1d8:	f7ff fef8 	bl	800cfcc <put_fat>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d1e0:	7ffb      	ldrb	r3, [r7, #31]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <remove_chain+0x4a>
 800d1e6:	7ffb      	ldrb	r3, [r7, #31]
 800d1e8:	e03b      	b.n	800d262 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d1ea:	68b9      	ldr	r1, [r7, #8]
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f7ff fe46 	bl	800ce7e <get_fat>
 800d1f2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d031      	beq.n	800d25e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d101      	bne.n	800d204 <remove_chain+0x64>
 800d200:	2302      	movs	r3, #2
 800d202:	e02e      	b.n	800d262 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d20a:	d101      	bne.n	800d210 <remove_chain+0x70>
 800d20c:	2301      	movs	r3, #1
 800d20e:	e028      	b.n	800d262 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d210:	2200      	movs	r2, #0
 800d212:	68b9      	ldr	r1, [r7, #8]
 800d214:	69b8      	ldr	r0, [r7, #24]
 800d216:	f7ff fed9 	bl	800cfcc <put_fat>
 800d21a:	4603      	mov	r3, r0
 800d21c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d21e:	7ffb      	ldrb	r3, [r7, #31]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d001      	beq.n	800d228 <remove_chain+0x88>
 800d224:	7ffb      	ldrb	r3, [r7, #31]
 800d226:	e01c      	b.n	800d262 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	695a      	ldr	r2, [r3, #20]
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	699b      	ldr	r3, [r3, #24]
 800d230:	3b02      	subs	r3, #2
 800d232:	429a      	cmp	r2, r3
 800d234:	d20b      	bcs.n	800d24e <remove_chain+0xae>
			fs->free_clst++;
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	695b      	ldr	r3, [r3, #20]
 800d23a:	1c5a      	adds	r2, r3, #1
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	791b      	ldrb	r3, [r3, #4]
 800d244:	f043 0301 	orr.w	r3, r3, #1
 800d248:	b2da      	uxtb	r2, r3
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	699b      	ldr	r3, [r3, #24]
 800d256:	68ba      	ldr	r2, [r7, #8]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d3c6      	bcc.n	800d1ea <remove_chain+0x4a>
 800d25c:	e000      	b.n	800d260 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d25e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d260:	2300      	movs	r3, #0
}
 800d262:	4618      	mov	r0, r3
 800d264:	3720      	adds	r7, #32
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b088      	sub	sp, #32
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
 800d272:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d10d      	bne.n	800d29c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d004      	beq.n	800d296 <create_chain+0x2c>
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	699b      	ldr	r3, [r3, #24]
 800d290:	69ba      	ldr	r2, [r7, #24]
 800d292:	429a      	cmp	r2, r3
 800d294:	d31b      	bcc.n	800d2ce <create_chain+0x64>
 800d296:	2301      	movs	r3, #1
 800d298:	61bb      	str	r3, [r7, #24]
 800d29a:	e018      	b.n	800d2ce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d29c:	6839      	ldr	r1, [r7, #0]
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7ff fded 	bl	800ce7e <get_fat>
 800d2a4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d801      	bhi.n	800d2b0 <create_chain+0x46>
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e070      	b.n	800d392 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d2b6:	d101      	bne.n	800d2bc <create_chain+0x52>
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	e06a      	b.n	800d392 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	699b      	ldr	r3, [r3, #24]
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d201      	bcs.n	800d2ca <create_chain+0x60>
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	e063      	b.n	800d392 <create_chain+0x128>
		scl = clst;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	699b      	ldr	r3, [r3, #24]
 800d2dc:	69fa      	ldr	r2, [r7, #28]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d307      	bcc.n	800d2f2 <create_chain+0x88>
				ncl = 2;
 800d2e2:	2302      	movs	r3, #2
 800d2e4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d2e6:	69fa      	ldr	r2, [r7, #28]
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d901      	bls.n	800d2f2 <create_chain+0x88>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	e04f      	b.n	800d392 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d2f2:	69f9      	ldr	r1, [r7, #28]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f7ff fdc2 	bl	800ce7e <get_fat>
 800d2fa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00e      	beq.n	800d320 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2b01      	cmp	r3, #1
 800d306:	d003      	beq.n	800d310 <create_chain+0xa6>
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d30e:	d101      	bne.n	800d314 <create_chain+0xaa>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	e03e      	b.n	800d392 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d314:	69fa      	ldr	r2, [r7, #28]
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d1da      	bne.n	800d2d2 <create_chain+0x68>
 800d31c:	2300      	movs	r3, #0
 800d31e:	e038      	b.n	800d392 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d320:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d322:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d326:	69f9      	ldr	r1, [r7, #28]
 800d328:	6938      	ldr	r0, [r7, #16]
 800d32a:	f7ff fe4f 	bl	800cfcc <put_fat>
 800d32e:	4603      	mov	r3, r0
 800d330:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d109      	bne.n	800d34c <create_chain+0xe2>
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d006      	beq.n	800d34c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d33e:	69fa      	ldr	r2, [r7, #28]
 800d340:	6839      	ldr	r1, [r7, #0]
 800d342:	6938      	ldr	r0, [r7, #16]
 800d344:	f7ff fe42 	bl	800cfcc <put_fat>
 800d348:	4603      	mov	r3, r0
 800d34a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d116      	bne.n	800d380 <create_chain+0x116>
		fs->last_clst = ncl;
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	69fa      	ldr	r2, [r7, #28]
 800d356:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	695a      	ldr	r2, [r3, #20]
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	699b      	ldr	r3, [r3, #24]
 800d360:	3b02      	subs	r3, #2
 800d362:	429a      	cmp	r2, r3
 800d364:	d804      	bhi.n	800d370 <create_chain+0x106>
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	1e5a      	subs	r2, r3, #1
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	791b      	ldrb	r3, [r3, #4]
 800d374:	f043 0301 	orr.w	r3, r3, #1
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	711a      	strb	r2, [r3, #4]
 800d37e:	e007      	b.n	800d390 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d380:	7dfb      	ldrb	r3, [r7, #23]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d102      	bne.n	800d38c <create_chain+0x122>
 800d386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d38a:	e000      	b.n	800d38e <create_chain+0x124>
 800d38c:	2301      	movs	r3, #1
 800d38e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d390:	69fb      	ldr	r3, [r7, #28]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3720      	adds	r7, #32
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d39a:	b480      	push	{r7}
 800d39c:	b087      	sub	sp, #28
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
 800d3a2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	0a5b      	lsrs	r3, r3, #9
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	8952      	ldrh	r2, [r2, #10]
 800d3ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	1d1a      	adds	r2, r3, #4
 800d3c4:	613a      	str	r2, [r7, #16]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <clmt_clust+0x3a>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	e010      	b.n	800d3f6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d3d4:	697a      	ldr	r2, [r7, #20]
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d307      	bcc.n	800d3ec <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	617b      	str	r3, [r7, #20]
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	3304      	adds	r3, #4
 800d3e8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d3ea:	e7e9      	b.n	800d3c0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d3ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	4413      	add	r3, r2
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	371c      	adds	r7, #28
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d402:	b580      	push	{r7, lr}
 800d404:	b086      	sub	sp, #24
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
 800d40a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d418:	d204      	bcs.n	800d424 <dir_sdi+0x22>
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	f003 031f 	and.w	r3, r3, #31
 800d420:	2b00      	cmp	r3, #0
 800d422:	d001      	beq.n	800d428 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d424:	2302      	movs	r3, #2
 800d426:	e063      	b.n	800d4f0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	683a      	ldr	r2, [r7, #0]
 800d42c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d106      	bne.n	800d448 <dir_sdi+0x46>
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	2b02      	cmp	r3, #2
 800d440:	d902      	bls.n	800d448 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d446:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d10c      	bne.n	800d468 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	095b      	lsrs	r3, r3, #5
 800d452:	693a      	ldr	r2, [r7, #16]
 800d454:	8912      	ldrh	r2, [r2, #8]
 800d456:	4293      	cmp	r3, r2
 800d458:	d301      	bcc.n	800d45e <dir_sdi+0x5c>
 800d45a:	2302      	movs	r3, #2
 800d45c:	e048      	b.n	800d4f0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	61da      	str	r2, [r3, #28]
 800d466:	e029      	b.n	800d4bc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	895b      	ldrh	r3, [r3, #10]
 800d46c:	025b      	lsls	r3, r3, #9
 800d46e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d470:	e019      	b.n	800d4a6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6979      	ldr	r1, [r7, #20]
 800d476:	4618      	mov	r0, r3
 800d478:	f7ff fd01 	bl	800ce7e <get_fat>
 800d47c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d484:	d101      	bne.n	800d48a <dir_sdi+0x88>
 800d486:	2301      	movs	r3, #1
 800d488:	e032      	b.n	800d4f0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d904      	bls.n	800d49a <dir_sdi+0x98>
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	699b      	ldr	r3, [r3, #24]
 800d494:	697a      	ldr	r2, [r7, #20]
 800d496:	429a      	cmp	r2, r3
 800d498:	d301      	bcc.n	800d49e <dir_sdi+0x9c>
 800d49a:	2302      	movs	r3, #2
 800d49c:	e028      	b.n	800d4f0 <dir_sdi+0xee>
			ofs -= csz;
 800d49e:	683a      	ldr	r2, [r7, #0]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	1ad3      	subs	r3, r2, r3
 800d4a4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d4a6:	683a      	ldr	r2, [r7, #0]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d2e1      	bcs.n	800d472 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d4ae:	6979      	ldr	r1, [r7, #20]
 800d4b0:	6938      	ldr	r0, [r7, #16]
 800d4b2:	f7ff fcc5 	bl	800ce40 <clust2sect>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	697a      	ldr	r2, [r7, #20]
 800d4c0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	69db      	ldr	r3, [r3, #28]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d101      	bne.n	800d4ce <dir_sdi+0xcc>
 800d4ca:	2302      	movs	r3, #2
 800d4cc:	e010      	b.n	800d4f0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	69da      	ldr	r2, [r3, #28]
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	0a5b      	lsrs	r3, r3, #9
 800d4d6:	441a      	add	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4e8:	441a      	add	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d4ee:	2300      	movs	r3, #0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	695b      	ldr	r3, [r3, #20]
 800d50c:	3320      	adds	r3, #32
 800d50e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	69db      	ldr	r3, [r3, #28]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d003      	beq.n	800d520 <dir_next+0x28>
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d51e:	d301      	bcc.n	800d524 <dir_next+0x2c>
 800d520:	2304      	movs	r3, #4
 800d522:	e0aa      	b.n	800d67a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f040 8098 	bne.w	800d660 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	69db      	ldr	r3, [r3, #28]
 800d534:	1c5a      	adds	r2, r3, #1
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	699b      	ldr	r3, [r3, #24]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10b      	bne.n	800d55a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	095b      	lsrs	r3, r3, #5
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	8912      	ldrh	r2, [r2, #8]
 800d54a:	4293      	cmp	r3, r2
 800d54c:	f0c0 8088 	bcc.w	800d660 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	61da      	str	r2, [r3, #28]
 800d556:	2304      	movs	r3, #4
 800d558:	e08f      	b.n	800d67a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	0a5b      	lsrs	r3, r3, #9
 800d55e:	68fa      	ldr	r2, [r7, #12]
 800d560:	8952      	ldrh	r2, [r2, #10]
 800d562:	3a01      	subs	r2, #1
 800d564:	4013      	ands	r3, r2
 800d566:	2b00      	cmp	r3, #0
 800d568:	d17a      	bne.n	800d660 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	699b      	ldr	r3, [r3, #24]
 800d570:	4619      	mov	r1, r3
 800d572:	4610      	mov	r0, r2
 800d574:	f7ff fc83 	bl	800ce7e <get_fat>
 800d578:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d801      	bhi.n	800d584 <dir_next+0x8c>
 800d580:	2302      	movs	r3, #2
 800d582:	e07a      	b.n	800d67a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d58a:	d101      	bne.n	800d590 <dir_next+0x98>
 800d58c:	2301      	movs	r3, #1
 800d58e:	e074      	b.n	800d67a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	699b      	ldr	r3, [r3, #24]
 800d594:	697a      	ldr	r2, [r7, #20]
 800d596:	429a      	cmp	r2, r3
 800d598:	d358      	bcc.n	800d64c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d104      	bne.n	800d5aa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	61da      	str	r2, [r3, #28]
 800d5a6:	2304      	movs	r3, #4
 800d5a8:	e067      	b.n	800d67a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	699b      	ldr	r3, [r3, #24]
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	f7ff fe59 	bl	800d26a <create_chain>
 800d5b8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d101      	bne.n	800d5c4 <dir_next+0xcc>
 800d5c0:	2307      	movs	r3, #7
 800d5c2:	e05a      	b.n	800d67a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d101      	bne.n	800d5ce <dir_next+0xd6>
 800d5ca:	2302      	movs	r3, #2
 800d5cc:	e055      	b.n	800d67a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5d4:	d101      	bne.n	800d5da <dir_next+0xe2>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e04f      	b.n	800d67a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f7ff fb50 	bl	800cc80 <sync_window>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d001      	beq.n	800d5ea <dir_next+0xf2>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e047      	b.n	800d67a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	3334      	adds	r3, #52	@ 0x34
 800d5ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7ff f949 	bl	800c88c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	613b      	str	r3, [r7, #16]
 800d5fe:	6979      	ldr	r1, [r7, #20]
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f7ff fc1d 	bl	800ce40 <clust2sect>
 800d606:	4602      	mov	r2, r0
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	631a      	str	r2, [r3, #48]	@ 0x30
 800d60c:	e012      	b.n	800d634 <dir_next+0x13c>
						fs->wflag = 1;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2201      	movs	r2, #1
 800d612:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f7ff fb33 	bl	800cc80 <sync_window>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d001      	beq.n	800d624 <dir_next+0x12c>
 800d620:	2301      	movs	r3, #1
 800d622:	e02a      	b.n	800d67a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	3301      	adds	r3, #1
 800d628:	613b      	str	r3, [r7, #16]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d62e:	1c5a      	adds	r2, r3, #1
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	631a      	str	r2, [r3, #48]	@ 0x30
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	895b      	ldrh	r3, [r3, #10]
 800d638:	461a      	mov	r2, r3
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d3e6      	bcc.n	800d60e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	1ad2      	subs	r2, r2, r3
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	697a      	ldr	r2, [r7, #20]
 800d650:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d652:	6979      	ldr	r1, [r7, #20]
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f7ff fbf3 	bl	800ce40 <clust2sect>
 800d65a:	4602      	mov	r2, r0
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d672:	441a      	add	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3718      	adds	r7, #24
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b086      	sub	sp, #24
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
 800d68a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d692:	2100      	movs	r1, #0
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff feb4 	bl	800d402 <dir_sdi>
 800d69a:	4603      	mov	r3, r0
 800d69c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d69e:	7dfb      	ldrb	r3, [r7, #23]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d12b      	bne.n	800d6fc <dir_alloc+0x7a>
		n = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	69db      	ldr	r3, [r3, #28]
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f7ff fb2a 	bl	800cd08 <move_window>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d6b8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d11d      	bne.n	800d6fa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6a1b      	ldr	r3, [r3, #32]
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2be5      	cmp	r3, #229	@ 0xe5
 800d6c6:	d004      	beq.n	800d6d2 <dir_alloc+0x50>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a1b      	ldr	r3, [r3, #32]
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d107      	bne.n	800d6e2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	613b      	str	r3, [r7, #16]
 800d6d8:	693a      	ldr	r2, [r7, #16]
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d102      	bne.n	800d6e6 <dir_alloc+0x64>
 800d6e0:	e00c      	b.n	800d6fc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d6e6:	2101      	movs	r1, #1
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff ff05 	bl	800d4f8 <dir_next>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d0d7      	beq.n	800d6a8 <dir_alloc+0x26>
 800d6f8:	e000      	b.n	800d6fc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d6fa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d6fc:	7dfb      	ldrb	r3, [r7, #23]
 800d6fe:	2b04      	cmp	r3, #4
 800d700:	d101      	bne.n	800d706 <dir_alloc+0x84>
 800d702:	2307      	movs	r3, #7
 800d704:	75fb      	strb	r3, [r7, #23]
	return res;
 800d706:	7dfb      	ldrb	r3, [r7, #23]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3718      	adds	r7, #24
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	331a      	adds	r3, #26
 800d71e:	4618      	mov	r0, r3
 800d720:	f7ff f810 	bl	800c744 <ld_word>
 800d724:	4603      	mov	r3, r0
 800d726:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b03      	cmp	r3, #3
 800d72e:	d109      	bne.n	800d744 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	3314      	adds	r3, #20
 800d734:	4618      	mov	r0, r3
 800d736:	f7ff f805 	bl	800c744 <ld_word>
 800d73a:	4603      	mov	r3, r0
 800d73c:	041b      	lsls	r3, r3, #16
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	4313      	orrs	r3, r2
 800d742:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d744:	68fb      	ldr	r3, [r7, #12]
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b084      	sub	sp, #16
 800d752:	af00      	add	r7, sp, #0
 800d754:	60f8      	str	r0, [r7, #12]
 800d756:	60b9      	str	r1, [r7, #8]
 800d758:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	331a      	adds	r3, #26
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	b292      	uxth	r2, r2
 800d762:	4611      	mov	r1, r2
 800d764:	4618      	mov	r0, r3
 800d766:	f7ff f829 	bl	800c7bc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	2b03      	cmp	r3, #3
 800d770:	d109      	bne.n	800d786 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	f103 0214 	add.w	r2, r3, #20
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	0c1b      	lsrs	r3, r3, #16
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	4619      	mov	r1, r3
 800d780:	4610      	mov	r0, r2
 800d782:	f7ff f81b 	bl	800c7bc <st_word>
	}
}
 800d786:	bf00      	nop
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b086      	sub	sp, #24
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d79c:	2100      	movs	r1, #0
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f7ff fe2f 	bl	800d402 <dir_sdi>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d7a8:	7dfb      	ldrb	r3, [r7, #23]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d001      	beq.n	800d7b2 <dir_find+0x24>
 800d7ae:	7dfb      	ldrb	r3, [r7, #23]
 800d7b0:	e03e      	b.n	800d830 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	69db      	ldr	r3, [r3, #28]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	6938      	ldr	r0, [r7, #16]
 800d7ba:	f7ff faa5 	bl	800cd08 <move_window>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d7c2:	7dfb      	ldrb	r3, [r7, #23]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d12f      	bne.n	800d828 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6a1b      	ldr	r3, [r3, #32]
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d7d0:	7bfb      	ldrb	r3, [r7, #15]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d102      	bne.n	800d7dc <dir_find+0x4e>
 800d7d6:	2304      	movs	r3, #4
 800d7d8:	75fb      	strb	r3, [r7, #23]
 800d7da:	e028      	b.n	800d82e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6a1b      	ldr	r3, [r3, #32]
 800d7e0:	330b      	adds	r3, #11
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d7e8:	b2da      	uxtb	r2, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a1b      	ldr	r3, [r3, #32]
 800d7f2:	330b      	adds	r3, #11
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	f003 0308 	and.w	r3, r3, #8
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d10a      	bne.n	800d814 <dir_find+0x86>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a18      	ldr	r0, [r3, #32]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	3324      	adds	r3, #36	@ 0x24
 800d806:	220b      	movs	r2, #11
 800d808:	4619      	mov	r1, r3
 800d80a:	f7ff f85a 	bl	800c8c2 <mem_cmp>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00b      	beq.n	800d82c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d814:	2100      	movs	r1, #0
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7ff fe6e 	bl	800d4f8 <dir_next>
 800d81c:	4603      	mov	r3, r0
 800d81e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d820:	7dfb      	ldrb	r3, [r7, #23]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d0c5      	beq.n	800d7b2 <dir_find+0x24>
 800d826:	e002      	b.n	800d82e <dir_find+0xa0>
		if (res != FR_OK) break;
 800d828:	bf00      	nop
 800d82a:	e000      	b.n	800d82e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d82c:	bf00      	nop

	return res;
 800d82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d846:	2101      	movs	r1, #1
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7ff ff1a 	bl	800d682 <dir_alloc>
 800d84e:	4603      	mov	r3, r0
 800d850:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d852:	7bfb      	ldrb	r3, [r7, #15]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d11c      	bne.n	800d892 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	69db      	ldr	r3, [r3, #28]
 800d85c:	4619      	mov	r1, r3
 800d85e:	68b8      	ldr	r0, [r7, #8]
 800d860:	f7ff fa52 	bl	800cd08 <move_window>
 800d864:	4603      	mov	r3, r0
 800d866:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d868:	7bfb      	ldrb	r3, [r7, #15]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d111      	bne.n	800d892 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6a1b      	ldr	r3, [r3, #32]
 800d872:	2220      	movs	r2, #32
 800d874:	2100      	movs	r1, #0
 800d876:	4618      	mov	r0, r3
 800d878:	f7ff f808 	bl	800c88c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6a18      	ldr	r0, [r3, #32]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3324      	adds	r3, #36	@ 0x24
 800d884:	220b      	movs	r2, #11
 800d886:	4619      	mov	r1, r3
 800d888:	f7fe ffdf 	bl	800c84a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	2201      	movs	r2, #1
 800d890:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d892:	7bfb      	ldrb	r3, [r7, #15]
}
 800d894:	4618      	mov	r0, r3
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b088      	sub	sp, #32
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	60fb      	str	r3, [r7, #12]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	3324      	adds	r3, #36	@ 0x24
 800d8b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d8b2:	220b      	movs	r2, #11
 800d8b4:	2120      	movs	r1, #32
 800d8b6:	68b8      	ldr	r0, [r7, #8]
 800d8b8:	f7fe ffe8 	bl	800c88c <mem_set>
	si = i = 0; ni = 8;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	613b      	str	r3, [r7, #16]
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	61fb      	str	r3, [r7, #28]
 800d8c4:	2308      	movs	r3, #8
 800d8c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	1c5a      	adds	r2, r3, #1
 800d8cc:	61fa      	str	r2, [r7, #28]
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d8d6:	7efb      	ldrb	r3, [r7, #27]
 800d8d8:	2b20      	cmp	r3, #32
 800d8da:	d94e      	bls.n	800d97a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d8dc:	7efb      	ldrb	r3, [r7, #27]
 800d8de:	2b2f      	cmp	r3, #47	@ 0x2f
 800d8e0:	d006      	beq.n	800d8f0 <create_name+0x54>
 800d8e2:	7efb      	ldrb	r3, [r7, #27]
 800d8e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800d8e6:	d110      	bne.n	800d90a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d8e8:	e002      	b.n	800d8f0 <create_name+0x54>
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	61fb      	str	r3, [r7, #28]
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	2b2f      	cmp	r3, #47	@ 0x2f
 800d8fa:	d0f6      	beq.n	800d8ea <create_name+0x4e>
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	4413      	add	r3, r2
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	2b5c      	cmp	r3, #92	@ 0x5c
 800d906:	d0f0      	beq.n	800d8ea <create_name+0x4e>
			break;
 800d908:	e038      	b.n	800d97c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d90a:	7efb      	ldrb	r3, [r7, #27]
 800d90c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d90e:	d003      	beq.n	800d918 <create_name+0x7c>
 800d910:	693a      	ldr	r2, [r7, #16]
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	429a      	cmp	r2, r3
 800d916:	d30c      	bcc.n	800d932 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b0b      	cmp	r3, #11
 800d91c:	d002      	beq.n	800d924 <create_name+0x88>
 800d91e:	7efb      	ldrb	r3, [r7, #27]
 800d920:	2b2e      	cmp	r3, #46	@ 0x2e
 800d922:	d001      	beq.n	800d928 <create_name+0x8c>
 800d924:	2306      	movs	r3, #6
 800d926:	e044      	b.n	800d9b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d928:	2308      	movs	r3, #8
 800d92a:	613b      	str	r3, [r7, #16]
 800d92c:	230b      	movs	r3, #11
 800d92e:	617b      	str	r3, [r7, #20]
			continue;
 800d930:	e022      	b.n	800d978 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d932:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d936:	2b00      	cmp	r3, #0
 800d938:	da04      	bge.n	800d944 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d93a:	7efb      	ldrb	r3, [r7, #27]
 800d93c:	3b80      	subs	r3, #128	@ 0x80
 800d93e:	4a1f      	ldr	r2, [pc, #124]	@ (800d9bc <create_name+0x120>)
 800d940:	5cd3      	ldrb	r3, [r2, r3]
 800d942:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d944:	7efb      	ldrb	r3, [r7, #27]
 800d946:	4619      	mov	r1, r3
 800d948:	481d      	ldr	r0, [pc, #116]	@ (800d9c0 <create_name+0x124>)
 800d94a:	f7fe ffe1 	bl	800c910 <chk_chr>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d001      	beq.n	800d958 <create_name+0xbc>
 800d954:	2306      	movs	r3, #6
 800d956:	e02c      	b.n	800d9b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d958:	7efb      	ldrb	r3, [r7, #27]
 800d95a:	2b60      	cmp	r3, #96	@ 0x60
 800d95c:	d905      	bls.n	800d96a <create_name+0xce>
 800d95e:	7efb      	ldrb	r3, [r7, #27]
 800d960:	2b7a      	cmp	r3, #122	@ 0x7a
 800d962:	d802      	bhi.n	800d96a <create_name+0xce>
 800d964:	7efb      	ldrb	r3, [r7, #27]
 800d966:	3b20      	subs	r3, #32
 800d968:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	1c5a      	adds	r2, r3, #1
 800d96e:	613a      	str	r2, [r7, #16]
 800d970:	68ba      	ldr	r2, [r7, #8]
 800d972:	4413      	add	r3, r2
 800d974:	7efa      	ldrb	r2, [r7, #27]
 800d976:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d978:	e7a6      	b.n	800d8c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d97a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	441a      	add	r2, r3
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d101      	bne.n	800d990 <create_name+0xf4>
 800d98c:	2306      	movs	r3, #6
 800d98e:	e010      	b.n	800d9b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	2be5      	cmp	r3, #229	@ 0xe5
 800d996:	d102      	bne.n	800d99e <create_name+0x102>
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	2205      	movs	r2, #5
 800d99c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d99e:	7efb      	ldrb	r3, [r7, #27]
 800d9a0:	2b20      	cmp	r3, #32
 800d9a2:	d801      	bhi.n	800d9a8 <create_name+0x10c>
 800d9a4:	2204      	movs	r2, #4
 800d9a6:	e000      	b.n	800d9aa <create_name+0x10e>
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	330b      	adds	r3, #11
 800d9ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d9b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3720      	adds	r7, #32
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	08013edc 	.word	0x08013edc
 800d9c0:	08013c98 	.word	0x08013c98

0800d9c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d9d8:	e002      	b.n	800d9e0 <follow_path+0x1c>
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	603b      	str	r3, [r7, #0]
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800d9e6:	d0f8      	beq.n	800d9da <follow_path+0x16>
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800d9ee:	d0f4      	beq.n	800d9da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	2b1f      	cmp	r3, #31
 800d9fc:	d80a      	bhi.n	800da14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2280      	movs	r2, #128	@ 0x80
 800da02:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800da06:	2100      	movs	r1, #0
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7ff fcfa 	bl	800d402 <dir_sdi>
 800da0e:	4603      	mov	r3, r0
 800da10:	75fb      	strb	r3, [r7, #23]
 800da12:	e043      	b.n	800da9c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da14:	463b      	mov	r3, r7
 800da16:	4619      	mov	r1, r3
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7ff ff3f 	bl	800d89c <create_name>
 800da1e:	4603      	mov	r3, r0
 800da20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800da22:	7dfb      	ldrb	r3, [r7, #23]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d134      	bne.n	800da92 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f7ff feb0 	bl	800d78e <dir_find>
 800da2e:	4603      	mov	r3, r0
 800da30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800da38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00a      	beq.n	800da56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800da40:	7dfb      	ldrb	r3, [r7, #23]
 800da42:	2b04      	cmp	r3, #4
 800da44:	d127      	bne.n	800da96 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800da46:	7afb      	ldrb	r3, [r7, #11]
 800da48:	f003 0304 	and.w	r3, r3, #4
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d122      	bne.n	800da96 <follow_path+0xd2>
 800da50:	2305      	movs	r3, #5
 800da52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800da54:	e01f      	b.n	800da96 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da56:	7afb      	ldrb	r3, [r7, #11]
 800da58:	f003 0304 	and.w	r3, r3, #4
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d11c      	bne.n	800da9a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	799b      	ldrb	r3, [r3, #6]
 800da64:	f003 0310 	and.w	r3, r3, #16
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d102      	bne.n	800da72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800da6c:	2305      	movs	r3, #5
 800da6e:	75fb      	strb	r3, [r7, #23]
 800da70:	e014      	b.n	800da9c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	695b      	ldr	r3, [r3, #20]
 800da7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da80:	4413      	add	r3, r2
 800da82:	4619      	mov	r1, r3
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f7ff fe43 	bl	800d710 <ld_clust>
 800da8a:	4602      	mov	r2, r0
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da90:	e7c0      	b.n	800da14 <follow_path+0x50>
			if (res != FR_OK) break;
 800da92:	bf00      	nop
 800da94:	e002      	b.n	800da9c <follow_path+0xd8>
				break;
 800da96:	bf00      	nop
 800da98:	e000      	b.n	800da9c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da9a:	bf00      	nop
			}
		}
	}

	return res;
 800da9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3718      	adds	r7, #24
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800daa6:	b480      	push	{r7}
 800daa8:	b087      	sub	sp, #28
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800daae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dab2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d031      	beq.n	800db20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	617b      	str	r3, [r7, #20]
 800dac2:	e002      	b.n	800daca <get_ldnumber+0x24>
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	3301      	adds	r3, #1
 800dac8:	617b      	str	r3, [r7, #20]
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b20      	cmp	r3, #32
 800dad0:	d903      	bls.n	800dada <get_ldnumber+0x34>
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b3a      	cmp	r3, #58	@ 0x3a
 800dad8:	d1f4      	bne.n	800dac4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	2b3a      	cmp	r3, #58	@ 0x3a
 800dae0:	d11c      	bne.n	800db1c <get_ldnumber+0x76>
			tp = *path;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	1c5a      	adds	r2, r3, #1
 800daec:	60fa      	str	r2, [r7, #12]
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	3b30      	subs	r3, #48	@ 0x30
 800daf2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2b09      	cmp	r3, #9
 800daf8:	d80e      	bhi.n	800db18 <get_ldnumber+0x72>
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d10a      	bne.n	800db18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d107      	bne.n	800db18 <get_ldnumber+0x72>
					vol = (int)i;
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	3301      	adds	r3, #1
 800db10:	617b      	str	r3, [r7, #20]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	e002      	b.n	800db22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800db1c:	2300      	movs	r3, #0
 800db1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800db20:	693b      	ldr	r3, [r7, #16]
}
 800db22:	4618      	mov	r0, r3
 800db24:	371c      	adds	r7, #28
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
	...

0800db30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	70da      	strb	r2, [r3, #3]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db46:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800db48:	6839      	ldr	r1, [r7, #0]
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f7ff f8dc 	bl	800cd08 <move_window>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d001      	beq.n	800db5a <check_fs+0x2a>
 800db56:	2304      	movs	r3, #4
 800db58:	e038      	b.n	800dbcc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	3334      	adds	r3, #52	@ 0x34
 800db5e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800db62:	4618      	mov	r0, r3
 800db64:	f7fe fdee 	bl	800c744 <ld_word>
 800db68:	4603      	mov	r3, r0
 800db6a:	461a      	mov	r2, r3
 800db6c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800db70:	429a      	cmp	r2, r3
 800db72:	d001      	beq.n	800db78 <check_fs+0x48>
 800db74:	2303      	movs	r3, #3
 800db76:	e029      	b.n	800dbcc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db7e:	2be9      	cmp	r3, #233	@ 0xe9
 800db80:	d009      	beq.n	800db96 <check_fs+0x66>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db88:	2beb      	cmp	r3, #235	@ 0xeb
 800db8a:	d11e      	bne.n	800dbca <check_fs+0x9a>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800db92:	2b90      	cmp	r3, #144	@ 0x90
 800db94:	d119      	bne.n	800dbca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	3334      	adds	r3, #52	@ 0x34
 800db9a:	3336      	adds	r3, #54	@ 0x36
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fe fdea 	bl	800c776 <ld_dword>
 800dba2:	4603      	mov	r3, r0
 800dba4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dba8:	4a0a      	ldr	r2, [pc, #40]	@ (800dbd4 <check_fs+0xa4>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d101      	bne.n	800dbb2 <check_fs+0x82>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	e00c      	b.n	800dbcc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	3334      	adds	r3, #52	@ 0x34
 800dbb6:	3352      	adds	r3, #82	@ 0x52
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fe fddc 	bl	800c776 <ld_dword>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	4a05      	ldr	r2, [pc, #20]	@ (800dbd8 <check_fs+0xa8>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d101      	bne.n	800dbca <check_fs+0x9a>
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	e000      	b.n	800dbcc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dbca:	2302      	movs	r3, #2
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	00544146 	.word	0x00544146
 800dbd8:	33544146 	.word	0x33544146

0800dbdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b096      	sub	sp, #88	@ 0x58
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	2200      	movs	r2, #0
 800dbee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f7ff ff58 	bl	800daa6 <get_ldnumber>
 800dbf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dbf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	da01      	bge.n	800dc02 <find_volume+0x26>
 800dbfe:	230b      	movs	r3, #11
 800dc00:	e235      	b.n	800e06e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dc02:	4aa5      	ldr	r2, [pc, #660]	@ (800de98 <find_volume+0x2bc>)
 800dc04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc0a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d101      	bne.n	800dc16 <find_volume+0x3a>
 800dc12:	230c      	movs	r3, #12
 800dc14:	e22b      	b.n	800e06e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800dc16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dc18:	f7fe fe95 	bl	800c946 <lock_fs>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d101      	bne.n	800dc26 <find_volume+0x4a>
 800dc22:	230f      	movs	r3, #15
 800dc24:	e223      	b.n	800e06e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dc2c:	79fb      	ldrb	r3, [r7, #7]
 800dc2e:	f023 0301 	bic.w	r3, r3, #1
 800dc32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d01a      	beq.n	800dc72 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc3e:	785b      	ldrb	r3, [r3, #1]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe fcdf 	bl	800c604 <disk_status>
 800dc46:	4603      	mov	r3, r0
 800dc48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dc4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc50:	f003 0301 	and.w	r3, r3, #1
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d10c      	bne.n	800dc72 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d007      	beq.n	800dc6e <find_volume+0x92>
 800dc5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc62:	f003 0304 	and.w	r3, r3, #4
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d001      	beq.n	800dc6e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800dc6a:	230a      	movs	r3, #10
 800dc6c:	e1ff      	b.n	800e06e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800dc6e:	2300      	movs	r3, #0
 800dc70:	e1fd      	b.n	800e06e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc74:	2200      	movs	r2, #0
 800dc76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dc78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dc80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc82:	785b      	ldrb	r3, [r3, #1]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fe fcd7 	bl	800c638 <disk_initialize>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dc90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc94:	f003 0301 	and.w	r3, r3, #1
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d001      	beq.n	800dca0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dc9c:	2303      	movs	r3, #3
 800dc9e:	e1e6      	b.n	800e06e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dca0:	79fb      	ldrb	r3, [r7, #7]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d007      	beq.n	800dcb6 <find_volume+0xda>
 800dca6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dcaa:	f003 0304 	and.w	r3, r3, #4
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d001      	beq.n	800dcb6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800dcb2:	230a      	movs	r3, #10
 800dcb4:	e1db      	b.n	800e06e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dcba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dcbc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dcbe:	f7ff ff37 	bl	800db30 <check_fs>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dcc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d149      	bne.n	800dd64 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcd4:	e01e      	b.n	800dd14 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dcd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcd8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dcdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcde:	011b      	lsls	r3, r3, #4
 800dce0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800dce4:	4413      	add	r3, r2
 800dce6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcea:	3304      	adds	r3, #4
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d006      	beq.n	800dd00 <find_volume+0x124>
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf4:	3308      	adds	r3, #8
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fe fd3d 	bl	800c776 <ld_dword>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	e000      	b.n	800dd02 <find_volume+0x126>
 800dd00:	2200      	movs	r2, #0
 800dd02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	3358      	adds	r3, #88	@ 0x58
 800dd08:	443b      	add	r3, r7
 800dd0a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dd0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd10:	3301      	adds	r3, #1
 800dd12:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd16:	2b03      	cmp	r3, #3
 800dd18:	d9dd      	bls.n	800dcd6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800dd1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <find_volume+0x14e>
 800dd24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd26:	3b01      	subs	r3, #1
 800dd28:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dd2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	3358      	adds	r3, #88	@ 0x58
 800dd30:	443b      	add	r3, r7
 800dd32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dd36:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dd38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d005      	beq.n	800dd4a <find_volume+0x16e>
 800dd3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dd40:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dd42:	f7ff fef5 	bl	800db30 <check_fs>
 800dd46:	4603      	mov	r3, r0
 800dd48:	e000      	b.n	800dd4c <find_volume+0x170>
 800dd4a:	2303      	movs	r3, #3
 800dd4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dd50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d905      	bls.n	800dd64 <find_volume+0x188>
 800dd58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd60:	2b03      	cmp	r3, #3
 800dd62:	d9e2      	bls.n	800dd2a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dd64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd68:	2b04      	cmp	r3, #4
 800dd6a:	d101      	bne.n	800dd70 <find_volume+0x194>
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	e17e      	b.n	800e06e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dd70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d901      	bls.n	800dd7c <find_volume+0x1a0>
 800dd78:	230d      	movs	r3, #13
 800dd7a:	e178      	b.n	800e06e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7e:	3334      	adds	r3, #52	@ 0x34
 800dd80:	330b      	adds	r3, #11
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fe fcde 	bl	800c744 <ld_word>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd8e:	d001      	beq.n	800dd94 <find_volume+0x1b8>
 800dd90:	230d      	movs	r3, #13
 800dd92:	e16c      	b.n	800e06e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dd94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd96:	3334      	adds	r3, #52	@ 0x34
 800dd98:	3316      	adds	r3, #22
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7fe fcd2 	bl	800c744 <ld_word>
 800dda0:	4603      	mov	r3, r0
 800dda2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dda4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d106      	bne.n	800ddb8 <find_volume+0x1dc>
 800ddaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddac:	3334      	adds	r3, #52	@ 0x34
 800ddae:	3324      	adds	r3, #36	@ 0x24
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fe fce0 	bl	800c776 <ld_dword>
 800ddb6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ddb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ddbc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ddbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ddc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ddc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddca:	789b      	ldrb	r3, [r3, #2]
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d005      	beq.n	800dddc <find_volume+0x200>
 800ddd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd2:	789b      	ldrb	r3, [r3, #2]
 800ddd4:	2b02      	cmp	r3, #2
 800ddd6:	d001      	beq.n	800dddc <find_volume+0x200>
 800ddd8:	230d      	movs	r3, #13
 800ddda:	e148      	b.n	800e06e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddde:	789b      	ldrb	r3, [r3, #2]
 800dde0:	461a      	mov	r2, r3
 800dde2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dde4:	fb02 f303 	mul.w	r3, r2, r3
 800dde8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ddea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddf4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ddf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddf8:	895b      	ldrh	r3, [r3, #10]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d008      	beq.n	800de10 <find_volume+0x234>
 800ddfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de00:	895b      	ldrh	r3, [r3, #10]
 800de02:	461a      	mov	r2, r3
 800de04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de06:	895b      	ldrh	r3, [r3, #10]
 800de08:	3b01      	subs	r3, #1
 800de0a:	4013      	ands	r3, r2
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <find_volume+0x238>
 800de10:	230d      	movs	r3, #13
 800de12:	e12c      	b.n	800e06e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800de14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de16:	3334      	adds	r3, #52	@ 0x34
 800de18:	3311      	adds	r3, #17
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fe fc92 	bl	800c744 <ld_word>
 800de20:	4603      	mov	r3, r0
 800de22:	461a      	mov	r2, r3
 800de24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de26:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800de28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2a:	891b      	ldrh	r3, [r3, #8]
 800de2c:	f003 030f 	and.w	r3, r3, #15
 800de30:	b29b      	uxth	r3, r3
 800de32:	2b00      	cmp	r3, #0
 800de34:	d001      	beq.n	800de3a <find_volume+0x25e>
 800de36:	230d      	movs	r3, #13
 800de38:	e119      	b.n	800e06e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800de3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de3c:	3334      	adds	r3, #52	@ 0x34
 800de3e:	3313      	adds	r3, #19
 800de40:	4618      	mov	r0, r3
 800de42:	f7fe fc7f 	bl	800c744 <ld_word>
 800de46:	4603      	mov	r3, r0
 800de48:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800de4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d106      	bne.n	800de5e <find_volume+0x282>
 800de50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de52:	3334      	adds	r3, #52	@ 0x34
 800de54:	3320      	adds	r3, #32
 800de56:	4618      	mov	r0, r3
 800de58:	f7fe fc8d 	bl	800c776 <ld_dword>
 800de5c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800de5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de60:	3334      	adds	r3, #52	@ 0x34
 800de62:	330e      	adds	r3, #14
 800de64:	4618      	mov	r0, r3
 800de66:	f7fe fc6d 	bl	800c744 <ld_word>
 800de6a:	4603      	mov	r3, r0
 800de6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800de6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800de70:	2b00      	cmp	r3, #0
 800de72:	d101      	bne.n	800de78 <find_volume+0x29c>
 800de74:	230d      	movs	r3, #13
 800de76:	e0fa      	b.n	800e06e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800de78:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800de7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de7c:	4413      	add	r3, r2
 800de7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de80:	8912      	ldrh	r2, [r2, #8]
 800de82:	0912      	lsrs	r2, r2, #4
 800de84:	b292      	uxth	r2, r2
 800de86:	4413      	add	r3, r2
 800de88:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800de8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8e:	429a      	cmp	r2, r3
 800de90:	d204      	bcs.n	800de9c <find_volume+0x2c0>
 800de92:	230d      	movs	r3, #13
 800de94:	e0eb      	b.n	800e06e <find_volume+0x492>
 800de96:	bf00      	nop
 800de98:	24000344 	.word	0x24000344
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800de9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dea4:	8952      	ldrh	r2, [r2, #10]
 800dea6:	fbb3 f3f2 	udiv	r3, r3, r2
 800deaa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800deac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <find_volume+0x2da>
 800deb2:	230d      	movs	r3, #13
 800deb4:	e0db      	b.n	800e06e <find_volume+0x492>
		fmt = FS_FAT32;
 800deb6:	2303      	movs	r3, #3
 800deb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800debc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800debe:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d802      	bhi.n	800decc <find_volume+0x2f0>
 800dec6:	2302      	movs	r3, #2
 800dec8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800decc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dece:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d802      	bhi.n	800dedc <find_volume+0x300>
 800ded6:	2301      	movs	r3, #1
 800ded8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dede:	1c9a      	adds	r2, r3, #2
 800dee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800dee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dee8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800deea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800deec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800deee:	441a      	add	r2, r3
 800def0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800def4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800def6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def8:	441a      	add	r2, r3
 800defa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800defc:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800defe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800df02:	2b03      	cmp	r3, #3
 800df04:	d11e      	bne.n	800df44 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800df06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df08:	3334      	adds	r3, #52	@ 0x34
 800df0a:	332a      	adds	r3, #42	@ 0x2a
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fe fc19 	bl	800c744 <ld_word>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <find_volume+0x340>
 800df18:	230d      	movs	r3, #13
 800df1a:	e0a8      	b.n	800e06e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800df1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df1e:	891b      	ldrh	r3, [r3, #8]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d001      	beq.n	800df28 <find_volume+0x34c>
 800df24:	230d      	movs	r3, #13
 800df26:	e0a2      	b.n	800e06e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800df28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df2a:	3334      	adds	r3, #52	@ 0x34
 800df2c:	332c      	adds	r3, #44	@ 0x2c
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fe fc21 	bl	800c776 <ld_dword>
 800df34:	4602      	mov	r2, r0
 800df36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df38:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800df3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3c:	699b      	ldr	r3, [r3, #24]
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	647b      	str	r3, [r7, #68]	@ 0x44
 800df42:	e01f      	b.n	800df84 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800df44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df46:	891b      	ldrh	r3, [r3, #8]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d101      	bne.n	800df50 <find_volume+0x374>
 800df4c:	230d      	movs	r3, #13
 800df4e:	e08e      	b.n	800e06e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800df50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df56:	441a      	add	r2, r3
 800df58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df5a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800df5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800df60:	2b02      	cmp	r3, #2
 800df62:	d103      	bne.n	800df6c <find_volume+0x390>
 800df64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df66:	699b      	ldr	r3, [r3, #24]
 800df68:	005b      	lsls	r3, r3, #1
 800df6a:	e00a      	b.n	800df82 <find_volume+0x3a6>
 800df6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df6e:	699a      	ldr	r2, [r3, #24]
 800df70:	4613      	mov	r3, r2
 800df72:	005b      	lsls	r3, r3, #1
 800df74:	4413      	add	r3, r2
 800df76:	085a      	lsrs	r2, r3, #1
 800df78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df7a:	699b      	ldr	r3, [r3, #24]
 800df7c:	f003 0301 	and.w	r3, r3, #1
 800df80:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800df82:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800df84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df86:	69da      	ldr	r2, [r3, #28]
 800df88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df8a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800df8e:	0a5b      	lsrs	r3, r3, #9
 800df90:	429a      	cmp	r2, r3
 800df92:	d201      	bcs.n	800df98 <find_volume+0x3bc>
 800df94:	230d      	movs	r3, #13
 800df96:	e06a      	b.n	800e06e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800df98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df9e:	615a      	str	r2, [r3, #20]
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa2:	695a      	ldr	r2, [r3, #20]
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800dfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfaa:	2280      	movs	r2, #128	@ 0x80
 800dfac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dfae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dfb2:	2b03      	cmp	r3, #3
 800dfb4:	d149      	bne.n	800e04a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb8:	3334      	adds	r3, #52	@ 0x34
 800dfba:	3330      	adds	r3, #48	@ 0x30
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fe fbc1 	bl	800c744 <ld_word>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d140      	bne.n	800e04a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dfc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfca:	3301      	adds	r3, #1
 800dfcc:	4619      	mov	r1, r3
 800dfce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dfd0:	f7fe fe9a 	bl	800cd08 <move_window>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d137      	bne.n	800e04a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800dfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfdc:	2200      	movs	r2, #0
 800dfde:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe2:	3334      	adds	r3, #52	@ 0x34
 800dfe4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7fe fbab 	bl	800c744 <ld_word>
 800dfee:	4603      	mov	r3, r0
 800dff0:	461a      	mov	r2, r3
 800dff2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d127      	bne.n	800e04a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dffc:	3334      	adds	r3, #52	@ 0x34
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fe fbb9 	bl	800c776 <ld_dword>
 800e004:	4603      	mov	r3, r0
 800e006:	4a1c      	ldr	r2, [pc, #112]	@ (800e078 <find_volume+0x49c>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d11e      	bne.n	800e04a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00e:	3334      	adds	r3, #52	@ 0x34
 800e010:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e014:	4618      	mov	r0, r3
 800e016:	f7fe fbae 	bl	800c776 <ld_dword>
 800e01a:	4603      	mov	r3, r0
 800e01c:	4a17      	ldr	r2, [pc, #92]	@ (800e07c <find_volume+0x4a0>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d113      	bne.n	800e04a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e024:	3334      	adds	r3, #52	@ 0x34
 800e026:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fe fba3 	bl	800c776 <ld_dword>
 800e030:	4602      	mov	r2, r0
 800e032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e034:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e038:	3334      	adds	r3, #52	@ 0x34
 800e03a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e03e:	4618      	mov	r0, r3
 800e040:	f7fe fb99 	bl	800c776 <ld_dword>
 800e044:	4602      	mov	r2, r0
 800e046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e048:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e050:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e052:	4b0b      	ldr	r3, [pc, #44]	@ (800e080 <find_volume+0x4a4>)
 800e054:	881b      	ldrh	r3, [r3, #0]
 800e056:	3301      	adds	r3, #1
 800e058:	b29a      	uxth	r2, r3
 800e05a:	4b09      	ldr	r3, [pc, #36]	@ (800e080 <find_volume+0x4a4>)
 800e05c:	801a      	strh	r2, [r3, #0]
 800e05e:	4b08      	ldr	r3, [pc, #32]	@ (800e080 <find_volume+0x4a4>)
 800e060:	881a      	ldrh	r2, [r3, #0]
 800e062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e064:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e066:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e068:	f7fe fde6 	bl	800cc38 <clear_lock>
#endif
	return FR_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3758      	adds	r7, #88	@ 0x58
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	41615252 	.word	0x41615252
 800e07c:	61417272 	.word	0x61417272
 800e080:	24000348 	.word	0x24000348

0800e084 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e08e:	2309      	movs	r3, #9
 800e090:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d02e      	beq.n	800e0f6 <validate+0x72>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d02a      	beq.n	800e0f6 <validate+0x72>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d025      	beq.n	800e0f6 <validate+0x72>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	889a      	ldrh	r2, [r3, #4]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	88db      	ldrh	r3, [r3, #6]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d11e      	bne.n	800e0f6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fe fc42 	bl	800c946 <lock_fs>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d014      	beq.n	800e0f2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	785b      	ldrb	r3, [r3, #1]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fe fa98 	bl	800c604 <disk_status>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	f003 0301 	and.w	r3, r3, #1
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d102      	bne.n	800e0e4 <validate+0x60>
				res = FR_OK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	73fb      	strb	r3, [r7, #15]
 800e0e2:	e008      	b.n	800e0f6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fe fc41 	bl	800c972 <unlock_fs>
 800e0f0:	e001      	b.n	800e0f6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e0f2:	230f      	movs	r3, #15
 800e0f4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d102      	bne.n	800e102 <validate+0x7e>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	e000      	b.n	800e104 <validate+0x80>
 800e102:	2300      	movs	r3, #0
 800e104:	683a      	ldr	r2, [r7, #0]
 800e106:	6013      	str	r3, [r2, #0]
	return res;
 800e108:	7bfb      	ldrb	r3, [r7, #15]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3710      	adds	r7, #16
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
	...

0800e114 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b088      	sub	sp, #32
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	4613      	mov	r3, r2
 800e120:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e126:	f107 0310 	add.w	r3, r7, #16
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff fcbb 	bl	800daa6 <get_ldnumber>
 800e130:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	2b00      	cmp	r3, #0
 800e136:	da01      	bge.n	800e13c <f_mount+0x28>
 800e138:	230b      	movs	r3, #11
 800e13a:	e048      	b.n	800e1ce <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e13c:	4a26      	ldr	r2, [pc, #152]	@ (800e1d8 <f_mount+0xc4>)
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e144:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d00f      	beq.n	800e16c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e14c:	69b8      	ldr	r0, [r7, #24]
 800e14e:	f7fe fd73 	bl	800cc38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	4618      	mov	r0, r3
 800e158:	f000 fcd4 	bl	800eb04 <ff_del_syncobj>
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d101      	bne.n	800e166 <f_mount+0x52>
 800e162:	2302      	movs	r3, #2
 800e164:	e033      	b.n	800e1ce <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	2200      	movs	r2, #0
 800e16a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00f      	beq.n	800e192 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	330c      	adds	r3, #12
 800e180:	4619      	mov	r1, r3
 800e182:	4610      	mov	r0, r2
 800e184:	f000 fca3 	bl	800eace <ff_cre_syncobj>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d101      	bne.n	800e192 <f_mount+0x7e>
 800e18e:	2302      	movs	r3, #2
 800e190:	e01d      	b.n	800e1ce <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	4910      	ldr	r1, [pc, #64]	@ (800e1d8 <f_mount+0xc4>)
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d002      	beq.n	800e1a8 <f_mount+0x94>
 800e1a2:	79fb      	ldrb	r3, [r7, #7]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d001      	beq.n	800e1ac <f_mount+0x98>
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	e010      	b.n	800e1ce <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e1ac:	f107 010c 	add.w	r1, r7, #12
 800e1b0:	f107 0308 	add.w	r3, r7, #8
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7ff fd10 	bl	800dbdc <find_volume>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	7dfa      	ldrb	r2, [r7, #23]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe fbd3 	bl	800c972 <unlock_fs>
 800e1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3720      	adds	r7, #32
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	24000344 	.word	0x24000344

0800e1dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b098      	sub	sp, #96	@ 0x60
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d101      	bne.n	800e1f4 <f_open+0x18>
 800e1f0:	2309      	movs	r3, #9
 800e1f2:	e1b0      	b.n	800e556 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e1fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e1fc:	79fa      	ldrb	r2, [r7, #7]
 800e1fe:	f107 0110 	add.w	r1, r7, #16
 800e202:	f107 0308 	add.w	r3, r7, #8
 800e206:	4618      	mov	r0, r3
 800e208:	f7ff fce8 	bl	800dbdc <find_volume>
 800e20c:	4603      	mov	r3, r0
 800e20e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e212:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e216:	2b00      	cmp	r3, #0
 800e218:	f040 818d 	bne.w	800e536 <f_open+0x35a>
		dj.obj.fs = fs;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	f107 0314 	add.w	r3, r7, #20
 800e226:	4611      	mov	r1, r2
 800e228:	4618      	mov	r0, r3
 800e22a:	f7ff fbcb 	bl	800d9c4 <follow_path>
 800e22e:	4603      	mov	r3, r0
 800e230:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e234:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d118      	bne.n	800e26e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e23c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e240:	b25b      	sxtb	r3, r3
 800e242:	2b00      	cmp	r3, #0
 800e244:	da03      	bge.n	800e24e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e246:	2306      	movs	r3, #6
 800e248:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e24c:	e00f      	b.n	800e26e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e24e:	79fb      	ldrb	r3, [r7, #7]
 800e250:	2b01      	cmp	r3, #1
 800e252:	bf8c      	ite	hi
 800e254:	2301      	movhi	r3, #1
 800e256:	2300      	movls	r3, #0
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	461a      	mov	r2, r3
 800e25c:	f107 0314 	add.w	r3, r7, #20
 800e260:	4611      	mov	r1, r2
 800e262:	4618      	mov	r0, r3
 800e264:	f7fe fba0 	bl	800c9a8 <chk_lock>
 800e268:	4603      	mov	r3, r0
 800e26a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e26e:	79fb      	ldrb	r3, [r7, #7]
 800e270:	f003 031c 	and.w	r3, r3, #28
 800e274:	2b00      	cmp	r3, #0
 800e276:	d07f      	beq.n	800e378 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e278:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d017      	beq.n	800e2b0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e280:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e284:	2b04      	cmp	r3, #4
 800e286:	d10e      	bne.n	800e2a6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e288:	f7fe fbea 	bl	800ca60 <enq_lock>
 800e28c:	4603      	mov	r3, r0
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d006      	beq.n	800e2a0 <f_open+0xc4>
 800e292:	f107 0314 	add.w	r3, r7, #20
 800e296:	4618      	mov	r0, r3
 800e298:	f7ff face 	bl	800d838 <dir_register>
 800e29c:	4603      	mov	r3, r0
 800e29e:	e000      	b.n	800e2a2 <f_open+0xc6>
 800e2a0:	2312      	movs	r3, #18
 800e2a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e2a6:	79fb      	ldrb	r3, [r7, #7]
 800e2a8:	f043 0308 	orr.w	r3, r3, #8
 800e2ac:	71fb      	strb	r3, [r7, #7]
 800e2ae:	e010      	b.n	800e2d2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e2b0:	7ebb      	ldrb	r3, [r7, #26]
 800e2b2:	f003 0311 	and.w	r3, r3, #17
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d003      	beq.n	800e2c2 <f_open+0xe6>
					res = FR_DENIED;
 800e2ba:	2307      	movs	r3, #7
 800e2bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e2c0:	e007      	b.n	800e2d2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e2c2:	79fb      	ldrb	r3, [r7, #7]
 800e2c4:	f003 0304 	and.w	r3, r3, #4
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <f_open+0xf6>
 800e2cc:	2308      	movs	r3, #8
 800e2ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e2d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d168      	bne.n	800e3ac <f_open+0x1d0>
 800e2da:	79fb      	ldrb	r3, [r7, #7]
 800e2dc:	f003 0308 	and.w	r3, r3, #8
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d063      	beq.n	800e3ac <f_open+0x1d0>
				dw = GET_FATTIME();
 800e2e4:	f7fd ff9a 	bl	800c21c <get_fattime>
 800e2e8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e2ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2ec:	330e      	adds	r3, #14
 800e2ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fe fa7e 	bl	800c7f2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2f8:	3316      	adds	r3, #22
 800e2fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7fe fa78 	bl	800c7f2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e304:	330b      	adds	r3, #11
 800e306:	2220      	movs	r2, #32
 800e308:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e30e:	4611      	mov	r1, r2
 800e310:	4618      	mov	r0, r3
 800e312:	f7ff f9fd 	bl	800d710 <ld_clust>
 800e316:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e31c:	2200      	movs	r2, #0
 800e31e:	4618      	mov	r0, r3
 800e320:	f7ff fa15 	bl	800d74e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e326:	331c      	adds	r3, #28
 800e328:	2100      	movs	r1, #0
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fe fa61 	bl	800c7f2 <st_dword>
					fs->wflag = 1;
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	2201      	movs	r2, #1
 800e334:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d037      	beq.n	800e3ac <f_open+0x1d0>
						dw = fs->winsect;
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e340:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e342:	f107 0314 	add.w	r3, r7, #20
 800e346:	2200      	movs	r2, #0
 800e348:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe ff28 	bl	800d1a0 <remove_chain>
 800e350:	4603      	mov	r3, r0
 800e352:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e356:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d126      	bne.n	800e3ac <f_open+0x1d0>
							res = move_window(fs, dw);
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e362:	4618      	mov	r0, r3
 800e364:	f7fe fcd0 	bl	800cd08 <move_window>
 800e368:	4603      	mov	r3, r0
 800e36a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e372:	3a01      	subs	r2, #1
 800e374:	611a      	str	r2, [r3, #16]
 800e376:	e019      	b.n	800e3ac <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e378:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d115      	bne.n	800e3ac <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e380:	7ebb      	ldrb	r3, [r7, #26]
 800e382:	f003 0310 	and.w	r3, r3, #16
 800e386:	2b00      	cmp	r3, #0
 800e388:	d003      	beq.n	800e392 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e38a:	2304      	movs	r3, #4
 800e38c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e390:	e00c      	b.n	800e3ac <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e392:	79fb      	ldrb	r3, [r7, #7]
 800e394:	f003 0302 	and.w	r3, r3, #2
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d007      	beq.n	800e3ac <f_open+0x1d0>
 800e39c:	7ebb      	ldrb	r3, [r7, #26]
 800e39e:	f003 0301 	and.w	r3, r3, #1
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d002      	beq.n	800e3ac <f_open+0x1d0>
						res = FR_DENIED;
 800e3a6:	2307      	movs	r3, #7
 800e3a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e3ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d126      	bne.n	800e402 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e3b4:	79fb      	ldrb	r3, [r7, #7]
 800e3b6:	f003 0308 	and.w	r3, r3, #8
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d003      	beq.n	800e3c6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e3be:	79fb      	ldrb	r3, [r7, #7]
 800e3c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e3ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e3d4:	79fb      	ldrb	r3, [r7, #7]
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	bf8c      	ite	hi
 800e3da:	2301      	movhi	r3, #1
 800e3dc:	2300      	movls	r3, #0
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	f107 0314 	add.w	r3, r7, #20
 800e3e6:	4611      	mov	r1, r2
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fe fb5b 	bl	800caa4 <inc_lock>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	691b      	ldr	r3, [r3, #16]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d102      	bne.n	800e402 <f_open+0x226>
 800e3fc:	2302      	movs	r3, #2
 800e3fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e402:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e406:	2b00      	cmp	r3, #0
 800e408:	f040 8095 	bne.w	800e536 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e410:	4611      	mov	r1, r2
 800e412:	4618      	mov	r0, r3
 800e414:	f7ff f97c 	bl	800d710 <ld_clust>
 800e418:	4602      	mov	r2, r0
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e420:	331c      	adds	r3, #28
 800e422:	4618      	mov	r0, r3
 800e424:	f7fe f9a7 	bl	800c776 <ld_dword>
 800e428:	4602      	mov	r2, r0
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e434:	693a      	ldr	r2, [r7, #16]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	88da      	ldrh	r2, [r3, #6]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	79fa      	ldrb	r2, [r7, #7]
 800e446:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2200      	movs	r2, #0
 800e452:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2200      	movs	r2, #0
 800e458:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	3330      	adds	r3, #48	@ 0x30
 800e45e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e462:	2100      	movs	r1, #0
 800e464:	4618      	mov	r0, r3
 800e466:	f7fe fa11 	bl	800c88c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e46a:	79fb      	ldrb	r3, [r7, #7]
 800e46c:	f003 0320 	and.w	r3, r3, #32
 800e470:	2b00      	cmp	r3, #0
 800e472:	d060      	beq.n	800e536 <f_open+0x35a>
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d05c      	beq.n	800e536 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	68da      	ldr	r2, [r3, #12]
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	895b      	ldrh	r3, [r3, #10]
 800e488:	025b      	lsls	r3, r3, #9
 800e48a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	657b      	str	r3, [r7, #84]	@ 0x54
 800e498:	e016      	b.n	800e4c8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fe fced 	bl	800ce7e <get_fat>
 800e4a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e4a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d802      	bhi.n	800e4b2 <f_open+0x2d6>
 800e4ac:	2302      	movs	r3, #2
 800e4ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e4b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4b8:	d102      	bne.n	800e4c0 <f_open+0x2e4>
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e4c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e4c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4c4:	1ad3      	subs	r3, r2, r3
 800e4c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800e4c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d103      	bne.n	800e4d8 <f_open+0x2fc>
 800e4d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e4d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d8e0      	bhi.n	800e49a <f_open+0x2be>
				}
				fp->clust = clst;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e4de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d127      	bne.n	800e536 <f_open+0x35a>
 800e4e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d022      	beq.n	800e536 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7fe fca3 	bl	800ce40 <clust2sect>
 800e4fa:	6478      	str	r0, [r7, #68]	@ 0x44
 800e4fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d103      	bne.n	800e50a <f_open+0x32e>
						res = FR_INT_ERR;
 800e502:	2302      	movs	r3, #2
 800e504:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e508:	e015      	b.n	800e536 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e50a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e50c:	0a5a      	lsrs	r2, r3, #9
 800e50e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e510:	441a      	add	r2, r3
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	7858      	ldrb	r0, [r3, #1]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6a1a      	ldr	r2, [r3, #32]
 800e524:	2301      	movs	r3, #1
 800e526:	f7fe f8af 	bl	800c688 <disk_read>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d002      	beq.n	800e536 <f_open+0x35a>
 800e530:	2301      	movs	r3, #1
 800e532:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e536:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d002      	beq.n	800e544 <f_open+0x368>
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2200      	movs	r2, #0
 800e542:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800e54a:	4611      	mov	r1, r2
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7fe fa10 	bl	800c972 <unlock_fs>
 800e552:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e556:	4618      	mov	r0, r3
 800e558:	3760      	adds	r7, #96	@ 0x60
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b08c      	sub	sp, #48	@ 0x30
 800e562:	af00      	add	r7, sp, #0
 800e564:	60f8      	str	r0, [r7, #12]
 800e566:	60b9      	str	r1, [r7, #8]
 800e568:	607a      	str	r2, [r7, #4]
 800e56a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	2200      	movs	r2, #0
 800e574:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f107 0210 	add.w	r2, r7, #16
 800e57c:	4611      	mov	r1, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f7ff fd80 	bl	800e084 <validate>
 800e584:	4603      	mov	r3, r0
 800e586:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e58a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d107      	bne.n	800e5a2 <f_write+0x44>
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	7d5b      	ldrb	r3, [r3, #21]
 800e596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e59a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d009      	beq.n	800e5b6 <f_write+0x58>
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e5a8:	4611      	mov	r1, r2
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fe f9e1 	bl	800c972 <unlock_fs>
 800e5b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e5b4:	e173      	b.n	800e89e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	7d1b      	ldrb	r3, [r3, #20]
 800e5ba:	f003 0302 	and.w	r3, r3, #2
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d106      	bne.n	800e5d0 <f_write+0x72>
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	2107      	movs	r1, #7
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7fe f9d3 	bl	800c972 <unlock_fs>
 800e5cc:	2307      	movs	r3, #7
 800e5ce:	e166      	b.n	800e89e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	699a      	ldr	r2, [r3, #24]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	441a      	add	r2, r3
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	699b      	ldr	r3, [r3, #24]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	f080 814b 	bcs.w	800e878 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	699b      	ldr	r3, [r3, #24]
 800e5e6:	43db      	mvns	r3, r3
 800e5e8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e5ea:	e145      	b.n	800e878 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f040 8101 	bne.w	800e7fc <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	699b      	ldr	r3, [r3, #24]
 800e5fe:	0a5b      	lsrs	r3, r3, #9
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	8952      	ldrh	r2, [r2, #10]
 800e604:	3a01      	subs	r2, #1
 800e606:	4013      	ands	r3, r2
 800e608:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d14d      	bne.n	800e6ac <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	699b      	ldr	r3, [r3, #24]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10c      	bne.n	800e632 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	689b      	ldr	r3, [r3, #8]
 800e61c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e620:	2b00      	cmp	r3, #0
 800e622:	d11a      	bne.n	800e65a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2100      	movs	r1, #0
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fe fe1e 	bl	800d26a <create_chain>
 800e62e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e630:	e013      	b.n	800e65a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e636:	2b00      	cmp	r3, #0
 800e638:	d007      	beq.n	800e64a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	699b      	ldr	r3, [r3, #24]
 800e63e:	4619      	mov	r1, r3
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f7fe feaa 	bl	800d39a <clmt_clust>
 800e646:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e648:	e007      	b.n	800e65a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e64a:	68fa      	ldr	r2, [r7, #12]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	69db      	ldr	r3, [r3, #28]
 800e650:	4619      	mov	r1, r3
 800e652:	4610      	mov	r0, r2
 800e654:	f7fe fe09 	bl	800d26a <create_chain>
 800e658:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f000 8110 	beq.w	800e882 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e664:	2b01      	cmp	r3, #1
 800e666:	d109      	bne.n	800e67c <f_write+0x11e>
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2202      	movs	r2, #2
 800e66c:	755a      	strb	r2, [r3, #21]
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	2102      	movs	r1, #2
 800e672:	4618      	mov	r0, r3
 800e674:	f7fe f97d 	bl	800c972 <unlock_fs>
 800e678:	2302      	movs	r3, #2
 800e67a:	e110      	b.n	800e89e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e67e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e682:	d109      	bne.n	800e698 <f_write+0x13a>
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2201      	movs	r2, #1
 800e688:	755a      	strb	r2, [r3, #21]
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	2101      	movs	r1, #1
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fe f96f 	bl	800c972 <unlock_fs>
 800e694:	2301      	movs	r3, #1
 800e696:	e102      	b.n	800e89e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e69c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	689b      	ldr	r3, [r3, #8]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d102      	bne.n	800e6ac <f_write+0x14e>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6aa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	7d1b      	ldrb	r3, [r3, #20]
 800e6b0:	b25b      	sxtb	r3, r3
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	da1d      	bge.n	800e6f2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	7858      	ldrb	r0, [r3, #1]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	6a1a      	ldr	r2, [r3, #32]
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	f7fd ffff 	bl	800c6c8 <disk_write>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d009      	beq.n	800e6e4 <f_write+0x186>
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	755a      	strb	r2, [r3, #21]
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	2101      	movs	r1, #1
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fe f949 	bl	800c972 <unlock_fs>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e0dc      	b.n	800e89e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	7d1b      	ldrb	r3, [r3, #20]
 800e6e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6ec:	b2da      	uxtb	r2, r3
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e6f2:	693a      	ldr	r2, [r7, #16]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	69db      	ldr	r3, [r3, #28]
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	4610      	mov	r0, r2
 800e6fc:	f7fe fba0 	bl	800ce40 <clust2sect>
 800e700:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d109      	bne.n	800e71c <f_write+0x1be>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2202      	movs	r2, #2
 800e70c:	755a      	strb	r2, [r3, #21]
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	2102      	movs	r1, #2
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe f92d 	bl	800c972 <unlock_fs>
 800e718:	2302      	movs	r3, #2
 800e71a:	e0c0      	b.n	800e89e <f_write+0x340>
			sect += csect;
 800e71c:	697a      	ldr	r2, [r7, #20]
 800e71e:	69bb      	ldr	r3, [r7, #24]
 800e720:	4413      	add	r3, r2
 800e722:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	0a5b      	lsrs	r3, r3, #9
 800e728:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e72a:	6a3b      	ldr	r3, [r7, #32]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d041      	beq.n	800e7b4 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e730:	69ba      	ldr	r2, [r7, #24]
 800e732:	6a3b      	ldr	r3, [r7, #32]
 800e734:	4413      	add	r3, r2
 800e736:	693a      	ldr	r2, [r7, #16]
 800e738:	8952      	ldrh	r2, [r2, #10]
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d905      	bls.n	800e74a <f_write+0x1ec>
					cc = fs->csize - csect;
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	895b      	ldrh	r3, [r3, #10]
 800e742:	461a      	mov	r2, r3
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	7858      	ldrb	r0, [r3, #1]
 800e74e:	6a3b      	ldr	r3, [r7, #32]
 800e750:	697a      	ldr	r2, [r7, #20]
 800e752:	69f9      	ldr	r1, [r7, #28]
 800e754:	f7fd ffb8 	bl	800c6c8 <disk_write>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d009      	beq.n	800e772 <f_write+0x214>
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2201      	movs	r2, #1
 800e762:	755a      	strb	r2, [r3, #21]
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	2101      	movs	r1, #1
 800e768:	4618      	mov	r0, r3
 800e76a:	f7fe f902 	bl	800c972 <unlock_fs>
 800e76e:	2301      	movs	r3, #1
 800e770:	e095      	b.n	800e89e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	6a1a      	ldr	r2, [r3, #32]
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	6a3a      	ldr	r2, [r7, #32]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d915      	bls.n	800e7ac <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6a1a      	ldr	r2, [r3, #32]
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	1ad3      	subs	r3, r2, r3
 800e78e:	025b      	lsls	r3, r3, #9
 800e790:	69fa      	ldr	r2, [r7, #28]
 800e792:	4413      	add	r3, r2
 800e794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e798:	4619      	mov	r1, r3
 800e79a:	f7fe f856 	bl	800c84a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	7d1b      	ldrb	r3, [r3, #20]
 800e7a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7a6:	b2da      	uxtb	r2, r3
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e7ac:	6a3b      	ldr	r3, [r7, #32]
 800e7ae:	025b      	lsls	r3, r3, #9
 800e7b0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e7b2:	e044      	b.n	800e83e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6a1b      	ldr	r3, [r3, #32]
 800e7b8:	697a      	ldr	r2, [r7, #20]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d01b      	beq.n	800e7f6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	699a      	ldr	r2, [r3, #24]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d215      	bcs.n	800e7f6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	7858      	ldrb	r0, [r3, #1]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	697a      	ldr	r2, [r7, #20]
 800e7d8:	f7fd ff56 	bl	800c688 <disk_read>
 800e7dc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d009      	beq.n	800e7f6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	755a      	strb	r2, [r3, #21]
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	2101      	movs	r1, #1
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fe f8c0 	bl	800c972 <unlock_fs>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e053      	b.n	800e89e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	697a      	ldr	r2, [r7, #20]
 800e7fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	699b      	ldr	r3, [r3, #24]
 800e800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e804:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e808:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e80a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d901      	bls.n	800e816 <f_write+0x2b8>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	699b      	ldr	r3, [r3, #24]
 800e820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e824:	4413      	add	r3, r2
 800e826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e828:	69f9      	ldr	r1, [r7, #28]
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7fe f80d 	bl	800c84a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	7d1b      	ldrb	r3, [r3, #20]
 800e834:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e838:	b2da      	uxtb	r2, r3
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e83e:	69fa      	ldr	r2, [r7, #28]
 800e840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e842:	4413      	add	r3, r2
 800e844:	61fb      	str	r3, [r7, #28]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	699a      	ldr	r2, [r3, #24]
 800e84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e84c:	441a      	add	r2, r3
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	619a      	str	r2, [r3, #24]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	68da      	ldr	r2, [r3, #12]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	699b      	ldr	r3, [r3, #24]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	bf38      	it	cc
 800e85e:	461a      	movcc	r2, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	60da      	str	r2, [r3, #12]
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e86a:	441a      	add	r2, r3
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	601a      	str	r2, [r3, #0]
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	f47f aeb6 	bne.w	800e5ec <f_write+0x8e>
 800e880:	e000      	b.n	800e884 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e882:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	7d1b      	ldrb	r3, [r3, #20]
 800e888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	2100      	movs	r1, #0
 800e896:	4618      	mov	r0, r3
 800e898:	f7fe f86b 	bl	800c972 <unlock_fs>
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3730      	adds	r7, #48	@ 0x30
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b086      	sub	sp, #24
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f107 0208 	add.w	r2, r7, #8
 800e8b4:	4611      	mov	r1, r2
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7ff fbe4 	bl	800e084 <validate>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e8c0:	7dfb      	ldrb	r3, [r7, #23]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d16d      	bne.n	800e9a2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d067      	beq.n	800e9a2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	7d1b      	ldrb	r3, [r3, #20]
 800e8d6:	b25b      	sxtb	r3, r3
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	da1a      	bge.n	800e912 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	7858      	ldrb	r0, [r3, #1]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6a1a      	ldr	r2, [r3, #32]
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	f7fd feec 	bl	800c6c8 <disk_write>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d006      	beq.n	800e904 <f_sync+0x5e>
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	2101      	movs	r1, #1
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fe f839 	bl	800c972 <unlock_fs>
 800e900:	2301      	movs	r3, #1
 800e902:	e055      	b.n	800e9b0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	7d1b      	ldrb	r3, [r3, #20]
 800e908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e90c:	b2da      	uxtb	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e912:	f7fd fc83 	bl	800c21c <get_fattime>
 800e916:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e918:	68ba      	ldr	r2, [r7, #8]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e91e:	4619      	mov	r1, r3
 800e920:	4610      	mov	r0, r2
 800e922:	f7fe f9f1 	bl	800cd08 <move_window>
 800e926:	4603      	mov	r3, r0
 800e928:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e92a:	7dfb      	ldrb	r3, [r7, #23]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d138      	bne.n	800e9a2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e934:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	330b      	adds	r3, #11
 800e93a:	781a      	ldrb	r2, [r3, #0]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	330b      	adds	r3, #11
 800e940:	f042 0220 	orr.w	r2, r2, #32
 800e944:	b2d2      	uxtb	r2, r2
 800e946:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6818      	ldr	r0, [r3, #0]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	689b      	ldr	r3, [r3, #8]
 800e950:	461a      	mov	r2, r3
 800e952:	68f9      	ldr	r1, [r7, #12]
 800e954:	f7fe fefb 	bl	800d74e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f103 021c 	add.w	r2, r3, #28
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	4619      	mov	r1, r3
 800e964:	4610      	mov	r0, r2
 800e966:	f7fd ff44 	bl	800c7f2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	3316      	adds	r3, #22
 800e96e:	6939      	ldr	r1, [r7, #16]
 800e970:	4618      	mov	r0, r3
 800e972:	f7fd ff3e 	bl	800c7f2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	3312      	adds	r3, #18
 800e97a:	2100      	movs	r1, #0
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7fd ff1d 	bl	800c7bc <st_word>
					fs->wflag = 1;
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	2201      	movs	r2, #1
 800e986:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fe f9ea 	bl	800cd64 <sync_fs>
 800e990:	4603      	mov	r3, r0
 800e992:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	7d1b      	ldrb	r3, [r3, #20]
 800e998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	7dfa      	ldrb	r2, [r7, #23]
 800e9a6:	4611      	mov	r1, r2
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7fd ffe2 	bl	800c972 <unlock_fs>
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3718      	adds	r7, #24
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7ff ff70 	bl	800e8a6 <f_sync>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e9ca:	7bfb      	ldrb	r3, [r7, #15]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d11d      	bne.n	800ea0c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f107 0208 	add.w	r2, r7, #8
 800e9d6:	4611      	mov	r1, r2
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7ff fb53 	bl	800e084 <validate>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e9e2:	7bfb      	ldrb	r3, [r7, #15]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d111      	bne.n	800ea0c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	691b      	ldr	r3, [r3, #16]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7fe f8e7 	bl	800cbc0 <dec_lock>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e9f6:	7bfb      	ldrb	r3, [r7, #15]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d102      	bne.n	800ea02 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	2100      	movs	r1, #0
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fd ffb3 	bl	800c972 <unlock_fs>
#endif
		}
	}
	return res;
 800ea0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3710      	adds	r7, #16
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
	...

0800ea18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b087      	sub	sp, #28
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	4613      	mov	r3, r2
 800ea24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ea26:	2301      	movs	r3, #1
 800ea28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ea2e:	4b1f      	ldr	r3, [pc, #124]	@ (800eaac <FATFS_LinkDriverEx+0x94>)
 800ea30:	7a5b      	ldrb	r3, [r3, #9]
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d131      	bne.n	800ea9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ea38:	4b1c      	ldr	r3, [pc, #112]	@ (800eaac <FATFS_LinkDriverEx+0x94>)
 800ea3a:	7a5b      	ldrb	r3, [r3, #9]
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	461a      	mov	r2, r3
 800ea40:	4b1a      	ldr	r3, [pc, #104]	@ (800eaac <FATFS_LinkDriverEx+0x94>)
 800ea42:	2100      	movs	r1, #0
 800ea44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ea46:	4b19      	ldr	r3, [pc, #100]	@ (800eaac <FATFS_LinkDriverEx+0x94>)
 800ea48:	7a5b      	ldrb	r3, [r3, #9]
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	4a17      	ldr	r2, [pc, #92]	@ (800eaac <FATFS_LinkDriverEx+0x94>)
 800ea4e:	009b      	lsls	r3, r3, #2
 800ea50:	4413      	add	r3, r2
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ea56:	4b15      	ldr	r3, [pc, #84]	@ (800eaac <FATFS_LinkDriverEx+0x94>)
 800ea58:	7a5b      	ldrb	r3, [r3, #9]
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	4b13      	ldr	r3, [pc, #76]	@ (800eaac <FATFS_LinkDriverEx+0x94>)
 800ea60:	4413      	add	r3, r2
 800ea62:	79fa      	ldrb	r2, [r7, #7]
 800ea64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ea66:	4b11      	ldr	r3, [pc, #68]	@ (800eaac <FATFS_LinkDriverEx+0x94>)
 800ea68:	7a5b      	ldrb	r3, [r3, #9]
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	1c5a      	adds	r2, r3, #1
 800ea6e:	b2d1      	uxtb	r1, r2
 800ea70:	4a0e      	ldr	r2, [pc, #56]	@ (800eaac <FATFS_LinkDriverEx+0x94>)
 800ea72:	7251      	strb	r1, [r2, #9]
 800ea74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ea76:	7dbb      	ldrb	r3, [r7, #22]
 800ea78:	3330      	adds	r3, #48	@ 0x30
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	3301      	adds	r3, #1
 800ea84:	223a      	movs	r2, #58	@ 0x3a
 800ea86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	3302      	adds	r3, #2
 800ea8c:	222f      	movs	r2, #47	@ 0x2f
 800ea8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	3303      	adds	r3, #3
 800ea94:	2200      	movs	r2, #0
 800ea96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ea9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	371c      	adds	r7, #28
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	2400036c 	.word	0x2400036c

0800eab0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eaba:	2200      	movs	r2, #0
 800eabc:	6839      	ldr	r1, [r7, #0]
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f7ff ffaa 	bl	800ea18 <FATFS_LinkDriverEx>
 800eac4:	4603      	mov	r3, r0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800eace:	b580      	push	{r7, lr}
 800ead0:	b084      	sub	sp, #16
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	4603      	mov	r3, r0
 800ead6:	6039      	str	r1, [r7, #0]
 800ead8:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800eada:	2200      	movs	r2, #0
 800eadc:	2101      	movs	r1, #1
 800eade:	2001      	movs	r0, #1
 800eae0:	f000 f9cf 	bl	800ee82 <osSemaphoreNew>
 800eae4:	4602      	mov	r2, r0
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	bf14      	ite	ne
 800eaf2:	2301      	movne	r3, #1
 800eaf4:	2300      	moveq	r3, #0
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	60fb      	str	r3, [r7, #12]

    return ret;
 800eafa:	68fb      	ldr	r3, [r7, #12]
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 fad7 	bl	800f0c0 <osSemaphoreDelete>
#endif
    return 1;
 800eb12:	2301      	movs	r3, #1
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800eb24:	2300      	movs	r3, #0
 800eb26:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800eb28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f000 fa31 	bl	800ef94 <osSemaphoreAcquire>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d101      	bne.n	800eb3c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b082      	sub	sp, #8
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 fa72 	bl	800f038 <osSemaphoreRelease>
#endif
}
 800eb54:	bf00      	nop
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <__NVIC_SetPriority>:
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	4603      	mov	r3, r0
 800eb64:	6039      	str	r1, [r7, #0]
 800eb66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800eb68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	db0a      	blt.n	800eb86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	b2da      	uxtb	r2, r3
 800eb74:	490c      	ldr	r1, [pc, #48]	@ (800eba8 <__NVIC_SetPriority+0x4c>)
 800eb76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eb7a:	0112      	lsls	r2, r2, #4
 800eb7c:	b2d2      	uxtb	r2, r2
 800eb7e:	440b      	add	r3, r1
 800eb80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800eb84:	e00a      	b.n	800eb9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	b2da      	uxtb	r2, r3
 800eb8a:	4908      	ldr	r1, [pc, #32]	@ (800ebac <__NVIC_SetPriority+0x50>)
 800eb8c:	88fb      	ldrh	r3, [r7, #6]
 800eb8e:	f003 030f 	and.w	r3, r3, #15
 800eb92:	3b04      	subs	r3, #4
 800eb94:	0112      	lsls	r2, r2, #4
 800eb96:	b2d2      	uxtb	r2, r2
 800eb98:	440b      	add	r3, r1
 800eb9a:	761a      	strb	r2, [r3, #24]
}
 800eb9c:	bf00      	nop
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr
 800eba8:	e000e100 	.word	0xe000e100
 800ebac:	e000ed00 	.word	0xe000ed00

0800ebb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ebb4:	4b05      	ldr	r3, [pc, #20]	@ (800ebcc <SysTick_Handler+0x1c>)
 800ebb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ebb8:	f002 ff7c 	bl	8011ab4 <xTaskGetSchedulerState>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d001      	beq.n	800ebc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ebc2:	f001 f809 	bl	800fbd8 <xPortSysTickHandler>
  }
}
 800ebc6:	bf00      	nop
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	e000e010 	.word	0xe000e010

0800ebd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	f06f 0004 	mvn.w	r0, #4
 800ebda:	f7ff ffbf 	bl	800eb5c <__NVIC_SetPriority>
#endif
}
 800ebde:	bf00      	nop
 800ebe0:	bd80      	pop	{r7, pc}
	...

0800ebe4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebea:	f3ef 8305 	mrs	r3, IPSR
 800ebee:	603b      	str	r3, [r7, #0]
  return(result);
 800ebf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d003      	beq.n	800ebfe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ebf6:	f06f 0305 	mvn.w	r3, #5
 800ebfa:	607b      	str	r3, [r7, #4]
 800ebfc:	e00c      	b.n	800ec18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ebfe:	4b0a      	ldr	r3, [pc, #40]	@ (800ec28 <osKernelInitialize+0x44>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d105      	bne.n	800ec12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ec06:	4b08      	ldr	r3, [pc, #32]	@ (800ec28 <osKernelInitialize+0x44>)
 800ec08:	2201      	movs	r2, #1
 800ec0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	607b      	str	r3, [r7, #4]
 800ec10:	e002      	b.n	800ec18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ec12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ec16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ec18:	687b      	ldr	r3, [r7, #4]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	370c      	adds	r7, #12
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	24000378 	.word	0x24000378

0800ec2c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800ec32:	f002 ff3f 	bl	8011ab4 <xTaskGetSchedulerState>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d004      	beq.n	800ec46 <osKernelGetState+0x1a>
 800ec3c:	2b02      	cmp	r3, #2
 800ec3e:	d105      	bne.n	800ec4c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800ec40:	2302      	movs	r3, #2
 800ec42:	607b      	str	r3, [r7, #4]
      break;
 800ec44:	e00c      	b.n	800ec60 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800ec46:	2303      	movs	r3, #3
 800ec48:	607b      	str	r3, [r7, #4]
      break;
 800ec4a:	e009      	b.n	800ec60 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800ec4c:	4b07      	ldr	r3, [pc, #28]	@ (800ec6c <osKernelGetState+0x40>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d102      	bne.n	800ec5a <osKernelGetState+0x2e>
        state = osKernelReady;
 800ec54:	2301      	movs	r3, #1
 800ec56:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800ec58:	e001      	b.n	800ec5e <osKernelGetState+0x32>
        state = osKernelInactive;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	607b      	str	r3, [r7, #4]
      break;
 800ec5e:	bf00      	nop
  }

  return (state);
 800ec60:	687b      	ldr	r3, [r7, #4]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	24000378 	.word	0x24000378

0800ec70 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec76:	f3ef 8305 	mrs	r3, IPSR
 800ec7a:	603b      	str	r3, [r7, #0]
  return(result);
 800ec7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d003      	beq.n	800ec8a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ec82:	f06f 0305 	mvn.w	r3, #5
 800ec86:	607b      	str	r3, [r7, #4]
 800ec88:	e010      	b.n	800ecac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ec8a:	4b0b      	ldr	r3, [pc, #44]	@ (800ecb8 <osKernelStart+0x48>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	d109      	bne.n	800eca6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ec92:	f7ff ff9d 	bl	800ebd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ec96:	4b08      	ldr	r3, [pc, #32]	@ (800ecb8 <osKernelStart+0x48>)
 800ec98:	2202      	movs	r2, #2
 800ec9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ec9c:	f002 faaa 	bl	80111f4 <vTaskStartScheduler>
      stat = osOK;
 800eca0:	2300      	movs	r3, #0
 800eca2:	607b      	str	r3, [r7, #4]
 800eca4:	e002      	b.n	800ecac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800eca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ecaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ecac:	687b      	ldr	r3, [r7, #4]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3708      	adds	r7, #8
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	24000378 	.word	0x24000378

0800ecbc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecc2:	f3ef 8305 	mrs	r3, IPSR
 800ecc6:	603b      	str	r3, [r7, #0]
  return(result);
 800ecc8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d003      	beq.n	800ecd6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ecce:	f002 fbb5 	bl	801143c <xTaskGetTickCountFromISR>
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	e002      	b.n	800ecdc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ecd6:	f002 fba1 	bl	801141c <xTaskGetTickCount>
 800ecda:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ecdc:	687b      	ldr	r3, [r7, #4]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b08e      	sub	sp, #56	@ 0x38
 800ecea:	af04      	add	r7, sp, #16
 800ecec:	60f8      	str	r0, [r7, #12]
 800ecee:	60b9      	str	r1, [r7, #8]
 800ecf0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecf6:	f3ef 8305 	mrs	r3, IPSR
 800ecfa:	617b      	str	r3, [r7, #20]
  return(result);
 800ecfc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d17e      	bne.n	800ee00 <osThreadNew+0x11a>
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d07b      	beq.n	800ee00 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ed08:	2380      	movs	r3, #128	@ 0x80
 800ed0a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ed0c:	2318      	movs	r3, #24
 800ed0e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ed10:	2300      	movs	r3, #0
 800ed12:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ed14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ed18:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d045      	beq.n	800edac <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d002      	beq.n	800ed2e <osThreadNew+0x48>
        name = attr->name;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	699b      	ldr	r3, [r3, #24]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d002      	beq.n	800ed3c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	699b      	ldr	r3, [r3, #24]
 800ed3a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d008      	beq.n	800ed54 <osThreadNew+0x6e>
 800ed42:	69fb      	ldr	r3, [r7, #28]
 800ed44:	2b38      	cmp	r3, #56	@ 0x38
 800ed46:	d805      	bhi.n	800ed54 <osThreadNew+0x6e>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	f003 0301 	and.w	r3, r3, #1
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d001      	beq.n	800ed58 <osThreadNew+0x72>
        return (NULL);
 800ed54:	2300      	movs	r3, #0
 800ed56:	e054      	b.n	800ee02 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	695b      	ldr	r3, [r3, #20]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d003      	beq.n	800ed68 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	695b      	ldr	r3, [r3, #20]
 800ed64:	089b      	lsrs	r3, r3, #2
 800ed66:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00e      	beq.n	800ed8e <osThreadNew+0xa8>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	2b5b      	cmp	r3, #91	@ 0x5b
 800ed76:	d90a      	bls.n	800ed8e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d006      	beq.n	800ed8e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	695b      	ldr	r3, [r3, #20]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d002      	beq.n	800ed8e <osThreadNew+0xa8>
        mem = 1;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	61bb      	str	r3, [r7, #24]
 800ed8c:	e010      	b.n	800edb0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d10c      	bne.n	800edb0 <osThreadNew+0xca>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	68db      	ldr	r3, [r3, #12]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d108      	bne.n	800edb0 <osThreadNew+0xca>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	691b      	ldr	r3, [r3, #16]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d104      	bne.n	800edb0 <osThreadNew+0xca>
          mem = 0;
 800eda6:	2300      	movs	r3, #0
 800eda8:	61bb      	str	r3, [r7, #24]
 800edaa:	e001      	b.n	800edb0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800edac:	2300      	movs	r3, #0
 800edae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d110      	bne.n	800edd8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800edbe:	9202      	str	r2, [sp, #8]
 800edc0:	9301      	str	r3, [sp, #4]
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	9300      	str	r3, [sp, #0]
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	6a3a      	ldr	r2, [r7, #32]
 800edca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800edcc:	68f8      	ldr	r0, [r7, #12]
 800edce:	f001 ffc1 	bl	8010d54 <xTaskCreateStatic>
 800edd2:	4603      	mov	r3, r0
 800edd4:	613b      	str	r3, [r7, #16]
 800edd6:	e013      	b.n	800ee00 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d110      	bne.n	800ee00 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800edde:	6a3b      	ldr	r3, [r7, #32]
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	f107 0310 	add.w	r3, r7, #16
 800ede6:	9301      	str	r3, [sp, #4]
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	9300      	str	r3, [sp, #0]
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800edf0:	68f8      	ldr	r0, [r7, #12]
 800edf2:	f002 f80f 	bl	8010e14 <xTaskCreate>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d001      	beq.n	800ee00 <osThreadNew+0x11a>
            hTask = NULL;
 800edfc:	2300      	movs	r3, #0
 800edfe:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ee00:	693b      	ldr	r3, [r7, #16]
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3728      	adds	r7, #40	@ 0x28
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
	...

0800ee0c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee12:	f3ef 8305 	mrs	r3, IPSR
 800ee16:	603b      	str	r3, [r7, #0]
  return(result);
 800ee18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d003      	beq.n	800ee26 <osThreadYield+0x1a>
    stat = osErrorISR;
 800ee1e:	f06f 0305 	mvn.w	r3, #5
 800ee22:	607b      	str	r3, [r7, #4]
 800ee24:	e009      	b.n	800ee3a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800ee26:	2300      	movs	r3, #0
 800ee28:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800ee2a:	4b07      	ldr	r3, [pc, #28]	@ (800ee48 <osThreadYield+0x3c>)
 800ee2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee30:	601a      	str	r2, [r3, #0]
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800ee3a:	687b      	ldr	r3, [r7, #4]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	370c      	adds	r7, #12
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr
 800ee48:	e000ed04 	.word	0xe000ed04

0800ee4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee54:	f3ef 8305 	mrs	r3, IPSR
 800ee58:	60bb      	str	r3, [r7, #8]
  return(result);
 800ee5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d003      	beq.n	800ee68 <osDelay+0x1c>
    stat = osErrorISR;
 800ee60:	f06f 0305 	mvn.w	r3, #5
 800ee64:	60fb      	str	r3, [r7, #12]
 800ee66:	e007      	b.n	800ee78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d002      	beq.n	800ee78 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f002 f988 	bl	8011188 <vTaskDelay>
    }
  }

  return (stat);
 800ee78:	68fb      	ldr	r3, [r7, #12]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b08a      	sub	sp, #40	@ 0x28
 800ee86:	af02      	add	r7, sp, #8
 800ee88:	60f8      	str	r0, [r7, #12]
 800ee8a:	60b9      	str	r1, [r7, #8]
 800ee8c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee92:	f3ef 8305 	mrs	r3, IPSR
 800ee96:	613b      	str	r3, [r7, #16]
  return(result);
 800ee98:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d175      	bne.n	800ef8a <osSemaphoreNew+0x108>
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d072      	beq.n	800ef8a <osSemaphoreNew+0x108>
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d86e      	bhi.n	800ef8a <osSemaphoreNew+0x108>
    mem = -1;
 800eeac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eeb0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d015      	beq.n	800eee4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	689b      	ldr	r3, [r3, #8]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d006      	beq.n	800eece <osSemaphoreNew+0x4c>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	2b4f      	cmp	r3, #79	@ 0x4f
 800eec6:	d902      	bls.n	800eece <osSemaphoreNew+0x4c>
        mem = 1;
 800eec8:	2301      	movs	r3, #1
 800eeca:	61bb      	str	r3, [r7, #24]
 800eecc:	e00c      	b.n	800eee8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d108      	bne.n	800eee8 <osSemaphoreNew+0x66>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d104      	bne.n	800eee8 <osSemaphoreNew+0x66>
          mem = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	61bb      	str	r3, [r7, #24]
 800eee2:	e001      	b.n	800eee8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800eee4:	2300      	movs	r3, #0
 800eee6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eeee:	d04c      	beq.n	800ef8a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d128      	bne.n	800ef48 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d10a      	bne.n	800ef12 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	689b      	ldr	r3, [r3, #8]
 800ef00:	2203      	movs	r2, #3
 800ef02:	9200      	str	r2, [sp, #0]
 800ef04:	2200      	movs	r2, #0
 800ef06:	2100      	movs	r1, #0
 800ef08:	2001      	movs	r0, #1
 800ef0a:	f000 ff61 	bl	800fdd0 <xQueueGenericCreateStatic>
 800ef0e:	61f8      	str	r0, [r7, #28]
 800ef10:	e005      	b.n	800ef1e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ef12:	2203      	movs	r2, #3
 800ef14:	2100      	movs	r1, #0
 800ef16:	2001      	movs	r0, #1
 800ef18:	f000 ffd7 	bl	800feca <xQueueGenericCreate>
 800ef1c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d022      	beq.n	800ef6a <osSemaphoreNew+0xe8>
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d01f      	beq.n	800ef6a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	2100      	movs	r1, #0
 800ef30:	69f8      	ldr	r0, [r7, #28]
 800ef32:	f001 f897 	bl	8010064 <xQueueGenericSend>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d016      	beq.n	800ef6a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ef3c:	69f8      	ldr	r0, [r7, #28]
 800ef3e:	f001 fd35 	bl	80109ac <vQueueDelete>
            hSemaphore = NULL;
 800ef42:	2300      	movs	r3, #0
 800ef44:	61fb      	str	r3, [r7, #28]
 800ef46:	e010      	b.n	800ef6a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d108      	bne.n	800ef60 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	461a      	mov	r2, r3
 800ef54:	68b9      	ldr	r1, [r7, #8]
 800ef56:	68f8      	ldr	r0, [r7, #12]
 800ef58:	f001 f815 	bl	800ff86 <xQueueCreateCountingSemaphoreStatic>
 800ef5c:	61f8      	str	r0, [r7, #28]
 800ef5e:	e004      	b.n	800ef6a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ef60:	68b9      	ldr	r1, [r7, #8]
 800ef62:	68f8      	ldr	r0, [r7, #12]
 800ef64:	f001 f848 	bl	800fff8 <xQueueCreateCountingSemaphore>
 800ef68:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ef6a:	69fb      	ldr	r3, [r7, #28]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00c      	beq.n	800ef8a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d003      	beq.n	800ef7e <osSemaphoreNew+0xfc>
          name = attr->name;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	617b      	str	r3, [r7, #20]
 800ef7c:	e001      	b.n	800ef82 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ef82:	6979      	ldr	r1, [r7, #20]
 800ef84:	69f8      	ldr	r0, [r7, #28]
 800ef86:	f001 fe5d 	bl	8010c44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ef8a:	69fb      	ldr	r3, [r7, #28]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3720      	adds	r7, #32
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b086      	sub	sp, #24
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800efa2:	2300      	movs	r3, #0
 800efa4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d103      	bne.n	800efb4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800efac:	f06f 0303 	mvn.w	r3, #3
 800efb0:	617b      	str	r3, [r7, #20]
 800efb2:	e039      	b.n	800f028 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efb4:	f3ef 8305 	mrs	r3, IPSR
 800efb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800efba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d022      	beq.n	800f006 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d003      	beq.n	800efce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800efc6:	f06f 0303 	mvn.w	r3, #3
 800efca:	617b      	str	r3, [r7, #20]
 800efcc:	e02c      	b.n	800f028 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800efce:	2300      	movs	r3, #0
 800efd0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800efd2:	f107 0308 	add.w	r3, r7, #8
 800efd6:	461a      	mov	r2, r3
 800efd8:	2100      	movs	r1, #0
 800efda:	6938      	ldr	r0, [r7, #16]
 800efdc:	f001 fc64 	bl	80108a8 <xQueueReceiveFromISR>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d003      	beq.n	800efee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800efe6:	f06f 0302 	mvn.w	r3, #2
 800efea:	617b      	str	r3, [r7, #20]
 800efec:	e01c      	b.n	800f028 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d019      	beq.n	800f028 <osSemaphoreAcquire+0x94>
 800eff4:	4b0f      	ldr	r3, [pc, #60]	@ (800f034 <osSemaphoreAcquire+0xa0>)
 800eff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800effa:	601a      	str	r2, [r3, #0]
 800effc:	f3bf 8f4f 	dsb	sy
 800f000:	f3bf 8f6f 	isb	sy
 800f004:	e010      	b.n	800f028 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f006:	6839      	ldr	r1, [r7, #0]
 800f008:	6938      	ldr	r0, [r7, #16]
 800f00a:	f001 fb3d 	bl	8010688 <xQueueSemaphoreTake>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b01      	cmp	r3, #1
 800f012:	d009      	beq.n	800f028 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d003      	beq.n	800f022 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f01a:	f06f 0301 	mvn.w	r3, #1
 800f01e:	617b      	str	r3, [r7, #20]
 800f020:	e002      	b.n	800f028 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f022:	f06f 0302 	mvn.w	r3, #2
 800f026:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f028:	697b      	ldr	r3, [r7, #20]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3718      	adds	r7, #24
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	e000ed04 	.word	0xe000ed04

0800f038 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f038:	b580      	push	{r7, lr}
 800f03a:	b086      	sub	sp, #24
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f044:	2300      	movs	r3, #0
 800f046:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d103      	bne.n	800f056 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f04e:	f06f 0303 	mvn.w	r3, #3
 800f052:	617b      	str	r3, [r7, #20]
 800f054:	e02c      	b.n	800f0b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f056:	f3ef 8305 	mrs	r3, IPSR
 800f05a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f05c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d01a      	beq.n	800f098 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f062:	2300      	movs	r3, #0
 800f064:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f066:	f107 0308 	add.w	r3, r7, #8
 800f06a:	4619      	mov	r1, r3
 800f06c:	6938      	ldr	r0, [r7, #16]
 800f06e:	f001 f999 	bl	80103a4 <xQueueGiveFromISR>
 800f072:	4603      	mov	r3, r0
 800f074:	2b01      	cmp	r3, #1
 800f076:	d003      	beq.n	800f080 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f078:	f06f 0302 	mvn.w	r3, #2
 800f07c:	617b      	str	r3, [r7, #20]
 800f07e:	e017      	b.n	800f0b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d014      	beq.n	800f0b0 <osSemaphoreRelease+0x78>
 800f086:	4b0d      	ldr	r3, [pc, #52]	@ (800f0bc <osSemaphoreRelease+0x84>)
 800f088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	e00b      	b.n	800f0b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f098:	2300      	movs	r3, #0
 800f09a:	2200      	movs	r2, #0
 800f09c:	2100      	movs	r1, #0
 800f09e:	6938      	ldr	r0, [r7, #16]
 800f0a0:	f000 ffe0 	bl	8010064 <xQueueGenericSend>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d002      	beq.n	800f0b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f0aa:	f06f 0302 	mvn.w	r3, #2
 800f0ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f0b0:	697b      	ldr	r3, [r7, #20]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3718      	adds	r7, #24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	e000ed04 	.word	0xe000ed04

0800f0c0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b086      	sub	sp, #24
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0cc:	f3ef 8305 	mrs	r3, IPSR
 800f0d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d003      	beq.n	800f0e0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800f0d8:	f06f 0305 	mvn.w	r3, #5
 800f0dc:	617b      	str	r3, [r7, #20]
 800f0de:	e00e      	b.n	800f0fe <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d103      	bne.n	800f0ee <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800f0e6:	f06f 0303 	mvn.w	r3, #3
 800f0ea:	617b      	str	r3, [r7, #20]
 800f0ec:	e007      	b.n	800f0fe <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f0ee:	6938      	ldr	r0, [r7, #16]
 800f0f0:	f001 fdd2 	bl	8010c98 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800f0f8:	6938      	ldr	r0, [r7, #16]
 800f0fa:	f001 fc57 	bl	80109ac <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f0fe:	697b      	ldr	r3, [r7, #20]
}
 800f100:	4618      	mov	r0, r3
 800f102:	3718      	adds	r7, #24
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f108:	b580      	push	{r7, lr}
 800f10a:	b08a      	sub	sp, #40	@ 0x28
 800f10c:	af02      	add	r7, sp, #8
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f114:	2300      	movs	r3, #0
 800f116:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f118:	f3ef 8305 	mrs	r3, IPSR
 800f11c:	613b      	str	r3, [r7, #16]
  return(result);
 800f11e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f120:	2b00      	cmp	r3, #0
 800f122:	d15f      	bne.n	800f1e4 <osMessageQueueNew+0xdc>
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d05c      	beq.n	800f1e4 <osMessageQueueNew+0xdc>
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d059      	beq.n	800f1e4 <osMessageQueueNew+0xdc>
    mem = -1;
 800f130:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f134:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d029      	beq.n	800f190 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	689b      	ldr	r3, [r3, #8]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d012      	beq.n	800f16a <osMessageQueueNew+0x62>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	2b4f      	cmp	r3, #79	@ 0x4f
 800f14a:	d90e      	bls.n	800f16a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00a      	beq.n	800f16a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	695a      	ldr	r2, [r3, #20]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	68b9      	ldr	r1, [r7, #8]
 800f15c:	fb01 f303 	mul.w	r3, r1, r3
 800f160:	429a      	cmp	r2, r3
 800f162:	d302      	bcc.n	800f16a <osMessageQueueNew+0x62>
        mem = 1;
 800f164:	2301      	movs	r3, #1
 800f166:	61bb      	str	r3, [r7, #24]
 800f168:	e014      	b.n	800f194 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	689b      	ldr	r3, [r3, #8]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d110      	bne.n	800f194 <osMessageQueueNew+0x8c>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	68db      	ldr	r3, [r3, #12]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d10c      	bne.n	800f194 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d108      	bne.n	800f194 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	695b      	ldr	r3, [r3, #20]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d104      	bne.n	800f194 <osMessageQueueNew+0x8c>
          mem = 0;
 800f18a:	2300      	movs	r3, #0
 800f18c:	61bb      	str	r3, [r7, #24]
 800f18e:	e001      	b.n	800f194 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f190:	2300      	movs	r3, #0
 800f192:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f194:	69bb      	ldr	r3, [r7, #24]
 800f196:	2b01      	cmp	r3, #1
 800f198:	d10b      	bne.n	800f1b2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	691a      	ldr	r2, [r3, #16]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	689b      	ldr	r3, [r3, #8]
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	9100      	str	r1, [sp, #0]
 800f1a6:	68b9      	ldr	r1, [r7, #8]
 800f1a8:	68f8      	ldr	r0, [r7, #12]
 800f1aa:	f000 fe11 	bl	800fdd0 <xQueueGenericCreateStatic>
 800f1ae:	61f8      	str	r0, [r7, #28]
 800f1b0:	e008      	b.n	800f1c4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d105      	bne.n	800f1c4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	68b9      	ldr	r1, [r7, #8]
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f000 fe84 	bl	800feca <xQueueGenericCreate>
 800f1c2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00c      	beq.n	800f1e4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d003      	beq.n	800f1d8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	617b      	str	r3, [r7, #20]
 800f1d6:	e001      	b.n	800f1dc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f1dc:	6979      	ldr	r1, [r7, #20]
 800f1de:	69f8      	ldr	r0, [r7, #28]
 800f1e0:	f001 fd30 	bl	8010c44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f1e4:	69fb      	ldr	r3, [r7, #28]
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3720      	adds	r7, #32
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
	...

0800f1f0 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b088      	sub	sp, #32
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	607a      	str	r2, [r7, #4]
 800f1fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f202:	2300      	movs	r3, #0
 800f204:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f206:	f3ef 8305 	mrs	r3, IPSR
 800f20a:	617b      	str	r3, [r7, #20]
  return(result);
 800f20c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d028      	beq.n	800f264 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d005      	beq.n	800f224 <osMessageQueueGet+0x34>
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d002      	beq.n	800f224 <osMessageQueueGet+0x34>
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d003      	beq.n	800f22c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f224:	f06f 0303 	mvn.w	r3, #3
 800f228:	61fb      	str	r3, [r7, #28]
 800f22a:	e037      	b.n	800f29c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f22c:	2300      	movs	r3, #0
 800f22e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f230:	f107 0310 	add.w	r3, r7, #16
 800f234:	461a      	mov	r2, r3
 800f236:	68b9      	ldr	r1, [r7, #8]
 800f238:	69b8      	ldr	r0, [r7, #24]
 800f23a:	f001 fb35 	bl	80108a8 <xQueueReceiveFromISR>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b01      	cmp	r3, #1
 800f242:	d003      	beq.n	800f24c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f244:	f06f 0302 	mvn.w	r3, #2
 800f248:	61fb      	str	r3, [r7, #28]
 800f24a:	e027      	b.n	800f29c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d024      	beq.n	800f29c <osMessageQueueGet+0xac>
 800f252:	4b15      	ldr	r3, [pc, #84]	@ (800f2a8 <osMessageQueueGet+0xb8>)
 800f254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f258:	601a      	str	r2, [r3, #0]
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	f3bf 8f6f 	isb	sy
 800f262:	e01b      	b.n	800f29c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f264:	69bb      	ldr	r3, [r7, #24]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d002      	beq.n	800f270 <osMessageQueueGet+0x80>
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d103      	bne.n	800f278 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f270:	f06f 0303 	mvn.w	r3, #3
 800f274:	61fb      	str	r3, [r7, #28]
 800f276:	e011      	b.n	800f29c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f278:	683a      	ldr	r2, [r7, #0]
 800f27a:	68b9      	ldr	r1, [r7, #8]
 800f27c:	69b8      	ldr	r0, [r7, #24]
 800f27e:	f001 f921 	bl	80104c4 <xQueueReceive>
 800f282:	4603      	mov	r3, r0
 800f284:	2b01      	cmp	r3, #1
 800f286:	d009      	beq.n	800f29c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d003      	beq.n	800f296 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f28e:	f06f 0301 	mvn.w	r3, #1
 800f292:	61fb      	str	r3, [r7, #28]
 800f294:	e002      	b.n	800f29c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f296:	f06f 0302 	mvn.w	r3, #2
 800f29a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f29c:	69fb      	ldr	r3, [r7, #28]
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3720      	adds	r7, #32
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	e000ed04 	.word	0xe000ed04

0800f2ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f2ac:	b480      	push	{r7}
 800f2ae:	b085      	sub	sp, #20
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	4a07      	ldr	r2, [pc, #28]	@ (800f2d8 <vApplicationGetIdleTaskMemory+0x2c>)
 800f2bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	4a06      	ldr	r2, [pc, #24]	@ (800f2dc <vApplicationGetIdleTaskMemory+0x30>)
 800f2c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2280      	movs	r2, #128	@ 0x80
 800f2c8:	601a      	str	r2, [r3, #0]
}
 800f2ca:	bf00      	nop
 800f2cc:	3714      	adds	r7, #20
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	2400037c 	.word	0x2400037c
 800f2dc:	240003d8 	.word	0x240003d8

0800f2e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f2e0:	b480      	push	{r7}
 800f2e2:	b085      	sub	sp, #20
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	4a07      	ldr	r2, [pc, #28]	@ (800f30c <vApplicationGetTimerTaskMemory+0x2c>)
 800f2f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	4a06      	ldr	r2, [pc, #24]	@ (800f310 <vApplicationGetTimerTaskMemory+0x30>)
 800f2f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f2fe:	601a      	str	r2, [r3, #0]
}
 800f300:	bf00      	nop
 800f302:	3714      	adds	r7, #20
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr
 800f30c:	240005d8 	.word	0x240005d8
 800f310:	24000634 	.word	0x24000634

0800f314 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b08a      	sub	sp, #40	@ 0x28
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f31c:	2300      	movs	r3, #0
 800f31e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f320:	f001 ffd0 	bl	80112c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f324:	4b5c      	ldr	r3, [pc, #368]	@ (800f498 <pvPortMalloc+0x184>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d101      	bne.n	800f330 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f32c:	f000 f924 	bl	800f578 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f330:	4b5a      	ldr	r3, [pc, #360]	@ (800f49c <pvPortMalloc+0x188>)
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4013      	ands	r3, r2
 800f338:	2b00      	cmp	r3, #0
 800f33a:	f040 8095 	bne.w	800f468 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d01e      	beq.n	800f382 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f344:	2208      	movs	r2, #8
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	4413      	add	r3, r2
 800f34a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f003 0307 	and.w	r3, r3, #7
 800f352:	2b00      	cmp	r3, #0
 800f354:	d015      	beq.n	800f382 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f023 0307 	bic.w	r3, r3, #7
 800f35c:	3308      	adds	r3, #8
 800f35e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f003 0307 	and.w	r3, r3, #7
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00b      	beq.n	800f382 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f37c:	bf00      	nop
 800f37e:	bf00      	nop
 800f380:	e7fd      	b.n	800f37e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d06f      	beq.n	800f468 <pvPortMalloc+0x154>
 800f388:	4b45      	ldr	r3, [pc, #276]	@ (800f4a0 <pvPortMalloc+0x18c>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d86a      	bhi.n	800f468 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f392:	4b44      	ldr	r3, [pc, #272]	@ (800f4a4 <pvPortMalloc+0x190>)
 800f394:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f396:	4b43      	ldr	r3, [pc, #268]	@ (800f4a4 <pvPortMalloc+0x190>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f39c:	e004      	b.n	800f3a8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d903      	bls.n	800f3ba <pvPortMalloc+0xa6>
 800f3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d1f1      	bne.n	800f39e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f3ba:	4b37      	ldr	r3, [pc, #220]	@ (800f498 <pvPortMalloc+0x184>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d051      	beq.n	800f468 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f3c4:	6a3b      	ldr	r3, [r7, #32]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2208      	movs	r2, #8
 800f3ca:	4413      	add	r3, r2
 800f3cc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	6a3b      	ldr	r3, [r7, #32]
 800f3d4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d8:	685a      	ldr	r2, [r3, #4]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	1ad2      	subs	r2, r2, r3
 800f3de:	2308      	movs	r3, #8
 800f3e0:	005b      	lsls	r3, r3, #1
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d920      	bls.n	800f428 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f3e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	f003 0307 	and.w	r3, r3, #7
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00b      	beq.n	800f410 <pvPortMalloc+0xfc>
	__asm volatile
 800f3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3fc:	f383 8811 	msr	BASEPRI, r3
 800f400:	f3bf 8f6f 	isb	sy
 800f404:	f3bf 8f4f 	dsb	sy
 800f408:	613b      	str	r3, [r7, #16]
}
 800f40a:	bf00      	nop
 800f40c:	bf00      	nop
 800f40e:	e7fd      	b.n	800f40c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f412:	685a      	ldr	r2, [r3, #4]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	1ad2      	subs	r2, r2, r3
 800f418:	69bb      	ldr	r3, [r7, #24]
 800f41a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f422:	69b8      	ldr	r0, [r7, #24]
 800f424:	f000 f90a 	bl	800f63c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f428:	4b1d      	ldr	r3, [pc, #116]	@ (800f4a0 <pvPortMalloc+0x18c>)
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	4a1b      	ldr	r2, [pc, #108]	@ (800f4a0 <pvPortMalloc+0x18c>)
 800f434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f436:	4b1a      	ldr	r3, [pc, #104]	@ (800f4a0 <pvPortMalloc+0x18c>)
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	4b1b      	ldr	r3, [pc, #108]	@ (800f4a8 <pvPortMalloc+0x194>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	429a      	cmp	r2, r3
 800f440:	d203      	bcs.n	800f44a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f442:	4b17      	ldr	r3, [pc, #92]	@ (800f4a0 <pvPortMalloc+0x18c>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4a18      	ldr	r2, [pc, #96]	@ (800f4a8 <pvPortMalloc+0x194>)
 800f448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44c:	685a      	ldr	r2, [r3, #4]
 800f44e:	4b13      	ldr	r3, [pc, #76]	@ (800f49c <pvPortMalloc+0x188>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	431a      	orrs	r2, r3
 800f454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f45a:	2200      	movs	r2, #0
 800f45c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f45e:	4b13      	ldr	r3, [pc, #76]	@ (800f4ac <pvPortMalloc+0x198>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	3301      	adds	r3, #1
 800f464:	4a11      	ldr	r2, [pc, #68]	@ (800f4ac <pvPortMalloc+0x198>)
 800f466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f468:	f001 ff3a 	bl	80112e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	f003 0307 	and.w	r3, r3, #7
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00b      	beq.n	800f48e <pvPortMalloc+0x17a>
	__asm volatile
 800f476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f47a:	f383 8811 	msr	BASEPRI, r3
 800f47e:	f3bf 8f6f 	isb	sy
 800f482:	f3bf 8f4f 	dsb	sy
 800f486:	60fb      	str	r3, [r7, #12]
}
 800f488:	bf00      	nop
 800f48a:	bf00      	nop
 800f48c:	e7fd      	b.n	800f48a <pvPortMalloc+0x176>
	return pvReturn;
 800f48e:	69fb      	ldr	r3, [r7, #28]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3728      	adds	r7, #40	@ 0x28
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}
 800f498:	2400463c 	.word	0x2400463c
 800f49c:	24004650 	.word	0x24004650
 800f4a0:	24004640 	.word	0x24004640
 800f4a4:	24004634 	.word	0x24004634
 800f4a8:	24004644 	.word	0x24004644
 800f4ac:	24004648 	.word	0x24004648

0800f4b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b086      	sub	sp, #24
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d04f      	beq.n	800f562 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f4c2:	2308      	movs	r3, #8
 800f4c4:	425b      	negs	r3, r3
 800f4c6:	697a      	ldr	r2, [r7, #20]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	685a      	ldr	r2, [r3, #4]
 800f4d4:	4b25      	ldr	r3, [pc, #148]	@ (800f56c <vPortFree+0xbc>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4013      	ands	r3, r2
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d10b      	bne.n	800f4f6 <vPortFree+0x46>
	__asm volatile
 800f4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e2:	f383 8811 	msr	BASEPRI, r3
 800f4e6:	f3bf 8f6f 	isb	sy
 800f4ea:	f3bf 8f4f 	dsb	sy
 800f4ee:	60fb      	str	r3, [r7, #12]
}
 800f4f0:	bf00      	nop
 800f4f2:	bf00      	nop
 800f4f4:	e7fd      	b.n	800f4f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d00b      	beq.n	800f516 <vPortFree+0x66>
	__asm volatile
 800f4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f502:	f383 8811 	msr	BASEPRI, r3
 800f506:	f3bf 8f6f 	isb	sy
 800f50a:	f3bf 8f4f 	dsb	sy
 800f50e:	60bb      	str	r3, [r7, #8]
}
 800f510:	bf00      	nop
 800f512:	bf00      	nop
 800f514:	e7fd      	b.n	800f512 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	685a      	ldr	r2, [r3, #4]
 800f51a:	4b14      	ldr	r3, [pc, #80]	@ (800f56c <vPortFree+0xbc>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	4013      	ands	r3, r2
 800f520:	2b00      	cmp	r3, #0
 800f522:	d01e      	beq.n	800f562 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d11a      	bne.n	800f562 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	685a      	ldr	r2, [r3, #4]
 800f530:	4b0e      	ldr	r3, [pc, #56]	@ (800f56c <vPortFree+0xbc>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	43db      	mvns	r3, r3
 800f536:	401a      	ands	r2, r3
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f53c:	f001 fec2 	bl	80112c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	685a      	ldr	r2, [r3, #4]
 800f544:	4b0a      	ldr	r3, [pc, #40]	@ (800f570 <vPortFree+0xc0>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4413      	add	r3, r2
 800f54a:	4a09      	ldr	r2, [pc, #36]	@ (800f570 <vPortFree+0xc0>)
 800f54c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f54e:	6938      	ldr	r0, [r7, #16]
 800f550:	f000 f874 	bl	800f63c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f554:	4b07      	ldr	r3, [pc, #28]	@ (800f574 <vPortFree+0xc4>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	3301      	adds	r3, #1
 800f55a:	4a06      	ldr	r2, [pc, #24]	@ (800f574 <vPortFree+0xc4>)
 800f55c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f55e:	f001 febf 	bl	80112e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f562:	bf00      	nop
 800f564:	3718      	adds	r7, #24
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	24004650 	.word	0x24004650
 800f570:	24004640 	.word	0x24004640
 800f574:	2400464c 	.word	0x2400464c

0800f578 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f578:	b480      	push	{r7}
 800f57a:	b085      	sub	sp, #20
 800f57c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f57e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f582:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f584:	4b27      	ldr	r3, [pc, #156]	@ (800f624 <prvHeapInit+0xac>)
 800f586:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f003 0307 	and.w	r3, r3, #7
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d00c      	beq.n	800f5ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	3307      	adds	r3, #7
 800f596:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f023 0307 	bic.w	r3, r3, #7
 800f59e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f5a0:	68ba      	ldr	r2, [r7, #8]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	1ad3      	subs	r3, r2, r3
 800f5a6:	4a1f      	ldr	r2, [pc, #124]	@ (800f624 <prvHeapInit+0xac>)
 800f5a8:	4413      	add	r3, r2
 800f5aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f5b0:	4a1d      	ldr	r2, [pc, #116]	@ (800f628 <prvHeapInit+0xb0>)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f5b6:	4b1c      	ldr	r3, [pc, #112]	@ (800f628 <prvHeapInit+0xb0>)
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	68ba      	ldr	r2, [r7, #8]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f5c4:	2208      	movs	r2, #8
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	1a9b      	subs	r3, r3, r2
 800f5ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f023 0307 	bic.w	r3, r3, #7
 800f5d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	4a15      	ldr	r2, [pc, #84]	@ (800f62c <prvHeapInit+0xb4>)
 800f5d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f5da:	4b14      	ldr	r3, [pc, #80]	@ (800f62c <prvHeapInit+0xb4>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f5e2:	4b12      	ldr	r3, [pc, #72]	@ (800f62c <prvHeapInit+0xb4>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	68fa      	ldr	r2, [r7, #12]
 800f5f2:	1ad2      	subs	r2, r2, r3
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f5f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f62c <prvHeapInit+0xb4>)
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	4a0a      	ldr	r2, [pc, #40]	@ (800f630 <prvHeapInit+0xb8>)
 800f606:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	4a09      	ldr	r2, [pc, #36]	@ (800f634 <prvHeapInit+0xbc>)
 800f60e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f610:	4b09      	ldr	r3, [pc, #36]	@ (800f638 <prvHeapInit+0xc0>)
 800f612:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f616:	601a      	str	r2, [r3, #0]
}
 800f618:	bf00      	nop
 800f61a:	3714      	adds	r7, #20
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr
 800f624:	24000a34 	.word	0x24000a34
 800f628:	24004634 	.word	0x24004634
 800f62c:	2400463c 	.word	0x2400463c
 800f630:	24004644 	.word	0x24004644
 800f634:	24004640 	.word	0x24004640
 800f638:	24004650 	.word	0x24004650

0800f63c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f63c:	b480      	push	{r7}
 800f63e:	b085      	sub	sp, #20
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f644:	4b28      	ldr	r3, [pc, #160]	@ (800f6e8 <prvInsertBlockIntoFreeList+0xac>)
 800f646:	60fb      	str	r3, [r7, #12]
 800f648:	e002      	b.n	800f650 <prvInsertBlockIntoFreeList+0x14>
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	60fb      	str	r3, [r7, #12]
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	429a      	cmp	r2, r3
 800f658:	d8f7      	bhi.n	800f64a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	68ba      	ldr	r2, [r7, #8]
 800f664:	4413      	add	r3, r2
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d108      	bne.n	800f67e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	685a      	ldr	r2, [r3, #4]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	441a      	add	r2, r3
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	68ba      	ldr	r2, [r7, #8]
 800f688:	441a      	add	r2, r3
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d118      	bne.n	800f6c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	4b15      	ldr	r3, [pc, #84]	@ (800f6ec <prvInsertBlockIntoFreeList+0xb0>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d00d      	beq.n	800f6ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	685a      	ldr	r2, [r3, #4]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	441a      	add	r2, r3
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	681a      	ldr	r2, [r3, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	601a      	str	r2, [r3, #0]
 800f6b8:	e008      	b.n	800f6cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f6ba:	4b0c      	ldr	r3, [pc, #48]	@ (800f6ec <prvInsertBlockIntoFreeList+0xb0>)
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	e003      	b.n	800f6cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d002      	beq.n	800f6da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6da:	bf00      	nop
 800f6dc:	3714      	adds	r7, #20
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	24004634 	.word	0x24004634
 800f6ec:	2400463c 	.word	0x2400463c

0800f6f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f103 0208 	add.w	r2, r3, #8
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f708:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f103 0208 	add.w	r2, r3, #8
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f103 0208 	add.w	r2, r3, #8
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2200      	movs	r2, #0
 800f722:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f724:	bf00      	nop
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2200      	movs	r2, #0
 800f73c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f73e:	bf00      	nop
 800f740:	370c      	adds	r7, #12
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr

0800f74a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f74a:	b480      	push	{r7}
 800f74c:	b085      	sub	sp, #20
 800f74e:	af00      	add	r7, sp, #0
 800f750:	6078      	str	r0, [r7, #4]
 800f752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	68fa      	ldr	r2, [r7, #12]
 800f75e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	689a      	ldr	r2, [r3, #8]
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	689b      	ldr	r3, [r3, #8]
 800f76c:	683a      	ldr	r2, [r7, #0]
 800f76e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	683a      	ldr	r2, [r7, #0]
 800f774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	1c5a      	adds	r2, r3, #1
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	601a      	str	r2, [r3, #0]
}
 800f786:	bf00      	nop
 800f788:	3714      	adds	r7, #20
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr

0800f792 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f792:	b480      	push	{r7}
 800f794:	b085      	sub	sp, #20
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
 800f79a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7a8:	d103      	bne.n	800f7b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	60fb      	str	r3, [r7, #12]
 800f7b0:	e00c      	b.n	800f7cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	3308      	adds	r3, #8
 800f7b6:	60fb      	str	r3, [r7, #12]
 800f7b8:	e002      	b.n	800f7c0 <vListInsert+0x2e>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	60fb      	str	r3, [r7, #12]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	68ba      	ldr	r2, [r7, #8]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d2f6      	bcs.n	800f7ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	685a      	ldr	r2, [r3, #4]
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	683a      	ldr	r2, [r7, #0]
 800f7da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	68fa      	ldr	r2, [r7, #12]
 800f7e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	683a      	ldr	r2, [r7, #0]
 800f7e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	1c5a      	adds	r2, r3, #1
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	601a      	str	r2, [r3, #0]
}
 800f7f8:	bf00      	nop
 800f7fa:	3714      	adds	r7, #20
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f804:	b480      	push	{r7}
 800f806:	b085      	sub	sp, #20
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	691b      	ldr	r3, [r3, #16]
 800f810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	6892      	ldr	r2, [r2, #8]
 800f81a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	6852      	ldr	r2, [r2, #4]
 800f824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d103      	bne.n	800f838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	689a      	ldr	r2, [r3, #8]
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2200      	movs	r2, #0
 800f83c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	1e5a      	subs	r2, r3, #1
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3714      	adds	r7, #20
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f858:	b480      	push	{r7}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	3b04      	subs	r3, #4
 800f868:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	3b04      	subs	r3, #4
 800f876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	f023 0201 	bic.w	r2, r3, #1
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	3b04      	subs	r3, #4
 800f886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f888:	4a0c      	ldr	r2, [pc, #48]	@ (800f8bc <pxPortInitialiseStack+0x64>)
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	3b14      	subs	r3, #20
 800f892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	3b04      	subs	r3, #4
 800f89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f06f 0202 	mvn.w	r2, #2
 800f8a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	3b20      	subs	r3, #32
 800f8ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3714      	adds	r7, #20
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	0800f8c1 	.word	0x0800f8c1

0800f8c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b085      	sub	sp, #20
 800f8c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f8ca:	4b13      	ldr	r3, [pc, #76]	@ (800f918 <prvTaskExitError+0x58>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f8d2:	d00b      	beq.n	800f8ec <prvTaskExitError+0x2c>
	__asm volatile
 800f8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d8:	f383 8811 	msr	BASEPRI, r3
 800f8dc:	f3bf 8f6f 	isb	sy
 800f8e0:	f3bf 8f4f 	dsb	sy
 800f8e4:	60fb      	str	r3, [r7, #12]
}
 800f8e6:	bf00      	nop
 800f8e8:	bf00      	nop
 800f8ea:	e7fd      	b.n	800f8e8 <prvTaskExitError+0x28>
	__asm volatile
 800f8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8f0:	f383 8811 	msr	BASEPRI, r3
 800f8f4:	f3bf 8f6f 	isb	sy
 800f8f8:	f3bf 8f4f 	dsb	sy
 800f8fc:	60bb      	str	r3, [r7, #8]
}
 800f8fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f900:	bf00      	nop
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d0fc      	beq.n	800f902 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f908:	bf00      	nop
 800f90a:	bf00      	nop
 800f90c:	3714      	adds	r7, #20
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop
 800f918:	24000010 	.word	0x24000010
 800f91c:	00000000 	.word	0x00000000

0800f920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f920:	4b07      	ldr	r3, [pc, #28]	@ (800f940 <pxCurrentTCBConst2>)
 800f922:	6819      	ldr	r1, [r3, #0]
 800f924:	6808      	ldr	r0, [r1, #0]
 800f926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f92a:	f380 8809 	msr	PSP, r0
 800f92e:	f3bf 8f6f 	isb	sy
 800f932:	f04f 0000 	mov.w	r0, #0
 800f936:	f380 8811 	msr	BASEPRI, r0
 800f93a:	4770      	bx	lr
 800f93c:	f3af 8000 	nop.w

0800f940 <pxCurrentTCBConst2>:
 800f940:	2400469c 	.word	0x2400469c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f944:	bf00      	nop
 800f946:	bf00      	nop

0800f948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f948:	4808      	ldr	r0, [pc, #32]	@ (800f96c <prvPortStartFirstTask+0x24>)
 800f94a:	6800      	ldr	r0, [r0, #0]
 800f94c:	6800      	ldr	r0, [r0, #0]
 800f94e:	f380 8808 	msr	MSP, r0
 800f952:	f04f 0000 	mov.w	r0, #0
 800f956:	f380 8814 	msr	CONTROL, r0
 800f95a:	b662      	cpsie	i
 800f95c:	b661      	cpsie	f
 800f95e:	f3bf 8f4f 	dsb	sy
 800f962:	f3bf 8f6f 	isb	sy
 800f966:	df00      	svc	0
 800f968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f96a:	bf00      	nop
 800f96c:	e000ed08 	.word	0xe000ed08

0800f970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b086      	sub	sp, #24
 800f974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f976:	4b47      	ldr	r3, [pc, #284]	@ (800fa94 <xPortStartScheduler+0x124>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	4a47      	ldr	r2, [pc, #284]	@ (800fa98 <xPortStartScheduler+0x128>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d10b      	bne.n	800f998 <xPortStartScheduler+0x28>
	__asm volatile
 800f980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f984:	f383 8811 	msr	BASEPRI, r3
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	60fb      	str	r3, [r7, #12]
}
 800f992:	bf00      	nop
 800f994:	bf00      	nop
 800f996:	e7fd      	b.n	800f994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f998:	4b3e      	ldr	r3, [pc, #248]	@ (800fa94 <xPortStartScheduler+0x124>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4a3f      	ldr	r2, [pc, #252]	@ (800fa9c <xPortStartScheduler+0x12c>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d10b      	bne.n	800f9ba <xPortStartScheduler+0x4a>
	__asm volatile
 800f9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9a6:	f383 8811 	msr	BASEPRI, r3
 800f9aa:	f3bf 8f6f 	isb	sy
 800f9ae:	f3bf 8f4f 	dsb	sy
 800f9b2:	613b      	str	r3, [r7, #16]
}
 800f9b4:	bf00      	nop
 800f9b6:	bf00      	nop
 800f9b8:	e7fd      	b.n	800f9b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f9ba:	4b39      	ldr	r3, [pc, #228]	@ (800faa0 <xPortStartScheduler+0x130>)
 800f9bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	22ff      	movs	r2, #255	@ 0xff
 800f9ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f9d4:	78fb      	ldrb	r3, [r7, #3]
 800f9d6:	b2db      	uxtb	r3, r3
 800f9d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f9dc:	b2da      	uxtb	r2, r3
 800f9de:	4b31      	ldr	r3, [pc, #196]	@ (800faa4 <xPortStartScheduler+0x134>)
 800f9e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f9e2:	4b31      	ldr	r3, [pc, #196]	@ (800faa8 <xPortStartScheduler+0x138>)
 800f9e4:	2207      	movs	r2, #7
 800f9e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f9e8:	e009      	b.n	800f9fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f9ea:	4b2f      	ldr	r3, [pc, #188]	@ (800faa8 <xPortStartScheduler+0x138>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	3b01      	subs	r3, #1
 800f9f0:	4a2d      	ldr	r2, [pc, #180]	@ (800faa8 <xPortStartScheduler+0x138>)
 800f9f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f9f4:	78fb      	ldrb	r3, [r7, #3]
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	005b      	lsls	r3, r3, #1
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f9fe:	78fb      	ldrb	r3, [r7, #3]
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa06:	2b80      	cmp	r3, #128	@ 0x80
 800fa08:	d0ef      	beq.n	800f9ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fa0a:	4b27      	ldr	r3, [pc, #156]	@ (800faa8 <xPortStartScheduler+0x138>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f1c3 0307 	rsb	r3, r3, #7
 800fa12:	2b04      	cmp	r3, #4
 800fa14:	d00b      	beq.n	800fa2e <xPortStartScheduler+0xbe>
	__asm volatile
 800fa16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa1a:	f383 8811 	msr	BASEPRI, r3
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f3bf 8f4f 	dsb	sy
 800fa26:	60bb      	str	r3, [r7, #8]
}
 800fa28:	bf00      	nop
 800fa2a:	bf00      	nop
 800fa2c:	e7fd      	b.n	800fa2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fa2e:	4b1e      	ldr	r3, [pc, #120]	@ (800faa8 <xPortStartScheduler+0x138>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	021b      	lsls	r3, r3, #8
 800fa34:	4a1c      	ldr	r2, [pc, #112]	@ (800faa8 <xPortStartScheduler+0x138>)
 800fa36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fa38:	4b1b      	ldr	r3, [pc, #108]	@ (800faa8 <xPortStartScheduler+0x138>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fa40:	4a19      	ldr	r2, [pc, #100]	@ (800faa8 <xPortStartScheduler+0x138>)
 800fa42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	b2da      	uxtb	r2, r3
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fa4c:	4b17      	ldr	r3, [pc, #92]	@ (800faac <xPortStartScheduler+0x13c>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a16      	ldr	r2, [pc, #88]	@ (800faac <xPortStartScheduler+0x13c>)
 800fa52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fa56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fa58:	4b14      	ldr	r3, [pc, #80]	@ (800faac <xPortStartScheduler+0x13c>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a13      	ldr	r2, [pc, #76]	@ (800faac <xPortStartScheduler+0x13c>)
 800fa5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fa62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fa64:	f000 f8da 	bl	800fc1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fa68:	4b11      	ldr	r3, [pc, #68]	@ (800fab0 <xPortStartScheduler+0x140>)
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fa6e:	f000 f8f9 	bl	800fc64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fa72:	4b10      	ldr	r3, [pc, #64]	@ (800fab4 <xPortStartScheduler+0x144>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4a0f      	ldr	r2, [pc, #60]	@ (800fab4 <xPortStartScheduler+0x144>)
 800fa78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fa7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fa7e:	f7ff ff63 	bl	800f948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fa82:	f001 fda7 	bl	80115d4 <vTaskSwitchContext>
	prvTaskExitError();
 800fa86:	f7ff ff1b 	bl	800f8c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fa8a:	2300      	movs	r3, #0
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3718      	adds	r7, #24
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	e000ed00 	.word	0xe000ed00
 800fa98:	410fc271 	.word	0x410fc271
 800fa9c:	410fc270 	.word	0x410fc270
 800faa0:	e000e400 	.word	0xe000e400
 800faa4:	24004654 	.word	0x24004654
 800faa8:	24004658 	.word	0x24004658
 800faac:	e000ed20 	.word	0xe000ed20
 800fab0:	24000010 	.word	0x24000010
 800fab4:	e000ef34 	.word	0xe000ef34

0800fab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
	__asm volatile
 800fabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac2:	f383 8811 	msr	BASEPRI, r3
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	607b      	str	r3, [r7, #4]
}
 800fad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fad2:	4b10      	ldr	r3, [pc, #64]	@ (800fb14 <vPortEnterCritical+0x5c>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	3301      	adds	r3, #1
 800fad8:	4a0e      	ldr	r2, [pc, #56]	@ (800fb14 <vPortEnterCritical+0x5c>)
 800fada:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fadc:	4b0d      	ldr	r3, [pc, #52]	@ (800fb14 <vPortEnterCritical+0x5c>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d110      	bne.n	800fb06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fae4:	4b0c      	ldr	r3, [pc, #48]	@ (800fb18 <vPortEnterCritical+0x60>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00b      	beq.n	800fb06 <vPortEnterCritical+0x4e>
	__asm volatile
 800faee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faf2:	f383 8811 	msr	BASEPRI, r3
 800faf6:	f3bf 8f6f 	isb	sy
 800fafa:	f3bf 8f4f 	dsb	sy
 800fafe:	603b      	str	r3, [r7, #0]
}
 800fb00:	bf00      	nop
 800fb02:	bf00      	nop
 800fb04:	e7fd      	b.n	800fb02 <vPortEnterCritical+0x4a>
	}
}
 800fb06:	bf00      	nop
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr
 800fb12:	bf00      	nop
 800fb14:	24000010 	.word	0x24000010
 800fb18:	e000ed04 	.word	0xe000ed04

0800fb1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b083      	sub	sp, #12
 800fb20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fb22:	4b12      	ldr	r3, [pc, #72]	@ (800fb6c <vPortExitCritical+0x50>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d10b      	bne.n	800fb42 <vPortExitCritical+0x26>
	__asm volatile
 800fb2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb2e:	f383 8811 	msr	BASEPRI, r3
 800fb32:	f3bf 8f6f 	isb	sy
 800fb36:	f3bf 8f4f 	dsb	sy
 800fb3a:	607b      	str	r3, [r7, #4]
}
 800fb3c:	bf00      	nop
 800fb3e:	bf00      	nop
 800fb40:	e7fd      	b.n	800fb3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fb42:	4b0a      	ldr	r3, [pc, #40]	@ (800fb6c <vPortExitCritical+0x50>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	3b01      	subs	r3, #1
 800fb48:	4a08      	ldr	r2, [pc, #32]	@ (800fb6c <vPortExitCritical+0x50>)
 800fb4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fb4c:	4b07      	ldr	r3, [pc, #28]	@ (800fb6c <vPortExitCritical+0x50>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d105      	bne.n	800fb60 <vPortExitCritical+0x44>
 800fb54:	2300      	movs	r3, #0
 800fb56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fb5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fb60:	bf00      	nop
 800fb62:	370c      	adds	r7, #12
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr
 800fb6c:	24000010 	.word	0x24000010

0800fb70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fb70:	f3ef 8009 	mrs	r0, PSP
 800fb74:	f3bf 8f6f 	isb	sy
 800fb78:	4b15      	ldr	r3, [pc, #84]	@ (800fbd0 <pxCurrentTCBConst>)
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	f01e 0f10 	tst.w	lr, #16
 800fb80:	bf08      	it	eq
 800fb82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fb86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8a:	6010      	str	r0, [r2, #0]
 800fb8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fb90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fb94:	f380 8811 	msr	BASEPRI, r0
 800fb98:	f3bf 8f4f 	dsb	sy
 800fb9c:	f3bf 8f6f 	isb	sy
 800fba0:	f001 fd18 	bl	80115d4 <vTaskSwitchContext>
 800fba4:	f04f 0000 	mov.w	r0, #0
 800fba8:	f380 8811 	msr	BASEPRI, r0
 800fbac:	bc09      	pop	{r0, r3}
 800fbae:	6819      	ldr	r1, [r3, #0]
 800fbb0:	6808      	ldr	r0, [r1, #0]
 800fbb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb6:	f01e 0f10 	tst.w	lr, #16
 800fbba:	bf08      	it	eq
 800fbbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fbc0:	f380 8809 	msr	PSP, r0
 800fbc4:	f3bf 8f6f 	isb	sy
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop
 800fbcc:	f3af 8000 	nop.w

0800fbd0 <pxCurrentTCBConst>:
 800fbd0:	2400469c 	.word	0x2400469c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fbd4:	bf00      	nop
 800fbd6:	bf00      	nop

0800fbd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
	__asm volatile
 800fbde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbe2:	f383 8811 	msr	BASEPRI, r3
 800fbe6:	f3bf 8f6f 	isb	sy
 800fbea:	f3bf 8f4f 	dsb	sy
 800fbee:	607b      	str	r3, [r7, #4]
}
 800fbf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fbf2:	f001 fc35 	bl	8011460 <xTaskIncrementTick>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d003      	beq.n	800fc04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fbfc:	4b06      	ldr	r3, [pc, #24]	@ (800fc18 <xPortSysTickHandler+0x40>)
 800fbfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc02:	601a      	str	r2, [r3, #0]
 800fc04:	2300      	movs	r3, #0
 800fc06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	f383 8811 	msr	BASEPRI, r3
}
 800fc0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fc10:	bf00      	nop
 800fc12:	3708      	adds	r7, #8
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	e000ed04 	.word	0xe000ed04

0800fc1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc20:	4b0b      	ldr	r3, [pc, #44]	@ (800fc50 <vPortSetupTimerInterrupt+0x34>)
 800fc22:	2200      	movs	r2, #0
 800fc24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc26:	4b0b      	ldr	r3, [pc, #44]	@ (800fc54 <vPortSetupTimerInterrupt+0x38>)
 800fc28:	2200      	movs	r2, #0
 800fc2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc2c:	4b0a      	ldr	r3, [pc, #40]	@ (800fc58 <vPortSetupTimerInterrupt+0x3c>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a0a      	ldr	r2, [pc, #40]	@ (800fc5c <vPortSetupTimerInterrupt+0x40>)
 800fc32:	fba2 2303 	umull	r2, r3, r2, r3
 800fc36:	099b      	lsrs	r3, r3, #6
 800fc38:	4a09      	ldr	r2, [pc, #36]	@ (800fc60 <vPortSetupTimerInterrupt+0x44>)
 800fc3a:	3b01      	subs	r3, #1
 800fc3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fc3e:	4b04      	ldr	r3, [pc, #16]	@ (800fc50 <vPortSetupTimerInterrupt+0x34>)
 800fc40:	2207      	movs	r2, #7
 800fc42:	601a      	str	r2, [r3, #0]
}
 800fc44:	bf00      	nop
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop
 800fc50:	e000e010 	.word	0xe000e010
 800fc54:	e000e018 	.word	0xe000e018
 800fc58:	24000000 	.word	0x24000000
 800fc5c:	10624dd3 	.word	0x10624dd3
 800fc60:	e000e014 	.word	0xe000e014

0800fc64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fc64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fc74 <vPortEnableVFP+0x10>
 800fc68:	6801      	ldr	r1, [r0, #0]
 800fc6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fc6e:	6001      	str	r1, [r0, #0]
 800fc70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fc72:	bf00      	nop
 800fc74:	e000ed88 	.word	0xe000ed88

0800fc78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fc78:	b480      	push	{r7}
 800fc7a:	b085      	sub	sp, #20
 800fc7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fc7e:	f3ef 8305 	mrs	r3, IPSR
 800fc82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2b0f      	cmp	r3, #15
 800fc88:	d915      	bls.n	800fcb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fc8a:	4a18      	ldr	r2, [pc, #96]	@ (800fcec <vPortValidateInterruptPriority+0x74>)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	4413      	add	r3, r2
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fc94:	4b16      	ldr	r3, [pc, #88]	@ (800fcf0 <vPortValidateInterruptPriority+0x78>)
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	7afa      	ldrb	r2, [r7, #11]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d20b      	bcs.n	800fcb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca2:	f383 8811 	msr	BASEPRI, r3
 800fca6:	f3bf 8f6f 	isb	sy
 800fcaa:	f3bf 8f4f 	dsb	sy
 800fcae:	607b      	str	r3, [r7, #4]
}
 800fcb0:	bf00      	nop
 800fcb2:	bf00      	nop
 800fcb4:	e7fd      	b.n	800fcb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fcb6:	4b0f      	ldr	r3, [pc, #60]	@ (800fcf4 <vPortValidateInterruptPriority+0x7c>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fcbe:	4b0e      	ldr	r3, [pc, #56]	@ (800fcf8 <vPortValidateInterruptPriority+0x80>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d90b      	bls.n	800fcde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fcc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcca:	f383 8811 	msr	BASEPRI, r3
 800fcce:	f3bf 8f6f 	isb	sy
 800fcd2:	f3bf 8f4f 	dsb	sy
 800fcd6:	603b      	str	r3, [r7, #0]
}
 800fcd8:	bf00      	nop
 800fcda:	bf00      	nop
 800fcdc:	e7fd      	b.n	800fcda <vPortValidateInterruptPriority+0x62>
	}
 800fcde:	bf00      	nop
 800fce0:	3714      	adds	r7, #20
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	e000e3f0 	.word	0xe000e3f0
 800fcf0:	24004654 	.word	0x24004654
 800fcf4:	e000ed0c 	.word	0xe000ed0c
 800fcf8:	24004658 	.word	0x24004658

0800fcfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d10b      	bne.n	800fd28 <xQueueGenericReset+0x2c>
	__asm volatile
 800fd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd14:	f383 8811 	msr	BASEPRI, r3
 800fd18:	f3bf 8f6f 	isb	sy
 800fd1c:	f3bf 8f4f 	dsb	sy
 800fd20:	60bb      	str	r3, [r7, #8]
}
 800fd22:	bf00      	nop
 800fd24:	bf00      	nop
 800fd26:	e7fd      	b.n	800fd24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fd28:	f7ff fec6 	bl	800fab8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd34:	68f9      	ldr	r1, [r7, #12]
 800fd36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fd38:	fb01 f303 	mul.w	r3, r1, r3
 800fd3c:	441a      	add	r2, r3
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2200      	movs	r2, #0
 800fd46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	68f9      	ldr	r1, [r7, #12]
 800fd5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fd5e:	fb01 f303 	mul.w	r3, r1, r3
 800fd62:	441a      	add	r2, r3
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	22ff      	movs	r2, #255	@ 0xff
 800fd6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	22ff      	movs	r2, #255	@ 0xff
 800fd74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d114      	bne.n	800fda8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d01a      	beq.n	800fdbc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	3310      	adds	r3, #16
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f001 fcd2 	bl	8011734 <xTaskRemoveFromEventList>
 800fd90:	4603      	mov	r3, r0
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d012      	beq.n	800fdbc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fd96:	4b0d      	ldr	r3, [pc, #52]	@ (800fdcc <xQueueGenericReset+0xd0>)
 800fd98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd9c:	601a      	str	r2, [r3, #0]
 800fd9e:	f3bf 8f4f 	dsb	sy
 800fda2:	f3bf 8f6f 	isb	sy
 800fda6:	e009      	b.n	800fdbc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	3310      	adds	r3, #16
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7ff fc9f 	bl	800f6f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	3324      	adds	r3, #36	@ 0x24
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7ff fc9a 	bl	800f6f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fdbc:	f7ff feae 	bl	800fb1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fdc0:	2301      	movs	r3, #1
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	e000ed04 	.word	0xe000ed04

0800fdd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b08e      	sub	sp, #56	@ 0x38
 800fdd4:	af02      	add	r7, sp, #8
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
 800fddc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d10b      	bne.n	800fdfc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800fde4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde8:	f383 8811 	msr	BASEPRI, r3
 800fdec:	f3bf 8f6f 	isb	sy
 800fdf0:	f3bf 8f4f 	dsb	sy
 800fdf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fdf6:	bf00      	nop
 800fdf8:	bf00      	nop
 800fdfa:	e7fd      	b.n	800fdf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d10b      	bne.n	800fe1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800fe02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe06:	f383 8811 	msr	BASEPRI, r3
 800fe0a:	f3bf 8f6f 	isb	sy
 800fe0e:	f3bf 8f4f 	dsb	sy
 800fe12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fe14:	bf00      	nop
 800fe16:	bf00      	nop
 800fe18:	e7fd      	b.n	800fe16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <xQueueGenericCreateStatic+0x56>
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d001      	beq.n	800fe2a <xQueueGenericCreateStatic+0x5a>
 800fe26:	2301      	movs	r3, #1
 800fe28:	e000      	b.n	800fe2c <xQueueGenericCreateStatic+0x5c>
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d10b      	bne.n	800fe48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800fe30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe34:	f383 8811 	msr	BASEPRI, r3
 800fe38:	f3bf 8f6f 	isb	sy
 800fe3c:	f3bf 8f4f 	dsb	sy
 800fe40:	623b      	str	r3, [r7, #32]
}
 800fe42:	bf00      	nop
 800fe44:	bf00      	nop
 800fe46:	e7fd      	b.n	800fe44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d102      	bne.n	800fe54 <xQueueGenericCreateStatic+0x84>
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d101      	bne.n	800fe58 <xQueueGenericCreateStatic+0x88>
 800fe54:	2301      	movs	r3, #1
 800fe56:	e000      	b.n	800fe5a <xQueueGenericCreateStatic+0x8a>
 800fe58:	2300      	movs	r3, #0
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d10b      	bne.n	800fe76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800fe5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	61fb      	str	r3, [r7, #28]
}
 800fe70:	bf00      	nop
 800fe72:	bf00      	nop
 800fe74:	e7fd      	b.n	800fe72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fe76:	2350      	movs	r3, #80	@ 0x50
 800fe78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	2b50      	cmp	r3, #80	@ 0x50
 800fe7e:	d00b      	beq.n	800fe98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800fe80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe84:	f383 8811 	msr	BASEPRI, r3
 800fe88:	f3bf 8f6f 	isb	sy
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	61bb      	str	r3, [r7, #24]
}
 800fe92:	bf00      	nop
 800fe94:	bf00      	nop
 800fe96:	e7fd      	b.n	800fe94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fe98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800fe9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d00d      	beq.n	800fec0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea6:	2201      	movs	r2, #1
 800fea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800feac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800feb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	4613      	mov	r3, r2
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	68b9      	ldr	r1, [r7, #8]
 800feba:	68f8      	ldr	r0, [r7, #12]
 800febc:	f000 f840 	bl	800ff40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3730      	adds	r7, #48	@ 0x30
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}

0800feca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800feca:	b580      	push	{r7, lr}
 800fecc:	b08a      	sub	sp, #40	@ 0x28
 800fece:	af02      	add	r7, sp, #8
 800fed0:	60f8      	str	r0, [r7, #12]
 800fed2:	60b9      	str	r1, [r7, #8]
 800fed4:	4613      	mov	r3, r2
 800fed6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d10b      	bne.n	800fef6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800fede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	613b      	str	r3, [r7, #16]
}
 800fef0:	bf00      	nop
 800fef2:	bf00      	nop
 800fef4:	e7fd      	b.n	800fef2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	68ba      	ldr	r2, [r7, #8]
 800fefa:	fb02 f303 	mul.w	r3, r2, r3
 800fefe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	3350      	adds	r3, #80	@ 0x50
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7ff fa05 	bl	800f314 <pvPortMalloc>
 800ff0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ff0c:	69bb      	ldr	r3, [r7, #24]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d011      	beq.n	800ff36 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	3350      	adds	r3, #80	@ 0x50
 800ff1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ff1c:	69bb      	ldr	r3, [r7, #24]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff24:	79fa      	ldrb	r2, [r7, #7]
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	4613      	mov	r3, r2
 800ff2c:	697a      	ldr	r2, [r7, #20]
 800ff2e:	68b9      	ldr	r1, [r7, #8]
 800ff30:	68f8      	ldr	r0, [r7, #12]
 800ff32:	f000 f805 	bl	800ff40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ff36:	69bb      	ldr	r3, [r7, #24]
	}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3720      	adds	r7, #32
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	60b9      	str	r1, [r7, #8]
 800ff4a:	607a      	str	r2, [r7, #4]
 800ff4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d103      	bne.n	800ff5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	69ba      	ldr	r2, [r7, #24]
 800ff58:	601a      	str	r2, [r3, #0]
 800ff5a:	e002      	b.n	800ff62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ff5c:	69bb      	ldr	r3, [r7, #24]
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ff62:	69bb      	ldr	r3, [r7, #24]
 800ff64:	68fa      	ldr	r2, [r7, #12]
 800ff66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ff68:	69bb      	ldr	r3, [r7, #24]
 800ff6a:	68ba      	ldr	r2, [r7, #8]
 800ff6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ff6e:	2101      	movs	r1, #1
 800ff70:	69b8      	ldr	r0, [r7, #24]
 800ff72:	f7ff fec3 	bl	800fcfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	78fa      	ldrb	r2, [r7, #3]
 800ff7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ff7e:	bf00      	nop
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b08a      	sub	sp, #40	@ 0x28
 800ff8a:	af02      	add	r7, sp, #8
 800ff8c:	60f8      	str	r0, [r7, #12]
 800ff8e:	60b9      	str	r1, [r7, #8]
 800ff90:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d10b      	bne.n	800ffb0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800ff98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff9c:	f383 8811 	msr	BASEPRI, r3
 800ffa0:	f3bf 8f6f 	isb	sy
 800ffa4:	f3bf 8f4f 	dsb	sy
 800ffa8:	61bb      	str	r3, [r7, #24]
}
 800ffaa:	bf00      	nop
 800ffac:	bf00      	nop
 800ffae:	e7fd      	b.n	800ffac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ffb0:	68ba      	ldr	r2, [r7, #8]
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d90b      	bls.n	800ffd0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800ffb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffbc:	f383 8811 	msr	BASEPRI, r3
 800ffc0:	f3bf 8f6f 	isb	sy
 800ffc4:	f3bf 8f4f 	dsb	sy
 800ffc8:	617b      	str	r3, [r7, #20]
}
 800ffca:	bf00      	nop
 800ffcc:	bf00      	nop
 800ffce:	e7fd      	b.n	800ffcc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ffd0:	2302      	movs	r3, #2
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	2100      	movs	r1, #0
 800ffda:	68f8      	ldr	r0, [r7, #12]
 800ffdc:	f7ff fef8 	bl	800fdd0 <xQueueGenericCreateStatic>
 800ffe0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d002      	beq.n	800ffee <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	68ba      	ldr	r2, [r7, #8]
 800ffec:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ffee:	69fb      	ldr	r3, [r7, #28]
	}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3720      	adds	r7, #32
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b086      	sub	sp, #24
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d10b      	bne.n	8010020 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8010008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801000c:	f383 8811 	msr	BASEPRI, r3
 8010010:	f3bf 8f6f 	isb	sy
 8010014:	f3bf 8f4f 	dsb	sy
 8010018:	613b      	str	r3, [r7, #16]
}
 801001a:	bf00      	nop
 801001c:	bf00      	nop
 801001e:	e7fd      	b.n	801001c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010020:	683a      	ldr	r2, [r7, #0]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	429a      	cmp	r2, r3
 8010026:	d90b      	bls.n	8010040 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8010028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801002c:	f383 8811 	msr	BASEPRI, r3
 8010030:	f3bf 8f6f 	isb	sy
 8010034:	f3bf 8f4f 	dsb	sy
 8010038:	60fb      	str	r3, [r7, #12]
}
 801003a:	bf00      	nop
 801003c:	bf00      	nop
 801003e:	e7fd      	b.n	801003c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010040:	2202      	movs	r2, #2
 8010042:	2100      	movs	r1, #0
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7ff ff40 	bl	800feca <xQueueGenericCreate>
 801004a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d002      	beq.n	8010058 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	683a      	ldr	r2, [r7, #0]
 8010056:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010058:	697b      	ldr	r3, [r7, #20]
	}
 801005a:	4618      	mov	r0, r3
 801005c:	3718      	adds	r7, #24
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
	...

08010064 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b08e      	sub	sp, #56	@ 0x38
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
 8010070:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010072:	2300      	movs	r3, #0
 8010074:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801007a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801007c:	2b00      	cmp	r3, #0
 801007e:	d10b      	bne.n	8010098 <xQueueGenericSend+0x34>
	__asm volatile
 8010080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010084:	f383 8811 	msr	BASEPRI, r3
 8010088:	f3bf 8f6f 	isb	sy
 801008c:	f3bf 8f4f 	dsb	sy
 8010090:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010092:	bf00      	nop
 8010094:	bf00      	nop
 8010096:	e7fd      	b.n	8010094 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d103      	bne.n	80100a6 <xQueueGenericSend+0x42>
 801009e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d101      	bne.n	80100aa <xQueueGenericSend+0x46>
 80100a6:	2301      	movs	r3, #1
 80100a8:	e000      	b.n	80100ac <xQueueGenericSend+0x48>
 80100aa:	2300      	movs	r3, #0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d10b      	bne.n	80100c8 <xQueueGenericSend+0x64>
	__asm volatile
 80100b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100b4:	f383 8811 	msr	BASEPRI, r3
 80100b8:	f3bf 8f6f 	isb	sy
 80100bc:	f3bf 8f4f 	dsb	sy
 80100c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80100c2:	bf00      	nop
 80100c4:	bf00      	nop
 80100c6:	e7fd      	b.n	80100c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	2b02      	cmp	r3, #2
 80100cc:	d103      	bne.n	80100d6 <xQueueGenericSend+0x72>
 80100ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	d101      	bne.n	80100da <xQueueGenericSend+0x76>
 80100d6:	2301      	movs	r3, #1
 80100d8:	e000      	b.n	80100dc <xQueueGenericSend+0x78>
 80100da:	2300      	movs	r3, #0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d10b      	bne.n	80100f8 <xQueueGenericSend+0x94>
	__asm volatile
 80100e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100e4:	f383 8811 	msr	BASEPRI, r3
 80100e8:	f3bf 8f6f 	isb	sy
 80100ec:	f3bf 8f4f 	dsb	sy
 80100f0:	623b      	str	r3, [r7, #32]
}
 80100f2:	bf00      	nop
 80100f4:	bf00      	nop
 80100f6:	e7fd      	b.n	80100f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80100f8:	f001 fcdc 	bl	8011ab4 <xTaskGetSchedulerState>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d102      	bne.n	8010108 <xQueueGenericSend+0xa4>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d101      	bne.n	801010c <xQueueGenericSend+0xa8>
 8010108:	2301      	movs	r3, #1
 801010a:	e000      	b.n	801010e <xQueueGenericSend+0xaa>
 801010c:	2300      	movs	r3, #0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d10b      	bne.n	801012a <xQueueGenericSend+0xc6>
	__asm volatile
 8010112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010116:	f383 8811 	msr	BASEPRI, r3
 801011a:	f3bf 8f6f 	isb	sy
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	61fb      	str	r3, [r7, #28]
}
 8010124:	bf00      	nop
 8010126:	bf00      	nop
 8010128:	e7fd      	b.n	8010126 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801012a:	f7ff fcc5 	bl	800fab8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801012e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010136:	429a      	cmp	r2, r3
 8010138:	d302      	bcc.n	8010140 <xQueueGenericSend+0xdc>
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	2b02      	cmp	r3, #2
 801013e:	d129      	bne.n	8010194 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010140:	683a      	ldr	r2, [r7, #0]
 8010142:	68b9      	ldr	r1, [r7, #8]
 8010144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010146:	f000 fc6d 	bl	8010a24 <prvCopyDataToQueue>
 801014a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801014c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801014e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010150:	2b00      	cmp	r3, #0
 8010152:	d010      	beq.n	8010176 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010156:	3324      	adds	r3, #36	@ 0x24
 8010158:	4618      	mov	r0, r3
 801015a:	f001 faeb 	bl	8011734 <xTaskRemoveFromEventList>
 801015e:	4603      	mov	r3, r0
 8010160:	2b00      	cmp	r3, #0
 8010162:	d013      	beq.n	801018c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010164:	4b3f      	ldr	r3, [pc, #252]	@ (8010264 <xQueueGenericSend+0x200>)
 8010166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801016a:	601a      	str	r2, [r3, #0]
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	f3bf 8f6f 	isb	sy
 8010174:	e00a      	b.n	801018c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010178:	2b00      	cmp	r3, #0
 801017a:	d007      	beq.n	801018c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801017c:	4b39      	ldr	r3, [pc, #228]	@ (8010264 <xQueueGenericSend+0x200>)
 801017e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010182:	601a      	str	r2, [r3, #0]
 8010184:	f3bf 8f4f 	dsb	sy
 8010188:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801018c:	f7ff fcc6 	bl	800fb1c <vPortExitCritical>
				return pdPASS;
 8010190:	2301      	movs	r3, #1
 8010192:	e063      	b.n	801025c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d103      	bne.n	80101a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801019a:	f7ff fcbf 	bl	800fb1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801019e:	2300      	movs	r3, #0
 80101a0:	e05c      	b.n	801025c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80101a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d106      	bne.n	80101b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80101a8:	f107 0314 	add.w	r3, r7, #20
 80101ac:	4618      	mov	r0, r3
 80101ae:	f001 fb25 	bl	80117fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80101b2:	2301      	movs	r3, #1
 80101b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80101b6:	f7ff fcb1 	bl	800fb1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80101ba:	f001 f883 	bl	80112c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80101be:	f7ff fc7b 	bl	800fab8 <vPortEnterCritical>
 80101c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80101c8:	b25b      	sxtb	r3, r3
 80101ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80101ce:	d103      	bne.n	80101d8 <xQueueGenericSend+0x174>
 80101d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d2:	2200      	movs	r2, #0
 80101d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80101d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80101de:	b25b      	sxtb	r3, r3
 80101e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80101e4:	d103      	bne.n	80101ee <xQueueGenericSend+0x18a>
 80101e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e8:	2200      	movs	r2, #0
 80101ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80101ee:	f7ff fc95 	bl	800fb1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80101f2:	1d3a      	adds	r2, r7, #4
 80101f4:	f107 0314 	add.w	r3, r7, #20
 80101f8:	4611      	mov	r1, r2
 80101fa:	4618      	mov	r0, r3
 80101fc:	f001 fb14 	bl	8011828 <xTaskCheckForTimeOut>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d124      	bne.n	8010250 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010206:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010208:	f000 fd04 	bl	8010c14 <prvIsQueueFull>
 801020c:	4603      	mov	r3, r0
 801020e:	2b00      	cmp	r3, #0
 8010210:	d018      	beq.n	8010244 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010214:	3310      	adds	r3, #16
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	4611      	mov	r1, r2
 801021a:	4618      	mov	r0, r3
 801021c:	f001 fa38 	bl	8011690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010222:	f000 fc8f 	bl	8010b44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010226:	f001 f85b 	bl	80112e0 <xTaskResumeAll>
 801022a:	4603      	mov	r3, r0
 801022c:	2b00      	cmp	r3, #0
 801022e:	f47f af7c 	bne.w	801012a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010232:	4b0c      	ldr	r3, [pc, #48]	@ (8010264 <xQueueGenericSend+0x200>)
 8010234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010238:	601a      	str	r2, [r3, #0]
 801023a:	f3bf 8f4f 	dsb	sy
 801023e:	f3bf 8f6f 	isb	sy
 8010242:	e772      	b.n	801012a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010246:	f000 fc7d 	bl	8010b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801024a:	f001 f849 	bl	80112e0 <xTaskResumeAll>
 801024e:	e76c      	b.n	801012a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010252:	f000 fc77 	bl	8010b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010256:	f001 f843 	bl	80112e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801025a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801025c:	4618      	mov	r0, r3
 801025e:	3738      	adds	r7, #56	@ 0x38
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	e000ed04 	.word	0xe000ed04

08010268 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b090      	sub	sp, #64	@ 0x40
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	607a      	str	r2, [r7, #4]
 8010274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801027a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027c:	2b00      	cmp	r3, #0
 801027e:	d10b      	bne.n	8010298 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8010280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010284:	f383 8811 	msr	BASEPRI, r3
 8010288:	f3bf 8f6f 	isb	sy
 801028c:	f3bf 8f4f 	dsb	sy
 8010290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010292:	bf00      	nop
 8010294:	bf00      	nop
 8010296:	e7fd      	b.n	8010294 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d103      	bne.n	80102a6 <xQueueGenericSendFromISR+0x3e>
 801029e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d101      	bne.n	80102aa <xQueueGenericSendFromISR+0x42>
 80102a6:	2301      	movs	r3, #1
 80102a8:	e000      	b.n	80102ac <xQueueGenericSendFromISR+0x44>
 80102aa:	2300      	movs	r3, #0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d10b      	bne.n	80102c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80102b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102b4:	f383 8811 	msr	BASEPRI, r3
 80102b8:	f3bf 8f6f 	isb	sy
 80102bc:	f3bf 8f4f 	dsb	sy
 80102c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80102c2:	bf00      	nop
 80102c4:	bf00      	nop
 80102c6:	e7fd      	b.n	80102c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	2b02      	cmp	r3, #2
 80102cc:	d103      	bne.n	80102d6 <xQueueGenericSendFromISR+0x6e>
 80102ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d101      	bne.n	80102da <xQueueGenericSendFromISR+0x72>
 80102d6:	2301      	movs	r3, #1
 80102d8:	e000      	b.n	80102dc <xQueueGenericSendFromISR+0x74>
 80102da:	2300      	movs	r3, #0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d10b      	bne.n	80102f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80102e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102e4:	f383 8811 	msr	BASEPRI, r3
 80102e8:	f3bf 8f6f 	isb	sy
 80102ec:	f3bf 8f4f 	dsb	sy
 80102f0:	623b      	str	r3, [r7, #32]
}
 80102f2:	bf00      	nop
 80102f4:	bf00      	nop
 80102f6:	e7fd      	b.n	80102f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102f8:	f7ff fcbe 	bl	800fc78 <vPortValidateInterruptPriority>
	__asm volatile
 80102fc:	f3ef 8211 	mrs	r2, BASEPRI
 8010300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010304:	f383 8811 	msr	BASEPRI, r3
 8010308:	f3bf 8f6f 	isb	sy
 801030c:	f3bf 8f4f 	dsb	sy
 8010310:	61fa      	str	r2, [r7, #28]
 8010312:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8010314:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010316:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801031a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801031c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801031e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010320:	429a      	cmp	r2, r3
 8010322:	d302      	bcc.n	801032a <xQueueGenericSendFromISR+0xc2>
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	2b02      	cmp	r3, #2
 8010328:	d12f      	bne.n	801038a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801032a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801032c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010330:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010338:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801033a:	683a      	ldr	r2, [r7, #0]
 801033c:	68b9      	ldr	r1, [r7, #8]
 801033e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010340:	f000 fb70 	bl	8010a24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010344:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8010348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801034c:	d112      	bne.n	8010374 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801034e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010352:	2b00      	cmp	r3, #0
 8010354:	d016      	beq.n	8010384 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010358:	3324      	adds	r3, #36	@ 0x24
 801035a:	4618      	mov	r0, r3
 801035c:	f001 f9ea 	bl	8011734 <xTaskRemoveFromEventList>
 8010360:	4603      	mov	r3, r0
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00e      	beq.n	8010384 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d00b      	beq.n	8010384 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2201      	movs	r2, #1
 8010370:	601a      	str	r2, [r3, #0]
 8010372:	e007      	b.n	8010384 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010374:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010378:	3301      	adds	r3, #1
 801037a:	b2db      	uxtb	r3, r3
 801037c:	b25a      	sxtb	r2, r3
 801037e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010384:	2301      	movs	r3, #1
 8010386:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8010388:	e001      	b.n	801038e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801038a:	2300      	movs	r3, #0
 801038c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801038e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010390:	617b      	str	r3, [r7, #20]
	__asm volatile
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	f383 8811 	msr	BASEPRI, r3
}
 8010398:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801039a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801039c:	4618      	mov	r0, r3
 801039e:	3740      	adds	r7, #64	@ 0x40
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b08e      	sub	sp, #56	@ 0x38
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80103b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d10b      	bne.n	80103d0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80103b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103bc:	f383 8811 	msr	BASEPRI, r3
 80103c0:	f3bf 8f6f 	isb	sy
 80103c4:	f3bf 8f4f 	dsb	sy
 80103c8:	623b      	str	r3, [r7, #32]
}
 80103ca:	bf00      	nop
 80103cc:	bf00      	nop
 80103ce:	e7fd      	b.n	80103cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80103d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d00b      	beq.n	80103f0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80103d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103dc:	f383 8811 	msr	BASEPRI, r3
 80103e0:	f3bf 8f6f 	isb	sy
 80103e4:	f3bf 8f4f 	dsb	sy
 80103e8:	61fb      	str	r3, [r7, #28]
}
 80103ea:	bf00      	nop
 80103ec:	bf00      	nop
 80103ee:	e7fd      	b.n	80103ec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80103f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d103      	bne.n	8010400 <xQueueGiveFromISR+0x5c>
 80103f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d101      	bne.n	8010404 <xQueueGiveFromISR+0x60>
 8010400:	2301      	movs	r3, #1
 8010402:	e000      	b.n	8010406 <xQueueGiveFromISR+0x62>
 8010404:	2300      	movs	r3, #0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d10b      	bne.n	8010422 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801040a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801040e:	f383 8811 	msr	BASEPRI, r3
 8010412:	f3bf 8f6f 	isb	sy
 8010416:	f3bf 8f4f 	dsb	sy
 801041a:	61bb      	str	r3, [r7, #24]
}
 801041c:	bf00      	nop
 801041e:	bf00      	nop
 8010420:	e7fd      	b.n	801041e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010422:	f7ff fc29 	bl	800fc78 <vPortValidateInterruptPriority>
	__asm volatile
 8010426:	f3ef 8211 	mrs	r2, BASEPRI
 801042a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801042e:	f383 8811 	msr	BASEPRI, r3
 8010432:	f3bf 8f6f 	isb	sy
 8010436:	f3bf 8f4f 	dsb	sy
 801043a:	617a      	str	r2, [r7, #20]
 801043c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801043e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010440:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010446:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801044a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801044c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801044e:	429a      	cmp	r2, r3
 8010450:	d22b      	bcs.n	80104aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010454:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801045c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801045e:	1c5a      	adds	r2, r3, #1
 8010460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010462:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010464:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801046c:	d112      	bne.n	8010494 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801046e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010472:	2b00      	cmp	r3, #0
 8010474:	d016      	beq.n	80104a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010478:	3324      	adds	r3, #36	@ 0x24
 801047a:	4618      	mov	r0, r3
 801047c:	f001 f95a 	bl	8011734 <xTaskRemoveFromEventList>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00e      	beq.n	80104a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d00b      	beq.n	80104a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	2201      	movs	r2, #1
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	e007      	b.n	80104a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010498:	3301      	adds	r3, #1
 801049a:	b2db      	uxtb	r3, r3
 801049c:	b25a      	sxtb	r2, r3
 801049e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80104a4:	2301      	movs	r3, #1
 80104a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80104a8:	e001      	b.n	80104ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80104aa:	2300      	movs	r3, #0
 80104ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80104ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f383 8811 	msr	BASEPRI, r3
}
 80104b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80104ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3738      	adds	r7, #56	@ 0x38
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b08c      	sub	sp, #48	@ 0x30
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80104d0:	2300      	movs	r3, #0
 80104d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80104d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d10b      	bne.n	80104f6 <xQueueReceive+0x32>
	__asm volatile
 80104de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104e2:	f383 8811 	msr	BASEPRI, r3
 80104e6:	f3bf 8f6f 	isb	sy
 80104ea:	f3bf 8f4f 	dsb	sy
 80104ee:	623b      	str	r3, [r7, #32]
}
 80104f0:	bf00      	nop
 80104f2:	bf00      	nop
 80104f4:	e7fd      	b.n	80104f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d103      	bne.n	8010504 <xQueueReceive+0x40>
 80104fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010500:	2b00      	cmp	r3, #0
 8010502:	d101      	bne.n	8010508 <xQueueReceive+0x44>
 8010504:	2301      	movs	r3, #1
 8010506:	e000      	b.n	801050a <xQueueReceive+0x46>
 8010508:	2300      	movs	r3, #0
 801050a:	2b00      	cmp	r3, #0
 801050c:	d10b      	bne.n	8010526 <xQueueReceive+0x62>
	__asm volatile
 801050e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010512:	f383 8811 	msr	BASEPRI, r3
 8010516:	f3bf 8f6f 	isb	sy
 801051a:	f3bf 8f4f 	dsb	sy
 801051e:	61fb      	str	r3, [r7, #28]
}
 8010520:	bf00      	nop
 8010522:	bf00      	nop
 8010524:	e7fd      	b.n	8010522 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010526:	f001 fac5 	bl	8011ab4 <xTaskGetSchedulerState>
 801052a:	4603      	mov	r3, r0
 801052c:	2b00      	cmp	r3, #0
 801052e:	d102      	bne.n	8010536 <xQueueReceive+0x72>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d101      	bne.n	801053a <xQueueReceive+0x76>
 8010536:	2301      	movs	r3, #1
 8010538:	e000      	b.n	801053c <xQueueReceive+0x78>
 801053a:	2300      	movs	r3, #0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d10b      	bne.n	8010558 <xQueueReceive+0x94>
	__asm volatile
 8010540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010544:	f383 8811 	msr	BASEPRI, r3
 8010548:	f3bf 8f6f 	isb	sy
 801054c:	f3bf 8f4f 	dsb	sy
 8010550:	61bb      	str	r3, [r7, #24]
}
 8010552:	bf00      	nop
 8010554:	bf00      	nop
 8010556:	e7fd      	b.n	8010554 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010558:	f7ff faae 	bl	800fab8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801055c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801055e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010560:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010564:	2b00      	cmp	r3, #0
 8010566:	d01f      	beq.n	80105a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010568:	68b9      	ldr	r1, [r7, #8]
 801056a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801056c:	f000 fac4 	bl	8010af8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010572:	1e5a      	subs	r2, r3, #1
 8010574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010576:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801057a:	691b      	ldr	r3, [r3, #16]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00f      	beq.n	80105a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010582:	3310      	adds	r3, #16
 8010584:	4618      	mov	r0, r3
 8010586:	f001 f8d5 	bl	8011734 <xTaskRemoveFromEventList>
 801058a:	4603      	mov	r3, r0
 801058c:	2b00      	cmp	r3, #0
 801058e:	d007      	beq.n	80105a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010590:	4b3c      	ldr	r3, [pc, #240]	@ (8010684 <xQueueReceive+0x1c0>)
 8010592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010596:	601a      	str	r2, [r3, #0]
 8010598:	f3bf 8f4f 	dsb	sy
 801059c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80105a0:	f7ff fabc 	bl	800fb1c <vPortExitCritical>
				return pdPASS;
 80105a4:	2301      	movs	r3, #1
 80105a6:	e069      	b.n	801067c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d103      	bne.n	80105b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80105ae:	f7ff fab5 	bl	800fb1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80105b2:	2300      	movs	r3, #0
 80105b4:	e062      	b.n	801067c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80105b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d106      	bne.n	80105ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80105bc:	f107 0310 	add.w	r3, r7, #16
 80105c0:	4618      	mov	r0, r3
 80105c2:	f001 f91b 	bl	80117fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80105c6:	2301      	movs	r3, #1
 80105c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80105ca:	f7ff faa7 	bl	800fb1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80105ce:	f000 fe79 	bl	80112c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80105d2:	f7ff fa71 	bl	800fab8 <vPortEnterCritical>
 80105d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80105dc:	b25b      	sxtb	r3, r3
 80105de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80105e2:	d103      	bne.n	80105ec <xQueueReceive+0x128>
 80105e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105e6:	2200      	movs	r2, #0
 80105e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80105ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80105f2:	b25b      	sxtb	r3, r3
 80105f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80105f8:	d103      	bne.n	8010602 <xQueueReceive+0x13e>
 80105fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105fc:	2200      	movs	r2, #0
 80105fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010602:	f7ff fa8b 	bl	800fb1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010606:	1d3a      	adds	r2, r7, #4
 8010608:	f107 0310 	add.w	r3, r7, #16
 801060c:	4611      	mov	r1, r2
 801060e:	4618      	mov	r0, r3
 8010610:	f001 f90a 	bl	8011828 <xTaskCheckForTimeOut>
 8010614:	4603      	mov	r3, r0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d123      	bne.n	8010662 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801061a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801061c:	f000 fae4 	bl	8010be8 <prvIsQueueEmpty>
 8010620:	4603      	mov	r3, r0
 8010622:	2b00      	cmp	r3, #0
 8010624:	d017      	beq.n	8010656 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010628:	3324      	adds	r3, #36	@ 0x24
 801062a:	687a      	ldr	r2, [r7, #4]
 801062c:	4611      	mov	r1, r2
 801062e:	4618      	mov	r0, r3
 8010630:	f001 f82e 	bl	8011690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010636:	f000 fa85 	bl	8010b44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801063a:	f000 fe51 	bl	80112e0 <xTaskResumeAll>
 801063e:	4603      	mov	r3, r0
 8010640:	2b00      	cmp	r3, #0
 8010642:	d189      	bne.n	8010558 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010644:	4b0f      	ldr	r3, [pc, #60]	@ (8010684 <xQueueReceive+0x1c0>)
 8010646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801064a:	601a      	str	r2, [r3, #0]
 801064c:	f3bf 8f4f 	dsb	sy
 8010650:	f3bf 8f6f 	isb	sy
 8010654:	e780      	b.n	8010558 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010658:	f000 fa74 	bl	8010b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801065c:	f000 fe40 	bl	80112e0 <xTaskResumeAll>
 8010660:	e77a      	b.n	8010558 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010664:	f000 fa6e 	bl	8010b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010668:	f000 fe3a 	bl	80112e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801066c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801066e:	f000 fabb 	bl	8010be8 <prvIsQueueEmpty>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	f43f af6f 	beq.w	8010558 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801067a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801067c:	4618      	mov	r0, r3
 801067e:	3730      	adds	r7, #48	@ 0x30
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	e000ed04 	.word	0xe000ed04

08010688 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b08e      	sub	sp, #56	@ 0x38
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010692:	2300      	movs	r3, #0
 8010694:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801069a:	2300      	movs	r3, #0
 801069c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801069e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d10b      	bne.n	80106bc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80106a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106a8:	f383 8811 	msr	BASEPRI, r3
 80106ac:	f3bf 8f6f 	isb	sy
 80106b0:	f3bf 8f4f 	dsb	sy
 80106b4:	623b      	str	r3, [r7, #32]
}
 80106b6:	bf00      	nop
 80106b8:	bf00      	nop
 80106ba:	e7fd      	b.n	80106b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80106bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d00b      	beq.n	80106dc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80106c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106c8:	f383 8811 	msr	BASEPRI, r3
 80106cc:	f3bf 8f6f 	isb	sy
 80106d0:	f3bf 8f4f 	dsb	sy
 80106d4:	61fb      	str	r3, [r7, #28]
}
 80106d6:	bf00      	nop
 80106d8:	bf00      	nop
 80106da:	e7fd      	b.n	80106d8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80106dc:	f001 f9ea 	bl	8011ab4 <xTaskGetSchedulerState>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d102      	bne.n	80106ec <xQueueSemaphoreTake+0x64>
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d101      	bne.n	80106f0 <xQueueSemaphoreTake+0x68>
 80106ec:	2301      	movs	r3, #1
 80106ee:	e000      	b.n	80106f2 <xQueueSemaphoreTake+0x6a>
 80106f0:	2300      	movs	r3, #0
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d10b      	bne.n	801070e <xQueueSemaphoreTake+0x86>
	__asm volatile
 80106f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106fa:	f383 8811 	msr	BASEPRI, r3
 80106fe:	f3bf 8f6f 	isb	sy
 8010702:	f3bf 8f4f 	dsb	sy
 8010706:	61bb      	str	r3, [r7, #24]
}
 8010708:	bf00      	nop
 801070a:	bf00      	nop
 801070c:	e7fd      	b.n	801070a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801070e:	f7ff f9d3 	bl	800fab8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010716:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801071a:	2b00      	cmp	r3, #0
 801071c:	d024      	beq.n	8010768 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801071e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010720:	1e5a      	subs	r2, r3, #1
 8010722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010724:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d104      	bne.n	8010738 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801072e:	f001 fb3b 	bl	8011da8 <pvTaskIncrementMutexHeldCount>
 8010732:	4602      	mov	r2, r0
 8010734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010736:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801073a:	691b      	ldr	r3, [r3, #16]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d00f      	beq.n	8010760 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010742:	3310      	adds	r3, #16
 8010744:	4618      	mov	r0, r3
 8010746:	f000 fff5 	bl	8011734 <xTaskRemoveFromEventList>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d007      	beq.n	8010760 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010750:	4b54      	ldr	r3, [pc, #336]	@ (80108a4 <xQueueSemaphoreTake+0x21c>)
 8010752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010756:	601a      	str	r2, [r3, #0]
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010760:	f7ff f9dc 	bl	800fb1c <vPortExitCritical>
				return pdPASS;
 8010764:	2301      	movs	r3, #1
 8010766:	e098      	b.n	801089a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d112      	bne.n	8010794 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801076e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010770:	2b00      	cmp	r3, #0
 8010772:	d00b      	beq.n	801078c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8010774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010778:	f383 8811 	msr	BASEPRI, r3
 801077c:	f3bf 8f6f 	isb	sy
 8010780:	f3bf 8f4f 	dsb	sy
 8010784:	617b      	str	r3, [r7, #20]
}
 8010786:	bf00      	nop
 8010788:	bf00      	nop
 801078a:	e7fd      	b.n	8010788 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801078c:	f7ff f9c6 	bl	800fb1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010790:	2300      	movs	r3, #0
 8010792:	e082      	b.n	801089a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010796:	2b00      	cmp	r3, #0
 8010798:	d106      	bne.n	80107a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801079a:	f107 030c 	add.w	r3, r7, #12
 801079e:	4618      	mov	r0, r3
 80107a0:	f001 f82c 	bl	80117fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80107a4:	2301      	movs	r3, #1
 80107a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80107a8:	f7ff f9b8 	bl	800fb1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80107ac:	f000 fd8a 	bl	80112c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80107b0:	f7ff f982 	bl	800fab8 <vPortEnterCritical>
 80107b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80107ba:	b25b      	sxtb	r3, r3
 80107bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80107c0:	d103      	bne.n	80107ca <xQueueSemaphoreTake+0x142>
 80107c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c4:	2200      	movs	r2, #0
 80107c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80107ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80107d0:	b25b      	sxtb	r3, r3
 80107d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80107d6:	d103      	bne.n	80107e0 <xQueueSemaphoreTake+0x158>
 80107d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107da:	2200      	movs	r2, #0
 80107dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80107e0:	f7ff f99c 	bl	800fb1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80107e4:	463a      	mov	r2, r7
 80107e6:	f107 030c 	add.w	r3, r7, #12
 80107ea:	4611      	mov	r1, r2
 80107ec:	4618      	mov	r0, r3
 80107ee:	f001 f81b 	bl	8011828 <xTaskCheckForTimeOut>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d132      	bne.n	801085e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80107f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80107fa:	f000 f9f5 	bl	8010be8 <prvIsQueueEmpty>
 80107fe:	4603      	mov	r3, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d026      	beq.n	8010852 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d109      	bne.n	8010820 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801080c:	f7ff f954 	bl	800fab8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010812:	689b      	ldr	r3, [r3, #8]
 8010814:	4618      	mov	r0, r3
 8010816:	f001 f96b 	bl	8011af0 <xTaskPriorityInherit>
 801081a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801081c:	f7ff f97e 	bl	800fb1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010822:	3324      	adds	r3, #36	@ 0x24
 8010824:	683a      	ldr	r2, [r7, #0]
 8010826:	4611      	mov	r1, r2
 8010828:	4618      	mov	r0, r3
 801082a:	f000 ff31 	bl	8011690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801082e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010830:	f000 f988 	bl	8010b44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010834:	f000 fd54 	bl	80112e0 <xTaskResumeAll>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	f47f af67 	bne.w	801070e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010840:	4b18      	ldr	r3, [pc, #96]	@ (80108a4 <xQueueSemaphoreTake+0x21c>)
 8010842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010846:	601a      	str	r2, [r3, #0]
 8010848:	f3bf 8f4f 	dsb	sy
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	e75d      	b.n	801070e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010852:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010854:	f000 f976 	bl	8010b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010858:	f000 fd42 	bl	80112e0 <xTaskResumeAll>
 801085c:	e757      	b.n	801070e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801085e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010860:	f000 f970 	bl	8010b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010864:	f000 fd3c 	bl	80112e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010868:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801086a:	f000 f9bd 	bl	8010be8 <prvIsQueueEmpty>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	f43f af4c 	beq.w	801070e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010878:	2b00      	cmp	r3, #0
 801087a:	d00d      	beq.n	8010898 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801087c:	f7ff f91c 	bl	800fab8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010880:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010882:	f000 f8b7 	bl	80109f4 <prvGetDisinheritPriorityAfterTimeout>
 8010886:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801088a:	689b      	ldr	r3, [r3, #8]
 801088c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801088e:	4618      	mov	r0, r3
 8010890:	f001 fa06 	bl	8011ca0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010894:	f7ff f942 	bl	800fb1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010898:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801089a:	4618      	mov	r0, r3
 801089c:	3738      	adds	r7, #56	@ 0x38
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop
 80108a4:	e000ed04 	.word	0xe000ed04

080108a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b08e      	sub	sp, #56	@ 0x38
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	60f8      	str	r0, [r7, #12]
 80108b0:	60b9      	str	r1, [r7, #8]
 80108b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80108b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d10b      	bne.n	80108d6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80108be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108c2:	f383 8811 	msr	BASEPRI, r3
 80108c6:	f3bf 8f6f 	isb	sy
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	623b      	str	r3, [r7, #32]
}
 80108d0:	bf00      	nop
 80108d2:	bf00      	nop
 80108d4:	e7fd      	b.n	80108d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d103      	bne.n	80108e4 <xQueueReceiveFromISR+0x3c>
 80108dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d101      	bne.n	80108e8 <xQueueReceiveFromISR+0x40>
 80108e4:	2301      	movs	r3, #1
 80108e6:	e000      	b.n	80108ea <xQueueReceiveFromISR+0x42>
 80108e8:	2300      	movs	r3, #0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d10b      	bne.n	8010906 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80108ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108f2:	f383 8811 	msr	BASEPRI, r3
 80108f6:	f3bf 8f6f 	isb	sy
 80108fa:	f3bf 8f4f 	dsb	sy
 80108fe:	61fb      	str	r3, [r7, #28]
}
 8010900:	bf00      	nop
 8010902:	bf00      	nop
 8010904:	e7fd      	b.n	8010902 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010906:	f7ff f9b7 	bl	800fc78 <vPortValidateInterruptPriority>
	__asm volatile
 801090a:	f3ef 8211 	mrs	r2, BASEPRI
 801090e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010912:	f383 8811 	msr	BASEPRI, r3
 8010916:	f3bf 8f6f 	isb	sy
 801091a:	f3bf 8f4f 	dsb	sy
 801091e:	61ba      	str	r2, [r7, #24]
 8010920:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010922:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010924:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801092a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801092c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801092e:	2b00      	cmp	r3, #0
 8010930:	d02f      	beq.n	8010992 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010934:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801093c:	68b9      	ldr	r1, [r7, #8]
 801093e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010940:	f000 f8da 	bl	8010af8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010946:	1e5a      	subs	r2, r3, #1
 8010948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801094a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801094c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010950:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010954:	d112      	bne.n	801097c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010958:	691b      	ldr	r3, [r3, #16]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d016      	beq.n	801098c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801095e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010960:	3310      	adds	r3, #16
 8010962:	4618      	mov	r0, r3
 8010964:	f000 fee6 	bl	8011734 <xTaskRemoveFromEventList>
 8010968:	4603      	mov	r3, r0
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00e      	beq.n	801098c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00b      	beq.n	801098c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2201      	movs	r2, #1
 8010978:	601a      	str	r2, [r3, #0]
 801097a:	e007      	b.n	801098c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801097c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010980:	3301      	adds	r3, #1
 8010982:	b2db      	uxtb	r3, r3
 8010984:	b25a      	sxtb	r2, r3
 8010986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801098c:	2301      	movs	r3, #1
 801098e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010990:	e001      	b.n	8010996 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8010992:	2300      	movs	r3, #0
 8010994:	637b      	str	r3, [r7, #52]	@ 0x34
 8010996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010998:	613b      	str	r3, [r7, #16]
	__asm volatile
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	f383 8811 	msr	BASEPRI, r3
}
 80109a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80109a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3738      	adds	r7, #56	@ 0x38
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d10b      	bne.n	80109d6 <vQueueDelete+0x2a>
	__asm volatile
 80109be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109c2:	f383 8811 	msr	BASEPRI, r3
 80109c6:	f3bf 8f6f 	isb	sy
 80109ca:	f3bf 8f4f 	dsb	sy
 80109ce:	60bb      	str	r3, [r7, #8]
}
 80109d0:	bf00      	nop
 80109d2:	bf00      	nop
 80109d4:	e7fd      	b.n	80109d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f000 f95e 	bl	8010c98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d102      	bne.n	80109ec <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80109e6:	68f8      	ldr	r0, [r7, #12]
 80109e8:	f7fe fd62 	bl	800f4b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80109ec:	bf00      	nop
 80109ee:	3710      	adds	r7, #16
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80109f4:	b480      	push	{r7}
 80109f6:	b085      	sub	sp, #20
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d006      	beq.n	8010a12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8010a0e:	60fb      	str	r3, [r7, #12]
 8010a10:	e001      	b.n	8010a16 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010a12:	2300      	movs	r3, #0
 8010a14:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010a16:	68fb      	ldr	r3, [r7, #12]
	}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3714      	adds	r7, #20
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b086      	sub	sp, #24
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	60f8      	str	r0, [r7, #12]
 8010a2c:	60b9      	str	r1, [r7, #8]
 8010a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010a30:	2300      	movs	r3, #0
 8010a32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d10d      	bne.n	8010a5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d14d      	bne.n	8010ae6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	689b      	ldr	r3, [r3, #8]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f001 f8b6 	bl	8011bc0 <xTaskPriorityDisinherit>
 8010a54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	609a      	str	r2, [r3, #8]
 8010a5c:	e043      	b.n	8010ae6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d119      	bne.n	8010a98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	6858      	ldr	r0, [r3, #4]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	68b9      	ldr	r1, [r7, #8]
 8010a70:	f002 fca0 	bl	80133b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	685a      	ldr	r2, [r3, #4]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a7c:	441a      	add	r2, r3
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	685a      	ldr	r2, [r3, #4]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	689b      	ldr	r3, [r3, #8]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d32b      	bcc.n	8010ae6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681a      	ldr	r2, [r3, #0]
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	605a      	str	r2, [r3, #4]
 8010a96:	e026      	b.n	8010ae6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	68d8      	ldr	r0, [r3, #12]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	68b9      	ldr	r1, [r7, #8]
 8010aa4:	f002 fc86 	bl	80133b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	68da      	ldr	r2, [r3, #12]
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ab0:	425b      	negs	r3, r3
 8010ab2:	441a      	add	r2, r3
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	68da      	ldr	r2, [r3, #12]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d207      	bcs.n	8010ad4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	689a      	ldr	r2, [r3, #8]
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010acc:	425b      	negs	r3, r3
 8010ace:	441a      	add	r2, r3
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2b02      	cmp	r3, #2
 8010ad8:	d105      	bne.n	8010ae6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d002      	beq.n	8010ae6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	3b01      	subs	r3, #1
 8010ae4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	1c5a      	adds	r2, r3, #1
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010aee:	697b      	ldr	r3, [r7, #20]
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3718      	adds	r7, #24
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d018      	beq.n	8010b3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	68da      	ldr	r2, [r3, #12]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b12:	441a      	add	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	68da      	ldr	r2, [r3, #12]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	689b      	ldr	r3, [r3, #8]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d303      	bcc.n	8010b2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	68d9      	ldr	r1, [r3, #12]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b34:	461a      	mov	r2, r3
 8010b36:	6838      	ldr	r0, [r7, #0]
 8010b38:	f002 fc3c 	bl	80133b4 <memcpy>
	}
}
 8010b3c:	bf00      	nop
 8010b3e:	3708      	adds	r7, #8
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010b4c:	f7fe ffb4 	bl	800fab8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010b56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010b58:	e011      	b.n	8010b7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d012      	beq.n	8010b88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	3324      	adds	r3, #36	@ 0x24
 8010b66:	4618      	mov	r0, r3
 8010b68:	f000 fde4 	bl	8011734 <xTaskRemoveFromEventList>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d001      	beq.n	8010b76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010b72:	f000 febd 	bl	80118f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010b76:	7bfb      	ldrb	r3, [r7, #15]
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	dce9      	bgt.n	8010b5a <prvUnlockQueue+0x16>
 8010b86:	e000      	b.n	8010b8a <prvUnlockQueue+0x46>
					break;
 8010b88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	22ff      	movs	r2, #255	@ 0xff
 8010b8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010b92:	f7fe ffc3 	bl	800fb1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010b96:	f7fe ff8f 	bl	800fab8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010ba0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ba2:	e011      	b.n	8010bc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	691b      	ldr	r3, [r3, #16]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d012      	beq.n	8010bd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	3310      	adds	r3, #16
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f000 fdbf 	bl	8011734 <xTaskRemoveFromEventList>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d001      	beq.n	8010bc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010bbc:	f000 fe98 	bl	80118f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010bc0:	7bbb      	ldrb	r3, [r7, #14]
 8010bc2:	3b01      	subs	r3, #1
 8010bc4:	b2db      	uxtb	r3, r3
 8010bc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	dce9      	bgt.n	8010ba4 <prvUnlockQueue+0x60>
 8010bd0:	e000      	b.n	8010bd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010bd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	22ff      	movs	r2, #255	@ 0xff
 8010bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010bdc:	f7fe ff9e 	bl	800fb1c <vPortExitCritical>
}
 8010be0:	bf00      	nop
 8010be2:	3710      	adds	r7, #16
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010bf0:	f7fe ff62 	bl	800fab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d102      	bne.n	8010c02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	60fb      	str	r3, [r7, #12]
 8010c00:	e001      	b.n	8010c06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010c02:	2300      	movs	r3, #0
 8010c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c06:	f7fe ff89 	bl	800fb1c <vPortExitCritical>

	return xReturn;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3710      	adds	r7, #16
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c1c:	f7fe ff4c 	bl	800fab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d102      	bne.n	8010c32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	60fb      	str	r3, [r7, #12]
 8010c30:	e001      	b.n	8010c36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010c32:	2300      	movs	r3, #0
 8010c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c36:	f7fe ff71 	bl	800fb1c <vPortExitCritical>

	return xReturn;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3710      	adds	r7, #16
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}

08010c44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010c44:	b480      	push	{r7}
 8010c46:	b085      	sub	sp, #20
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c4e:	2300      	movs	r3, #0
 8010c50:	60fb      	str	r3, [r7, #12]
 8010c52:	e014      	b.n	8010c7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010c54:	4a0f      	ldr	r2, [pc, #60]	@ (8010c94 <vQueueAddToRegistry+0x50>)
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d10b      	bne.n	8010c78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010c60:	490c      	ldr	r1, [pc, #48]	@ (8010c94 <vQueueAddToRegistry+0x50>)
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	683a      	ldr	r2, [r7, #0]
 8010c66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8010c94 <vQueueAddToRegistry+0x50>)
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	00db      	lsls	r3, r3, #3
 8010c70:	4413      	add	r3, r2
 8010c72:	687a      	ldr	r2, [r7, #4]
 8010c74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010c76:	e006      	b.n	8010c86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	60fb      	str	r3, [r7, #12]
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	2b07      	cmp	r3, #7
 8010c82:	d9e7      	bls.n	8010c54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010c84:	bf00      	nop
 8010c86:	bf00      	nop
 8010c88:	3714      	adds	r7, #20
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop
 8010c94:	2400465c 	.word	0x2400465c

08010c98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010c98:	b480      	push	{r7}
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	60fb      	str	r3, [r7, #12]
 8010ca4:	e016      	b.n	8010cd4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010ca6:	4a10      	ldr	r2, [pc, #64]	@ (8010ce8 <vQueueUnregisterQueue+0x50>)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	00db      	lsls	r3, r3, #3
 8010cac:	4413      	add	r3, r2
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d10b      	bne.n	8010cce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8010ce8 <vQueueUnregisterQueue+0x50>)
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	2100      	movs	r1, #0
 8010cbc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010cc0:	4a09      	ldr	r2, [pc, #36]	@ (8010ce8 <vQueueUnregisterQueue+0x50>)
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	00db      	lsls	r3, r3, #3
 8010cc6:	4413      	add	r3, r2
 8010cc8:	2200      	movs	r2, #0
 8010cca:	605a      	str	r2, [r3, #4]
				break;
 8010ccc:	e006      	b.n	8010cdc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	3301      	adds	r3, #1
 8010cd2:	60fb      	str	r3, [r7, #12]
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2b07      	cmp	r3, #7
 8010cd8:	d9e5      	bls.n	8010ca6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010cda:	bf00      	nop
 8010cdc:	bf00      	nop
 8010cde:	3714      	adds	r7, #20
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr
 8010ce8:	2400465c 	.word	0x2400465c

08010cec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b086      	sub	sp, #24
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	60b9      	str	r1, [r7, #8]
 8010cf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010cfc:	f7fe fedc 	bl	800fab8 <vPortEnterCritical>
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010d06:	b25b      	sxtb	r3, r3
 8010d08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d0c:	d103      	bne.n	8010d16 <vQueueWaitForMessageRestricted+0x2a>
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	2200      	movs	r2, #0
 8010d12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010d1c:	b25b      	sxtb	r3, r3
 8010d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d22:	d103      	bne.n	8010d2c <vQueueWaitForMessageRestricted+0x40>
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	2200      	movs	r2, #0
 8010d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010d2c:	f7fe fef6 	bl	800fb1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d106      	bne.n	8010d46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	3324      	adds	r3, #36	@ 0x24
 8010d3c:	687a      	ldr	r2, [r7, #4]
 8010d3e:	68b9      	ldr	r1, [r7, #8]
 8010d40:	4618      	mov	r0, r3
 8010d42:	f000 fccb 	bl	80116dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010d46:	6978      	ldr	r0, [r7, #20]
 8010d48:	f7ff fefc 	bl	8010b44 <prvUnlockQueue>
	}
 8010d4c:	bf00      	nop
 8010d4e:	3718      	adds	r7, #24
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b08e      	sub	sp, #56	@ 0x38
 8010d58:	af04      	add	r7, sp, #16
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	607a      	str	r2, [r7, #4]
 8010d60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d10b      	bne.n	8010d80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d6c:	f383 8811 	msr	BASEPRI, r3
 8010d70:	f3bf 8f6f 	isb	sy
 8010d74:	f3bf 8f4f 	dsb	sy
 8010d78:	623b      	str	r3, [r7, #32]
}
 8010d7a:	bf00      	nop
 8010d7c:	bf00      	nop
 8010d7e:	e7fd      	b.n	8010d7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d10b      	bne.n	8010d9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8010d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d8a:	f383 8811 	msr	BASEPRI, r3
 8010d8e:	f3bf 8f6f 	isb	sy
 8010d92:	f3bf 8f4f 	dsb	sy
 8010d96:	61fb      	str	r3, [r7, #28]
}
 8010d98:	bf00      	nop
 8010d9a:	bf00      	nop
 8010d9c:	e7fd      	b.n	8010d9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010d9e:	235c      	movs	r3, #92	@ 0x5c
 8010da0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	2b5c      	cmp	r3, #92	@ 0x5c
 8010da6:	d00b      	beq.n	8010dc0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dac:	f383 8811 	msr	BASEPRI, r3
 8010db0:	f3bf 8f6f 	isb	sy
 8010db4:	f3bf 8f4f 	dsb	sy
 8010db8:	61bb      	str	r3, [r7, #24]
}
 8010dba:	bf00      	nop
 8010dbc:	bf00      	nop
 8010dbe:	e7fd      	b.n	8010dbc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010dc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d01e      	beq.n	8010e06 <xTaskCreateStatic+0xb2>
 8010dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d01b      	beq.n	8010e06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010dd6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dda:	2202      	movs	r2, #2
 8010ddc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010de0:	2300      	movs	r3, #0
 8010de2:	9303      	str	r3, [sp, #12]
 8010de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de6:	9302      	str	r3, [sp, #8]
 8010de8:	f107 0314 	add.w	r3, r7, #20
 8010dec:	9301      	str	r3, [sp, #4]
 8010dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010df0:	9300      	str	r3, [sp, #0]
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	687a      	ldr	r2, [r7, #4]
 8010df6:	68b9      	ldr	r1, [r7, #8]
 8010df8:	68f8      	ldr	r0, [r7, #12]
 8010dfa:	f000 f850 	bl	8010e9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010dfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010e00:	f000 f8de 	bl	8010fc0 <prvAddNewTaskToReadyList>
 8010e04:	e001      	b.n	8010e0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010e06:	2300      	movs	r3, #0
 8010e08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010e0a:	697b      	ldr	r3, [r7, #20]
	}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3728      	adds	r7, #40	@ 0x28
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b08c      	sub	sp, #48	@ 0x30
 8010e18:	af04      	add	r7, sp, #16
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	603b      	str	r3, [r7, #0]
 8010e20:	4613      	mov	r3, r2
 8010e22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010e24:	88fb      	ldrh	r3, [r7, #6]
 8010e26:	009b      	lsls	r3, r3, #2
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7fe fa73 	bl	800f314 <pvPortMalloc>
 8010e2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d00e      	beq.n	8010e54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010e36:	205c      	movs	r0, #92	@ 0x5c
 8010e38:	f7fe fa6c 	bl	800f314 <pvPortMalloc>
 8010e3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010e3e:	69fb      	ldr	r3, [r7, #28]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d003      	beq.n	8010e4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010e44:	69fb      	ldr	r3, [r7, #28]
 8010e46:	697a      	ldr	r2, [r7, #20]
 8010e48:	631a      	str	r2, [r3, #48]	@ 0x30
 8010e4a:	e005      	b.n	8010e58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010e4c:	6978      	ldr	r0, [r7, #20]
 8010e4e:	f7fe fb2f 	bl	800f4b0 <vPortFree>
 8010e52:	e001      	b.n	8010e58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010e54:	2300      	movs	r3, #0
 8010e56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d017      	beq.n	8010e8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	2200      	movs	r2, #0
 8010e62:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010e66:	88fa      	ldrh	r2, [r7, #6]
 8010e68:	2300      	movs	r3, #0
 8010e6a:	9303      	str	r3, [sp, #12]
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	9302      	str	r3, [sp, #8]
 8010e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e72:	9301      	str	r3, [sp, #4]
 8010e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e76:	9300      	str	r3, [sp, #0]
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	68b9      	ldr	r1, [r7, #8]
 8010e7c:	68f8      	ldr	r0, [r7, #12]
 8010e7e:	f000 f80e 	bl	8010e9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e82:	69f8      	ldr	r0, [r7, #28]
 8010e84:	f000 f89c 	bl	8010fc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	61bb      	str	r3, [r7, #24]
 8010e8c:	e002      	b.n	8010e94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010e8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010e92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010e94:	69bb      	ldr	r3, [r7, #24]
	}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3720      	adds	r7, #32
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}

08010e9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010e9e:	b580      	push	{r7, lr}
 8010ea0:	b088      	sub	sp, #32
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	60f8      	str	r0, [r7, #12]
 8010ea6:	60b9      	str	r1, [r7, #8]
 8010ea8:	607a      	str	r2, [r7, #4]
 8010eaa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	21a5      	movs	r1, #165	@ 0xa5
 8010eb8:	f002 fa48 	bl	801334c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010ec0:	6879      	ldr	r1, [r7, #4]
 8010ec2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010ec6:	440b      	add	r3, r1
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	4413      	add	r3, r2
 8010ecc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	f023 0307 	bic.w	r3, r3, #7
 8010ed4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010ed6:	69bb      	ldr	r3, [r7, #24]
 8010ed8:	f003 0307 	and.w	r3, r3, #7
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d00b      	beq.n	8010ef8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ee4:	f383 8811 	msr	BASEPRI, r3
 8010ee8:	f3bf 8f6f 	isb	sy
 8010eec:	f3bf 8f4f 	dsb	sy
 8010ef0:	617b      	str	r3, [r7, #20]
}
 8010ef2:	bf00      	nop
 8010ef4:	bf00      	nop
 8010ef6:	e7fd      	b.n	8010ef4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d01f      	beq.n	8010f3e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010efe:	2300      	movs	r3, #0
 8010f00:	61fb      	str	r3, [r7, #28]
 8010f02:	e012      	b.n	8010f2a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	4413      	add	r3, r2
 8010f0a:	7819      	ldrb	r1, [r3, #0]
 8010f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	4413      	add	r3, r2
 8010f12:	3334      	adds	r3, #52	@ 0x34
 8010f14:	460a      	mov	r2, r1
 8010f16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010f18:	68ba      	ldr	r2, [r7, #8]
 8010f1a:	69fb      	ldr	r3, [r7, #28]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d006      	beq.n	8010f32 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	3301      	adds	r3, #1
 8010f28:	61fb      	str	r3, [r7, #28]
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	2b0f      	cmp	r3, #15
 8010f2e:	d9e9      	bls.n	8010f04 <prvInitialiseNewTask+0x66>
 8010f30:	e000      	b.n	8010f34 <prvInitialiseNewTask+0x96>
			{
				break;
 8010f32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f36:	2200      	movs	r2, #0
 8010f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010f3c:	e003      	b.n	8010f46 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f40:	2200      	movs	r2, #0
 8010f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f48:	2b37      	cmp	r3, #55	@ 0x37
 8010f4a:	d901      	bls.n	8010f50 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010f4c:	2337      	movs	r3, #55	@ 0x37
 8010f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f54:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f5a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f5e:	2200      	movs	r2, #0
 8010f60:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f64:	3304      	adds	r3, #4
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fe fbe2 	bl	800f730 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f6e:	3318      	adds	r3, #24
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7fe fbdd 	bl	800f730 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f8a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f8e:	2200      	movs	r2, #0
 8010f90:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f94:	2200      	movs	r2, #0
 8010f96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010f9a:	683a      	ldr	r2, [r7, #0]
 8010f9c:	68f9      	ldr	r1, [r7, #12]
 8010f9e:	69b8      	ldr	r0, [r7, #24]
 8010fa0:	f7fe fc5a 	bl	800f858 <pxPortInitialiseStack>
 8010fa4:	4602      	mov	r2, r0
 8010fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fa8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d002      	beq.n	8010fb6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010fb6:	bf00      	nop
 8010fb8:	3720      	adds	r7, #32
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}
	...

08010fc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010fc8:	f7fe fd76 	bl	800fab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8011084 <prvAddNewTaskToReadyList+0xc4>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8011084 <prvAddNewTaskToReadyList+0xc4>)
 8010fd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8011088 <prvAddNewTaskToReadyList+0xc8>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d109      	bne.n	8010ff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010fde:	4a2a      	ldr	r2, [pc, #168]	@ (8011088 <prvAddNewTaskToReadyList+0xc8>)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010fe4:	4b27      	ldr	r3, [pc, #156]	@ (8011084 <prvAddNewTaskToReadyList+0xc4>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d110      	bne.n	801100e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010fec:	f000 fca4 	bl	8011938 <prvInitialiseTaskLists>
 8010ff0:	e00d      	b.n	801100e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ff2:	4b26      	ldr	r3, [pc, #152]	@ (801108c <prvAddNewTaskToReadyList+0xcc>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d109      	bne.n	801100e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010ffa:	4b23      	ldr	r3, [pc, #140]	@ (8011088 <prvAddNewTaskToReadyList+0xc8>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011004:	429a      	cmp	r2, r3
 8011006:	d802      	bhi.n	801100e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011008:	4a1f      	ldr	r2, [pc, #124]	@ (8011088 <prvAddNewTaskToReadyList+0xc8>)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801100e:	4b20      	ldr	r3, [pc, #128]	@ (8011090 <prvAddNewTaskToReadyList+0xd0>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	3301      	adds	r3, #1
 8011014:	4a1e      	ldr	r2, [pc, #120]	@ (8011090 <prvAddNewTaskToReadyList+0xd0>)
 8011016:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011018:	4b1d      	ldr	r3, [pc, #116]	@ (8011090 <prvAddNewTaskToReadyList+0xd0>)
 801101a:	681a      	ldr	r2, [r3, #0]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011024:	4b1b      	ldr	r3, [pc, #108]	@ (8011094 <prvAddNewTaskToReadyList+0xd4>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	429a      	cmp	r2, r3
 801102a:	d903      	bls.n	8011034 <prvAddNewTaskToReadyList+0x74>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011030:	4a18      	ldr	r2, [pc, #96]	@ (8011094 <prvAddNewTaskToReadyList+0xd4>)
 8011032:	6013      	str	r3, [r2, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011038:	4613      	mov	r3, r2
 801103a:	009b      	lsls	r3, r3, #2
 801103c:	4413      	add	r3, r2
 801103e:	009b      	lsls	r3, r3, #2
 8011040:	4a15      	ldr	r2, [pc, #84]	@ (8011098 <prvAddNewTaskToReadyList+0xd8>)
 8011042:	441a      	add	r2, r3
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	3304      	adds	r3, #4
 8011048:	4619      	mov	r1, r3
 801104a:	4610      	mov	r0, r2
 801104c:	f7fe fb7d 	bl	800f74a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011050:	f7fe fd64 	bl	800fb1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011054:	4b0d      	ldr	r3, [pc, #52]	@ (801108c <prvAddNewTaskToReadyList+0xcc>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d00e      	beq.n	801107a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801105c:	4b0a      	ldr	r3, [pc, #40]	@ (8011088 <prvAddNewTaskToReadyList+0xc8>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011066:	429a      	cmp	r2, r3
 8011068:	d207      	bcs.n	801107a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801106a:	4b0c      	ldr	r3, [pc, #48]	@ (801109c <prvAddNewTaskToReadyList+0xdc>)
 801106c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011070:	601a      	str	r2, [r3, #0]
 8011072:	f3bf 8f4f 	dsb	sy
 8011076:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801107a:	bf00      	nop
 801107c:	3708      	adds	r7, #8
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	24004b70 	.word	0x24004b70
 8011088:	2400469c 	.word	0x2400469c
 801108c:	24004b7c 	.word	0x24004b7c
 8011090:	24004b8c 	.word	0x24004b8c
 8011094:	24004b78 	.word	0x24004b78
 8011098:	240046a0 	.word	0x240046a0
 801109c:	e000ed04 	.word	0xe000ed04

080110a0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80110a8:	f7fe fd06 	bl	800fab8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d102      	bne.n	80110b8 <vTaskDelete+0x18>
 80110b2:	4b2d      	ldr	r3, [pc, #180]	@ (8011168 <vTaskDelete+0xc8>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	e000      	b.n	80110ba <vTaskDelete+0x1a>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	3304      	adds	r3, #4
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7fe fb9f 	bl	800f804 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d004      	beq.n	80110d8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	3318      	adds	r3, #24
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7fe fb96 	bl	800f804 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80110d8:	4b24      	ldr	r3, [pc, #144]	@ (801116c <vTaskDelete+0xcc>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	3301      	adds	r3, #1
 80110de:	4a23      	ldr	r2, [pc, #140]	@ (801116c <vTaskDelete+0xcc>)
 80110e0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80110e2:	4b21      	ldr	r3, [pc, #132]	@ (8011168 <vTaskDelete+0xc8>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d10b      	bne.n	8011104 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	3304      	adds	r3, #4
 80110f0:	4619      	mov	r1, r3
 80110f2:	481f      	ldr	r0, [pc, #124]	@ (8011170 <vTaskDelete+0xd0>)
 80110f4:	f7fe fb29 	bl	800f74a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80110f8:	4b1e      	ldr	r3, [pc, #120]	@ (8011174 <vTaskDelete+0xd4>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	3301      	adds	r3, #1
 80110fe:	4a1d      	ldr	r2, [pc, #116]	@ (8011174 <vTaskDelete+0xd4>)
 8011100:	6013      	str	r3, [r2, #0]
 8011102:	e009      	b.n	8011118 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011104:	4b1c      	ldr	r3, [pc, #112]	@ (8011178 <vTaskDelete+0xd8>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	3b01      	subs	r3, #1
 801110a:	4a1b      	ldr	r2, [pc, #108]	@ (8011178 <vTaskDelete+0xd8>)
 801110c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801110e:	68f8      	ldr	r0, [r7, #12]
 8011110:	f000 fc80 	bl	8011a14 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011114:	f000 fcae 	bl	8011a74 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8011118:	f7fe fd00 	bl	800fb1c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801111c:	4b17      	ldr	r3, [pc, #92]	@ (801117c <vTaskDelete+0xdc>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d01c      	beq.n	801115e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8011124:	4b10      	ldr	r3, [pc, #64]	@ (8011168 <vTaskDelete+0xc8>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	68fa      	ldr	r2, [r7, #12]
 801112a:	429a      	cmp	r2, r3
 801112c:	d117      	bne.n	801115e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801112e:	4b14      	ldr	r3, [pc, #80]	@ (8011180 <vTaskDelete+0xe0>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d00b      	beq.n	801114e <vTaskDelete+0xae>
	__asm volatile
 8011136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801113a:	f383 8811 	msr	BASEPRI, r3
 801113e:	f3bf 8f6f 	isb	sy
 8011142:	f3bf 8f4f 	dsb	sy
 8011146:	60bb      	str	r3, [r7, #8]
}
 8011148:	bf00      	nop
 801114a:	bf00      	nop
 801114c:	e7fd      	b.n	801114a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801114e:	4b0d      	ldr	r3, [pc, #52]	@ (8011184 <vTaskDelete+0xe4>)
 8011150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011154:	601a      	str	r2, [r3, #0]
 8011156:	f3bf 8f4f 	dsb	sy
 801115a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801115e:	bf00      	nop
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	2400469c 	.word	0x2400469c
 801116c:	24004b8c 	.word	0x24004b8c
 8011170:	24004b44 	.word	0x24004b44
 8011174:	24004b58 	.word	0x24004b58
 8011178:	24004b70 	.word	0x24004b70
 801117c:	24004b7c 	.word	0x24004b7c
 8011180:	24004b98 	.word	0x24004b98
 8011184:	e000ed04 	.word	0xe000ed04

08011188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011188:	b580      	push	{r7, lr}
 801118a:	b084      	sub	sp, #16
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011190:	2300      	movs	r3, #0
 8011192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d018      	beq.n	80111cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801119a:	4b14      	ldr	r3, [pc, #80]	@ (80111ec <vTaskDelay+0x64>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d00b      	beq.n	80111ba <vTaskDelay+0x32>
	__asm volatile
 80111a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111a6:	f383 8811 	msr	BASEPRI, r3
 80111aa:	f3bf 8f6f 	isb	sy
 80111ae:	f3bf 8f4f 	dsb	sy
 80111b2:	60bb      	str	r3, [r7, #8]
}
 80111b4:	bf00      	nop
 80111b6:	bf00      	nop
 80111b8:	e7fd      	b.n	80111b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80111ba:	f000 f883 	bl	80112c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80111be:	2100      	movs	r1, #0
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f000 fe05 	bl	8011dd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80111c6:	f000 f88b 	bl	80112e0 <xTaskResumeAll>
 80111ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d107      	bne.n	80111e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80111d2:	4b07      	ldr	r3, [pc, #28]	@ (80111f0 <vTaskDelay+0x68>)
 80111d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111d8:	601a      	str	r2, [r3, #0]
 80111da:	f3bf 8f4f 	dsb	sy
 80111de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80111e2:	bf00      	nop
 80111e4:	3710      	adds	r7, #16
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	24004b98 	.word	0x24004b98
 80111f0:	e000ed04 	.word	0xe000ed04

080111f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b08a      	sub	sp, #40	@ 0x28
 80111f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80111fa:	2300      	movs	r3, #0
 80111fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80111fe:	2300      	movs	r3, #0
 8011200:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011202:	463a      	mov	r2, r7
 8011204:	1d39      	adds	r1, r7, #4
 8011206:	f107 0308 	add.w	r3, r7, #8
 801120a:	4618      	mov	r0, r3
 801120c:	f7fe f84e 	bl	800f2ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011210:	6839      	ldr	r1, [r7, #0]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	68ba      	ldr	r2, [r7, #8]
 8011216:	9202      	str	r2, [sp, #8]
 8011218:	9301      	str	r3, [sp, #4]
 801121a:	2300      	movs	r3, #0
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	2300      	movs	r3, #0
 8011220:	460a      	mov	r2, r1
 8011222:	4922      	ldr	r1, [pc, #136]	@ (80112ac <vTaskStartScheduler+0xb8>)
 8011224:	4822      	ldr	r0, [pc, #136]	@ (80112b0 <vTaskStartScheduler+0xbc>)
 8011226:	f7ff fd95 	bl	8010d54 <xTaskCreateStatic>
 801122a:	4603      	mov	r3, r0
 801122c:	4a21      	ldr	r2, [pc, #132]	@ (80112b4 <vTaskStartScheduler+0xc0>)
 801122e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011230:	4b20      	ldr	r3, [pc, #128]	@ (80112b4 <vTaskStartScheduler+0xc0>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d002      	beq.n	801123e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011238:	2301      	movs	r3, #1
 801123a:	617b      	str	r3, [r7, #20]
 801123c:	e001      	b.n	8011242 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801123e:	2300      	movs	r3, #0
 8011240:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	2b01      	cmp	r3, #1
 8011246:	d102      	bne.n	801124e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011248:	f000 fe16 	bl	8011e78 <xTimerCreateTimerTask>
 801124c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	2b01      	cmp	r3, #1
 8011252:	d116      	bne.n	8011282 <vTaskStartScheduler+0x8e>
	__asm volatile
 8011254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011258:	f383 8811 	msr	BASEPRI, r3
 801125c:	f3bf 8f6f 	isb	sy
 8011260:	f3bf 8f4f 	dsb	sy
 8011264:	613b      	str	r3, [r7, #16]
}
 8011266:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011268:	4b13      	ldr	r3, [pc, #76]	@ (80112b8 <vTaskStartScheduler+0xc4>)
 801126a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801126e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011270:	4b12      	ldr	r3, [pc, #72]	@ (80112bc <vTaskStartScheduler+0xc8>)
 8011272:	2201      	movs	r2, #1
 8011274:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011276:	4b12      	ldr	r3, [pc, #72]	@ (80112c0 <vTaskStartScheduler+0xcc>)
 8011278:	2200      	movs	r2, #0
 801127a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801127c:	f7fe fb78 	bl	800f970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011280:	e00f      	b.n	80112a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011288:	d10b      	bne.n	80112a2 <vTaskStartScheduler+0xae>
	__asm volatile
 801128a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801128e:	f383 8811 	msr	BASEPRI, r3
 8011292:	f3bf 8f6f 	isb	sy
 8011296:	f3bf 8f4f 	dsb	sy
 801129a:	60fb      	str	r3, [r7, #12]
}
 801129c:	bf00      	nop
 801129e:	bf00      	nop
 80112a0:	e7fd      	b.n	801129e <vTaskStartScheduler+0xaa>
}
 80112a2:	bf00      	nop
 80112a4:	3718      	adds	r7, #24
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	08013cdc 	.word	0x08013cdc
 80112b0:	08011909 	.word	0x08011909
 80112b4:	24004b94 	.word	0x24004b94
 80112b8:	24004b90 	.word	0x24004b90
 80112bc:	24004b7c 	.word	0x24004b7c
 80112c0:	24004b74 	.word	0x24004b74

080112c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80112c4:	b480      	push	{r7}
 80112c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80112c8:	4b04      	ldr	r3, [pc, #16]	@ (80112dc <vTaskSuspendAll+0x18>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	3301      	adds	r3, #1
 80112ce:	4a03      	ldr	r2, [pc, #12]	@ (80112dc <vTaskSuspendAll+0x18>)
 80112d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80112d2:	bf00      	nop
 80112d4:	46bd      	mov	sp, r7
 80112d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112da:	4770      	bx	lr
 80112dc:	24004b98 	.word	0x24004b98

080112e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80112e6:	2300      	movs	r3, #0
 80112e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80112ea:	2300      	movs	r3, #0
 80112ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80112ee:	4b42      	ldr	r3, [pc, #264]	@ (80113f8 <xTaskResumeAll+0x118>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d10b      	bne.n	801130e <xTaskResumeAll+0x2e>
	__asm volatile
 80112f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112fa:	f383 8811 	msr	BASEPRI, r3
 80112fe:	f3bf 8f6f 	isb	sy
 8011302:	f3bf 8f4f 	dsb	sy
 8011306:	603b      	str	r3, [r7, #0]
}
 8011308:	bf00      	nop
 801130a:	bf00      	nop
 801130c:	e7fd      	b.n	801130a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801130e:	f7fe fbd3 	bl	800fab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011312:	4b39      	ldr	r3, [pc, #228]	@ (80113f8 <xTaskResumeAll+0x118>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	3b01      	subs	r3, #1
 8011318:	4a37      	ldr	r2, [pc, #220]	@ (80113f8 <xTaskResumeAll+0x118>)
 801131a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801131c:	4b36      	ldr	r3, [pc, #216]	@ (80113f8 <xTaskResumeAll+0x118>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d162      	bne.n	80113ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011324:	4b35      	ldr	r3, [pc, #212]	@ (80113fc <xTaskResumeAll+0x11c>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d05e      	beq.n	80113ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801132c:	e02f      	b.n	801138e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801132e:	4b34      	ldr	r3, [pc, #208]	@ (8011400 <xTaskResumeAll+0x120>)
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	3318      	adds	r3, #24
 801133a:	4618      	mov	r0, r3
 801133c:	f7fe fa62 	bl	800f804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	3304      	adds	r3, #4
 8011344:	4618      	mov	r0, r3
 8011346:	f7fe fa5d 	bl	800f804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801134e:	4b2d      	ldr	r3, [pc, #180]	@ (8011404 <xTaskResumeAll+0x124>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	429a      	cmp	r2, r3
 8011354:	d903      	bls.n	801135e <xTaskResumeAll+0x7e>
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801135a:	4a2a      	ldr	r2, [pc, #168]	@ (8011404 <xTaskResumeAll+0x124>)
 801135c:	6013      	str	r3, [r2, #0]
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011362:	4613      	mov	r3, r2
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	4413      	add	r3, r2
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	4a27      	ldr	r2, [pc, #156]	@ (8011408 <xTaskResumeAll+0x128>)
 801136c:	441a      	add	r2, r3
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	3304      	adds	r3, #4
 8011372:	4619      	mov	r1, r3
 8011374:	4610      	mov	r0, r2
 8011376:	f7fe f9e8 	bl	800f74a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801137e:	4b23      	ldr	r3, [pc, #140]	@ (801140c <xTaskResumeAll+0x12c>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011384:	429a      	cmp	r2, r3
 8011386:	d302      	bcc.n	801138e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011388:	4b21      	ldr	r3, [pc, #132]	@ (8011410 <xTaskResumeAll+0x130>)
 801138a:	2201      	movs	r2, #1
 801138c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801138e:	4b1c      	ldr	r3, [pc, #112]	@ (8011400 <xTaskResumeAll+0x120>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d1cb      	bne.n	801132e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d001      	beq.n	80113a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801139c:	f000 fb6a 	bl	8011a74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80113a0:	4b1c      	ldr	r3, [pc, #112]	@ (8011414 <xTaskResumeAll+0x134>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d010      	beq.n	80113ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80113ac:	f000 f858 	bl	8011460 <xTaskIncrementTick>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d002      	beq.n	80113bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80113b6:	4b16      	ldr	r3, [pc, #88]	@ (8011410 <xTaskResumeAll+0x130>)
 80113b8:	2201      	movs	r2, #1
 80113ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	3b01      	subs	r3, #1
 80113c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d1f1      	bne.n	80113ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80113c8:	4b12      	ldr	r3, [pc, #72]	@ (8011414 <xTaskResumeAll+0x134>)
 80113ca:	2200      	movs	r2, #0
 80113cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80113ce:	4b10      	ldr	r3, [pc, #64]	@ (8011410 <xTaskResumeAll+0x130>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d009      	beq.n	80113ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80113d6:	2301      	movs	r3, #1
 80113d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80113da:	4b0f      	ldr	r3, [pc, #60]	@ (8011418 <xTaskResumeAll+0x138>)
 80113dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113e0:	601a      	str	r2, [r3, #0]
 80113e2:	f3bf 8f4f 	dsb	sy
 80113e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80113ea:	f7fe fb97 	bl	800fb1c <vPortExitCritical>

	return xAlreadyYielded;
 80113ee:	68bb      	ldr	r3, [r7, #8]
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3710      	adds	r7, #16
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	24004b98 	.word	0x24004b98
 80113fc:	24004b70 	.word	0x24004b70
 8011400:	24004b30 	.word	0x24004b30
 8011404:	24004b78 	.word	0x24004b78
 8011408:	240046a0 	.word	0x240046a0
 801140c:	2400469c 	.word	0x2400469c
 8011410:	24004b84 	.word	0x24004b84
 8011414:	24004b80 	.word	0x24004b80
 8011418:	e000ed04 	.word	0xe000ed04

0801141c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011422:	4b05      	ldr	r3, [pc, #20]	@ (8011438 <xTaskGetTickCount+0x1c>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011428:	687b      	ldr	r3, [r7, #4]
}
 801142a:	4618      	mov	r0, r3
 801142c:	370c      	adds	r7, #12
 801142e:	46bd      	mov	sp, r7
 8011430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011434:	4770      	bx	lr
 8011436:	bf00      	nop
 8011438:	24004b74 	.word	0x24004b74

0801143c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011442:	f7fe fc19 	bl	800fc78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011446:	2300      	movs	r3, #0
 8011448:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801144a:	4b04      	ldr	r3, [pc, #16]	@ (801145c <xTaskGetTickCountFromISR+0x20>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011450:	683b      	ldr	r3, [r7, #0]
}
 8011452:	4618      	mov	r0, r3
 8011454:	3708      	adds	r7, #8
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	24004b74 	.word	0x24004b74

08011460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b086      	sub	sp, #24
 8011464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011466:	2300      	movs	r3, #0
 8011468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801146a:	4b4f      	ldr	r3, [pc, #316]	@ (80115a8 <xTaskIncrementTick+0x148>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	f040 8090 	bne.w	8011594 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011474:	4b4d      	ldr	r3, [pc, #308]	@ (80115ac <xTaskIncrementTick+0x14c>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	3301      	adds	r3, #1
 801147a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801147c:	4a4b      	ldr	r2, [pc, #300]	@ (80115ac <xTaskIncrementTick+0x14c>)
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011482:	693b      	ldr	r3, [r7, #16]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d121      	bne.n	80114cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011488:	4b49      	ldr	r3, [pc, #292]	@ (80115b0 <xTaskIncrementTick+0x150>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d00b      	beq.n	80114aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8011492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011496:	f383 8811 	msr	BASEPRI, r3
 801149a:	f3bf 8f6f 	isb	sy
 801149e:	f3bf 8f4f 	dsb	sy
 80114a2:	603b      	str	r3, [r7, #0]
}
 80114a4:	bf00      	nop
 80114a6:	bf00      	nop
 80114a8:	e7fd      	b.n	80114a6 <xTaskIncrementTick+0x46>
 80114aa:	4b41      	ldr	r3, [pc, #260]	@ (80115b0 <xTaskIncrementTick+0x150>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	60fb      	str	r3, [r7, #12]
 80114b0:	4b40      	ldr	r3, [pc, #256]	@ (80115b4 <xTaskIncrementTick+0x154>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	4a3e      	ldr	r2, [pc, #248]	@ (80115b0 <xTaskIncrementTick+0x150>)
 80114b6:	6013      	str	r3, [r2, #0]
 80114b8:	4a3e      	ldr	r2, [pc, #248]	@ (80115b4 <xTaskIncrementTick+0x154>)
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	6013      	str	r3, [r2, #0]
 80114be:	4b3e      	ldr	r3, [pc, #248]	@ (80115b8 <xTaskIncrementTick+0x158>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	3301      	adds	r3, #1
 80114c4:	4a3c      	ldr	r2, [pc, #240]	@ (80115b8 <xTaskIncrementTick+0x158>)
 80114c6:	6013      	str	r3, [r2, #0]
 80114c8:	f000 fad4 	bl	8011a74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80114cc:	4b3b      	ldr	r3, [pc, #236]	@ (80115bc <xTaskIncrementTick+0x15c>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	693a      	ldr	r2, [r7, #16]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d349      	bcc.n	801156a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80114d6:	4b36      	ldr	r3, [pc, #216]	@ (80115b0 <xTaskIncrementTick+0x150>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d104      	bne.n	80114ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114e0:	4b36      	ldr	r3, [pc, #216]	@ (80115bc <xTaskIncrementTick+0x15c>)
 80114e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80114e6:	601a      	str	r2, [r3, #0]
					break;
 80114e8:	e03f      	b.n	801156a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114ea:	4b31      	ldr	r3, [pc, #196]	@ (80115b0 <xTaskIncrementTick+0x150>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	68db      	ldr	r3, [r3, #12]
 80114f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80114fa:	693a      	ldr	r2, [r7, #16]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d203      	bcs.n	801150a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011502:	4a2e      	ldr	r2, [pc, #184]	@ (80115bc <xTaskIncrementTick+0x15c>)
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011508:	e02f      	b.n	801156a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	3304      	adds	r3, #4
 801150e:	4618      	mov	r0, r3
 8011510:	f7fe f978 	bl	800f804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011518:	2b00      	cmp	r3, #0
 801151a:	d004      	beq.n	8011526 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	3318      	adds	r3, #24
 8011520:	4618      	mov	r0, r3
 8011522:	f7fe f96f 	bl	800f804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801152a:	4b25      	ldr	r3, [pc, #148]	@ (80115c0 <xTaskIncrementTick+0x160>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	429a      	cmp	r2, r3
 8011530:	d903      	bls.n	801153a <xTaskIncrementTick+0xda>
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011536:	4a22      	ldr	r2, [pc, #136]	@ (80115c0 <xTaskIncrementTick+0x160>)
 8011538:	6013      	str	r3, [r2, #0]
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801153e:	4613      	mov	r3, r2
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	4413      	add	r3, r2
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	4a1f      	ldr	r2, [pc, #124]	@ (80115c4 <xTaskIncrementTick+0x164>)
 8011548:	441a      	add	r2, r3
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	3304      	adds	r3, #4
 801154e:	4619      	mov	r1, r3
 8011550:	4610      	mov	r0, r2
 8011552:	f7fe f8fa 	bl	800f74a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801155a:	4b1b      	ldr	r3, [pc, #108]	@ (80115c8 <xTaskIncrementTick+0x168>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011560:	429a      	cmp	r2, r3
 8011562:	d3b8      	bcc.n	80114d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011564:	2301      	movs	r3, #1
 8011566:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011568:	e7b5      	b.n	80114d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801156a:	4b17      	ldr	r3, [pc, #92]	@ (80115c8 <xTaskIncrementTick+0x168>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011570:	4914      	ldr	r1, [pc, #80]	@ (80115c4 <xTaskIncrementTick+0x164>)
 8011572:	4613      	mov	r3, r2
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	4413      	add	r3, r2
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	440b      	add	r3, r1
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	2b01      	cmp	r3, #1
 8011580:	d901      	bls.n	8011586 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8011582:	2301      	movs	r3, #1
 8011584:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011586:	4b11      	ldr	r3, [pc, #68]	@ (80115cc <xTaskIncrementTick+0x16c>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d007      	beq.n	801159e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801158e:	2301      	movs	r3, #1
 8011590:	617b      	str	r3, [r7, #20]
 8011592:	e004      	b.n	801159e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011594:	4b0e      	ldr	r3, [pc, #56]	@ (80115d0 <xTaskIncrementTick+0x170>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	3301      	adds	r3, #1
 801159a:	4a0d      	ldr	r2, [pc, #52]	@ (80115d0 <xTaskIncrementTick+0x170>)
 801159c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801159e:	697b      	ldr	r3, [r7, #20]
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3718      	adds	r7, #24
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	24004b98 	.word	0x24004b98
 80115ac:	24004b74 	.word	0x24004b74
 80115b0:	24004b28 	.word	0x24004b28
 80115b4:	24004b2c 	.word	0x24004b2c
 80115b8:	24004b88 	.word	0x24004b88
 80115bc:	24004b90 	.word	0x24004b90
 80115c0:	24004b78 	.word	0x24004b78
 80115c4:	240046a0 	.word	0x240046a0
 80115c8:	2400469c 	.word	0x2400469c
 80115cc:	24004b84 	.word	0x24004b84
 80115d0:	24004b80 	.word	0x24004b80

080115d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80115da:	4b28      	ldr	r3, [pc, #160]	@ (801167c <vTaskSwitchContext+0xa8>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d003      	beq.n	80115ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80115e2:	4b27      	ldr	r3, [pc, #156]	@ (8011680 <vTaskSwitchContext+0xac>)
 80115e4:	2201      	movs	r2, #1
 80115e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80115e8:	e042      	b.n	8011670 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80115ea:	4b25      	ldr	r3, [pc, #148]	@ (8011680 <vTaskSwitchContext+0xac>)
 80115ec:	2200      	movs	r2, #0
 80115ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115f0:	4b24      	ldr	r3, [pc, #144]	@ (8011684 <vTaskSwitchContext+0xb0>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	60fb      	str	r3, [r7, #12]
 80115f6:	e011      	b.n	801161c <vTaskSwitchContext+0x48>
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d10b      	bne.n	8011616 <vTaskSwitchContext+0x42>
	__asm volatile
 80115fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011602:	f383 8811 	msr	BASEPRI, r3
 8011606:	f3bf 8f6f 	isb	sy
 801160a:	f3bf 8f4f 	dsb	sy
 801160e:	607b      	str	r3, [r7, #4]
}
 8011610:	bf00      	nop
 8011612:	bf00      	nop
 8011614:	e7fd      	b.n	8011612 <vTaskSwitchContext+0x3e>
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	3b01      	subs	r3, #1
 801161a:	60fb      	str	r3, [r7, #12]
 801161c:	491a      	ldr	r1, [pc, #104]	@ (8011688 <vTaskSwitchContext+0xb4>)
 801161e:	68fa      	ldr	r2, [r7, #12]
 8011620:	4613      	mov	r3, r2
 8011622:	009b      	lsls	r3, r3, #2
 8011624:	4413      	add	r3, r2
 8011626:	009b      	lsls	r3, r3, #2
 8011628:	440b      	add	r3, r1
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d0e3      	beq.n	80115f8 <vTaskSwitchContext+0x24>
 8011630:	68fa      	ldr	r2, [r7, #12]
 8011632:	4613      	mov	r3, r2
 8011634:	009b      	lsls	r3, r3, #2
 8011636:	4413      	add	r3, r2
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	4a13      	ldr	r2, [pc, #76]	@ (8011688 <vTaskSwitchContext+0xb4>)
 801163c:	4413      	add	r3, r2
 801163e:	60bb      	str	r3, [r7, #8]
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	685b      	ldr	r3, [r3, #4]
 8011644:	685a      	ldr	r2, [r3, #4]
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	605a      	str	r2, [r3, #4]
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	685a      	ldr	r2, [r3, #4]
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	3308      	adds	r3, #8
 8011652:	429a      	cmp	r2, r3
 8011654:	d104      	bne.n	8011660 <vTaskSwitchContext+0x8c>
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	605a      	str	r2, [r3, #4]
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	68db      	ldr	r3, [r3, #12]
 8011666:	4a09      	ldr	r2, [pc, #36]	@ (801168c <vTaskSwitchContext+0xb8>)
 8011668:	6013      	str	r3, [r2, #0]
 801166a:	4a06      	ldr	r2, [pc, #24]	@ (8011684 <vTaskSwitchContext+0xb0>)
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	6013      	str	r3, [r2, #0]
}
 8011670:	bf00      	nop
 8011672:	3714      	adds	r7, #20
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr
 801167c:	24004b98 	.word	0x24004b98
 8011680:	24004b84 	.word	0x24004b84
 8011684:	24004b78 	.word	0x24004b78
 8011688:	240046a0 	.word	0x240046a0
 801168c:	2400469c 	.word	0x2400469c

08011690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d10b      	bne.n	80116b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80116a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116a4:	f383 8811 	msr	BASEPRI, r3
 80116a8:	f3bf 8f6f 	isb	sy
 80116ac:	f3bf 8f4f 	dsb	sy
 80116b0:	60fb      	str	r3, [r7, #12]
}
 80116b2:	bf00      	nop
 80116b4:	bf00      	nop
 80116b6:	e7fd      	b.n	80116b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80116b8:	4b07      	ldr	r3, [pc, #28]	@ (80116d8 <vTaskPlaceOnEventList+0x48>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	3318      	adds	r3, #24
 80116be:	4619      	mov	r1, r3
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f7fe f866 	bl	800f792 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80116c6:	2101      	movs	r1, #1
 80116c8:	6838      	ldr	r0, [r7, #0]
 80116ca:	f000 fb81 	bl	8011dd0 <prvAddCurrentTaskToDelayedList>
}
 80116ce:	bf00      	nop
 80116d0:	3710      	adds	r7, #16
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	2400469c 	.word	0x2400469c

080116dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b086      	sub	sp, #24
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	60f8      	str	r0, [r7, #12]
 80116e4:	60b9      	str	r1, [r7, #8]
 80116e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d10b      	bne.n	8011706 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80116ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116f2:	f383 8811 	msr	BASEPRI, r3
 80116f6:	f3bf 8f6f 	isb	sy
 80116fa:	f3bf 8f4f 	dsb	sy
 80116fe:	617b      	str	r3, [r7, #20]
}
 8011700:	bf00      	nop
 8011702:	bf00      	nop
 8011704:	e7fd      	b.n	8011702 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011706:	4b0a      	ldr	r3, [pc, #40]	@ (8011730 <vTaskPlaceOnEventListRestricted+0x54>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	3318      	adds	r3, #24
 801170c:	4619      	mov	r1, r3
 801170e:	68f8      	ldr	r0, [r7, #12]
 8011710:	f7fe f81b 	bl	800f74a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d002      	beq.n	8011720 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801171a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801171e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011720:	6879      	ldr	r1, [r7, #4]
 8011722:	68b8      	ldr	r0, [r7, #8]
 8011724:	f000 fb54 	bl	8011dd0 <prvAddCurrentTaskToDelayedList>
	}
 8011728:	bf00      	nop
 801172a:	3718      	adds	r7, #24
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}
 8011730:	2400469c 	.word	0x2400469c

08011734 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b086      	sub	sp, #24
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	68db      	ldr	r3, [r3, #12]
 8011740:	68db      	ldr	r3, [r3, #12]
 8011742:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d10b      	bne.n	8011762 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801174a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801174e:	f383 8811 	msr	BASEPRI, r3
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	f3bf 8f4f 	dsb	sy
 801175a:	60fb      	str	r3, [r7, #12]
}
 801175c:	bf00      	nop
 801175e:	bf00      	nop
 8011760:	e7fd      	b.n	801175e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	3318      	adds	r3, #24
 8011766:	4618      	mov	r0, r3
 8011768:	f7fe f84c 	bl	800f804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801176c:	4b1d      	ldr	r3, [pc, #116]	@ (80117e4 <xTaskRemoveFromEventList+0xb0>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d11d      	bne.n	80117b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	3304      	adds	r3, #4
 8011778:	4618      	mov	r0, r3
 801177a:	f7fe f843 	bl	800f804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011782:	4b19      	ldr	r3, [pc, #100]	@ (80117e8 <xTaskRemoveFromEventList+0xb4>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	429a      	cmp	r2, r3
 8011788:	d903      	bls.n	8011792 <xTaskRemoveFromEventList+0x5e>
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801178e:	4a16      	ldr	r2, [pc, #88]	@ (80117e8 <xTaskRemoveFromEventList+0xb4>)
 8011790:	6013      	str	r3, [r2, #0]
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011796:	4613      	mov	r3, r2
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	4413      	add	r3, r2
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	4a13      	ldr	r2, [pc, #76]	@ (80117ec <xTaskRemoveFromEventList+0xb8>)
 80117a0:	441a      	add	r2, r3
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	3304      	adds	r3, #4
 80117a6:	4619      	mov	r1, r3
 80117a8:	4610      	mov	r0, r2
 80117aa:	f7fd ffce 	bl	800f74a <vListInsertEnd>
 80117ae:	e005      	b.n	80117bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	3318      	adds	r3, #24
 80117b4:	4619      	mov	r1, r3
 80117b6:	480e      	ldr	r0, [pc, #56]	@ (80117f0 <xTaskRemoveFromEventList+0xbc>)
 80117b8:	f7fd ffc7 	bl	800f74a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117c0:	4b0c      	ldr	r3, [pc, #48]	@ (80117f4 <xTaskRemoveFromEventList+0xc0>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d905      	bls.n	80117d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80117ca:	2301      	movs	r3, #1
 80117cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80117ce:	4b0a      	ldr	r3, [pc, #40]	@ (80117f8 <xTaskRemoveFromEventList+0xc4>)
 80117d0:	2201      	movs	r2, #1
 80117d2:	601a      	str	r2, [r3, #0]
 80117d4:	e001      	b.n	80117da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80117d6:	2300      	movs	r3, #0
 80117d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80117da:	697b      	ldr	r3, [r7, #20]
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3718      	adds	r7, #24
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	24004b98 	.word	0x24004b98
 80117e8:	24004b78 	.word	0x24004b78
 80117ec:	240046a0 	.word	0x240046a0
 80117f0:	24004b30 	.word	0x24004b30
 80117f4:	2400469c 	.word	0x2400469c
 80117f8:	24004b84 	.word	0x24004b84

080117fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80117fc:	b480      	push	{r7}
 80117fe:	b083      	sub	sp, #12
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011804:	4b06      	ldr	r3, [pc, #24]	@ (8011820 <vTaskInternalSetTimeOutState+0x24>)
 8011806:	681a      	ldr	r2, [r3, #0]
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801180c:	4b05      	ldr	r3, [pc, #20]	@ (8011824 <vTaskInternalSetTimeOutState+0x28>)
 801180e:	681a      	ldr	r2, [r3, #0]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	605a      	str	r2, [r3, #4]
}
 8011814:	bf00      	nop
 8011816:	370c      	adds	r7, #12
 8011818:	46bd      	mov	sp, r7
 801181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181e:	4770      	bx	lr
 8011820:	24004b88 	.word	0x24004b88
 8011824:	24004b74 	.word	0x24004b74

08011828 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b088      	sub	sp, #32
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d10b      	bne.n	8011850 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801183c:	f383 8811 	msr	BASEPRI, r3
 8011840:	f3bf 8f6f 	isb	sy
 8011844:	f3bf 8f4f 	dsb	sy
 8011848:	613b      	str	r3, [r7, #16]
}
 801184a:	bf00      	nop
 801184c:	bf00      	nop
 801184e:	e7fd      	b.n	801184c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d10b      	bne.n	801186e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801185a:	f383 8811 	msr	BASEPRI, r3
 801185e:	f3bf 8f6f 	isb	sy
 8011862:	f3bf 8f4f 	dsb	sy
 8011866:	60fb      	str	r3, [r7, #12]
}
 8011868:	bf00      	nop
 801186a:	bf00      	nop
 801186c:	e7fd      	b.n	801186a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801186e:	f7fe f923 	bl	800fab8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011872:	4b1d      	ldr	r3, [pc, #116]	@ (80118e8 <xTaskCheckForTimeOut+0xc0>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	69ba      	ldr	r2, [r7, #24]
 801187e:	1ad3      	subs	r3, r2, r3
 8011880:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801188a:	d102      	bne.n	8011892 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801188c:	2300      	movs	r3, #0
 801188e:	61fb      	str	r3, [r7, #28]
 8011890:	e023      	b.n	80118da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681a      	ldr	r2, [r3, #0]
 8011896:	4b15      	ldr	r3, [pc, #84]	@ (80118ec <xTaskCheckForTimeOut+0xc4>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	429a      	cmp	r2, r3
 801189c:	d007      	beq.n	80118ae <xTaskCheckForTimeOut+0x86>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	69ba      	ldr	r2, [r7, #24]
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d302      	bcc.n	80118ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80118a8:	2301      	movs	r3, #1
 80118aa:	61fb      	str	r3, [r7, #28]
 80118ac:	e015      	b.n	80118da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	697a      	ldr	r2, [r7, #20]
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d20b      	bcs.n	80118d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	1ad2      	subs	r2, r2, r3
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f7ff ff99 	bl	80117fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80118ca:	2300      	movs	r3, #0
 80118cc:	61fb      	str	r3, [r7, #28]
 80118ce:	e004      	b.n	80118da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	2200      	movs	r2, #0
 80118d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80118d6:	2301      	movs	r3, #1
 80118d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80118da:	f7fe f91f 	bl	800fb1c <vPortExitCritical>

	return xReturn;
 80118de:	69fb      	ldr	r3, [r7, #28]
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3720      	adds	r7, #32
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}
 80118e8:	24004b74 	.word	0x24004b74
 80118ec:	24004b88 	.word	0x24004b88

080118f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80118f0:	b480      	push	{r7}
 80118f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80118f4:	4b03      	ldr	r3, [pc, #12]	@ (8011904 <vTaskMissedYield+0x14>)
 80118f6:	2201      	movs	r2, #1
 80118f8:	601a      	str	r2, [r3, #0]
}
 80118fa:	bf00      	nop
 80118fc:	46bd      	mov	sp, r7
 80118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011902:	4770      	bx	lr
 8011904:	24004b84 	.word	0x24004b84

08011908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011910:	f000 f852 	bl	80119b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011914:	4b06      	ldr	r3, [pc, #24]	@ (8011930 <prvIdleTask+0x28>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2b01      	cmp	r3, #1
 801191a:	d9f9      	bls.n	8011910 <prvIdleTask+0x8>
			{
				taskYIELD();
 801191c:	4b05      	ldr	r3, [pc, #20]	@ (8011934 <prvIdleTask+0x2c>)
 801191e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011922:	601a      	str	r2, [r3, #0]
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801192c:	e7f0      	b.n	8011910 <prvIdleTask+0x8>
 801192e:	bf00      	nop
 8011930:	240046a0 	.word	0x240046a0
 8011934:	e000ed04 	.word	0xe000ed04

08011938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801193e:	2300      	movs	r3, #0
 8011940:	607b      	str	r3, [r7, #4]
 8011942:	e00c      	b.n	801195e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011944:	687a      	ldr	r2, [r7, #4]
 8011946:	4613      	mov	r3, r2
 8011948:	009b      	lsls	r3, r3, #2
 801194a:	4413      	add	r3, r2
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	4a12      	ldr	r2, [pc, #72]	@ (8011998 <prvInitialiseTaskLists+0x60>)
 8011950:	4413      	add	r3, r2
 8011952:	4618      	mov	r0, r3
 8011954:	f7fd fecc 	bl	800f6f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	3301      	adds	r3, #1
 801195c:	607b      	str	r3, [r7, #4]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2b37      	cmp	r3, #55	@ 0x37
 8011962:	d9ef      	bls.n	8011944 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011964:	480d      	ldr	r0, [pc, #52]	@ (801199c <prvInitialiseTaskLists+0x64>)
 8011966:	f7fd fec3 	bl	800f6f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801196a:	480d      	ldr	r0, [pc, #52]	@ (80119a0 <prvInitialiseTaskLists+0x68>)
 801196c:	f7fd fec0 	bl	800f6f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011970:	480c      	ldr	r0, [pc, #48]	@ (80119a4 <prvInitialiseTaskLists+0x6c>)
 8011972:	f7fd febd 	bl	800f6f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011976:	480c      	ldr	r0, [pc, #48]	@ (80119a8 <prvInitialiseTaskLists+0x70>)
 8011978:	f7fd feba 	bl	800f6f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801197c:	480b      	ldr	r0, [pc, #44]	@ (80119ac <prvInitialiseTaskLists+0x74>)
 801197e:	f7fd feb7 	bl	800f6f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011982:	4b0b      	ldr	r3, [pc, #44]	@ (80119b0 <prvInitialiseTaskLists+0x78>)
 8011984:	4a05      	ldr	r2, [pc, #20]	@ (801199c <prvInitialiseTaskLists+0x64>)
 8011986:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011988:	4b0a      	ldr	r3, [pc, #40]	@ (80119b4 <prvInitialiseTaskLists+0x7c>)
 801198a:	4a05      	ldr	r2, [pc, #20]	@ (80119a0 <prvInitialiseTaskLists+0x68>)
 801198c:	601a      	str	r2, [r3, #0]
}
 801198e:	bf00      	nop
 8011990:	3708      	adds	r7, #8
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	240046a0 	.word	0x240046a0
 801199c:	24004b00 	.word	0x24004b00
 80119a0:	24004b14 	.word	0x24004b14
 80119a4:	24004b30 	.word	0x24004b30
 80119a8:	24004b44 	.word	0x24004b44
 80119ac:	24004b5c 	.word	0x24004b5c
 80119b0:	24004b28 	.word	0x24004b28
 80119b4:	24004b2c 	.word	0x24004b2c

080119b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119be:	e019      	b.n	80119f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80119c0:	f7fe f87a 	bl	800fab8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119c4:	4b10      	ldr	r3, [pc, #64]	@ (8011a08 <prvCheckTasksWaitingTermination+0x50>)
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	3304      	adds	r3, #4
 80119d0:	4618      	mov	r0, r3
 80119d2:	f7fd ff17 	bl	800f804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80119d6:	4b0d      	ldr	r3, [pc, #52]	@ (8011a0c <prvCheckTasksWaitingTermination+0x54>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	3b01      	subs	r3, #1
 80119dc:	4a0b      	ldr	r2, [pc, #44]	@ (8011a0c <prvCheckTasksWaitingTermination+0x54>)
 80119de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80119e0:	4b0b      	ldr	r3, [pc, #44]	@ (8011a10 <prvCheckTasksWaitingTermination+0x58>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	3b01      	subs	r3, #1
 80119e6:	4a0a      	ldr	r2, [pc, #40]	@ (8011a10 <prvCheckTasksWaitingTermination+0x58>)
 80119e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80119ea:	f7fe f897 	bl	800fb1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 f810 	bl	8011a14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119f4:	4b06      	ldr	r3, [pc, #24]	@ (8011a10 <prvCheckTasksWaitingTermination+0x58>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d1e1      	bne.n	80119c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80119fc:	bf00      	nop
 80119fe:	bf00      	nop
 8011a00:	3708      	adds	r7, #8
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	24004b44 	.word	0x24004b44
 8011a0c:	24004b70 	.word	0x24004b70
 8011a10:	24004b58 	.word	0x24004b58

08011a14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d108      	bne.n	8011a38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7fd fd40 	bl	800f4b0 <vPortFree>
				vPortFree( pxTCB );
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f7fd fd3d 	bl	800f4b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011a36:	e019      	b.n	8011a6c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8011a3e:	2b01      	cmp	r3, #1
 8011a40:	d103      	bne.n	8011a4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7fd fd34 	bl	800f4b0 <vPortFree>
	}
 8011a48:	e010      	b.n	8011a6c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8011a50:	2b02      	cmp	r3, #2
 8011a52:	d00b      	beq.n	8011a6c <prvDeleteTCB+0x58>
	__asm volatile
 8011a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a58:	f383 8811 	msr	BASEPRI, r3
 8011a5c:	f3bf 8f6f 	isb	sy
 8011a60:	f3bf 8f4f 	dsb	sy
 8011a64:	60fb      	str	r3, [r7, #12]
}
 8011a66:	bf00      	nop
 8011a68:	bf00      	nop
 8011a6a:	e7fd      	b.n	8011a68 <prvDeleteTCB+0x54>
	}
 8011a6c:	bf00      	nop
 8011a6e:	3710      	adds	r7, #16
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011a74:	b480      	push	{r7}
 8011a76:	b083      	sub	sp, #12
 8011a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8011aac <prvResetNextTaskUnblockTime+0x38>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d104      	bne.n	8011a8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a84:	4b0a      	ldr	r3, [pc, #40]	@ (8011ab0 <prvResetNextTaskUnblockTime+0x3c>)
 8011a86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011a8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011a8c:	e008      	b.n	8011aa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a8e:	4b07      	ldr	r3, [pc, #28]	@ (8011aac <prvResetNextTaskUnblockTime+0x38>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	68db      	ldr	r3, [r3, #12]
 8011a94:	68db      	ldr	r3, [r3, #12]
 8011a96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	4a04      	ldr	r2, [pc, #16]	@ (8011ab0 <prvResetNextTaskUnblockTime+0x3c>)
 8011a9e:	6013      	str	r3, [r2, #0]
}
 8011aa0:	bf00      	nop
 8011aa2:	370c      	adds	r7, #12
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr
 8011aac:	24004b28 	.word	0x24004b28
 8011ab0:	24004b90 	.word	0x24004b90

08011ab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b083      	sub	sp, #12
 8011ab8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011aba:	4b0b      	ldr	r3, [pc, #44]	@ (8011ae8 <xTaskGetSchedulerState+0x34>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d102      	bne.n	8011ac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	607b      	str	r3, [r7, #4]
 8011ac6:	e008      	b.n	8011ada <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ac8:	4b08      	ldr	r3, [pc, #32]	@ (8011aec <xTaskGetSchedulerState+0x38>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d102      	bne.n	8011ad6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011ad0:	2302      	movs	r3, #2
 8011ad2:	607b      	str	r3, [r7, #4]
 8011ad4:	e001      	b.n	8011ada <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011ada:	687b      	ldr	r3, [r7, #4]
	}
 8011adc:	4618      	mov	r0, r3
 8011ade:	370c      	adds	r7, #12
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae6:	4770      	bx	lr
 8011ae8:	24004b7c 	.word	0x24004b7c
 8011aec:	24004b98 	.word	0x24004b98

08011af0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b084      	sub	sp, #16
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011afc:	2300      	movs	r3, #0
 8011afe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d051      	beq.n	8011baa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8011bb4 <xTaskPriorityInherit+0xc4>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d241      	bcs.n	8011b98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	699b      	ldr	r3, [r3, #24]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	db06      	blt.n	8011b2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b1c:	4b25      	ldr	r3, [pc, #148]	@ (8011bb4 <xTaskPriorityInherit+0xc4>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	6959      	ldr	r1, [r3, #20]
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b32:	4613      	mov	r3, r2
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	4413      	add	r3, r2
 8011b38:	009b      	lsls	r3, r3, #2
 8011b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8011bb8 <xTaskPriorityInherit+0xc8>)
 8011b3c:	4413      	add	r3, r2
 8011b3e:	4299      	cmp	r1, r3
 8011b40:	d122      	bne.n	8011b88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	3304      	adds	r3, #4
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7fd fe5c 	bl	800f804 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b4c:	4b19      	ldr	r3, [pc, #100]	@ (8011bb4 <xTaskPriorityInherit+0xc4>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b5a:	4b18      	ldr	r3, [pc, #96]	@ (8011bbc <xTaskPriorityInherit+0xcc>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d903      	bls.n	8011b6a <xTaskPriorityInherit+0x7a>
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b66:	4a15      	ldr	r2, [pc, #84]	@ (8011bbc <xTaskPriorityInherit+0xcc>)
 8011b68:	6013      	str	r3, [r2, #0]
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b6e:	4613      	mov	r3, r2
 8011b70:	009b      	lsls	r3, r3, #2
 8011b72:	4413      	add	r3, r2
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	4a10      	ldr	r2, [pc, #64]	@ (8011bb8 <xTaskPriorityInherit+0xc8>)
 8011b78:	441a      	add	r2, r3
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	3304      	adds	r3, #4
 8011b7e:	4619      	mov	r1, r3
 8011b80:	4610      	mov	r0, r2
 8011b82:	f7fd fde2 	bl	800f74a <vListInsertEnd>
 8011b86:	e004      	b.n	8011b92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b88:	4b0a      	ldr	r3, [pc, #40]	@ (8011bb4 <xTaskPriorityInherit+0xc4>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011b92:	2301      	movs	r3, #1
 8011b94:	60fb      	str	r3, [r7, #12]
 8011b96:	e008      	b.n	8011baa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011b9c:	4b05      	ldr	r3, [pc, #20]	@ (8011bb4 <xTaskPriorityInherit+0xc4>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d201      	bcs.n	8011baa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011baa:	68fb      	ldr	r3, [r7, #12]
	}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3710      	adds	r7, #16
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	2400469c 	.word	0x2400469c
 8011bb8:	240046a0 	.word	0x240046a0
 8011bbc:	24004b78 	.word	0x24004b78

08011bc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b086      	sub	sp, #24
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d058      	beq.n	8011c88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8011c94 <xTaskPriorityDisinherit+0xd4>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	693a      	ldr	r2, [r7, #16]
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d00b      	beq.n	8011bf8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011be4:	f383 8811 	msr	BASEPRI, r3
 8011be8:	f3bf 8f6f 	isb	sy
 8011bec:	f3bf 8f4f 	dsb	sy
 8011bf0:	60fb      	str	r3, [r7, #12]
}
 8011bf2:	bf00      	nop
 8011bf4:	bf00      	nop
 8011bf6:	e7fd      	b.n	8011bf4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d10b      	bne.n	8011c18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c04:	f383 8811 	msr	BASEPRI, r3
 8011c08:	f3bf 8f6f 	isb	sy
 8011c0c:	f3bf 8f4f 	dsb	sy
 8011c10:	60bb      	str	r3, [r7, #8]
}
 8011c12:	bf00      	nop
 8011c14:	bf00      	nop
 8011c16:	e7fd      	b.n	8011c14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c1c:	1e5a      	subs	r2, r3, #1
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d02c      	beq.n	8011c88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d128      	bne.n	8011c88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	3304      	adds	r3, #4
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7fd fde2 	bl	800f804 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c58:	4b0f      	ldr	r3, [pc, #60]	@ (8011c98 <xTaskPriorityDisinherit+0xd8>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d903      	bls.n	8011c68 <xTaskPriorityDisinherit+0xa8>
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c64:	4a0c      	ldr	r2, [pc, #48]	@ (8011c98 <xTaskPriorityDisinherit+0xd8>)
 8011c66:	6013      	str	r3, [r2, #0]
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	009b      	lsls	r3, r3, #2
 8011c70:	4413      	add	r3, r2
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	4a09      	ldr	r2, [pc, #36]	@ (8011c9c <xTaskPriorityDisinherit+0xdc>)
 8011c76:	441a      	add	r2, r3
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	3304      	adds	r3, #4
 8011c7c:	4619      	mov	r1, r3
 8011c7e:	4610      	mov	r0, r2
 8011c80:	f7fd fd63 	bl	800f74a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011c84:	2301      	movs	r3, #1
 8011c86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011c88:	697b      	ldr	r3, [r7, #20]
	}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3718      	adds	r7, #24
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	2400469c 	.word	0x2400469c
 8011c98:	24004b78 	.word	0x24004b78
 8011c9c:	240046a0 	.word	0x240046a0

08011ca0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b088      	sub	sp, #32
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011cae:	2301      	movs	r3, #1
 8011cb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d06c      	beq.n	8011d92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011cb8:	69bb      	ldr	r3, [r7, #24]
 8011cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d10b      	bne.n	8011cd8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cc4:	f383 8811 	msr	BASEPRI, r3
 8011cc8:	f3bf 8f6f 	isb	sy
 8011ccc:	f3bf 8f4f 	dsb	sy
 8011cd0:	60fb      	str	r3, [r7, #12]
}
 8011cd2:	bf00      	nop
 8011cd4:	bf00      	nop
 8011cd6:	e7fd      	b.n	8011cd4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011cd8:	69bb      	ldr	r3, [r7, #24]
 8011cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011cdc:	683a      	ldr	r2, [r7, #0]
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d902      	bls.n	8011ce8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	61fb      	str	r3, [r7, #28]
 8011ce6:	e002      	b.n	8011cee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011ce8:	69bb      	ldr	r3, [r7, #24]
 8011cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011cec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011cee:	69bb      	ldr	r3, [r7, #24]
 8011cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cf2:	69fa      	ldr	r2, [r7, #28]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d04c      	beq.n	8011d92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011cf8:	69bb      	ldr	r3, [r7, #24]
 8011cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011cfc:	697a      	ldr	r2, [r7, #20]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d147      	bne.n	8011d92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011d02:	4b26      	ldr	r3, [pc, #152]	@ (8011d9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	69ba      	ldr	r2, [r7, #24]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d10b      	bne.n	8011d24 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d10:	f383 8811 	msr	BASEPRI, r3
 8011d14:	f3bf 8f6f 	isb	sy
 8011d18:	f3bf 8f4f 	dsb	sy
 8011d1c:	60bb      	str	r3, [r7, #8]
}
 8011d1e:	bf00      	nop
 8011d20:	bf00      	nop
 8011d22:	e7fd      	b.n	8011d20 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011d24:	69bb      	ldr	r3, [r7, #24]
 8011d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	69fa      	ldr	r2, [r7, #28]
 8011d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d30:	69bb      	ldr	r3, [r7, #24]
 8011d32:	699b      	ldr	r3, [r3, #24]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	db04      	blt.n	8011d42 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d38:	69fb      	ldr	r3, [r7, #28]
 8011d3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011d3e:	69bb      	ldr	r3, [r7, #24]
 8011d40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011d42:	69bb      	ldr	r3, [r7, #24]
 8011d44:	6959      	ldr	r1, [r3, #20]
 8011d46:	693a      	ldr	r2, [r7, #16]
 8011d48:	4613      	mov	r3, r2
 8011d4a:	009b      	lsls	r3, r3, #2
 8011d4c:	4413      	add	r3, r2
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	4a13      	ldr	r2, [pc, #76]	@ (8011da0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011d52:	4413      	add	r3, r2
 8011d54:	4299      	cmp	r1, r3
 8011d56:	d11c      	bne.n	8011d92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	3304      	adds	r3, #4
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7fd fd51 	bl	800f804 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d66:	4b0f      	ldr	r3, [pc, #60]	@ (8011da4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d903      	bls.n	8011d76 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8011d6e:	69bb      	ldr	r3, [r7, #24]
 8011d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d72:	4a0c      	ldr	r2, [pc, #48]	@ (8011da4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011d74:	6013      	str	r3, [r2, #0]
 8011d76:	69bb      	ldr	r3, [r7, #24]
 8011d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d7a:	4613      	mov	r3, r2
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	4413      	add	r3, r2
 8011d80:	009b      	lsls	r3, r3, #2
 8011d82:	4a07      	ldr	r2, [pc, #28]	@ (8011da0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011d84:	441a      	add	r2, r3
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	3304      	adds	r3, #4
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	4610      	mov	r0, r2
 8011d8e:	f7fd fcdc 	bl	800f74a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011d92:	bf00      	nop
 8011d94:	3720      	adds	r7, #32
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	2400469c 	.word	0x2400469c
 8011da0:	240046a0 	.word	0x240046a0
 8011da4:	24004b78 	.word	0x24004b78

08011da8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011da8:	b480      	push	{r7}
 8011daa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011dac:	4b07      	ldr	r3, [pc, #28]	@ (8011dcc <pvTaskIncrementMutexHeldCount+0x24>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d004      	beq.n	8011dbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011db4:	4b05      	ldr	r3, [pc, #20]	@ (8011dcc <pvTaskIncrementMutexHeldCount+0x24>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011dba:	3201      	adds	r2, #1
 8011dbc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8011dbe:	4b03      	ldr	r3, [pc, #12]	@ (8011dcc <pvTaskIncrementMutexHeldCount+0x24>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
	}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr
 8011dcc:	2400469c 	.word	0x2400469c

08011dd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011dda:	4b21      	ldr	r3, [pc, #132]	@ (8011e60 <prvAddCurrentTaskToDelayedList+0x90>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011de0:	4b20      	ldr	r3, [pc, #128]	@ (8011e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	3304      	adds	r3, #4
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7fd fd0c 	bl	800f804 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011df2:	d10a      	bne.n	8011e0a <prvAddCurrentTaskToDelayedList+0x3a>
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d007      	beq.n	8011e0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8011e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	3304      	adds	r3, #4
 8011e00:	4619      	mov	r1, r3
 8011e02:	4819      	ldr	r0, [pc, #100]	@ (8011e68 <prvAddCurrentTaskToDelayedList+0x98>)
 8011e04:	f7fd fca1 	bl	800f74a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011e08:	e026      	b.n	8011e58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011e0a:	68fa      	ldr	r2, [r7, #12]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	4413      	add	r3, r2
 8011e10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011e12:	4b14      	ldr	r3, [pc, #80]	@ (8011e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	68ba      	ldr	r2, [r7, #8]
 8011e18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011e1a:	68ba      	ldr	r2, [r7, #8]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d209      	bcs.n	8011e36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e22:	4b12      	ldr	r3, [pc, #72]	@ (8011e6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8011e24:	681a      	ldr	r2, [r3, #0]
 8011e26:	4b0f      	ldr	r3, [pc, #60]	@ (8011e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	3304      	adds	r3, #4
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	4610      	mov	r0, r2
 8011e30:	f7fd fcaf 	bl	800f792 <vListInsert>
}
 8011e34:	e010      	b.n	8011e58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e36:	4b0e      	ldr	r3, [pc, #56]	@ (8011e70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8011e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	3304      	adds	r3, #4
 8011e40:	4619      	mov	r1, r3
 8011e42:	4610      	mov	r0, r2
 8011e44:	f7fd fca5 	bl	800f792 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011e48:	4b0a      	ldr	r3, [pc, #40]	@ (8011e74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	68ba      	ldr	r2, [r7, #8]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d202      	bcs.n	8011e58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011e52:	4a08      	ldr	r2, [pc, #32]	@ (8011e74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	6013      	str	r3, [r2, #0]
}
 8011e58:	bf00      	nop
 8011e5a:	3710      	adds	r7, #16
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	24004b74 	.word	0x24004b74
 8011e64:	2400469c 	.word	0x2400469c
 8011e68:	24004b5c 	.word	0x24004b5c
 8011e6c:	24004b2c 	.word	0x24004b2c
 8011e70:	24004b28 	.word	0x24004b28
 8011e74:	24004b90 	.word	0x24004b90

08011e78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b08a      	sub	sp, #40	@ 0x28
 8011e7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011e82:	f000 fb13 	bl	80124ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011e86:	4b1d      	ldr	r3, [pc, #116]	@ (8011efc <xTimerCreateTimerTask+0x84>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d021      	beq.n	8011ed2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011e92:	2300      	movs	r3, #0
 8011e94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011e96:	1d3a      	adds	r2, r7, #4
 8011e98:	f107 0108 	add.w	r1, r7, #8
 8011e9c:	f107 030c 	add.w	r3, r7, #12
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7fd fa1d 	bl	800f2e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011ea6:	6879      	ldr	r1, [r7, #4]
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	68fa      	ldr	r2, [r7, #12]
 8011eac:	9202      	str	r2, [sp, #8]
 8011eae:	9301      	str	r3, [sp, #4]
 8011eb0:	2302      	movs	r3, #2
 8011eb2:	9300      	str	r3, [sp, #0]
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	460a      	mov	r2, r1
 8011eb8:	4911      	ldr	r1, [pc, #68]	@ (8011f00 <xTimerCreateTimerTask+0x88>)
 8011eba:	4812      	ldr	r0, [pc, #72]	@ (8011f04 <xTimerCreateTimerTask+0x8c>)
 8011ebc:	f7fe ff4a 	bl	8010d54 <xTaskCreateStatic>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	4a11      	ldr	r2, [pc, #68]	@ (8011f08 <xTimerCreateTimerTask+0x90>)
 8011ec4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011ec6:	4b10      	ldr	r3, [pc, #64]	@ (8011f08 <xTimerCreateTimerTask+0x90>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d001      	beq.n	8011ed2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011ed2:	697b      	ldr	r3, [r7, #20]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d10b      	bne.n	8011ef0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011edc:	f383 8811 	msr	BASEPRI, r3
 8011ee0:	f3bf 8f6f 	isb	sy
 8011ee4:	f3bf 8f4f 	dsb	sy
 8011ee8:	613b      	str	r3, [r7, #16]
}
 8011eea:	bf00      	nop
 8011eec:	bf00      	nop
 8011eee:	e7fd      	b.n	8011eec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011ef0:	697b      	ldr	r3, [r7, #20]
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3718      	adds	r7, #24
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
 8011efa:	bf00      	nop
 8011efc:	24004bcc 	.word	0x24004bcc
 8011f00:	08013ce4 	.word	0x08013ce4
 8011f04:	08012045 	.word	0x08012045
 8011f08:	24004bd0 	.word	0x24004bd0

08011f0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08a      	sub	sp, #40	@ 0x28
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	607a      	str	r2, [r7, #4]
 8011f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d10b      	bne.n	8011f3c <xTimerGenericCommand+0x30>
	__asm volatile
 8011f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f28:	f383 8811 	msr	BASEPRI, r3
 8011f2c:	f3bf 8f6f 	isb	sy
 8011f30:	f3bf 8f4f 	dsb	sy
 8011f34:	623b      	str	r3, [r7, #32]
}
 8011f36:	bf00      	nop
 8011f38:	bf00      	nop
 8011f3a:	e7fd      	b.n	8011f38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011f3c:	4b19      	ldr	r3, [pc, #100]	@ (8011fa4 <xTimerGenericCommand+0x98>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d02a      	beq.n	8011f9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	2b05      	cmp	r3, #5
 8011f54:	dc18      	bgt.n	8011f88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011f56:	f7ff fdad 	bl	8011ab4 <xTaskGetSchedulerState>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b02      	cmp	r3, #2
 8011f5e:	d109      	bne.n	8011f74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011f60:	4b10      	ldr	r3, [pc, #64]	@ (8011fa4 <xTimerGenericCommand+0x98>)
 8011f62:	6818      	ldr	r0, [r3, #0]
 8011f64:	f107 0110 	add.w	r1, r7, #16
 8011f68:	2300      	movs	r3, #0
 8011f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f6c:	f7fe f87a 	bl	8010064 <xQueueGenericSend>
 8011f70:	6278      	str	r0, [r7, #36]	@ 0x24
 8011f72:	e012      	b.n	8011f9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011f74:	4b0b      	ldr	r3, [pc, #44]	@ (8011fa4 <xTimerGenericCommand+0x98>)
 8011f76:	6818      	ldr	r0, [r3, #0]
 8011f78:	f107 0110 	add.w	r1, r7, #16
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f7fe f870 	bl	8010064 <xQueueGenericSend>
 8011f84:	6278      	str	r0, [r7, #36]	@ 0x24
 8011f86:	e008      	b.n	8011f9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011f88:	4b06      	ldr	r3, [pc, #24]	@ (8011fa4 <xTimerGenericCommand+0x98>)
 8011f8a:	6818      	ldr	r0, [r3, #0]
 8011f8c:	f107 0110 	add.w	r1, r7, #16
 8011f90:	2300      	movs	r3, #0
 8011f92:	683a      	ldr	r2, [r7, #0]
 8011f94:	f7fe f968 	bl	8010268 <xQueueGenericSendFromISR>
 8011f98:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3728      	adds	r7, #40	@ 0x28
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}
 8011fa4:	24004bcc 	.word	0x24004bcc

08011fa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b088      	sub	sp, #32
 8011fac:	af02      	add	r7, sp, #8
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fb2:	4b23      	ldr	r3, [pc, #140]	@ (8012040 <prvProcessExpiredTimer+0x98>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	68db      	ldr	r3, [r3, #12]
 8011fba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	3304      	adds	r3, #4
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7fd fc1f 	bl	800f804 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fcc:	f003 0304 	and.w	r3, r3, #4
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d023      	beq.n	801201c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	699a      	ldr	r2, [r3, #24]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	18d1      	adds	r1, r2, r3
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	683a      	ldr	r2, [r7, #0]
 8011fe0:	6978      	ldr	r0, [r7, #20]
 8011fe2:	f000 f8d5 	bl	8012190 <prvInsertTimerInActiveList>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d020      	beq.n	801202e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011fec:	2300      	movs	r3, #0
 8011fee:	9300      	str	r3, [sp, #0]
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	687a      	ldr	r2, [r7, #4]
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	6978      	ldr	r0, [r7, #20]
 8011ff8:	f7ff ff88 	bl	8011f0c <xTimerGenericCommand>
 8011ffc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d114      	bne.n	801202e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8012004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012008:	f383 8811 	msr	BASEPRI, r3
 801200c:	f3bf 8f6f 	isb	sy
 8012010:	f3bf 8f4f 	dsb	sy
 8012014:	60fb      	str	r3, [r7, #12]
}
 8012016:	bf00      	nop
 8012018:	bf00      	nop
 801201a:	e7fd      	b.n	8012018 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012022:	f023 0301 	bic.w	r3, r3, #1
 8012026:	b2da      	uxtb	r2, r3
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	6a1b      	ldr	r3, [r3, #32]
 8012032:	6978      	ldr	r0, [r7, #20]
 8012034:	4798      	blx	r3
}
 8012036:	bf00      	nop
 8012038:	3718      	adds	r7, #24
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
 801203e:	bf00      	nop
 8012040:	24004bc4 	.word	0x24004bc4

08012044 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b084      	sub	sp, #16
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801204c:	f107 0308 	add.w	r3, r7, #8
 8012050:	4618      	mov	r0, r3
 8012052:	f000 f859 	bl	8012108 <prvGetNextExpireTime>
 8012056:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	4619      	mov	r1, r3
 801205c:	68f8      	ldr	r0, [r7, #12]
 801205e:	f000 f805 	bl	801206c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012062:	f000 f8d7 	bl	8012214 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012066:	bf00      	nop
 8012068:	e7f0      	b.n	801204c <prvTimerTask+0x8>
	...

0801206c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b084      	sub	sp, #16
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012076:	f7ff f925 	bl	80112c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801207a:	f107 0308 	add.w	r3, r7, #8
 801207e:	4618      	mov	r0, r3
 8012080:	f000 f866 	bl	8012150 <prvSampleTimeNow>
 8012084:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d130      	bne.n	80120ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d10a      	bne.n	80120a8 <prvProcessTimerOrBlockTask+0x3c>
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	429a      	cmp	r2, r3
 8012098:	d806      	bhi.n	80120a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801209a:	f7ff f921 	bl	80112e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801209e:	68f9      	ldr	r1, [r7, #12]
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f7ff ff81 	bl	8011fa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80120a6:	e024      	b.n	80120f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d008      	beq.n	80120c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80120ae:	4b13      	ldr	r3, [pc, #76]	@ (80120fc <prvProcessTimerOrBlockTask+0x90>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d101      	bne.n	80120bc <prvProcessTimerOrBlockTask+0x50>
 80120b8:	2301      	movs	r3, #1
 80120ba:	e000      	b.n	80120be <prvProcessTimerOrBlockTask+0x52>
 80120bc:	2300      	movs	r3, #0
 80120be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80120c0:	4b0f      	ldr	r3, [pc, #60]	@ (8012100 <prvProcessTimerOrBlockTask+0x94>)
 80120c2:	6818      	ldr	r0, [r3, #0]
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	1ad3      	subs	r3, r2, r3
 80120ca:	683a      	ldr	r2, [r7, #0]
 80120cc:	4619      	mov	r1, r3
 80120ce:	f7fe fe0d 	bl	8010cec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80120d2:	f7ff f905 	bl	80112e0 <xTaskResumeAll>
 80120d6:	4603      	mov	r3, r0
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d10a      	bne.n	80120f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80120dc:	4b09      	ldr	r3, [pc, #36]	@ (8012104 <prvProcessTimerOrBlockTask+0x98>)
 80120de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80120e2:	601a      	str	r2, [r3, #0]
 80120e4:	f3bf 8f4f 	dsb	sy
 80120e8:	f3bf 8f6f 	isb	sy
}
 80120ec:	e001      	b.n	80120f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80120ee:	f7ff f8f7 	bl	80112e0 <xTaskResumeAll>
}
 80120f2:	bf00      	nop
 80120f4:	3710      	adds	r7, #16
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	24004bc8 	.word	0x24004bc8
 8012100:	24004bcc 	.word	0x24004bcc
 8012104:	e000ed04 	.word	0xe000ed04

08012108 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012108:	b480      	push	{r7}
 801210a:	b085      	sub	sp, #20
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012110:	4b0e      	ldr	r3, [pc, #56]	@ (801214c <prvGetNextExpireTime+0x44>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d101      	bne.n	801211e <prvGetNextExpireTime+0x16>
 801211a:	2201      	movs	r2, #1
 801211c:	e000      	b.n	8012120 <prvGetNextExpireTime+0x18>
 801211e:	2200      	movs	r2, #0
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d105      	bne.n	8012138 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801212c:	4b07      	ldr	r3, [pc, #28]	@ (801214c <prvGetNextExpireTime+0x44>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	68db      	ldr	r3, [r3, #12]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	60fb      	str	r3, [r7, #12]
 8012136:	e001      	b.n	801213c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012138:	2300      	movs	r3, #0
 801213a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801213c:	68fb      	ldr	r3, [r7, #12]
}
 801213e:	4618      	mov	r0, r3
 8012140:	3714      	adds	r7, #20
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr
 801214a:	bf00      	nop
 801214c:	24004bc4 	.word	0x24004bc4

08012150 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012158:	f7ff f960 	bl	801141c <xTaskGetTickCount>
 801215c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801215e:	4b0b      	ldr	r3, [pc, #44]	@ (801218c <prvSampleTimeNow+0x3c>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	68fa      	ldr	r2, [r7, #12]
 8012164:	429a      	cmp	r2, r3
 8012166:	d205      	bcs.n	8012174 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012168:	f000 f93a 	bl	80123e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2201      	movs	r2, #1
 8012170:	601a      	str	r2, [r3, #0]
 8012172:	e002      	b.n	801217a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2200      	movs	r2, #0
 8012178:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801217a:	4a04      	ldr	r2, [pc, #16]	@ (801218c <prvSampleTimeNow+0x3c>)
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012180:	68fb      	ldr	r3, [r7, #12]
}
 8012182:	4618      	mov	r0, r3
 8012184:	3710      	adds	r7, #16
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	24004bd4 	.word	0x24004bd4

08012190 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b086      	sub	sp, #24
 8012194:	af00      	add	r7, sp, #0
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	60b9      	str	r1, [r7, #8]
 801219a:	607a      	str	r2, [r7, #4]
 801219c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801219e:	2300      	movs	r3, #0
 80121a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	68ba      	ldr	r2, [r7, #8]
 80121a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	68fa      	ldr	r2, [r7, #12]
 80121ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80121ae:	68ba      	ldr	r2, [r7, #8]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d812      	bhi.n	80121dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	1ad2      	subs	r2, r2, r3
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	699b      	ldr	r3, [r3, #24]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d302      	bcc.n	80121ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80121c4:	2301      	movs	r3, #1
 80121c6:	617b      	str	r3, [r7, #20]
 80121c8:	e01b      	b.n	8012202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80121ca:	4b10      	ldr	r3, [pc, #64]	@ (801220c <prvInsertTimerInActiveList+0x7c>)
 80121cc:	681a      	ldr	r2, [r3, #0]
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	3304      	adds	r3, #4
 80121d2:	4619      	mov	r1, r3
 80121d4:	4610      	mov	r0, r2
 80121d6:	f7fd fadc 	bl	800f792 <vListInsert>
 80121da:	e012      	b.n	8012202 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80121dc:	687a      	ldr	r2, [r7, #4]
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d206      	bcs.n	80121f2 <prvInsertTimerInActiveList+0x62>
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d302      	bcc.n	80121f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80121ec:	2301      	movs	r3, #1
 80121ee:	617b      	str	r3, [r7, #20]
 80121f0:	e007      	b.n	8012202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80121f2:	4b07      	ldr	r3, [pc, #28]	@ (8012210 <prvInsertTimerInActiveList+0x80>)
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	3304      	adds	r3, #4
 80121fa:	4619      	mov	r1, r3
 80121fc:	4610      	mov	r0, r2
 80121fe:	f7fd fac8 	bl	800f792 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012202:	697b      	ldr	r3, [r7, #20]
}
 8012204:	4618      	mov	r0, r3
 8012206:	3718      	adds	r7, #24
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}
 801220c:	24004bc8 	.word	0x24004bc8
 8012210:	24004bc4 	.word	0x24004bc4

08012214 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b08e      	sub	sp, #56	@ 0x38
 8012218:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801221a:	e0ce      	b.n	80123ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2b00      	cmp	r3, #0
 8012220:	da19      	bge.n	8012256 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012222:	1d3b      	adds	r3, r7, #4
 8012224:	3304      	adds	r3, #4
 8012226:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801222a:	2b00      	cmp	r3, #0
 801222c:	d10b      	bne.n	8012246 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801222e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012232:	f383 8811 	msr	BASEPRI, r3
 8012236:	f3bf 8f6f 	isb	sy
 801223a:	f3bf 8f4f 	dsb	sy
 801223e:	61fb      	str	r3, [r7, #28]
}
 8012240:	bf00      	nop
 8012242:	bf00      	nop
 8012244:	e7fd      	b.n	8012242 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801224c:	6850      	ldr	r0, [r2, #4]
 801224e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012250:	6892      	ldr	r2, [r2, #8]
 8012252:	4611      	mov	r1, r2
 8012254:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2b00      	cmp	r3, #0
 801225a:	f2c0 80ae 	blt.w	80123ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012264:	695b      	ldr	r3, [r3, #20]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d004      	beq.n	8012274 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801226a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801226c:	3304      	adds	r3, #4
 801226e:	4618      	mov	r0, r3
 8012270:	f7fd fac8 	bl	800f804 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012274:	463b      	mov	r3, r7
 8012276:	4618      	mov	r0, r3
 8012278:	f7ff ff6a 	bl	8012150 <prvSampleTimeNow>
 801227c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2b09      	cmp	r3, #9
 8012282:	f200 8097 	bhi.w	80123b4 <prvProcessReceivedCommands+0x1a0>
 8012286:	a201      	add	r2, pc, #4	@ (adr r2, 801228c <prvProcessReceivedCommands+0x78>)
 8012288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801228c:	080122b5 	.word	0x080122b5
 8012290:	080122b5 	.word	0x080122b5
 8012294:	080122b5 	.word	0x080122b5
 8012298:	0801232b 	.word	0x0801232b
 801229c:	0801233f 	.word	0x0801233f
 80122a0:	0801238b 	.word	0x0801238b
 80122a4:	080122b5 	.word	0x080122b5
 80122a8:	080122b5 	.word	0x080122b5
 80122ac:	0801232b 	.word	0x0801232b
 80122b0:	0801233f 	.word	0x0801233f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80122b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80122ba:	f043 0301 	orr.w	r3, r3, #1
 80122be:	b2da      	uxtb	r2, r3
 80122c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80122c6:	68ba      	ldr	r2, [r7, #8]
 80122c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ca:	699b      	ldr	r3, [r3, #24]
 80122cc:	18d1      	adds	r1, r2, r3
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80122d4:	f7ff ff5c 	bl	8012190 <prvInsertTimerInActiveList>
 80122d8:	4603      	mov	r3, r0
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d06c      	beq.n	80123b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80122de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e0:	6a1b      	ldr	r3, [r3, #32]
 80122e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80122e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80122e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80122ec:	f003 0304 	and.w	r3, r3, #4
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d061      	beq.n	80123b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122f8:	699b      	ldr	r3, [r3, #24]
 80122fa:	441a      	add	r2, r3
 80122fc:	2300      	movs	r3, #0
 80122fe:	9300      	str	r3, [sp, #0]
 8012300:	2300      	movs	r3, #0
 8012302:	2100      	movs	r1, #0
 8012304:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012306:	f7ff fe01 	bl	8011f0c <xTimerGenericCommand>
 801230a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801230c:	6a3b      	ldr	r3, [r7, #32]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d152      	bne.n	80123b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8012312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012316:	f383 8811 	msr	BASEPRI, r3
 801231a:	f3bf 8f6f 	isb	sy
 801231e:	f3bf 8f4f 	dsb	sy
 8012322:	61bb      	str	r3, [r7, #24]
}
 8012324:	bf00      	nop
 8012326:	bf00      	nop
 8012328:	e7fd      	b.n	8012326 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801232a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801232c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012330:	f023 0301 	bic.w	r3, r3, #1
 8012334:	b2da      	uxtb	r2, r3
 8012336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012338:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801233c:	e03d      	b.n	80123ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012344:	f043 0301 	orr.w	r3, r3, #1
 8012348:	b2da      	uxtb	r2, r3
 801234a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801234c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012350:	68ba      	ldr	r2, [r7, #8]
 8012352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012354:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012358:	699b      	ldr	r3, [r3, #24]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d10b      	bne.n	8012376 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801235e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012362:	f383 8811 	msr	BASEPRI, r3
 8012366:	f3bf 8f6f 	isb	sy
 801236a:	f3bf 8f4f 	dsb	sy
 801236e:	617b      	str	r3, [r7, #20]
}
 8012370:	bf00      	nop
 8012372:	bf00      	nop
 8012374:	e7fd      	b.n	8012372 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012378:	699a      	ldr	r2, [r3, #24]
 801237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801237c:	18d1      	adds	r1, r2, r3
 801237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012384:	f7ff ff04 	bl	8012190 <prvInsertTimerInActiveList>
					break;
 8012388:	e017      	b.n	80123ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801238a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801238c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012390:	f003 0302 	and.w	r3, r3, #2
 8012394:	2b00      	cmp	r3, #0
 8012396:	d103      	bne.n	80123a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8012398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801239a:	f7fd f889 	bl	800f4b0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801239e:	e00c      	b.n	80123ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80123a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80123a6:	f023 0301 	bic.w	r3, r3, #1
 80123aa:	b2da      	uxtb	r2, r3
 80123ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80123b2:	e002      	b.n	80123ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80123b4:	bf00      	nop
 80123b6:	e000      	b.n	80123ba <prvProcessReceivedCommands+0x1a6>
					break;
 80123b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80123ba:	4b08      	ldr	r3, [pc, #32]	@ (80123dc <prvProcessReceivedCommands+0x1c8>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	1d39      	adds	r1, r7, #4
 80123c0:	2200      	movs	r2, #0
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7fe f87e 	bl	80104c4 <xQueueReceive>
 80123c8:	4603      	mov	r3, r0
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	f47f af26 	bne.w	801221c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80123d0:	bf00      	nop
 80123d2:	bf00      	nop
 80123d4:	3730      	adds	r7, #48	@ 0x30
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	24004bcc 	.word	0x24004bcc

080123e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b088      	sub	sp, #32
 80123e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80123e6:	e049      	b.n	801247c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80123e8:	4b2e      	ldr	r3, [pc, #184]	@ (80124a4 <prvSwitchTimerLists+0xc4>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	68db      	ldr	r3, [r3, #12]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123f2:	4b2c      	ldr	r3, [pc, #176]	@ (80124a4 <prvSwitchTimerLists+0xc4>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	68db      	ldr	r3, [r3, #12]
 80123fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	3304      	adds	r3, #4
 8012400:	4618      	mov	r0, r3
 8012402:	f7fd f9ff 	bl	800f804 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	6a1b      	ldr	r3, [r3, #32]
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012414:	f003 0304 	and.w	r3, r3, #4
 8012418:	2b00      	cmp	r3, #0
 801241a:	d02f      	beq.n	801247c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	699b      	ldr	r3, [r3, #24]
 8012420:	693a      	ldr	r2, [r7, #16]
 8012422:	4413      	add	r3, r2
 8012424:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012426:	68ba      	ldr	r2, [r7, #8]
 8012428:	693b      	ldr	r3, [r7, #16]
 801242a:	429a      	cmp	r2, r3
 801242c:	d90e      	bls.n	801244c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	68ba      	ldr	r2, [r7, #8]
 8012432:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	68fa      	ldr	r2, [r7, #12]
 8012438:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801243a:	4b1a      	ldr	r3, [pc, #104]	@ (80124a4 <prvSwitchTimerLists+0xc4>)
 801243c:	681a      	ldr	r2, [r3, #0]
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	3304      	adds	r3, #4
 8012442:	4619      	mov	r1, r3
 8012444:	4610      	mov	r0, r2
 8012446:	f7fd f9a4 	bl	800f792 <vListInsert>
 801244a:	e017      	b.n	801247c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801244c:	2300      	movs	r3, #0
 801244e:	9300      	str	r3, [sp, #0]
 8012450:	2300      	movs	r3, #0
 8012452:	693a      	ldr	r2, [r7, #16]
 8012454:	2100      	movs	r1, #0
 8012456:	68f8      	ldr	r0, [r7, #12]
 8012458:	f7ff fd58 	bl	8011f0c <xTimerGenericCommand>
 801245c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d10b      	bne.n	801247c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8012464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012468:	f383 8811 	msr	BASEPRI, r3
 801246c:	f3bf 8f6f 	isb	sy
 8012470:	f3bf 8f4f 	dsb	sy
 8012474:	603b      	str	r3, [r7, #0]
}
 8012476:	bf00      	nop
 8012478:	bf00      	nop
 801247a:	e7fd      	b.n	8012478 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801247c:	4b09      	ldr	r3, [pc, #36]	@ (80124a4 <prvSwitchTimerLists+0xc4>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d1b0      	bne.n	80123e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012486:	4b07      	ldr	r3, [pc, #28]	@ (80124a4 <prvSwitchTimerLists+0xc4>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801248c:	4b06      	ldr	r3, [pc, #24]	@ (80124a8 <prvSwitchTimerLists+0xc8>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	4a04      	ldr	r2, [pc, #16]	@ (80124a4 <prvSwitchTimerLists+0xc4>)
 8012492:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012494:	4a04      	ldr	r2, [pc, #16]	@ (80124a8 <prvSwitchTimerLists+0xc8>)
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	6013      	str	r3, [r2, #0]
}
 801249a:	bf00      	nop
 801249c:	3718      	adds	r7, #24
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	24004bc4 	.word	0x24004bc4
 80124a8:	24004bc8 	.word	0x24004bc8

080124ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80124b2:	f7fd fb01 	bl	800fab8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80124b6:	4b15      	ldr	r3, [pc, #84]	@ (801250c <prvCheckForValidListAndQueue+0x60>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d120      	bne.n	8012500 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80124be:	4814      	ldr	r0, [pc, #80]	@ (8012510 <prvCheckForValidListAndQueue+0x64>)
 80124c0:	f7fd f916 	bl	800f6f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80124c4:	4813      	ldr	r0, [pc, #76]	@ (8012514 <prvCheckForValidListAndQueue+0x68>)
 80124c6:	f7fd f913 	bl	800f6f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80124ca:	4b13      	ldr	r3, [pc, #76]	@ (8012518 <prvCheckForValidListAndQueue+0x6c>)
 80124cc:	4a10      	ldr	r2, [pc, #64]	@ (8012510 <prvCheckForValidListAndQueue+0x64>)
 80124ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80124d0:	4b12      	ldr	r3, [pc, #72]	@ (801251c <prvCheckForValidListAndQueue+0x70>)
 80124d2:	4a10      	ldr	r2, [pc, #64]	@ (8012514 <prvCheckForValidListAndQueue+0x68>)
 80124d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80124d6:	2300      	movs	r3, #0
 80124d8:	9300      	str	r3, [sp, #0]
 80124da:	4b11      	ldr	r3, [pc, #68]	@ (8012520 <prvCheckForValidListAndQueue+0x74>)
 80124dc:	4a11      	ldr	r2, [pc, #68]	@ (8012524 <prvCheckForValidListAndQueue+0x78>)
 80124de:	2110      	movs	r1, #16
 80124e0:	200a      	movs	r0, #10
 80124e2:	f7fd fc75 	bl	800fdd0 <xQueueGenericCreateStatic>
 80124e6:	4603      	mov	r3, r0
 80124e8:	4a08      	ldr	r2, [pc, #32]	@ (801250c <prvCheckForValidListAndQueue+0x60>)
 80124ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80124ec:	4b07      	ldr	r3, [pc, #28]	@ (801250c <prvCheckForValidListAndQueue+0x60>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d005      	beq.n	8012500 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80124f4:	4b05      	ldr	r3, [pc, #20]	@ (801250c <prvCheckForValidListAndQueue+0x60>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	490b      	ldr	r1, [pc, #44]	@ (8012528 <prvCheckForValidListAndQueue+0x7c>)
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fe fba2 	bl	8010c44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012500:	f7fd fb0c 	bl	800fb1c <vPortExitCritical>
}
 8012504:	bf00      	nop
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}
 801250a:	bf00      	nop
 801250c:	24004bcc 	.word	0x24004bcc
 8012510:	24004b9c 	.word	0x24004b9c
 8012514:	24004bb0 	.word	0x24004bb0
 8012518:	24004bc4 	.word	0x24004bc4
 801251c:	24004bc8 	.word	0x24004bc8
 8012520:	24004c78 	.word	0x24004c78
 8012524:	24004bd8 	.word	0x24004bd8
 8012528:	08013cec 	.word	0x08013cec

0801252c <idle_task>:
#include "task_header.h"

void idle_task(void *argument)
{
 801252c:	b480      	push	{r7}
 801252e:	b083      	sub	sp, #12
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
	while (1){
 8012534:	bf00      	nop
 8012536:	e7fd      	b.n	8012534 <idle_task+0x8>

08012538 <read_package_data>:
    return &package_data[package_data_index];
}


package_data_t* read_package_data()
{
 8012538:	b480      	push	{r7}
 801253a:	af00      	add	r7, sp, #0
    return &package_data[!package_data_index];
 801253c:	4b08      	ldr	r3, [pc, #32]	@ (8012560 <read_package_data+0x28>)
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	2b00      	cmp	r3, #0
 8012542:	bf0c      	ite	eq
 8012544:	2301      	moveq	r3, #1
 8012546:	2300      	movne	r3, #0
 8012548:	b2db      	uxtb	r3, r3
 801254a:	461a      	mov	r2, r3
 801254c:	2354      	movs	r3, #84	@ 0x54
 801254e:	fb02 f303 	mul.w	r3, r2, r3
 8012552:	4a04      	ldr	r2, [pc, #16]	@ (8012564 <read_package_data+0x2c>)
 8012554:	4413      	add	r3, r2
}
 8012556:	4618      	mov	r0, r3
 8012558:	46bd      	mov	sp, r7
 801255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255e:	4770      	bx	lr
 8012560:	24004d70 	.word	0x24004d70
 8012564:	24004cc8 	.word	0x24004cc8

08012568 <update_package_data>:


void update_package_data()
{
 8012568:	b480      	push	{r7}
 801256a:	af00      	add	r7, sp, #0

    package_data_index = !package_data_index;
 801256c:	4b07      	ldr	r3, [pc, #28]	@ (801258c <update_package_data+0x24>)
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	bf0c      	ite	eq
 8012574:	2301      	moveq	r3, #1
 8012576:	2300      	movne	r3, #0
 8012578:	b2db      	uxtb	r3, r3
 801257a:	461a      	mov	r2, r3
 801257c:	4b03      	ldr	r3, [pc, #12]	@ (801258c <update_package_data+0x24>)
 801257e:	701a      	strb	r2, [r3, #0]
}
 8012580:	bf00      	nop
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr
 801258a:	bf00      	nop
 801258c:	24004d70 	.word	0x24004d70

08012590 <Ds18b20_Init>:
  .name = "Task_Ds18b20",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow1,
};
void	Ds18b20_Init(osPriority Priority)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]

  Ds18b20Handle = osThreadNew(Task_Ds18b20,NULL,&Task_Ds18b20_attributes);
 8012598:	4a05      	ldr	r2, [pc, #20]	@ (80125b0 <Ds18b20_Init+0x20>)
 801259a:	2100      	movs	r1, #0
 801259c:	4805      	ldr	r0, [pc, #20]	@ (80125b4 <Ds18b20_Init+0x24>)
 801259e:	f7fc fba2 	bl	800ece6 <osThreadNew>
 80125a2:	4603      	mov	r3, r0
 80125a4:	4a04      	ldr	r2, [pc, #16]	@ (80125b8 <Ds18b20_Init+0x28>)
 80125a6:	6013      	str	r3, [r2, #0]
}
 80125a8:	bf00      	nop
 80125aa:	3708      	adds	r7, #8
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}
 80125b0:	08013f5c 	.word	0x08013f5c
 80125b4:	080125bd 	.word	0x080125bd
 80125b8:	24004da0 	.word	0x24004da0

080125bc <Task_Ds18b20>:
	#endif
}
//###########################################################################################
#if (_DS18B20_USE_FREERTOS==1)
void Task_Ds18b20(void const * argument)
{
 80125bc:	b590      	push	{r4, r7, lr}
 80125be:	b085      	sub	sp, #20
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
	uint8_t	Ds18b20TryToFind=5;
 80125c4:	2305      	movs	r3, #5
 80125c6:	73fb      	strb	r3, [r7, #15]
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 80125c8:	2201      	movs	r2, #1
 80125ca:	4969      	ldr	r1, [pc, #420]	@ (8012770 <Task_Ds18b20+0x1b4>)
 80125cc:	4869      	ldr	r0, [pc, #420]	@ (8012774 <Task_Ds18b20+0x1b8>)
 80125ce:	f000 fb61 	bl	8012c94 <OneWire_Init>
		TempSensorCount = 0;	
 80125d2:	4b69      	ldr	r3, [pc, #420]	@ (8012778 <Task_Ds18b20+0x1bc>)
 80125d4:	2200      	movs	r2, #0
 80125d6:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 80125d8:	e002      	b.n	80125e0 <Task_Ds18b20+0x24>
			Ds18b20Delay(100);
 80125da:	2064      	movs	r0, #100	@ 0x64
 80125dc:	f7fc fc36 	bl	800ee4c <osDelay>
		while(HAL_GetTick() < 3000)
 80125e0:	f7ef f852 	bl	8001688 <HAL_GetTick>
 80125e4:	4603      	mov	r3, r0
 80125e6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80125ea:	4293      	cmp	r3, r2
 80125ec:	d9f5      	bls.n	80125da <Task_Ds18b20+0x1e>
		OneWireDevices = OneWire_First(&OneWire);
 80125ee:	4861      	ldr	r0, [pc, #388]	@ (8012774 <Task_Ds18b20+0x1b8>)
 80125f0:	f000 fc43 	bl	8012e7a <OneWire_First>
 80125f4:	4603      	mov	r3, r0
 80125f6:	461a      	mov	r2, r3
 80125f8:	4b60      	ldr	r3, [pc, #384]	@ (801277c <Task_Ds18b20+0x1c0>)
 80125fa:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80125fc:	e019      	b.n	8012632 <Task_Ds18b20+0x76>
		{
			Ds18b20Delay(100);
 80125fe:	2064      	movs	r0, #100	@ 0x64
 8012600:	f7fc fc24 	bl	800ee4c <osDelay>
			TempSensorCount++;
 8012604:	4b5c      	ldr	r3, [pc, #368]	@ (8012778 <Task_Ds18b20+0x1bc>)
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	3301      	adds	r3, #1
 801260a:	b2da      	uxtb	r2, r3
 801260c:	4b5a      	ldr	r3, [pc, #360]	@ (8012778 <Task_Ds18b20+0x1bc>)
 801260e:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8012610:	4b59      	ldr	r3, [pc, #356]	@ (8012778 <Task_Ds18b20+0x1bc>)
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	3b01      	subs	r3, #1
 8012616:	011b      	lsls	r3, r3, #4
 8012618:	4a59      	ldr	r2, [pc, #356]	@ (8012780 <Task_Ds18b20+0x1c4>)
 801261a:	4413      	add	r3, r2
 801261c:	4619      	mov	r1, r3
 801261e:	4855      	ldr	r0, [pc, #340]	@ (8012774 <Task_Ds18b20+0x1b8>)
 8012620:	f000 fd40 	bl	80130a4 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8012624:	4853      	ldr	r0, [pc, #332]	@ (8012774 <Task_Ds18b20+0x1b8>)
 8012626:	f000 fc38 	bl	8012e9a <OneWire_Next>
 801262a:	4603      	mov	r3, r0
 801262c:	461a      	mov	r2, r3
 801262e:	4b53      	ldr	r3, [pc, #332]	@ (801277c <Task_Ds18b20+0x1c0>)
 8012630:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8012632:	4b52      	ldr	r3, [pc, #328]	@ (801277c <Task_Ds18b20+0x1c0>)
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d1e1      	bne.n	80125fe <Task_Ds18b20+0x42>
		}
		if(TempSensorCount>0)
 801263a:	4b4f      	ldr	r3, [pc, #316]	@ (8012778 <Task_Ds18b20+0x1bc>)
 801263c:	781b      	ldrb	r3, [r3, #0]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d106      	bne.n	8012650 <Task_Ds18b20+0x94>
			break;
		Ds18b20TryToFind--;
 8012642:	7bfb      	ldrb	r3, [r7, #15]
 8012644:	3b01      	subs	r3, #1
 8012646:	73fb      	strb	r3, [r7, #15]
	}while(Ds18b20TryToFind>0);
 8012648:	7bfb      	ldrb	r3, [r7, #15]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d1bc      	bne.n	80125c8 <Task_Ds18b20+0xc>
 801264e:	e000      	b.n	8012652 <Task_Ds18b20+0x96>
			break;
 8012650:	bf00      	nop
	if(Ds18b20TryToFind==0)
 8012652:	7bfb      	ldrb	r3, [r7, #15]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d104      	bne.n	8012662 <Task_Ds18b20+0xa6>
		vTaskDelete(Ds18b20Handle);
 8012658:	4b4a      	ldr	r3, [pc, #296]	@ (8012784 <Task_Ds18b20+0x1c8>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	4618      	mov	r0, r3
 801265e:	f7fe fd1f 	bl	80110a0 <vTaskDelete>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8012662:	2300      	movs	r3, #0
 8012664:	73bb      	strb	r3, [r7, #14]
 8012666:	e019      	b.n	801269c <Task_Ds18b20+0xe0>
	{
		Ds18b20Delay(50);
 8012668:	2032      	movs	r0, #50	@ 0x32
 801266a:	f7fc fbef 	bl	800ee4c <osDelay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 801266e:	7bbb      	ldrb	r3, [r7, #14]
 8012670:	011b      	lsls	r3, r3, #4
 8012672:	4a43      	ldr	r2, [pc, #268]	@ (8012780 <Task_Ds18b20+0x1c4>)
 8012674:	4413      	add	r3, r2
 8012676:	220c      	movs	r2, #12
 8012678:	4619      	mov	r1, r3
 801267a:	483e      	ldr	r0, [pc, #248]	@ (8012774 <Task_Ds18b20+0x1b8>)
 801267c:	f000 f99e 	bl	80129bc <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8012680:	2032      	movs	r0, #50	@ 0x32
 8012682:	f7fc fbe3 	bl	800ee4c <osDelay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8012686:	7bbb      	ldrb	r3, [r7, #14]
 8012688:	011b      	lsls	r3, r3, #4
 801268a:	4a3d      	ldr	r2, [pc, #244]	@ (8012780 <Task_Ds18b20+0x1c4>)
 801268c:	4413      	add	r3, r2
 801268e:	4619      	mov	r1, r3
 8012690:	4838      	ldr	r0, [pc, #224]	@ (8012774 <Task_Ds18b20+0x1b8>)
 8012692:	f000 fa2c 	bl	8012aee <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8012696:	7bbb      	ldrb	r3, [r7, #14]
 8012698:	3301      	adds	r3, #1
 801269a:	73bb      	strb	r3, [r7, #14]
 801269c:	4b36      	ldr	r3, [pc, #216]	@ (8012778 <Task_Ds18b20+0x1bc>)
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	7bba      	ldrb	r2, [r7, #14]
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d3e0      	bcc.n	8012668 <Task_Ds18b20+0xac>
  }
	for(;;)
	{
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 80126a6:	bf00      	nop
		{
			if(Ds18b20StartConvert==1)
				break;
			Ds18b20Delay(10);	
		}
		Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 80126a8:	4b37      	ldr	r3, [pc, #220]	@ (8012788 <Task_Ds18b20+0x1cc>)
 80126aa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80126ae:	801a      	strh	r2, [r3, #0]
		DS18B20_StartAll(&OneWire);
 80126b0:	4830      	ldr	r0, [pc, #192]	@ (8012774 <Task_Ds18b20+0x1b8>)
 80126b2:	f000 f86d 	bl	8012790 <DS18B20_StartAll>
		osDelay(100);
 80126b6:	2064      	movs	r0, #100	@ 0x64
 80126b8:	f7fc fbc8 	bl	800ee4c <osDelay>
    while (!DS18B20_AllDone(&OneWire))
 80126bc:	e00c      	b.n	80126d8 <Task_Ds18b20+0x11c>
		{
			osDelay(10);  
 80126be:	200a      	movs	r0, #10
 80126c0:	f7fc fbc4 	bl	800ee4c <osDelay>
			Ds18b20Timeout-=1;
 80126c4:	4b30      	ldr	r3, [pc, #192]	@ (8012788 <Task_Ds18b20+0x1cc>)
 80126c6:	881b      	ldrh	r3, [r3, #0]
 80126c8:	3b01      	subs	r3, #1
 80126ca:	b29a      	uxth	r2, r3
 80126cc:	4b2e      	ldr	r3, [pc, #184]	@ (8012788 <Task_Ds18b20+0x1cc>)
 80126ce:	801a      	strh	r2, [r3, #0]
			if(Ds18b20Timeout==0)
 80126d0:	4b2d      	ldr	r3, [pc, #180]	@ (8012788 <Task_Ds18b20+0x1cc>)
 80126d2:	881b      	ldrh	r3, [r3, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d006      	beq.n	80126e6 <Task_Ds18b20+0x12a>
    while (!DS18B20_AllDone(&OneWire))
 80126d8:	4826      	ldr	r0, [pc, #152]	@ (8012774 <Task_Ds18b20+0x1b8>)
 80126da:	f000 fa63 	bl	8012ba4 <DS18B20_AllDone>
 80126de:	4603      	mov	r3, r0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d0ec      	beq.n	80126be <Task_Ds18b20+0x102>
 80126e4:	e000      	b.n	80126e8 <Task_Ds18b20+0x12c>
				break;
 80126e6:	bf00      	nop
		}	
		if(Ds18b20Timeout>0)
 80126e8:	4b27      	ldr	r3, [pc, #156]	@ (8012788 <Task_Ds18b20+0x1cc>)
 80126ea:	881b      	ldrh	r3, [r3, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d025      	beq.n	801273c <Task_Ds18b20+0x180>
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 80126f0:	2300      	movs	r3, #0
 80126f2:	737b      	strb	r3, [r7, #13]
 80126f4:	e01c      	b.n	8012730 <Task_Ds18b20+0x174>
			{
				Ds18b20Delay(1000);
 80126f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80126fa:	f7fc fba7 	bl	800ee4c <osDelay>
				ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 80126fe:	7b7b      	ldrb	r3, [r7, #13]
 8012700:	011b      	lsls	r3, r3, #4
 8012702:	4a1f      	ldr	r2, [pc, #124]	@ (8012780 <Task_Ds18b20+0x1c4>)
 8012704:	1899      	adds	r1, r3, r2
 8012706:	7b7b      	ldrb	r3, [r7, #13]
 8012708:	011b      	lsls	r3, r3, #4
 801270a:	3308      	adds	r3, #8
 801270c:	4a1c      	ldr	r2, [pc, #112]	@ (8012780 <Task_Ds18b20+0x1c4>)
 801270e:	4413      	add	r3, r2
 8012710:	7b7c      	ldrb	r4, [r7, #13]
 8012712:	461a      	mov	r2, r3
 8012714:	4817      	ldr	r0, [pc, #92]	@ (8012774 <Task_Ds18b20+0x1b8>)
 8012716:	f000 f84f 	bl	80127b8 <DS18B20_Read>
 801271a:	4603      	mov	r3, r0
 801271c:	4619      	mov	r1, r3
 801271e:	4a18      	ldr	r2, [pc, #96]	@ (8012780 <Task_Ds18b20+0x1c4>)
 8012720:	0123      	lsls	r3, r4, #4
 8012722:	4413      	add	r3, r2
 8012724:	330c      	adds	r3, #12
 8012726:	460a      	mov	r2, r1
 8012728:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 801272a:	7b7b      	ldrb	r3, [r7, #13]
 801272c:	3301      	adds	r3, #1
 801272e:	737b      	strb	r3, [r7, #13]
 8012730:	4b11      	ldr	r3, [pc, #68]	@ (8012778 <Task_Ds18b20+0x1bc>)
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	7b7a      	ldrb	r2, [r7, #13]
 8012736:	429a      	cmp	r2, r3
 8012738:	d3dd      	bcc.n	80126f6 <Task_Ds18b20+0x13a>
 801273a:	e011      	b.n	8012760 <Task_Ds18b20+0x1a4>
			}
		}
		else
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 801273c:	2300      	movs	r3, #0
 801273e:	733b      	strb	r3, [r7, #12]
 8012740:	e009      	b.n	8012756 <Task_Ds18b20+0x19a>
				ds18b20[i].DataIsValid = false;
 8012742:	7b3b      	ldrb	r3, [r7, #12]
 8012744:	4a0e      	ldr	r2, [pc, #56]	@ (8012780 <Task_Ds18b20+0x1c4>)
 8012746:	011b      	lsls	r3, r3, #4
 8012748:	4413      	add	r3, r2
 801274a:	330c      	adds	r3, #12
 801274c:	2200      	movs	r2, #0
 801274e:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8012750:	7b3b      	ldrb	r3, [r7, #12]
 8012752:	3301      	adds	r3, #1
 8012754:	733b      	strb	r3, [r7, #12]
 8012756:	4b08      	ldr	r3, [pc, #32]	@ (8012778 <Task_Ds18b20+0x1bc>)
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	7b3a      	ldrb	r2, [r7, #12]
 801275c:	429a      	cmp	r2, r3
 801275e:	d3f0      	bcc.n	8012742 <Task_Ds18b20+0x186>
		}
		Ds18b20StartConvert=0;
 8012760:	4b0a      	ldr	r3, [pc, #40]	@ (801278c <Task_Ds18b20+0x1d0>)
 8012762:	2200      	movs	r2, #0
 8012764:	701a      	strb	r2, [r3, #0]
    osDelay(_DS18B20_UPDATE_INTERVAL_MS);
 8012766:	f242 7010 	movw	r0, #10000	@ 0x2710
 801276a:	f7fc fb6f 	bl	800ee4c <osDelay>
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 801276e:	e79a      	b.n	80126a6 <Task_Ds18b20+0xea>
 8012770:	58020800 	.word	0x58020800
 8012774:	24004d84 	.word	0x24004d84
 8012778:	24004d99 	.word	0x24004d99
 801277c:	24004d98 	.word	0x24004d98
 8012780:	24004d74 	.word	0x24004d74
 8012784:	24004da0 	.word	0x24004da0
 8012788:	24004d9c 	.word	0x24004d9c
 801278c:	24004d9a 	.word	0x24004d9a

08012790 <DS18B20_StartAll>:
	
	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 faa9 	bl	8012cf0 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 801279e:	21cc      	movs	r1, #204	@ 0xcc
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f000 fb2b 	bl	8012dfc <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 80127a6:	2144      	movs	r1, #68	@ 0x44
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f000 fb27 	bl	8012dfc <OneWire_WriteByte>
}
 80127ae:	bf00      	nop
 80127b0:	3708      	adds	r7, #8
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
	...

080127b8 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 80127b8:	b590      	push	{r4, r7, lr}
 80127ba:	b08b      	sub	sp, #44	@ 0x2c
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60f8      	str	r0, [r7, #12]
 80127c0:	60b9      	str	r1, [r7, #8]
 80127c2:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 80127c4:	2300      	movs	r3, #0
 80127c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 80127ca:	2300      	movs	r3, #0
 80127cc:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 80127ce:	68b8      	ldr	r0, [r7, #8]
 80127d0:	f000 f97c 	bl	8012acc <DS18B20_Is>
 80127d4:	4603      	mov	r3, r0
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d101      	bne.n	80127de <DS18B20_Read+0x26>
		return false;
 80127da:	2300      	movs	r3, #0
 80127dc:	e0e3      	b.n	80129a6 <DS18B20_Read+0x1ee>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 80127de:	68f8      	ldr	r0, [r7, #12]
 80127e0:	f000 fae2 	bl	8012da8 <OneWire_ReadBit>
 80127e4:	4603      	mov	r3, r0
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d101      	bne.n	80127ee <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 80127ea:	2300      	movs	r3, #0
 80127ec:	e0db      	b.n	80129a6 <DS18B20_Read+0x1ee>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 80127ee:	68f8      	ldr	r0, [r7, #12]
 80127f0:	f000 fa7e 	bl	8012cf0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80127f4:	68b9      	ldr	r1, [r7, #8]
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	f000 fc35 	bl	8013066 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80127fc:	21be      	movs	r1, #190	@ 0xbe
 80127fe:	68f8      	ldr	r0, [r7, #12]
 8012800:	f000 fafc 	bl	8012dfc <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 8012804:	2300      	movs	r3, #0
 8012806:	77fb      	strb	r3, [r7, #31]
 8012808:	e00d      	b.n	8012826 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 801280a:	7ffc      	ldrb	r4, [r7, #31]
 801280c:	68f8      	ldr	r0, [r7, #12]
 801280e:	f000 fb13 	bl	8012e38 <OneWire_ReadByte>
 8012812:	4603      	mov	r3, r0
 8012814:	461a      	mov	r2, r3
 8012816:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801281a:	443b      	add	r3, r7
 801281c:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 8012820:	7ffb      	ldrb	r3, [r7, #31]
 8012822:	3301      	adds	r3, #1
 8012824:	77fb      	strb	r3, [r7, #31]
 8012826:	7ffb      	ldrb	r3, [r7, #31]
 8012828:	2b08      	cmp	r3, #8
 801282a:	d9ee      	bls.n	801280a <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 801282c:	f107 0314 	add.w	r3, r7, #20
 8012830:	2108      	movs	r1, #8
 8012832:	4618      	mov	r0, r3
 8012834:	f000 fc53 	bl	80130de <OneWire_CRC8>
 8012838:	4603      	mov	r3, r0
 801283a:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 801283c:	7f3b      	ldrb	r3, [r7, #28]
 801283e:	7fba      	ldrb	r2, [r7, #30]
 8012840:	429a      	cmp	r2, r3
 8012842:	d001      	beq.n	8012848 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8012844:	2300      	movs	r3, #0
 8012846:	e0ae      	b.n	80129a6 <DS18B20_Read+0x1ee>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8012848:	7d3b      	ldrb	r3, [r7, #20]
 801284a:	b21a      	sxth	r2, r3
 801284c:	7d7b      	ldrb	r3, [r7, #21]
 801284e:	b21b      	sxth	r3, r3
 8012850:	021b      	lsls	r3, r3, #8
 8012852:	b21b      	sxth	r3, r3
 8012854:	4313      	orrs	r3, r2
 8012856:	b21b      	sxth	r3, r3
 8012858:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 801285a:	68f8      	ldr	r0, [r7, #12]
 801285c:	f000 fa48 	bl	8012cf0 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8012860:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012864:	2b00      	cmp	r3, #0
 8012866:	da05      	bge.n	8012874 <DS18B20_Read+0xbc>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8012868:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801286a:	425b      	negs	r3, r3
 801286c:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 801286e:	2301      	movs	r3, #1
 8012870:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8012874:	7e3b      	ldrb	r3, [r7, #24]
 8012876:	115b      	asrs	r3, r3, #5
 8012878:	b2db      	uxtb	r3, r3
 801287a:	f003 0303 	and.w	r3, r3, #3
 801287e:	b2db      	uxtb	r3, r3
 8012880:	3309      	adds	r3, #9
 8012882:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8012884:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012886:	091b      	lsrs	r3, r3, #4
 8012888:	b29b      	uxth	r3, r3
 801288a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 801288e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012890:	0a1b      	lsrs	r3, r3, #8
 8012892:	b29b      	uxth	r3, r3
 8012894:	b25b      	sxtb	r3, r3
 8012896:	011b      	lsls	r3, r3, #4
 8012898:	b25b      	sxtb	r3, r3
 801289a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801289e:	b25a      	sxtb	r2, r3
 80128a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80128a4:	4313      	orrs	r3, r2
 80128a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 80128aa:	7f7b      	ldrb	r3, [r7, #29]
 80128ac:	3b09      	subs	r3, #9
 80128ae:	2b03      	cmp	r3, #3
 80128b0:	d858      	bhi.n	8012964 <DS18B20_Read+0x1ac>
 80128b2:	a201      	add	r2, pc, #4	@ (adr r2, 80128b8 <DS18B20_Read+0x100>)
 80128b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128b8:	080128c9 	.word	0x080128c9
 80128bc:	080128f1 	.word	0x080128f1
 80128c0:	08012919 	.word	0x08012919
 80128c4:	08012941 	.word	0x08012941
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 80128c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80128ca:	08db      	lsrs	r3, r3, #3
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	f003 0301 	and.w	r3, r3, #1
 80128d2:	ee07 3a90 	vmov	s15, r3
 80128d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128da:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 80128de:	edd7 7a08 	vldr	s15, [r7, #32]
 80128e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80128e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80128ea:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 80128ee:	e03e      	b.n	801296e <DS18B20_Read+0x1b6>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 80128f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80128f2:	089b      	lsrs	r3, r3, #2
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	f003 0303 	and.w	r3, r3, #3
 80128fa:	ee07 3a90 	vmov	s15, r3
 80128fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012902:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8012906:	edd7 7a08 	vldr	s15, [r7, #32]
 801290a:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 801290e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012912:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8012916:	e02a      	b.n	801296e <DS18B20_Read+0x1b6>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 8012918:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801291a:	085b      	lsrs	r3, r3, #1
 801291c:	b29b      	uxth	r3, r3
 801291e:	f003 0307 	and.w	r3, r3, #7
 8012922:	ee07 3a90 	vmov	s15, r3
 8012926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801292a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 801292e:	edd7 7a08 	vldr	s15, [r7, #32]
 8012932:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8012936:	ee67 7a87 	vmul.f32	s15, s15, s14
 801293a:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 801293e:	e016      	b.n	801296e <DS18B20_Read+0x1b6>
		case 12: 
			decimal = temperature & 0x0F;
 8012940:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012942:	f003 030f 	and.w	r3, r3, #15
 8012946:	ee07 3a90 	vmov	s15, r3
 801294a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801294e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8012952:	edd7 7a08 	vldr	s15, [r7, #32]
 8012956:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80129b0 <DS18B20_Read+0x1f8>
 801295a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801295e:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8012962:	e004      	b.n	801296e <DS18B20_Read+0x1b6>
		default: 
			decimal = 0xFF;
 8012964:	4b13      	ldr	r3, [pc, #76]	@ (80129b4 <DS18B20_Read+0x1fc>)
 8012966:	623b      	str	r3, [r7, #32]
			digit = 0;
 8012968:	2300      	movs	r3, #0
 801296a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 801296e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012972:	ee07 3a90 	vmov	s15, r3
 8012976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801297a:	ed97 7a08 	vldr	s14, [r7, #32]
 801297e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012982:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus) 
 8012986:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 801298a:	2b00      	cmp	r3, #0
 801298c:	d007      	beq.n	801299e <DS18B20_Read+0x1e6>
		decimal = 0 - decimal;
 801298e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80129b8 <DS18B20_Read+0x200>
 8012992:	edd7 7a08 	vldr	s15, [r7, #32]
 8012996:	ee77 7a67 	vsub.f32	s15, s14, s15
 801299a:	edc7 7a08 	vstr	s15, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6a3a      	ldr	r2, [r7, #32]
 80129a2:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 80129a4:	2301      	movs	r3, #1
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	372c      	adds	r7, #44	@ 0x2c
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd90      	pop	{r4, r7, pc}
 80129ae:	bf00      	nop
 80129b0:	3d800000 	.word	0x3d800000
 80129b4:	437f0000 	.word	0x437f0000
 80129b8:	00000000 	.word	0x00000000

080129bc <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b086      	sub	sp, #24
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	60f8      	str	r0, [r7, #12]
 80129c4:	60b9      	str	r1, [r7, #8]
 80129c6:	4613      	mov	r3, r2
 80129c8:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 80129ca:	68b8      	ldr	r0, [r7, #8]
 80129cc:	f000 f87e 	bl	8012acc <DS18B20_Is>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d101      	bne.n	80129da <DS18B20_SetResolution+0x1e>
		return 0;
 80129d6:	2300      	movs	r3, #0
 80129d8:	e074      	b.n	8012ac4 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80129da:	68f8      	ldr	r0, [r7, #12]
 80129dc:	f000 f988 	bl	8012cf0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80129e0:	68b9      	ldr	r1, [r7, #8]
 80129e2:	68f8      	ldr	r0, [r7, #12]
 80129e4:	f000 fb3f 	bl	8013066 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80129e8:	21be      	movs	r1, #190	@ 0xbe
 80129ea:	68f8      	ldr	r0, [r7, #12]
 80129ec:	f000 fa06 	bl	8012dfc <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	f000 fa21 	bl	8012e38 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80129f6:	68f8      	ldr	r0, [r7, #12]
 80129f8:	f000 fa1e 	bl	8012e38 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 80129fc:	68f8      	ldr	r0, [r7, #12]
 80129fe:	f000 fa1b 	bl	8012e38 <OneWire_ReadByte>
 8012a02:	4603      	mov	r3, r0
 8012a04:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8012a06:	68f8      	ldr	r0, [r7, #12]
 8012a08:	f000 fa16 	bl	8012e38 <OneWire_ReadByte>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8012a10:	68f8      	ldr	r0, [r7, #12]
 8012a12:	f000 fa11 	bl	8012e38 <OneWire_ReadByte>
 8012a16:	4603      	mov	r3, r0
 8012a18:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 8012a1a:	79fb      	ldrb	r3, [r7, #7]
 8012a1c:	2b09      	cmp	r3, #9
 8012a1e:	d108      	bne.n	8012a32 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8012a20:	7dfb      	ldrb	r3, [r7, #23]
 8012a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012a26:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8012a28:	7dfb      	ldrb	r3, [r7, #23]
 8012a2a:	f023 0320 	bic.w	r3, r3, #32
 8012a2e:	75fb      	strb	r3, [r7, #23]
 8012a30:	e022      	b.n	8012a78 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 8012a32:	79fb      	ldrb	r3, [r7, #7]
 8012a34:	2b0a      	cmp	r3, #10
 8012a36:	d108      	bne.n	8012a4a <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8012a38:	7dfb      	ldrb	r3, [r7, #23]
 8012a3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012a3e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8012a40:	7dfb      	ldrb	r3, [r7, #23]
 8012a42:	f043 0320 	orr.w	r3, r3, #32
 8012a46:	75fb      	strb	r3, [r7, #23]
 8012a48:	e016      	b.n	8012a78 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8012a4a:	79fb      	ldrb	r3, [r7, #7]
 8012a4c:	2b0b      	cmp	r3, #11
 8012a4e:	d108      	bne.n	8012a62 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8012a50:	7dfb      	ldrb	r3, [r7, #23]
 8012a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a56:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8012a58:	7dfb      	ldrb	r3, [r7, #23]
 8012a5a:	f023 0320 	bic.w	r3, r3, #32
 8012a5e:	75fb      	strb	r3, [r7, #23]
 8012a60:	e00a      	b.n	8012a78 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8012a62:	79fb      	ldrb	r3, [r7, #7]
 8012a64:	2b0c      	cmp	r3, #12
 8012a66:	d107      	bne.n	8012a78 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8012a68:	7dfb      	ldrb	r3, [r7, #23]
 8012a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a6e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8012a70:	7dfb      	ldrb	r3, [r7, #23]
 8012a72:	f043 0320 	orr.w	r3, r3, #32
 8012a76:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8012a78:	68f8      	ldr	r0, [r7, #12]
 8012a7a:	f000 f939 	bl	8012cf0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8012a7e:	68b9      	ldr	r1, [r7, #8]
 8012a80:	68f8      	ldr	r0, [r7, #12]
 8012a82:	f000 faf0 	bl	8013066 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8012a86:	214e      	movs	r1, #78	@ 0x4e
 8012a88:	68f8      	ldr	r0, [r7, #12]
 8012a8a:	f000 f9b7 	bl	8012dfc <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8012a8e:	7dbb      	ldrb	r3, [r7, #22]
 8012a90:	4619      	mov	r1, r3
 8012a92:	68f8      	ldr	r0, [r7, #12]
 8012a94:	f000 f9b2 	bl	8012dfc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8012a98:	7d7b      	ldrb	r3, [r7, #21]
 8012a9a:	4619      	mov	r1, r3
 8012a9c:	68f8      	ldr	r0, [r7, #12]
 8012a9e:	f000 f9ad 	bl	8012dfc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8012aa2:	7dfb      	ldrb	r3, [r7, #23]
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	68f8      	ldr	r0, [r7, #12]
 8012aa8:	f000 f9a8 	bl	8012dfc <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8012aac:	68f8      	ldr	r0, [r7, #12]
 8012aae:	f000 f91f 	bl	8012cf0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8012ab2:	68b9      	ldr	r1, [r7, #8]
 8012ab4:	68f8      	ldr	r0, [r7, #12]
 8012ab6:	f000 fad6 	bl	8013066 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8012aba:	2148      	movs	r1, #72	@ 0x48
 8012abc:	68f8      	ldr	r0, [r7, #12]
 8012abe:	f000 f99d 	bl	8012dfc <OneWire_WriteByte>
	
	return 1;
 8012ac2:	2301      	movs	r3, #1
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3718      	adds	r7, #24
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}

08012acc <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	2b28      	cmp	r3, #40	@ 0x28
 8012ada:	d101      	bne.n	8012ae0 <DS18B20_Is+0x14>
		return 1;
 8012adc:	2301      	movs	r3, #1
 8012ade:	e000      	b.n	8012ae2 <DS18B20_Is+0x16>
	
	return 0;
 8012ae0:	2300      	movs	r3, #0
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	370c      	adds	r7, #12
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aec:	4770      	bx	lr

08012aee <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 8012aee:	b580      	push	{r7, lr}
 8012af0:	b084      	sub	sp, #16
 8012af2:	af00      	add	r7, sp, #0
 8012af4:	6078      	str	r0, [r7, #4]
 8012af6:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8012af8:	6838      	ldr	r0, [r7, #0]
 8012afa:	f7ff ffe7 	bl	8012acc <DS18B20_Is>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d101      	bne.n	8012b08 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8012b04:	2300      	movs	r3, #0
 8012b06:	e049      	b.n	8012b9c <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f000 f8f1 	bl	8012cf0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8012b0e:	6839      	ldr	r1, [r7, #0]
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f000 faa8 	bl	8013066 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8012b16:	21be      	movs	r1, #190	@ 0xbe
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f000 f96f 	bl	8012dfc <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	f000 f98a 	bl	8012e38 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f000 f987 	bl	8012e38 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f000 f984 	bl	8012e38 <OneWire_ReadByte>
 8012b30:	4603      	mov	r3, r0
 8012b32:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f000 f97f 	bl	8012e38 <OneWire_ReadByte>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f000 f97a 	bl	8012e38 <OneWire_ReadByte>
 8012b44:	4603      	mov	r3, r0
 8012b46:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8012b48:	237d      	movs	r3, #125	@ 0x7d
 8012b4a:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8012b4c:	23c9      	movs	r3, #201	@ 0xc9
 8012b4e:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f000 f8cd 	bl	8012cf0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8012b56:	6839      	ldr	r1, [r7, #0]
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f000 fa84 	bl	8013066 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8012b5e:	214e      	movs	r1, #78	@ 0x4e
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 f94b 	bl	8012dfc <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8012b66:	7bfb      	ldrb	r3, [r7, #15]
 8012b68:	4619      	mov	r1, r3
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f000 f946 	bl	8012dfc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8012b70:	7bbb      	ldrb	r3, [r7, #14]
 8012b72:	4619      	mov	r1, r3
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f000 f941 	bl	8012dfc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8012b7a:	7b7b      	ldrb	r3, [r7, #13]
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f000 f93c 	bl	8012dfc <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f000 f8b3 	bl	8012cf0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8012b8a:	6839      	ldr	r1, [r7, #0]
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f000 fa6a 	bl	8013066 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8012b92:	2148      	movs	r1, #72	@ 0x48
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f000 f931 	bl	8012dfc <OneWire_WriteByte>
	
	return 1;
 8012b9a:	2301      	movs	r3, #1
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3710      	adds	r7, #16
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 f8fb 	bl	8012da8 <OneWire_ReadBit>
 8012bb2:	4603      	mov	r3, r0
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3708      	adds	r7, #8
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <ONEWIRE_DELAY>:
#include "onewire.h"
#include "ds18b20Config.h"
#include "../../Core/Inc/tim.h"

void ONEWIRE_DELAY(uint16_t time_us)
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b083      	sub	sp, #12
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8012bc6:	4b09      	ldr	r3, [pc, #36]	@ (8012bec <ONEWIRE_DELAY+0x30>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8012bce:	bf00      	nop
 8012bd0:	4b06      	ldr	r3, [pc, #24]	@ (8012bec <ONEWIRE_DELAY+0x30>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012bd6:	88fb      	ldrh	r3, [r7, #6]
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d9f9      	bls.n	8012bd0 <ONEWIRE_DELAY+0x14>
}
 8012bdc:	bf00      	nop
 8012bde:	bf00      	nop
 8012be0:	370c      	adds	r7, #12
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr
 8012bea:	bf00      	nop
 8012bec:	24000254 	.word	0x24000254

08012bf0 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8012bf0:	b480      	push	{r7}
 8012bf2:	b083      	sub	sp, #12
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	889b      	ldrh	r3, [r3, #4]
 8012bfc:	461a      	mov	r2, r3
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	0412      	lsls	r2, r2, #16
 8012c04:	619a      	str	r2, [r3, #24]
}	
 8012c06:	bf00      	nop
 8012c08:	370c      	adds	r7, #12
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c10:	4770      	bx	lr

08012c12 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8012c12:	b480      	push	{r7}
 8012c14:	b083      	sub	sp, #12
 8012c16:	af00      	add	r7, sp, #0
 8012c18:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	889a      	ldrh	r2, [r3, #4]
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	619a      	str	r2, [r3, #24]
}	
 8012c24:	bf00      	nop
 8012c26:	370c      	adds	r7, #12
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2e:	4770      	bx	lr

08012c30 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b088      	sub	sp, #32
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8012c40:	2302      	movs	r3, #2
 8012c42:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;	
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	889b      	ldrh	r3, [r3, #4]
 8012c48:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	f107 020c 	add.w	r2, r7, #12
 8012c52:	4611      	mov	r1, r2
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7f0 fe03 	bl	8003860 <HAL_GPIO_Init>
}	
 8012c5a:	bf00      	nop
 8012c5c:	3720      	adds	r7, #32
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8012c62:	b580      	push	{r7, lr}
 8012c64:	b088      	sub	sp, #32
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8012c6a:	2311      	movs	r3, #17
 8012c6c:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8012c72:	2302      	movs	r3, #2
 8012c74:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	889b      	ldrh	r3, [r3, #4]
 8012c7a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	f107 020c 	add.w	r2, r7, #12
 8012c84:	4611      	mov	r1, r2
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7f0 fdea 	bl	8003860 <HAL_GPIO_Init>

}
 8012c8c:	bf00      	nop
 8012c8e:	3720      	adds	r7, #32
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}

08012c94 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	4613      	mov	r3, r2
 8012ca0:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8012ca2:	4812      	ldr	r0, [pc, #72]	@ (8012cec <OneWire_Init+0x58>)
 8012ca4:	f7f6 f8d2 	bl	8008e4c <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	68ba      	ldr	r2, [r7, #8]
 8012cac:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	88fa      	ldrh	r2, [r7, #6]
 8012cb2:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8012cb4:	68f8      	ldr	r0, [r7, #12]
 8012cb6:	f7ff ffd4 	bl	8012c62 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8012cba:	68f8      	ldr	r0, [r7, #12]
 8012cbc:	f7ff ffa9 	bl	8012c12 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8012cc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012cc4:	f7ee fcec 	bl	80016a0 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8012cc8:	68f8      	ldr	r0, [r7, #12]
 8012cca:	f7ff ff91 	bl	8012bf0 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8012cce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012cd2:	f7ee fce5 	bl	80016a0 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8012cd6:	68f8      	ldr	r0, [r7, #12]
 8012cd8:	f7ff ff9b 	bl	8012c12 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8012cdc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8012ce0:	f7ee fcde 	bl	80016a0 <HAL_Delay>
}
 8012ce4:	bf00      	nop
 8012ce6:	3710      	adds	r7, #16
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	24000254 	.word	0x24000254

08012cf0 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f7ff ff79 	bl	8012bf0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f7ff ffaf 	bl	8012c62 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8012d04:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8012d08:	f7ff ff58 	bl	8012bbc <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8012d0c:	2014      	movs	r0, #20
 8012d0e:	f7ff ff55 	bl	8012bbc <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f7ff ff8c 	bl	8012c30 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8012d18:	2046      	movs	r0, #70	@ 0x46
 8012d1a:	f7ff ff4f 	bl	8012bbc <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681a      	ldr	r2, [r3, #0]
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	889b      	ldrh	r3, [r3, #4]
 8012d26:	4619      	mov	r1, r3
 8012d28:	4610      	mov	r0, r2
 8012d2a:	f7f0 ff49 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8012d32:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8012d36:	f7ff ff41 	bl	8012bbc <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8012d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3710      	adds	r7, #16
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b082      	sub	sp, #8
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
 8012d4c:	460b      	mov	r3, r1
 8012d4e:	70fb      	strb	r3, [r7, #3]
	if (bit) 
 8012d50:	78fb      	ldrb	r3, [r7, #3]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d012      	beq.n	8012d7c <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f7ff ff4a 	bl	8012bf0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8012d5c:	6878      	ldr	r0, [r7, #4]
 8012d5e:	f7ff ff80 	bl	8012c62 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8012d62:	200a      	movs	r0, #10
 8012d64:	f7ff ff2a 	bl	8012bbc <ONEWIRE_DELAY>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7ff ff61 	bl	8012c30 <ONEWIRE_INPUT>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8012d6e:	2037      	movs	r0, #55	@ 0x37
 8012d70:	f7ff ff24 	bl	8012bbc <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f7ff ff5b 	bl	8012c30 <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8012d7a:	e011      	b.n	8012da0 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f7ff ff37 	bl	8012bf0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f7ff ff6d 	bl	8012c62 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 8012d88:	2041      	movs	r0, #65	@ 0x41
 8012d8a:	f7ff ff17 	bl	8012bbc <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f7ff ff4e 	bl	8012c30 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8012d94:	2005      	movs	r0, #5
 8012d96:	f7ff ff11 	bl	8012bbc <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f7ff ff48 	bl	8012c30 <ONEWIRE_INPUT>
}
 8012da0:	bf00      	nop
 8012da2:	3708      	adds	r7, #8
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}

08012da8 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b084      	sub	sp, #16
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8012db0:	2300      	movs	r3, #0
 8012db2:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff ff1b 	bl	8012bf0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f7ff ff51 	bl	8012c62 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 8012dc0:	2002      	movs	r0, #2
 8012dc2:	f7ff fefb 	bl	8012bbc <ONEWIRE_DELAY>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f7ff ff32 	bl	8012c30 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 8012dcc:	200a      	movs	r0, #10
 8012dce:	f7ff fef5 	bl	8012bbc <ONEWIRE_DELAY>
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	889b      	ldrh	r3, [r3, #4]
 8012dda:	4619      	mov	r1, r3
 8012ddc:	4610      	mov	r0, r2
 8012dde:	f7f0 feef 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8012de2:	4603      	mov	r3, r0
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d001      	beq.n	8012dec <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8012de8:	2301      	movs	r3, #1
 8012dea:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8012dec:	2032      	movs	r0, #50	@ 0x32
 8012dee:	f7ff fee5 	bl	8012bbc <ONEWIRE_DELAY>
	
	/* Return bit value */
	return bit;
 8012df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012df4:	4618      	mov	r0, r3
 8012df6:	3710      	adds	r7, #16
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	460b      	mov	r3, r1
 8012e06:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8012e08:	2308      	movs	r3, #8
 8012e0a:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8012e0c:	e00a      	b.n	8012e24 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8012e0e:	78fb      	ldrb	r3, [r7, #3]
 8012e10:	f003 0301 	and.w	r3, r3, #1
 8012e14:	b2db      	uxtb	r3, r3
 8012e16:	4619      	mov	r1, r3
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f7ff ff93 	bl	8012d44 <OneWire_WriteBit>
		byte >>= 1;
 8012e1e:	78fb      	ldrb	r3, [r7, #3]
 8012e20:	085b      	lsrs	r3, r3, #1
 8012e22:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8012e24:	7bfb      	ldrb	r3, [r7, #15]
 8012e26:	1e5a      	subs	r2, r3, #1
 8012e28:	73fa      	strb	r2, [r7, #15]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d1ef      	bne.n	8012e0e <OneWire_WriteByte+0x12>
	}
}
 8012e2e:	bf00      	nop
 8012e30:	bf00      	nop
 8012e32:	3710      	adds	r7, #16
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}

08012e38 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b084      	sub	sp, #16
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8012e40:	2308      	movs	r3, #8
 8012e42:	73fb      	strb	r3, [r7, #15]
 8012e44:	2300      	movs	r3, #0
 8012e46:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8012e48:	e00d      	b.n	8012e66 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8012e4a:	7bbb      	ldrb	r3, [r7, #14]
 8012e4c:	085b      	lsrs	r3, r3, #1
 8012e4e:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f7ff ffa9 	bl	8012da8 <OneWire_ReadBit>
 8012e56:	4603      	mov	r3, r0
 8012e58:	01db      	lsls	r3, r3, #7
 8012e5a:	b25a      	sxtb	r2, r3
 8012e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012e60:	4313      	orrs	r3, r2
 8012e62:	b25b      	sxtb	r3, r3
 8012e64:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8012e66:	7bfb      	ldrb	r3, [r7, #15]
 8012e68:	1e5a      	subs	r2, r3, #1
 8012e6a:	73fa      	strb	r2, [r7, #15]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d1ec      	bne.n	8012e4a <OneWire_ReadByte+0x12>
	}
	
	return byte;
 8012e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	3710      	adds	r7, #16
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}

08012e7a <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8012e7a:	b580      	push	{r7, lr}
 8012e7c:	b082      	sub	sp, #8
 8012e7e:	af00      	add	r7, sp, #0
 8012e80:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f000 f816 	bl	8012eb4 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8012e88:	21f0      	movs	r1, #240	@ 0xf0
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f000 f825 	bl	8012eda <OneWire_Search>
 8012e90:	4603      	mov	r3, r0
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3708      	adds	r7, #8
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}

08012e9a <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8012e9a:	b580      	push	{r7, lr}
 8012e9c:	b082      	sub	sp, #8
 8012e9e:	af00      	add	r7, sp, #0
 8012ea0:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8012ea2:	21f0      	movs	r1, #240	@ 0xf0
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f000 f818 	bl	8012eda <OneWire_Search>
 8012eaa:	4603      	mov	r3, r0
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	3708      	adds	r7, #8
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}

08012eb4 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8012eb4:	b480      	push	{r7}
 8012eb6:	b083      	sub	sp, #12
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	71da      	strb	r2, [r3, #7]
}
 8012ece:	bf00      	nop
 8012ed0:	370c      	adds	r7, #12
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr

08012eda <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8012eda:	b580      	push	{r7, lr}
 8012edc:	b084      	sub	sp, #16
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
 8012ee2:	460b      	mov	r3, r1
 8012ee4:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8012eea:	2300      	movs	r3, #0
 8012eec:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	7a1b      	ldrb	r3, [r3, #8]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	f040 809a 	bne.w	8013038 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) 
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f7ff fef3 	bl	8012cf0 <OneWire_Reset>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d00a      	beq.n	8012f26 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2200      	movs	r2, #0
 8012f14:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	71da      	strb	r2, [r3, #7]
			return 0;
 8012f22:	2300      	movs	r3, #0
 8012f24:	e09b      	b.n	801305e <OneWire_Search+0x184>
		}

		// issue the search command 
		OneWire_WriteByte(OneWireStruct, command);  
 8012f26:	78fb      	ldrb	r3, [r7, #3]
 8012f28:	4619      	mov	r1, r3
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7ff ff66 	bl	8012dfc <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f7ff ff39 	bl	8012da8 <OneWire_ReadBit>
 8012f36:	4603      	mov	r3, r0
 8012f38:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f7ff ff34 	bl	8012da8 <OneWire_ReadBit>
 8012f40:	4603      	mov	r3, r0
 8012f42:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8012f44:	7a7b      	ldrb	r3, [r7, #9]
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	d102      	bne.n	8012f50 <OneWire_Search+0x76>
 8012f4a:	7a3b      	ldrb	r3, [r7, #8]
 8012f4c:	2b01      	cmp	r3, #1
 8012f4e:	d064      	beq.n	801301a <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8012f50:	7a7a      	ldrb	r2, [r7, #9]
 8012f52:	7a3b      	ldrb	r3, [r7, #8]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d002      	beq.n	8012f5e <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8012f58:	7a7b      	ldrb	r3, [r7, #9]
 8012f5a:	72bb      	strb	r3, [r7, #10]
 8012f5c:	e026      	b.n	8012fac <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	799b      	ldrb	r3, [r3, #6]
 8012f62:	7bfa      	ldrb	r2, [r7, #15]
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d20d      	bcs.n	8012f84 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8012f68:	7b7b      	ldrb	r3, [r7, #13]
 8012f6a:	687a      	ldr	r2, [r7, #4]
 8012f6c:	4413      	add	r3, r2
 8012f6e:	7a5a      	ldrb	r2, [r3, #9]
 8012f70:	7afb      	ldrb	r3, [r7, #11]
 8012f72:	4013      	ands	r3, r2
 8012f74:	b2db      	uxtb	r3, r3
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	bf14      	ite	ne
 8012f7a:	2301      	movne	r3, #1
 8012f7c:	2300      	moveq	r3, #0
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	72bb      	strb	r3, [r7, #10]
 8012f82:	e008      	b.n	8012f96 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	799b      	ldrb	r3, [r3, #6]
 8012f88:	7bfa      	ldrb	r2, [r7, #15]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	bf0c      	ite	eq
 8012f8e:	2301      	moveq	r3, #1
 8012f90:	2300      	movne	r3, #0
 8012f92:	b2db      	uxtb	r3, r3
 8012f94:	72bb      	strb	r3, [r7, #10]
					}
					
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8012f96:	7abb      	ldrb	r3, [r7, #10]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d107      	bne.n	8012fac <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8012f9c:	7bfb      	ldrb	r3, [r7, #15]
 8012f9e:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8012fa0:	7bbb      	ldrb	r3, [r7, #14]
 8012fa2:	2b08      	cmp	r3, #8
 8012fa4:	d802      	bhi.n	8012fac <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	7bba      	ldrb	r2, [r7, #14]
 8012faa:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8012fac:	7abb      	ldrb	r3, [r7, #10]
 8012fae:	2b01      	cmp	r3, #1
 8012fb0:	d10c      	bne.n	8012fcc <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8012fb2:	7b7b      	ldrb	r3, [r7, #13]
 8012fb4:	687a      	ldr	r2, [r7, #4]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	7a59      	ldrb	r1, [r3, #9]
 8012fba:	7b7b      	ldrb	r3, [r7, #13]
 8012fbc:	7afa      	ldrb	r2, [r7, #11]
 8012fbe:	430a      	orrs	r2, r1
 8012fc0:	b2d1      	uxtb	r1, r2
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	4413      	add	r3, r2
 8012fc6:	460a      	mov	r2, r1
 8012fc8:	725a      	strb	r2, [r3, #9]
 8012fca:	e010      	b.n	8012fee <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8012fcc:	7b7b      	ldrb	r3, [r7, #13]
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	4413      	add	r3, r2
 8012fd2:	7a5b      	ldrb	r3, [r3, #9]
 8012fd4:	b25a      	sxtb	r2, r3
 8012fd6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012fda:	43db      	mvns	r3, r3
 8012fdc:	b25b      	sxtb	r3, r3
 8012fde:	4013      	ands	r3, r2
 8012fe0:	b25a      	sxtb	r2, r3
 8012fe2:	7b7b      	ldrb	r3, [r7, #13]
 8012fe4:	b2d1      	uxtb	r1, r2
 8012fe6:	687a      	ldr	r2, [r7, #4]
 8012fe8:	4413      	add	r3, r2
 8012fea:	460a      	mov	r2, r1
 8012fec:	725a      	strb	r2, [r3, #9]
				}
				
				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 8012fee:	7abb      	ldrb	r3, [r7, #10]
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7ff fea6 	bl	8012d44 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8012ff8:	7bfb      	ldrb	r3, [r7, #15]
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8012ffe:	7afb      	ldrb	r3, [r7, #11]
 8013000:	005b      	lsls	r3, r3, #1
 8013002:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8013004:	7afb      	ldrb	r3, [r7, #11]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d104      	bne.n	8013014 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 801300a:	7b7b      	ldrb	r3, [r7, #13]
 801300c:	3301      	adds	r3, #1
 801300e:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8013010:	2301      	movs	r3, #1
 8013012:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8013014:	7b7b      	ldrb	r3, [r7, #13]
 8013016:	2b07      	cmp	r3, #7
 8013018:	d98a      	bls.n	8012f30 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 801301a:	7bfb      	ldrb	r3, [r7, #15]
 801301c:	2b40      	cmp	r3, #64	@ 0x40
 801301e:	d90b      	bls.n	8013038 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	7bba      	ldrb	r2, [r7, #14]
 8013024:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	799b      	ldrb	r3, [r3, #6]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d102      	bne.n	8013034 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2201      	movs	r2, #1
 8013032:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8013034:	2301      	movs	r3, #1
 8013036:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8013038:	7b3b      	ldrb	r3, [r7, #12]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d003      	beq.n	8013046 <OneWire_Search+0x16c>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	7a5b      	ldrb	r3, [r3, #9]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d10a      	bne.n	801305c <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2200      	movs	r2, #0
 801304a:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2200      	movs	r2, #0
 8013050:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2200      	movs	r2, #0
 8013056:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8013058:	2300      	movs	r3, #0
 801305a:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 801305c:	7b3b      	ldrb	r3, [r7, #12]
}
 801305e:	4618      	mov	r0, r3
 8013060:	3710      	adds	r7, #16
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}

08013066 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8013066:	b580      	push	{r7, lr}
 8013068:	b084      	sub	sp, #16
 801306a:	af00      	add	r7, sp, #0
 801306c:	6078      	str	r0, [r7, #4]
 801306e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8013070:	2155      	movs	r1, #85	@ 0x55
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f7ff fec2 	bl	8012dfc <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 8013078:	2300      	movs	r3, #0
 801307a:	73fb      	strb	r3, [r7, #15]
 801307c:	e00a      	b.n	8013094 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 801307e:	7bfb      	ldrb	r3, [r7, #15]
 8013080:	683a      	ldr	r2, [r7, #0]
 8013082:	4413      	add	r3, r2
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	4619      	mov	r1, r3
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f7ff feb7 	bl	8012dfc <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 801308e:	7bfb      	ldrb	r3, [r7, #15]
 8013090:	3301      	adds	r3, #1
 8013092:	73fb      	strb	r3, [r7, #15]
 8013094:	7bfb      	ldrb	r3, [r7, #15]
 8013096:	2b07      	cmp	r3, #7
 8013098:	d9f1      	bls.n	801307e <OneWire_SelectWithPointer+0x18>
	}	
}
 801309a:	bf00      	nop
 801309c:	bf00      	nop
 801309e:	3710      	adds	r7, #16
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 80130a4:	b480      	push	{r7}
 80130a6:	b085      	sub	sp, #20
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80130ae:	2300      	movs	r3, #0
 80130b0:	73fb      	strb	r3, [r7, #15]
 80130b2:	e00a      	b.n	80130ca <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80130b4:	7bfa      	ldrb	r2, [r7, #15]
 80130b6:	7bfb      	ldrb	r3, [r7, #15]
 80130b8:	6839      	ldr	r1, [r7, #0]
 80130ba:	440b      	add	r3, r1
 80130bc:	6879      	ldr	r1, [r7, #4]
 80130be:	440a      	add	r2, r1
 80130c0:	7a52      	ldrb	r2, [r2, #9]
 80130c2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80130c4:	7bfb      	ldrb	r3, [r7, #15]
 80130c6:	3301      	adds	r3, #1
 80130c8:	73fb      	strb	r3, [r7, #15]
 80130ca:	7bfb      	ldrb	r3, [r7, #15]
 80130cc:	2b07      	cmp	r3, #7
 80130ce:	d9f1      	bls.n	80130b4 <OneWire_GetFullROM+0x10>
	}
}
 80130d0:	bf00      	nop
 80130d2:	bf00      	nop
 80130d4:	3714      	adds	r7, #20
 80130d6:	46bd      	mov	sp, r7
 80130d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130dc:	4770      	bx	lr

080130de <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80130de:	b480      	push	{r7}
 80130e0:	b085      	sub	sp, #20
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	6078      	str	r0, [r7, #4]
 80130e6:	460b      	mov	r3, r1
 80130e8:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 80130ea:	2300      	movs	r3, #0
 80130ec:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 80130ee:	e022      	b.n	8013136 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	1c5a      	adds	r2, r3, #1
 80130f4:	607a      	str	r2, [r7, #4]
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80130fa:	2308      	movs	r3, #8
 80130fc:	737b      	strb	r3, [r7, #13]
 80130fe:	e017      	b.n	8013130 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8013100:	7bfa      	ldrb	r2, [r7, #15]
 8013102:	7bbb      	ldrb	r3, [r7, #14]
 8013104:	4053      	eors	r3, r2
 8013106:	b2db      	uxtb	r3, r3
 8013108:	f003 0301 	and.w	r3, r3, #1
 801310c:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 801310e:	7bfb      	ldrb	r3, [r7, #15]
 8013110:	085b      	lsrs	r3, r3, #1
 8013112:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8013114:	7b3b      	ldrb	r3, [r7, #12]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d004      	beq.n	8013124 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 801311a:	7bfb      	ldrb	r3, [r7, #15]
 801311c:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8013120:	43db      	mvns	r3, r3
 8013122:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8013124:	7bbb      	ldrb	r3, [r7, #14]
 8013126:	085b      	lsrs	r3, r3, #1
 8013128:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 801312a:	7b7b      	ldrb	r3, [r7, #13]
 801312c:	3b01      	subs	r3, #1
 801312e:	737b      	strb	r3, [r7, #13]
 8013130:	7b7b      	ldrb	r3, [r7, #13]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d1e4      	bne.n	8013100 <OneWire_CRC8+0x22>
	while (len--) {
 8013136:	78fb      	ldrb	r3, [r7, #3]
 8013138:	1e5a      	subs	r2, r3, #1
 801313a:	70fa      	strb	r2, [r7, #3]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d1d7      	bne.n	80130f0 <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 8013140:	7bfb      	ldrb	r3, [r7, #15]
}
 8013142:	4618      	mov	r0, r3
 8013144:	3714      	adds	r7, #20
 8013146:	46bd      	mov	sp, r7
 8013148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314c:	4770      	bx	lr
	...

08013150 <batterie_task>:
#include "batteries_task.h"

extern osThreadId_t batterieHandle;

void batterie_task(void *argument)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
	//setup

	int adc_reading = 0;
 8013158:	2300      	movs	r3, #0
 801315a:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit_IT(&huart3, "Batt\n", 6);

	//loop
	while(1)
	{
		HAL_ADC_Start_IT(&hadc1);
 801315c:	4807      	ldr	r0, [pc, #28]	@ (801317c <batterie_task+0x2c>)
 801315e:	f7ee fe65 	bl	8001e2c <HAL_ADC_Start_IT>
		osThreadYield();
 8013162:	f7fb fe53 	bl	800ee0c <osThreadYield>

		adc_reading = HAL_ADC_GetValue(&hadc1);
 8013166:	4805      	ldr	r0, [pc, #20]	@ (801317c <batterie_task+0x2c>)
 8013168:	f7ee ff9e 	bl	80020a8 <HAL_ADC_GetValue>
 801316c:	4603      	mov	r3, r0
 801316e:	60fb      	str	r3, [r7, #12]


			// Start next conversion
		osDelay(ADC_SAMPLE_PERIOD_UC);
 8013170:	4803      	ldr	r0, [pc, #12]	@ (8013180 <batterie_task+0x30>)
 8013172:	f7fb fe6b 	bl	800ee4c <osDelay>
		HAL_ADC_Start_IT(&hadc1);
 8013176:	bf00      	nop
 8013178:	e7f0      	b.n	801315c <batterie_task+0xc>
 801317a:	bf00      	nop
 801317c:	24000080 	.word	0x24000080
 8013180:	000927c0 	.word	0x000927c0

08013184 <cnss_task>:
 */

#include "cnss_task.h"

void cnss_task(void *argument)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b092      	sub	sp, #72	@ 0x48
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
	void ac_gnss_request (recived_buffer);
	//HAL_UART_Transmit_IT(&huart3, "Gnss\n", 5);
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 801318c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013190:	f7fb fe5c 	bl	800ee4c <osDelay>
 8013194:	e7fa      	b.n	801318c <cnss_task+0x8>
	...

08013198 <imu_task>:
 */

#include "imu_task.h"

void imu_task(void *argument)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b082      	sub	sp, #8
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
	//loop
	while(1)
	{
		//to implement yet
		//osDelay(IMU_SAMPLE_PERIOD_UC);
		HAL_UART_Transmit_IT(&huart3, "Test\n", 6);
 80131a0:	2206      	movs	r2, #6
 80131a2:	4905      	ldr	r1, [pc, #20]	@ (80131b8 <imu_task+0x20>)
 80131a4:	4805      	ldr	r0, [pc, #20]	@ (80131bc <imu_task+0x24>)
 80131a6:	f7f6 fb9b 	bl	80098e0 <HAL_UART_Transmit_IT>
		osDelay(1000);
 80131aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80131ae:	f7fb fe4d 	bl	800ee4c <osDelay>
		HAL_UART_Transmit_IT(&huart3, "Test\n", 6);
 80131b2:	bf00      	nop
 80131b4:	e7f4      	b.n	80131a0 <imu_task+0x8>
 80131b6:	bf00      	nop
 80131b8:	08013d04 	.word	0x08013d04
 80131bc:	240002a0 	.word	0x240002a0

080131c0 <nb_iot_task>:
		[%u, %u, %u]
	],
	\"errors\": %u}
*/
void nb_iot_task(void *argument)
{
 80131c0:	b5b0      	push	{r4, r5, r7, lr}
 80131c2:	b0c8      	sub	sp, #288	@ 0x120
 80131c4:	af04      	add	r7, sp, #16
 80131c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80131ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80131ce:	6018      	str	r0, [r3, #0]
	//setup
	package_data_t* ready_to_send;
	char ready_buffer[255];
	ready_to_send = read_package_data();
 80131d0:	f7ff f9b2 	bl	8012538 <read_package_data>
 80131d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	sprintf
	(
			ready_buffer,
	"{\"power_level\": %u, \"temperature\": [%u, %u, %u], \"imu\": [%u, %u, %u], \"gnss\": [[%u, %u, %u], [%u, %u, %u]], \"errors\": %u}",
			ready_to_send->power_level,
 80131d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80131dc:	881b      	ldrh	r3, [r3, #0]
	sprintf
 80131de:	461d      	mov	r5, r3
			ready_to_send->temperature,
 80131e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80131e4:	1c9c      	adds	r4, r3, #2
			ready_to_send->imu,
 80131e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80131ea:	3316      	adds	r3, #22
			ready_to_send->gnss,
 80131ec:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80131f0:	322a      	adds	r2, #42	@ 0x2a
			ready_to_send->errors
 80131f2:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 80131f6:	f8b1 1052 	ldrh.w	r1, [r1, #82]	@ 0x52
	sprintf
 80131fa:	f107 000c 	add.w	r0, r7, #12
 80131fe:	9102      	str	r1, [sp, #8]
 8013200:	9201      	str	r2, [sp, #4]
 8013202:	9300      	str	r3, [sp, #0]
 8013204:	4623      	mov	r3, r4
 8013206:	462a      	mov	r2, r5
 8013208:	4904      	ldr	r1, [pc, #16]	@ (801321c <nb_iot_task+0x5c>)
 801320a:	f000 f87d 	bl	8013308 <siprintf>
	);

	update_package_data();
 801320e:	f7ff f9ab 	bl	8012568 <update_package_data>

	//HAL_UART_Transmit_IT(&huart3, "NB-Iot\n", 7);
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 8013212:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013216:	f7fb fe19 	bl	800ee4c <osDelay>
 801321a:	e7fa      	b.n	8013212 <nb_iot_task+0x52>
 801321c:	08013d0c 	.word	0x08013d0c

08013220 <sd_card_task>:
FRESULT res;
// File write count
UINT bw;

void sd_card_task(void *argument)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b0c2      	sub	sp, #264	@ 0x108
 8013224:	af00      	add	r7, sp, #0
 8013226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801322a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801322e:	6018      	str	r0, [r3, #0]
	//setup
	char to_store[255];
	write_to_sd_card(to_store);
 8013230:	f107 0308 	add.w	r3, r7, #8
 8013234:	4618      	mov	r0, r3
 8013236:	f000 f805 	bl	8013244 <write_to_sd_card>
	//loop


	while(1)
	{
		osDelay(DELAY_MAX);
 801323a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801323e:	f7fb fe05 	bl	800ee4c <osDelay>
 8013242:	e7fa      	b.n	801323a <sd_card_task+0x1a>

08013244 <write_to_sd_card>:
	}

}

void write_to_sd_card(char *to_send)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
    // Mount SD Card
    res = f_mount(&fs, "", 1);
 801324c:	2201      	movs	r2, #1
 801324e:	4922      	ldr	r1, [pc, #136]	@ (80132d8 <write_to_sd_card+0x94>)
 8013250:	4822      	ldr	r0, [pc, #136]	@ (80132dc <write_to_sd_card+0x98>)
 8013252:	f7fa ff5f 	bl	800e114 <f_mount>
 8013256:	4603      	mov	r3, r0
 8013258:	461a      	mov	r2, r3
 801325a:	4b21      	ldr	r3, [pc, #132]	@ (80132e0 <write_to_sd_card+0x9c>)
 801325c:	701a      	strb	r2, [r3, #0]
    if (res != FR_OK)
 801325e:	4b20      	ldr	r3, [pc, #128]	@ (80132e0 <write_to_sd_card+0x9c>)
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d001      	beq.n	801326a <write_to_sd_card+0x26>
    {
        Error_Handler();  // Custom error function
 8013266:	f7ed fde7 	bl	8000e38 <Error_Handler>
    }

    // Open or create file to write
    res = f_open(&fil, "log.txt", FA_WRITE | FA_CREATE_ALWAYS);
 801326a:	220a      	movs	r2, #10
 801326c:	491d      	ldr	r1, [pc, #116]	@ (80132e4 <write_to_sd_card+0xa0>)
 801326e:	481e      	ldr	r0, [pc, #120]	@ (80132e8 <write_to_sd_card+0xa4>)
 8013270:	f7fa ffb4 	bl	800e1dc <f_open>
 8013274:	4603      	mov	r3, r0
 8013276:	461a      	mov	r2, r3
 8013278:	4b19      	ldr	r3, [pc, #100]	@ (80132e0 <write_to_sd_card+0x9c>)
 801327a:	701a      	strb	r2, [r3, #0]
    if (res != FR_OK)
 801327c:	4b18      	ldr	r3, [pc, #96]	@ (80132e0 <write_to_sd_card+0x9c>)
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d001      	beq.n	8013288 <write_to_sd_card+0x44>
    {
        Error_Handler();
 8013284:	f7ed fdd8 	bl	8000e38 <Error_Handler>
    }

    // Write a string to the file
    res = f_write(&fil, to_send, strlen(to_send), &bw);
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f7ed f829 	bl	80002e0 <strlen>
 801328e:	4602      	mov	r2, r0
 8013290:	4b16      	ldr	r3, [pc, #88]	@ (80132ec <write_to_sd_card+0xa8>)
 8013292:	6879      	ldr	r1, [r7, #4]
 8013294:	4814      	ldr	r0, [pc, #80]	@ (80132e8 <write_to_sd_card+0xa4>)
 8013296:	f7fb f962 	bl	800e55e <f_write>
 801329a:	4603      	mov	r3, r0
 801329c:	461a      	mov	r2, r3
 801329e:	4b10      	ldr	r3, [pc, #64]	@ (80132e0 <write_to_sd_card+0x9c>)
 80132a0:	701a      	strb	r2, [r3, #0]
    if (res != FR_OK || bw < strlen(to_send))
 80132a2:	4b0f      	ldr	r3, [pc, #60]	@ (80132e0 <write_to_sd_card+0x9c>)
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d107      	bne.n	80132ba <write_to_sd_card+0x76>
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f7ed f818 	bl	80002e0 <strlen>
 80132b0:	4602      	mov	r2, r0
 80132b2:	4b0e      	ldr	r3, [pc, #56]	@ (80132ec <write_to_sd_card+0xa8>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d901      	bls.n	80132be <write_to_sd_card+0x7a>
    {
        Error_Handler();
 80132ba:	f7ed fdbd 	bl	8000e38 <Error_Handler>
    }

    // Close the file
    f_close(&fil);
 80132be:	480a      	ldr	r0, [pc, #40]	@ (80132e8 <write_to_sd_card+0xa4>)
 80132c0:	f7fb fb7a 	bl	800e9b8 <f_close>

    // Unmount the SD card
    f_mount(NULL, "", 1);
 80132c4:	2201      	movs	r2, #1
 80132c6:	4904      	ldr	r1, [pc, #16]	@ (80132d8 <write_to_sd_card+0x94>)
 80132c8:	2000      	movs	r0, #0
 80132ca:	f7fa ff23 	bl	800e114 <f_mount>
}
 80132ce:	bf00      	nop
 80132d0:	3708      	adds	r7, #8
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
 80132d6:	bf00      	nop
 80132d8:	08013d88 	.word	0x08013d88
 80132dc:	24004da4 	.word	0x24004da4
 80132e0:	24005208 	.word	0x24005208
 80132e4:	08013d8c 	.word	0x08013d8c
 80132e8:	24004fd8 	.word	0x24004fd8
 80132ec:	2400520c 	.word	0x2400520c

080132f0 <temp_task>:
 */

#include "temp_task.h"

void temp_task(void *argument)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
	//setup

	//HAL_UART_Transmit_IT(&huart3, "Temp\n", 5);

	Ds18b20_Init((osPriority_t) osPriorityLow);
 80132f8:	2008      	movs	r0, #8
 80132fa:	f7ff f949 	bl	8012590 <Ds18b20_Init>
	//loop
	while(1)
	{
		//one wire comunication
		osDelay(DELAY_MAX);
 80132fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013302:	f7fb fda3 	bl	800ee4c <osDelay>
 8013306:	e7fa      	b.n	80132fe <temp_task+0xe>

08013308 <siprintf>:
 8013308:	b40e      	push	{r1, r2, r3}
 801330a:	b510      	push	{r4, lr}
 801330c:	b09d      	sub	sp, #116	@ 0x74
 801330e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013310:	9002      	str	r0, [sp, #8]
 8013312:	9006      	str	r0, [sp, #24]
 8013314:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013318:	480a      	ldr	r0, [pc, #40]	@ (8013344 <siprintf+0x3c>)
 801331a:	9107      	str	r1, [sp, #28]
 801331c:	9104      	str	r1, [sp, #16]
 801331e:	490a      	ldr	r1, [pc, #40]	@ (8013348 <siprintf+0x40>)
 8013320:	f853 2b04 	ldr.w	r2, [r3], #4
 8013324:	9105      	str	r1, [sp, #20]
 8013326:	2400      	movs	r4, #0
 8013328:	a902      	add	r1, sp, #8
 801332a:	6800      	ldr	r0, [r0, #0]
 801332c:	9301      	str	r3, [sp, #4]
 801332e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013330:	f000 f9a2 	bl	8013678 <_svfiprintf_r>
 8013334:	9b02      	ldr	r3, [sp, #8]
 8013336:	701c      	strb	r4, [r3, #0]
 8013338:	b01d      	add	sp, #116	@ 0x74
 801333a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801333e:	b003      	add	sp, #12
 8013340:	4770      	bx	lr
 8013342:	bf00      	nop
 8013344:	24000014 	.word	0x24000014
 8013348:	ffff0208 	.word	0xffff0208

0801334c <memset>:
 801334c:	4402      	add	r2, r0
 801334e:	4603      	mov	r3, r0
 8013350:	4293      	cmp	r3, r2
 8013352:	d100      	bne.n	8013356 <memset+0xa>
 8013354:	4770      	bx	lr
 8013356:	f803 1b01 	strb.w	r1, [r3], #1
 801335a:	e7f9      	b.n	8013350 <memset+0x4>

0801335c <__errno>:
 801335c:	4b01      	ldr	r3, [pc, #4]	@ (8013364 <__errno+0x8>)
 801335e:	6818      	ldr	r0, [r3, #0]
 8013360:	4770      	bx	lr
 8013362:	bf00      	nop
 8013364:	24000014 	.word	0x24000014

08013368 <__libc_init_array>:
 8013368:	b570      	push	{r4, r5, r6, lr}
 801336a:	4d0d      	ldr	r5, [pc, #52]	@ (80133a0 <__libc_init_array+0x38>)
 801336c:	4c0d      	ldr	r4, [pc, #52]	@ (80133a4 <__libc_init_array+0x3c>)
 801336e:	1b64      	subs	r4, r4, r5
 8013370:	10a4      	asrs	r4, r4, #2
 8013372:	2600      	movs	r6, #0
 8013374:	42a6      	cmp	r6, r4
 8013376:	d109      	bne.n	801338c <__libc_init_array+0x24>
 8013378:	4d0b      	ldr	r5, [pc, #44]	@ (80133a8 <__libc_init_array+0x40>)
 801337a:	4c0c      	ldr	r4, [pc, #48]	@ (80133ac <__libc_init_array+0x44>)
 801337c:	f000 fc64 	bl	8013c48 <_init>
 8013380:	1b64      	subs	r4, r4, r5
 8013382:	10a4      	asrs	r4, r4, #2
 8013384:	2600      	movs	r6, #0
 8013386:	42a6      	cmp	r6, r4
 8013388:	d105      	bne.n	8013396 <__libc_init_array+0x2e>
 801338a:	bd70      	pop	{r4, r5, r6, pc}
 801338c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013390:	4798      	blx	r3
 8013392:	3601      	adds	r6, #1
 8013394:	e7ee      	b.n	8013374 <__libc_init_array+0xc>
 8013396:	f855 3b04 	ldr.w	r3, [r5], #4
 801339a:	4798      	blx	r3
 801339c:	3601      	adds	r6, #1
 801339e:	e7f2      	b.n	8013386 <__libc_init_array+0x1e>
 80133a0:	08013fbc 	.word	0x08013fbc
 80133a4:	08013fbc 	.word	0x08013fbc
 80133a8:	08013fbc 	.word	0x08013fbc
 80133ac:	08013fc0 	.word	0x08013fc0

080133b0 <__retarget_lock_acquire_recursive>:
 80133b0:	4770      	bx	lr

080133b2 <__retarget_lock_release_recursive>:
 80133b2:	4770      	bx	lr

080133b4 <memcpy>:
 80133b4:	440a      	add	r2, r1
 80133b6:	4291      	cmp	r1, r2
 80133b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80133bc:	d100      	bne.n	80133c0 <memcpy+0xc>
 80133be:	4770      	bx	lr
 80133c0:	b510      	push	{r4, lr}
 80133c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80133ca:	4291      	cmp	r1, r2
 80133cc:	d1f9      	bne.n	80133c2 <memcpy+0xe>
 80133ce:	bd10      	pop	{r4, pc}

080133d0 <_free_r>:
 80133d0:	b538      	push	{r3, r4, r5, lr}
 80133d2:	4605      	mov	r5, r0
 80133d4:	2900      	cmp	r1, #0
 80133d6:	d041      	beq.n	801345c <_free_r+0x8c>
 80133d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80133dc:	1f0c      	subs	r4, r1, #4
 80133de:	2b00      	cmp	r3, #0
 80133e0:	bfb8      	it	lt
 80133e2:	18e4      	addlt	r4, r4, r3
 80133e4:	f000 f8e0 	bl	80135a8 <__malloc_lock>
 80133e8:	4a1d      	ldr	r2, [pc, #116]	@ (8013460 <_free_r+0x90>)
 80133ea:	6813      	ldr	r3, [r2, #0]
 80133ec:	b933      	cbnz	r3, 80133fc <_free_r+0x2c>
 80133ee:	6063      	str	r3, [r4, #4]
 80133f0:	6014      	str	r4, [r2, #0]
 80133f2:	4628      	mov	r0, r5
 80133f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133f8:	f000 b8dc 	b.w	80135b4 <__malloc_unlock>
 80133fc:	42a3      	cmp	r3, r4
 80133fe:	d908      	bls.n	8013412 <_free_r+0x42>
 8013400:	6820      	ldr	r0, [r4, #0]
 8013402:	1821      	adds	r1, r4, r0
 8013404:	428b      	cmp	r3, r1
 8013406:	bf01      	itttt	eq
 8013408:	6819      	ldreq	r1, [r3, #0]
 801340a:	685b      	ldreq	r3, [r3, #4]
 801340c:	1809      	addeq	r1, r1, r0
 801340e:	6021      	streq	r1, [r4, #0]
 8013410:	e7ed      	b.n	80133ee <_free_r+0x1e>
 8013412:	461a      	mov	r2, r3
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	b10b      	cbz	r3, 801341c <_free_r+0x4c>
 8013418:	42a3      	cmp	r3, r4
 801341a:	d9fa      	bls.n	8013412 <_free_r+0x42>
 801341c:	6811      	ldr	r1, [r2, #0]
 801341e:	1850      	adds	r0, r2, r1
 8013420:	42a0      	cmp	r0, r4
 8013422:	d10b      	bne.n	801343c <_free_r+0x6c>
 8013424:	6820      	ldr	r0, [r4, #0]
 8013426:	4401      	add	r1, r0
 8013428:	1850      	adds	r0, r2, r1
 801342a:	4283      	cmp	r3, r0
 801342c:	6011      	str	r1, [r2, #0]
 801342e:	d1e0      	bne.n	80133f2 <_free_r+0x22>
 8013430:	6818      	ldr	r0, [r3, #0]
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	6053      	str	r3, [r2, #4]
 8013436:	4408      	add	r0, r1
 8013438:	6010      	str	r0, [r2, #0]
 801343a:	e7da      	b.n	80133f2 <_free_r+0x22>
 801343c:	d902      	bls.n	8013444 <_free_r+0x74>
 801343e:	230c      	movs	r3, #12
 8013440:	602b      	str	r3, [r5, #0]
 8013442:	e7d6      	b.n	80133f2 <_free_r+0x22>
 8013444:	6820      	ldr	r0, [r4, #0]
 8013446:	1821      	adds	r1, r4, r0
 8013448:	428b      	cmp	r3, r1
 801344a:	bf04      	itt	eq
 801344c:	6819      	ldreq	r1, [r3, #0]
 801344e:	685b      	ldreq	r3, [r3, #4]
 8013450:	6063      	str	r3, [r4, #4]
 8013452:	bf04      	itt	eq
 8013454:	1809      	addeq	r1, r1, r0
 8013456:	6021      	streq	r1, [r4, #0]
 8013458:	6054      	str	r4, [r2, #4]
 801345a:	e7ca      	b.n	80133f2 <_free_r+0x22>
 801345c:	bd38      	pop	{r3, r4, r5, pc}
 801345e:	bf00      	nop
 8013460:	24005354 	.word	0x24005354

08013464 <sbrk_aligned>:
 8013464:	b570      	push	{r4, r5, r6, lr}
 8013466:	4e0f      	ldr	r6, [pc, #60]	@ (80134a4 <sbrk_aligned+0x40>)
 8013468:	460c      	mov	r4, r1
 801346a:	6831      	ldr	r1, [r6, #0]
 801346c:	4605      	mov	r5, r0
 801346e:	b911      	cbnz	r1, 8013476 <sbrk_aligned+0x12>
 8013470:	f000 fba4 	bl	8013bbc <_sbrk_r>
 8013474:	6030      	str	r0, [r6, #0]
 8013476:	4621      	mov	r1, r4
 8013478:	4628      	mov	r0, r5
 801347a:	f000 fb9f 	bl	8013bbc <_sbrk_r>
 801347e:	1c43      	adds	r3, r0, #1
 8013480:	d103      	bne.n	801348a <sbrk_aligned+0x26>
 8013482:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013486:	4620      	mov	r0, r4
 8013488:	bd70      	pop	{r4, r5, r6, pc}
 801348a:	1cc4      	adds	r4, r0, #3
 801348c:	f024 0403 	bic.w	r4, r4, #3
 8013490:	42a0      	cmp	r0, r4
 8013492:	d0f8      	beq.n	8013486 <sbrk_aligned+0x22>
 8013494:	1a21      	subs	r1, r4, r0
 8013496:	4628      	mov	r0, r5
 8013498:	f000 fb90 	bl	8013bbc <_sbrk_r>
 801349c:	3001      	adds	r0, #1
 801349e:	d1f2      	bne.n	8013486 <sbrk_aligned+0x22>
 80134a0:	e7ef      	b.n	8013482 <sbrk_aligned+0x1e>
 80134a2:	bf00      	nop
 80134a4:	24005350 	.word	0x24005350

080134a8 <_malloc_r>:
 80134a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134ac:	1ccd      	adds	r5, r1, #3
 80134ae:	f025 0503 	bic.w	r5, r5, #3
 80134b2:	3508      	adds	r5, #8
 80134b4:	2d0c      	cmp	r5, #12
 80134b6:	bf38      	it	cc
 80134b8:	250c      	movcc	r5, #12
 80134ba:	2d00      	cmp	r5, #0
 80134bc:	4606      	mov	r6, r0
 80134be:	db01      	blt.n	80134c4 <_malloc_r+0x1c>
 80134c0:	42a9      	cmp	r1, r5
 80134c2:	d904      	bls.n	80134ce <_malloc_r+0x26>
 80134c4:	230c      	movs	r3, #12
 80134c6:	6033      	str	r3, [r6, #0]
 80134c8:	2000      	movs	r0, #0
 80134ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80135a4 <_malloc_r+0xfc>
 80134d2:	f000 f869 	bl	80135a8 <__malloc_lock>
 80134d6:	f8d8 3000 	ldr.w	r3, [r8]
 80134da:	461c      	mov	r4, r3
 80134dc:	bb44      	cbnz	r4, 8013530 <_malloc_r+0x88>
 80134de:	4629      	mov	r1, r5
 80134e0:	4630      	mov	r0, r6
 80134e2:	f7ff ffbf 	bl	8013464 <sbrk_aligned>
 80134e6:	1c43      	adds	r3, r0, #1
 80134e8:	4604      	mov	r4, r0
 80134ea:	d158      	bne.n	801359e <_malloc_r+0xf6>
 80134ec:	f8d8 4000 	ldr.w	r4, [r8]
 80134f0:	4627      	mov	r7, r4
 80134f2:	2f00      	cmp	r7, #0
 80134f4:	d143      	bne.n	801357e <_malloc_r+0xd6>
 80134f6:	2c00      	cmp	r4, #0
 80134f8:	d04b      	beq.n	8013592 <_malloc_r+0xea>
 80134fa:	6823      	ldr	r3, [r4, #0]
 80134fc:	4639      	mov	r1, r7
 80134fe:	4630      	mov	r0, r6
 8013500:	eb04 0903 	add.w	r9, r4, r3
 8013504:	f000 fb5a 	bl	8013bbc <_sbrk_r>
 8013508:	4581      	cmp	r9, r0
 801350a:	d142      	bne.n	8013592 <_malloc_r+0xea>
 801350c:	6821      	ldr	r1, [r4, #0]
 801350e:	1a6d      	subs	r5, r5, r1
 8013510:	4629      	mov	r1, r5
 8013512:	4630      	mov	r0, r6
 8013514:	f7ff ffa6 	bl	8013464 <sbrk_aligned>
 8013518:	3001      	adds	r0, #1
 801351a:	d03a      	beq.n	8013592 <_malloc_r+0xea>
 801351c:	6823      	ldr	r3, [r4, #0]
 801351e:	442b      	add	r3, r5
 8013520:	6023      	str	r3, [r4, #0]
 8013522:	f8d8 3000 	ldr.w	r3, [r8]
 8013526:	685a      	ldr	r2, [r3, #4]
 8013528:	bb62      	cbnz	r2, 8013584 <_malloc_r+0xdc>
 801352a:	f8c8 7000 	str.w	r7, [r8]
 801352e:	e00f      	b.n	8013550 <_malloc_r+0xa8>
 8013530:	6822      	ldr	r2, [r4, #0]
 8013532:	1b52      	subs	r2, r2, r5
 8013534:	d420      	bmi.n	8013578 <_malloc_r+0xd0>
 8013536:	2a0b      	cmp	r2, #11
 8013538:	d917      	bls.n	801356a <_malloc_r+0xc2>
 801353a:	1961      	adds	r1, r4, r5
 801353c:	42a3      	cmp	r3, r4
 801353e:	6025      	str	r5, [r4, #0]
 8013540:	bf18      	it	ne
 8013542:	6059      	strne	r1, [r3, #4]
 8013544:	6863      	ldr	r3, [r4, #4]
 8013546:	bf08      	it	eq
 8013548:	f8c8 1000 	streq.w	r1, [r8]
 801354c:	5162      	str	r2, [r4, r5]
 801354e:	604b      	str	r3, [r1, #4]
 8013550:	4630      	mov	r0, r6
 8013552:	f000 f82f 	bl	80135b4 <__malloc_unlock>
 8013556:	f104 000b 	add.w	r0, r4, #11
 801355a:	1d23      	adds	r3, r4, #4
 801355c:	f020 0007 	bic.w	r0, r0, #7
 8013560:	1ac2      	subs	r2, r0, r3
 8013562:	bf1c      	itt	ne
 8013564:	1a1b      	subne	r3, r3, r0
 8013566:	50a3      	strne	r3, [r4, r2]
 8013568:	e7af      	b.n	80134ca <_malloc_r+0x22>
 801356a:	6862      	ldr	r2, [r4, #4]
 801356c:	42a3      	cmp	r3, r4
 801356e:	bf0c      	ite	eq
 8013570:	f8c8 2000 	streq.w	r2, [r8]
 8013574:	605a      	strne	r2, [r3, #4]
 8013576:	e7eb      	b.n	8013550 <_malloc_r+0xa8>
 8013578:	4623      	mov	r3, r4
 801357a:	6864      	ldr	r4, [r4, #4]
 801357c:	e7ae      	b.n	80134dc <_malloc_r+0x34>
 801357e:	463c      	mov	r4, r7
 8013580:	687f      	ldr	r7, [r7, #4]
 8013582:	e7b6      	b.n	80134f2 <_malloc_r+0x4a>
 8013584:	461a      	mov	r2, r3
 8013586:	685b      	ldr	r3, [r3, #4]
 8013588:	42a3      	cmp	r3, r4
 801358a:	d1fb      	bne.n	8013584 <_malloc_r+0xdc>
 801358c:	2300      	movs	r3, #0
 801358e:	6053      	str	r3, [r2, #4]
 8013590:	e7de      	b.n	8013550 <_malloc_r+0xa8>
 8013592:	230c      	movs	r3, #12
 8013594:	6033      	str	r3, [r6, #0]
 8013596:	4630      	mov	r0, r6
 8013598:	f000 f80c 	bl	80135b4 <__malloc_unlock>
 801359c:	e794      	b.n	80134c8 <_malloc_r+0x20>
 801359e:	6005      	str	r5, [r0, #0]
 80135a0:	e7d6      	b.n	8013550 <_malloc_r+0xa8>
 80135a2:	bf00      	nop
 80135a4:	24005354 	.word	0x24005354

080135a8 <__malloc_lock>:
 80135a8:	4801      	ldr	r0, [pc, #4]	@ (80135b0 <__malloc_lock+0x8>)
 80135aa:	f7ff bf01 	b.w	80133b0 <__retarget_lock_acquire_recursive>
 80135ae:	bf00      	nop
 80135b0:	2400534c 	.word	0x2400534c

080135b4 <__malloc_unlock>:
 80135b4:	4801      	ldr	r0, [pc, #4]	@ (80135bc <__malloc_unlock+0x8>)
 80135b6:	f7ff befc 	b.w	80133b2 <__retarget_lock_release_recursive>
 80135ba:	bf00      	nop
 80135bc:	2400534c 	.word	0x2400534c

080135c0 <__ssputs_r>:
 80135c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135c4:	688e      	ldr	r6, [r1, #8]
 80135c6:	461f      	mov	r7, r3
 80135c8:	42be      	cmp	r6, r7
 80135ca:	680b      	ldr	r3, [r1, #0]
 80135cc:	4682      	mov	sl, r0
 80135ce:	460c      	mov	r4, r1
 80135d0:	4690      	mov	r8, r2
 80135d2:	d82d      	bhi.n	8013630 <__ssputs_r+0x70>
 80135d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80135d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80135dc:	d026      	beq.n	801362c <__ssputs_r+0x6c>
 80135de:	6965      	ldr	r5, [r4, #20]
 80135e0:	6909      	ldr	r1, [r1, #16]
 80135e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135e6:	eba3 0901 	sub.w	r9, r3, r1
 80135ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80135ee:	1c7b      	adds	r3, r7, #1
 80135f0:	444b      	add	r3, r9
 80135f2:	106d      	asrs	r5, r5, #1
 80135f4:	429d      	cmp	r5, r3
 80135f6:	bf38      	it	cc
 80135f8:	461d      	movcc	r5, r3
 80135fa:	0553      	lsls	r3, r2, #21
 80135fc:	d527      	bpl.n	801364e <__ssputs_r+0x8e>
 80135fe:	4629      	mov	r1, r5
 8013600:	f7ff ff52 	bl	80134a8 <_malloc_r>
 8013604:	4606      	mov	r6, r0
 8013606:	b360      	cbz	r0, 8013662 <__ssputs_r+0xa2>
 8013608:	6921      	ldr	r1, [r4, #16]
 801360a:	464a      	mov	r2, r9
 801360c:	f7ff fed2 	bl	80133b4 <memcpy>
 8013610:	89a3      	ldrh	r3, [r4, #12]
 8013612:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801361a:	81a3      	strh	r3, [r4, #12]
 801361c:	6126      	str	r6, [r4, #16]
 801361e:	6165      	str	r5, [r4, #20]
 8013620:	444e      	add	r6, r9
 8013622:	eba5 0509 	sub.w	r5, r5, r9
 8013626:	6026      	str	r6, [r4, #0]
 8013628:	60a5      	str	r5, [r4, #8]
 801362a:	463e      	mov	r6, r7
 801362c:	42be      	cmp	r6, r7
 801362e:	d900      	bls.n	8013632 <__ssputs_r+0x72>
 8013630:	463e      	mov	r6, r7
 8013632:	6820      	ldr	r0, [r4, #0]
 8013634:	4632      	mov	r2, r6
 8013636:	4641      	mov	r1, r8
 8013638:	f000 faa6 	bl	8013b88 <memmove>
 801363c:	68a3      	ldr	r3, [r4, #8]
 801363e:	1b9b      	subs	r3, r3, r6
 8013640:	60a3      	str	r3, [r4, #8]
 8013642:	6823      	ldr	r3, [r4, #0]
 8013644:	4433      	add	r3, r6
 8013646:	6023      	str	r3, [r4, #0]
 8013648:	2000      	movs	r0, #0
 801364a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801364e:	462a      	mov	r2, r5
 8013650:	f000 fac4 	bl	8013bdc <_realloc_r>
 8013654:	4606      	mov	r6, r0
 8013656:	2800      	cmp	r0, #0
 8013658:	d1e0      	bne.n	801361c <__ssputs_r+0x5c>
 801365a:	6921      	ldr	r1, [r4, #16]
 801365c:	4650      	mov	r0, sl
 801365e:	f7ff feb7 	bl	80133d0 <_free_r>
 8013662:	230c      	movs	r3, #12
 8013664:	f8ca 3000 	str.w	r3, [sl]
 8013668:	89a3      	ldrh	r3, [r4, #12]
 801366a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801366e:	81a3      	strh	r3, [r4, #12]
 8013670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013674:	e7e9      	b.n	801364a <__ssputs_r+0x8a>
	...

08013678 <_svfiprintf_r>:
 8013678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801367c:	4698      	mov	r8, r3
 801367e:	898b      	ldrh	r3, [r1, #12]
 8013680:	061b      	lsls	r3, r3, #24
 8013682:	b09d      	sub	sp, #116	@ 0x74
 8013684:	4607      	mov	r7, r0
 8013686:	460d      	mov	r5, r1
 8013688:	4614      	mov	r4, r2
 801368a:	d510      	bpl.n	80136ae <_svfiprintf_r+0x36>
 801368c:	690b      	ldr	r3, [r1, #16]
 801368e:	b973      	cbnz	r3, 80136ae <_svfiprintf_r+0x36>
 8013690:	2140      	movs	r1, #64	@ 0x40
 8013692:	f7ff ff09 	bl	80134a8 <_malloc_r>
 8013696:	6028      	str	r0, [r5, #0]
 8013698:	6128      	str	r0, [r5, #16]
 801369a:	b930      	cbnz	r0, 80136aa <_svfiprintf_r+0x32>
 801369c:	230c      	movs	r3, #12
 801369e:	603b      	str	r3, [r7, #0]
 80136a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80136a4:	b01d      	add	sp, #116	@ 0x74
 80136a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136aa:	2340      	movs	r3, #64	@ 0x40
 80136ac:	616b      	str	r3, [r5, #20]
 80136ae:	2300      	movs	r3, #0
 80136b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80136b2:	2320      	movs	r3, #32
 80136b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80136b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80136bc:	2330      	movs	r3, #48	@ 0x30
 80136be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801385c <_svfiprintf_r+0x1e4>
 80136c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80136c6:	f04f 0901 	mov.w	r9, #1
 80136ca:	4623      	mov	r3, r4
 80136cc:	469a      	mov	sl, r3
 80136ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136d2:	b10a      	cbz	r2, 80136d8 <_svfiprintf_r+0x60>
 80136d4:	2a25      	cmp	r2, #37	@ 0x25
 80136d6:	d1f9      	bne.n	80136cc <_svfiprintf_r+0x54>
 80136d8:	ebba 0b04 	subs.w	fp, sl, r4
 80136dc:	d00b      	beq.n	80136f6 <_svfiprintf_r+0x7e>
 80136de:	465b      	mov	r3, fp
 80136e0:	4622      	mov	r2, r4
 80136e2:	4629      	mov	r1, r5
 80136e4:	4638      	mov	r0, r7
 80136e6:	f7ff ff6b 	bl	80135c0 <__ssputs_r>
 80136ea:	3001      	adds	r0, #1
 80136ec:	f000 80a7 	beq.w	801383e <_svfiprintf_r+0x1c6>
 80136f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80136f2:	445a      	add	r2, fp
 80136f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80136f6:	f89a 3000 	ldrb.w	r3, [sl]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	f000 809f 	beq.w	801383e <_svfiprintf_r+0x1c6>
 8013700:	2300      	movs	r3, #0
 8013702:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801370a:	f10a 0a01 	add.w	sl, sl, #1
 801370e:	9304      	str	r3, [sp, #16]
 8013710:	9307      	str	r3, [sp, #28]
 8013712:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013716:	931a      	str	r3, [sp, #104]	@ 0x68
 8013718:	4654      	mov	r4, sl
 801371a:	2205      	movs	r2, #5
 801371c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013720:	484e      	ldr	r0, [pc, #312]	@ (801385c <_svfiprintf_r+0x1e4>)
 8013722:	f7ec fde5 	bl	80002f0 <memchr>
 8013726:	9a04      	ldr	r2, [sp, #16]
 8013728:	b9d8      	cbnz	r0, 8013762 <_svfiprintf_r+0xea>
 801372a:	06d0      	lsls	r0, r2, #27
 801372c:	bf44      	itt	mi
 801372e:	2320      	movmi	r3, #32
 8013730:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013734:	0711      	lsls	r1, r2, #28
 8013736:	bf44      	itt	mi
 8013738:	232b      	movmi	r3, #43	@ 0x2b
 801373a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801373e:	f89a 3000 	ldrb.w	r3, [sl]
 8013742:	2b2a      	cmp	r3, #42	@ 0x2a
 8013744:	d015      	beq.n	8013772 <_svfiprintf_r+0xfa>
 8013746:	9a07      	ldr	r2, [sp, #28]
 8013748:	4654      	mov	r4, sl
 801374a:	2000      	movs	r0, #0
 801374c:	f04f 0c0a 	mov.w	ip, #10
 8013750:	4621      	mov	r1, r4
 8013752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013756:	3b30      	subs	r3, #48	@ 0x30
 8013758:	2b09      	cmp	r3, #9
 801375a:	d94b      	bls.n	80137f4 <_svfiprintf_r+0x17c>
 801375c:	b1b0      	cbz	r0, 801378c <_svfiprintf_r+0x114>
 801375e:	9207      	str	r2, [sp, #28]
 8013760:	e014      	b.n	801378c <_svfiprintf_r+0x114>
 8013762:	eba0 0308 	sub.w	r3, r0, r8
 8013766:	fa09 f303 	lsl.w	r3, r9, r3
 801376a:	4313      	orrs	r3, r2
 801376c:	9304      	str	r3, [sp, #16]
 801376e:	46a2      	mov	sl, r4
 8013770:	e7d2      	b.n	8013718 <_svfiprintf_r+0xa0>
 8013772:	9b03      	ldr	r3, [sp, #12]
 8013774:	1d19      	adds	r1, r3, #4
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	9103      	str	r1, [sp, #12]
 801377a:	2b00      	cmp	r3, #0
 801377c:	bfbb      	ittet	lt
 801377e:	425b      	neglt	r3, r3
 8013780:	f042 0202 	orrlt.w	r2, r2, #2
 8013784:	9307      	strge	r3, [sp, #28]
 8013786:	9307      	strlt	r3, [sp, #28]
 8013788:	bfb8      	it	lt
 801378a:	9204      	strlt	r2, [sp, #16]
 801378c:	7823      	ldrb	r3, [r4, #0]
 801378e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013790:	d10a      	bne.n	80137a8 <_svfiprintf_r+0x130>
 8013792:	7863      	ldrb	r3, [r4, #1]
 8013794:	2b2a      	cmp	r3, #42	@ 0x2a
 8013796:	d132      	bne.n	80137fe <_svfiprintf_r+0x186>
 8013798:	9b03      	ldr	r3, [sp, #12]
 801379a:	1d1a      	adds	r2, r3, #4
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	9203      	str	r2, [sp, #12]
 80137a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80137a4:	3402      	adds	r4, #2
 80137a6:	9305      	str	r3, [sp, #20]
 80137a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801386c <_svfiprintf_r+0x1f4>
 80137ac:	7821      	ldrb	r1, [r4, #0]
 80137ae:	2203      	movs	r2, #3
 80137b0:	4650      	mov	r0, sl
 80137b2:	f7ec fd9d 	bl	80002f0 <memchr>
 80137b6:	b138      	cbz	r0, 80137c8 <_svfiprintf_r+0x150>
 80137b8:	9b04      	ldr	r3, [sp, #16]
 80137ba:	eba0 000a 	sub.w	r0, r0, sl
 80137be:	2240      	movs	r2, #64	@ 0x40
 80137c0:	4082      	lsls	r2, r0
 80137c2:	4313      	orrs	r3, r2
 80137c4:	3401      	adds	r4, #1
 80137c6:	9304      	str	r3, [sp, #16]
 80137c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137cc:	4824      	ldr	r0, [pc, #144]	@ (8013860 <_svfiprintf_r+0x1e8>)
 80137ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80137d2:	2206      	movs	r2, #6
 80137d4:	f7ec fd8c 	bl	80002f0 <memchr>
 80137d8:	2800      	cmp	r0, #0
 80137da:	d036      	beq.n	801384a <_svfiprintf_r+0x1d2>
 80137dc:	4b21      	ldr	r3, [pc, #132]	@ (8013864 <_svfiprintf_r+0x1ec>)
 80137de:	bb1b      	cbnz	r3, 8013828 <_svfiprintf_r+0x1b0>
 80137e0:	9b03      	ldr	r3, [sp, #12]
 80137e2:	3307      	adds	r3, #7
 80137e4:	f023 0307 	bic.w	r3, r3, #7
 80137e8:	3308      	adds	r3, #8
 80137ea:	9303      	str	r3, [sp, #12]
 80137ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137ee:	4433      	add	r3, r6
 80137f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80137f2:	e76a      	b.n	80136ca <_svfiprintf_r+0x52>
 80137f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80137f8:	460c      	mov	r4, r1
 80137fa:	2001      	movs	r0, #1
 80137fc:	e7a8      	b.n	8013750 <_svfiprintf_r+0xd8>
 80137fe:	2300      	movs	r3, #0
 8013800:	3401      	adds	r4, #1
 8013802:	9305      	str	r3, [sp, #20]
 8013804:	4619      	mov	r1, r3
 8013806:	f04f 0c0a 	mov.w	ip, #10
 801380a:	4620      	mov	r0, r4
 801380c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013810:	3a30      	subs	r2, #48	@ 0x30
 8013812:	2a09      	cmp	r2, #9
 8013814:	d903      	bls.n	801381e <_svfiprintf_r+0x1a6>
 8013816:	2b00      	cmp	r3, #0
 8013818:	d0c6      	beq.n	80137a8 <_svfiprintf_r+0x130>
 801381a:	9105      	str	r1, [sp, #20]
 801381c:	e7c4      	b.n	80137a8 <_svfiprintf_r+0x130>
 801381e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013822:	4604      	mov	r4, r0
 8013824:	2301      	movs	r3, #1
 8013826:	e7f0      	b.n	801380a <_svfiprintf_r+0x192>
 8013828:	ab03      	add	r3, sp, #12
 801382a:	9300      	str	r3, [sp, #0]
 801382c:	462a      	mov	r2, r5
 801382e:	4b0e      	ldr	r3, [pc, #56]	@ (8013868 <_svfiprintf_r+0x1f0>)
 8013830:	a904      	add	r1, sp, #16
 8013832:	4638      	mov	r0, r7
 8013834:	f3af 8000 	nop.w
 8013838:	1c42      	adds	r2, r0, #1
 801383a:	4606      	mov	r6, r0
 801383c:	d1d6      	bne.n	80137ec <_svfiprintf_r+0x174>
 801383e:	89ab      	ldrh	r3, [r5, #12]
 8013840:	065b      	lsls	r3, r3, #25
 8013842:	f53f af2d 	bmi.w	80136a0 <_svfiprintf_r+0x28>
 8013846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013848:	e72c      	b.n	80136a4 <_svfiprintf_r+0x2c>
 801384a:	ab03      	add	r3, sp, #12
 801384c:	9300      	str	r3, [sp, #0]
 801384e:	462a      	mov	r2, r5
 8013850:	4b05      	ldr	r3, [pc, #20]	@ (8013868 <_svfiprintf_r+0x1f0>)
 8013852:	a904      	add	r1, sp, #16
 8013854:	4638      	mov	r0, r7
 8013856:	f000 f879 	bl	801394c <_printf_i>
 801385a:	e7ed      	b.n	8013838 <_svfiprintf_r+0x1c0>
 801385c:	08013f80 	.word	0x08013f80
 8013860:	08013f8a 	.word	0x08013f8a
 8013864:	00000000 	.word	0x00000000
 8013868:	080135c1 	.word	0x080135c1
 801386c:	08013f86 	.word	0x08013f86

08013870 <_printf_common>:
 8013870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013874:	4616      	mov	r6, r2
 8013876:	4698      	mov	r8, r3
 8013878:	688a      	ldr	r2, [r1, #8]
 801387a:	690b      	ldr	r3, [r1, #16]
 801387c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013880:	4293      	cmp	r3, r2
 8013882:	bfb8      	it	lt
 8013884:	4613      	movlt	r3, r2
 8013886:	6033      	str	r3, [r6, #0]
 8013888:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801388c:	4607      	mov	r7, r0
 801388e:	460c      	mov	r4, r1
 8013890:	b10a      	cbz	r2, 8013896 <_printf_common+0x26>
 8013892:	3301      	adds	r3, #1
 8013894:	6033      	str	r3, [r6, #0]
 8013896:	6823      	ldr	r3, [r4, #0]
 8013898:	0699      	lsls	r1, r3, #26
 801389a:	bf42      	ittt	mi
 801389c:	6833      	ldrmi	r3, [r6, #0]
 801389e:	3302      	addmi	r3, #2
 80138a0:	6033      	strmi	r3, [r6, #0]
 80138a2:	6825      	ldr	r5, [r4, #0]
 80138a4:	f015 0506 	ands.w	r5, r5, #6
 80138a8:	d106      	bne.n	80138b8 <_printf_common+0x48>
 80138aa:	f104 0a19 	add.w	sl, r4, #25
 80138ae:	68e3      	ldr	r3, [r4, #12]
 80138b0:	6832      	ldr	r2, [r6, #0]
 80138b2:	1a9b      	subs	r3, r3, r2
 80138b4:	42ab      	cmp	r3, r5
 80138b6:	dc26      	bgt.n	8013906 <_printf_common+0x96>
 80138b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80138bc:	6822      	ldr	r2, [r4, #0]
 80138be:	3b00      	subs	r3, #0
 80138c0:	bf18      	it	ne
 80138c2:	2301      	movne	r3, #1
 80138c4:	0692      	lsls	r2, r2, #26
 80138c6:	d42b      	bmi.n	8013920 <_printf_common+0xb0>
 80138c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80138cc:	4641      	mov	r1, r8
 80138ce:	4638      	mov	r0, r7
 80138d0:	47c8      	blx	r9
 80138d2:	3001      	adds	r0, #1
 80138d4:	d01e      	beq.n	8013914 <_printf_common+0xa4>
 80138d6:	6823      	ldr	r3, [r4, #0]
 80138d8:	6922      	ldr	r2, [r4, #16]
 80138da:	f003 0306 	and.w	r3, r3, #6
 80138de:	2b04      	cmp	r3, #4
 80138e0:	bf02      	ittt	eq
 80138e2:	68e5      	ldreq	r5, [r4, #12]
 80138e4:	6833      	ldreq	r3, [r6, #0]
 80138e6:	1aed      	subeq	r5, r5, r3
 80138e8:	68a3      	ldr	r3, [r4, #8]
 80138ea:	bf0c      	ite	eq
 80138ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80138f0:	2500      	movne	r5, #0
 80138f2:	4293      	cmp	r3, r2
 80138f4:	bfc4      	itt	gt
 80138f6:	1a9b      	subgt	r3, r3, r2
 80138f8:	18ed      	addgt	r5, r5, r3
 80138fa:	2600      	movs	r6, #0
 80138fc:	341a      	adds	r4, #26
 80138fe:	42b5      	cmp	r5, r6
 8013900:	d11a      	bne.n	8013938 <_printf_common+0xc8>
 8013902:	2000      	movs	r0, #0
 8013904:	e008      	b.n	8013918 <_printf_common+0xa8>
 8013906:	2301      	movs	r3, #1
 8013908:	4652      	mov	r2, sl
 801390a:	4641      	mov	r1, r8
 801390c:	4638      	mov	r0, r7
 801390e:	47c8      	blx	r9
 8013910:	3001      	adds	r0, #1
 8013912:	d103      	bne.n	801391c <_printf_common+0xac>
 8013914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801391c:	3501      	adds	r5, #1
 801391e:	e7c6      	b.n	80138ae <_printf_common+0x3e>
 8013920:	18e1      	adds	r1, r4, r3
 8013922:	1c5a      	adds	r2, r3, #1
 8013924:	2030      	movs	r0, #48	@ 0x30
 8013926:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801392a:	4422      	add	r2, r4
 801392c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013930:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013934:	3302      	adds	r3, #2
 8013936:	e7c7      	b.n	80138c8 <_printf_common+0x58>
 8013938:	2301      	movs	r3, #1
 801393a:	4622      	mov	r2, r4
 801393c:	4641      	mov	r1, r8
 801393e:	4638      	mov	r0, r7
 8013940:	47c8      	blx	r9
 8013942:	3001      	adds	r0, #1
 8013944:	d0e6      	beq.n	8013914 <_printf_common+0xa4>
 8013946:	3601      	adds	r6, #1
 8013948:	e7d9      	b.n	80138fe <_printf_common+0x8e>
	...

0801394c <_printf_i>:
 801394c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013950:	7e0f      	ldrb	r7, [r1, #24]
 8013952:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013954:	2f78      	cmp	r7, #120	@ 0x78
 8013956:	4691      	mov	r9, r2
 8013958:	4680      	mov	r8, r0
 801395a:	460c      	mov	r4, r1
 801395c:	469a      	mov	sl, r3
 801395e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013962:	d807      	bhi.n	8013974 <_printf_i+0x28>
 8013964:	2f62      	cmp	r7, #98	@ 0x62
 8013966:	d80a      	bhi.n	801397e <_printf_i+0x32>
 8013968:	2f00      	cmp	r7, #0
 801396a:	f000 80d1 	beq.w	8013b10 <_printf_i+0x1c4>
 801396e:	2f58      	cmp	r7, #88	@ 0x58
 8013970:	f000 80b8 	beq.w	8013ae4 <_printf_i+0x198>
 8013974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013978:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801397c:	e03a      	b.n	80139f4 <_printf_i+0xa8>
 801397e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013982:	2b15      	cmp	r3, #21
 8013984:	d8f6      	bhi.n	8013974 <_printf_i+0x28>
 8013986:	a101      	add	r1, pc, #4	@ (adr r1, 801398c <_printf_i+0x40>)
 8013988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801398c:	080139e5 	.word	0x080139e5
 8013990:	080139f9 	.word	0x080139f9
 8013994:	08013975 	.word	0x08013975
 8013998:	08013975 	.word	0x08013975
 801399c:	08013975 	.word	0x08013975
 80139a0:	08013975 	.word	0x08013975
 80139a4:	080139f9 	.word	0x080139f9
 80139a8:	08013975 	.word	0x08013975
 80139ac:	08013975 	.word	0x08013975
 80139b0:	08013975 	.word	0x08013975
 80139b4:	08013975 	.word	0x08013975
 80139b8:	08013af7 	.word	0x08013af7
 80139bc:	08013a23 	.word	0x08013a23
 80139c0:	08013ab1 	.word	0x08013ab1
 80139c4:	08013975 	.word	0x08013975
 80139c8:	08013975 	.word	0x08013975
 80139cc:	08013b19 	.word	0x08013b19
 80139d0:	08013975 	.word	0x08013975
 80139d4:	08013a23 	.word	0x08013a23
 80139d8:	08013975 	.word	0x08013975
 80139dc:	08013975 	.word	0x08013975
 80139e0:	08013ab9 	.word	0x08013ab9
 80139e4:	6833      	ldr	r3, [r6, #0]
 80139e6:	1d1a      	adds	r2, r3, #4
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	6032      	str	r2, [r6, #0]
 80139ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80139f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80139f4:	2301      	movs	r3, #1
 80139f6:	e09c      	b.n	8013b32 <_printf_i+0x1e6>
 80139f8:	6833      	ldr	r3, [r6, #0]
 80139fa:	6820      	ldr	r0, [r4, #0]
 80139fc:	1d19      	adds	r1, r3, #4
 80139fe:	6031      	str	r1, [r6, #0]
 8013a00:	0606      	lsls	r6, r0, #24
 8013a02:	d501      	bpl.n	8013a08 <_printf_i+0xbc>
 8013a04:	681d      	ldr	r5, [r3, #0]
 8013a06:	e003      	b.n	8013a10 <_printf_i+0xc4>
 8013a08:	0645      	lsls	r5, r0, #25
 8013a0a:	d5fb      	bpl.n	8013a04 <_printf_i+0xb8>
 8013a0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013a10:	2d00      	cmp	r5, #0
 8013a12:	da03      	bge.n	8013a1c <_printf_i+0xd0>
 8013a14:	232d      	movs	r3, #45	@ 0x2d
 8013a16:	426d      	negs	r5, r5
 8013a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013a1c:	4858      	ldr	r0, [pc, #352]	@ (8013b80 <_printf_i+0x234>)
 8013a1e:	230a      	movs	r3, #10
 8013a20:	e011      	b.n	8013a46 <_printf_i+0xfa>
 8013a22:	6821      	ldr	r1, [r4, #0]
 8013a24:	6833      	ldr	r3, [r6, #0]
 8013a26:	0608      	lsls	r0, r1, #24
 8013a28:	f853 5b04 	ldr.w	r5, [r3], #4
 8013a2c:	d402      	bmi.n	8013a34 <_printf_i+0xe8>
 8013a2e:	0649      	lsls	r1, r1, #25
 8013a30:	bf48      	it	mi
 8013a32:	b2ad      	uxthmi	r5, r5
 8013a34:	2f6f      	cmp	r7, #111	@ 0x6f
 8013a36:	4852      	ldr	r0, [pc, #328]	@ (8013b80 <_printf_i+0x234>)
 8013a38:	6033      	str	r3, [r6, #0]
 8013a3a:	bf14      	ite	ne
 8013a3c:	230a      	movne	r3, #10
 8013a3e:	2308      	moveq	r3, #8
 8013a40:	2100      	movs	r1, #0
 8013a42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013a46:	6866      	ldr	r6, [r4, #4]
 8013a48:	60a6      	str	r6, [r4, #8]
 8013a4a:	2e00      	cmp	r6, #0
 8013a4c:	db05      	blt.n	8013a5a <_printf_i+0x10e>
 8013a4e:	6821      	ldr	r1, [r4, #0]
 8013a50:	432e      	orrs	r6, r5
 8013a52:	f021 0104 	bic.w	r1, r1, #4
 8013a56:	6021      	str	r1, [r4, #0]
 8013a58:	d04b      	beq.n	8013af2 <_printf_i+0x1a6>
 8013a5a:	4616      	mov	r6, r2
 8013a5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8013a60:	fb03 5711 	mls	r7, r3, r1, r5
 8013a64:	5dc7      	ldrb	r7, [r0, r7]
 8013a66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013a6a:	462f      	mov	r7, r5
 8013a6c:	42bb      	cmp	r3, r7
 8013a6e:	460d      	mov	r5, r1
 8013a70:	d9f4      	bls.n	8013a5c <_printf_i+0x110>
 8013a72:	2b08      	cmp	r3, #8
 8013a74:	d10b      	bne.n	8013a8e <_printf_i+0x142>
 8013a76:	6823      	ldr	r3, [r4, #0]
 8013a78:	07df      	lsls	r7, r3, #31
 8013a7a:	d508      	bpl.n	8013a8e <_printf_i+0x142>
 8013a7c:	6923      	ldr	r3, [r4, #16]
 8013a7e:	6861      	ldr	r1, [r4, #4]
 8013a80:	4299      	cmp	r1, r3
 8013a82:	bfde      	ittt	le
 8013a84:	2330      	movle	r3, #48	@ 0x30
 8013a86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013a8a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013a8e:	1b92      	subs	r2, r2, r6
 8013a90:	6122      	str	r2, [r4, #16]
 8013a92:	f8cd a000 	str.w	sl, [sp]
 8013a96:	464b      	mov	r3, r9
 8013a98:	aa03      	add	r2, sp, #12
 8013a9a:	4621      	mov	r1, r4
 8013a9c:	4640      	mov	r0, r8
 8013a9e:	f7ff fee7 	bl	8013870 <_printf_common>
 8013aa2:	3001      	adds	r0, #1
 8013aa4:	d14a      	bne.n	8013b3c <_printf_i+0x1f0>
 8013aa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013aaa:	b004      	add	sp, #16
 8013aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ab0:	6823      	ldr	r3, [r4, #0]
 8013ab2:	f043 0320 	orr.w	r3, r3, #32
 8013ab6:	6023      	str	r3, [r4, #0]
 8013ab8:	4832      	ldr	r0, [pc, #200]	@ (8013b84 <_printf_i+0x238>)
 8013aba:	2778      	movs	r7, #120	@ 0x78
 8013abc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013ac0:	6823      	ldr	r3, [r4, #0]
 8013ac2:	6831      	ldr	r1, [r6, #0]
 8013ac4:	061f      	lsls	r7, r3, #24
 8013ac6:	f851 5b04 	ldr.w	r5, [r1], #4
 8013aca:	d402      	bmi.n	8013ad2 <_printf_i+0x186>
 8013acc:	065f      	lsls	r7, r3, #25
 8013ace:	bf48      	it	mi
 8013ad0:	b2ad      	uxthmi	r5, r5
 8013ad2:	6031      	str	r1, [r6, #0]
 8013ad4:	07d9      	lsls	r1, r3, #31
 8013ad6:	bf44      	itt	mi
 8013ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8013adc:	6023      	strmi	r3, [r4, #0]
 8013ade:	b11d      	cbz	r5, 8013ae8 <_printf_i+0x19c>
 8013ae0:	2310      	movs	r3, #16
 8013ae2:	e7ad      	b.n	8013a40 <_printf_i+0xf4>
 8013ae4:	4826      	ldr	r0, [pc, #152]	@ (8013b80 <_printf_i+0x234>)
 8013ae6:	e7e9      	b.n	8013abc <_printf_i+0x170>
 8013ae8:	6823      	ldr	r3, [r4, #0]
 8013aea:	f023 0320 	bic.w	r3, r3, #32
 8013aee:	6023      	str	r3, [r4, #0]
 8013af0:	e7f6      	b.n	8013ae0 <_printf_i+0x194>
 8013af2:	4616      	mov	r6, r2
 8013af4:	e7bd      	b.n	8013a72 <_printf_i+0x126>
 8013af6:	6833      	ldr	r3, [r6, #0]
 8013af8:	6825      	ldr	r5, [r4, #0]
 8013afa:	6961      	ldr	r1, [r4, #20]
 8013afc:	1d18      	adds	r0, r3, #4
 8013afe:	6030      	str	r0, [r6, #0]
 8013b00:	062e      	lsls	r6, r5, #24
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	d501      	bpl.n	8013b0a <_printf_i+0x1be>
 8013b06:	6019      	str	r1, [r3, #0]
 8013b08:	e002      	b.n	8013b10 <_printf_i+0x1c4>
 8013b0a:	0668      	lsls	r0, r5, #25
 8013b0c:	d5fb      	bpl.n	8013b06 <_printf_i+0x1ba>
 8013b0e:	8019      	strh	r1, [r3, #0]
 8013b10:	2300      	movs	r3, #0
 8013b12:	6123      	str	r3, [r4, #16]
 8013b14:	4616      	mov	r6, r2
 8013b16:	e7bc      	b.n	8013a92 <_printf_i+0x146>
 8013b18:	6833      	ldr	r3, [r6, #0]
 8013b1a:	1d1a      	adds	r2, r3, #4
 8013b1c:	6032      	str	r2, [r6, #0]
 8013b1e:	681e      	ldr	r6, [r3, #0]
 8013b20:	6862      	ldr	r2, [r4, #4]
 8013b22:	2100      	movs	r1, #0
 8013b24:	4630      	mov	r0, r6
 8013b26:	f7ec fbe3 	bl	80002f0 <memchr>
 8013b2a:	b108      	cbz	r0, 8013b30 <_printf_i+0x1e4>
 8013b2c:	1b80      	subs	r0, r0, r6
 8013b2e:	6060      	str	r0, [r4, #4]
 8013b30:	6863      	ldr	r3, [r4, #4]
 8013b32:	6123      	str	r3, [r4, #16]
 8013b34:	2300      	movs	r3, #0
 8013b36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b3a:	e7aa      	b.n	8013a92 <_printf_i+0x146>
 8013b3c:	6923      	ldr	r3, [r4, #16]
 8013b3e:	4632      	mov	r2, r6
 8013b40:	4649      	mov	r1, r9
 8013b42:	4640      	mov	r0, r8
 8013b44:	47d0      	blx	sl
 8013b46:	3001      	adds	r0, #1
 8013b48:	d0ad      	beq.n	8013aa6 <_printf_i+0x15a>
 8013b4a:	6823      	ldr	r3, [r4, #0]
 8013b4c:	079b      	lsls	r3, r3, #30
 8013b4e:	d413      	bmi.n	8013b78 <_printf_i+0x22c>
 8013b50:	68e0      	ldr	r0, [r4, #12]
 8013b52:	9b03      	ldr	r3, [sp, #12]
 8013b54:	4298      	cmp	r0, r3
 8013b56:	bfb8      	it	lt
 8013b58:	4618      	movlt	r0, r3
 8013b5a:	e7a6      	b.n	8013aaa <_printf_i+0x15e>
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	4632      	mov	r2, r6
 8013b60:	4649      	mov	r1, r9
 8013b62:	4640      	mov	r0, r8
 8013b64:	47d0      	blx	sl
 8013b66:	3001      	adds	r0, #1
 8013b68:	d09d      	beq.n	8013aa6 <_printf_i+0x15a>
 8013b6a:	3501      	adds	r5, #1
 8013b6c:	68e3      	ldr	r3, [r4, #12]
 8013b6e:	9903      	ldr	r1, [sp, #12]
 8013b70:	1a5b      	subs	r3, r3, r1
 8013b72:	42ab      	cmp	r3, r5
 8013b74:	dcf2      	bgt.n	8013b5c <_printf_i+0x210>
 8013b76:	e7eb      	b.n	8013b50 <_printf_i+0x204>
 8013b78:	2500      	movs	r5, #0
 8013b7a:	f104 0619 	add.w	r6, r4, #25
 8013b7e:	e7f5      	b.n	8013b6c <_printf_i+0x220>
 8013b80:	08013f91 	.word	0x08013f91
 8013b84:	08013fa2 	.word	0x08013fa2

08013b88 <memmove>:
 8013b88:	4288      	cmp	r0, r1
 8013b8a:	b510      	push	{r4, lr}
 8013b8c:	eb01 0402 	add.w	r4, r1, r2
 8013b90:	d902      	bls.n	8013b98 <memmove+0x10>
 8013b92:	4284      	cmp	r4, r0
 8013b94:	4623      	mov	r3, r4
 8013b96:	d807      	bhi.n	8013ba8 <memmove+0x20>
 8013b98:	1e43      	subs	r3, r0, #1
 8013b9a:	42a1      	cmp	r1, r4
 8013b9c:	d008      	beq.n	8013bb0 <memmove+0x28>
 8013b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013ba6:	e7f8      	b.n	8013b9a <memmove+0x12>
 8013ba8:	4402      	add	r2, r0
 8013baa:	4601      	mov	r1, r0
 8013bac:	428a      	cmp	r2, r1
 8013bae:	d100      	bne.n	8013bb2 <memmove+0x2a>
 8013bb0:	bd10      	pop	{r4, pc}
 8013bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013bba:	e7f7      	b.n	8013bac <memmove+0x24>

08013bbc <_sbrk_r>:
 8013bbc:	b538      	push	{r3, r4, r5, lr}
 8013bbe:	4d06      	ldr	r5, [pc, #24]	@ (8013bd8 <_sbrk_r+0x1c>)
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	4608      	mov	r0, r1
 8013bc6:	602b      	str	r3, [r5, #0]
 8013bc8:	f7ed fb7e 	bl	80012c8 <_sbrk>
 8013bcc:	1c43      	adds	r3, r0, #1
 8013bce:	d102      	bne.n	8013bd6 <_sbrk_r+0x1a>
 8013bd0:	682b      	ldr	r3, [r5, #0]
 8013bd2:	b103      	cbz	r3, 8013bd6 <_sbrk_r+0x1a>
 8013bd4:	6023      	str	r3, [r4, #0]
 8013bd6:	bd38      	pop	{r3, r4, r5, pc}
 8013bd8:	24005348 	.word	0x24005348

08013bdc <_realloc_r>:
 8013bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013be0:	4607      	mov	r7, r0
 8013be2:	4614      	mov	r4, r2
 8013be4:	460d      	mov	r5, r1
 8013be6:	b921      	cbnz	r1, 8013bf2 <_realloc_r+0x16>
 8013be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bec:	4611      	mov	r1, r2
 8013bee:	f7ff bc5b 	b.w	80134a8 <_malloc_r>
 8013bf2:	b92a      	cbnz	r2, 8013c00 <_realloc_r+0x24>
 8013bf4:	f7ff fbec 	bl	80133d0 <_free_r>
 8013bf8:	4625      	mov	r5, r4
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c00:	f000 f81a 	bl	8013c38 <_malloc_usable_size_r>
 8013c04:	4284      	cmp	r4, r0
 8013c06:	4606      	mov	r6, r0
 8013c08:	d802      	bhi.n	8013c10 <_realloc_r+0x34>
 8013c0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013c0e:	d8f4      	bhi.n	8013bfa <_realloc_r+0x1e>
 8013c10:	4621      	mov	r1, r4
 8013c12:	4638      	mov	r0, r7
 8013c14:	f7ff fc48 	bl	80134a8 <_malloc_r>
 8013c18:	4680      	mov	r8, r0
 8013c1a:	b908      	cbnz	r0, 8013c20 <_realloc_r+0x44>
 8013c1c:	4645      	mov	r5, r8
 8013c1e:	e7ec      	b.n	8013bfa <_realloc_r+0x1e>
 8013c20:	42b4      	cmp	r4, r6
 8013c22:	4622      	mov	r2, r4
 8013c24:	4629      	mov	r1, r5
 8013c26:	bf28      	it	cs
 8013c28:	4632      	movcs	r2, r6
 8013c2a:	f7ff fbc3 	bl	80133b4 <memcpy>
 8013c2e:	4629      	mov	r1, r5
 8013c30:	4638      	mov	r0, r7
 8013c32:	f7ff fbcd 	bl	80133d0 <_free_r>
 8013c36:	e7f1      	b.n	8013c1c <_realloc_r+0x40>

08013c38 <_malloc_usable_size_r>:
 8013c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c3c:	1f18      	subs	r0, r3, #4
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	bfbc      	itt	lt
 8013c42:	580b      	ldrlt	r3, [r1, r0]
 8013c44:	18c0      	addlt	r0, r0, r3
 8013c46:	4770      	bx	lr

08013c48 <_init>:
 8013c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c4a:	bf00      	nop
 8013c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c4e:	bc08      	pop	{r3}
 8013c50:	469e      	mov	lr, r3
 8013c52:	4770      	bx	lr

08013c54 <_fini>:
 8013c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c56:	bf00      	nop
 8013c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c5a:	bc08      	pop	{r3}
 8013c5c:	469e      	mov	lr, r3
 8013c5e:	4770      	bx	lr
