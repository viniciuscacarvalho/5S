
geral_test_h755zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d810  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800dab0  0800dab0  0000eab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc94  0800dc94  0000f014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dc94  0800dc94  0000ec94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc9c  0800dc9c  0000f014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc9c  0800dc9c  0000ec9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dca0  0800dca0  0000eca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  0800dca4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bd4  24000014  0800dcb8  0000f014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004be8  0800dcb8  0000fbe8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ece7  00000000  00000000  0000f042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006018  00000000  00000000  0003dd29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022a0  00000000  00000000  00043d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a9b  00000000  00000000  00045fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000435b3  00000000  00000000  00047a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030d48  00000000  00000000  0008b036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ac356  00000000  00000000  000bbd7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002680d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000910c  00000000  00000000  00268118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00271224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800da98 	.word	0x0800da98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800da98 	.word	0x0800da98

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000610:	4b49      	ldr	r3, [pc, #292]	@ (8000738 <SystemInit+0x12c>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000616:	4a48      	ldr	r2, [pc, #288]	@ (8000738 <SystemInit+0x12c>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000620:	4b45      	ldr	r3, [pc, #276]	@ (8000738 <SystemInit+0x12c>)
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	4a44      	ldr	r2, [pc, #272]	@ (8000738 <SystemInit+0x12c>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062c:	4b43      	ldr	r3, [pc, #268]	@ (800073c <SystemInit+0x130>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f003 030f 	and.w	r3, r3, #15
 8000634:	2b06      	cmp	r3, #6
 8000636:	d807      	bhi.n	8000648 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000638:	4b40      	ldr	r3, [pc, #256]	@ (800073c <SystemInit+0x130>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f023 030f 	bic.w	r3, r3, #15
 8000640:	4a3e      	ldr	r2, [pc, #248]	@ (800073c <SystemInit+0x130>)
 8000642:	f043 0307 	orr.w	r3, r3, #7
 8000646:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000648:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <SystemInit+0x134>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a3c      	ldr	r2, [pc, #240]	@ (8000740 <SystemInit+0x134>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <SystemInit+0x134>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800065a:	4b39      	ldr	r3, [pc, #228]	@ (8000740 <SystemInit+0x134>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4938      	ldr	r1, [pc, #224]	@ (8000740 <SystemInit+0x134>)
 8000660:	4b38      	ldr	r3, [pc, #224]	@ (8000744 <SystemInit+0x138>)
 8000662:	4013      	ands	r3, r2
 8000664:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000666:	4b35      	ldr	r3, [pc, #212]	@ (800073c <SystemInit+0x130>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	2b00      	cmp	r3, #0
 8000670:	d007      	beq.n	8000682 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000672:	4b32      	ldr	r3, [pc, #200]	@ (800073c <SystemInit+0x130>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f023 030f 	bic.w	r3, r3, #15
 800067a:	4a30      	ldr	r2, [pc, #192]	@ (800073c <SystemInit+0x130>)
 800067c:	f043 0307 	orr.w	r3, r3, #7
 8000680:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000682:	4b2f      	ldr	r3, [pc, #188]	@ (8000740 <SystemInit+0x134>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000688:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <SystemInit+0x134>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800068e:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SystemInit+0x134>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <SystemInit+0x134>)
 8000696:	4a2c      	ldr	r2, [pc, #176]	@ (8000748 <SystemInit+0x13c>)
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <SystemInit+0x134>)
 800069c:	4a2b      	ldr	r2, [pc, #172]	@ (800074c <SystemInit+0x140>)
 800069e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemInit+0x134>)
 80006a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <SystemInit+0x144>)
 80006a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <SystemInit+0x134>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <SystemInit+0x134>)
 80006ae:	4a28      	ldr	r2, [pc, #160]	@ (8000750 <SystemInit+0x144>)
 80006b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <SystemInit+0x134>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <SystemInit+0x134>)
 80006ba:	4a25      	ldr	r2, [pc, #148]	@ (8000750 <SystemInit+0x144>)
 80006bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <SystemInit+0x134>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <SystemInit+0x134>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000740 <SystemInit+0x134>)
 80006ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <SystemInit+0x134>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <SystemInit+0x148>)
 80006d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006da:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <SystemInit+0x148>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <SystemInit+0x14c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <SystemInit+0x150>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006ee:	d202      	bcs.n	80006f6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <SystemInit+0x154>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <SystemInit+0x134>)
 80006f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000700:	2b00      	cmp	r3, #0
 8000702:	d113      	bne.n	800072c <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <SystemInit+0x134>)
 8000706:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800070a:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <SystemInit+0x134>)
 800070c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000710:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <SystemInit+0x158>)
 8000716:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800071a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <SystemInit+0x134>)
 800071e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000722:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <SystemInit+0x134>)
 8000724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000728:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	52002000 	.word	0x52002000
 8000740:	58024400 	.word	0x58024400
 8000744:	eaf6ed7f 	.word	0xeaf6ed7f
 8000748:	02020200 	.word	0x02020200
 800074c:	01ff0000 	.word	0x01ff0000
 8000750:	01010280 	.word	0x01010280
 8000754:	580000c0 	.word	0x580000c0
 8000758:	5c001000 	.word	0x5c001000
 800075c:	ffff0000 	.word	0xffff0000
 8000760:	51008108 	.word	0x51008108
 8000764:	52004000 	.word	0x52004000

08000768 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <ExitRun0Mode+0x2c>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <ExitRun0Mode+0x2c>)
 8000772:	f023 0302 	bic.w	r3, r3, #2
 8000776:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000778:	bf00      	nop
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <ExitRun0Mode+0x2c>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	58024800 	.word	0x58024800

08000798 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007bc:	4b31      	ldr	r3, [pc, #196]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007be:	4a32      	ldr	r2, [pc, #200]	@ (8000888 <MX_ADC1_Init+0xf0>)
 80007c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007c2:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80007ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007cc:	2210      	movs	r2, #16
 80007ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007d8:	2204      	movs	r2, #4
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007dc:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007de:	2200      	movs	r2, #0
 80007e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e2:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007e8:	4b26      	ldr	r3, [pc, #152]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ee:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fa:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000800:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <MX_ADC1_Init+0xec>)
 8000802:	2200      	movs	r2, #0
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000806:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_ADC1_Init+0xec>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800080c:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_ADC1_Init+0xec>)
 800080e:	2200      	movs	r2, #0
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000812:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_ADC1_Init+0xec>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_ADC1_Init+0xec>)
 800081c:	2201      	movs	r2, #1
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	4818      	ldr	r0, [pc, #96]	@ (8000884 <MX_ADC1_Init+0xec>)
 8000822:	f001 f81f 	bl	8001864 <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800082c:	f000 faa8 	bl	8000d80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	@ (8000884 <MX_ADC1_Init+0xec>)
 800083c:	f001 ffac 	bl	8002798 <HAL_ADCEx_MultiModeConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000846:	f000 fa9b 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_ADC1_Init+0xf4>)
 800084c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084e:	2306      	movs	r3, #6
 8000850:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000856:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085c:	2304      	movs	r3, #4
 800085e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_ADC1_Init+0xec>)
 800086e:	f001 fae7 	bl	8001e40 <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000878:	f000 fa82 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	@ 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	24000030 	.word	0x24000030
 8000888:	40022000 	.word	0x40022000
 800088c:	3ef08000 	.word	0x3ef08000

08000890 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0ba      	sub	sp, #232	@ 0xe8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	22c0      	movs	r2, #192	@ 0xc0
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f00d f8b7 	bl	800da24 <memset>
  if(adcHandle->Instance==ADC1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000968 <HAL_ADC_MspInit+0xd8>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d14f      	bne.n	8000960 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008c4:	f04f 0300 	mov.w	r3, #0
 80008c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80008d0:	230a      	movs	r3, #10
 80008d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008dc:	2302      	movs	r3, #2
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008e0:	23c0      	movs	r3, #192	@ 0xc0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008e4:	2320      	movs	r3, #32
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4618      	mov	r0, r3
 80008f8:	f004 f8e8 	bl	8004acc <HAL_RCCEx_PeriphCLKConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000902:	f000 fa3d 	bl	8000d80 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <HAL_ADC_MspInit+0xdc>)
 8000908:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800090c:	4a17      	ldr	r2, [pc, #92]	@ (800096c <HAL_ADC_MspInit+0xdc>)
 800090e:	f043 0320 	orr.w	r3, r3, #32
 8000912:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_ADC_MspInit+0xdc>)
 8000918:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800091c:	f003 0320 	and.w	r3, r3, #32
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <HAL_ADC_MspInit+0xdc>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092a:	4a10      	ldr	r2, [pc, #64]	@ (800096c <HAL_ADC_MspInit+0xdc>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000934:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <HAL_ADC_MspInit+0xdc>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000942:	2308      	movs	r3, #8
 8000944:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000948:	2303      	movs	r3, #3
 800094a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000958:	4619      	mov	r1, r3
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <HAL_ADC_MspInit+0xe0>)
 800095c:	f002 fe3e 	bl	80035dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000960:	bf00      	nop
 8000962:	37e8      	adds	r7, #232	@ 0xe8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40022000 	.word	0x40022000
 800096c:	58024400 	.word	0x58024400
 8000970:	58020000 	.word	0x58020000

08000974 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idle */
  idleHandle = osThreadNew(idle_task, NULL, &idle_attributes);
 8000978:	4a1c      	ldr	r2, [pc, #112]	@ (80009ec <MX_FREERTOS_Init+0x78>)
 800097a:	2100      	movs	r1, #0
 800097c:	481c      	ldr	r0, [pc, #112]	@ (80009f0 <MX_FREERTOS_Init+0x7c>)
 800097e:	f009 fc23 	bl	800a1c8 <osThreadNew>
 8000982:	4603      	mov	r3, r0
 8000984:	4a1b      	ldr	r2, [pc, #108]	@ (80009f4 <MX_FREERTOS_Init+0x80>)
 8000986:	6013      	str	r3, [r2, #0]

  /* creation of nb_iot */
  nb_iotHandle = osThreadNew(nb_iot_task, NULL, &nb_iot_attributes);
 8000988:	4a1b      	ldr	r2, [pc, #108]	@ (80009f8 <MX_FREERTOS_Init+0x84>)
 800098a:	2100      	movs	r1, #0
 800098c:	481b      	ldr	r0, [pc, #108]	@ (80009fc <MX_FREERTOS_Init+0x88>)
 800098e:	f009 fc1b 	bl	800a1c8 <osThreadNew>
 8000992:	4603      	mov	r3, r0
 8000994:	4a1a      	ldr	r2, [pc, #104]	@ (8000a00 <MX_FREERTOS_Init+0x8c>)
 8000996:	6013      	str	r3, [r2, #0]

  /* creation of cnss */
  cnssHandle = osThreadNew(cnss_task, NULL, &cnss_attributes);
 8000998:	4a1a      	ldr	r2, [pc, #104]	@ (8000a04 <MX_FREERTOS_Init+0x90>)
 800099a:	2100      	movs	r1, #0
 800099c:	481a      	ldr	r0, [pc, #104]	@ (8000a08 <MX_FREERTOS_Init+0x94>)
 800099e:	f009 fc13 	bl	800a1c8 <osThreadNew>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a19      	ldr	r2, [pc, #100]	@ (8000a0c <MX_FREERTOS_Init+0x98>)
 80009a6:	6013      	str	r3, [r2, #0]

  /* creation of sd_card */
  sd_cardHandle = osThreadNew(sd_card_task, NULL, &sd_card_attributes);
 80009a8:	4a19      	ldr	r2, [pc, #100]	@ (8000a10 <MX_FREERTOS_Init+0x9c>)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4819      	ldr	r0, [pc, #100]	@ (8000a14 <MX_FREERTOS_Init+0xa0>)
 80009ae:	f009 fc0b 	bl	800a1c8 <osThreadNew>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a18      	ldr	r2, [pc, #96]	@ (8000a18 <MX_FREERTOS_Init+0xa4>)
 80009b6:	6013      	str	r3, [r2, #0]

  /* creation of temp */
  tempHandle = osThreadNew(temp_task, NULL, &temp_attributes);
 80009b8:	4a18      	ldr	r2, [pc, #96]	@ (8000a1c <MX_FREERTOS_Init+0xa8>)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4818      	ldr	r0, [pc, #96]	@ (8000a20 <MX_FREERTOS_Init+0xac>)
 80009be:	f009 fc03 	bl	800a1c8 <osThreadNew>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <MX_FREERTOS_Init+0xb0>)
 80009c6:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(imu_task, NULL, &imu_attributes);
 80009c8:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <MX_FREERTOS_Init+0xb4>)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4817      	ldr	r0, [pc, #92]	@ (8000a2c <MX_FREERTOS_Init+0xb8>)
 80009ce:	f009 fbfb 	bl	800a1c8 <osThreadNew>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a16      	ldr	r2, [pc, #88]	@ (8000a30 <MX_FREERTOS_Init+0xbc>)
 80009d6:	6013      	str	r3, [r2, #0]

  /* creation of batterie */
  batterieHandle = osThreadNew(batterie_task, NULL, &batterie_attributes);
 80009d8:	4a16      	ldr	r2, [pc, #88]	@ (8000a34 <MX_FREERTOS_Init+0xc0>)
 80009da:	2100      	movs	r1, #0
 80009dc:	4816      	ldr	r0, [pc, #88]	@ (8000a38 <MX_FREERTOS_Init+0xc4>)
 80009de:	f009 fbf3 	bl	800a1c8 <osThreadNew>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a15      	ldr	r2, [pc, #84]	@ (8000a3c <MX_FREERTOS_Init+0xc8>)
 80009e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	0800db4c 	.word	0x0800db4c
 80009f0:	0800cd65 	.word	0x0800cd65
 80009f4:	24000094 	.word	0x24000094
 80009f8:	0800db70 	.word	0x0800db70
 80009fc:	0800d9b1 	.word	0x0800d9b1
 8000a00:	24000098 	.word	0x24000098
 8000a04:	0800db94 	.word	0x0800db94
 8000a08:	0800d975 	.word	0x0800d975
 8000a0c:	2400009c 	.word	0x2400009c
 8000a10:	0800dbb8 	.word	0x0800dbb8
 8000a14:	0800d9d5 	.word	0x0800d9d5
 8000a18:	240000a0 	.word	0x240000a0
 8000a1c:	0800dbdc 	.word	0x0800dbdc
 8000a20:	0800d9f9 	.word	0x0800d9f9
 8000a24:	240000a4 	.word	0x240000a4
 8000a28:	0800dc00 	.word	0x0800dc00
 8000a2c:	0800d989 	.word	0x0800d989
 8000a30:	240000a8 	.word	0x240000a8
 8000a34:	0800dc24 	.word	0x0800dc24
 8000a38:	0800d931 	.word	0x0800d931
 8000a3c:	240000ac 	.word	0x240000ac

08000a40 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b51      	ldr	r3, [pc, #324]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	4a4f      	ldr	r2, [pc, #316]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a66:	4b4d      	ldr	r3, [pc, #308]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b49      	ldr	r3, [pc, #292]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	4a48      	ldr	r2, [pc, #288]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a84:	4b45      	ldr	r3, [pc, #276]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b42      	ldr	r3, [pc, #264]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	4a40      	ldr	r2, [pc, #256]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	4a39      	ldr	r2, [pc, #228]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac0:	4b36      	ldr	r3, [pc, #216]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ace:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	4a31      	ldr	r2, [pc, #196]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ade:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <MX_GPIO_Init+0x15c>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000aec:	2332      	movs	r3, #50	@ 0x32
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000afc:	230b      	movs	r3, #11
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4826      	ldr	r0, [pc, #152]	@ (8000ba0 <MX_GPIO_Init+0x160>)
 8000b08:	f002 fd68 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b0c:	2386      	movs	r3, #134	@ 0x86
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	481f      	ldr	r0, [pc, #124]	@ (8000ba4 <MX_GPIO_Init+0x164>)
 8000b28:	f002 fd58 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3e:	230b      	movs	r3, #11
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4817      	ldr	r0, [pc, #92]	@ (8000ba8 <MX_GPIO_Init+0x168>)
 8000b4a:	f002 fd47 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b4e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b60:	230a      	movs	r3, #10
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <MX_GPIO_Init+0x164>)
 8000b6c:	f002 fd36 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b70:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_GPIO_Init+0x16c>)
 8000b8e:	f002 fd25 	bl	80035dc <HAL_GPIO_Init>

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	@ 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	58024400 	.word	0x58024400
 8000ba0:	58020800 	.word	0x58020800
 8000ba4:	58020000 	.word	0x58020000
 8000ba8:	58020400 	.word	0x58020400
 8000bac:	58021800 	.word	0x58021800

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000bb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bba:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bbc:	bf00      	nop
 8000bbe:	4b28      	ldr	r3, [pc, #160]	@ (8000c60 <main+0xb0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d004      	beq.n	8000bd4 <main+0x24>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	1e5a      	subs	r2, r3, #1
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dcf4      	bgt.n	8000bbe <main+0xe>
  if ( timeout < 0 )
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	da01      	bge.n	8000bde <main+0x2e>
  {
  Error_Handler();
 8000bda:	f000 f8d1 	bl	8000d80 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f000 fbc1 	bl	8001364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f83f 	bl	8000c64 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000be6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <main+0xb0>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bec:	4a1c      	ldr	r2, [pc, #112]	@ (8000c60 <main+0xb0>)
 8000bee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <main+0xb0>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f002 feb1 	bl	800396c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f002 fec7 	bl	80039a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c16:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c18:	bf00      	nop
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <main+0xb0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d104      	bne.n	8000c30 <main+0x80>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	1e5a      	subs	r2, r3, #1
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	dcf4      	bgt.n	8000c1a <main+0x6a>
if ( timeout < 0 )
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	da01      	bge.n	8000c3a <main+0x8a>
{
Error_Handler();
 8000c36:	f000 f8a3 	bl	8000d80 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3a:	f7ff ff01 	bl	8000a40 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c3e:	f000 f8a5 	bl	8000d8c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000c42:	f000 faa5 	bl	8001190 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c46:	f7ff fda7 	bl	8000798 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c4a:	f000 fa31 	bl	80010b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c4e:	f009 fa71 	bl	800a134 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c52:	f7ff fe8f 	bl	8000974 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c56:	f009 fa91 	bl	800a17c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c5a:	bf00      	nop
 8000c5c:	e7fd      	b.n	8000c5a <main+0xaa>
 8000c5e:	bf00      	nop
 8000c60:	58024400 	.word	0x58024400

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b09c      	sub	sp, #112	@ 0x70
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6e:	224c      	movs	r2, #76	@ 0x4c
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f00c fed6 	bl	800da24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00c fed0 	bl	800da24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c84:	2004      	movs	r0, #4
 8000c86:	f002 fe9f 	bl	80039c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b31      	ldr	r3, [pc, #196]	@ (8000d54 <SystemClock_Config+0xf0>)
 8000c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c92:	4a30      	ldr	r2, [pc, #192]	@ (8000d54 <SystemClock_Config+0xf0>)
 8000c94:	f023 0301 	bic.w	r3, r3, #1
 8000c98:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d54 <SystemClock_Config+0xf0>)
 8000c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <SystemClock_Config+0xf4>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cac:	4a2a      	ldr	r2, [pc, #168]	@ (8000d58 <SystemClock_Config+0xf4>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <SystemClock_Config+0xf4>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cc0:	bf00      	nop
 8000cc2:	4b25      	ldr	r3, [pc, #148]	@ (8000d58 <SystemClock_Config+0xf4>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cce:	d1f8      	bne.n	8000cc2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd8:	2340      	movs	r3, #64	@ 0x40
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ce8:	230a      	movs	r3, #10
 8000cea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cec:	2302      	movs	r3, #2
 8000cee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 feb7 	bl	8003a7c <HAL_RCC_OscConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d14:	f000 f834 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d18:	233f      	movs	r3, #63	@ 0x3f
 8000d1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d2c:	2340      	movs	r3, #64	@ 0x40
 8000d2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 faf7 	bl	8004330 <HAL_RCC_ClockConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000d48:	f000 f81a 	bl	8000d80 <Error_Handler>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3770      	adds	r7, #112	@ 0x70
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58000400 	.word	0x58000400
 8000d58:	58024800 	.word	0x58024800

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d6e:	f000 fb35 	bl	80013dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40010000 	.word	0x40010000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <Error_Handler+0x8>

08000d8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d90:	4b27      	ldr	r3, [pc, #156]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000d92:	4a28      	ldr	r2, [pc, #160]	@ (8000e34 <MX_SPI1_Init+0xa8>)
 8000d94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000d98:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000da4:	4b22      	ldr	r3, [pc, #136]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000da6:	2203      	movs	r2, #3
 8000da8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000db6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000db8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000dbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000dde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_SPI1_Init+0xa4>)
 8000e1c:	f006 fb54 	bl	80074c8 <HAL_SPI_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000e26:	f7ff ffab 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	240000b0 	.word	0x240000b0
 8000e34:	40013000 	.word	0x40013000

08000e38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0bc      	sub	sp, #240	@ 0xf0
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	22c0      	movs	r2, #192	@ 0xc0
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f00c fde3 	bl	800da24 <memset>
  if(spiHandle->Instance==SPI1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a38      	ldr	r2, [pc, #224]	@ (8000f44 <HAL_SPI_MspInit+0x10c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d168      	bne.n	8000f3a <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fe25 	bl	8004acc <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000e88:	f7ff ff7a 	bl	8000d80 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f48 <HAL_SPI_MspInit+0x110>)
 8000e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e92:	4a2d      	ldr	r2, [pc, #180]	@ (8000f48 <HAL_SPI_MspInit+0x110>)
 8000e94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f48 <HAL_SPI_MspInit+0x110>)
 8000e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <HAL_SPI_MspInit+0x110>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	4a25      	ldr	r2, [pc, #148]	@ (8000f48 <HAL_SPI_MspInit+0x110>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eba:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <HAL_SPI_MspInit+0x110>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <HAL_SPI_MspInit+0x110>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	4a1e      	ldr	r2, [pc, #120]	@ (8000f48 <HAL_SPI_MspInit+0x110>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <HAL_SPI_MspInit+0x110>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ee6:	2360      	movs	r3, #96	@ 0x60
 8000ee8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efe:	2305      	movs	r3, #5
 8000f00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4810      	ldr	r0, [pc, #64]	@ (8000f4c <HAL_SPI_MspInit+0x114>)
 8000f0c:	f002 fb66 	bl	80035dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f28:	2305      	movs	r3, #5
 8000f2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f32:	4619      	mov	r1, r3
 8000f34:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <HAL_SPI_MspInit+0x118>)
 8000f36:	f002 fb51 	bl	80035dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	37f0      	adds	r7, #240	@ 0xf0
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40013000 	.word	0x40013000
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58020000 	.word	0x58020000
 8000f50:	58020c00 	.word	0x58020c00

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <HAL_MspInit+0x38>)
 8000f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f60:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <HAL_MspInit+0x38>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <HAL_MspInit+0x38>)
 8000f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f06f 0001 	mvn.w	r0, #1
 8000f80:	f001 fda0 	bl	8002ac4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	58024400 	.word	0x58024400

08000f90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08e      	sub	sp, #56	@ 0x38
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	d842      	bhi.n	8001024 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	2019      	movs	r0, #25
 8000fa4:	f001 fd8e 	bl	8002ac4 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fa8:	2019      	movs	r0, #25
 8000faa:	f001 fda5 	bl	8002af8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000fae:	4a23      	ldr	r2, [pc, #140]	@ (800103c <HAL_InitTick+0xac>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb4:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <HAL_InitTick+0xb0>)
 8000fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fba:	4a21      	ldr	r2, [pc, #132]	@ (8001040 <HAL_InitTick+0xb0>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <HAL_InitTick+0xb0>)
 8000fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 fd33 	bl	8004a48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fe2:	f003 fd1b 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 8000fe6:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fea:	4a16      	ldr	r2, [pc, #88]	@ (8001044 <HAL_InitTick+0xb4>)
 8000fec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff0:	0c9b      	lsrs	r3, r3, #18
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_InitTick+0xb8>)
 8000ff8:	4a14      	ldr	r2, [pc, #80]	@ (800104c <HAL_InitTick+0xbc>)
 8000ffa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0xb8>)
 8000ffe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001002:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001004:	4a10      	ldr	r2, [pc, #64]	@ (8001048 <HAL_InitTick+0xb8>)
 8001006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001008:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800100a:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <HAL_InitTick+0xb8>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001010:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_InitTick+0xb8>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001016:	480c      	ldr	r0, [pc, #48]	@ (8001048 <HAL_InitTick+0xb8>)
 8001018:	f006 fb95 	bl	8007746 <HAL_TIM_Base_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d107      	bne.n	8001032 <HAL_InitTick+0xa2>
 8001022:	e001      	b.n	8001028 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e005      	b.n	8001034 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001028:	4807      	ldr	r0, [pc, #28]	@ (8001048 <HAL_InitTick+0xb8>)
 800102a:	f006 fc53 	bl	80078d4 <HAL_TIM_Base_Start_IT>
 800102e:	4603      	mov	r3, r0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3738      	adds	r7, #56	@ 0x38
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	24000008 	.word	0x24000008
 8001040:	58024400 	.word	0x58024400
 8001044:	431bde83 	.word	0x431bde83
 8001048:	24000138 	.word	0x24000138
 800104c:	40010000 	.word	0x40010000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <NMI_Handler+0x4>

08001058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <MemManage_Handler+0x4>

08001068 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <UsageFault_Handler+0x4>

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <TIM1_UP_IRQHandler+0x10>)
 800108e:	f006 fc99 	bl	80079c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	24000138 	.word	0x24000138

0800109c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <USART3_IRQHandler+0x10>)
 80010a2:	f007 f985 	bl	80083b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	240001d0 	.word	0x240001d0

080010b0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <MX_TIM3_Init+0x94>)
 80010d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001148 <MX_TIM3_Init+0x98>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_TIM3_Init+0x94>)
 80010d6:	22ef      	movs	r2, #239	@ 0xef
 80010d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_TIM3_Init+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_TIM3_Init+0x94>)
 80010e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <MX_TIM3_Init+0x94>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_TIM3_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010f4:	4813      	ldr	r0, [pc, #76]	@ (8001144 <MX_TIM3_Init+0x94>)
 80010f6:	f006 fb26 	bl	8007746 <HAL_TIM_Base_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001100:	f7ff fe3e 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001108:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <MX_TIM3_Init+0x94>)
 8001112:	f006 fd5f 	bl	8007bd4 <HAL_TIM_ConfigClockSource>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800111c:	f7ff fe30 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_TIM3_Init+0x94>)
 800112e:	f006 ffaf 	bl	8008090 <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001138:	f7ff fe22 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	24000184 	.word	0x24000184
 8001148:	40000400 	.word	0x40000400

0800114c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0b      	ldr	r2, [pc, #44]	@ (8001188 <HAL_TIM_Base_MspInit+0x3c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10e      	bne.n	800117c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <HAL_TIM_Base_MspInit+0x40>)
 8001160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001164:	4a09      	ldr	r2, [pc, #36]	@ (800118c <HAL_TIM_Base_MspInit+0x40>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800116e:	4b07      	ldr	r3, [pc, #28]	@ (800118c <HAL_TIM_Base_MspInit+0x40>)
 8001170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	40000400 	.word	0x40000400
 800118c:	58024400 	.word	0x58024400

08001190 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001194:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 8001196:	4a23      	ldr	r2, [pc, #140]	@ (8001224 <MX_USART3_UART_Init+0x94>)
 8001198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800119a:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c6:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d2:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011d8:	4811      	ldr	r0, [pc, #68]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011da:	f007 f805 	bl	80081e8 <HAL_UART_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011e4:	f7ff fdcc 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e8:	2100      	movs	r1, #0
 80011ea:	480d      	ldr	r0, [pc, #52]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011ec:	f008 fe94 	bl	8009f18 <HAL_UARTEx_SetTxFifoThreshold>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011f6:	f7ff fdc3 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4808      	ldr	r0, [pc, #32]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011fe:	f008 fec9 	bl	8009f94 <HAL_UARTEx_SetRxFifoThreshold>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001208:	f7ff fdba 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 800120e:	f008 fe4a 	bl	8009ea6 <HAL_UARTEx_DisableFifoMode>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001218:	f7ff fdb2 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	240001d0 	.word	0x240001d0
 8001224:	40004800 	.word	0x40004800

08001228 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0ba      	sub	sp, #232	@ 0xe8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	22c0      	movs	r2, #192	@ 0xc0
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f00c fbeb 	bl	800da24 <memset>
  if(uartHandle->Instance==USART3)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a2b      	ldr	r2, [pc, #172]	@ (8001300 <HAL_UART_MspInit+0xd8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d14e      	bne.n	80012f6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001258:	f04f 0202 	mov.w	r2, #2
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fc2c 	bl	8004acc <HAL_RCCEx_PeriphCLKConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800127a:	f7ff fd81 	bl	8000d80 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800127e:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <HAL_UART_MspInit+0xdc>)
 8001280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001284:	4a1f      	ldr	r2, [pc, #124]	@ (8001304 <HAL_UART_MspInit+0xdc>)
 8001286:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800128a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <HAL_UART_MspInit+0xdc>)
 8001290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800129c:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <HAL_UART_MspInit+0xdc>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	4a18      	ldr	r2, [pc, #96]	@ (8001304 <HAL_UART_MspInit+0xdc>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_UART_MspInit+0xdc>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012d4:	2307      	movs	r3, #7
 80012d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012de:	4619      	mov	r1, r3
 80012e0:	4809      	ldr	r0, [pc, #36]	@ (8001308 <HAL_UART_MspInit+0xe0>)
 80012e2:	f002 f97b 	bl	80035dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2105      	movs	r1, #5
 80012ea:	2027      	movs	r0, #39	@ 0x27
 80012ec:	f001 fbea 	bl	8002ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012f0:	2027      	movs	r0, #39	@ 0x27
 80012f2:	f001 fc01 	bl	8002af8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012f6:	bf00      	nop
 80012f8:	37e8      	adds	r7, #232	@ 0xe8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40004800 	.word	0x40004800
 8001304:	58024400 	.word	0x58024400
 8001308:	58020c00 	.word	0x58020c00

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800130c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001348 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001310:	f7ff fa2a 	bl	8000768 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001314:	f7ff f97a 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800131a:	490d      	ldr	r1, [pc, #52]	@ (8001350 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800131c:	4a0d      	ldr	r2, [pc, #52]	@ (8001354 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001330:	4c0a      	ldr	r4, [pc, #40]	@ (800135c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133e:	f00c fb79 	bl	800da34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001342:	f7ff fc35 	bl	8000bb0 <main>
  bx  lr
 8001346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001348:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800134c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001350:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001354:	0800dca4 	.word	0x0800dca4
  ldr r2, =_sbss
 8001358:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800135c:	24004be8 	.word	0x24004be8

08001360 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC3_IRQHandler>
	...

08001364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136a:	2003      	movs	r0, #3
 800136c:	f001 fb9f 	bl	8002aae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001370:	f003 f994 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8001374:	4602      	mov	r2, r0
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_Init+0x68>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	0a1b      	lsrs	r3, r3, #8
 800137c:	f003 030f 	and.w	r3, r3, #15
 8001380:	4913      	ldr	r1, [pc, #76]	@ (80013d0 <HAL_Init+0x6c>)
 8001382:	5ccb      	ldrb	r3, [r1, r3]
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
 800138c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <HAL_Init+0x68>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	4a0e      	ldr	r2, [pc, #56]	@ (80013d0 <HAL_Init+0x6c>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
 80013a4:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HAL_Init+0x70>)
 80013a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013a8:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <HAL_Init+0x74>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ae:	200f      	movs	r0, #15
 80013b0:	f7ff fdee 	bl	8000f90 <HAL_InitTick>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e002      	b.n	80013c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013be:	f7ff fdc9 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	58024400 	.word	0x58024400
 80013d0:	0800db3c 	.word	0x0800db3c
 80013d4:	24000004 	.word	0x24000004
 80013d8:	24000000 	.word	0x24000000

080013dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	2400000c 	.word	0x2400000c
 8001400:	24000264 	.word	0x24000264

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	24000264 	.word	0x24000264

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff ffee 	bl	8001404 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <HAL_Delay+0x44>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffde 	bl	8001404 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2400000c 	.word	0x2400000c

08001464 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <HAL_GetREVID+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0c1b      	lsrs	r3, r3, #16
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	5c001000 	.word	0x5c001000

0800147c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	609a      	str	r2, [r3, #8]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d107      	bne.n	8001508 <LL_ADC_SetChannelPreselection+0x24>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	0e9b      	lsrs	r3, r3, #26
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	2201      	movs	r2, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	e015      	b.n	8001534 <LL_ADC_SetChannelPreselection+0x50>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800151e:	2320      	movs	r3, #32
 8001520:	e003      	b.n	800152a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	2201      	movs	r2, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	69d2      	ldr	r2, [r2, #28]
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800153e:	bf00      	nop
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800154a:	b480      	push	{r7}
 800154c:	b087      	sub	sp, #28
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3360      	adds	r3, #96	@ 0x60
 800155c:	461a      	mov	r2, r3
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	430b      	orrs	r3, r1
 8001578:	431a      	orrs	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	431a      	orrs	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	611a      	str	r2, [r3, #16]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3360      	adds	r3, #96	@ 0x60
 80015cc:	461a      	mov	r2, r3
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	601a      	str	r2, [r3, #0]
  }
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b087      	sub	sp, #28
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3330      	adds	r3, #48	@ 0x30
 8001602:	461a      	mov	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	4413      	add	r3, r2
 8001610:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f003 031f 	and.w	r3, r3, #31
 800161c:	211f      	movs	r1, #31
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	401a      	ands	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	0e9b      	lsrs	r3, r3, #26
 800162a:	f003 011f 	and.w	r1, r3, #31
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	431a      	orrs	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800163e:	bf00      	nop
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800164a:	b480      	push	{r7}
 800164c:	b087      	sub	sp, #28
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3314      	adds	r3, #20
 800165a:	461a      	mov	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	0e5b      	lsrs	r3, r3, #25
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	0d1b      	lsrs	r3, r3, #20
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	2107      	movs	r1, #7
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	401a      	ands	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	0d1b      	lsrs	r3, r3, #20
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	431a      	orrs	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001694:	bf00      	nop
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0318 	and.w	r3, r3, #24
 80016c2:	4908      	ldr	r1, [pc, #32]	@ (80016e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016c4:	40d9      	lsrs	r1, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	400b      	ands	r3, r1
 80016ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016ce:	431a      	orrs	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	000fffff 	.word	0x000fffff

080016e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 031f 	and.w	r3, r3, #31
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6093      	str	r3, [r2, #8]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	5fffffc0 	.word	0x5fffffc0

08001728 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800173c:	d101      	bne.n	8001742 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <LL_ADC_EnableInternalRegulator+0x24>)
 800175e:	4013      	ands	r3, r2
 8001760:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	6fffffc0 	.word	0x6fffffc0

08001778 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800178c:	d101      	bne.n	8001792 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <LL_ADC_Enable+0x24>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	7fffffc0 	.word	0x7fffffc0

080017c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <LL_ADC_IsEnabled+0x18>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <LL_ADC_IsEnabled+0x1a>
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <LL_ADC_REG_StartConversion+0x24>)
 80017fe:	4013      	ands	r3, r2
 8001800:	f043 0204 	orr.w	r2, r3, #4
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	7fffffc0 	.word	0x7fffffc0

08001818 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b04      	cmp	r3, #4
 800182a:	d101      	bne.n	8001830 <LL_ADC_REG_IsConversionOngoing+0x18>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b08      	cmp	r3, #8
 8001850:	d101      	bne.n	8001856 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b089      	sub	sp, #36	@ 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e18f      	b.n	8001b9e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7fe ffff 	bl	8000890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff3f 	bl	8001728 <LL_ADC_IsDeepPowerDownEnabled>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff25 	bl	8001704 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff5a 	bl	8001778 <LL_ADC_IsInternalRegulatorEnabled>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d114      	bne.n	80018f4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff3e 	bl	8001750 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018d4:	4b87      	ldr	r3, [pc, #540]	@ (8001af4 <HAL_ADC_Init+0x290>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	4a87      	ldr	r2, [pc, #540]	@ (8001af8 <HAL_ADC_Init+0x294>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	3301      	adds	r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018e6:	e002      	b.n	80018ee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f9      	bne.n	80018e8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff3d 	bl	8001778 <LL_ADC_IsInternalRegulatorEnabled>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10d      	bne.n	8001920 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f043 0210 	orr.w	r2, r3, #16
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff77 	bl	8001818 <LL_ADC_REG_IsConversionOngoing>
 800192a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b00      	cmp	r3, #0
 8001936:	f040 8129 	bne.w	8001b8c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f040 8125 	bne.w	8001b8c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001946:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800194a:	f043 0202 	orr.w	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff36 	bl	80017c8 <LL_ADC_IsEnabled>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d136      	bne.n	80019d0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a65      	ldr	r2, [pc, #404]	@ (8001afc <HAL_ADC_Init+0x298>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d004      	beq.n	8001976 <HAL_ADC_Init+0x112>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a63      	ldr	r2, [pc, #396]	@ (8001b00 <HAL_ADC_Init+0x29c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d10e      	bne.n	8001994 <HAL_ADC_Init+0x130>
 8001976:	4861      	ldr	r0, [pc, #388]	@ (8001afc <HAL_ADC_Init+0x298>)
 8001978:	f7ff ff26 	bl	80017c8 <LL_ADC_IsEnabled>
 800197c:	4604      	mov	r4, r0
 800197e:	4860      	ldr	r0, [pc, #384]	@ (8001b00 <HAL_ADC_Init+0x29c>)
 8001980:	f7ff ff22 	bl	80017c8 <LL_ADC_IsEnabled>
 8001984:	4603      	mov	r3, r0
 8001986:	4323      	orrs	r3, r4
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	e008      	b.n	80019a6 <HAL_ADC_Init+0x142>
 8001994:	485b      	ldr	r0, [pc, #364]	@ (8001b04 <HAL_ADC_Init+0x2a0>)
 8001996:	f7ff ff17 	bl	80017c8 <LL_ADC_IsEnabled>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d012      	beq.n	80019d0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a53      	ldr	r2, [pc, #332]	@ (8001afc <HAL_ADC_Init+0x298>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d004      	beq.n	80019be <HAL_ADC_Init+0x15a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a51      	ldr	r2, [pc, #324]	@ (8001b00 <HAL_ADC_Init+0x29c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_Init+0x15e>
 80019be:	4a52      	ldr	r2, [pc, #328]	@ (8001b08 <HAL_ADC_Init+0x2a4>)
 80019c0:	e000      	b.n	80019c4 <HAL_ADC_Init+0x160>
 80019c2:	4a52      	ldr	r2, [pc, #328]	@ (8001b0c <HAL_ADC_Init+0x2a8>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f7ff fd56 	bl	800147c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80019d0:	f7ff fd48 	bl	8001464 <HAL_GetREVID>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019da:	4293      	cmp	r3, r2
 80019dc:	d914      	bls.n	8001a08 <HAL_ADC_Init+0x1a4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d110      	bne.n	8001a08 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7d5b      	ldrb	r3, [r3, #21]
 80019ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019f0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80019f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7f1b      	ldrb	r3, [r3, #28]
 80019fc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80019fe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a00:	f043 030c 	orr.w	r3, r3, #12
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	e00d      	b.n	8001a24 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7d5b      	ldrb	r3, [r3, #21]
 8001a0c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a12:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a18:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7f1b      	ldrb	r3, [r3, #28]
 8001a1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7f1b      	ldrb	r3, [r3, #28]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d106      	bne.n	8001a3a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	045b      	lsls	r3, r3, #17
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a46:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b10 <HAL_ADC_Init+0x2ac>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	430b      	orrs	r3, r1
 8001a68:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fed2 	bl	8001818 <LL_ADC_REG_IsConversionOngoing>
 8001a74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fedf 	bl	800183e <LL_ADC_INJ_IsConversionOngoing>
 8001a80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d15f      	bne.n	8001b48 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d15c      	bne.n	8001b48 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7d1b      	ldrb	r3, [r3, #20]
 8001a92:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <HAL_ADC_Init+0x2b0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d130      	bne.n	8001b1c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <HAL_ADC_Init+0x2b4>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	0411      	lsls	r1, r2, #16
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001adc:	4311      	orrs	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	e01c      	b.n	8001b2c <HAL_ADC_Init+0x2c8>
 8001af2:	bf00      	nop
 8001af4:	24000000 	.word	0x24000000
 8001af8:	053e2d63 	.word	0x053e2d63
 8001afc:	40022000 	.word	0x40022000
 8001b00:	40022100 	.word	0x40022100
 8001b04:	58026000 	.word	0x58026000
 8001b08:	40022300 	.word	0x40022300
 8001b0c:	58026300 	.word	0x58026300
 8001b10:	fff0c003 	.word	0xfff0c003
 8001b14:	ffffbffc 	.word	0xffffbffc
 8001b18:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fcf6 	bl	8002534 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10c      	bne.n	8001b6a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f023 010f 	bic.w	r1, r3, #15
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	1e5a      	subs	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b68:	e007      	b.n	8001b7a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 020f 	bic.w	r2, r2, #15
 8001b78:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7e:	f023 0303 	bic.w	r3, r3, #3
 8001b82:	f043 0201 	orr.w	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b8a:	e007      	b.n	8001b9c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b90:	f043 0210 	orr.w	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	@ 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	bf00      	nop

08001ba8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a92      	ldr	r2, [pc, #584]	@ (8001e00 <HAL_ADC_Start_IT+0x258>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d004      	beq.n	8001bc4 <HAL_ADC_Start_IT+0x1c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a91      	ldr	r2, [pc, #580]	@ (8001e04 <HAL_ADC_Start_IT+0x25c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_ADC_Start_IT+0x20>
 8001bc4:	4b90      	ldr	r3, [pc, #576]	@ (8001e08 <HAL_ADC_Start_IT+0x260>)
 8001bc6:	e000      	b.n	8001bca <HAL_ADC_Start_IT+0x22>
 8001bc8:	4b90      	ldr	r3, [pc, #576]	@ (8001e0c <HAL_ADC_Start_IT+0x264>)
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fd8c 	bl	80016e8 <LL_ADC_GetMultimode>
 8001bd0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fe1e 	bl	8001818 <LL_ADC_REG_IsConversionOngoing>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 8118 	bne.w	8001e14 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_Start_IT+0x4a>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e113      	b.n	8001e1a <HAL_ADC_Start_IT+0x272>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fc10 	bl	8002420 <ADC_Enable>
 8001c00:	4603      	mov	r3, r0
 8001c02:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 80f5 	bne.w	8001df6 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001c10:	4b7f      	ldr	r3, [pc, #508]	@ (8001e10 <HAL_ADC_Start_IT+0x268>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a78      	ldr	r2, [pc, #480]	@ (8001e04 <HAL_ADC_Start_IT+0x25c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d002      	beq.n	8001c2c <HAL_ADC_Start_IT+0x84>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	e000      	b.n	8001c2e <HAL_ADC_Start_IT+0x86>
 8001c2c:	4b74      	ldr	r3, [pc, #464]	@ (8001e00 <HAL_ADC_Start_IT+0x258>)
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d002      	beq.n	8001c3c <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d105      	bne.n	8001c48 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c58:	f023 0206 	bic.w	r2, r3, #6
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c60:	e002      	b.n	8001c68 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	221c      	movs	r2, #28
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 021c 	bic.w	r2, r2, #28
 8001c86:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d108      	bne.n	8001ca2 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0208 	orr.w	r2, r2, #8
 8001c9e:	605a      	str	r2, [r3, #4]
          break;
 8001ca0:	e008      	b.n	8001cb4 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0204 	orr.w	r2, r2, #4
 8001cb0:	605a      	str	r2, [r3, #4]
          break;
 8001cb2:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d107      	bne.n	8001ccc <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0210 	orr.w	r2, r2, #16
 8001cca:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001e04 <HAL_ADC_Start_IT+0x25c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d002      	beq.n	8001cdc <HAL_ADC_Start_IT+0x134>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	e000      	b.n	8001cde <HAL_ADC_Start_IT+0x136>
 8001cdc:	4b48      	ldr	r3, [pc, #288]	@ (8001e00 <HAL_ADC_Start_IT+0x258>)
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d008      	beq.n	8001cf8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d002      	beq.n	8001cf8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	d13a      	bne.n	8001d6e <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d02d      	beq.n	8001d62 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d110      	bne.n	8001d40 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0220 	bic.w	r2, r2, #32
 8001d2c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d3c:	605a      	str	r2, [r3, #4]
              break;
 8001d3e:	e010      	b.n	8001d62 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d4e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0220 	orr.w	r2, r2, #32
 8001d5e:	605a      	str	r2, [r3, #4]
              break;
 8001d60:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fd42 	bl	80017f0 <LL_ADC_REG_StartConversion>
 8001d6c:	e054      	b.n	8001e18 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a21      	ldr	r2, [pc, #132]	@ (8001e04 <HAL_ADC_Start_IT+0x25c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d002      	beq.n	8001d8a <HAL_ADC_Start_IT+0x1e2>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	e000      	b.n	8001d8c <HAL_ADC_Start_IT+0x1e4>
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <HAL_ADC_Start_IT+0x258>)
 8001d8c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d03e      	beq.n	8001e18 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001da2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d110      	bne.n	8001dd4 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0220 	bic.w	r2, r2, #32
 8001dc0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dd0:	605a      	str	r2, [r3, #4]
              break;
 8001dd2:	e021      	b.n	8001e18 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001de2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0220 	orr.w	r2, r2, #32
 8001df2:	605a      	str	r2, [r3, #4]
              break;
 8001df4:	e010      	b.n	8001e18 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001dfe:	e00b      	b.n	8001e18 <HAL_ADC_Start_IT+0x270>
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40022100 	.word	0x40022100
 8001e08:	40022300 	.word	0x40022300
 8001e0c:	58026300 	.word	0x58026300
 8001e10:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e14:	2302      	movs	r3, #2
 8001e16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop

08001e24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b08d      	sub	sp, #52	@ 0x34
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4a65      	ldr	r2, [pc, #404]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x1b0>)
 8001e5a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x2a>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e2c7      	b.n	80023fa <HAL_ADC_ConfigChannel+0x5ba>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fcce 	bl	8001818 <LL_ADC_REG_IsConversionOngoing>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 82ac 	bne.w	80023dc <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db2c      	blt.n	8001ee6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d108      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x6a>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0e9b      	lsrs	r3, r3, #26
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	e016      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x98>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	613b      	str	r3, [r7, #16]
  return result;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e003      	b.n	8001ece <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	69d1      	ldr	r1, [r2, #28]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6859      	ldr	r1, [r3, #4]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f7ff fb7d 	bl	80015f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fc8b 	bl	8001818 <LL_ADC_REG_IsConversionOngoing>
 8001f02:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc98 	bl	800183e <LL_ADC_INJ_IsConversionOngoing>
 8001f0e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 80b8 	bne.w	8002088 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 80b4 	bne.w	8002088 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f7ff fb8c 	bl	800164a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f32:	4b30      	ldr	r3, [pc, #192]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x1b4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001f3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f3e:	d10b      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x118>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	e01d      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x154>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10b      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x13e>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	e00a      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x154>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d02c      	beq.n	8001ff8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6919      	ldr	r1, [r3, #16]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	f7ff facd 	bl	800154a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6919      	ldr	r1, [r3, #16]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	7e5b      	ldrb	r3, [r3, #25]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d102      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x186>
 8001fc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001fc4:	e000      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x188>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f7ff faf7 	bl	80015bc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6919      	ldr	r1, [r3, #16]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	7e1b      	ldrb	r3, [r3, #24]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1a4>
 8001fde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fe2:	e000      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x1a6>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f7ff facf 	bl	800158a <LL_ADC_SetDataRightShift>
 8001fec:	e04c      	b.n	8002088 <HAL_ADC_ConfigChannel+0x248>
 8001fee:	bf00      	nop
 8001ff0:	47ff0000 	.word	0x47ff0000
 8001ff4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	069b      	lsls	r3, r3, #26
 8002008:	429a      	cmp	r2, r3
 800200a:	d107      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800201a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002022:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	069b      	lsls	r3, r3, #26
 800202c:	429a      	cmp	r2, r3
 800202e:	d107      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800203e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002046:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	069b      	lsls	r3, r3, #26
 8002050:	429a      	cmp	r2, r3
 8002052:	d107      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002062:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800206a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	069b      	lsls	r3, r3, #26
 8002074:	429a      	cmp	r2, r3
 8002076:	d107      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002086:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fb9b 	bl	80017c8 <LL_ADC_IsEnabled>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	f040 81aa 	bne.w	80023ee <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6819      	ldr	r1, [r3, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	461a      	mov	r2, r3
 80020a8:	f7ff fafa 	bl	80016a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a87      	ldr	r2, [pc, #540]	@ (80022d0 <HAL_ADC_ConfigChannel+0x490>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	f040 809a 	bne.w	80021ec <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4984      	ldr	r1, [pc, #528]	@ (80022d4 <HAL_ADC_ConfigChannel+0x494>)
 80020c2:	428b      	cmp	r3, r1
 80020c4:	d147      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x316>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4983      	ldr	r1, [pc, #524]	@ (80022d8 <HAL_ADC_ConfigChannel+0x498>)
 80020cc:	428b      	cmp	r3, r1
 80020ce:	d040      	beq.n	8002152 <HAL_ADC_ConfigChannel+0x312>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4981      	ldr	r1, [pc, #516]	@ (80022dc <HAL_ADC_ConfigChannel+0x49c>)
 80020d6:	428b      	cmp	r3, r1
 80020d8:	d039      	beq.n	800214e <HAL_ADC_ConfigChannel+0x30e>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4980      	ldr	r1, [pc, #512]	@ (80022e0 <HAL_ADC_ConfigChannel+0x4a0>)
 80020e0:	428b      	cmp	r3, r1
 80020e2:	d032      	beq.n	800214a <HAL_ADC_ConfigChannel+0x30a>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	497e      	ldr	r1, [pc, #504]	@ (80022e4 <HAL_ADC_ConfigChannel+0x4a4>)
 80020ea:	428b      	cmp	r3, r1
 80020ec:	d02b      	beq.n	8002146 <HAL_ADC_ConfigChannel+0x306>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	497d      	ldr	r1, [pc, #500]	@ (80022e8 <HAL_ADC_ConfigChannel+0x4a8>)
 80020f4:	428b      	cmp	r3, r1
 80020f6:	d024      	beq.n	8002142 <HAL_ADC_ConfigChannel+0x302>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	497b      	ldr	r1, [pc, #492]	@ (80022ec <HAL_ADC_ConfigChannel+0x4ac>)
 80020fe:	428b      	cmp	r3, r1
 8002100:	d01d      	beq.n	800213e <HAL_ADC_ConfigChannel+0x2fe>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	497a      	ldr	r1, [pc, #488]	@ (80022f0 <HAL_ADC_ConfigChannel+0x4b0>)
 8002108:	428b      	cmp	r3, r1
 800210a:	d016      	beq.n	800213a <HAL_ADC_ConfigChannel+0x2fa>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4978      	ldr	r1, [pc, #480]	@ (80022f4 <HAL_ADC_ConfigChannel+0x4b4>)
 8002112:	428b      	cmp	r3, r1
 8002114:	d00f      	beq.n	8002136 <HAL_ADC_ConfigChannel+0x2f6>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4977      	ldr	r1, [pc, #476]	@ (80022f8 <HAL_ADC_ConfigChannel+0x4b8>)
 800211c:	428b      	cmp	r3, r1
 800211e:	d008      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x2f2>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4975      	ldr	r1, [pc, #468]	@ (80022fc <HAL_ADC_ConfigChannel+0x4bc>)
 8002126:	428b      	cmp	r3, r1
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x2ee>
 800212a:	4b75      	ldr	r3, [pc, #468]	@ (8002300 <HAL_ADC_ConfigChannel+0x4c0>)
 800212c:	e05a      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 800212e:	2300      	movs	r3, #0
 8002130:	e058      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 8002132:	4b74      	ldr	r3, [pc, #464]	@ (8002304 <HAL_ADC_ConfigChannel+0x4c4>)
 8002134:	e056      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 8002136:	4b74      	ldr	r3, [pc, #464]	@ (8002308 <HAL_ADC_ConfigChannel+0x4c8>)
 8002138:	e054      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 800213a:	4b6e      	ldr	r3, [pc, #440]	@ (80022f4 <HAL_ADC_ConfigChannel+0x4b4>)
 800213c:	e052      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 800213e:	4b6c      	ldr	r3, [pc, #432]	@ (80022f0 <HAL_ADC_ConfigChannel+0x4b0>)
 8002140:	e050      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 8002142:	4b72      	ldr	r3, [pc, #456]	@ (800230c <HAL_ADC_ConfigChannel+0x4cc>)
 8002144:	e04e      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 8002146:	4b72      	ldr	r3, [pc, #456]	@ (8002310 <HAL_ADC_ConfigChannel+0x4d0>)
 8002148:	e04c      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 800214a:	4b72      	ldr	r3, [pc, #456]	@ (8002314 <HAL_ADC_ConfigChannel+0x4d4>)
 800214c:	e04a      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 800214e:	4b72      	ldr	r3, [pc, #456]	@ (8002318 <HAL_ADC_ConfigChannel+0x4d8>)
 8002150:	e048      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 8002152:	2301      	movs	r3, #1
 8002154:	e046      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4970      	ldr	r1, [pc, #448]	@ (800231c <HAL_ADC_ConfigChannel+0x4dc>)
 800215c:	428b      	cmp	r3, r1
 800215e:	d140      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x3a2>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	495c      	ldr	r1, [pc, #368]	@ (80022d8 <HAL_ADC_ConfigChannel+0x498>)
 8002166:	428b      	cmp	r3, r1
 8002168:	d039      	beq.n	80021de <HAL_ADC_ConfigChannel+0x39e>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	495b      	ldr	r1, [pc, #364]	@ (80022dc <HAL_ADC_ConfigChannel+0x49c>)
 8002170:	428b      	cmp	r3, r1
 8002172:	d032      	beq.n	80021da <HAL_ADC_ConfigChannel+0x39a>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4959      	ldr	r1, [pc, #356]	@ (80022e0 <HAL_ADC_ConfigChannel+0x4a0>)
 800217a:	428b      	cmp	r3, r1
 800217c:	d02b      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x396>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4958      	ldr	r1, [pc, #352]	@ (80022e4 <HAL_ADC_ConfigChannel+0x4a4>)
 8002184:	428b      	cmp	r3, r1
 8002186:	d024      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x392>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4956      	ldr	r1, [pc, #344]	@ (80022e8 <HAL_ADC_ConfigChannel+0x4a8>)
 800218e:	428b      	cmp	r3, r1
 8002190:	d01d      	beq.n	80021ce <HAL_ADC_ConfigChannel+0x38e>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4955      	ldr	r1, [pc, #340]	@ (80022ec <HAL_ADC_ConfigChannel+0x4ac>)
 8002198:	428b      	cmp	r3, r1
 800219a:	d016      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x38a>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4953      	ldr	r1, [pc, #332]	@ (80022f0 <HAL_ADC_ConfigChannel+0x4b0>)
 80021a2:	428b      	cmp	r3, r1
 80021a4:	d00f      	beq.n	80021c6 <HAL_ADC_ConfigChannel+0x386>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4952      	ldr	r1, [pc, #328]	@ (80022f4 <HAL_ADC_ConfigChannel+0x4b4>)
 80021ac:	428b      	cmp	r3, r1
 80021ae:	d008      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x382>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4951      	ldr	r1, [pc, #324]	@ (80022fc <HAL_ADC_ConfigChannel+0x4bc>)
 80021b6:	428b      	cmp	r3, r1
 80021b8:	d101      	bne.n	80021be <HAL_ADC_ConfigChannel+0x37e>
 80021ba:	4b51      	ldr	r3, [pc, #324]	@ (8002300 <HAL_ADC_ConfigChannel+0x4c0>)
 80021bc:	e012      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 80021be:	2300      	movs	r3, #0
 80021c0:	e010      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 80021c2:	4b51      	ldr	r3, [pc, #324]	@ (8002308 <HAL_ADC_ConfigChannel+0x4c8>)
 80021c4:	e00e      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 80021c6:	4b4b      	ldr	r3, [pc, #300]	@ (80022f4 <HAL_ADC_ConfigChannel+0x4b4>)
 80021c8:	e00c      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 80021ca:	4b49      	ldr	r3, [pc, #292]	@ (80022f0 <HAL_ADC_ConfigChannel+0x4b0>)
 80021cc:	e00a      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 80021ce:	4b4f      	ldr	r3, [pc, #316]	@ (800230c <HAL_ADC_ConfigChannel+0x4cc>)
 80021d0:	e008      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 80021d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002310 <HAL_ADC_ConfigChannel+0x4d0>)
 80021d4:	e006      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 80021d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002314 <HAL_ADC_ConfigChannel+0x4d4>)
 80021d8:	e004      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 80021da:	4b4f      	ldr	r3, [pc, #316]	@ (8002318 <HAL_ADC_ConfigChannel+0x4d8>)
 80021dc:	e002      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x3a4>
 80021e2:	2300      	movs	r3, #0
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7ff f97c 	bl	80014e4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f280 80fc 	bge.w	80023ee <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a36      	ldr	r2, [pc, #216]	@ (80022d4 <HAL_ADC_ConfigChannel+0x494>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_ADC_ConfigChannel+0x3ca>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a45      	ldr	r2, [pc, #276]	@ (800231c <HAL_ADC_ConfigChannel+0x4dc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_ADC_ConfigChannel+0x3ce>
 800220a:	4b45      	ldr	r3, [pc, #276]	@ (8002320 <HAL_ADC_ConfigChannel+0x4e0>)
 800220c:	e000      	b.n	8002210 <HAL_ADC_ConfigChannel+0x3d0>
 800220e:	4b45      	ldr	r3, [pc, #276]	@ (8002324 <HAL_ADC_ConfigChannel+0x4e4>)
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff f959 	bl	80014c8 <LL_ADC_GetCommonPathInternalCh>
 8002216:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2d      	ldr	r2, [pc, #180]	@ (80022d4 <HAL_ADC_ConfigChannel+0x494>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_ADC_ConfigChannel+0x3ec>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a3d      	ldr	r2, [pc, #244]	@ (800231c <HAL_ADC_ConfigChannel+0x4dc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d10e      	bne.n	800224a <HAL_ADC_ConfigChannel+0x40a>
 800222c:	4829      	ldr	r0, [pc, #164]	@ (80022d4 <HAL_ADC_ConfigChannel+0x494>)
 800222e:	f7ff facb 	bl	80017c8 <LL_ADC_IsEnabled>
 8002232:	4604      	mov	r4, r0
 8002234:	4839      	ldr	r0, [pc, #228]	@ (800231c <HAL_ADC_ConfigChannel+0x4dc>)
 8002236:	f7ff fac7 	bl	80017c8 <LL_ADC_IsEnabled>
 800223a:	4603      	mov	r3, r0
 800223c:	4323      	orrs	r3, r4
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf0c      	ite	eq
 8002242:	2301      	moveq	r3, #1
 8002244:	2300      	movne	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	e008      	b.n	800225c <HAL_ADC_ConfigChannel+0x41c>
 800224a:	4837      	ldr	r0, [pc, #220]	@ (8002328 <HAL_ADC_ConfigChannel+0x4e8>)
 800224c:	f7ff fabc 	bl	80017c8 <LL_ADC_IsEnabled>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80b3 	beq.w	80023c8 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a31      	ldr	r2, [pc, #196]	@ (800232c <HAL_ADC_ConfigChannel+0x4ec>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d165      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x4f8>
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d160      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a2b      	ldr	r2, [pc, #172]	@ (8002328 <HAL_ADC_ConfigChannel+0x4e8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	f040 80b6 	bne.w	80023ee <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a13      	ldr	r2, [pc, #76]	@ (80022d4 <HAL_ADC_ConfigChannel+0x494>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d004      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x456>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a22      	ldr	r2, [pc, #136]	@ (800231c <HAL_ADC_ConfigChannel+0x4dc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x45a>
 8002296:	4a22      	ldr	r2, [pc, #136]	@ (8002320 <HAL_ADC_ConfigChannel+0x4e0>)
 8002298:	e000      	b.n	800229c <HAL_ADC_ConfigChannel+0x45c>
 800229a:	4a22      	ldr	r2, [pc, #136]	@ (8002324 <HAL_ADC_ConfigChannel+0x4e4>)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f7ff f8fc 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022aa:	4b21      	ldr	r3, [pc, #132]	@ (8002330 <HAL_ADC_ConfigChannel+0x4f0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	4a20      	ldr	r2, [pc, #128]	@ (8002334 <HAL_ADC_ConfigChannel+0x4f4>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	099b      	lsrs	r3, r3, #6
 80022b8:	3301      	adds	r3, #1
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80022be:	e002      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f9      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022cc:	e08f      	b.n	80023ee <HAL_ADC_ConfigChannel+0x5ae>
 80022ce:	bf00      	nop
 80022d0:	47ff0000 	.word	0x47ff0000
 80022d4:	40022000 	.word	0x40022000
 80022d8:	04300002 	.word	0x04300002
 80022dc:	08600004 	.word	0x08600004
 80022e0:	0c900008 	.word	0x0c900008
 80022e4:	10c00010 	.word	0x10c00010
 80022e8:	14f00020 	.word	0x14f00020
 80022ec:	2a000400 	.word	0x2a000400
 80022f0:	2e300800 	.word	0x2e300800
 80022f4:	32601000 	.word	0x32601000
 80022f8:	43210000 	.word	0x43210000
 80022fc:	4b840000 	.word	0x4b840000
 8002300:	4fb80000 	.word	0x4fb80000
 8002304:	47520000 	.word	0x47520000
 8002308:	36902000 	.word	0x36902000
 800230c:	25b00200 	.word	0x25b00200
 8002310:	21800100 	.word	0x21800100
 8002314:	1d500080 	.word	0x1d500080
 8002318:	19200040 	.word	0x19200040
 800231c:	40022100 	.word	0x40022100
 8002320:	40022300 	.word	0x40022300
 8002324:	58026300 	.word	0x58026300
 8002328:	58026000 	.word	0x58026000
 800232c:	cb840000 	.word	0xcb840000
 8002330:	24000000 	.word	0x24000000
 8002334:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a31      	ldr	r2, [pc, #196]	@ (8002404 <HAL_ADC_ConfigChannel+0x5c4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d11e      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x540>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d119      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2d      	ldr	r2, [pc, #180]	@ (8002408 <HAL_ADC_ConfigChannel+0x5c8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d14b      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2c      	ldr	r2, [pc, #176]	@ (800240c <HAL_ADC_ConfigChannel+0x5cc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d004      	beq.n	800236a <HAL_ADC_ConfigChannel+0x52a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a2a      	ldr	r2, [pc, #168]	@ (8002410 <HAL_ADC_ConfigChannel+0x5d0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_ADC_ConfigChannel+0x52e>
 800236a:	4a2a      	ldr	r2, [pc, #168]	@ (8002414 <HAL_ADC_ConfigChannel+0x5d4>)
 800236c:	e000      	b.n	8002370 <HAL_ADC_ConfigChannel+0x530>
 800236e:	4a2a      	ldr	r2, [pc, #168]	@ (8002418 <HAL_ADC_ConfigChannel+0x5d8>)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002376:	4619      	mov	r1, r3
 8002378:	4610      	mov	r0, r2
 800237a:	f7ff f892 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800237e:	e036      	b.n	80023ee <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a25      	ldr	r2, [pc, #148]	@ (800241c <HAL_ADC_ConfigChannel+0x5dc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d131      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x5ae>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d12c      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1b      	ldr	r2, [pc, #108]	@ (8002408 <HAL_ADC_ConfigChannel+0x5c8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d127      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1a      	ldr	r2, [pc, #104]	@ (800240c <HAL_ADC_ConfigChannel+0x5cc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x572>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a18      	ldr	r2, [pc, #96]	@ (8002410 <HAL_ADC_ConfigChannel+0x5d0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x576>
 80023b2:	4a18      	ldr	r2, [pc, #96]	@ (8002414 <HAL_ADC_ConfigChannel+0x5d4>)
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x578>
 80023b6:	4a18      	ldr	r2, [pc, #96]	@ (8002418 <HAL_ADC_ConfigChannel+0x5d8>)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f7ff f86e 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
 80023c6:	e012      	b.n	80023ee <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023cc:	f043 0220 	orr.w	r2, r3, #32
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80023da:	e008      	b.n	80023ee <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e0:	f043 0220 	orr.w	r2, r3, #32
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80023f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3734      	adds	r7, #52	@ 0x34
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	bf00      	nop
 8002404:	c7520000 	.word	0xc7520000
 8002408:	58026000 	.word	0x58026000
 800240c:	40022000 	.word	0x40022000
 8002410:	40022100 	.word	0x40022100
 8002414:	40022300 	.word	0x40022300
 8002418:	58026300 	.word	0x58026300
 800241c:	cfb80000 	.word	0xcfb80000

08002420 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff f9cb 	bl	80017c8 <LL_ADC_IsEnabled>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d16e      	bne.n	8002516 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	4b38      	ldr	r3, [pc, #224]	@ (8002520 <ADC_Enable+0x100>)
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00d      	beq.n	8002462 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244a:	f043 0210 	orr.w	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e05a      	b.n	8002518 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff f99a 	bl	80017a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800246c:	f7fe ffca 	bl	8001404 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2b      	ldr	r2, [pc, #172]	@ (8002524 <ADC_Enable+0x104>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d004      	beq.n	8002486 <ADC_Enable+0x66>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a29      	ldr	r2, [pc, #164]	@ (8002528 <ADC_Enable+0x108>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <ADC_Enable+0x6a>
 8002486:	4b29      	ldr	r3, [pc, #164]	@ (800252c <ADC_Enable+0x10c>)
 8002488:	e000      	b.n	800248c <ADC_Enable+0x6c>
 800248a:	4b29      	ldr	r3, [pc, #164]	@ (8002530 <ADC_Enable+0x110>)
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff f92b 	bl	80016e8 <LL_ADC_GetMultimode>
 8002492:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a23      	ldr	r2, [pc, #140]	@ (8002528 <ADC_Enable+0x108>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d002      	beq.n	80024a4 <ADC_Enable+0x84>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	e000      	b.n	80024a6 <ADC_Enable+0x86>
 80024a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <ADC_Enable+0x104>)
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02c      	beq.n	8002508 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d130      	bne.n	8002516 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024b4:	e028      	b.n	8002508 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f984 	bl	80017c8 <LL_ADC_IsEnabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d104      	bne.n	80024d0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f968 	bl	80017a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024d0:	f7fe ff98 	bl	8001404 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d914      	bls.n	8002508 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d00d      	beq.n	8002508 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f0:	f043 0210 	orr.w	r2, r3, #16
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e007      	b.n	8002518 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d1cf      	bne.n	80024b6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	8000003f 	.word	0x8000003f
 8002524:	40022000 	.word	0x40022000
 8002528:	40022100 	.word	0x40022100
 800252c:	40022300 	.word	0x40022300
 8002530:	58026300 	.word	0x58026300

08002534 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a7a      	ldr	r2, [pc, #488]	@ (800272c <ADC_ConfigureBoostMode+0x1f8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <ADC_ConfigureBoostMode+0x1c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a79      	ldr	r2, [pc, #484]	@ (8002730 <ADC_ConfigureBoostMode+0x1fc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d109      	bne.n	8002564 <ADC_ConfigureBoostMode+0x30>
 8002550:	4b78      	ldr	r3, [pc, #480]	@ (8002734 <ADC_ConfigureBoostMode+0x200>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e008      	b.n	8002576 <ADC_ConfigureBoostMode+0x42>
 8002564:	4b74      	ldr	r3, [pc, #464]	@ (8002738 <ADC_ConfigureBoostMode+0x204>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01c      	beq.n	80025b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800257a:	f002 fa09 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 800257e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002588:	d010      	beq.n	80025ac <ADC_ConfigureBoostMode+0x78>
 800258a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800258e:	d873      	bhi.n	8002678 <ADC_ConfigureBoostMode+0x144>
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002594:	d002      	beq.n	800259c <ADC_ConfigureBoostMode+0x68>
 8002596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800259a:	d16d      	bne.n	8002678 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	60fb      	str	r3, [r7, #12]
        break;
 80025aa:	e068      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	60fb      	str	r3, [r7, #12]
        break;
 80025b2:	e064      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80025b4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025b8:	f04f 0100 	mov.w	r1, #0
 80025bc:	f003 fc90 	bl	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq>
 80025c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80025ca:	d051      	beq.n	8002670 <ADC_ConfigureBoostMode+0x13c>
 80025cc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80025d0:	d854      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 80025d2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80025d6:	d047      	beq.n	8002668 <ADC_ConfigureBoostMode+0x134>
 80025d8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80025dc:	d84e      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 80025de:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80025e2:	d03d      	beq.n	8002660 <ADC_ConfigureBoostMode+0x12c>
 80025e4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80025e8:	d848      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 80025ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025ee:	d033      	beq.n	8002658 <ADC_ConfigureBoostMode+0x124>
 80025f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025f4:	d842      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 80025f6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80025fa:	d029      	beq.n	8002650 <ADC_ConfigureBoostMode+0x11c>
 80025fc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002600:	d83c      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 8002602:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002606:	d01a      	beq.n	800263e <ADC_ConfigureBoostMode+0x10a>
 8002608:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800260c:	d836      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 800260e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002612:	d014      	beq.n	800263e <ADC_ConfigureBoostMode+0x10a>
 8002614:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002618:	d830      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 800261a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800261e:	d00e      	beq.n	800263e <ADC_ConfigureBoostMode+0x10a>
 8002620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002624:	d82a      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 8002626:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800262a:	d008      	beq.n	800263e <ADC_ConfigureBoostMode+0x10a>
 800262c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002630:	d824      	bhi.n	800267c <ADC_ConfigureBoostMode+0x148>
 8002632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002636:	d002      	beq.n	800263e <ADC_ConfigureBoostMode+0x10a>
 8002638:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800263c:	d11e      	bne.n	800267c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	0c9b      	lsrs	r3, r3, #18
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	60fb      	str	r3, [r7, #12]
        break;
 800264e:	e016      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	60fb      	str	r3, [r7, #12]
        break;
 8002656:	e012      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	60fb      	str	r3, [r7, #12]
        break;
 800265e:	e00e      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	60fb      	str	r3, [r7, #12]
        break;
 8002666:	e00a      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	09db      	lsrs	r3, r3, #7
 800266c:	60fb      	str	r3, [r7, #12]
        break;
 800266e:	e006      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	60fb      	str	r3, [r7, #12]
        break;
 8002676:	e002      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002678:	bf00      	nop
 800267a:	e000      	b.n	800267e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800267c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800267e:	f7fe fef1 	bl	8001464 <HAL_GetREVID>
 8002682:	4603      	mov	r3, r0
 8002684:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002688:	4293      	cmp	r3, r2
 800268a:	d815      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a2b      	ldr	r2, [pc, #172]	@ (800273c <ADC_ConfigureBoostMode+0x208>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d908      	bls.n	80026a6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80026a4:	e03e      	b.n	8002724 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b4:	609a      	str	r2, [r3, #8]
}
 80026b6:	e035      	b.n	8002724 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	085b      	lsrs	r3, r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002740 <ADC_ConfigureBoostMode+0x20c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d808      	bhi.n	80026d8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80026d4:	609a      	str	r2, [r3, #8]
}
 80026d6:	e025      	b.n	8002724 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a1a      	ldr	r2, [pc, #104]	@ (8002744 <ADC_ConfigureBoostMode+0x210>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d80a      	bhi.n	80026f6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f2:	609a      	str	r2, [r3, #8]
}
 80026f4:	e016      	b.n	8002724 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4a13      	ldr	r2, [pc, #76]	@ (8002748 <ADC_ConfigureBoostMode+0x214>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d80a      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002710:	609a      	str	r2, [r3, #8]
}
 8002712:	e007      	b.n	8002724 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40022000 	.word	0x40022000
 8002730:	40022100 	.word	0x40022100
 8002734:	40022300 	.word	0x40022300
 8002738:	58026300 	.word	0x58026300
 800273c:	01312d00 	.word	0x01312d00
 8002740:	005f5e10 	.word	0x005f5e10
 8002744:	00bebc20 	.word	0x00bebc20
 8002748:	017d7840 	.word	0x017d7840

0800274c <LL_ADC_IsEnabled>:
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <LL_ADC_IsEnabled+0x18>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <LL_ADC_IsEnabled+0x1a>
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_ADC_REG_IsConversionOngoing>:
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b04      	cmp	r3, #4
 8002784:	d101      	bne.n	800278a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b09f      	sub	sp, #124	@ 0x7c
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e0be      	b.n	8002934 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a5c      	ldr	r2, [pc, #368]	@ (800293c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d102      	bne.n	80027d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80027d0:	4b5b      	ldr	r3, [pc, #364]	@ (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	e001      	b.n	80027da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10b      	bne.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e09d      	b.n	8002934 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ffb9 	bl	8002772 <LL_ADC_REG_IsConversionOngoing>
 8002800:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ffb3 	bl	8002772 <LL_ADC_REG_IsConversionOngoing>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d17f      	bne.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002814:	2b00      	cmp	r3, #0
 8002816:	d17c      	bne.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a47      	ldr	r2, [pc, #284]	@ (800293c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d004      	beq.n	800282c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a46      	ldr	r2, [pc, #280]	@ (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800282c:	4b45      	ldr	r3, [pc, #276]	@ (8002944 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800282e:	e000      	b.n	8002832 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002830:	4b45      	ldr	r3, [pc, #276]	@ (8002948 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002832:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d039      	beq.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800283c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	431a      	orrs	r2, r3
 800284a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800284c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a3a      	ldr	r2, [pc, #232]	@ (800293c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a38      	ldr	r2, [pc, #224]	@ (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10e      	bne.n	8002880 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002862:	4836      	ldr	r0, [pc, #216]	@ (800293c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002864:	f7ff ff72 	bl	800274c <LL_ADC_IsEnabled>
 8002868:	4604      	mov	r4, r0
 800286a:	4835      	ldr	r0, [pc, #212]	@ (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800286c:	f7ff ff6e 	bl	800274c <LL_ADC_IsEnabled>
 8002870:	4603      	mov	r3, r0
 8002872:	4323      	orrs	r3, r4
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e008      	b.n	8002892 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002880:	4832      	ldr	r0, [pc, #200]	@ (800294c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002882:	f7ff ff63 	bl	800274c <LL_ADC_IsEnabled>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d047      	beq.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	4b2d      	ldr	r3, [pc, #180]	@ (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800289c:	4013      	ands	r3, r2
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	6811      	ldr	r1, [r2, #0]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	6892      	ldr	r2, [r2, #8]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	431a      	orrs	r2, r3
 80028aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028ae:	e03a      	b.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80028b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1e      	ldr	r2, [pc, #120]	@ (800293c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d10e      	bne.n	80028ee <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80028d0:	481a      	ldr	r0, [pc, #104]	@ (800293c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028d2:	f7ff ff3b 	bl	800274c <LL_ADC_IsEnabled>
 80028d6:	4604      	mov	r4, r0
 80028d8:	4819      	ldr	r0, [pc, #100]	@ (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028da:	f7ff ff37 	bl	800274c <LL_ADC_IsEnabled>
 80028de:	4603      	mov	r3, r0
 80028e0:	4323      	orrs	r3, r4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf0c      	ite	eq
 80028e6:	2301      	moveq	r3, #1
 80028e8:	2300      	movne	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	e008      	b.n	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80028ee:	4817      	ldr	r0, [pc, #92]	@ (800294c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80028f0:	f7ff ff2c 	bl	800274c <LL_ADC_IsEnabled>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf0c      	ite	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	2300      	movne	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d010      	beq.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800290a:	4013      	ands	r3, r2
 800290c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800290e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002910:	e009      	b.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002916:	f043 0220 	orr.w	r2, r3, #32
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002924:	e000      	b.n	8002928 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002926:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002930:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002934:	4618      	mov	r0, r3
 8002936:	377c      	adds	r7, #124	@ 0x7c
 8002938:	46bd      	mov	sp, r7
 800293a:	bd90      	pop	{r4, r7, pc}
 800293c:	40022000 	.word	0x40022000
 8002940:	40022100 	.word	0x40022100
 8002944:	40022300 	.word	0x40022300
 8002948:	58026300 	.word	0x58026300
 800294c:	58026000 	.word	0x58026000
 8002950:	fffff0e0 	.word	0xfffff0e0

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <__NVIC_SetPriorityGrouping+0x40>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 800297e:	4313      	orrs	r3, r2
 8002980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002982:	4a04      	ldr	r2, [pc, #16]	@ (8002994 <__NVIC_SetPriorityGrouping+0x40>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00
 8002998:	05fa0000 	.word	0x05fa0000

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4907      	ldr	r1, [pc, #28]	@ (80029f0 <__NVIC_EnableIRQ+0x38>)
 80029d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000e100 	.word	0xe000e100

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db0a      	blt.n	8002a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	490c      	ldr	r1, [pc, #48]	@ (8002a40 <__NVIC_SetPriority+0x4c>)
 8002a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1c:	e00a      	b.n	8002a34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4908      	ldr	r1, [pc, #32]	@ (8002a44 <__NVIC_SetPriority+0x50>)
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	761a      	strb	r2, [r3, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	@ 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	bf28      	it	cs
 8002a66:	2304      	movcs	r3, #4
 8002a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d902      	bls.n	8002a78 <NVIC_EncodePriority+0x30>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b03      	subs	r3, #3
 8002a76:	e000      	b.n	8002a7a <NVIC_EncodePriority+0x32>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	4313      	orrs	r3, r2
         );
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	@ 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ff4c 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad2:	f7ff ff63 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002ad6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	6978      	ldr	r0, [r7, #20]
 8002ade:	f7ff ffb3 	bl	8002a48 <NVIC_EncodePriority>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ff82 	bl	80029f4 <__NVIC_SetPriority>
}
 8002af0:	bf00      	nop
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff56 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7fe fc72 	bl	8001404 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e2dc      	b.n	80030e6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d008      	beq.n	8002b4a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2280      	movs	r2, #128	@ 0x80
 8002b3c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e2cd      	b.n	80030e6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a76      	ldr	r2, [pc, #472]	@ (8002d28 <HAL_DMA_Abort+0x214>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d04a      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a74      	ldr	r2, [pc, #464]	@ (8002d2c <HAL_DMA_Abort+0x218>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d045      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a73      	ldr	r2, [pc, #460]	@ (8002d30 <HAL_DMA_Abort+0x21c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d040      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a71      	ldr	r2, [pc, #452]	@ (8002d34 <HAL_DMA_Abort+0x220>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d03b      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a70      	ldr	r2, [pc, #448]	@ (8002d38 <HAL_DMA_Abort+0x224>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d036      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a6e      	ldr	r2, [pc, #440]	@ (8002d3c <HAL_DMA_Abort+0x228>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d031      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a6d      	ldr	r2, [pc, #436]	@ (8002d40 <HAL_DMA_Abort+0x22c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d02c      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a6b      	ldr	r2, [pc, #428]	@ (8002d44 <HAL_DMA_Abort+0x230>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d027      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a6a      	ldr	r2, [pc, #424]	@ (8002d48 <HAL_DMA_Abort+0x234>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a68      	ldr	r2, [pc, #416]	@ (8002d4c <HAL_DMA_Abort+0x238>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01d      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a67      	ldr	r2, [pc, #412]	@ (8002d50 <HAL_DMA_Abort+0x23c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d018      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a65      	ldr	r2, [pc, #404]	@ (8002d54 <HAL_DMA_Abort+0x240>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a64      	ldr	r2, [pc, #400]	@ (8002d58 <HAL_DMA_Abort+0x244>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a62      	ldr	r2, [pc, #392]	@ (8002d5c <HAL_DMA_Abort+0x248>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a61      	ldr	r2, [pc, #388]	@ (8002d60 <HAL_DMA_Abort+0x24c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_DMA_Abort+0xd6>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a5f      	ldr	r2, [pc, #380]	@ (8002d64 <HAL_DMA_Abort+0x250>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_DMA_Abort+0xda>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_DMA_Abort+0xdc>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 021e 	bic.w	r2, r2, #30
 8002c02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c12:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e00a      	b.n	8002c32 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 020e 	bic.w	r2, r2, #14
 8002c2a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a3c      	ldr	r2, [pc, #240]	@ (8002d28 <HAL_DMA_Abort+0x214>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d072      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a3a      	ldr	r2, [pc, #232]	@ (8002d2c <HAL_DMA_Abort+0x218>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d06d      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a39      	ldr	r2, [pc, #228]	@ (8002d30 <HAL_DMA_Abort+0x21c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d068      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a37      	ldr	r2, [pc, #220]	@ (8002d34 <HAL_DMA_Abort+0x220>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d063      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a36      	ldr	r2, [pc, #216]	@ (8002d38 <HAL_DMA_Abort+0x224>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d05e      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a34      	ldr	r2, [pc, #208]	@ (8002d3c <HAL_DMA_Abort+0x228>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d059      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a33      	ldr	r2, [pc, #204]	@ (8002d40 <HAL_DMA_Abort+0x22c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d054      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a31      	ldr	r2, [pc, #196]	@ (8002d44 <HAL_DMA_Abort+0x230>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d04f      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a30      	ldr	r2, [pc, #192]	@ (8002d48 <HAL_DMA_Abort+0x234>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d04a      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2e      	ldr	r2, [pc, #184]	@ (8002d4c <HAL_DMA_Abort+0x238>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d045      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d50 <HAL_DMA_Abort+0x23c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d040      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d54 <HAL_DMA_Abort+0x240>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d03b      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a2a      	ldr	r2, [pc, #168]	@ (8002d58 <HAL_DMA_Abort+0x244>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d036      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a28      	ldr	r2, [pc, #160]	@ (8002d5c <HAL_DMA_Abort+0x248>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d031      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a27      	ldr	r2, [pc, #156]	@ (8002d60 <HAL_DMA_Abort+0x24c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d02c      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a25      	ldr	r2, [pc, #148]	@ (8002d64 <HAL_DMA_Abort+0x250>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d027      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a24      	ldr	r2, [pc, #144]	@ (8002d68 <HAL_DMA_Abort+0x254>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d022      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a22      	ldr	r2, [pc, #136]	@ (8002d6c <HAL_DMA_Abort+0x258>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d01d      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a21      	ldr	r2, [pc, #132]	@ (8002d70 <HAL_DMA_Abort+0x25c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d018      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d74 <HAL_DMA_Abort+0x260>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8002d78 <HAL_DMA_Abort+0x264>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00e      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1c      	ldr	r2, [pc, #112]	@ (8002d7c <HAL_DMA_Abort+0x268>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d009      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1b      	ldr	r2, [pc, #108]	@ (8002d80 <HAL_DMA_Abort+0x26c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d004      	beq.n	8002d22 <HAL_DMA_Abort+0x20e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a19      	ldr	r2, [pc, #100]	@ (8002d84 <HAL_DMA_Abort+0x270>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d132      	bne.n	8002d88 <HAL_DMA_Abort+0x274>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e031      	b.n	8002d8a <HAL_DMA_Abort+0x276>
 8002d26:	bf00      	nop
 8002d28:	40020010 	.word	0x40020010
 8002d2c:	40020028 	.word	0x40020028
 8002d30:	40020040 	.word	0x40020040
 8002d34:	40020058 	.word	0x40020058
 8002d38:	40020070 	.word	0x40020070
 8002d3c:	40020088 	.word	0x40020088
 8002d40:	400200a0 	.word	0x400200a0
 8002d44:	400200b8 	.word	0x400200b8
 8002d48:	40020410 	.word	0x40020410
 8002d4c:	40020428 	.word	0x40020428
 8002d50:	40020440 	.word	0x40020440
 8002d54:	40020458 	.word	0x40020458
 8002d58:	40020470 	.word	0x40020470
 8002d5c:	40020488 	.word	0x40020488
 8002d60:	400204a0 	.word	0x400204a0
 8002d64:	400204b8 	.word	0x400204b8
 8002d68:	58025408 	.word	0x58025408
 8002d6c:	5802541c 	.word	0x5802541c
 8002d70:	58025430 	.word	0x58025430
 8002d74:	58025444 	.word	0x58025444
 8002d78:	58025458 	.word	0x58025458
 8002d7c:	5802546c 	.word	0x5802546c
 8002d80:	58025480 	.word	0x58025480
 8002d84:	58025494 	.word	0x58025494
 8002d88:	2300      	movs	r3, #0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6d      	ldr	r2, [pc, #436]	@ (8002f58 <HAL_DMA_Abort+0x444>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d04a      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6b      	ldr	r2, [pc, #428]	@ (8002f5c <HAL_DMA_Abort+0x448>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d045      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6a      	ldr	r2, [pc, #424]	@ (8002f60 <HAL_DMA_Abort+0x44c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d040      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a68      	ldr	r2, [pc, #416]	@ (8002f64 <HAL_DMA_Abort+0x450>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d03b      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a67      	ldr	r2, [pc, #412]	@ (8002f68 <HAL_DMA_Abort+0x454>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d036      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a65      	ldr	r2, [pc, #404]	@ (8002f6c <HAL_DMA_Abort+0x458>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d031      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a64      	ldr	r2, [pc, #400]	@ (8002f70 <HAL_DMA_Abort+0x45c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d02c      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a62      	ldr	r2, [pc, #392]	@ (8002f74 <HAL_DMA_Abort+0x460>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d027      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a61      	ldr	r2, [pc, #388]	@ (8002f78 <HAL_DMA_Abort+0x464>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d022      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a5f      	ldr	r2, [pc, #380]	@ (8002f7c <HAL_DMA_Abort+0x468>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01d      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a5e      	ldr	r2, [pc, #376]	@ (8002f80 <HAL_DMA_Abort+0x46c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d018      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a5c      	ldr	r2, [pc, #368]	@ (8002f84 <HAL_DMA_Abort+0x470>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002f88 <HAL_DMA_Abort+0x474>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a59      	ldr	r2, [pc, #356]	@ (8002f8c <HAL_DMA_Abort+0x478>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a58      	ldr	r2, [pc, #352]	@ (8002f90 <HAL_DMA_Abort+0x47c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <HAL_DMA_Abort+0x32a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a56      	ldr	r2, [pc, #344]	@ (8002f94 <HAL_DMA_Abort+0x480>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d108      	bne.n	8002e50 <HAL_DMA_Abort+0x33c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	e007      	b.n	8002e60 <HAL_DMA_Abort+0x34c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e60:	e013      	b.n	8002e8a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e62:	f7fe facf 	bl	8001404 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d90c      	bls.n	8002e8a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e12d      	b.n	80030e6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e5      	bne.n	8002e62 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f58 <HAL_DMA_Abort+0x444>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d04a      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8002f5c <HAL_DMA_Abort+0x448>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d045      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2c      	ldr	r2, [pc, #176]	@ (8002f60 <HAL_DMA_Abort+0x44c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d040      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8002f64 <HAL_DMA_Abort+0x450>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d03b      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a29      	ldr	r2, [pc, #164]	@ (8002f68 <HAL_DMA_Abort+0x454>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d036      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a27      	ldr	r2, [pc, #156]	@ (8002f6c <HAL_DMA_Abort+0x458>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d031      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a26      	ldr	r2, [pc, #152]	@ (8002f70 <HAL_DMA_Abort+0x45c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d02c      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a24      	ldr	r2, [pc, #144]	@ (8002f74 <HAL_DMA_Abort+0x460>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d027      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a23      	ldr	r2, [pc, #140]	@ (8002f78 <HAL_DMA_Abort+0x464>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d022      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a21      	ldr	r2, [pc, #132]	@ (8002f7c <HAL_DMA_Abort+0x468>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01d      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a20      	ldr	r2, [pc, #128]	@ (8002f80 <HAL_DMA_Abort+0x46c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d018      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1e      	ldr	r2, [pc, #120]	@ (8002f84 <HAL_DMA_Abort+0x470>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1d      	ldr	r2, [pc, #116]	@ (8002f88 <HAL_DMA_Abort+0x474>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00e      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f8c <HAL_DMA_Abort+0x478>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d009      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1a      	ldr	r2, [pc, #104]	@ (8002f90 <HAL_DMA_Abort+0x47c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d004      	beq.n	8002f36 <HAL_DMA_Abort+0x422>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <HAL_DMA_Abort+0x480>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_DMA_Abort+0x426>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_DMA_Abort+0x428>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d02b      	beq.n	8002f98 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f44:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	223f      	movs	r2, #63	@ 0x3f
 8002f50:	409a      	lsls	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	e02a      	b.n	8002fae <HAL_DMA_Abort+0x49a>
 8002f58:	40020010 	.word	0x40020010
 8002f5c:	40020028 	.word	0x40020028
 8002f60:	40020040 	.word	0x40020040
 8002f64:	40020058 	.word	0x40020058
 8002f68:	40020070 	.word	0x40020070
 8002f6c:	40020088 	.word	0x40020088
 8002f70:	400200a0 	.word	0x400200a0
 8002f74:	400200b8 	.word	0x400200b8
 8002f78:	40020410 	.word	0x40020410
 8002f7c:	40020428 	.word	0x40020428
 8002f80:	40020440 	.word	0x40020440
 8002f84:	40020458 	.word	0x40020458
 8002f88:	40020470 	.word	0x40020470
 8002f8c:	40020488 	.word	0x40020488
 8002f90:	400204a0 	.word	0x400204a0
 8002f94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a4f      	ldr	r2, [pc, #316]	@ (80030f0 <HAL_DMA_Abort+0x5dc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d072      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a4d      	ldr	r2, [pc, #308]	@ (80030f4 <HAL_DMA_Abort+0x5e0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d06d      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a4c      	ldr	r2, [pc, #304]	@ (80030f8 <HAL_DMA_Abort+0x5e4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d068      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80030fc <HAL_DMA_Abort+0x5e8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d063      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a49      	ldr	r2, [pc, #292]	@ (8003100 <HAL_DMA_Abort+0x5ec>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d05e      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a47      	ldr	r2, [pc, #284]	@ (8003104 <HAL_DMA_Abort+0x5f0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d059      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a46      	ldr	r2, [pc, #280]	@ (8003108 <HAL_DMA_Abort+0x5f4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d054      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a44      	ldr	r2, [pc, #272]	@ (800310c <HAL_DMA_Abort+0x5f8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d04f      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a43      	ldr	r2, [pc, #268]	@ (8003110 <HAL_DMA_Abort+0x5fc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d04a      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a41      	ldr	r2, [pc, #260]	@ (8003114 <HAL_DMA_Abort+0x600>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d045      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a40      	ldr	r2, [pc, #256]	@ (8003118 <HAL_DMA_Abort+0x604>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d040      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a3e      	ldr	r2, [pc, #248]	@ (800311c <HAL_DMA_Abort+0x608>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d03b      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a3d      	ldr	r2, [pc, #244]	@ (8003120 <HAL_DMA_Abort+0x60c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d036      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a3b      	ldr	r2, [pc, #236]	@ (8003124 <HAL_DMA_Abort+0x610>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d031      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a3a      	ldr	r2, [pc, #232]	@ (8003128 <HAL_DMA_Abort+0x614>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d02c      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a38      	ldr	r2, [pc, #224]	@ (800312c <HAL_DMA_Abort+0x618>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d027      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a37      	ldr	r2, [pc, #220]	@ (8003130 <HAL_DMA_Abort+0x61c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d022      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a35      	ldr	r2, [pc, #212]	@ (8003134 <HAL_DMA_Abort+0x620>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01d      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a34      	ldr	r2, [pc, #208]	@ (8003138 <HAL_DMA_Abort+0x624>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d018      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a32      	ldr	r2, [pc, #200]	@ (800313c <HAL_DMA_Abort+0x628>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a31      	ldr	r2, [pc, #196]	@ (8003140 <HAL_DMA_Abort+0x62c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00e      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a2f      	ldr	r2, [pc, #188]	@ (8003144 <HAL_DMA_Abort+0x630>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d009      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2e      	ldr	r2, [pc, #184]	@ (8003148 <HAL_DMA_Abort+0x634>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <HAL_DMA_Abort+0x58a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2c      	ldr	r2, [pc, #176]	@ (800314c <HAL_DMA_Abort+0x638>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <HAL_DMA_Abort+0x58e>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_DMA_Abort+0x590>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d015      	beq.n	80030d4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80030b0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030c8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030d2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40020010 	.word	0x40020010
 80030f4:	40020028 	.word	0x40020028
 80030f8:	40020040 	.word	0x40020040
 80030fc:	40020058 	.word	0x40020058
 8003100:	40020070 	.word	0x40020070
 8003104:	40020088 	.word	0x40020088
 8003108:	400200a0 	.word	0x400200a0
 800310c:	400200b8 	.word	0x400200b8
 8003110:	40020410 	.word	0x40020410
 8003114:	40020428 	.word	0x40020428
 8003118:	40020440 	.word	0x40020440
 800311c:	40020458 	.word	0x40020458
 8003120:	40020470 	.word	0x40020470
 8003124:	40020488 	.word	0x40020488
 8003128:	400204a0 	.word	0x400204a0
 800312c:	400204b8 	.word	0x400204b8
 8003130:	58025408 	.word	0x58025408
 8003134:	5802541c 	.word	0x5802541c
 8003138:	58025430 	.word	0x58025430
 800313c:	58025444 	.word	0x58025444
 8003140:	58025458 	.word	0x58025458
 8003144:	5802546c 	.word	0x5802546c
 8003148:	58025480 	.word	0x58025480
 800314c:	58025494 	.word	0x58025494

08003150 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e237      	b.n	80035d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d004      	beq.n	8003178 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2280      	movs	r2, #128	@ 0x80
 8003172:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e22c      	b.n	80035d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a5c      	ldr	r2, [pc, #368]	@ (80032f0 <HAL_DMA_Abort_IT+0x1a0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d04a      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a5b      	ldr	r2, [pc, #364]	@ (80032f4 <HAL_DMA_Abort_IT+0x1a4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d045      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a59      	ldr	r2, [pc, #356]	@ (80032f8 <HAL_DMA_Abort_IT+0x1a8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d040      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a58      	ldr	r2, [pc, #352]	@ (80032fc <HAL_DMA_Abort_IT+0x1ac>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d03b      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a56      	ldr	r2, [pc, #344]	@ (8003300 <HAL_DMA_Abort_IT+0x1b0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d036      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a55      	ldr	r2, [pc, #340]	@ (8003304 <HAL_DMA_Abort_IT+0x1b4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d031      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a53      	ldr	r2, [pc, #332]	@ (8003308 <HAL_DMA_Abort_IT+0x1b8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d02c      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a52      	ldr	r2, [pc, #328]	@ (800330c <HAL_DMA_Abort_IT+0x1bc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d027      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a50      	ldr	r2, [pc, #320]	@ (8003310 <HAL_DMA_Abort_IT+0x1c0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d022      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a4f      	ldr	r2, [pc, #316]	@ (8003314 <HAL_DMA_Abort_IT+0x1c4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d01d      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003318 <HAL_DMA_Abort_IT+0x1c8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d018      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a4c      	ldr	r2, [pc, #304]	@ (800331c <HAL_DMA_Abort_IT+0x1cc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d013      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003320 <HAL_DMA_Abort_IT+0x1d0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00e      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a49      	ldr	r2, [pc, #292]	@ (8003324 <HAL_DMA_Abort_IT+0x1d4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d009      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a47      	ldr	r2, [pc, #284]	@ (8003328 <HAL_DMA_Abort_IT+0x1d8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <HAL_DMA_Abort_IT+0xc8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a46      	ldr	r2, [pc, #280]	@ (800332c <HAL_DMA_Abort_IT+0x1dc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <HAL_DMA_Abort_IT+0xcc>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_DMA_Abort_IT+0xce>
 800321c:	2300      	movs	r3, #0
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 8086 	beq.w	8003330 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2204      	movs	r2, #4
 8003228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2f      	ldr	r2, [pc, #188]	@ (80032f0 <HAL_DMA_Abort_IT+0x1a0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d04a      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2e      	ldr	r2, [pc, #184]	@ (80032f4 <HAL_DMA_Abort_IT+0x1a4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d045      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2c      	ldr	r2, [pc, #176]	@ (80032f8 <HAL_DMA_Abort_IT+0x1a8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d040      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2b      	ldr	r2, [pc, #172]	@ (80032fc <HAL_DMA_Abort_IT+0x1ac>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d03b      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a29      	ldr	r2, [pc, #164]	@ (8003300 <HAL_DMA_Abort_IT+0x1b0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d036      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a28      	ldr	r2, [pc, #160]	@ (8003304 <HAL_DMA_Abort_IT+0x1b4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d031      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a26      	ldr	r2, [pc, #152]	@ (8003308 <HAL_DMA_Abort_IT+0x1b8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d02c      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a25      	ldr	r2, [pc, #148]	@ (800330c <HAL_DMA_Abort_IT+0x1bc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d027      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a23      	ldr	r2, [pc, #140]	@ (8003310 <HAL_DMA_Abort_IT+0x1c0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d022      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a22      	ldr	r2, [pc, #136]	@ (8003314 <HAL_DMA_Abort_IT+0x1c4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d01d      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a20      	ldr	r2, [pc, #128]	@ (8003318 <HAL_DMA_Abort_IT+0x1c8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d018      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1f      	ldr	r2, [pc, #124]	@ (800331c <HAL_DMA_Abort_IT+0x1cc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d013      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003320 <HAL_DMA_Abort_IT+0x1d0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00e      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003324 <HAL_DMA_Abort_IT+0x1d4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d009      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003328 <HAL_DMA_Abort_IT+0x1d8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_DMA_Abort_IT+0x17c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a19      	ldr	r2, [pc, #100]	@ (800332c <HAL_DMA_Abort_IT+0x1dc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d108      	bne.n	80032de <HAL_DMA_Abort_IT+0x18e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e178      	b.n	80035d0 <HAL_DMA_Abort_IT+0x480>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0201 	bic.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	e16f      	b.n	80035d0 <HAL_DMA_Abort_IT+0x480>
 80032f0:	40020010 	.word	0x40020010
 80032f4:	40020028 	.word	0x40020028
 80032f8:	40020040 	.word	0x40020040
 80032fc:	40020058 	.word	0x40020058
 8003300:	40020070 	.word	0x40020070
 8003304:	40020088 	.word	0x40020088
 8003308:	400200a0 	.word	0x400200a0
 800330c:	400200b8 	.word	0x400200b8
 8003310:	40020410 	.word	0x40020410
 8003314:	40020428 	.word	0x40020428
 8003318:	40020440 	.word	0x40020440
 800331c:	40020458 	.word	0x40020458
 8003320:	40020470 	.word	0x40020470
 8003324:	40020488 	.word	0x40020488
 8003328:	400204a0 	.word	0x400204a0
 800332c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 020e 	bic.w	r2, r2, #14
 800333e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6c      	ldr	r2, [pc, #432]	@ (80034f8 <HAL_DMA_Abort_IT+0x3a8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d04a      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6b      	ldr	r2, [pc, #428]	@ (80034fc <HAL_DMA_Abort_IT+0x3ac>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d045      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a69      	ldr	r2, [pc, #420]	@ (8003500 <HAL_DMA_Abort_IT+0x3b0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d040      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a68      	ldr	r2, [pc, #416]	@ (8003504 <HAL_DMA_Abort_IT+0x3b4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d03b      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a66      	ldr	r2, [pc, #408]	@ (8003508 <HAL_DMA_Abort_IT+0x3b8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d036      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a65      	ldr	r2, [pc, #404]	@ (800350c <HAL_DMA_Abort_IT+0x3bc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d031      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a63      	ldr	r2, [pc, #396]	@ (8003510 <HAL_DMA_Abort_IT+0x3c0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d02c      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a62      	ldr	r2, [pc, #392]	@ (8003514 <HAL_DMA_Abort_IT+0x3c4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d027      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a60      	ldr	r2, [pc, #384]	@ (8003518 <HAL_DMA_Abort_IT+0x3c8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d022      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a5f      	ldr	r2, [pc, #380]	@ (800351c <HAL_DMA_Abort_IT+0x3cc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d01d      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003520 <HAL_DMA_Abort_IT+0x3d0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d018      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003524 <HAL_DMA_Abort_IT+0x3d4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003528 <HAL_DMA_Abort_IT+0x3d8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00e      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a59      	ldr	r2, [pc, #356]	@ (800352c <HAL_DMA_Abort_IT+0x3dc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a57      	ldr	r2, [pc, #348]	@ (8003530 <HAL_DMA_Abort_IT+0x3e0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x290>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a56      	ldr	r2, [pc, #344]	@ (8003534 <HAL_DMA_Abort_IT+0x3e4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d108      	bne.n	80033f2 <HAL_DMA_Abort_IT+0x2a2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e007      	b.n	8003402 <HAL_DMA_Abort_IT+0x2b2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a3c      	ldr	r2, [pc, #240]	@ (80034f8 <HAL_DMA_Abort_IT+0x3a8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d072      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a3a      	ldr	r2, [pc, #232]	@ (80034fc <HAL_DMA_Abort_IT+0x3ac>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d06d      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a39      	ldr	r2, [pc, #228]	@ (8003500 <HAL_DMA_Abort_IT+0x3b0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d068      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a37      	ldr	r2, [pc, #220]	@ (8003504 <HAL_DMA_Abort_IT+0x3b4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d063      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a36      	ldr	r2, [pc, #216]	@ (8003508 <HAL_DMA_Abort_IT+0x3b8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d05e      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a34      	ldr	r2, [pc, #208]	@ (800350c <HAL_DMA_Abort_IT+0x3bc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d059      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a33      	ldr	r2, [pc, #204]	@ (8003510 <HAL_DMA_Abort_IT+0x3c0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d054      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a31      	ldr	r2, [pc, #196]	@ (8003514 <HAL_DMA_Abort_IT+0x3c4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d04f      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a30      	ldr	r2, [pc, #192]	@ (8003518 <HAL_DMA_Abort_IT+0x3c8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d04a      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a2e      	ldr	r2, [pc, #184]	@ (800351c <HAL_DMA_Abort_IT+0x3cc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d045      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2d      	ldr	r2, [pc, #180]	@ (8003520 <HAL_DMA_Abort_IT+0x3d0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d040      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2b      	ldr	r2, [pc, #172]	@ (8003524 <HAL_DMA_Abort_IT+0x3d4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d03b      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a2a      	ldr	r2, [pc, #168]	@ (8003528 <HAL_DMA_Abort_IT+0x3d8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d036      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a28      	ldr	r2, [pc, #160]	@ (800352c <HAL_DMA_Abort_IT+0x3dc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d031      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a27      	ldr	r2, [pc, #156]	@ (8003530 <HAL_DMA_Abort_IT+0x3e0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d02c      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a25      	ldr	r2, [pc, #148]	@ (8003534 <HAL_DMA_Abort_IT+0x3e4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d027      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a24      	ldr	r2, [pc, #144]	@ (8003538 <HAL_DMA_Abort_IT+0x3e8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a22      	ldr	r2, [pc, #136]	@ (800353c <HAL_DMA_Abort_IT+0x3ec>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01d      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a21      	ldr	r2, [pc, #132]	@ (8003540 <HAL_DMA_Abort_IT+0x3f0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d018      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003544 <HAL_DMA_Abort_IT+0x3f4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003548 <HAL_DMA_Abort_IT+0x3f8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1c      	ldr	r2, [pc, #112]	@ (800354c <HAL_DMA_Abort_IT+0x3fc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003550 <HAL_DMA_Abort_IT+0x400>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x3a2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a19      	ldr	r2, [pc, #100]	@ (8003554 <HAL_DMA_Abort_IT+0x404>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d132      	bne.n	8003558 <HAL_DMA_Abort_IT+0x408>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e031      	b.n	800355a <HAL_DMA_Abort_IT+0x40a>
 80034f6:	bf00      	nop
 80034f8:	40020010 	.word	0x40020010
 80034fc:	40020028 	.word	0x40020028
 8003500:	40020040 	.word	0x40020040
 8003504:	40020058 	.word	0x40020058
 8003508:	40020070 	.word	0x40020070
 800350c:	40020088 	.word	0x40020088
 8003510:	400200a0 	.word	0x400200a0
 8003514:	400200b8 	.word	0x400200b8
 8003518:	40020410 	.word	0x40020410
 800351c:	40020428 	.word	0x40020428
 8003520:	40020440 	.word	0x40020440
 8003524:	40020458 	.word	0x40020458
 8003528:	40020470 	.word	0x40020470
 800352c:	40020488 	.word	0x40020488
 8003530:	400204a0 	.word	0x400204a0
 8003534:	400204b8 	.word	0x400204b8
 8003538:	58025408 	.word	0x58025408
 800353c:	5802541c 	.word	0x5802541c
 8003540:	58025430 	.word	0x58025430
 8003544:	58025444 	.word	0x58025444
 8003548:	58025458 	.word	0x58025458
 800354c:	5802546c 	.word	0x5802546c
 8003550:	58025480 	.word	0x58025480
 8003554:	58025494 	.word	0x58025494
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d028      	beq.n	80035b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800356c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003572:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2201      	movs	r2, #1
 800357e:	409a      	lsls	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800358c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80035ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop

080035dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	@ 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035ea:	4b89      	ldr	r3, [pc, #548]	@ (8003810 <HAL_GPIO_Init+0x234>)
 80035ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035ee:	e194      	b.n	800391a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	2101      	movs	r1, #1
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8186 	beq.w	8003914 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d005      	beq.n	8003620 <HAL_GPIO_Init+0x44>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d130      	bne.n	8003682 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003656:	2201      	movs	r2, #1
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 0201 	and.w	r2, r3, #1
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b03      	cmp	r3, #3
 800368c:	d017      	beq.n	80036be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	2203      	movs	r2, #3
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d123      	bne.n	8003712 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	08da      	lsrs	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3208      	adds	r2, #8
 80036d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	220f      	movs	r2, #15
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	08da      	lsrs	r2, r3, #3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3208      	adds	r2, #8
 800370c:	69b9      	ldr	r1, [r7, #24]
 800370e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2203      	movs	r2, #3
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0203 	and.w	r2, r3, #3
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80e0 	beq.w	8003914 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003754:	4b2f      	ldr	r3, [pc, #188]	@ (8003814 <HAL_GPIO_Init+0x238>)
 8003756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800375a:	4a2e      	ldr	r2, [pc, #184]	@ (8003814 <HAL_GPIO_Init+0x238>)
 800375c:	f043 0302 	orr.w	r3, r3, #2
 8003760:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003764:	4b2b      	ldr	r3, [pc, #172]	@ (8003814 <HAL_GPIO_Init+0x238>)
 8003766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003772:	4a29      	ldr	r2, [pc, #164]	@ (8003818 <HAL_GPIO_Init+0x23c>)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	089b      	lsrs	r3, r3, #2
 8003778:	3302      	adds	r3, #2
 800377a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	220f      	movs	r2, #15
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4013      	ands	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a20      	ldr	r2, [pc, #128]	@ (800381c <HAL_GPIO_Init+0x240>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d052      	beq.n	8003844 <HAL_GPIO_Init+0x268>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003820 <HAL_GPIO_Init+0x244>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d031      	beq.n	800380a <HAL_GPIO_Init+0x22e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003824 <HAL_GPIO_Init+0x248>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02b      	beq.n	8003806 <HAL_GPIO_Init+0x22a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003828 <HAL_GPIO_Init+0x24c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d025      	beq.n	8003802 <HAL_GPIO_Init+0x226>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1c      	ldr	r2, [pc, #112]	@ (800382c <HAL_GPIO_Init+0x250>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01f      	beq.n	80037fe <HAL_GPIO_Init+0x222>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003830 <HAL_GPIO_Init+0x254>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d019      	beq.n	80037fa <HAL_GPIO_Init+0x21e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003834 <HAL_GPIO_Init+0x258>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_GPIO_Init+0x21a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <HAL_GPIO_Init+0x25c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00d      	beq.n	80037f2 <HAL_GPIO_Init+0x216>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a18      	ldr	r2, [pc, #96]	@ (800383c <HAL_GPIO_Init+0x260>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <HAL_GPIO_Init+0x212>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a17      	ldr	r2, [pc, #92]	@ (8003840 <HAL_GPIO_Init+0x264>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <HAL_GPIO_Init+0x20e>
 80037e6:	2309      	movs	r3, #9
 80037e8:	e02d      	b.n	8003846 <HAL_GPIO_Init+0x26a>
 80037ea:	230a      	movs	r3, #10
 80037ec:	e02b      	b.n	8003846 <HAL_GPIO_Init+0x26a>
 80037ee:	2308      	movs	r3, #8
 80037f0:	e029      	b.n	8003846 <HAL_GPIO_Init+0x26a>
 80037f2:	2307      	movs	r3, #7
 80037f4:	e027      	b.n	8003846 <HAL_GPIO_Init+0x26a>
 80037f6:	2306      	movs	r3, #6
 80037f8:	e025      	b.n	8003846 <HAL_GPIO_Init+0x26a>
 80037fa:	2305      	movs	r3, #5
 80037fc:	e023      	b.n	8003846 <HAL_GPIO_Init+0x26a>
 80037fe:	2304      	movs	r3, #4
 8003800:	e021      	b.n	8003846 <HAL_GPIO_Init+0x26a>
 8003802:	2303      	movs	r3, #3
 8003804:	e01f      	b.n	8003846 <HAL_GPIO_Init+0x26a>
 8003806:	2302      	movs	r3, #2
 8003808:	e01d      	b.n	8003846 <HAL_GPIO_Init+0x26a>
 800380a:	2301      	movs	r3, #1
 800380c:	e01b      	b.n	8003846 <HAL_GPIO_Init+0x26a>
 800380e:	bf00      	nop
 8003810:	58000080 	.word	0x58000080
 8003814:	58024400 	.word	0x58024400
 8003818:	58000400 	.word	0x58000400
 800381c:	58020000 	.word	0x58020000
 8003820:	58020400 	.word	0x58020400
 8003824:	58020800 	.word	0x58020800
 8003828:	58020c00 	.word	0x58020c00
 800382c:	58021000 	.word	0x58021000
 8003830:	58021400 	.word	0x58021400
 8003834:	58021800 	.word	0x58021800
 8003838:	58021c00 	.word	0x58021c00
 800383c:	58022000 	.word	0x58022000
 8003840:	58022400 	.word	0x58022400
 8003844:	2300      	movs	r3, #0
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	f002 0203 	and.w	r2, r2, #3
 800384c:	0092      	lsls	r2, r2, #2
 800384e:	4093      	lsls	r3, r2
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003856:	4938      	ldr	r1, [pc, #224]	@ (8003938 <HAL_GPIO_Init+0x35c>)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	3302      	adds	r3, #2
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800388a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	3301      	adds	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	f47f ae63 	bne.w	80035f0 <HAL_GPIO_Init+0x14>
  }
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	3724      	adds	r7, #36	@ 0x24
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	58000400 	.word	0x58000400

0800393c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	887b      	ldrh	r3, [r7, #2]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
 8003958:	e001      	b.n	800395e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003974:	4a08      	ldr	r2, [pc, #32]	@ (8003998 <HAL_HSEM_FastTake+0x2c>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3320      	adds	r3, #32
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	4a07      	ldr	r2, [pc, #28]	@ (800399c <HAL_HSEM_FastTake+0x30>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	58026400 	.word	0x58026400
 800399c:	80000300 	.word	0x80000300

080039a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80039aa:	4906      	ldr	r1, [pc, #24]	@ (80039c4 <HAL_HSEM_Release+0x24>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	58026400 	.word	0x58026400

080039c8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80039d0:	4b29      	ldr	r3, [pc, #164]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	2b06      	cmp	r3, #6
 80039da:	d00a      	beq.n	80039f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039dc:	4b26      	ldr	r3, [pc, #152]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d001      	beq.n	80039ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e040      	b.n	8003a70 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e03e      	b.n	8003a70 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039f2:	4b21      	ldr	r3, [pc, #132]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80039fa:	491f      	ldr	r1, [pc, #124]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a02:	f7fd fcff 	bl	8001404 <HAL_GetTick>
 8003a06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a08:	e009      	b.n	8003a1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a0a:	f7fd fcfb 	bl	8001404 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a18:	d901      	bls.n	8003a1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e028      	b.n	8003a70 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a1e:	4b16      	ldr	r3, [pc, #88]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a2a:	d1ee      	bne.n	8003a0a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b1e      	cmp	r3, #30
 8003a30:	d008      	beq.n	8003a44 <HAL_PWREx_ConfigSupply+0x7c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a36:	d005      	beq.n	8003a44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b1d      	cmp	r3, #29
 8003a3c:	d002      	beq.n	8003a44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b2d      	cmp	r3, #45	@ 0x2d
 8003a42:	d114      	bne.n	8003a6e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a44:	f7fd fcde 	bl	8001404 <HAL_GetTick>
 8003a48:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a4a:	e009      	b.n	8003a60 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a4c:	f7fd fcda 	bl	8001404 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a5a:	d901      	bls.n	8003a60 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e007      	b.n	8003a70 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a60:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6c:	d1ee      	bne.n	8003a4c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58024800 	.word	0x58024800

08003a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	@ 0x30
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f000 bc48 	b.w	8004320 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8088 	beq.w	8003bae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9e:	4b99      	ldr	r3, [pc, #612]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa8:	4b96      	ldr	r3, [pc, #600]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d007      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x48>
 8003ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab6:	2b18      	cmp	r3, #24
 8003ab8:	d111      	bne.n	8003ade <HAL_RCC_OscConfig+0x62>
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	4b8f      	ldr	r3, [pc, #572]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d06d      	beq.n	8003bac <HAL_RCC_OscConfig+0x130>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d169      	bne.n	8003bac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f000 bc21 	b.w	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x7a>
 8003ae8:	4b86      	ldr	r3, [pc, #536]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a85      	ldr	r2, [pc, #532]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e02e      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x9c>
 8003afe:	4b81      	ldr	r3, [pc, #516]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a80      	ldr	r2, [pc, #512]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b7e      	ldr	r3, [pc, #504]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7d      	ldr	r2, [pc, #500]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0xc0>
 8003b22:	4b78      	ldr	r3, [pc, #480]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a77      	ldr	r2, [pc, #476]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b75      	ldr	r3, [pc, #468]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a74      	ldr	r2, [pc, #464]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003b3c:	4b71      	ldr	r3, [pc, #452]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a70      	ldr	r2, [pc, #448]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b6e      	ldr	r3, [pc, #440]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6d      	ldr	r2, [pc, #436]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fc52 	bl	8001404 <HAL_GetTick>
 8003b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fd fc4e 	bl	8001404 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	@ 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e3d4      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b76:	4b63      	ldr	r3, [pc, #396]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xe8>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd fc3e 	bl	8001404 <HAL_GetTick>
 8003b88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fd fc3a 	bl	8001404 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e3c0      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b9e:	4b59      	ldr	r3, [pc, #356]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x110>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80ca 	beq.w	8003d50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bbc:	4b51      	ldr	r3, [pc, #324]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_RCC_OscConfig+0x166>
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2b18      	cmp	r3, #24
 8003bd6:	d156      	bne.n	8003c86 <HAL_RCC_OscConfig+0x20a>
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d151      	bne.n	8003c86 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be2:	4b48      	ldr	r3, [pc, #288]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_RCC_OscConfig+0x17e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e392      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bfa:	4b42      	ldr	r3, [pc, #264]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 0219 	bic.w	r2, r3, #25
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	493f      	ldr	r1, [pc, #252]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fd fbfa 	bl	8001404 <HAL_GetTick>
 8003c10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fd fbf6 	bl	8001404 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e37c      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c26:	4b37      	ldr	r3, [pc, #220]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	f7fd fc17 	bl	8001464 <HAL_GetREVID>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d817      	bhi.n	8003c70 <HAL_RCC_OscConfig+0x1f4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b40      	cmp	r3, #64	@ 0x40
 8003c46:	d108      	bne.n	8003c5a <HAL_RCC_OscConfig+0x1de>
 8003c48:	4b2e      	ldr	r3, [pc, #184]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c50:	4a2c      	ldr	r2, [pc, #176]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c56:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c58:	e07a      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	031b      	lsls	r3, r3, #12
 8003c68:	4926      	ldr	r1, [pc, #152]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c6e:	e06f      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	4b24      	ldr	r3, [pc, #144]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	4921      	ldr	r1, [pc, #132]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c84:	e064      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d047      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 0219 	bic.w	r2, r3, #25
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	491a      	ldr	r1, [pc, #104]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fbb0 	bl	8001404 <HAL_GetTick>
 8003ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca8:	f7fd fbac 	bl	8001404 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e332      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cba:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	f7fd fbcd 	bl	8001464 <HAL_GetREVID>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d819      	bhi.n	8003d08 <HAL_RCC_OscConfig+0x28c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b40      	cmp	r3, #64	@ 0x40
 8003cda:	d108      	bne.n	8003cee <HAL_RCC_OscConfig+0x272>
 8003cdc:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ce4:	4a07      	ldr	r2, [pc, #28]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cea:	6053      	str	r3, [r2, #4]
 8003cec:	e030      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
 8003cee:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	031b      	lsls	r3, r3, #12
 8003cfc:	4901      	ldr	r1, [pc, #4]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
 8003d02:	e025      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
 8003d04:	58024400 	.word	0x58024400
 8003d08:	4b9a      	ldr	r3, [pc, #616]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	4997      	ldr	r1, [pc, #604]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1e:	4b95      	ldr	r3, [pc, #596]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a94      	ldr	r2, [pc, #592]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd fb6b 	bl	8001404 <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fd fb67 	bl	8001404 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e2ed      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d44:	4b8b      	ldr	r3, [pc, #556]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80a9 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5e:	4b85      	ldr	r3, [pc, #532]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d68:	4b82      	ldr	r3, [pc, #520]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d007      	beq.n	8003d84 <HAL_RCC_OscConfig+0x308>
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b18      	cmp	r3, #24
 8003d78:	d13a      	bne.n	8003df0 <HAL_RCC_OscConfig+0x374>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d135      	bne.n	8003df0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d84:	4b7b      	ldr	r3, [pc, #492]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_OscConfig+0x320>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	2b80      	cmp	r3, #128	@ 0x80
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e2c1      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d9c:	f7fd fb62 	bl	8001464 <HAL_GetREVID>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d817      	bhi.n	8003dda <HAL_RCC_OscConfig+0x35e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d108      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x348>
 8003db2:	4b70      	ldr	r3, [pc, #448]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003dba:	4a6e      	ldr	r2, [pc, #440]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dc0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dc2:	e075      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	069b      	lsls	r3, r3, #26
 8003dd2:	4968      	ldr	r1, [pc, #416]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dd8:	e06a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dda:	4b66      	ldr	r3, [pc, #408]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	061b      	lsls	r3, r3, #24
 8003de8:	4962      	ldr	r1, [pc, #392]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dee:	e05f      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d042      	beq.n	8003e7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003df8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd fafe 	bl	8001404 <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e0c:	f7fd fafa 	bl	8001404 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e280      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e1e:	4b55      	ldr	r3, [pc, #340]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e2a:	f7fd fb1b 	bl	8001464 <HAL_GetREVID>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d817      	bhi.n	8003e68 <HAL_RCC_OscConfig+0x3ec>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d108      	bne.n	8003e52 <HAL_RCC_OscConfig+0x3d6>
 8003e40:	4b4c      	ldr	r3, [pc, #304]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e48:	4a4a      	ldr	r2, [pc, #296]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e4e:	6053      	str	r3, [r2, #4]
 8003e50:	e02e      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
 8003e52:	4b48      	ldr	r3, [pc, #288]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	069b      	lsls	r3, r3, #26
 8003e60:	4944      	ldr	r1, [pc, #272]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
 8003e66:	e023      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
 8003e68:	4b42      	ldr	r3, [pc, #264]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	493f      	ldr	r1, [pc, #252]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60cb      	str	r3, [r1, #12]
 8003e7c:	e018      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3c      	ldr	r2, [pc, #240]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fd fabb 	bl	8001404 <HAL_GetTick>
 8003e8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e92:	f7fd fab7 	bl	8001404 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e23d      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ea4:	4b33      	ldr	r3, [pc, #204]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d036      	beq.n	8003f2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d019      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fd fa98 	bl	8001404 <HAL_GetTick>
 8003ed4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed8:	f7fd fa94 	bl	8001404 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e21a      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eea:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x45c>
 8003ef6:	e018      	b.n	8003f2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fd fa7e 	bl	8001404 <HAL_GetTick>
 8003f08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fd fa7a 	bl	8001404 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e200      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f1e:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d039      	beq.n	8003faa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a0c      	ldr	r2, [pc, #48]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fa5b 	bl	8001404 <HAL_GetTick>
 8003f4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f52:	f7fd fa57 	bl	8001404 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e1dd      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f64:	4b03      	ldr	r3, [pc, #12]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x4d6>
 8003f70:	e01b      	b.n	8003faa <HAL_RCC_OscConfig+0x52e>
 8003f72:	bf00      	nop
 8003f74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f78:	4b9b      	ldr	r3, [pc, #620]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a9a      	ldr	r2, [pc, #616]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003f7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f84:	f7fd fa3e 	bl	8001404 <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f8c:	f7fd fa3a 	bl	8001404 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1c0      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f9e:	4b92      	ldr	r3, [pc, #584]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8081 	beq.w	80040ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80041ec <HAL_RCC_OscConfig+0x770>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a8b      	ldr	r2, [pc, #556]	@ (80041ec <HAL_RCC_OscConfig+0x770>)
 8003fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fc4:	f7fd fa1e 	bl	8001404 <HAL_GetTick>
 8003fc8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fcc:	f7fd fa1a 	bl	8001404 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	@ 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e1a0      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fde:	4b83      	ldr	r3, [pc, #524]	@ (80041ec <HAL_RCC_OscConfig+0x770>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d106      	bne.n	8004000 <HAL_RCC_OscConfig+0x584>
 8003ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a7c      	ldr	r2, [pc, #496]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffe:	e02d      	b.n	800405c <HAL_RCC_OscConfig+0x5e0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10c      	bne.n	8004022 <HAL_RCC_OscConfig+0x5a6>
 8004008:	4b77      	ldr	r3, [pc, #476]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	4a76      	ldr	r2, [pc, #472]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	6713      	str	r3, [r2, #112]	@ 0x70
 8004014:	4b74      	ldr	r3, [pc, #464]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	4a73      	ldr	r2, [pc, #460]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800401a:	f023 0304 	bic.w	r3, r3, #4
 800401e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004020:	e01c      	b.n	800405c <HAL_RCC_OscConfig+0x5e0>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b05      	cmp	r3, #5
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x5c8>
 800402a:	4b6f      	ldr	r3, [pc, #444]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402e:	4a6e      	ldr	r2, [pc, #440]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004030:	f043 0304 	orr.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	@ 0x70
 8004036:	4b6c      	ldr	r3, [pc, #432]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	4a6b      	ldr	r2, [pc, #428]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	@ 0x70
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0x5e0>
 8004044:	4b68      	ldr	r3, [pc, #416]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004048:	4a67      	ldr	r2, [pc, #412]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004050:	4b65      	ldr	r3, [pc, #404]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	4a64      	ldr	r2, [pc, #400]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004056:	f023 0304 	bic.w	r3, r3, #4
 800405a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fd f9ce 	bl	8001404 <HAL_GetTick>
 8004068:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fd f9ca 	bl	8001404 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e14e      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004082:	4b59      	ldr	r3, [pc, #356]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ee      	beq.n	800406c <HAL_RCC_OscConfig+0x5f0>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fd f9b8 	bl	8001404 <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fd f9b4 	bl	8001404 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e138      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040ae:	4b4e      	ldr	r3, [pc, #312]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1ee      	bne.n	8004098 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 812d 	beq.w	800431e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040c4:	4b48      	ldr	r3, [pc, #288]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040cc:	2b18      	cmp	r3, #24
 80040ce:	f000 80bd 	beq.w	800424c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	f040 809e 	bne.w	8004218 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040dc:	4b42      	ldr	r3, [pc, #264]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a41      	ldr	r2, [pc, #260]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd f98c 	bl	8001404 <HAL_GetTick>
 80040ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd f988 	bl	8001404 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e10e      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004102:	4b39      	ldr	r3, [pc, #228]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800410e:	4b36      	ldr	r3, [pc, #216]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004110:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004112:	4b37      	ldr	r3, [pc, #220]	@ (80041f0 <HAL_RCC_OscConfig+0x774>)
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800411e:	0112      	lsls	r2, r2, #4
 8004120:	430a      	orrs	r2, r1
 8004122:	4931      	ldr	r1, [pc, #196]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	628b      	str	r3, [r1, #40]	@ 0x28
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	3b01      	subs	r3, #1
 800412e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004136:	3b01      	subs	r3, #1
 8004138:	025b      	lsls	r3, r3, #9
 800413a:	b29b      	uxth	r3, r3
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	3b01      	subs	r3, #1
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	3b01      	subs	r3, #1
 8004152:	061b      	lsls	r3, r3, #24
 8004154:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004158:	4923      	ldr	r1, [pc, #140]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800415a:	4313      	orrs	r3, r2
 800415c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800415e:	4b22      	ldr	r3, [pc, #136]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	4a21      	ldr	r2, [pc, #132]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800416a:	4b1f      	ldr	r3, [pc, #124]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800416c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800416e:	4b21      	ldr	r3, [pc, #132]	@ (80041f4 <HAL_RCC_OscConfig+0x778>)
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004176:	00d2      	lsls	r2, r2, #3
 8004178:	491b      	ldr	r1, [pc, #108]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800417e:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	f023 020c 	bic.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	4917      	ldr	r1, [pc, #92]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800418c:	4313      	orrs	r3, r2
 800418e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004190:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	f023 0202 	bic.w	r2, r3, #2
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	4912      	ldr	r1, [pc, #72]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041a2:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	4a10      	ldr	r2, [pc, #64]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ae:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b2:	4a0d      	ldr	r2, [pc, #52]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041ba:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	4a0a      	ldr	r2, [pc, #40]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041c6:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	4a07      	ldr	r2, [pc, #28]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d2:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a04      	ldr	r2, [pc, #16]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fd f911 	bl	8001404 <HAL_GetTick>
 80041e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041e4:	e011      	b.n	800420a <HAL_RCC_OscConfig+0x78e>
 80041e6:	bf00      	nop
 80041e8:	58024400 	.word	0x58024400
 80041ec:	58024800 	.word	0x58024800
 80041f0:	fffffc0c 	.word	0xfffffc0c
 80041f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd f904 	bl	8001404 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e08a      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800420a:	4b47      	ldr	r3, [pc, #284]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x77c>
 8004216:	e082      	b.n	800431e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004218:	4b43      	ldr	r3, [pc, #268]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a42      	ldr	r2, [pc, #264]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800421e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd f8ee 	bl	8001404 <HAL_GetTick>
 8004228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fd f8ea 	bl	8001404 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e070      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800423e:	4b3a      	ldr	r3, [pc, #232]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x7b0>
 800424a:	e068      	b.n	800431e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800424c:	4b36      	ldr	r3, [pc, #216]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800424e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004250:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004252:	4b35      	ldr	r3, [pc, #212]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	2b01      	cmp	r3, #1
 800425e:	d031      	beq.n	80042c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0203 	and.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d12a      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d122      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d11a      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	0a5b      	lsrs	r3, r3, #9
 8004292:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d111      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d108      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	0e1b      	lsrs	r3, r3, #24
 80042b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e02b      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042c8:	4b17      	ldr	r3, [pc, #92]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 80042ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042cc:	08db      	lsrs	r3, r3, #3
 80042ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d01f      	beq.n	800431e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80042de:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 80042e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e2:	4a11      	ldr	r2, [pc, #68]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042ea:	f7fd f88b 	bl	8001404 <HAL_GetTick>
 80042ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042f0:	bf00      	nop
 80042f2:	f7fd f887 	bl	8001404 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d0f9      	beq.n	80042f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <HAL_RCC_OscConfig+0x8b0>)
 8004304:	4013      	ands	r3, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800430a:	00d2      	lsls	r2, r2, #3
 800430c:	4906      	ldr	r1, [pc, #24]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800430e:	4313      	orrs	r3, r2
 8004310:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004312:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	4a04      	ldr	r2, [pc, #16]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3730      	adds	r7, #48	@ 0x30
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	58024400 	.word	0x58024400
 800432c:	ffff0007 	.word	0xffff0007

08004330 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e19c      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004344:	4b8a      	ldr	r3, [pc, #552]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d910      	bls.n	8004374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b87      	ldr	r3, [pc, #540]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 020f 	bic.w	r2, r3, #15
 800435a:	4985      	ldr	r1, [pc, #532]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b83      	ldr	r3, [pc, #524]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e184      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d010      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	4b7b      	ldr	r3, [pc, #492]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800438c:	429a      	cmp	r2, r3
 800438e:	d908      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004390:	4b78      	ldr	r3, [pc, #480]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4975      	ldr	r1, [pc, #468]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	4b70      	ldr	r3, [pc, #448]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d908      	bls.n	80043d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043be:	4b6d      	ldr	r3, [pc, #436]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	496a      	ldr	r1, [pc, #424]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	4b64      	ldr	r3, [pc, #400]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d908      	bls.n	80043fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043ec:	4b61      	ldr	r3, [pc, #388]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	495e      	ldr	r1, [pc, #376]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d010      	beq.n	800442c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	4b59      	ldr	r3, [pc, #356]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004416:	429a      	cmp	r2, r3
 8004418:	d908      	bls.n	800442c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800441a:	4b56      	ldr	r3, [pc, #344]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4953      	ldr	r1, [pc, #332]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004428:	4313      	orrs	r3, r2
 800442a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	4b4d      	ldr	r3, [pc, #308]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	429a      	cmp	r2, r3
 8004446:	d908      	bls.n	800445a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4b4a      	ldr	r3, [pc, #296]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f023 020f 	bic.w	r2, r3, #15
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4947      	ldr	r1, [pc, #284]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004456:	4313      	orrs	r3, r2
 8004458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d055      	beq.n	8004512 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004466:	4b43      	ldr	r3, [pc, #268]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	4940      	ldr	r1, [pc, #256]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004474:	4313      	orrs	r3, r2
 8004476:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d107      	bne.n	8004490 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004480:	4b3c      	ldr	r3, [pc, #240]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d121      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0f6      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004498:	4b36      	ldr	r3, [pc, #216]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d115      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0ea      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044b0:	4b30      	ldr	r3, [pc, #192]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0de      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0d6      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044d0:	4b28      	ldr	r3, [pc, #160]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f023 0207 	bic.w	r2, r3, #7
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4925      	ldr	r1, [pc, #148]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e2:	f7fc ff8f 	bl	8001404 <HAL_GetTick>
 80044e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e8:	e00a      	b.n	8004500 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ea:	f7fc ff8b 	bl	8001404 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e0be      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004500:	4b1c      	ldr	r3, [pc, #112]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	429a      	cmp	r2, r3
 8004510:	d1eb      	bne.n	80044ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d010      	beq.n	8004540 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	4b14      	ldr	r3, [pc, #80]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	429a      	cmp	r2, r3
 800452c:	d208      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452e:	4b11      	ldr	r3, [pc, #68]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f023 020f 	bic.w	r2, r3, #15
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	490e      	ldr	r1, [pc, #56]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800453c:	4313      	orrs	r3, r2
 800453e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004540:	4b0b      	ldr	r3, [pc, #44]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d214      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b08      	ldr	r3, [pc, #32]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 020f 	bic.w	r2, r3, #15
 8004556:	4906      	ldr	r1, [pc, #24]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b04      	ldr	r3, [pc, #16]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d005      	beq.n	8004578 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e086      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
 8004570:	52002000 	.word	0x52002000
 8004574:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d010      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	4b3f      	ldr	r3, [pc, #252]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004590:	429a      	cmp	r2, r3
 8004592:	d208      	bcs.n	80045a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004594:	4b3c      	ldr	r3, [pc, #240]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	4939      	ldr	r1, [pc, #228]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d010      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	4b34      	ldr	r3, [pc, #208]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045be:	429a      	cmp	r2, r3
 80045c0:	d208      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045c2:	4b31      	ldr	r3, [pc, #196]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	492e      	ldr	r1, [pc, #184]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d010      	beq.n	8004602 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	4b28      	ldr	r3, [pc, #160]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d208      	bcs.n	8004602 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045f0:	4b25      	ldr	r3, [pc, #148]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	4922      	ldr	r1, [pc, #136]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d010      	beq.n	8004630 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800461a:	429a      	cmp	r2, r3
 800461c:	d208      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800461e:	4b1a      	ldr	r3, [pc, #104]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4917      	ldr	r1, [pc, #92]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 800462c:	4313      	orrs	r3, r2
 800462e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004630:	f000 f834 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004634:	4602      	mov	r2, r0
 8004636:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	4912      	ldr	r1, [pc, #72]	@ (800468c <HAL_RCC_ClockConfig+0x35c>)
 8004642:	5ccb      	ldrb	r3, [r1, r3]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
 800464c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800464e:	4b0e      	ldr	r3, [pc, #56]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	4a0d      	ldr	r2, [pc, #52]	@ (800468c <HAL_RCC_ClockConfig+0x35c>)
 8004658:	5cd3      	ldrb	r3, [r2, r3]
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
 8004664:	4a0a      	ldr	r2, [pc, #40]	@ (8004690 <HAL_RCC_ClockConfig+0x360>)
 8004666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004668:	4a0a      	ldr	r2, [pc, #40]	@ (8004694 <HAL_RCC_ClockConfig+0x364>)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800466e:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <HAL_RCC_ClockConfig+0x368>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fc fc8c 	bl	8000f90 <HAL_InitTick>
 8004678:	4603      	mov	r3, r0
 800467a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400
 800468c:	0800db3c 	.word	0x0800db3c
 8004690:	24000004 	.word	0x24000004
 8004694:	24000000 	.word	0x24000000
 8004698:	24000008 	.word	0x24000008

0800469c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	@ 0x24
 80046a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a2:	4bb3      	ldr	r3, [pc, #716]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046aa:	2b18      	cmp	r3, #24
 80046ac:	f200 8155 	bhi.w	800495a <HAL_RCC_GetSysClockFreq+0x2be>
 80046b0:	a201      	add	r2, pc, #4	@ (adr r2, 80046b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	0800495b 	.word	0x0800495b
 80046c0:	0800495b 	.word	0x0800495b
 80046c4:	0800495b 	.word	0x0800495b
 80046c8:	0800495b 	.word	0x0800495b
 80046cc:	0800495b 	.word	0x0800495b
 80046d0:	0800495b 	.word	0x0800495b
 80046d4:	0800495b 	.word	0x0800495b
 80046d8:	08004743 	.word	0x08004743
 80046dc:	0800495b 	.word	0x0800495b
 80046e0:	0800495b 	.word	0x0800495b
 80046e4:	0800495b 	.word	0x0800495b
 80046e8:	0800495b 	.word	0x0800495b
 80046ec:	0800495b 	.word	0x0800495b
 80046f0:	0800495b 	.word	0x0800495b
 80046f4:	0800495b 	.word	0x0800495b
 80046f8:	08004749 	.word	0x08004749
 80046fc:	0800495b 	.word	0x0800495b
 8004700:	0800495b 	.word	0x0800495b
 8004704:	0800495b 	.word	0x0800495b
 8004708:	0800495b 	.word	0x0800495b
 800470c:	0800495b 	.word	0x0800495b
 8004710:	0800495b 	.word	0x0800495b
 8004714:	0800495b 	.word	0x0800495b
 8004718:	0800474f 	.word	0x0800474f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800471c:	4b94      	ldr	r3, [pc, #592]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004728:	4b91      	ldr	r3, [pc, #580]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	4a90      	ldr	r2, [pc, #576]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800473a:	e111      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800473c:	4b8d      	ldr	r3, [pc, #564]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800473e:	61bb      	str	r3, [r7, #24]
      break;
 8004740:	e10e      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004742:	4b8d      	ldr	r3, [pc, #564]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004744:	61bb      	str	r3, [r7, #24]
      break;
 8004746:	e10b      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004748:	4b8c      	ldr	r3, [pc, #560]	@ (800497c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800474a:	61bb      	str	r3, [r7, #24]
      break;
 800474c:	e108      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800474e:	4b88      	ldr	r3, [pc, #544]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004758:	4b85      	ldr	r3, [pc, #532]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004762:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004764:	4b82      	ldr	r3, [pc, #520]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800476e:	4b80      	ldr	r3, [pc, #512]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004772:	08db      	lsrs	r3, r3, #3
 8004774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80e1 	beq.w	8004954 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b02      	cmp	r3, #2
 8004796:	f000 8083 	beq.w	80048a0 <HAL_RCC_GetSysClockFreq+0x204>
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b02      	cmp	r3, #2
 800479e:	f200 80a1 	bhi.w	80048e4 <HAL_RCC_GetSysClockFreq+0x248>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0x114>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d056      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0x1c0>
 80047ae:	e099      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02d      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	08db      	lsrs	r3, r3, #3
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	4a6b      	ldr	r2, [pc, #428]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
 80047cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	ee07 3a90 	vmov	s15, r3
 80047d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b62      	ldr	r3, [pc, #392]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004816:	e087      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004984 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b51      	ldr	r3, [pc, #324]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a02 	vldr	s12, [r7, #8]
 800483e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800485a:	e065      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004988 <HAL_RCC_GetSysClockFreq+0x2ec>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b40      	ldr	r3, [pc, #256]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004882:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800489e:	e043      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800498c <HAL_RCC_GetSysClockFreq+0x2f0>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048e2:	e021      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004988 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a02 	vldr	s12, [r7, #8]
 800490a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004926:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004928:	4b11      	ldr	r3, [pc, #68]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800492a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492c:	0a5b      	lsrs	r3, r3, #9
 800492e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004932:	3301      	adds	r3, #1
 8004934:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004940:	edd7 6a07 	vldr	s13, [r7, #28]
 8004944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494c:	ee17 3a90 	vmov	r3, s15
 8004950:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004952:	e005      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
      break;
 8004958:	e002      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800495a:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800495c:	61bb      	str	r3, [r7, #24]
      break;
 800495e:	bf00      	nop
  }

  return sysclockfreq;
 8004960:	69bb      	ldr	r3, [r7, #24]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3724      	adds	r7, #36	@ 0x24
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
 8004974:	03d09000 	.word	0x03d09000
 8004978:	003d0900 	.word	0x003d0900
 800497c:	017d7840 	.word	0x017d7840
 8004980:	46000000 	.word	0x46000000
 8004984:	4c742400 	.word	0x4c742400
 8004988:	4a742400 	.word	0x4a742400
 800498c:	4bbebc20 	.word	0x4bbebc20

08004990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004996:	f7ff fe81 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b10      	ldr	r3, [pc, #64]	@ (80049e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490f      	ldr	r1, [pc, #60]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049b4:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	4a09      	ldr	r2, [pc, #36]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80049be:	5cd3      	ldrb	r3, [r2, r3]
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a07      	ldr	r2, [pc, #28]	@ (80049e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049ce:	4a07      	ldr	r2, [pc, #28]	@ (80049ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049d4:	4b04      	ldr	r3, [pc, #16]	@ (80049e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	58024400 	.word	0x58024400
 80049e4:	0800db3c 	.word	0x0800db3c
 80049e8:	24000004 	.word	0x24000004
 80049ec:	24000000 	.word	0x24000000

080049f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049f4:	f7ff ffcc 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4904      	ldr	r1, [pc, #16]	@ (8004a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	58024400 	.word	0x58024400
 8004a18:	0800db3c 	.word	0x0800db3c

08004a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a20:	f7ff ffb6 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4904      	ldr	r1, [pc, #16]	@ (8004a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	58024400 	.word	0x58024400
 8004a44:	0800db3c 	.word	0x0800db3c

08004a48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	223f      	movs	r2, #63	@ 0x3f
 8004a56:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a58:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0207 	and.w	r2, r3, #7
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004a64:	4b17      	ldr	r3, [pc, #92]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004a70:	4b14      	ldr	r3, [pc, #80]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f003 020f 	and.w	r2, r3, #15
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004a7c:	4b11      	ldr	r3, [pc, #68]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004a88:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004aa0:	4b08      	ldr	r3, [pc, #32]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aac:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <HAL_RCC_GetClockConfig+0x80>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	52002000 	.word	0x52002000

08004acc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b0ca      	sub	sp, #296	@ 0x128
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004af0:	2500      	movs	r5, #0
 8004af2:	ea54 0305 	orrs.w	r3, r4, r5
 8004af6:	d049      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004afe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b02:	d02f      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004b04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b08:	d828      	bhi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b0e:	d01a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b14:	d822      	bhi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b1e:	d007      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b20:	e01c      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b22:	4bb8      	ldr	r3, [pc, #736]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	4ab7      	ldr	r2, [pc, #732]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b2e:	e01a      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b34:	3308      	adds	r3, #8
 8004b36:	2102      	movs	r1, #2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f002 fb61 	bl	8007200 <RCCEx_PLL2_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b44:	e00f      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4a:	3328      	adds	r3, #40	@ 0x28
 8004b4c:	2102      	movs	r1, #2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f002 fc08 	bl	8007364 <RCCEx_PLL3_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b5a:	e004      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b62:	e000      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b6e:	4ba5      	ldr	r3, [pc, #660]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b7c:	4aa1      	ldr	r2, [pc, #644]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b82:	e003      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004b98:	f04f 0900 	mov.w	r9, #0
 8004b9c:	ea58 0309 	orrs.w	r3, r8, r9
 8004ba0:	d047      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d82a      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004bac:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bc9 	.word	0x08004bc9
 8004bb8:	08004bd7 	.word	0x08004bd7
 8004bbc:	08004bed 	.word	0x08004bed
 8004bc0:	08004c0b 	.word	0x08004c0b
 8004bc4:	08004c0b 	.word	0x08004c0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc8:	4b8e      	ldr	r3, [pc, #568]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bcc:	4a8d      	ldr	r2, [pc, #564]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bd4:	e01a      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	3308      	adds	r3, #8
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f002 fb0e 	bl	8007200 <RCCEx_PLL2_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bea:	e00f      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf0:	3328      	adds	r3, #40	@ 0x28
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f002 fbb5 	bl	8007364 <RCCEx_PLL3_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c00:	e004      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c08:	e000      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c14:	4b7b      	ldr	r3, [pc, #492]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c18:	f023 0107 	bic.w	r1, r3, #7
 8004c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c22:	4a78      	ldr	r2, [pc, #480]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c24:	430b      	orrs	r3, r1
 8004c26:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c28:	e003      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004c3e:	f04f 0b00 	mov.w	fp, #0
 8004c42:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c46:	d04c      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c52:	d030      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c58:	d829      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c5c:	d02d      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004c5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c60:	d825      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c62:	2b80      	cmp	r3, #128	@ 0x80
 8004c64:	d018      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004c66:	2b80      	cmp	r3, #128	@ 0x80
 8004c68:	d821      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004c6e:	2b40      	cmp	r3, #64	@ 0x40
 8004c70:	d007      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004c72:	e01c      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c74:	4b63      	ldr	r3, [pc, #396]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	4a62      	ldr	r2, [pc, #392]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c80:	e01c      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c86:	3308      	adds	r3, #8
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f002 fab8 	bl	8007200 <RCCEx_PLL2_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c96:	e011      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9c:	3328      	adds	r3, #40	@ 0x28
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f002 fb5f 	bl	8007364 <RCCEx_PLL3_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004cac:	e006      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cb4:	e002      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004cb6:	bf00      	nop
 8004cb8:	e000      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd2:	4a4c      	ldr	r2, [pc, #304]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cd8:	e003      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004cee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004cf8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	d053      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d0e:	d035      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004d10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d14:	d82e      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004d16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004d1a:	d031      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004d1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004d20:	d828      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004d22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d26:	d01a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004d28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d2c:	d822      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004d32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d36:	d007      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004d38:	e01c      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d3a:	4b32      	ldr	r3, [pc, #200]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	4a31      	ldr	r2, [pc, #196]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d46:	e01c      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4618      	mov	r0, r3
 8004d52:	f002 fa55 	bl	8007200 <RCCEx_PLL2_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d5c:	e011      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d62:	3328      	adds	r3, #40	@ 0x28
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f002 fafc 	bl	8007364 <RCCEx_PLL3_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d72:	e006      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d7a:	e002      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004d7c:	bf00      	nop
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004da0:	e003      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004db6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004dc0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	d056      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004dd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dd6:	d038      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004dd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ddc:	d831      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004dde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004de2:	d034      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004de4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004de8:	d82b      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004dea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dee:	d01d      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004df0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004df4:	d825      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d006      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004dfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004e00:	e01f      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e02:	bf00      	nop
 8004e04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e08:	4ba2      	ldr	r3, [pc, #648]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	4aa1      	ldr	r2, [pc, #644]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e14:	e01c      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f002 f9ee 	bl	8007200 <RCCEx_PLL2_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e2a:	e011      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e30:	3328      	adds	r3, #40	@ 0x28
 8004e32:	2100      	movs	r1, #0
 8004e34:	4618      	mov	r0, r3
 8004e36:	f002 fa95 	bl	8007364 <RCCEx_PLL3_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e40:	e006      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e48:	e002      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004e4a:	bf00      	nop
 8004e4c:	e000      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004e58:	4b8e      	ldr	r3, [pc, #568]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e68:	4a8a      	ldr	r2, [pc, #552]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e6e:	e003      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004e84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004e92:	460b      	mov	r3, r1
 8004e94:	4313      	orrs	r3, r2
 8004e96:	d03a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e9e:	2b30      	cmp	r3, #48	@ 0x30
 8004ea0:	d01f      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004ea2:	2b30      	cmp	r3, #48	@ 0x30
 8004ea4:	d819      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d00c      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d815      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d019      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004eb2:	2b10      	cmp	r3, #16
 8004eb4:	d111      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb6:	4b77      	ldr	r3, [pc, #476]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	4a76      	ldr	r2, [pc, #472]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004ec2:	e011      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec8:	3308      	adds	r3, #8
 8004eca:	2102      	movs	r1, #2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f002 f997 	bl	8007200 <RCCEx_PLL2_Config>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004ed8:	e006      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ee0:	e002      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ef0:	4b68      	ldr	r3, [pc, #416]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efe:	4a65      	ldr	r2, [pc, #404]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f00:	430b      	orrs	r3, r1
 8004f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f04:	e003      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004f1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	d051      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f38:	d035      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f3e:	d82e      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004f40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f44:	d031      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004f46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f4a:	d828      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f50:	d01a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f56:	d822      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f60:	d007      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004f62:	e01c      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f64:	4b4b      	ldr	r3, [pc, #300]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	4a4a      	ldr	r2, [pc, #296]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f70:	e01c      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f76:	3308      	adds	r3, #8
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f002 f940 	bl	8007200 <RCCEx_PLL2_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f86:	e011      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8c:	3328      	adds	r3, #40	@ 0x28
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f002 f9e7 	bl	8007364 <RCCEx_PLL3_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f9c:	e006      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fa4:	e002      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004fa6:	bf00      	nop
 8004fa8:	e000      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004fb4:	4b37      	ldr	r3, [pc, #220]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc2:	4a34      	ldr	r2, [pc, #208]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fc8:	e003      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004fde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004fe8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004fec:	460b      	mov	r3, r1
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	d056      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ff8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ffc:	d033      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004ffe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005002:	d82c      	bhi.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005004:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005008:	d02f      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800500a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800500e:	d826      	bhi.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005010:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005014:	d02b      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005016:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800501a:	d820      	bhi.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800501c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005020:	d012      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005026:	d81a      	bhi.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d022      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005030:	d115      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005036:	3308      	adds	r3, #8
 8005038:	2101      	movs	r1, #1
 800503a:	4618      	mov	r0, r3
 800503c:	f002 f8e0 	bl	8007200 <RCCEx_PLL2_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005046:	e015      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504c:	3328      	adds	r3, #40	@ 0x28
 800504e:	2101      	movs	r1, #1
 8005050:	4618      	mov	r0, r3
 8005052:	f002 f987 	bl	8007364 <RCCEx_PLL3_Config>
 8005056:	4603      	mov	r3, r0
 8005058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800505c:	e00a      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005064:	e006      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005066:	bf00      	nop
 8005068:	e004      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800506a:	bf00      	nop
 800506c:	e002      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800506e:	bf00      	nop
 8005070:	e000      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10d      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800507c:	4b05      	ldr	r3, [pc, #20]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800507e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005080:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800508a:	4a02      	ldr	r2, [pc, #8]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800508c:	430b      	orrs	r3, r1
 800508e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005090:	e006      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005092:	bf00      	nop
 8005094:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800509c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80050ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050b0:	2300      	movs	r3, #0
 80050b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4313      	orrs	r3, r2
 80050be:	d055      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80050c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050cc:	d033      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80050ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050d2:	d82c      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d8:	d02f      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80050da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050de:	d826      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80050e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050e4:	d02b      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80050e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050ea:	d820      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80050ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050f0:	d012      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80050f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050f6:	d81a      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d022      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80050fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005100:	d115      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005106:	3308      	adds	r3, #8
 8005108:	2101      	movs	r1, #1
 800510a:	4618      	mov	r0, r3
 800510c:	f002 f878 	bl	8007200 <RCCEx_PLL2_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005116:	e015      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800511c:	3328      	adds	r3, #40	@ 0x28
 800511e:	2101      	movs	r1, #1
 8005120:	4618      	mov	r0, r3
 8005122:	f002 f91f 	bl	8007364 <RCCEx_PLL3_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800512c:	e00a      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005134:	e006      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005136:	bf00      	nop
 8005138:	e004      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800513a:	bf00      	nop
 800513c:	e002      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800513e:	bf00      	nop
 8005140:	e000      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800514c:	4ba3      	ldr	r3, [pc, #652]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800515c:	4a9f      	ldr	r2, [pc, #636]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515e:	430b      	orrs	r3, r1
 8005160:	6593      	str	r3, [r2, #88]	@ 0x58
 8005162:	e003      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800516c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800517c:	2300      	movs	r3, #0
 800517e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005186:	460b      	mov	r3, r1
 8005188:	4313      	orrs	r3, r2
 800518a:	d037      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005196:	d00e      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800519c:	d816      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d018      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80051a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051a6:	d111      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a8:	4b8c      	ldr	r3, [pc, #560]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	4a8b      	ldr	r2, [pc, #556]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80051b4:	e00f      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ba:	3308      	adds	r3, #8
 80051bc:	2101      	movs	r1, #1
 80051be:	4618      	mov	r0, r3
 80051c0:	f002 f81e 	bl	8007200 <RCCEx_PLL2_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80051ca:	e004      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051d2:	e000      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80051d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051de:	4b7f      	ldr	r3, [pc, #508]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80051e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ec:	4a7b      	ldr	r2, [pc, #492]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ee:	430b      	orrs	r3, r1
 80051f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80051f2:	e003      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800520c:	2300      	movs	r3, #0
 800520e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005212:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005216:	460b      	mov	r3, r1
 8005218:	4313      	orrs	r3, r2
 800521a:	d039      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005222:	2b03      	cmp	r3, #3
 8005224:	d81c      	bhi.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005226:	a201      	add	r2, pc, #4	@ (adr r2, 800522c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522c:	08005269 	.word	0x08005269
 8005230:	0800523d 	.word	0x0800523d
 8005234:	0800524b 	.word	0x0800524b
 8005238:	08005269 	.word	0x08005269
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800523c:	4b67      	ldr	r3, [pc, #412]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	4a66      	ldr	r2, [pc, #408]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005248:	e00f      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800524a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524e:	3308      	adds	r3, #8
 8005250:	2102      	movs	r1, #2
 8005252:	4618      	mov	r0, r3
 8005254:	f001 ffd4 	bl	8007200 <RCCEx_PLL2_Config>
 8005258:	4603      	mov	r3, r0
 800525a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800525e:	e004      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005266:	e000      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800526a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10a      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005272:	4b5a      	ldr	r3, [pc, #360]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005276:	f023 0103 	bic.w	r1, r3, #3
 800527a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005280:	4a56      	ldr	r2, [pc, #344]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005282:	430b      	orrs	r3, r1
 8005284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005286:	e003      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800529c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052a0:	2300      	movs	r3, #0
 80052a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80052aa:	460b      	mov	r3, r1
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f000 809f 	beq.w	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052b2:	4b4b      	ldr	r3, [pc, #300]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a4a      	ldr	r2, [pc, #296]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052be:	f7fc f8a1 	bl	8001404 <HAL_GetTick>
 80052c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052c6:	e00b      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c8:	f7fc f89c 	bl	8001404 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b64      	cmp	r3, #100	@ 0x64
 80052d6:	d903      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052de:	e005      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052e0:	4b3f      	ldr	r3, [pc, #252]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0ed      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80052ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d179      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052f4:	4b39      	ldr	r3, [pc, #228]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005300:	4053      	eors	r3, r2
 8005302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005306:	2b00      	cmp	r3, #0
 8005308:	d015      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800530a:	4b34      	ldr	r3, [pc, #208]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005312:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005316:	4b31      	ldr	r3, [pc, #196]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531a:	4a30      	ldr	r2, [pc, #192]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005320:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005322:	4b2e      	ldr	r3, [pc, #184]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005326:	4a2d      	ldr	r2, [pc, #180]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800532c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800532e:	4a2b      	ldr	r2, [pc, #172]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005334:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800533e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005342:	d118      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fc f85e 	bl	8001404 <HAL_GetTick>
 8005348:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800534c:	e00d      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534e:	f7fc f859 	bl	8001404 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005358:	1ad2      	subs	r2, r2, r3
 800535a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800535e:	429a      	cmp	r2, r3
 8005360:	d903      	bls.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005368:	e005      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800536a:	4b1c      	ldr	r3, [pc, #112]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800536c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0eb      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800537a:	2b00      	cmp	r3, #0
 800537c:	d129      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800538a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800538e:	d10e      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005390:	4b12      	ldr	r3, [pc, #72]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053a0:	091a      	lsrs	r2, r3, #4
 80053a2:	4b10      	ldr	r3, [pc, #64]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	4a0d      	ldr	r2, [pc, #52]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6113      	str	r3, [r2, #16]
 80053ac:	e005      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80053ae:	4b0b      	ldr	r3, [pc, #44]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	4a0a      	ldr	r2, [pc, #40]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80053b8:	6113      	str	r3, [r2, #16]
 80053ba:	4b08      	ldr	r3, [pc, #32]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80053be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ca:	4a04      	ldr	r2, [pc, #16]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053cc:	430b      	orrs	r3, r1
 80053ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d0:	e00e      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80053da:	e009      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80053dc:	58024400 	.word	0x58024400
 80053e0:	58024800 	.word	0x58024800
 80053e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f002 0301 	and.w	r3, r2, #1
 80053fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005400:	2300      	movs	r3, #0
 8005402:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005406:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800540a:	460b      	mov	r3, r1
 800540c:	4313      	orrs	r3, r2
 800540e:	f000 8089 	beq.w	8005524 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005416:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005418:	2b28      	cmp	r3, #40	@ 0x28
 800541a:	d86b      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800541c:	a201      	add	r2, pc, #4	@ (adr r2, 8005424 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	080054fd 	.word	0x080054fd
 8005428:	080054f5 	.word	0x080054f5
 800542c:	080054f5 	.word	0x080054f5
 8005430:	080054f5 	.word	0x080054f5
 8005434:	080054f5 	.word	0x080054f5
 8005438:	080054f5 	.word	0x080054f5
 800543c:	080054f5 	.word	0x080054f5
 8005440:	080054f5 	.word	0x080054f5
 8005444:	080054c9 	.word	0x080054c9
 8005448:	080054f5 	.word	0x080054f5
 800544c:	080054f5 	.word	0x080054f5
 8005450:	080054f5 	.word	0x080054f5
 8005454:	080054f5 	.word	0x080054f5
 8005458:	080054f5 	.word	0x080054f5
 800545c:	080054f5 	.word	0x080054f5
 8005460:	080054f5 	.word	0x080054f5
 8005464:	080054df 	.word	0x080054df
 8005468:	080054f5 	.word	0x080054f5
 800546c:	080054f5 	.word	0x080054f5
 8005470:	080054f5 	.word	0x080054f5
 8005474:	080054f5 	.word	0x080054f5
 8005478:	080054f5 	.word	0x080054f5
 800547c:	080054f5 	.word	0x080054f5
 8005480:	080054f5 	.word	0x080054f5
 8005484:	080054fd 	.word	0x080054fd
 8005488:	080054f5 	.word	0x080054f5
 800548c:	080054f5 	.word	0x080054f5
 8005490:	080054f5 	.word	0x080054f5
 8005494:	080054f5 	.word	0x080054f5
 8005498:	080054f5 	.word	0x080054f5
 800549c:	080054f5 	.word	0x080054f5
 80054a0:	080054f5 	.word	0x080054f5
 80054a4:	080054fd 	.word	0x080054fd
 80054a8:	080054f5 	.word	0x080054f5
 80054ac:	080054f5 	.word	0x080054f5
 80054b0:	080054f5 	.word	0x080054f5
 80054b4:	080054f5 	.word	0x080054f5
 80054b8:	080054f5 	.word	0x080054f5
 80054bc:	080054f5 	.word	0x080054f5
 80054c0:	080054f5 	.word	0x080054f5
 80054c4:	080054fd 	.word	0x080054fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054cc:	3308      	adds	r3, #8
 80054ce:	2101      	movs	r1, #1
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 fe95 	bl	8007200 <RCCEx_PLL2_Config>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80054dc:	e00f      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e2:	3328      	adds	r3, #40	@ 0x28
 80054e4:	2101      	movs	r1, #1
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 ff3c 	bl	8007364 <RCCEx_PLL3_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80054f2:	e004      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054fa:	e000      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80054fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005506:	4bbf      	ldr	r3, [pc, #764]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005514:	4abb      	ldr	r2, [pc, #748]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005516:	430b      	orrs	r3, r1
 8005518:	6553      	str	r3, [r2, #84]	@ 0x54
 800551a:	e003      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f002 0302 	and.w	r3, r2, #2
 8005530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800553a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800553e:	460b      	mov	r3, r1
 8005540:	4313      	orrs	r3, r2
 8005542:	d041      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800554a:	2b05      	cmp	r3, #5
 800554c:	d824      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800554e:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	080055a1 	.word	0x080055a1
 8005558:	0800556d 	.word	0x0800556d
 800555c:	08005583 	.word	0x08005583
 8005560:	080055a1 	.word	0x080055a1
 8005564:	080055a1 	.word	0x080055a1
 8005568:	080055a1 	.word	0x080055a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	3308      	adds	r3, #8
 8005572:	2101      	movs	r1, #1
 8005574:	4618      	mov	r0, r3
 8005576:	f001 fe43 	bl	8007200 <RCCEx_PLL2_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005580:	e00f      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005586:	3328      	adds	r3, #40	@ 0x28
 8005588:	2101      	movs	r1, #1
 800558a:	4618      	mov	r0, r3
 800558c:	f001 feea 	bl	8007364 <RCCEx_PLL3_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005596:	e004      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800559e:	e000      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80055a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80055aa:	4b96      	ldr	r3, [pc, #600]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ae:	f023 0107 	bic.w	r1, r3, #7
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055b8:	4a92      	ldr	r2, [pc, #584]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055ba:	430b      	orrs	r3, r1
 80055bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80055be:	e003      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f002 0304 	and.w	r3, r2, #4
 80055d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055d8:	2300      	movs	r3, #0
 80055da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4313      	orrs	r3, r2
 80055e6:	d044      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055f0:	2b05      	cmp	r3, #5
 80055f2:	d825      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80055f4:	a201      	add	r2, pc, #4	@ (adr r2, 80055fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	08005649 	.word	0x08005649
 8005600:	08005615 	.word	0x08005615
 8005604:	0800562b 	.word	0x0800562b
 8005608:	08005649 	.word	0x08005649
 800560c:	08005649 	.word	0x08005649
 8005610:	08005649 	.word	0x08005649
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005618:	3308      	adds	r3, #8
 800561a:	2101      	movs	r1, #1
 800561c:	4618      	mov	r0, r3
 800561e:	f001 fdef 	bl	8007200 <RCCEx_PLL2_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005628:	e00f      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562e:	3328      	adds	r3, #40	@ 0x28
 8005630:	2101      	movs	r1, #1
 8005632:	4618      	mov	r0, r3
 8005634:	f001 fe96 	bl	8007364 <RCCEx_PLL3_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800563e:	e004      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005646:	e000      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800564a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005652:	4b6c      	ldr	r3, [pc, #432]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005656:	f023 0107 	bic.w	r1, r3, #7
 800565a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005662:	4a68      	ldr	r2, [pc, #416]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005664:	430b      	orrs	r3, r1
 8005666:	6593      	str	r3, [r2, #88]	@ 0x58
 8005668:	e003      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800566e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567a:	f002 0320 	and.w	r3, r2, #32
 800567e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005682:	2300      	movs	r3, #0
 8005684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005688:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800568c:	460b      	mov	r3, r1
 800568e:	4313      	orrs	r3, r2
 8005690:	d055      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800569e:	d033      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80056a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056a4:	d82c      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056aa:	d02f      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b0:	d826      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80056b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80056b6:	d02b      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80056b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80056bc:	d820      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80056be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056c2:	d012      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80056c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056c8:	d81a      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d022      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80056ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056d2:	d115      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d8:	3308      	adds	r3, #8
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 fd8f 	bl	8007200 <RCCEx_PLL2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80056e8:	e015      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ee:	3328      	adds	r3, #40	@ 0x28
 80056f0:	2102      	movs	r1, #2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 fe36 	bl	8007364 <RCCEx_PLL3_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80056fe:	e00a      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005706:	e006      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005708:	bf00      	nop
 800570a:	e004      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800570c:	bf00      	nop
 800570e:	e002      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005710:	bf00      	nop
 8005712:	e000      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10b      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800571e:	4b39      	ldr	r3, [pc, #228]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005722:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572e:	4a35      	ldr	r2, [pc, #212]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005730:	430b      	orrs	r3, r1
 8005732:	6553      	str	r3, [r2, #84]	@ 0x54
 8005734:	e003      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800573a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800574a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800574e:	2300      	movs	r3, #0
 8005750:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005754:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005758:	460b      	mov	r3, r1
 800575a:	4313      	orrs	r3, r2
 800575c:	d058      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800575e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005762:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005766:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800576a:	d033      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800576c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005770:	d82c      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005776:	d02f      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800577c:	d826      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800577e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005782:	d02b      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005784:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005788:	d820      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800578a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800578e:	d012      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005794:	d81a      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d022      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800579a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579e:	d115      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a4:	3308      	adds	r3, #8
 80057a6:	2100      	movs	r1, #0
 80057a8:	4618      	mov	r0, r3
 80057aa:	f001 fd29 	bl	8007200 <RCCEx_PLL2_Config>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80057b4:	e015      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ba:	3328      	adds	r3, #40	@ 0x28
 80057bc:	2102      	movs	r1, #2
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 fdd0 	bl	8007364 <RCCEx_PLL3_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80057ca:	e00a      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057d2:	e006      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80057d4:	bf00      	nop
 80057d6:	e004      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80057d8:	bf00      	nop
 80057da:	e002      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80057dc:	bf00      	nop
 80057de:	e000      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80057e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10e      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057ea:	4b06      	ldr	r3, [pc, #24]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80057f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057fa:	4a02      	ldr	r2, [pc, #8]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057fc:	430b      	orrs	r3, r1
 80057fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005800:	e006      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005802:	bf00      	nop
 8005804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800580c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800581c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005820:	2300      	movs	r3, #0
 8005822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005826:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800582a:	460b      	mov	r3, r1
 800582c:	4313      	orrs	r3, r2
 800582e:	d055      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005834:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005838:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800583c:	d033      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800583e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005842:	d82c      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005848:	d02f      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800584a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800584e:	d826      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005850:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005854:	d02b      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005856:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800585a:	d820      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800585c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005860:	d012      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005866:	d81a      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d022      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800586c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005870:	d115      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005876:	3308      	adds	r3, #8
 8005878:	2100      	movs	r1, #0
 800587a:	4618      	mov	r0, r3
 800587c:	f001 fcc0 	bl	8007200 <RCCEx_PLL2_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005886:	e015      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588c:	3328      	adds	r3, #40	@ 0x28
 800588e:	2102      	movs	r1, #2
 8005890:	4618      	mov	r0, r3
 8005892:	f001 fd67 	bl	8007364 <RCCEx_PLL3_Config>
 8005896:	4603      	mov	r3, r0
 8005898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800589c:	e00a      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80058a6:	bf00      	nop
 80058a8:	e004      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80058b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10b      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80058bc:	4ba1      	ldr	r3, [pc, #644]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058cc:	4a9d      	ldr	r2, [pc, #628]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ce:	430b      	orrs	r3, r1
 80058d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80058d2:	e003      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80058dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f002 0308 	and.w	r3, r2, #8
 80058e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058ec:	2300      	movs	r3, #0
 80058ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80058f6:	460b      	mov	r3, r1
 80058f8:	4313      	orrs	r3, r2
 80058fa:	d01e      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005900:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005908:	d10c      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590e:	3328      	adds	r3, #40	@ 0x28
 8005910:	2102      	movs	r1, #2
 8005912:	4618      	mov	r0, r3
 8005914:	f001 fd26 	bl	8007364 <RCCEx_PLL3_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005924:	4b87      	ldr	r3, [pc, #540]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005928:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800592c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005934:	4a83      	ldr	r2, [pc, #524]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005936:	430b      	orrs	r3, r1
 8005938:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f002 0310 	and.w	r3, r2, #16
 8005946:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800594a:	2300      	movs	r3, #0
 800594c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005950:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005954:	460b      	mov	r3, r1
 8005956:	4313      	orrs	r3, r2
 8005958:	d01e      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005966:	d10c      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596c:	3328      	adds	r3, #40	@ 0x28
 800596e:	2102      	movs	r1, #2
 8005970:	4618      	mov	r0, r3
 8005972:	f001 fcf7 	bl	8007364 <RCCEx_PLL3_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005982:	4b70      	ldr	r3, [pc, #448]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005986:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005992:	4a6c      	ldr	r2, [pc, #432]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005994:	430b      	orrs	r3, r1
 8005996:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80059a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80059b2:	460b      	mov	r3, r1
 80059b4:	4313      	orrs	r3, r2
 80059b6:	d03e      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059c4:	d022      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80059c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ca:	d81b      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80059d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059d4:	d00b      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80059d6:	e015      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059dc:	3308      	adds	r3, #8
 80059de:	2100      	movs	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 fc0d 	bl	8007200 <RCCEx_PLL2_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80059ec:	e00f      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f2:	3328      	adds	r3, #40	@ 0x28
 80059f4:	2102      	movs	r1, #2
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 fcb4 	bl	8007364 <RCCEx_PLL3_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a02:	e004      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a0a:	e000      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a16:	4b4b      	ldr	r3, [pc, #300]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a26:	4a47      	ldr	r2, [pc, #284]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a2c:	e003      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005a42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a44:	2300      	movs	r3, #0
 8005a46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	d03b      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a5e:	d01f      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005a60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a64:	d818      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a6a:	d003      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005a6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a70:	d007      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005a72:	e011      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a74:	4b33      	ldr	r3, [pc, #204]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a78:	4a32      	ldr	r2, [pc, #200]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a80:	e00f      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a86:	3328      	adds	r3, #40	@ 0x28
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 fc6a 	bl	8007364 <RCCEx_PLL3_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a96:	e004      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10b      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aaa:	4b26      	ldr	r3, [pc, #152]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aba:	4a22      	ldr	r2, [pc, #136]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ac0:	e003      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005ad6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ad8:	2300      	movs	r3, #0
 8005ada:	677b      	str	r3, [r7, #116]	@ 0x74
 8005adc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	d034      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af4:	d007      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005af6:	e011      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af8:	4b12      	ldr	r3, [pc, #72]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afc:	4a11      	ldr	r2, [pc, #68]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b04:	e00e      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	2102      	movs	r1, #2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f001 fb76 	bl	8007200 <RCCEx_PLL2_Config>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b1a:	e003      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10d      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b2c:	4b05      	ldr	r3, [pc, #20]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b3a:	4a02      	ldr	r2, [pc, #8]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b40:	e006      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005b42:	bf00      	nop
 8005b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b5e:	2300      	movs	r3, #0
 8005b60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b62:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005b66:	460b      	mov	r3, r1
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	d00c      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b70:	3328      	adds	r3, #40	@ 0x28
 8005b72:	2102      	movs	r1, #2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f001 fbf5 	bl	8007364 <RCCEx_PLL3_Config>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005b92:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b94:	2300      	movs	r3, #0
 8005b96:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	d038      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bae:	d018      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005bb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bb4:	d811      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bba:	d014      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bc0:	d80b      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d011      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bca:	d106      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bcc:	4bc3      	ldr	r3, [pc, #780]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	4ac2      	ldr	r2, [pc, #776]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005bd8:	e008      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005be0:	e004      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005be2:	bf00      	nop
 8005be4:	e002      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005be6:	bf00      	nop
 8005be8:	e000      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10b      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bf4:	4bb9      	ldr	r3, [pc, #740]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c04:	4ab5      	ldr	r2, [pc, #724]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c06:	430b      	orrs	r3, r1
 8005c08:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c0a:	e003      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005c20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c22:	2300      	movs	r3, #0
 8005c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	d009      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c30:	4baa      	ldr	r3, [pc, #680]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3e:	4aa7      	ldr	r2, [pc, #668]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005c50:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c52:	2300      	movs	r3, #0
 8005c54:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	d00a      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005c60:	4b9e      	ldr	r3, [pc, #632]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c70:	4a9a      	ldr	r2, [pc, #616]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c72:	430b      	orrs	r3, r1
 8005c74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c84:	2300      	movs	r3, #0
 8005c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c92:	4b92      	ldr	r3, [pc, #584]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c96:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ca0:	4a8e      	ldr	r2, [pc, #568]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005cb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cc2:	4b86      	ldr	r3, [pc, #536]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	4a85      	ldr	r2, [pc, #532]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ccc:	6113      	str	r3, [r2, #16]
 8005cce:	4b83      	ldr	r3, [pc, #524]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cd0:	6919      	ldr	r1, [r3, #16]
 8005cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005cda:	4a80      	ldr	r2, [pc, #512]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005cec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cee:	2300      	movs	r3, #0
 8005cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cf2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	d009      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005cfc:	4b77      	ldr	r3, [pc, #476]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d00:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0a:	4a74      	ldr	r2, [pc, #464]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d1e:	2300      	movs	r3, #0
 8005d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005d26:	460b      	mov	r3, r1
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	d00a      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d30:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d3c:	4a67      	ldr	r2, [pc, #412]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	d011      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d62:	3308      	adds	r3, #8
 8005d64:	2100      	movs	r1, #0
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 fa4a 	bl	8007200 <RCCEx_PLL2_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	6239      	str	r1, [r7, #32]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	d011      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da2:	3308      	adds	r3, #8
 8005da4:	2101      	movs	r1, #1
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 fa2a 	bl	8007200 <RCCEx_PLL2_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	2100      	movs	r1, #0
 8005dcc:	61b9      	str	r1, [r7, #24]
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	d011      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de2:	3308      	adds	r3, #8
 8005de4:	2102      	movs	r1, #2
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 fa0a 	bl	8007200 <RCCEx_PLL2_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	6139      	str	r1, [r7, #16]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	d011      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e22:	3328      	adds	r3, #40	@ 0x28
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 fa9c 	bl	8007364 <RCCEx_PLL3_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	f003 0310 	and.w	r3, r3, #16
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	d011      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e62:	3328      	adds	r3, #40	@ 0x28
 8005e64:	2101      	movs	r1, #1
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 fa7c 	bl	8007364 <RCCEx_PLL3_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	6039      	str	r1, [r7, #0]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	607b      	str	r3, [r7, #4]
 8005e94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	d011      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea2:	3328      	adds	r3, #40	@ 0x28
 8005ea4:	2102      	movs	r1, #2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 fa5c 	bl	8007364 <RCCEx_PLL3_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005ec2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e000      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005edc:	58024400 	.word	0x58024400

08005ee0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b090      	sub	sp, #64	@ 0x40
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	f040 8094 	bne.w	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005ef8:	4b9e      	ldr	r3, [pc, #632]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	f200 8087 	bhi.w	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f25 	.word	0x08005f25
 8005f14:	08005f4d 	.word	0x08005f4d
 8005f18:	08005f75 	.word	0x08005f75
 8005f1c:	08006011 	.word	0x08006011
 8005f20:	08005f9d 	.word	0x08005f9d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f24:	4b93      	ldr	r3, [pc, #588]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f30:	d108      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 f810 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f40:	f000 bd45 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f48:	f000 bd41 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f4c:	4b89      	ldr	r3, [pc, #548]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f58:	d108      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f5a:	f107 0318 	add.w	r3, r7, #24
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fd54 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f68:	f000 bd31 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f70:	f000 bd2d 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f74:	4b7f      	ldr	r3, [pc, #508]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f80:	d108      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f82:	f107 030c 	add.w	r3, r7, #12
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fe94 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f90:	f000 bd1d 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f98:	f000 bd19 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f9c:	4b75      	ldr	r3, [pc, #468]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005fa4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fa6:	4b73      	ldr	r3, [pc, #460]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fb8:	4b6e      	ldr	r3, [pc, #440]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	08db      	lsrs	r3, r3, #3
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	4a6d      	ldr	r2, [pc, #436]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fca:	e01f      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fcc:	4b69      	ldr	r3, [pc, #420]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd8:	d106      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fe0:	d102      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005fe2:	4b66      	ldr	r3, [pc, #408]	@ (800617c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fe6:	e011      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fe8:	4b62      	ldr	r3, [pc, #392]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ff4:	d106      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ffc:	d102      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ffe:	4b60      	ldr	r3, [pc, #384]	@ (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006002:	e003      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006008:	f000 bce1 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800600c:	f000 bcdf 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006010:	4b5c      	ldr	r3, [pc, #368]	@ (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006014:	f000 bcdb 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800601c:	f000 bcd7 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006024:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006028:	430b      	orrs	r3, r1
 800602a:	f040 80ad 	bne.w	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800602e:	4b51      	ldr	r3, [pc, #324]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006032:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006036:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800603e:	d056      	beq.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006046:	f200 8090 	bhi.w	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	2bc0      	cmp	r3, #192	@ 0xc0
 800604e:	f000 8088 	beq.w	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	2bc0      	cmp	r3, #192	@ 0xc0
 8006056:	f200 8088 	bhi.w	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605c:	2b80      	cmp	r3, #128	@ 0x80
 800605e:	d032      	beq.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	2b80      	cmp	r3, #128	@ 0x80
 8006064:	f200 8081 	bhi.w	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	2b40      	cmp	r3, #64	@ 0x40
 8006072:	d014      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006074:	e079      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006076:	4b3f      	ldr	r3, [pc, #252]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800607e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006082:	d108      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006088:	4618      	mov	r0, r3
 800608a:	f000 ff67 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800608e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006092:	f000 bc9c 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800609a:	f000 bc98 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800609e:	4b35      	ldr	r3, [pc, #212]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060aa:	d108      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ac:	f107 0318 	add.w	r3, r7, #24
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fcab 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060ba:	f000 bc88 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060c2:	f000 bc84 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060c6:	4b2b      	ldr	r3, [pc, #172]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d2:	d108      	bne.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060d4:	f107 030c 	add.w	r3, r7, #12
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fdeb 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060e2:	f000 bc74 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ea:	f000 bc70 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060ee:	4b21      	ldr	r3, [pc, #132]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b04      	cmp	r3, #4
 8006102:	d10c      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800610a:	4b1a      	ldr	r3, [pc, #104]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	08db      	lsrs	r3, r3, #3
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	4a18      	ldr	r2, [pc, #96]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800611c:	e01f      	b.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800611e:	4b15      	ldr	r3, [pc, #84]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800612a:	d106      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800612c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006132:	d102      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006134:	4b11      	ldr	r3, [pc, #68]	@ (800617c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006138:	e011      	b.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800613a:	4b0e      	ldr	r3, [pc, #56]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006146:	d106      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800614e:	d102      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006150:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006154:	e003      	b.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800615a:	f000 bc38 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800615e:	f000 bc36 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006162:	4b08      	ldr	r3, [pc, #32]	@ (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006166:	f000 bc32 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800616e:	f000 bc2e 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006172:	bf00      	nop
 8006174:	58024400 	.word	0x58024400
 8006178:	03d09000 	.word	0x03d09000
 800617c:	003d0900 	.word	0x003d0900
 8006180:	017d7840 	.word	0x017d7840
 8006184:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800618c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006190:	430b      	orrs	r3, r1
 8006192:	f040 809c 	bne.w	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006196:	4b9e      	ldr	r3, [pc, #632]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800619e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061a6:	d054      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061ae:	f200 808b 	bhi.w	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80061b8:	f000 8083 	beq.w	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80061c2:	f200 8081 	bhi.w	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061cc:	d02f      	beq.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80061ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061d4:	d878      	bhi.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80061dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061e2:	d012      	beq.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80061e4:	e070      	b.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061e6:	4b8a      	ldr	r3, [pc, #552]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061f2:	d107      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 feaf 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006202:	e3e4      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006204:	2300      	movs	r3, #0
 8006206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006208:	e3e1      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800620a:	4b81      	ldr	r3, [pc, #516]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006212:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006216:	d107      	bne.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006218:	f107 0318 	add.w	r3, r7, #24
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fbf5 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006226:	e3d2      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800622c:	e3cf      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800622e:	4b78      	ldr	r3, [pc, #480]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800623a:	d107      	bne.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800623c:	f107 030c 	add.w	r3, r7, #12
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fd37 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800624a:	e3c0      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006250:	e3bd      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006252:	4b6f      	ldr	r3, [pc, #444]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006256:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800625a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800625c:	4b6c      	ldr	r3, [pc, #432]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b04      	cmp	r3, #4
 8006266:	d10c      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800626e:	4b68      	ldr	r3, [pc, #416]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	08db      	lsrs	r3, r3, #3
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	4a66      	ldr	r2, [pc, #408]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800627a:	fa22 f303 	lsr.w	r3, r2, r3
 800627e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006280:	e01e      	b.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006282:	4b63      	ldr	r3, [pc, #396]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800628e:	d106      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006292:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006296:	d102      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006298:	4b5f      	ldr	r3, [pc, #380]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800629a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800629c:	e010      	b.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800629e:	4b5c      	ldr	r3, [pc, #368]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062aa:	d106      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80062ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062b2:	d102      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062b4:	4b59      	ldr	r3, [pc, #356]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80062b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062b8:	e002      	b.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062be:	e386      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062c0:	e385      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062c2:	4b57      	ldr	r3, [pc, #348]	@ (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80062c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062c6:	e382      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80062c8:	2300      	movs	r3, #0
 80062ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062cc:	e37f      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80062ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80062d6:	430b      	orrs	r3, r1
 80062d8:	f040 80a7 	bne.w	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80062dc:	4b4c      	ldr	r3, [pc, #304]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80062e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062ec:	d055      	beq.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062f4:	f200 8096 	bhi.w	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062fe:	f000 8084 	beq.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006308:	f200 808c 	bhi.w	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800630c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006312:	d030      	beq.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800631a:	f200 8083 	bhi.w	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800632a:	d012      	beq.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800632c:	e07a      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800632e:	4b38      	ldr	r3, [pc, #224]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006336:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800633a:	d107      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800633c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fe0b 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800634a:	e340      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006350:	e33d      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006352:	4b2f      	ldr	r3, [pc, #188]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800635a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800635e:	d107      	bne.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006360:	f107 0318 	add.w	r3, r7, #24
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fb51 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800636e:	e32e      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006370:	2300      	movs	r3, #0
 8006372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006374:	e32b      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006376:	4b26      	ldr	r3, [pc, #152]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800637e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006382:	d107      	bne.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006384:	f107 030c 	add.w	r3, r7, #12
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fc93 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006392:	e31c      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006398:	e319      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800639a:	4b1d      	ldr	r3, [pc, #116]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800639c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800639e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80063a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d10c      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80063b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063b6:	4b16      	ldr	r3, [pc, #88]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	08db      	lsrs	r3, r3, #3
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	4a14      	ldr	r2, [pc, #80]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80063c2:	fa22 f303 	lsr.w	r3, r2, r3
 80063c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063c8:	e01e      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063ca:	4b11      	ldr	r3, [pc, #68]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d6:	d106      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80063d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063de:	d102      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80063e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063e4:	e010      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063f2:	d106      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80063f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063fa:	d102      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063fc:	4b07      	ldr	r3, [pc, #28]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006400:	e002      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006406:	e2e2      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006408:	e2e1      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800640a:	4b05      	ldr	r3, [pc, #20]	@ (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800640c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800640e:	e2de      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006410:	58024400 	.word	0x58024400
 8006414:	03d09000 	.word	0x03d09000
 8006418:	003d0900 	.word	0x003d0900
 800641c:	017d7840 	.word	0x017d7840
 8006420:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006428:	e2d1      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800642a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006432:	430b      	orrs	r3, r1
 8006434:	f040 809c 	bne.w	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006438:	4b93      	ldr	r3, [pc, #588]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800643a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800643c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006440:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006444:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006448:	d054      	beq.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800644a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006450:	f200 808b 	bhi.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800645a:	f000 8083 	beq.w	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800645e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006460:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006464:	f200 8081 	bhi.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800646e:	d02f      	beq.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006476:	d878      	bhi.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006484:	d012      	beq.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006486:	e070      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006488:	4b7f      	ldr	r3, [pc, #508]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006490:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006494:	d107      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fd5e 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064a4:	e293      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064aa:	e290      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064ac:	4b76      	ldr	r3, [pc, #472]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064b8:	d107      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ba:	f107 0318 	add.w	r3, r7, #24
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 faa4 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064c8:	e281      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ce:	e27e      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064d0:	4b6d      	ldr	r3, [pc, #436]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064dc:	d107      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064de:	f107 030c 	add.w	r3, r7, #12
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fbe6 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ec:	e26f      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f2:	e26c      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064f4:	4b64      	ldr	r3, [pc, #400]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064fe:	4b62      	ldr	r3, [pc, #392]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b04      	cmp	r3, #4
 8006508:	d10c      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800650a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650c:	2b00      	cmp	r3, #0
 800650e:	d109      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006510:	4b5d      	ldr	r3, [pc, #372]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	08db      	lsrs	r3, r3, #3
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	4a5c      	ldr	r2, [pc, #368]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800651c:	fa22 f303 	lsr.w	r3, r2, r3
 8006520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006522:	e01e      	b.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006524:	4b58      	ldr	r3, [pc, #352]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800652c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006530:	d106      	bne.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006534:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006538:	d102      	bne.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800653a:	4b55      	ldr	r3, [pc, #340]	@ (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800653c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800653e:	e010      	b.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006540:	4b51      	ldr	r3, [pc, #324]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800654c:	d106      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800654e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006554:	d102      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006556:	4b4f      	ldr	r3, [pc, #316]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800655a:	e002      	b.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006560:	e235      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006562:	e234      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006564:	4b4c      	ldr	r3, [pc, #304]	@ (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006568:	e231      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800656e:	e22e      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006574:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006578:	430b      	orrs	r3, r1
 800657a:	f040 808f 	bne.w	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800657e:	4b42      	ldr	r3, [pc, #264]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006582:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006586:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800658e:	d06b      	beq.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006592:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006596:	d874      	bhi.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800659e:	d056      	beq.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80065a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065a6:	d86c      	bhi.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80065a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065ae:	d03b      	beq.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065b6:	d864      	bhi.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80065b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065be:	d021      	beq.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80065c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065c6:	d85c      	bhi.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80065c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d004      	beq.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d4:	d004      	beq.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80065d6:	e054      	b.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80065d8:	f7fe fa0a 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 80065dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065de:	e1f6      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065e0:	4b29      	ldr	r3, [pc, #164]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065ec:	d107      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ee:	f107 0318 	add.w	r3, r7, #24
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fa0a 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065fc:	e1e7      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006602:	e1e4      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006604:	4b20      	ldr	r3, [pc, #128]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800660c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006610:	d107      	bne.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006612:	f107 030c 	add.w	r3, r7, #12
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fb4c 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006620:	e1d5      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006626:	e1d2      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006628:	4b17      	ldr	r3, [pc, #92]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b04      	cmp	r3, #4
 8006632:	d109      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006634:	4b14      	ldr	r3, [pc, #80]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	08db      	lsrs	r3, r3, #3
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	4a13      	ldr	r2, [pc, #76]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006640:	fa22 f303 	lsr.w	r3, r2, r3
 8006644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006646:	e1c2      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800664c:	e1bf      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800664e:	4b0e      	ldr	r3, [pc, #56]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800665a:	d102      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800665c:	4b0c      	ldr	r3, [pc, #48]	@ (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006660:	e1b5      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006666:	e1b2      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006668:	4b07      	ldr	r3, [pc, #28]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006670:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006674:	d102      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006676:	4b07      	ldr	r3, [pc, #28]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800667a:	e1a8      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006680:	e1a5      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006686:	e1a2      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006688:	58024400 	.word	0x58024400
 800668c:	03d09000 	.word	0x03d09000
 8006690:	003d0900 	.word	0x003d0900
 8006694:	017d7840 	.word	0x017d7840
 8006698:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800669c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80066a4:	430b      	orrs	r3, r1
 80066a6:	d173      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80066a8:	4b9c      	ldr	r3, [pc, #624]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80066b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066b8:	d02f      	beq.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c0:	d863      	bhi.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80066c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d004      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80066c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ce:	d012      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80066d0:	e05b      	b.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066d2:	4b92      	ldr	r3, [pc, #584]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066de:	d107      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066e0:	f107 0318 	add.w	r3, r7, #24
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 f991 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066ee:	e16e      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f4:	e16b      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066f6:	4b89      	ldr	r3, [pc, #548]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006702:	d107      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006704:	f107 030c 	add.w	r3, r7, #12
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fad3 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006712:	e15c      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006718:	e159      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800671a:	4b80      	ldr	r3, [pc, #512]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800671c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800671e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006722:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006724:	4b7d      	ldr	r3, [pc, #500]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b04      	cmp	r3, #4
 800672e:	d10c      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006732:	2b00      	cmp	r3, #0
 8006734:	d109      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006736:	4b79      	ldr	r3, [pc, #484]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	08db      	lsrs	r3, r3, #3
 800673c:	f003 0303 	and.w	r3, r3, #3
 8006740:	4a77      	ldr	r2, [pc, #476]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006742:	fa22 f303 	lsr.w	r3, r2, r3
 8006746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006748:	e01e      	b.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800674a:	4b74      	ldr	r3, [pc, #464]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006756:	d106      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800675e:	d102      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006760:	4b70      	ldr	r3, [pc, #448]	@ (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006764:	e010      	b.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006766:	4b6d      	ldr	r3, [pc, #436]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800676e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006772:	d106      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800677a:	d102      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800677c:	4b6a      	ldr	r3, [pc, #424]	@ (8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800677e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006780:	e002      	b.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006786:	e122      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006788:	e121      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800678e:	e11e      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006794:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006798:	430b      	orrs	r3, r1
 800679a:	d133      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800679c:	4b5f      	ldr	r3, [pc, #380]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800679e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80067a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80067ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b2:	d012      	beq.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80067b4:	e023      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067b6:	4b59      	ldr	r3, [pc, #356]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067c2:	d107      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fbc7 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067d2:	e0fc      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067d8:	e0f9      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067da:	4b50      	ldr	r3, [pc, #320]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067e6:	d107      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067e8:	f107 0318 	add.w	r3, r7, #24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 f90d 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f6:	e0ea      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067fc:	e0e7      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006802:	e0e4      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006808:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800680c:	430b      	orrs	r3, r1
 800680e:	f040 808d 	bne.w	800692c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006812:	4b42      	ldr	r3, [pc, #264]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006816:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800681a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006822:	d06b      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800682a:	d874      	bhi.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800682c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006832:	d056      	beq.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683a:	d86c      	bhi.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006842:	d03b      	beq.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006846:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800684a:	d864      	bhi.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006852:	d021      	beq.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800685a:	d85c      	bhi.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800685c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685e:	2b00      	cmp	r3, #0
 8006860:	d004      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006868:	d004      	beq.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800686a:	e054      	b.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800686c:	f000 f8b8 	bl	80069e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006870:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006872:	e0ac      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006874:	4b29      	ldr	r3, [pc, #164]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800687c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006880:	d107      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006882:	f107 0318 	add.w	r3, r7, #24
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f8c0 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006890:	e09d      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006896:	e09a      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006898:	4b20      	ldr	r3, [pc, #128]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068a4:	d107      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a6:	f107 030c 	add.w	r3, r7, #12
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fa02 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068b4:	e08b      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ba:	e088      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068bc:	4b17      	ldr	r3, [pc, #92]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	d109      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068c8:	4b14      	ldr	r3, [pc, #80]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	08db      	lsrs	r3, r3, #3
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	4a13      	ldr	r2, [pc, #76]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80068d4:	fa22 f303 	lsr.w	r3, r2, r3
 80068d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068da:	e078      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068dc:	2300      	movs	r3, #0
 80068de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068e0:	e075      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80068e2:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ee:	d102      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80068f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80068f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f4:	e06b      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068fa:	e068      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068fc:	4b07      	ldr	r3, [pc, #28]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006908:	d102      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800690a:	4b07      	ldr	r3, [pc, #28]	@ (8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800690c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800690e:	e05e      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006914:	e05b      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800691a:	e058      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800691c:	58024400 	.word	0x58024400
 8006920:	03d09000 	.word	0x03d09000
 8006924:	003d0900 	.word	0x003d0900
 8006928:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800692c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006930:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006934:	430b      	orrs	r3, r1
 8006936:	d148      	bne.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006938:	4b27      	ldr	r3, [pc, #156]	@ (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800693a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800693c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006940:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006948:	d02a      	beq.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800694a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006950:	d838      	bhi.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800695e:	d00d      	beq.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006960:	e030      	b.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006962:	4b1d      	ldr	r3, [pc, #116]	@ (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800696e:	d102      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006970:	4b1a      	ldr	r3, [pc, #104]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006974:	e02b      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800697a:	e028      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800697c:	4b16      	ldr	r3, [pc, #88]	@ (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006984:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006988:	d107      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800698a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fae4 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006998:	e019      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699e:	e016      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069a0:	4b0d      	ldr	r3, [pc, #52]	@ (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069ac:	d107      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ae:	f107 0318 	add.w	r3, r7, #24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 f82a 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069bc:	e007      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069c2:	e004      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069c8:	e001      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80069ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3740      	adds	r7, #64	@ 0x40
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	58024400 	.word	0x58024400
 80069dc:	017d7840 	.word	0x017d7840

080069e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069e4:	f7fd ffd4 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	091b      	lsrs	r3, r3, #4
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4904      	ldr	r1, [pc, #16]	@ (8006a08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	58024400 	.word	0x58024400
 8006a08:	0800db3c 	.word	0x0800db3c

08006a0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b089      	sub	sp, #36	@ 0x24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a14:	4ba1      	ldr	r3, [pc, #644]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a1e:	4b9f      	ldr	r3, [pc, #636]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	0b1b      	lsrs	r3, r3, #12
 8006a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a2a:	4b9c      	ldr	r3, [pc, #624]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	091b      	lsrs	r3, r3, #4
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a36:	4b99      	ldr	r3, [pc, #612]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	08db      	lsrs	r3, r3, #3
 8006a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	fb02 f303 	mul.w	r3, r2, r3
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8111 	beq.w	8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	f000 8083 	beq.w	8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	f200 80a1 	bhi.w	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d056      	beq.n	8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a76:	e099      	b.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a78:	4b88      	ldr	r3, [pc, #544]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d02d      	beq.n	8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a84:	4b85      	ldr	r3, [pc, #532]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	08db      	lsrs	r3, r3, #3
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	4a84      	ldr	r2, [pc, #528]	@ (8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
 8006a94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	ee07 3a90 	vmov	s15, r3
 8006a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aae:	4b7b      	ldr	r3, [pc, #492]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ada:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ade:	e087      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af2:	4b6a      	ldr	r3, [pc, #424]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b22:	e065      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b36:	4b59      	ldr	r3, [pc, #356]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b66:	e043      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7a:	4b48      	ldr	r3, [pc, #288]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006baa:	e021      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bbe:	4b37      	ldr	r3, [pc, #220]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf4:	0a5b      	lsrs	r3, r3, #9
 8006bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c16:	ee17 2a90 	vmov	r2, s15
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c22:	0c1b      	lsrs	r3, r3, #16
 8006c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c44:	ee17 2a90 	vmov	r2, s15
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c4c:	4b13      	ldr	r3, [pc, #76]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c50:	0e1b      	lsrs	r3, r3, #24
 8006c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c72:	ee17 2a90 	vmov	r2, s15
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c7a:	e008      	b.n	8006c8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	609a      	str	r2, [r3, #8]
}
 8006c8e:	bf00      	nop
 8006c90:	3724      	adds	r7, #36	@ 0x24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	03d09000 	.word	0x03d09000
 8006ca4:	46000000 	.word	0x46000000
 8006ca8:	4c742400 	.word	0x4c742400
 8006cac:	4a742400 	.word	0x4a742400
 8006cb0:	4bbebc20 	.word	0x4bbebc20

08006cb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b089      	sub	sp, #36	@ 0x24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006cc6:	4b9f      	ldr	r3, [pc, #636]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cca:	0d1b      	lsrs	r3, r3, #20
 8006ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cd2:	4b9c      	ldr	r3, [pc, #624]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006cde:	4b99      	ldr	r3, [pc, #612]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce2:	08db      	lsrs	r3, r3, #3
 8006ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	fb02 f303 	mul.w	r3, r2, r3
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8111 	beq.w	8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	f000 8083 	beq.w	8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	f200 80a1 	bhi.w	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d056      	beq.n	8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d1e:	e099      	b.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d20:	4b88      	ldr	r3, [pc, #544]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d02d      	beq.n	8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d2c:	4b85      	ldr	r3, [pc, #532]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	08db      	lsrs	r3, r3, #3
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	4a84      	ldr	r2, [pc, #528]	@ (8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d38:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d56:	4b7b      	ldr	r3, [pc, #492]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d86:	e087      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dca:	e065      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dde:	4b59      	ldr	r3, [pc, #356]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006df2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e0e:	e043      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e22:	4b48      	ldr	r3, [pc, #288]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e52:	e021      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b37      	ldr	r3, [pc, #220]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e98:	4b2a      	ldr	r3, [pc, #168]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9c:	0a5b      	lsrs	r3, r3, #9
 8006e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ebe:	ee17 2a90 	vmov	r2, s15
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eca:	0c1b      	lsrs	r3, r3, #16
 8006ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eec:	ee17 2a90 	vmov	r2, s15
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006ef4:	4b13      	ldr	r3, [pc, #76]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef8:	0e1b      	lsrs	r3, r3, #24
 8006efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1a:	ee17 2a90 	vmov	r2, s15
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f22:	e008      	b.n	8006f36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	609a      	str	r2, [r3, #8]
}
 8006f36:	bf00      	nop
 8006f38:	3724      	adds	r7, #36	@ 0x24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	58024400 	.word	0x58024400
 8006f48:	03d09000 	.word	0x03d09000
 8006f4c:	46000000 	.word	0x46000000
 8006f50:	4c742400 	.word	0x4c742400
 8006f54:	4a742400 	.word	0x4a742400
 8006f58:	4bbebc20 	.word	0x4bbebc20

08006f5c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b089      	sub	sp, #36	@ 0x24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f64:	4ba0      	ldr	r3, [pc, #640]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006f6e:	4b9e      	ldr	r3, [pc, #632]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	091b      	lsrs	r3, r3, #4
 8006f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f78:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006f7a:	4b9b      	ldr	r3, [pc, #620]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f84:	4b98      	ldr	r3, [pc, #608]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f88:	08db      	lsrs	r3, r3, #3
 8006f8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	fb02 f303 	mul.w	r3, r2, r3
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8111 	beq.w	80071ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	f000 8083 	beq.w	80070b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	f200 80a1 	bhi.w	80070fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d056      	beq.n	8007072 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006fc4:	e099      	b.n	80070fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc6:	4b88      	ldr	r3, [pc, #544]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d02d      	beq.n	800702e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fd2:	4b85      	ldr	r3, [pc, #532]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	08db      	lsrs	r3, r3, #3
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	4a83      	ldr	r2, [pc, #524]	@ (80071ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006fde:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	ee07 3a90 	vmov	s15, r3
 8006ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007010:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007028:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800702c:	e087      	b.n	800713e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007038:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800703c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007040:	4b69      	ldr	r3, [pc, #420]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007048:	ee07 3a90 	vmov	s15, r3
 800704c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007050:	ed97 6a03 	vldr	s12, [r7, #12]
 8007054:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007060:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007070:	e065      	b.n	800713e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	ee07 3a90 	vmov	s15, r3
 8007078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007084:	4b58      	ldr	r3, [pc, #352]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708c:	ee07 3a90 	vmov	s15, r3
 8007090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007094:	ed97 6a03 	vldr	s12, [r7, #12]
 8007098:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800709c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070b4:	e043      	b.n	800713e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	ee07 3a90 	vmov	s15, r3
 80070bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80071fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80070c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c8:	4b47      	ldr	r3, [pc, #284]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80070dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070f8:	e021      	b.n	800713e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007104:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710c:	4b36      	ldr	r3, [pc, #216]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800710e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007120:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007138:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800713e:	4b2a      	ldr	r3, [pc, #168]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007142:	0a5b      	lsrs	r3, r3, #9
 8007144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007150:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007158:	edd7 6a07 	vldr	s13, [r7, #28]
 800715c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007164:	ee17 2a90 	vmov	r2, s15
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800716c:	4b1e      	ldr	r3, [pc, #120]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800716e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007170:	0c1b      	lsrs	r3, r3, #16
 8007172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007186:	edd7 6a07 	vldr	s13, [r7, #28]
 800718a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800718e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007192:	ee17 2a90 	vmov	r2, s15
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800719a:	4b13      	ldr	r3, [pc, #76]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719e:	0e1b      	lsrs	r3, r3, #24
 80071a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c0:	ee17 2a90 	vmov	r2, s15
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80071c8:	e008      	b.n	80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	609a      	str	r2, [r3, #8]
}
 80071dc:	bf00      	nop
 80071de:	3724      	adds	r7, #36	@ 0x24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	58024400 	.word	0x58024400
 80071ec:	03d09000 	.word	0x03d09000
 80071f0:	46000000 	.word	0x46000000
 80071f4:	4c742400 	.word	0x4c742400
 80071f8:	4a742400 	.word	0x4a742400
 80071fc:	4bbebc20 	.word	0x4bbebc20

08007200 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800720e:	4b53      	ldr	r3, [pc, #332]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b03      	cmp	r3, #3
 8007218:	d101      	bne.n	800721e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e099      	b.n	8007352 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800721e:	4b4f      	ldr	r3, [pc, #316]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a4e      	ldr	r2, [pc, #312]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007224:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722a:	f7fa f8eb 	bl	8001404 <HAL_GetTick>
 800722e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007230:	e008      	b.n	8007244 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007232:	f7fa f8e7 	bl	8001404 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e086      	b.n	8007352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007244:	4b45      	ldr	r3, [pc, #276]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f0      	bne.n	8007232 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007250:	4b42      	ldr	r3, [pc, #264]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007254:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	031b      	lsls	r3, r3, #12
 800725e:	493f      	ldr	r1, [pc, #252]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007260:	4313      	orrs	r3, r2
 8007262:	628b      	str	r3, [r1, #40]	@ 0x28
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	3b01      	subs	r3, #1
 800726a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	3b01      	subs	r3, #1
 8007274:	025b      	lsls	r3, r3, #9
 8007276:	b29b      	uxth	r3, r3
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	3b01      	subs	r3, #1
 8007280:	041b      	lsls	r3, r3, #16
 8007282:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	3b01      	subs	r3, #1
 800728e:	061b      	lsls	r3, r3, #24
 8007290:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007294:	4931      	ldr	r1, [pc, #196]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007296:	4313      	orrs	r3, r2
 8007298:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800729a:	4b30      	ldr	r3, [pc, #192]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	492d      	ldr	r1, [pc, #180]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072ac:	4b2b      	ldr	r3, [pc, #172]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	f023 0220 	bic.w	r2, r3, #32
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	4928      	ldr	r1, [pc, #160]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80072be:	4b27      	ldr	r3, [pc, #156]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c2:	4a26      	ldr	r2, [pc, #152]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072c4:	f023 0310 	bic.w	r3, r3, #16
 80072c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072ca:	4b24      	ldr	r3, [pc, #144]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072ce:	4b24      	ldr	r3, [pc, #144]	@ (8007360 <RCCEx_PLL2_Config+0x160>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	69d2      	ldr	r2, [r2, #28]
 80072d6:	00d2      	lsls	r2, r2, #3
 80072d8:	4920      	ldr	r1, [pc, #128]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072de:	4b1f      	ldr	r3, [pc, #124]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e2:	4a1e      	ldr	r2, [pc, #120]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072e4:	f043 0310 	orr.w	r3, r3, #16
 80072e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80072f0:	4b1a      	ldr	r3, [pc, #104]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f4:	4a19      	ldr	r2, [pc, #100]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072fc:	e00f      	b.n	800731e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d106      	bne.n	8007312 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007304:	4b15      	ldr	r3, [pc, #84]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007308:	4a14      	ldr	r2, [pc, #80]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 800730a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800730e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007310:	e005      	b.n	800731e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007312:	4b12      	ldr	r3, [pc, #72]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007316:	4a11      	ldr	r2, [pc, #68]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007318:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800731c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800731e:	4b0f      	ldr	r3, [pc, #60]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a0e      	ldr	r2, [pc, #56]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007324:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800732a:	f7fa f86b 	bl	8001404 <HAL_GetTick>
 800732e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007330:	e008      	b.n	8007344 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007332:	f7fa f867 	bl	8001404 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d901      	bls.n	8007344 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e006      	b.n	8007352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007344:	4b05      	ldr	r3, [pc, #20]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0f0      	beq.n	8007332 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	58024400 	.word	0x58024400
 8007360:	ffff0007 	.word	0xffff0007

08007364 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007372:	4b53      	ldr	r3, [pc, #332]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b03      	cmp	r3, #3
 800737c:	d101      	bne.n	8007382 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e099      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007382:	4b4f      	ldr	r3, [pc, #316]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a4e      	ldr	r2, [pc, #312]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007388:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800738c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800738e:	f7fa f839 	bl	8001404 <HAL_GetTick>
 8007392:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007394:	e008      	b.n	80073a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007396:	f7fa f835 	bl	8001404 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e086      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073a8:	4b45      	ldr	r3, [pc, #276]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f0      	bne.n	8007396 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073b4:	4b42      	ldr	r3, [pc, #264]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	051b      	lsls	r3, r3, #20
 80073c2:	493f      	ldr	r1, [pc, #252]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	025b      	lsls	r3, r3, #9
 80073da:	b29b      	uxth	r3, r3
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	061b      	lsls	r3, r3, #24
 80073f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073f8:	4931      	ldr	r1, [pc, #196]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073fe:	4b30      	ldr	r3, [pc, #192]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	492d      	ldr	r1, [pc, #180]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800740c:	4313      	orrs	r3, r2
 800740e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007410:	4b2b      	ldr	r3, [pc, #172]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007414:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	4928      	ldr	r1, [pc, #160]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007422:	4b27      	ldr	r3, [pc, #156]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	4a26      	ldr	r2, [pc, #152]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800742c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800742e:	4b24      	ldr	r3, [pc, #144]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007432:	4b24      	ldr	r3, [pc, #144]	@ (80074c4 <RCCEx_PLL3_Config+0x160>)
 8007434:	4013      	ands	r3, r2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	69d2      	ldr	r2, [r2, #28]
 800743a:	00d2      	lsls	r2, r2, #3
 800743c:	4920      	ldr	r1, [pc, #128]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007442:	4b1f      	ldr	r3, [pc, #124]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	4a1e      	ldr	r2, [pc, #120]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800744c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007454:	4b1a      	ldr	r3, [pc, #104]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	4a19      	ldr	r2, [pc, #100]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800745a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800745e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007460:	e00f      	b.n	8007482 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d106      	bne.n	8007476 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007468:	4b15      	ldr	r3, [pc, #84]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800746a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746c:	4a14      	ldr	r2, [pc, #80]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800746e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007474:	e005      	b.n	8007482 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007476:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	4a11      	ldr	r2, [pc, #68]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800747c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007480:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007482:	4b0f      	ldr	r3, [pc, #60]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a0e      	ldr	r2, [pc, #56]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800748c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800748e:	f7f9 ffb9 	bl	8001404 <HAL_GetTick>
 8007492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007494:	e008      	b.n	80074a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007496:	f7f9 ffb5 	bl	8001404 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e006      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074a8:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f0      	beq.n	8007496 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	58024400 	.word	0x58024400
 80074c4:	ffff0007 	.word	0xffff0007

080074c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e10f      	b.n	80076fa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a87      	ldr	r2, [pc, #540]	@ (8007704 <HAL_SPI_Init+0x23c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00f      	beq.n	800750a <HAL_SPI_Init+0x42>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a86      	ldr	r2, [pc, #536]	@ (8007708 <HAL_SPI_Init+0x240>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00a      	beq.n	800750a <HAL_SPI_Init+0x42>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a84      	ldr	r2, [pc, #528]	@ (800770c <HAL_SPI_Init+0x244>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d005      	beq.n	800750a <HAL_SPI_Init+0x42>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	2b0f      	cmp	r3, #15
 8007504:	d901      	bls.n	800750a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e0f7      	b.n	80076fa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f900 	bl	8007710 <SPI_GetPacketSize>
 8007510:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a7b      	ldr	r2, [pc, #492]	@ (8007704 <HAL_SPI_Init+0x23c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d00c      	beq.n	8007536 <HAL_SPI_Init+0x6e>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a79      	ldr	r2, [pc, #484]	@ (8007708 <HAL_SPI_Init+0x240>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d007      	beq.n	8007536 <HAL_SPI_Init+0x6e>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a78      	ldr	r2, [pc, #480]	@ (800770c <HAL_SPI_Init+0x244>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d002      	beq.n	8007536 <HAL_SPI_Init+0x6e>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b08      	cmp	r3, #8
 8007534:	d811      	bhi.n	800755a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800753a:	4a72      	ldr	r2, [pc, #456]	@ (8007704 <HAL_SPI_Init+0x23c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d009      	beq.n	8007554 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a70      	ldr	r2, [pc, #448]	@ (8007708 <HAL_SPI_Init+0x240>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <HAL_SPI_Init+0x8c>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a6f      	ldr	r2, [pc, #444]	@ (800770c <HAL_SPI_Init+0x244>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d104      	bne.n	800755e <HAL_SPI_Init+0x96>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b10      	cmp	r3, #16
 8007558:	d901      	bls.n	800755e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e0cd      	b.n	80076fa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7f9 fc60 	bl	8000e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0201 	bic.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800759a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075a4:	d119      	bne.n	80075da <HAL_SPI_Init+0x112>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075ae:	d103      	bne.n	80075b8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d008      	beq.n	80075ca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10c      	bne.n	80075da <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80075c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075c8:	d107      	bne.n	80075da <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00f      	beq.n	8007606 <HAL_SPI_Init+0x13e>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	2b06      	cmp	r3, #6
 80075ec:	d90b      	bls.n	8007606 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	e007      	b.n	8007616 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007614:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69da      	ldr	r2, [r3, #28]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761e:	431a      	orrs	r2, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007628:	ea42 0103 	orr.w	r1, r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	431a      	orrs	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007676:	ea42 0103 	orr.w	r1, r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d113      	bne.n	80076b6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076a0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076b4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 0201 	bic.w	r2, r2, #1
 80076c4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	40013000 	.word	0x40013000
 8007708:	40003800 	.word	0x40003800
 800770c:	40003c00 	.word	0x40003c00

08007710 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800771c:	095b      	lsrs	r3, r3, #5
 800771e:	3301      	adds	r3, #1
 8007720:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	3307      	adds	r3, #7
 800772e:	08db      	lsrs	r3, r3, #3
 8007730:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	fb02 f303 	mul.w	r3, r2, r3
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e049      	b.n	80077ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	d106      	bne.n	8007772 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7f9 fced 	bl	800114c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2202      	movs	r2, #2
 8007776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3304      	adds	r3, #4
 8007782:	4619      	mov	r1, r3
 8007784:	4610      	mov	r0, r2
 8007786:	f000 fb45 	bl	8007e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b01      	cmp	r3, #1
 8007806:	d001      	beq.n	800780c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e04c      	b.n	80078a6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a26      	ldr	r2, [pc, #152]	@ (80078b4 <HAL_TIM_Base_Start+0xc0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d022      	beq.n	8007864 <HAL_TIM_Base_Start+0x70>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007826:	d01d      	beq.n	8007864 <HAL_TIM_Base_Start+0x70>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a22      	ldr	r2, [pc, #136]	@ (80078b8 <HAL_TIM_Base_Start+0xc4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d018      	beq.n	8007864 <HAL_TIM_Base_Start+0x70>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a21      	ldr	r2, [pc, #132]	@ (80078bc <HAL_TIM_Base_Start+0xc8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d013      	beq.n	8007864 <HAL_TIM_Base_Start+0x70>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a1f      	ldr	r2, [pc, #124]	@ (80078c0 <HAL_TIM_Base_Start+0xcc>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00e      	beq.n	8007864 <HAL_TIM_Base_Start+0x70>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1e      	ldr	r2, [pc, #120]	@ (80078c4 <HAL_TIM_Base_Start+0xd0>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d009      	beq.n	8007864 <HAL_TIM_Base_Start+0x70>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1c      	ldr	r2, [pc, #112]	@ (80078c8 <HAL_TIM_Base_Start+0xd4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d004      	beq.n	8007864 <HAL_TIM_Base_Start+0x70>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1b      	ldr	r2, [pc, #108]	@ (80078cc <HAL_TIM_Base_Start+0xd8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d115      	bne.n	8007890 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	4b19      	ldr	r3, [pc, #100]	@ (80078d0 <HAL_TIM_Base_Start+0xdc>)
 800786c:	4013      	ands	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b06      	cmp	r3, #6
 8007874:	d015      	beq.n	80078a2 <HAL_TIM_Base_Start+0xae>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800787c:	d011      	beq.n	80078a2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f042 0201 	orr.w	r2, r2, #1
 800788c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800788e:	e008      	b.n	80078a2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0201 	orr.w	r2, r2, #1
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	e000      	b.n	80078a4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40010000 	.word	0x40010000
 80078b8:	40000400 	.word	0x40000400
 80078bc:	40000800 	.word	0x40000800
 80078c0:	40000c00 	.word	0x40000c00
 80078c4:	40010400 	.word	0x40010400
 80078c8:	40001800 	.word	0x40001800
 80078cc:	40014000 	.word	0x40014000
 80078d0:	00010007 	.word	0x00010007

080078d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d001      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e054      	b.n	8007996 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a26      	ldr	r2, [pc, #152]	@ (80079a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d022      	beq.n	8007954 <HAL_TIM_Base_Start_IT+0x80>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007916:	d01d      	beq.n	8007954 <HAL_TIM_Base_Start_IT+0x80>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a22      	ldr	r2, [pc, #136]	@ (80079a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d018      	beq.n	8007954 <HAL_TIM_Base_Start_IT+0x80>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a21      	ldr	r2, [pc, #132]	@ (80079ac <HAL_TIM_Base_Start_IT+0xd8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d013      	beq.n	8007954 <HAL_TIM_Base_Start_IT+0x80>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a1f      	ldr	r2, [pc, #124]	@ (80079b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d00e      	beq.n	8007954 <HAL_TIM_Base_Start_IT+0x80>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a1e      	ldr	r2, [pc, #120]	@ (80079b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d009      	beq.n	8007954 <HAL_TIM_Base_Start_IT+0x80>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a1c      	ldr	r2, [pc, #112]	@ (80079b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d004      	beq.n	8007954 <HAL_TIM_Base_Start_IT+0x80>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a1b      	ldr	r2, [pc, #108]	@ (80079bc <HAL_TIM_Base_Start_IT+0xe8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d115      	bne.n	8007980 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	4b19      	ldr	r3, [pc, #100]	@ (80079c0 <HAL_TIM_Base_Start_IT+0xec>)
 800795c:	4013      	ands	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2b06      	cmp	r3, #6
 8007964:	d015      	beq.n	8007992 <HAL_TIM_Base_Start_IT+0xbe>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800796c:	d011      	beq.n	8007992 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0201 	orr.w	r2, r2, #1
 800797c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797e:	e008      	b.n	8007992 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	e000      	b.n	8007994 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007992:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	40010000 	.word	0x40010000
 80079a8:	40000400 	.word	0x40000400
 80079ac:	40000800 	.word	0x40000800
 80079b0:	40000c00 	.word	0x40000c00
 80079b4:	40010400 	.word	0x40010400
 80079b8:	40001800 	.word	0x40001800
 80079bc:	40014000 	.word	0x40014000
 80079c0:	00010007 	.word	0x00010007

080079c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d020      	beq.n	8007a28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d01b      	beq.n	8007a28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0202 	mvn.w	r2, #2
 80079f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f9e2 	bl	8007dd8 <HAL_TIM_IC_CaptureCallback>
 8007a14:	e005      	b.n	8007a22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f9d4 	bl	8007dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f9e5 	bl	8007dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d020      	beq.n	8007a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d01b      	beq.n	8007a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f06f 0204 	mvn.w	r2, #4
 8007a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f9bc 	bl	8007dd8 <HAL_TIM_IC_CaptureCallback>
 8007a60:	e005      	b.n	8007a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f9ae 	bl	8007dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f9bf 	bl	8007dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d020      	beq.n	8007ac0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01b      	beq.n	8007ac0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f06f 0208 	mvn.w	r2, #8
 8007a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2204      	movs	r2, #4
 8007a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f003 0303 	and.w	r3, r3, #3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f996 	bl	8007dd8 <HAL_TIM_IC_CaptureCallback>
 8007aac:	e005      	b.n	8007aba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f988 	bl	8007dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f999 	bl	8007dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d020      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f003 0310 	and.w	r3, r3, #16
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01b      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f06f 0210 	mvn.w	r2, #16
 8007adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f970 	bl	8007dd8 <HAL_TIM_IC_CaptureCallback>
 8007af8:	e005      	b.n	8007b06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f962 	bl	8007dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f973 	bl	8007dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00c      	beq.n	8007b30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0201 	mvn.w	r2, #1
 8007b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7f9 f916 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00c      	beq.n	8007b5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d007      	beq.n	8007b5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fb31 	bl	80081c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00c      	beq.n	8007b82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d007      	beq.n	8007b82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fb29 	bl	80081d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00c      	beq.n	8007ba6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d007      	beq.n	8007ba6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f92d 	bl	8007e00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f003 0320 	and.w	r3, r3, #32
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00c      	beq.n	8007bca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d007      	beq.n	8007bca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f06f 0220 	mvn.w	r2, #32
 8007bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 faf1 	bl	80081ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bca:	bf00      	nop
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d101      	bne.n	8007bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e0dc      	b.n	8007daa <HAL_TIM_ConfigClockSource+0x1d6>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8007db4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a64      	ldr	r2, [pc, #400]	@ (8007db8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	f000 80a9 	beq.w	8007d7e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c2c:	4a62      	ldr	r2, [pc, #392]	@ (8007db8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	f200 80ae 	bhi.w	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c34:	4a61      	ldr	r2, [pc, #388]	@ (8007dbc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	f000 80a1 	beq.w	8007d7e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c3c:	4a5f      	ldr	r2, [pc, #380]	@ (8007dbc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	f200 80a6 	bhi.w	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c44:	4a5e      	ldr	r2, [pc, #376]	@ (8007dc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	f000 8099 	beq.w	8007d7e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c4c:	4a5c      	ldr	r2, [pc, #368]	@ (8007dc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	f200 809e 	bhi.w	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c58:	f000 8091 	beq.w	8007d7e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c60:	f200 8096 	bhi.w	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c68:	f000 8089 	beq.w	8007d7e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c70:	f200 808e 	bhi.w	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c78:	d03e      	beq.n	8007cf8 <HAL_TIM_ConfigClockSource+0x124>
 8007c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c7e:	f200 8087 	bhi.w	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c86:	f000 8086 	beq.w	8007d96 <HAL_TIM_ConfigClockSource+0x1c2>
 8007c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c8e:	d87f      	bhi.n	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c90:	2b70      	cmp	r3, #112	@ 0x70
 8007c92:	d01a      	beq.n	8007cca <HAL_TIM_ConfigClockSource+0xf6>
 8007c94:	2b70      	cmp	r3, #112	@ 0x70
 8007c96:	d87b      	bhi.n	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c98:	2b60      	cmp	r3, #96	@ 0x60
 8007c9a:	d050      	beq.n	8007d3e <HAL_TIM_ConfigClockSource+0x16a>
 8007c9c:	2b60      	cmp	r3, #96	@ 0x60
 8007c9e:	d877      	bhi.n	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ca0:	2b50      	cmp	r3, #80	@ 0x50
 8007ca2:	d03c      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x14a>
 8007ca4:	2b50      	cmp	r3, #80	@ 0x50
 8007ca6:	d873      	bhi.n	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ca8:	2b40      	cmp	r3, #64	@ 0x40
 8007caa:	d058      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x18a>
 8007cac:	2b40      	cmp	r3, #64	@ 0x40
 8007cae:	d86f      	bhi.n	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cb0:	2b30      	cmp	r3, #48	@ 0x30
 8007cb2:	d064      	beq.n	8007d7e <HAL_TIM_ConfigClockSource+0x1aa>
 8007cb4:	2b30      	cmp	r3, #48	@ 0x30
 8007cb6:	d86b      	bhi.n	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d060      	beq.n	8007d7e <HAL_TIM_ConfigClockSource+0x1aa>
 8007cbc:	2b20      	cmp	r3, #32
 8007cbe:	d867      	bhi.n	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d05c      	beq.n	8007d7e <HAL_TIM_ConfigClockSource+0x1aa>
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d05a      	beq.n	8007d7e <HAL_TIM_ConfigClockSource+0x1aa>
 8007cc8:	e062      	b.n	8007d90 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cda:	f000 f9b9 	bl	8008050 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007cec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	609a      	str	r2, [r3, #8]
      break;
 8007cf6:	e04f      	b.n	8007d98 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d08:	f000 f9a2 	bl	8008050 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d1a:	609a      	str	r2, [r3, #8]
      break;
 8007d1c:	e03c      	b.n	8007d98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f000 f912 	bl	8007f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2150      	movs	r1, #80	@ 0x50
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 f96c 	bl	8008014 <TIM_ITRx_SetConfig>
      break;
 8007d3c:	e02c      	b.n	8007d98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f000 f931 	bl	8007fb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2160      	movs	r1, #96	@ 0x60
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 f95c 	bl	8008014 <TIM_ITRx_SetConfig>
      break;
 8007d5c:	e01c      	b.n	8007d98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f000 f8f2 	bl	8007f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2140      	movs	r1, #64	@ 0x40
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 f94c 	bl	8008014 <TIM_ITRx_SetConfig>
      break;
 8007d7c:	e00c      	b.n	8007d98 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4619      	mov	r1, r3
 8007d88:	4610      	mov	r0, r2
 8007d8a:	f000 f943 	bl	8008014 <TIM_ITRx_SetConfig>
      break;
 8007d8e:	e003      	b.n	8007d98 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
      break;
 8007d94:	e000      	b.n	8007d98 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007d96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	ffceff88 	.word	0xffceff88
 8007db8:	00100040 	.word	0x00100040
 8007dbc:	00100030 	.word	0x00100030
 8007dc0:	00100020 	.word	0x00100020

08007dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a43      	ldr	r2, [pc, #268]	@ (8007f34 <TIM_Base_SetConfig+0x120>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d013      	beq.n	8007e54 <TIM_Base_SetConfig+0x40>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e32:	d00f      	beq.n	8007e54 <TIM_Base_SetConfig+0x40>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a40      	ldr	r2, [pc, #256]	@ (8007f38 <TIM_Base_SetConfig+0x124>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00b      	beq.n	8007e54 <TIM_Base_SetConfig+0x40>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8007f3c <TIM_Base_SetConfig+0x128>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d007      	beq.n	8007e54 <TIM_Base_SetConfig+0x40>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a3e      	ldr	r2, [pc, #248]	@ (8007f40 <TIM_Base_SetConfig+0x12c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_Base_SetConfig+0x40>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a3d      	ldr	r2, [pc, #244]	@ (8007f44 <TIM_Base_SetConfig+0x130>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d108      	bne.n	8007e66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a32      	ldr	r2, [pc, #200]	@ (8007f34 <TIM_Base_SetConfig+0x120>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d01f      	beq.n	8007eae <TIM_Base_SetConfig+0x9a>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e74:	d01b      	beq.n	8007eae <TIM_Base_SetConfig+0x9a>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a2f      	ldr	r2, [pc, #188]	@ (8007f38 <TIM_Base_SetConfig+0x124>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d017      	beq.n	8007eae <TIM_Base_SetConfig+0x9a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a2e      	ldr	r2, [pc, #184]	@ (8007f3c <TIM_Base_SetConfig+0x128>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d013      	beq.n	8007eae <TIM_Base_SetConfig+0x9a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2d      	ldr	r2, [pc, #180]	@ (8007f40 <TIM_Base_SetConfig+0x12c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00f      	beq.n	8007eae <TIM_Base_SetConfig+0x9a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a2c      	ldr	r2, [pc, #176]	@ (8007f44 <TIM_Base_SetConfig+0x130>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00b      	beq.n	8007eae <TIM_Base_SetConfig+0x9a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a2b      	ldr	r2, [pc, #172]	@ (8007f48 <TIM_Base_SetConfig+0x134>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d007      	beq.n	8007eae <TIM_Base_SetConfig+0x9a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f4c <TIM_Base_SetConfig+0x138>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d003      	beq.n	8007eae <TIM_Base_SetConfig+0x9a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a29      	ldr	r2, [pc, #164]	@ (8007f50 <TIM_Base_SetConfig+0x13c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d108      	bne.n	8007ec0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a14      	ldr	r2, [pc, #80]	@ (8007f34 <TIM_Base_SetConfig+0x120>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00f      	beq.n	8007f06 <TIM_Base_SetConfig+0xf2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a16      	ldr	r2, [pc, #88]	@ (8007f44 <TIM_Base_SetConfig+0x130>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00b      	beq.n	8007f06 <TIM_Base_SetConfig+0xf2>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a15      	ldr	r2, [pc, #84]	@ (8007f48 <TIM_Base_SetConfig+0x134>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d007      	beq.n	8007f06 <TIM_Base_SetConfig+0xf2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a14      	ldr	r2, [pc, #80]	@ (8007f4c <TIM_Base_SetConfig+0x138>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d003      	beq.n	8007f06 <TIM_Base_SetConfig+0xf2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a13      	ldr	r2, [pc, #76]	@ (8007f50 <TIM_Base_SetConfig+0x13c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d103      	bne.n	8007f0e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	691a      	ldr	r2, [r3, #16]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f043 0204 	orr.w	r2, r3, #4
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	601a      	str	r2, [r3, #0]
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	40010000 	.word	0x40010000
 8007f38:	40000400 	.word	0x40000400
 8007f3c:	40000800 	.word	0x40000800
 8007f40:	40000c00 	.word	0x40000c00
 8007f44:	40010400 	.word	0x40010400
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	40014400 	.word	0x40014400
 8007f50:	40014800 	.word	0x40014800

08007f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f023 0201 	bic.w	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f023 030a 	bic.w	r3, r3, #10
 8007f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	621a      	str	r2, [r3, #32]
}
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	f023 0210 	bic.w	r2, r3, #16
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	031b      	lsls	r3, r3, #12
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007fee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
	...

08008014 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4b09      	ldr	r3, [pc, #36]	@ (800804c <TIM_ITRx_SetConfig+0x38>)
 8008028:	4013      	ands	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4313      	orrs	r3, r2
 8008032:	f043 0307 	orr.w	r3, r3, #7
 8008036:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	609a      	str	r2, [r3, #8]
}
 800803e:	bf00      	nop
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	ffcfff8f 	.word	0xffcfff8f

08008050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800806a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	021a      	lsls	r2, r3, #8
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	431a      	orrs	r2, r3
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	4313      	orrs	r3, r2
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	4313      	orrs	r3, r2
 800807c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	609a      	str	r2, [r3, #8]
}
 8008084:	bf00      	nop
 8008086:	371c      	adds	r7, #28
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d101      	bne.n	80080a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080a4:	2302      	movs	r3, #2
 80080a6:	e06d      	b.n	8008184 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a30      	ldr	r2, [pc, #192]	@ (8008190 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d004      	beq.n	80080dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a2f      	ldr	r2, [pc, #188]	@ (8008194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d108      	bne.n	80080ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80080e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a20      	ldr	r2, [pc, #128]	@ (8008190 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d022      	beq.n	8008158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811a:	d01d      	beq.n	8008158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a1d      	ldr	r2, [pc, #116]	@ (8008198 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d018      	beq.n	8008158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a1c      	ldr	r2, [pc, #112]	@ (800819c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d013      	beq.n	8008158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a1a      	ldr	r2, [pc, #104]	@ (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d00e      	beq.n	8008158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a15      	ldr	r2, [pc, #84]	@ (8008194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d009      	beq.n	8008158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a16      	ldr	r2, [pc, #88]	@ (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d004      	beq.n	8008158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a15      	ldr	r2, [pc, #84]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d10c      	bne.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800815e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	4313      	orrs	r3, r2
 8008168:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	40010000 	.word	0x40010000
 8008194:	40010400 	.word	0x40010400
 8008198:	40000400 	.word	0x40000400
 800819c:	40000800 	.word	0x40000800
 80081a0:	40000c00 	.word	0x40000c00
 80081a4:	40001800 	.word	0x40001800
 80081a8:	40014000 	.word	0x40014000

080081ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e042      	b.n	8008280 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7f9 f80b 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2224      	movs	r2, #36	@ 0x24
 8008216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0201 	bic.w	r2, r2, #1
 8008228:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 fa1a 	bl	800966c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fcaf 	bl	8008b9c <UART_SetConfig>
 800823e:	4603      	mov	r3, r0
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e01b      	b.n	8008280 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0201 	orr.w	r2, r2, #1
 8008276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 fa99 	bl	80097b0 <UART_CheckIdleState>
 800827e:	4603      	mov	r3, r0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008288:	b480      	push	{r7}
 800828a:	b091      	sub	sp, #68	@ 0x44
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800829c:	2b20      	cmp	r3, #32
 800829e:	d178      	bne.n	8008392 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <HAL_UART_Transmit_IT+0x24>
 80082a6:	88fb      	ldrh	r3, [r7, #6]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e071      	b.n	8008394 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	88fa      	ldrh	r2, [r7, #6]
 80082ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	88fa      	ldrh	r2, [r7, #6]
 80082c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2221      	movs	r2, #33	@ 0x21
 80082d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082e4:	d12a      	bne.n	800833c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ee:	d107      	bne.n	8008300 <HAL_UART_Transmit_IT+0x78>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d103      	bne.n	8008300 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4a29      	ldr	r2, [pc, #164]	@ (80083a0 <HAL_UART_Transmit_IT+0x118>)
 80082fc:	679a      	str	r2, [r3, #120]	@ 0x78
 80082fe:	e002      	b.n	8008306 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4a28      	ldr	r2, [pc, #160]	@ (80083a4 <HAL_UART_Transmit_IT+0x11c>)
 8008304:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3308      	adds	r3, #8
 800830c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008318:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800831c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3308      	adds	r3, #8
 8008324:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008326:	637a      	str	r2, [r7, #52]	@ 0x34
 8008328:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800832c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e5      	bne.n	8008306 <HAL_UART_Transmit_IT+0x7e>
 800833a:	e028      	b.n	800838e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008344:	d107      	bne.n	8008356 <HAL_UART_Transmit_IT+0xce>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d103      	bne.n	8008356 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	4a15      	ldr	r2, [pc, #84]	@ (80083a8 <HAL_UART_Transmit_IT+0x120>)
 8008352:	679a      	str	r2, [r3, #120]	@ 0x78
 8008354:	e002      	b.n	800835c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4a14      	ldr	r2, [pc, #80]	@ (80083ac <HAL_UART_Transmit_IT+0x124>)
 800835a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	613b      	str	r3, [r7, #16]
   return(result);
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800837a:	623b      	str	r3, [r7, #32]
 800837c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	69f9      	ldr	r1, [r7, #28]
 8008380:	6a3a      	ldr	r2, [r7, #32]
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	61bb      	str	r3, [r7, #24]
   return(result);
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e6      	bne.n	800835c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	e000      	b.n	8008394 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008392:	2302      	movs	r3, #2
  }
}
 8008394:	4618      	mov	r0, r3
 8008396:	3744      	adds	r7, #68	@ 0x44
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	08009d2b 	.word	0x08009d2b
 80083a4:	08009c4b 	.word	0x08009c4b
 80083a8:	08009b89 	.word	0x08009b89
 80083ac:	08009ad1 	.word	0x08009ad1

080083b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b0ba      	sub	sp, #232	@ 0xe8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80083da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80083de:	4013      	ands	r3, r2
 80083e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80083e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d11b      	bne.n	8008424 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d015      	beq.n	8008424 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083fc:	f003 0320 	and.w	r3, r3, #32
 8008400:	2b00      	cmp	r3, #0
 8008402:	d105      	bne.n	8008410 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d009      	beq.n	8008424 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 8393 	beq.w	8008b40 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	4798      	blx	r3
      }
      return;
 8008422:	e38d      	b.n	8008b40 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008424:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 8123 	beq.w	8008674 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800842e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008432:	4b8d      	ldr	r3, [pc, #564]	@ (8008668 <HAL_UART_IRQHandler+0x2b8>)
 8008434:	4013      	ands	r3, r2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d106      	bne.n	8008448 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800843a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800843e:	4b8b      	ldr	r3, [pc, #556]	@ (800866c <HAL_UART_IRQHandler+0x2bc>)
 8008440:	4013      	ands	r3, r2
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 8116 	beq.w	8008674 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d011      	beq.n	8008478 <HAL_UART_IRQHandler+0xc8>
 8008454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2201      	movs	r2, #1
 8008466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800846e:	f043 0201 	orr.w	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b00      	cmp	r3, #0
 8008482:	d011      	beq.n	80084a8 <HAL_UART_IRQHandler+0xf8>
 8008484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00b      	beq.n	80084a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2202      	movs	r2, #2
 8008496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800849e:	f043 0204 	orr.w	r2, r3, #4
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d011      	beq.n	80084d8 <HAL_UART_IRQHandler+0x128>
 80084b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00b      	beq.n	80084d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2204      	movs	r2, #4
 80084c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ce:	f043 0202 	orr.w	r2, r3, #2
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084dc:	f003 0308 	and.w	r3, r3, #8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d017      	beq.n	8008514 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084e8:	f003 0320 	and.w	r3, r3, #32
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d105      	bne.n	80084fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80084f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80084f4:	4b5c      	ldr	r3, [pc, #368]	@ (8008668 <HAL_UART_IRQHandler+0x2b8>)
 80084f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2208      	movs	r2, #8
 8008502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800850a:	f043 0208 	orr.w	r2, r3, #8
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800851c:	2b00      	cmp	r3, #0
 800851e:	d012      	beq.n	8008546 <HAL_UART_IRQHandler+0x196>
 8008520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008524:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00c      	beq.n	8008546 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008534:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800853c:	f043 0220 	orr.w	r2, r3, #32
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 82f9 	beq.w	8008b44 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008556:	f003 0320 	and.w	r3, r3, #32
 800855a:	2b00      	cmp	r3, #0
 800855c:	d013      	beq.n	8008586 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800855e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	2b00      	cmp	r3, #0
 8008568:	d105      	bne.n	8008576 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800856a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800856e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800858c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800859a:	2b40      	cmp	r3, #64	@ 0x40
 800859c:	d005      	beq.n	80085aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800859e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d054      	beq.n	8008654 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f001 fa18 	bl	80099e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ba:	2b40      	cmp	r3, #64	@ 0x40
 80085bc:	d146      	bne.n	800864c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3308      	adds	r3, #8
 80085c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80085d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3308      	adds	r3, #8
 80085e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80085ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80085ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80085f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008602:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1d9      	bne.n	80085be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008610:	2b00      	cmp	r3, #0
 8008612:	d017      	beq.n	8008644 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800861a:	4a15      	ldr	r2, [pc, #84]	@ (8008670 <HAL_UART_IRQHandler+0x2c0>)
 800861c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008624:	4618      	mov	r0, r3
 8008626:	f7fa fd93 	bl	8003150 <HAL_DMA_Abort_IT>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d019      	beq.n	8008664 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800863e:	4610      	mov	r0, r2
 8008640:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008642:	e00f      	b.n	8008664 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fa93 	bl	8008b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800864a:	e00b      	b.n	8008664 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fa8f 	bl	8008b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008652:	e007      	b.n	8008664 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fa8b 	bl	8008b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008662:	e26f      	b.n	8008b44 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008664:	bf00      	nop
    return;
 8008666:	e26d      	b.n	8008b44 <HAL_UART_IRQHandler+0x794>
 8008668:	10000001 	.word	0x10000001
 800866c:	04000120 	.word	0x04000120
 8008670:	08009aad 	.word	0x08009aad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008678:	2b01      	cmp	r3, #1
 800867a:	f040 8203 	bne.w	8008a84 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800867e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 81fc 	beq.w	8008a84 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800868c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008690:	f003 0310 	and.w	r3, r3, #16
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 81f5 	beq.w	8008a84 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2210      	movs	r2, #16
 80086a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ac:	2b40      	cmp	r3, #64	@ 0x40
 80086ae:	f040 816d 	bne.w	800898c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4aa4      	ldr	r2, [pc, #656]	@ (800894c <HAL_UART_IRQHandler+0x59c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d068      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4aa1      	ldr	r2, [pc, #644]	@ (8008950 <HAL_UART_IRQHandler+0x5a0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d061      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a9f      	ldr	r2, [pc, #636]	@ (8008954 <HAL_UART_IRQHandler+0x5a4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d05a      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a9c      	ldr	r2, [pc, #624]	@ (8008958 <HAL_UART_IRQHandler+0x5a8>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d053      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a9a      	ldr	r2, [pc, #616]	@ (800895c <HAL_UART_IRQHandler+0x5ac>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d04c      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a97      	ldr	r2, [pc, #604]	@ (8008960 <HAL_UART_IRQHandler+0x5b0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d045      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a95      	ldr	r2, [pc, #596]	@ (8008964 <HAL_UART_IRQHandler+0x5b4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d03e      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a92      	ldr	r2, [pc, #584]	@ (8008968 <HAL_UART_IRQHandler+0x5b8>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d037      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a90      	ldr	r2, [pc, #576]	@ (800896c <HAL_UART_IRQHandler+0x5bc>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d030      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a8d      	ldr	r2, [pc, #564]	@ (8008970 <HAL_UART_IRQHandler+0x5c0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d029      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a8b      	ldr	r2, [pc, #556]	@ (8008974 <HAL_UART_IRQHandler+0x5c4>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d022      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a88      	ldr	r2, [pc, #544]	@ (8008978 <HAL_UART_IRQHandler+0x5c8>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d01b      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a86      	ldr	r2, [pc, #536]	@ (800897c <HAL_UART_IRQHandler+0x5cc>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d014      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a83      	ldr	r2, [pc, #524]	@ (8008980 <HAL_UART_IRQHandler+0x5d0>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00d      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a81      	ldr	r2, [pc, #516]	@ (8008984 <HAL_UART_IRQHandler+0x5d4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d006      	beq.n	8008792 <HAL_UART_IRQHandler+0x3e2>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a7e      	ldr	r2, [pc, #504]	@ (8008988 <HAL_UART_IRQHandler+0x5d8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d106      	bne.n	80087a0 <HAL_UART_IRQHandler+0x3f0>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	b29b      	uxth	r3, r3
 800879e:	e005      	b.n	80087ac <HAL_UART_IRQHandler+0x3fc>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 80ad 	beq.w	8008914 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087c4:	429a      	cmp	r2, r3
 80087c6:	f080 80a5 	bcs.w	8008914 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087e0:	f000 8087 	beq.w	80088f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80087f0:	e853 3f00 	ldrex	r3, [r3]
 80087f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80087f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008800:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	461a      	mov	r2, r3
 800880a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800880e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008812:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800881a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008826:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1da      	bne.n	80087e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3308      	adds	r3, #8
 8008834:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800883e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008840:	f023 0301 	bic.w	r3, r3, #1
 8008844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3308      	adds	r3, #8
 800884e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008852:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008856:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800885a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e1      	bne.n	800882e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3308      	adds	r3, #8
 8008870:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800887a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800887c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3308      	adds	r3, #8
 800888a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800888e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008890:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008892:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008894:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008896:	e841 2300 	strex	r3, r2, [r1]
 800889a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800889c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1e3      	bne.n	800886a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088b8:	e853 3f00 	ldrex	r3, [r3]
 80088bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088c0:	f023 0310 	bic.w	r3, r3, #16
 80088c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088da:	e841 2300 	strex	r3, r2, [r1]
 80088de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1e4      	bne.n	80088b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fa f911 	bl	8002b14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2202      	movs	r2, #2
 80088f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008904:	b29b      	uxth	r3, r3
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	b29b      	uxth	r3, r3
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f939 	bl	8008b84 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008912:	e119      	b.n	8008b48 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800891a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800891e:	429a      	cmp	r2, r3
 8008920:	f040 8112 	bne.w	8008b48 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008930:	f040 810a 	bne.w	8008b48 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2202      	movs	r2, #2
 8008938:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f91e 	bl	8008b84 <HAL_UARTEx_RxEventCallback>
      return;
 8008948:	e0fe      	b.n	8008b48 <HAL_UART_IRQHandler+0x798>
 800894a:	bf00      	nop
 800894c:	40020010 	.word	0x40020010
 8008950:	40020028 	.word	0x40020028
 8008954:	40020040 	.word	0x40020040
 8008958:	40020058 	.word	0x40020058
 800895c:	40020070 	.word	0x40020070
 8008960:	40020088 	.word	0x40020088
 8008964:	400200a0 	.word	0x400200a0
 8008968:	400200b8 	.word	0x400200b8
 800896c:	40020410 	.word	0x40020410
 8008970:	40020428 	.word	0x40020428
 8008974:	40020440 	.word	0x40020440
 8008978:	40020458 	.word	0x40020458
 800897c:	40020470 	.word	0x40020470
 8008980:	40020488 	.word	0x40020488
 8008984:	400204a0 	.word	0x400204a0
 8008988:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008998:	b29b      	uxth	r3, r3
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 80cf 	beq.w	8008b4c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80089ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 80ca 	beq.w	8008b4c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c0:	e853 3f00 	ldrex	r3, [r3]
 80089c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089da:	647b      	str	r3, [r7, #68]	@ 0x44
 80089dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e4      	bne.n	80089b8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3308      	adds	r3, #8
 80089f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	623b      	str	r3, [r7, #32]
   return(result);
 80089fe:	6a3a      	ldr	r2, [r7, #32]
 8008a00:	4b55      	ldr	r3, [pc, #340]	@ (8008b58 <HAL_UART_IRQHandler+0x7a8>)
 8008a02:	4013      	ands	r3, r2
 8008a04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a12:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e3      	bne.n	80089ee <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0310 	bic.w	r3, r3, #16
 8008a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a5c:	61fb      	str	r3, [r7, #28]
 8008a5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a60:	69b9      	ldr	r1, [r7, #24]
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	e841 2300 	strex	r3, r2, [r1]
 8008a68:	617b      	str	r3, [r7, #20]
   return(result);
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1e4      	bne.n	8008a3a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f881 	bl	8008b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a82:	e063      	b.n	8008b4c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00e      	beq.n	8008aae <HAL_UART_IRQHandler+0x6fe>
 8008a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d008      	beq.n	8008aae <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008aa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 f9df 	bl	8009e6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008aac:	e051      	b.n	8008b52 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d014      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d105      	bne.n	8008ad2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d008      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d03a      	beq.n	8008b50 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
    }
    return;
 8008ae2:	e035      	b.n	8008b50 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d009      	beq.n	8008b04 <HAL_UART_IRQHandler+0x754>
 8008af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 f989 	bl	8009e14 <UART_EndTransmit_IT>
    return;
 8008b02:	e026      	b.n	8008b52 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d009      	beq.n	8008b24 <HAL_UART_IRQHandler+0x774>
 8008b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 f9b8 	bl	8009e92 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b22:	e016      	b.n	8008b52 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d010      	beq.n	8008b52 <HAL_UART_IRQHandler+0x7a2>
 8008b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	da0c      	bge.n	8008b52 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 f9a0 	bl	8009e7e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b3e:	e008      	b.n	8008b52 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008b40:	bf00      	nop
 8008b42:	e006      	b.n	8008b52 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008b44:	bf00      	nop
 8008b46:	e004      	b.n	8008b52 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008b48:	bf00      	nop
 8008b4a:	e002      	b.n	8008b52 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008b4c:	bf00      	nop
 8008b4e:	e000      	b.n	8008b52 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008b50:	bf00      	nop
  }
}
 8008b52:	37e8      	adds	r7, #232	@ 0xe8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	effffffe 	.word	0xeffffffe

08008b5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ba0:	b092      	sub	sp, #72	@ 0x48
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	689a      	ldr	r2, [r3, #8]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	431a      	orrs	r2, r3
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	4bbe      	ldr	r3, [pc, #760]	@ (8008ec4 <UART_SetConfig+0x328>)
 8008bcc:	4013      	ands	r3, r2
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	6812      	ldr	r2, [r2, #0]
 8008bd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4ab3      	ldr	r2, [pc, #716]	@ (8008ec8 <UART_SetConfig+0x32c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d004      	beq.n	8008c08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c04:	4313      	orrs	r3, r2
 8008c06:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	4baf      	ldr	r3, [pc, #700]	@ (8008ecc <UART_SetConfig+0x330>)
 8008c10:	4013      	ands	r3, r2
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	6812      	ldr	r2, [r2, #0]
 8008c16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c22:	f023 010f 	bic.w	r1, r3, #15
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4aa6      	ldr	r2, [pc, #664]	@ (8008ed0 <UART_SetConfig+0x334>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d177      	bne.n	8008d2c <UART_SetConfig+0x190>
 8008c3c:	4ba5      	ldr	r3, [pc, #660]	@ (8008ed4 <UART_SetConfig+0x338>)
 8008c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c44:	2b28      	cmp	r3, #40	@ 0x28
 8008c46:	d86d      	bhi.n	8008d24 <UART_SetConfig+0x188>
 8008c48:	a201      	add	r2, pc, #4	@ (adr r2, 8008c50 <UART_SetConfig+0xb4>)
 8008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4e:	bf00      	nop
 8008c50:	08008cf5 	.word	0x08008cf5
 8008c54:	08008d25 	.word	0x08008d25
 8008c58:	08008d25 	.word	0x08008d25
 8008c5c:	08008d25 	.word	0x08008d25
 8008c60:	08008d25 	.word	0x08008d25
 8008c64:	08008d25 	.word	0x08008d25
 8008c68:	08008d25 	.word	0x08008d25
 8008c6c:	08008d25 	.word	0x08008d25
 8008c70:	08008cfd 	.word	0x08008cfd
 8008c74:	08008d25 	.word	0x08008d25
 8008c78:	08008d25 	.word	0x08008d25
 8008c7c:	08008d25 	.word	0x08008d25
 8008c80:	08008d25 	.word	0x08008d25
 8008c84:	08008d25 	.word	0x08008d25
 8008c88:	08008d25 	.word	0x08008d25
 8008c8c:	08008d25 	.word	0x08008d25
 8008c90:	08008d05 	.word	0x08008d05
 8008c94:	08008d25 	.word	0x08008d25
 8008c98:	08008d25 	.word	0x08008d25
 8008c9c:	08008d25 	.word	0x08008d25
 8008ca0:	08008d25 	.word	0x08008d25
 8008ca4:	08008d25 	.word	0x08008d25
 8008ca8:	08008d25 	.word	0x08008d25
 8008cac:	08008d25 	.word	0x08008d25
 8008cb0:	08008d0d 	.word	0x08008d0d
 8008cb4:	08008d25 	.word	0x08008d25
 8008cb8:	08008d25 	.word	0x08008d25
 8008cbc:	08008d25 	.word	0x08008d25
 8008cc0:	08008d25 	.word	0x08008d25
 8008cc4:	08008d25 	.word	0x08008d25
 8008cc8:	08008d25 	.word	0x08008d25
 8008ccc:	08008d25 	.word	0x08008d25
 8008cd0:	08008d15 	.word	0x08008d15
 8008cd4:	08008d25 	.word	0x08008d25
 8008cd8:	08008d25 	.word	0x08008d25
 8008cdc:	08008d25 	.word	0x08008d25
 8008ce0:	08008d25 	.word	0x08008d25
 8008ce4:	08008d25 	.word	0x08008d25
 8008ce8:	08008d25 	.word	0x08008d25
 8008cec:	08008d25 	.word	0x08008d25
 8008cf0:	08008d1d 	.word	0x08008d1d
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e222      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e21e      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d04:	2308      	movs	r3, #8
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e21a      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d0c:	2310      	movs	r3, #16
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e216      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d14:	2320      	movs	r3, #32
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e212      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d1c:	2340      	movs	r3, #64	@ 0x40
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e20e      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d24:	2380      	movs	r3, #128	@ 0x80
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e20a      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a69      	ldr	r2, [pc, #420]	@ (8008ed8 <UART_SetConfig+0x33c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d130      	bne.n	8008d98 <UART_SetConfig+0x1fc>
 8008d36:	4b67      	ldr	r3, [pc, #412]	@ (8008ed4 <UART_SetConfig+0x338>)
 8008d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	2b05      	cmp	r3, #5
 8008d40:	d826      	bhi.n	8008d90 <UART_SetConfig+0x1f4>
 8008d42:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <UART_SetConfig+0x1ac>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008d61 	.word	0x08008d61
 8008d4c:	08008d69 	.word	0x08008d69
 8008d50:	08008d71 	.word	0x08008d71
 8008d54:	08008d79 	.word	0x08008d79
 8008d58:	08008d81 	.word	0x08008d81
 8008d5c:	08008d89 	.word	0x08008d89
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d66:	e1ec      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d68:	2304      	movs	r3, #4
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6e:	e1e8      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d70:	2308      	movs	r3, #8
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d76:	e1e4      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d78:	2310      	movs	r3, #16
 8008d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7e:	e1e0      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d80:	2320      	movs	r3, #32
 8008d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d86:	e1dc      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d88:	2340      	movs	r3, #64	@ 0x40
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8e:	e1d8      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d90:	2380      	movs	r3, #128	@ 0x80
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d96:	e1d4      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8008edc <UART_SetConfig+0x340>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d130      	bne.n	8008e04 <UART_SetConfig+0x268>
 8008da2:	4b4c      	ldr	r3, [pc, #304]	@ (8008ed4 <UART_SetConfig+0x338>)
 8008da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	2b05      	cmp	r3, #5
 8008dac:	d826      	bhi.n	8008dfc <UART_SetConfig+0x260>
 8008dae:	a201      	add	r2, pc, #4	@ (adr r2, 8008db4 <UART_SetConfig+0x218>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008dcd 	.word	0x08008dcd
 8008db8:	08008dd5 	.word	0x08008dd5
 8008dbc:	08008ddd 	.word	0x08008ddd
 8008dc0:	08008de5 	.word	0x08008de5
 8008dc4:	08008ded 	.word	0x08008ded
 8008dc8:	08008df5 	.word	0x08008df5
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd2:	e1b6      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008dd4:	2304      	movs	r3, #4
 8008dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dda:	e1b2      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008ddc:	2308      	movs	r3, #8
 8008dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de2:	e1ae      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008de4:	2310      	movs	r3, #16
 8008de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dea:	e1aa      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008dec:	2320      	movs	r3, #32
 8008dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df2:	e1a6      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008df4:	2340      	movs	r3, #64	@ 0x40
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfa:	e1a2      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008dfc:	2380      	movs	r3, #128	@ 0x80
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e19e      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a35      	ldr	r2, [pc, #212]	@ (8008ee0 <UART_SetConfig+0x344>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d130      	bne.n	8008e70 <UART_SetConfig+0x2d4>
 8008e0e:	4b31      	ldr	r3, [pc, #196]	@ (8008ed4 <UART_SetConfig+0x338>)
 8008e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e12:	f003 0307 	and.w	r3, r3, #7
 8008e16:	2b05      	cmp	r3, #5
 8008e18:	d826      	bhi.n	8008e68 <UART_SetConfig+0x2cc>
 8008e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e20 <UART_SetConfig+0x284>)
 8008e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e20:	08008e39 	.word	0x08008e39
 8008e24:	08008e41 	.word	0x08008e41
 8008e28:	08008e49 	.word	0x08008e49
 8008e2c:	08008e51 	.word	0x08008e51
 8008e30:	08008e59 	.word	0x08008e59
 8008e34:	08008e61 	.word	0x08008e61
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3e:	e180      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008e40:	2304      	movs	r3, #4
 8008e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e46:	e17c      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008e48:	2308      	movs	r3, #8
 8008e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4e:	e178      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008e50:	2310      	movs	r3, #16
 8008e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e56:	e174      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008e58:	2320      	movs	r3, #32
 8008e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5e:	e170      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008e60:	2340      	movs	r3, #64	@ 0x40
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e66:	e16c      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008e68:	2380      	movs	r3, #128	@ 0x80
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e168      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a1b      	ldr	r2, [pc, #108]	@ (8008ee4 <UART_SetConfig+0x348>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d142      	bne.n	8008f00 <UART_SetConfig+0x364>
 8008e7a:	4b16      	ldr	r3, [pc, #88]	@ (8008ed4 <UART_SetConfig+0x338>)
 8008e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	2b05      	cmp	r3, #5
 8008e84:	d838      	bhi.n	8008ef8 <UART_SetConfig+0x35c>
 8008e86:	a201      	add	r2, pc, #4	@ (adr r2, 8008e8c <UART_SetConfig+0x2f0>)
 8008e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8c:	08008ea5 	.word	0x08008ea5
 8008e90:	08008ead 	.word	0x08008ead
 8008e94:	08008eb5 	.word	0x08008eb5
 8008e98:	08008ebd 	.word	0x08008ebd
 8008e9c:	08008ee9 	.word	0x08008ee9
 8008ea0:	08008ef1 	.word	0x08008ef1
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eaa:	e14a      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008eac:	2304      	movs	r3, #4
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb2:	e146      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008eb4:	2308      	movs	r3, #8
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eba:	e142      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008ebc:	2310      	movs	r3, #16
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec2:	e13e      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008ec4:	cfff69f3 	.word	0xcfff69f3
 8008ec8:	58000c00 	.word	0x58000c00
 8008ecc:	11fff4ff 	.word	0x11fff4ff
 8008ed0:	40011000 	.word	0x40011000
 8008ed4:	58024400 	.word	0x58024400
 8008ed8:	40004400 	.word	0x40004400
 8008edc:	40004800 	.word	0x40004800
 8008ee0:	40004c00 	.word	0x40004c00
 8008ee4:	40005000 	.word	0x40005000
 8008ee8:	2320      	movs	r3, #32
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eee:	e128      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008ef0:	2340      	movs	r3, #64	@ 0x40
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef6:	e124      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008ef8:	2380      	movs	r3, #128	@ 0x80
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e120      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4acb      	ldr	r2, [pc, #812]	@ (8009234 <UART_SetConfig+0x698>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d176      	bne.n	8008ff8 <UART_SetConfig+0x45c>
 8008f0a:	4bcb      	ldr	r3, [pc, #812]	@ (8009238 <UART_SetConfig+0x69c>)
 8008f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f12:	2b28      	cmp	r3, #40	@ 0x28
 8008f14:	d86c      	bhi.n	8008ff0 <UART_SetConfig+0x454>
 8008f16:	a201      	add	r2, pc, #4	@ (adr r2, 8008f1c <UART_SetConfig+0x380>)
 8008f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1c:	08008fc1 	.word	0x08008fc1
 8008f20:	08008ff1 	.word	0x08008ff1
 8008f24:	08008ff1 	.word	0x08008ff1
 8008f28:	08008ff1 	.word	0x08008ff1
 8008f2c:	08008ff1 	.word	0x08008ff1
 8008f30:	08008ff1 	.word	0x08008ff1
 8008f34:	08008ff1 	.word	0x08008ff1
 8008f38:	08008ff1 	.word	0x08008ff1
 8008f3c:	08008fc9 	.word	0x08008fc9
 8008f40:	08008ff1 	.word	0x08008ff1
 8008f44:	08008ff1 	.word	0x08008ff1
 8008f48:	08008ff1 	.word	0x08008ff1
 8008f4c:	08008ff1 	.word	0x08008ff1
 8008f50:	08008ff1 	.word	0x08008ff1
 8008f54:	08008ff1 	.word	0x08008ff1
 8008f58:	08008ff1 	.word	0x08008ff1
 8008f5c:	08008fd1 	.word	0x08008fd1
 8008f60:	08008ff1 	.word	0x08008ff1
 8008f64:	08008ff1 	.word	0x08008ff1
 8008f68:	08008ff1 	.word	0x08008ff1
 8008f6c:	08008ff1 	.word	0x08008ff1
 8008f70:	08008ff1 	.word	0x08008ff1
 8008f74:	08008ff1 	.word	0x08008ff1
 8008f78:	08008ff1 	.word	0x08008ff1
 8008f7c:	08008fd9 	.word	0x08008fd9
 8008f80:	08008ff1 	.word	0x08008ff1
 8008f84:	08008ff1 	.word	0x08008ff1
 8008f88:	08008ff1 	.word	0x08008ff1
 8008f8c:	08008ff1 	.word	0x08008ff1
 8008f90:	08008ff1 	.word	0x08008ff1
 8008f94:	08008ff1 	.word	0x08008ff1
 8008f98:	08008ff1 	.word	0x08008ff1
 8008f9c:	08008fe1 	.word	0x08008fe1
 8008fa0:	08008ff1 	.word	0x08008ff1
 8008fa4:	08008ff1 	.word	0x08008ff1
 8008fa8:	08008ff1 	.word	0x08008ff1
 8008fac:	08008ff1 	.word	0x08008ff1
 8008fb0:	08008ff1 	.word	0x08008ff1
 8008fb4:	08008ff1 	.word	0x08008ff1
 8008fb8:	08008ff1 	.word	0x08008ff1
 8008fbc:	08008fe9 	.word	0x08008fe9
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc6:	e0bc      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008fc8:	2304      	movs	r3, #4
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fce:	e0b8      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008fd0:	2308      	movs	r3, #8
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd6:	e0b4      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008fd8:	2310      	movs	r3, #16
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fde:	e0b0      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008fe0:	2320      	movs	r3, #32
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe6:	e0ac      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008fe8:	2340      	movs	r3, #64	@ 0x40
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fee:	e0a8      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008ff0:	2380      	movs	r3, #128	@ 0x80
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff6:	e0a4      	b.n	8009142 <UART_SetConfig+0x5a6>
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a8f      	ldr	r2, [pc, #572]	@ (800923c <UART_SetConfig+0x6a0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d130      	bne.n	8009064 <UART_SetConfig+0x4c8>
 8009002:	4b8d      	ldr	r3, [pc, #564]	@ (8009238 <UART_SetConfig+0x69c>)
 8009004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009006:	f003 0307 	and.w	r3, r3, #7
 800900a:	2b05      	cmp	r3, #5
 800900c:	d826      	bhi.n	800905c <UART_SetConfig+0x4c0>
 800900e:	a201      	add	r2, pc, #4	@ (adr r2, 8009014 <UART_SetConfig+0x478>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	0800902d 	.word	0x0800902d
 8009018:	08009035 	.word	0x08009035
 800901c:	0800903d 	.word	0x0800903d
 8009020:	08009045 	.word	0x08009045
 8009024:	0800904d 	.word	0x0800904d
 8009028:	08009055 	.word	0x08009055
 800902c:	2300      	movs	r3, #0
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009032:	e086      	b.n	8009142 <UART_SetConfig+0x5a6>
 8009034:	2304      	movs	r3, #4
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903a:	e082      	b.n	8009142 <UART_SetConfig+0x5a6>
 800903c:	2308      	movs	r3, #8
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009042:	e07e      	b.n	8009142 <UART_SetConfig+0x5a6>
 8009044:	2310      	movs	r3, #16
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904a:	e07a      	b.n	8009142 <UART_SetConfig+0x5a6>
 800904c:	2320      	movs	r3, #32
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009052:	e076      	b.n	8009142 <UART_SetConfig+0x5a6>
 8009054:	2340      	movs	r3, #64	@ 0x40
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905a:	e072      	b.n	8009142 <UART_SetConfig+0x5a6>
 800905c:	2380      	movs	r3, #128	@ 0x80
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e06e      	b.n	8009142 <UART_SetConfig+0x5a6>
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a75      	ldr	r2, [pc, #468]	@ (8009240 <UART_SetConfig+0x6a4>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d130      	bne.n	80090d0 <UART_SetConfig+0x534>
 800906e:	4b72      	ldr	r3, [pc, #456]	@ (8009238 <UART_SetConfig+0x69c>)
 8009070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009072:	f003 0307 	and.w	r3, r3, #7
 8009076:	2b05      	cmp	r3, #5
 8009078:	d826      	bhi.n	80090c8 <UART_SetConfig+0x52c>
 800907a:	a201      	add	r2, pc, #4	@ (adr r2, 8009080 <UART_SetConfig+0x4e4>)
 800907c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009080:	08009099 	.word	0x08009099
 8009084:	080090a1 	.word	0x080090a1
 8009088:	080090a9 	.word	0x080090a9
 800908c:	080090b1 	.word	0x080090b1
 8009090:	080090b9 	.word	0x080090b9
 8009094:	080090c1 	.word	0x080090c1
 8009098:	2300      	movs	r3, #0
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909e:	e050      	b.n	8009142 <UART_SetConfig+0x5a6>
 80090a0:	2304      	movs	r3, #4
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a6:	e04c      	b.n	8009142 <UART_SetConfig+0x5a6>
 80090a8:	2308      	movs	r3, #8
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ae:	e048      	b.n	8009142 <UART_SetConfig+0x5a6>
 80090b0:	2310      	movs	r3, #16
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b6:	e044      	b.n	8009142 <UART_SetConfig+0x5a6>
 80090b8:	2320      	movs	r3, #32
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090be:	e040      	b.n	8009142 <UART_SetConfig+0x5a6>
 80090c0:	2340      	movs	r3, #64	@ 0x40
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c6:	e03c      	b.n	8009142 <UART_SetConfig+0x5a6>
 80090c8:	2380      	movs	r3, #128	@ 0x80
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e038      	b.n	8009142 <UART_SetConfig+0x5a6>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a5b      	ldr	r2, [pc, #364]	@ (8009244 <UART_SetConfig+0x6a8>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d130      	bne.n	800913c <UART_SetConfig+0x5a0>
 80090da:	4b57      	ldr	r3, [pc, #348]	@ (8009238 <UART_SetConfig+0x69c>)
 80090dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d826      	bhi.n	8009134 <UART_SetConfig+0x598>
 80090e6:	a201      	add	r2, pc, #4	@ (adr r2, 80090ec <UART_SetConfig+0x550>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	08009105 	.word	0x08009105
 80090f0:	0800910d 	.word	0x0800910d
 80090f4:	08009115 	.word	0x08009115
 80090f8:	0800911d 	.word	0x0800911d
 80090fc:	08009125 	.word	0x08009125
 8009100:	0800912d 	.word	0x0800912d
 8009104:	2302      	movs	r3, #2
 8009106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910a:	e01a      	b.n	8009142 <UART_SetConfig+0x5a6>
 800910c:	2304      	movs	r3, #4
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009112:	e016      	b.n	8009142 <UART_SetConfig+0x5a6>
 8009114:	2308      	movs	r3, #8
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911a:	e012      	b.n	8009142 <UART_SetConfig+0x5a6>
 800911c:	2310      	movs	r3, #16
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009122:	e00e      	b.n	8009142 <UART_SetConfig+0x5a6>
 8009124:	2320      	movs	r3, #32
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912a:	e00a      	b.n	8009142 <UART_SetConfig+0x5a6>
 800912c:	2340      	movs	r3, #64	@ 0x40
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e006      	b.n	8009142 <UART_SetConfig+0x5a6>
 8009134:	2380      	movs	r3, #128	@ 0x80
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e002      	b.n	8009142 <UART_SetConfig+0x5a6>
 800913c:	2380      	movs	r3, #128	@ 0x80
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a3f      	ldr	r2, [pc, #252]	@ (8009244 <UART_SetConfig+0x6a8>)
 8009148:	4293      	cmp	r3, r2
 800914a:	f040 80f8 	bne.w	800933e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800914e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009152:	2b20      	cmp	r3, #32
 8009154:	dc46      	bgt.n	80091e4 <UART_SetConfig+0x648>
 8009156:	2b02      	cmp	r3, #2
 8009158:	f2c0 8082 	blt.w	8009260 <UART_SetConfig+0x6c4>
 800915c:	3b02      	subs	r3, #2
 800915e:	2b1e      	cmp	r3, #30
 8009160:	d87e      	bhi.n	8009260 <UART_SetConfig+0x6c4>
 8009162:	a201      	add	r2, pc, #4	@ (adr r2, 8009168 <UART_SetConfig+0x5cc>)
 8009164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009168:	080091eb 	.word	0x080091eb
 800916c:	08009261 	.word	0x08009261
 8009170:	080091f3 	.word	0x080091f3
 8009174:	08009261 	.word	0x08009261
 8009178:	08009261 	.word	0x08009261
 800917c:	08009261 	.word	0x08009261
 8009180:	08009203 	.word	0x08009203
 8009184:	08009261 	.word	0x08009261
 8009188:	08009261 	.word	0x08009261
 800918c:	08009261 	.word	0x08009261
 8009190:	08009261 	.word	0x08009261
 8009194:	08009261 	.word	0x08009261
 8009198:	08009261 	.word	0x08009261
 800919c:	08009261 	.word	0x08009261
 80091a0:	08009213 	.word	0x08009213
 80091a4:	08009261 	.word	0x08009261
 80091a8:	08009261 	.word	0x08009261
 80091ac:	08009261 	.word	0x08009261
 80091b0:	08009261 	.word	0x08009261
 80091b4:	08009261 	.word	0x08009261
 80091b8:	08009261 	.word	0x08009261
 80091bc:	08009261 	.word	0x08009261
 80091c0:	08009261 	.word	0x08009261
 80091c4:	08009261 	.word	0x08009261
 80091c8:	08009261 	.word	0x08009261
 80091cc:	08009261 	.word	0x08009261
 80091d0:	08009261 	.word	0x08009261
 80091d4:	08009261 	.word	0x08009261
 80091d8:	08009261 	.word	0x08009261
 80091dc:	08009261 	.word	0x08009261
 80091e0:	08009253 	.word	0x08009253
 80091e4:	2b40      	cmp	r3, #64	@ 0x40
 80091e6:	d037      	beq.n	8009258 <UART_SetConfig+0x6bc>
 80091e8:	e03a      	b.n	8009260 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80091ea:	f7fd fbf9 	bl	80069e0 <HAL_RCCEx_GetD3PCLK1Freq>
 80091ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091f0:	e03c      	b.n	800926c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fd fc08 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009200:	e034      	b.n	800926c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009202:	f107 0318 	add.w	r3, r7, #24
 8009206:	4618      	mov	r0, r3
 8009208:	f7fd fd54 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009210:	e02c      	b.n	800926c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009212:	4b09      	ldr	r3, [pc, #36]	@ (8009238 <UART_SetConfig+0x69c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0320 	and.w	r3, r3, #32
 800921a:	2b00      	cmp	r3, #0
 800921c:	d016      	beq.n	800924c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800921e:	4b06      	ldr	r3, [pc, #24]	@ (8009238 <UART_SetConfig+0x69c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	08db      	lsrs	r3, r3, #3
 8009224:	f003 0303 	and.w	r3, r3, #3
 8009228:	4a07      	ldr	r2, [pc, #28]	@ (8009248 <UART_SetConfig+0x6ac>)
 800922a:	fa22 f303 	lsr.w	r3, r2, r3
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009230:	e01c      	b.n	800926c <UART_SetConfig+0x6d0>
 8009232:	bf00      	nop
 8009234:	40011400 	.word	0x40011400
 8009238:	58024400 	.word	0x58024400
 800923c:	40007800 	.word	0x40007800
 8009240:	40007c00 	.word	0x40007c00
 8009244:	58000c00 	.word	0x58000c00
 8009248:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800924c:	4b9d      	ldr	r3, [pc, #628]	@ (80094c4 <UART_SetConfig+0x928>)
 800924e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009250:	e00c      	b.n	800926c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009252:	4b9d      	ldr	r3, [pc, #628]	@ (80094c8 <UART_SetConfig+0x92c>)
 8009254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009256:	e009      	b.n	800926c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009258:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800925c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800925e:	e005      	b.n	800926c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800926a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800926c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 81de 	beq.w	8009630 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009278:	4a94      	ldr	r2, [pc, #592]	@ (80094cc <UART_SetConfig+0x930>)
 800927a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800927e:	461a      	mov	r2, r3
 8009280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009282:	fbb3 f3f2 	udiv	r3, r3, r2
 8009286:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	4613      	mov	r3, r2
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	4413      	add	r3, r2
 8009292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009294:	429a      	cmp	r2, r3
 8009296:	d305      	bcc.n	80092a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800929e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d903      	bls.n	80092ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092aa:	e1c1      	b.n	8009630 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ae:	2200      	movs	r2, #0
 80092b0:	60bb      	str	r3, [r7, #8]
 80092b2:	60fa      	str	r2, [r7, #12]
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b8:	4a84      	ldr	r2, [pc, #528]	@ (80094cc <UART_SetConfig+0x930>)
 80092ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092be:	b29b      	uxth	r3, r3
 80092c0:	2200      	movs	r2, #0
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	607a      	str	r2, [r7, #4]
 80092c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092ce:	f7f7 f807 	bl	80002e0 <__aeabi_uldivmod>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4610      	mov	r0, r2
 80092d8:	4619      	mov	r1, r3
 80092da:	f04f 0200 	mov.w	r2, #0
 80092de:	f04f 0300 	mov.w	r3, #0
 80092e2:	020b      	lsls	r3, r1, #8
 80092e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092e8:	0202      	lsls	r2, r0, #8
 80092ea:	6979      	ldr	r1, [r7, #20]
 80092ec:	6849      	ldr	r1, [r1, #4]
 80092ee:	0849      	lsrs	r1, r1, #1
 80092f0:	2000      	movs	r0, #0
 80092f2:	460c      	mov	r4, r1
 80092f4:	4605      	mov	r5, r0
 80092f6:	eb12 0804 	adds.w	r8, r2, r4
 80092fa:	eb43 0905 	adc.w	r9, r3, r5
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	469a      	mov	sl, r3
 8009306:	4693      	mov	fp, r2
 8009308:	4652      	mov	r2, sl
 800930a:	465b      	mov	r3, fp
 800930c:	4640      	mov	r0, r8
 800930e:	4649      	mov	r1, r9
 8009310:	f7f6 ffe6 	bl	80002e0 <__aeabi_uldivmod>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4613      	mov	r3, r2
 800931a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800931c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009322:	d308      	bcc.n	8009336 <UART_SetConfig+0x79a>
 8009324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800932a:	d204      	bcs.n	8009336 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009332:	60da      	str	r2, [r3, #12]
 8009334:	e17c      	b.n	8009630 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800933c:	e178      	b.n	8009630 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009346:	f040 80c5 	bne.w	80094d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800934a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800934e:	2b20      	cmp	r3, #32
 8009350:	dc48      	bgt.n	80093e4 <UART_SetConfig+0x848>
 8009352:	2b00      	cmp	r3, #0
 8009354:	db7b      	blt.n	800944e <UART_SetConfig+0x8b2>
 8009356:	2b20      	cmp	r3, #32
 8009358:	d879      	bhi.n	800944e <UART_SetConfig+0x8b2>
 800935a:	a201      	add	r2, pc, #4	@ (adr r2, 8009360 <UART_SetConfig+0x7c4>)
 800935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009360:	080093eb 	.word	0x080093eb
 8009364:	080093f3 	.word	0x080093f3
 8009368:	0800944f 	.word	0x0800944f
 800936c:	0800944f 	.word	0x0800944f
 8009370:	080093fb 	.word	0x080093fb
 8009374:	0800944f 	.word	0x0800944f
 8009378:	0800944f 	.word	0x0800944f
 800937c:	0800944f 	.word	0x0800944f
 8009380:	0800940b 	.word	0x0800940b
 8009384:	0800944f 	.word	0x0800944f
 8009388:	0800944f 	.word	0x0800944f
 800938c:	0800944f 	.word	0x0800944f
 8009390:	0800944f 	.word	0x0800944f
 8009394:	0800944f 	.word	0x0800944f
 8009398:	0800944f 	.word	0x0800944f
 800939c:	0800944f 	.word	0x0800944f
 80093a0:	0800941b 	.word	0x0800941b
 80093a4:	0800944f 	.word	0x0800944f
 80093a8:	0800944f 	.word	0x0800944f
 80093ac:	0800944f 	.word	0x0800944f
 80093b0:	0800944f 	.word	0x0800944f
 80093b4:	0800944f 	.word	0x0800944f
 80093b8:	0800944f 	.word	0x0800944f
 80093bc:	0800944f 	.word	0x0800944f
 80093c0:	0800944f 	.word	0x0800944f
 80093c4:	0800944f 	.word	0x0800944f
 80093c8:	0800944f 	.word	0x0800944f
 80093cc:	0800944f 	.word	0x0800944f
 80093d0:	0800944f 	.word	0x0800944f
 80093d4:	0800944f 	.word	0x0800944f
 80093d8:	0800944f 	.word	0x0800944f
 80093dc:	0800944f 	.word	0x0800944f
 80093e0:	08009441 	.word	0x08009441
 80093e4:	2b40      	cmp	r3, #64	@ 0x40
 80093e6:	d02e      	beq.n	8009446 <UART_SetConfig+0x8aa>
 80093e8:	e031      	b.n	800944e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ea:	f7fb fb01 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 80093ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093f0:	e033      	b.n	800945a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093f2:	f7fb fb13 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 80093f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093f8:	e02f      	b.n	800945a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fd fb04 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009408:	e027      	b.n	800945a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800940a:	f107 0318 	add.w	r3, r7, #24
 800940e:	4618      	mov	r0, r3
 8009410:	f7fd fc50 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009418:	e01f      	b.n	800945a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800941a:	4b2d      	ldr	r3, [pc, #180]	@ (80094d0 <UART_SetConfig+0x934>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 0320 	and.w	r3, r3, #32
 8009422:	2b00      	cmp	r3, #0
 8009424:	d009      	beq.n	800943a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009426:	4b2a      	ldr	r3, [pc, #168]	@ (80094d0 <UART_SetConfig+0x934>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	08db      	lsrs	r3, r3, #3
 800942c:	f003 0303 	and.w	r3, r3, #3
 8009430:	4a24      	ldr	r2, [pc, #144]	@ (80094c4 <UART_SetConfig+0x928>)
 8009432:	fa22 f303 	lsr.w	r3, r2, r3
 8009436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009438:	e00f      	b.n	800945a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800943a:	4b22      	ldr	r3, [pc, #136]	@ (80094c4 <UART_SetConfig+0x928>)
 800943c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800943e:	e00c      	b.n	800945a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009440:	4b21      	ldr	r3, [pc, #132]	@ (80094c8 <UART_SetConfig+0x92c>)
 8009442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009444:	e009      	b.n	800945a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800944a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800944c:	e005      	b.n	800945a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800944e:	2300      	movs	r3, #0
 8009450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009458:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800945a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 80e7 	beq.w	8009630 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009466:	4a19      	ldr	r2, [pc, #100]	@ (80094cc <UART_SetConfig+0x930>)
 8009468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800946c:	461a      	mov	r2, r3
 800946e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009470:	fbb3 f3f2 	udiv	r3, r3, r2
 8009474:	005a      	lsls	r2, r3, #1
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	085b      	lsrs	r3, r3, #1
 800947c:	441a      	add	r2, r3
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	fbb2 f3f3 	udiv	r3, r2, r3
 8009486:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948a:	2b0f      	cmp	r3, #15
 800948c:	d916      	bls.n	80094bc <UART_SetConfig+0x920>
 800948e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009494:	d212      	bcs.n	80094bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009498:	b29b      	uxth	r3, r3
 800949a:	f023 030f 	bic.w	r3, r3, #15
 800949e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a2:	085b      	lsrs	r3, r3, #1
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80094ae:	4313      	orrs	r3, r2
 80094b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80094b8:	60da      	str	r2, [r3, #12]
 80094ba:	e0b9      	b.n	8009630 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094c2:	e0b5      	b.n	8009630 <UART_SetConfig+0xa94>
 80094c4:	03d09000 	.word	0x03d09000
 80094c8:	003d0900 	.word	0x003d0900
 80094cc:	0800dc48 	.word	0x0800dc48
 80094d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80094d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094d8:	2b20      	cmp	r3, #32
 80094da:	dc49      	bgt.n	8009570 <UART_SetConfig+0x9d4>
 80094dc:	2b00      	cmp	r3, #0
 80094de:	db7c      	blt.n	80095da <UART_SetConfig+0xa3e>
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	d87a      	bhi.n	80095da <UART_SetConfig+0xa3e>
 80094e4:	a201      	add	r2, pc, #4	@ (adr r2, 80094ec <UART_SetConfig+0x950>)
 80094e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ea:	bf00      	nop
 80094ec:	08009577 	.word	0x08009577
 80094f0:	0800957f 	.word	0x0800957f
 80094f4:	080095db 	.word	0x080095db
 80094f8:	080095db 	.word	0x080095db
 80094fc:	08009587 	.word	0x08009587
 8009500:	080095db 	.word	0x080095db
 8009504:	080095db 	.word	0x080095db
 8009508:	080095db 	.word	0x080095db
 800950c:	08009597 	.word	0x08009597
 8009510:	080095db 	.word	0x080095db
 8009514:	080095db 	.word	0x080095db
 8009518:	080095db 	.word	0x080095db
 800951c:	080095db 	.word	0x080095db
 8009520:	080095db 	.word	0x080095db
 8009524:	080095db 	.word	0x080095db
 8009528:	080095db 	.word	0x080095db
 800952c:	080095a7 	.word	0x080095a7
 8009530:	080095db 	.word	0x080095db
 8009534:	080095db 	.word	0x080095db
 8009538:	080095db 	.word	0x080095db
 800953c:	080095db 	.word	0x080095db
 8009540:	080095db 	.word	0x080095db
 8009544:	080095db 	.word	0x080095db
 8009548:	080095db 	.word	0x080095db
 800954c:	080095db 	.word	0x080095db
 8009550:	080095db 	.word	0x080095db
 8009554:	080095db 	.word	0x080095db
 8009558:	080095db 	.word	0x080095db
 800955c:	080095db 	.word	0x080095db
 8009560:	080095db 	.word	0x080095db
 8009564:	080095db 	.word	0x080095db
 8009568:	080095db 	.word	0x080095db
 800956c:	080095cd 	.word	0x080095cd
 8009570:	2b40      	cmp	r3, #64	@ 0x40
 8009572:	d02e      	beq.n	80095d2 <UART_SetConfig+0xa36>
 8009574:	e031      	b.n	80095da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009576:	f7fb fa3b 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 800957a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800957c:	e033      	b.n	80095e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800957e:	f7fb fa4d 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 8009582:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009584:	e02f      	b.n	80095e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800958a:	4618      	mov	r0, r3
 800958c:	f7fd fa3e 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009594:	e027      	b.n	80095e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009596:	f107 0318 	add.w	r3, r7, #24
 800959a:	4618      	mov	r0, r3
 800959c:	f7fd fb8a 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a4:	e01f      	b.n	80095e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095a6:	4b2d      	ldr	r3, [pc, #180]	@ (800965c <UART_SetConfig+0xac0>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0320 	and.w	r3, r3, #32
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d009      	beq.n	80095c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095b2:	4b2a      	ldr	r3, [pc, #168]	@ (800965c <UART_SetConfig+0xac0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	08db      	lsrs	r3, r3, #3
 80095b8:	f003 0303 	and.w	r3, r3, #3
 80095bc:	4a28      	ldr	r2, [pc, #160]	@ (8009660 <UART_SetConfig+0xac4>)
 80095be:	fa22 f303 	lsr.w	r3, r2, r3
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095c4:	e00f      	b.n	80095e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80095c6:	4b26      	ldr	r3, [pc, #152]	@ (8009660 <UART_SetConfig+0xac4>)
 80095c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ca:	e00c      	b.n	80095e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095cc:	4b25      	ldr	r3, [pc, #148]	@ (8009664 <UART_SetConfig+0xac8>)
 80095ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d0:	e009      	b.n	80095e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d8:	e005      	b.n	80095e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095e4:	bf00      	nop
    }

    if (pclk != 0U)
 80095e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d021      	beq.n	8009630 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009668 <UART_SetConfig+0xacc>)
 80095f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095f6:	461a      	mov	r2, r3
 80095f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	085b      	lsrs	r3, r3, #1
 8009604:	441a      	add	r2, r3
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	fbb2 f3f3 	udiv	r3, r2, r3
 800960e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009612:	2b0f      	cmp	r3, #15
 8009614:	d909      	bls.n	800962a <UART_SetConfig+0xa8e>
 8009616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800961c:	d205      	bcs.n	800962a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800961e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009620:	b29a      	uxth	r2, r3
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60da      	str	r2, [r3, #12]
 8009628:	e002      	b.n	8009630 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	2201      	movs	r2, #1
 8009634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2201      	movs	r2, #1
 800963c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2200      	movs	r2, #0
 8009644:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	2200      	movs	r2, #0
 800964a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800964c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009650:	4618      	mov	r0, r3
 8009652:	3748      	adds	r7, #72	@ 0x48
 8009654:	46bd      	mov	sp, r7
 8009656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800965a:	bf00      	nop
 800965c:	58024400 	.word	0x58024400
 8009660:	03d09000 	.word	0x03d09000
 8009664:	003d0900 	.word	0x003d0900
 8009668:	0800dc48 	.word	0x0800dc48

0800966c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009678:	f003 0308 	and.w	r3, r3, #8
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00a      	beq.n	8009696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	f003 0302 	and.w	r3, r3, #2
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00a      	beq.n	80096da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096de:	f003 0304 	and.w	r3, r3, #4
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00a      	beq.n	800971e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	d01a      	beq.n	8009782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800976a:	d10a      	bne.n	8009782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	605a      	str	r2, [r3, #4]
  }
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b098      	sub	sp, #96	@ 0x60
 80097b4:	af02      	add	r7, sp, #8
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097c0:	f7f7 fe20 	bl	8001404 <HAL_GetTick>
 80097c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0308 	and.w	r3, r3, #8
 80097d0:	2b08      	cmp	r3, #8
 80097d2:	d12f      	bne.n	8009834 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097dc:	2200      	movs	r2, #0
 80097de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f88e 	bl	8009904 <UART_WaitOnFlagUntilTimeout>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d022      	beq.n	8009834 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009802:	653b      	str	r3, [r7, #80]	@ 0x50
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800980c:	647b      	str	r3, [r7, #68]	@ 0x44
 800980e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800981a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e6      	bne.n	80097ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2220      	movs	r2, #32
 8009824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e063      	b.n	80098fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b04      	cmp	r3, #4
 8009840:	d149      	bne.n	80098d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009842:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800984a:	2200      	movs	r2, #0
 800984c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f857 	bl	8009904 <UART_WaitOnFlagUntilTimeout>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d03c      	beq.n	80098d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	623b      	str	r3, [r7, #32]
   return(result);
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800987a:	633b      	str	r3, [r7, #48]	@ 0x30
 800987c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e6      	bne.n	800985c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3308      	adds	r3, #8
 8009894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	e853 3f00 	ldrex	r3, [r3]
 800989c:	60fb      	str	r3, [r7, #12]
   return(result);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f023 0301 	bic.w	r3, r3, #1
 80098a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3308      	adds	r3, #8
 80098ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098ae:	61fa      	str	r2, [r7, #28]
 80098b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b2:	69b9      	ldr	r1, [r7, #24]
 80098b4:	69fa      	ldr	r2, [r7, #28]
 80098b6:	e841 2300 	strex	r3, r2, [r1]
 80098ba:	617b      	str	r3, [r7, #20]
   return(result);
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1e5      	bne.n	800988e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e012      	b.n	80098fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2220      	movs	r2, #32
 80098da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3758      	adds	r7, #88	@ 0x58
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	4613      	mov	r3, r2
 8009912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009914:	e04f      	b.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800991c:	d04b      	beq.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800991e:	f7f7 fd71 	bl	8001404 <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	429a      	cmp	r2, r3
 800992c:	d302      	bcc.n	8009934 <UART_WaitOnFlagUntilTimeout+0x30>
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e04e      	b.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d037      	beq.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2b80      	cmp	r3, #128	@ 0x80
 800994a:	d034      	beq.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2b40      	cmp	r3, #64	@ 0x40
 8009950:	d031      	beq.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	f003 0308 	and.w	r3, r3, #8
 800995c:	2b08      	cmp	r3, #8
 800995e:	d110      	bne.n	8009982 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2208      	movs	r2, #8
 8009966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 f839 	bl	80099e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2208      	movs	r2, #8
 8009972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e029      	b.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800998c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009990:	d111      	bne.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800999a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f81f 	bl	80099e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2220      	movs	r2, #32
 80099a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e00f      	b.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	69da      	ldr	r2, [r3, #28]
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	4013      	ands	r3, r2
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	bf0c      	ite	eq
 80099c6:	2301      	moveq	r3, #1
 80099c8:	2300      	movne	r3, #0
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	461a      	mov	r2, r3
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d0a0      	beq.n	8009916 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b095      	sub	sp, #84	@ 0x54
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a06:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e6      	bne.n	80099e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3308      	adds	r3, #8
 8009a20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a2a:	69fa      	ldr	r2, [r7, #28]
 8009a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8009aa8 <UART_EndRxTransfer+0xc8>)
 8009a2e:	4013      	ands	r3, r2
 8009a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3308      	adds	r3, #8
 8009a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e5      	bne.n	8009a1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d118      	bne.n	8009a88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	e853 3f00 	ldrex	r3, [r3]
 8009a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f023 0310 	bic.w	r3, r3, #16
 8009a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a74:	61bb      	str	r3, [r7, #24]
 8009a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a78:	6979      	ldr	r1, [r7, #20]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	e841 2300 	strex	r3, r2, [r1]
 8009a80:	613b      	str	r3, [r7, #16]
   return(result);
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e6      	bne.n	8009a56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a9c:	bf00      	nop
 8009a9e:	3754      	adds	r7, #84	@ 0x54
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	effffffe 	.word	0xeffffffe

08009aac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7ff f854 	bl	8008b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ac8:	bf00      	nop
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b08f      	sub	sp, #60	@ 0x3c
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ade:	2b21      	cmp	r3, #33	@ 0x21
 8009ae0:	d14c      	bne.n	8009b7c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d132      	bne.n	8009b54 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	e853 3f00 	ldrex	r3, [r3]
 8009afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b0e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b14:	e841 2300 	strex	r3, r2, [r1]
 8009b18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e6      	bne.n	8009aee <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	e853 3f00 	ldrex	r3, [r3]
 8009b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3e:	61bb      	str	r3, [r7, #24]
 8009b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b42:	6979      	ldr	r1, [r7, #20]
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	e841 2300 	strex	r3, r2, [r1]
 8009b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1e6      	bne.n	8009b20 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009b52:	e013      	b.n	8009b7c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b58:	781a      	ldrb	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009b7c:	bf00      	nop
 8009b7e:	373c      	adds	r7, #60	@ 0x3c
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b091      	sub	sp, #68	@ 0x44
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b96:	2b21      	cmp	r3, #33	@ 0x21
 8009b98:	d151      	bne.n	8009c3e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d132      	bne.n	8009c0c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bae:	e853 3f00 	ldrex	r3, [r3]
 8009bb2:	623b      	str	r3, [r7, #32]
   return(result);
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bcc:	e841 2300 	strex	r3, r2, [r1]
 8009bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1e6      	bne.n	8009ba6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf6:	61fb      	str	r3, [r7, #28]
 8009bf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	69b9      	ldr	r1, [r7, #24]
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	617b      	str	r3, [r7, #20]
   return(result);
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e6      	bne.n	8009bd8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009c0a:	e018      	b.n	8009c3e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c20:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c26:	1c9a      	adds	r2, r3, #2
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	3b01      	subs	r3, #1
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009c3e:	bf00      	nop
 8009c40:	3744      	adds	r7, #68	@ 0x44
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b091      	sub	sp, #68	@ 0x44
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c58:	2b21      	cmp	r3, #33	@ 0x21
 8009c5a:	d160      	bne.n	8009d1e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c62:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009c64:	e057      	b.n	8009d16 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d133      	bne.n	8009cda <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3308      	adds	r3, #8
 8009c78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7c:	e853 3f00 	ldrex	r3, [r3]
 8009c80:	623b      	str	r3, [r7, #32]
   return(result);
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009c88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	3308      	adds	r3, #8
 8009c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c92:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c9a:	e841 2300 	strex	r3, r2, [r1]
 8009c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1e5      	bne.n	8009c72 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	e853 3f00 	ldrex	r3, [r3]
 8009cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc4:	61fb      	str	r3, [r7, #28]
 8009cc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc8:	69b9      	ldr	r1, [r7, #24]
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	e841 2300 	strex	r3, r2, [r1]
 8009cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e6      	bne.n	8009ca6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009cd8:	e021      	b.n	8009d1e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d013      	beq.n	8009d10 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cec:	781a      	ldrb	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	3b01      	subs	r3, #1
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009d10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009d12:	3b01      	subs	r3, #1
 8009d14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009d16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1a4      	bne.n	8009c66 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009d1c:	e7ff      	b.n	8009d1e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009d1e:	bf00      	nop
 8009d20:	3744      	adds	r7, #68	@ 0x44
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b091      	sub	sp, #68	@ 0x44
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d38:	2b21      	cmp	r3, #33	@ 0x21
 8009d3a:	d165      	bne.n	8009e08 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d42:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009d44:	e05c      	b.n	8009e00 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d133      	bne.n	8009dba <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3308      	adds	r3, #8
 8009d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3308      	adds	r3, #8
 8009d70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e5      	bne.n	8009d52 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	e853 3f00 	ldrex	r3, [r3]
 8009d92:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	461a      	mov	r2, r3
 8009da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da4:	61bb      	str	r3, [r7, #24]
 8009da6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da8:	6979      	ldr	r1, [r7, #20]
 8009daa:	69ba      	ldr	r2, [r7, #24]
 8009dac:	e841 2300 	strex	r3, r2, [r1]
 8009db0:	613b      	str	r3, [r7, #16]
   return(result);
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1e6      	bne.n	8009d86 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009db8:	e026      	b.n	8009e08 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d018      	beq.n	8009dfa <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd0:	881b      	ldrh	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ddc:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009de2:	1c9a      	adds	r2, r3, #2
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	3b01      	subs	r3, #1
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009dfa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009e00:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d19f      	bne.n	8009d46 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009e06:	e7ff      	b.n	8009e08 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009e08:	bf00      	nop
 8009e0a:	3744      	adds	r7, #68	@ 0x44
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b088      	sub	sp, #32
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	e853 3f00 	ldrex	r3, [r3]
 8009e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e30:	61fb      	str	r3, [r7, #28]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	61bb      	str	r3, [r7, #24]
 8009e3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3e:	6979      	ldr	r1, [r7, #20]
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	e841 2300 	strex	r3, r2, [r1]
 8009e46:	613b      	str	r3, [r7, #16]
   return(result);
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1e6      	bne.n	8009e1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2220      	movs	r2, #32
 8009e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7fe fe7d 	bl	8008b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e62:	bf00      	nop
 8009e64:	3720      	adds	r7, #32
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e72:	bf00      	nop
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b083      	sub	sp, #12
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e9a:	bf00      	nop
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b085      	sub	sp, #20
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d101      	bne.n	8009ebc <HAL_UARTEx_DisableFifoMode+0x16>
 8009eb8:	2302      	movs	r3, #2
 8009eba:	e027      	b.n	8009f0c <HAL_UARTEx_DisableFifoMode+0x66>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2224      	movs	r2, #36	@ 0x24
 8009ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f022 0201 	bic.w	r2, r2, #1
 8009ee2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009eea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d101      	bne.n	8009f30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	e02d      	b.n	8009f8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2224      	movs	r2, #36	@ 0x24
 8009f3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f022 0201 	bic.w	r2, r2, #1
 8009f56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f84f 	bl	800a010 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d101      	bne.n	8009fac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fa8:	2302      	movs	r3, #2
 8009faa:	e02d      	b.n	800a008 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2224      	movs	r2, #36	@ 0x24
 8009fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f022 0201 	bic.w	r2, r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f811 	bl	800a010 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d108      	bne.n	800a032 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a030:	e031      	b.n	800a096 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a032:	2310      	movs	r3, #16
 800a034:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a036:	2310      	movs	r3, #16
 800a038:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	0e5b      	lsrs	r3, r3, #25
 800a042:	b2db      	uxtb	r3, r3
 800a044:	f003 0307 	and.w	r3, r3, #7
 800a048:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	0f5b      	lsrs	r3, r3, #29
 800a052:	b2db      	uxtb	r3, r3
 800a054:	f003 0307 	and.w	r3, r3, #7
 800a058:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a05a:	7bbb      	ldrb	r3, [r7, #14]
 800a05c:	7b3a      	ldrb	r2, [r7, #12]
 800a05e:	4911      	ldr	r1, [pc, #68]	@ (800a0a4 <UARTEx_SetNbDataToProcess+0x94>)
 800a060:	5c8a      	ldrb	r2, [r1, r2]
 800a062:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a066:	7b3a      	ldrb	r2, [r7, #12]
 800a068:	490f      	ldr	r1, [pc, #60]	@ (800a0a8 <UARTEx_SetNbDataToProcess+0x98>)
 800a06a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a06c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a070:	b29a      	uxth	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	7b7a      	ldrb	r2, [r7, #13]
 800a07c:	4909      	ldr	r1, [pc, #36]	@ (800a0a4 <UARTEx_SetNbDataToProcess+0x94>)
 800a07e:	5c8a      	ldrb	r2, [r1, r2]
 800a080:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a084:	7b7a      	ldrb	r2, [r7, #13]
 800a086:	4908      	ldr	r1, [pc, #32]	@ (800a0a8 <UARTEx_SetNbDataToProcess+0x98>)
 800a088:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a08a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a08e:	b29a      	uxth	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a096:	bf00      	nop
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	0800dc60 	.word	0x0800dc60
 800a0a8:	0800dc68 	.word	0x0800dc68

0800a0ac <__NVIC_SetPriority>:
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	6039      	str	r1, [r7, #0]
 800a0b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a0b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	db0a      	blt.n	800a0d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	490c      	ldr	r1, [pc, #48]	@ (800a0f8 <__NVIC_SetPriority+0x4c>)
 800a0c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0ca:	0112      	lsls	r2, r2, #4
 800a0cc:	b2d2      	uxtb	r2, r2
 800a0ce:	440b      	add	r3, r1
 800a0d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a0d4:	e00a      	b.n	800a0ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	4908      	ldr	r1, [pc, #32]	@ (800a0fc <__NVIC_SetPriority+0x50>)
 800a0dc:	88fb      	ldrh	r3, [r7, #6]
 800a0de:	f003 030f 	and.w	r3, r3, #15
 800a0e2:	3b04      	subs	r3, #4
 800a0e4:	0112      	lsls	r2, r2, #4
 800a0e6:	b2d2      	uxtb	r2, r2
 800a0e8:	440b      	add	r3, r1
 800a0ea:	761a      	strb	r2, [r3, #24]
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	e000e100 	.word	0xe000e100
 800a0fc:	e000ed00 	.word	0xe000ed00

0800a100 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a100:	b580      	push	{r7, lr}
 800a102:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a104:	4b05      	ldr	r3, [pc, #20]	@ (800a11c <SysTick_Handler+0x1c>)
 800a106:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a108:	f002 f9f0 	bl	800c4ec <xTaskGetSchedulerState>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d001      	beq.n	800a116 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a112:	f000 fdc1 	bl	800ac98 <xPortSysTickHandler>
  }
}
 800a116:	bf00      	nop
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	e000e010 	.word	0xe000e010

0800a120 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a120:	b580      	push	{r7, lr}
 800a122:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a124:	2100      	movs	r1, #0
 800a126:	f06f 0004 	mvn.w	r0, #4
 800a12a:	f7ff ffbf 	bl	800a0ac <__NVIC_SetPriority>
#endif
}
 800a12e:	bf00      	nop
 800a130:	bd80      	pop	{r7, pc}
	...

0800a134 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a13a:	f3ef 8305 	mrs	r3, IPSR
 800a13e:	603b      	str	r3, [r7, #0]
  return(result);
 800a140:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a146:	f06f 0305 	mvn.w	r3, #5
 800a14a:	607b      	str	r3, [r7, #4]
 800a14c:	e00c      	b.n	800a168 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a14e:	4b0a      	ldr	r3, [pc, #40]	@ (800a178 <osKernelInitialize+0x44>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d105      	bne.n	800a162 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a156:	4b08      	ldr	r3, [pc, #32]	@ (800a178 <osKernelInitialize+0x44>)
 800a158:	2201      	movs	r2, #1
 800a15a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	607b      	str	r3, [r7, #4]
 800a160:	e002      	b.n	800a168 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a166:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a168:	687b      	ldr	r3, [r7, #4]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	24000268 	.word	0x24000268

0800a17c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a182:	f3ef 8305 	mrs	r3, IPSR
 800a186:	603b      	str	r3, [r7, #0]
  return(result);
 800a188:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a18e:	f06f 0305 	mvn.w	r3, #5
 800a192:	607b      	str	r3, [r7, #4]
 800a194:	e010      	b.n	800a1b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a196:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c4 <osKernelStart+0x48>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d109      	bne.n	800a1b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a19e:	f7ff ffbf 	bl	800a120 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a1a2:	4b08      	ldr	r3, [pc, #32]	@ (800a1c4 <osKernelStart+0x48>)
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a1a8:	f001 fd52 	bl	800bc50 <vTaskStartScheduler>
      stat = osOK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	607b      	str	r3, [r7, #4]
 800a1b0:	e002      	b.n	800a1b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a1b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1b8:	687b      	ldr	r3, [r7, #4]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	24000268 	.word	0x24000268

0800a1c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08e      	sub	sp, #56	@ 0x38
 800a1cc:	af04      	add	r7, sp, #16
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1d8:	f3ef 8305 	mrs	r3, IPSR
 800a1dc:	617b      	str	r3, [r7, #20]
  return(result);
 800a1de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d17e      	bne.n	800a2e2 <osThreadNew+0x11a>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d07b      	beq.n	800a2e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a1ea:	2380      	movs	r3, #128	@ 0x80
 800a1ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a1ee:	2318      	movs	r3, #24
 800a1f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a1f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d045      	beq.n	800a28e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <osThreadNew+0x48>
        name = attr->name;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d008      	beq.n	800a236 <osThreadNew+0x6e>
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	2b38      	cmp	r3, #56	@ 0x38
 800a228:	d805      	bhi.n	800a236 <osThreadNew+0x6e>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <osThreadNew+0x72>
        return (NULL);
 800a236:	2300      	movs	r3, #0
 800a238:	e054      	b.n	800a2e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	089b      	lsrs	r3, r3, #2
 800a248:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00e      	beq.n	800a270 <osThreadNew+0xa8>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	2b5b      	cmp	r3, #91	@ 0x5b
 800a258:	d90a      	bls.n	800a270 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d006      	beq.n	800a270 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <osThreadNew+0xa8>
        mem = 1;
 800a26a:	2301      	movs	r3, #1
 800a26c:	61bb      	str	r3, [r7, #24]
 800a26e:	e010      	b.n	800a292 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10c      	bne.n	800a292 <osThreadNew+0xca>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d108      	bne.n	800a292 <osThreadNew+0xca>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d104      	bne.n	800a292 <osThreadNew+0xca>
          mem = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	61bb      	str	r3, [r7, #24]
 800a28c:	e001      	b.n	800a292 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d110      	bne.n	800a2ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2a0:	9202      	str	r2, [sp, #8]
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	6a3a      	ldr	r2, [r7, #32]
 800a2ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f001 fa7e 	bl	800b7b0 <xTaskCreateStatic>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	613b      	str	r3, [r7, #16]
 800a2b8:	e013      	b.n	800a2e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d110      	bne.n	800a2e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	f107 0310 	add.w	r3, r7, #16
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f001 facc 	bl	800b870 <xTaskCreate>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d001      	beq.n	800a2e2 <osThreadNew+0x11a>
            hTask = NULL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a2e2:	693b      	ldr	r3, [r7, #16]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3728      	adds	r7, #40	@ 0x28
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2f2:	f3ef 8305 	mrs	r3, IPSR
 800a2f6:	603b      	str	r3, [r7, #0]
  return(result);
 800a2f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d003      	beq.n	800a306 <osThreadYield+0x1a>
    stat = osErrorISR;
 800a2fe:	f06f 0305 	mvn.w	r3, #5
 800a302:	607b      	str	r3, [r7, #4]
 800a304:	e009      	b.n	800a31a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800a306:	2300      	movs	r3, #0
 800a308:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800a30a:	4b07      	ldr	r3, [pc, #28]	@ (800a328 <osThreadYield+0x3c>)
 800a30c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800a31a:	687b      	ldr	r3, [r7, #4]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	e000ed04 	.word	0xe000ed04

0800a32c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a334:	f3ef 8305 	mrs	r3, IPSR
 800a338:	60bb      	str	r3, [r7, #8]
  return(result);
 800a33a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d003      	beq.n	800a348 <osDelay+0x1c>
    stat = osErrorISR;
 800a340:	f06f 0305 	mvn.w	r3, #5
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	e007      	b.n	800a358 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a348:	2300      	movs	r3, #0
 800a34a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d002      	beq.n	800a358 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f001 fc46 	bl	800bbe4 <vTaskDelay>
    }
  }

  return (stat);
 800a358:	68fb      	ldr	r3, [r7, #12]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4a07      	ldr	r2, [pc, #28]	@ (800a390 <vApplicationGetIdleTaskMemory+0x2c>)
 800a374:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	4a06      	ldr	r2, [pc, #24]	@ (800a394 <vApplicationGetIdleTaskMemory+0x30>)
 800a37a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2280      	movs	r2, #128	@ 0x80
 800a380:	601a      	str	r2, [r3, #0]
}
 800a382:	bf00      	nop
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	2400026c 	.word	0x2400026c
 800a394:	240002c8 	.word	0x240002c8

0800a398 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	4a07      	ldr	r2, [pc, #28]	@ (800a3c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a3a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	4a06      	ldr	r2, [pc, #24]	@ (800a3c8 <vApplicationGetTimerTaskMemory+0x30>)
 800a3ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a3b6:	601a      	str	r2, [r3, #0]
}
 800a3b8:	bf00      	nop
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	240004c8 	.word	0x240004c8
 800a3c8:	24000524 	.word	0x24000524

0800a3cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08a      	sub	sp, #40	@ 0x28
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3d8:	f001 fca2 	bl	800bd20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3dc:	4b5c      	ldr	r3, [pc, #368]	@ (800a550 <pvPortMalloc+0x184>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3e4:	f000 f924 	bl	800a630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3e8:	4b5a      	ldr	r3, [pc, #360]	@ (800a554 <pvPortMalloc+0x188>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f040 8095 	bne.w	800a520 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d01e      	beq.n	800a43a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a3fc:	2208      	movs	r2, #8
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4413      	add	r3, r2
 800a402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d015      	beq.n	800a43a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f023 0307 	bic.w	r3, r3, #7
 800a414:	3308      	adds	r3, #8
 800a416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f003 0307 	and.w	r3, r3, #7
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00b      	beq.n	800a43a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	e7fd      	b.n	800a436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d06f      	beq.n	800a520 <pvPortMalloc+0x154>
 800a440:	4b45      	ldr	r3, [pc, #276]	@ (800a558 <pvPortMalloc+0x18c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	429a      	cmp	r2, r3
 800a448:	d86a      	bhi.n	800a520 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a44a:	4b44      	ldr	r3, [pc, #272]	@ (800a55c <pvPortMalloc+0x190>)
 800a44c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a44e:	4b43      	ldr	r3, [pc, #268]	@ (800a55c <pvPortMalloc+0x190>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a454:	e004      	b.n	800a460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	429a      	cmp	r2, r3
 800a468:	d903      	bls.n	800a472 <pvPortMalloc+0xa6>
 800a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1f1      	bne.n	800a456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a472:	4b37      	ldr	r3, [pc, #220]	@ (800a550 <pvPortMalloc+0x184>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a478:	429a      	cmp	r2, r3
 800a47a:	d051      	beq.n	800a520 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2208      	movs	r2, #8
 800a482:	4413      	add	r3, r2
 800a484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	1ad2      	subs	r2, r2, r3
 800a496:	2308      	movs	r3, #8
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d920      	bls.n	800a4e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a49e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	f003 0307 	and.w	r3, r3, #7
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00b      	beq.n	800a4c8 <pvPortMalloc+0xfc>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	613b      	str	r3, [r7, #16]
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4da:	69b8      	ldr	r0, [r7, #24]
 800a4dc:	f000 f90a 	bl	800a6f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a560 <pvPortMalloc+0x194>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d203      	bcs.n	800a502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4fa:	4b17      	ldr	r3, [pc, #92]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a18      	ldr	r2, [pc, #96]	@ (800a560 <pvPortMalloc+0x194>)
 800a500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	4b13      	ldr	r3, [pc, #76]	@ (800a554 <pvPortMalloc+0x188>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a512:	2200      	movs	r2, #0
 800a514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a516:	4b13      	ldr	r3, [pc, #76]	@ (800a564 <pvPortMalloc+0x198>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	4a11      	ldr	r2, [pc, #68]	@ (800a564 <pvPortMalloc+0x198>)
 800a51e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a520:	f001 fc0c 	bl	800bd3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00b      	beq.n	800a546 <pvPortMalloc+0x17a>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	60fb      	str	r3, [r7, #12]
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	e7fd      	b.n	800a542 <pvPortMalloc+0x176>
	return pvReturn;
 800a546:	69fb      	ldr	r3, [r7, #28]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3728      	adds	r7, #40	@ 0x28
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	2400452c 	.word	0x2400452c
 800a554:	24004540 	.word	0x24004540
 800a558:	24004530 	.word	0x24004530
 800a55c:	24004524 	.word	0x24004524
 800a560:	24004534 	.word	0x24004534
 800a564:	24004538 	.word	0x24004538

0800a568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d04f      	beq.n	800a61a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a57a:	2308      	movs	r3, #8
 800a57c:	425b      	negs	r3, r3
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	4413      	add	r3, r2
 800a582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	4b25      	ldr	r3, [pc, #148]	@ (800a624 <vPortFree+0xbc>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4013      	ands	r3, r2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10b      	bne.n	800a5ae <vPortFree+0x46>
	__asm volatile
 800a596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59a:	f383 8811 	msr	BASEPRI, r3
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	60fb      	str	r3, [r7, #12]
}
 800a5a8:	bf00      	nop
 800a5aa:	bf00      	nop
 800a5ac:	e7fd      	b.n	800a5aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00b      	beq.n	800a5ce <vPortFree+0x66>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	60bb      	str	r3, [r7, #8]
}
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	e7fd      	b.n	800a5ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	4b14      	ldr	r3, [pc, #80]	@ (800a624 <vPortFree+0xbc>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d01e      	beq.n	800a61a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d11a      	bne.n	800a61a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a624 <vPortFree+0xbc>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	43db      	mvns	r3, r3
 800a5ee:	401a      	ands	r2, r3
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5f4:	f001 fb94 	bl	800bd20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a628 <vPortFree+0xc0>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4413      	add	r3, r2
 800a602:	4a09      	ldr	r2, [pc, #36]	@ (800a628 <vPortFree+0xc0>)
 800a604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a606:	6938      	ldr	r0, [r7, #16]
 800a608:	f000 f874 	bl	800a6f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a60c:	4b07      	ldr	r3, [pc, #28]	@ (800a62c <vPortFree+0xc4>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	4a06      	ldr	r2, [pc, #24]	@ (800a62c <vPortFree+0xc4>)
 800a614:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a616:	f001 fb91 	bl	800bd3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a61a:	bf00      	nop
 800a61c:	3718      	adds	r7, #24
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	24004540 	.word	0x24004540
 800a628:	24004530 	.word	0x24004530
 800a62c:	2400453c 	.word	0x2400453c

0800a630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a636:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a63a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a63c:	4b27      	ldr	r3, [pc, #156]	@ (800a6dc <prvHeapInit+0xac>)
 800a63e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00c      	beq.n	800a664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	3307      	adds	r3, #7
 800a64e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 0307 	bic.w	r3, r3, #7
 800a656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	4a1f      	ldr	r2, [pc, #124]	@ (800a6dc <prvHeapInit+0xac>)
 800a660:	4413      	add	r3, r2
 800a662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a668:	4a1d      	ldr	r2, [pc, #116]	@ (800a6e0 <prvHeapInit+0xb0>)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a66e:	4b1c      	ldr	r3, [pc, #112]	@ (800a6e0 <prvHeapInit+0xb0>)
 800a670:	2200      	movs	r2, #0
 800a672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	4413      	add	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a67c:	2208      	movs	r2, #8
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	1a9b      	subs	r3, r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f023 0307 	bic.w	r3, r3, #7
 800a68a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4a15      	ldr	r2, [pc, #84]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a692:	4b14      	ldr	r3, [pc, #80]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2200      	movs	r2, #0
 800a698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a69a:	4b12      	ldr	r3, [pc, #72]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	1ad2      	subs	r2, r2, r3
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a6e8 <prvHeapInit+0xb8>)
 800a6be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	4a09      	ldr	r2, [pc, #36]	@ (800a6ec <prvHeapInit+0xbc>)
 800a6c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6c8:	4b09      	ldr	r3, [pc, #36]	@ (800a6f0 <prvHeapInit+0xc0>)
 800a6ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a6ce:	601a      	str	r2, [r3, #0]
}
 800a6d0:	bf00      	nop
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	24000924 	.word	0x24000924
 800a6e0:	24004524 	.word	0x24004524
 800a6e4:	2400452c 	.word	0x2400452c
 800a6e8:	24004534 	.word	0x24004534
 800a6ec:	24004530 	.word	0x24004530
 800a6f0:	24004540 	.word	0x24004540

0800a6f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6fc:	4b28      	ldr	r3, [pc, #160]	@ (800a7a0 <prvInsertBlockIntoFreeList+0xac>)
 800a6fe:	60fb      	str	r3, [r7, #12]
 800a700:	e002      	b.n	800a708 <prvInsertBlockIntoFreeList+0x14>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d8f7      	bhi.n	800a702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	4413      	add	r3, r2
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d108      	bne.n	800a736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	441a      	add	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	441a      	add	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d118      	bne.n	800a77c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	4b15      	ldr	r3, [pc, #84]	@ (800a7a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	429a      	cmp	r2, r3
 800a754:	d00d      	beq.n	800a772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	441a      	add	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	e008      	b.n	800a784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a772:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	e003      	b.n	800a784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d002      	beq.n	800a792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a792:	bf00      	nop
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	24004524 	.word	0x24004524
 800a7a4:	2400452c 	.word	0x2400452c

0800a7a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f103 0208 	add.w	r2, r3, #8
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f103 0208 	add.w	r2, r3, #8
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f103 0208 	add.w	r2, r3, #8
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a802:	b480      	push	{r7}
 800a804:	b085      	sub	sp, #20
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	689a      	ldr	r2, [r3, #8]
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	1c5a      	adds	r2, r3, #1
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	601a      	str	r2, [r3, #0]
}
 800a83e:	bf00      	nop
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a84a:	b480      	push	{r7}
 800a84c:	b085      	sub	sp, #20
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a860:	d103      	bne.n	800a86a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	e00c      	b.n	800a884 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3308      	adds	r3, #8
 800a86e:	60fb      	str	r3, [r7, #12]
 800a870:	e002      	b.n	800a878 <vListInsert+0x2e>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	429a      	cmp	r2, r3
 800a882:	d2f6      	bcs.n	800a872 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	601a      	str	r2, [r3, #0]
}
 800a8b0:	bf00      	nop
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	6892      	ldr	r2, [r2, #8]
 800a8d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	6852      	ldr	r2, [r2, #4]
 800a8dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d103      	bne.n	800a8f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	689a      	ldr	r2, [r3, #8]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	1e5a      	subs	r2, r3, #1
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3b04      	subs	r3, #4
 800a920:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3b04      	subs	r3, #4
 800a92e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	f023 0201 	bic.w	r2, r3, #1
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3b04      	subs	r3, #4
 800a93e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a940:	4a0c      	ldr	r2, [pc, #48]	@ (800a974 <pxPortInitialiseStack+0x64>)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	3b14      	subs	r3, #20
 800a94a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3b04      	subs	r3, #4
 800a956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f06f 0202 	mvn.w	r2, #2
 800a95e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3b20      	subs	r3, #32
 800a964:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a966:	68fb      	ldr	r3, [r7, #12]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	0800a979 	.word	0x0800a979

0800a978 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a982:	4b13      	ldr	r3, [pc, #76]	@ (800a9d0 <prvTaskExitError+0x58>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a98a:	d00b      	beq.n	800a9a4 <prvTaskExitError+0x2c>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	60fb      	str	r3, [r7, #12]
}
 800a99e:	bf00      	nop
 800a9a0:	bf00      	nop
 800a9a2:	e7fd      	b.n	800a9a0 <prvTaskExitError+0x28>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	60bb      	str	r3, [r7, #8]
}
 800a9b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9b8:	bf00      	nop
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d0fc      	beq.n	800a9ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9c0:	bf00      	nop
 800a9c2:	bf00      	nop
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	24000010 	.word	0x24000010
	...

0800a9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9e0:	4b07      	ldr	r3, [pc, #28]	@ (800aa00 <pxCurrentTCBConst2>)
 800a9e2:	6819      	ldr	r1, [r3, #0]
 800a9e4:	6808      	ldr	r0, [r1, #0]
 800a9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ea:	f380 8809 	msr	PSP, r0
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f04f 0000 	mov.w	r0, #0
 800a9f6:	f380 8811 	msr	BASEPRI, r0
 800a9fa:	4770      	bx	lr
 800a9fc:	f3af 8000 	nop.w

0800aa00 <pxCurrentTCBConst2>:
 800aa00:	2400458c 	.word	0x2400458c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa04:	bf00      	nop
 800aa06:	bf00      	nop

0800aa08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa08:	4808      	ldr	r0, [pc, #32]	@ (800aa2c <prvPortStartFirstTask+0x24>)
 800aa0a:	6800      	ldr	r0, [r0, #0]
 800aa0c:	6800      	ldr	r0, [r0, #0]
 800aa0e:	f380 8808 	msr	MSP, r0
 800aa12:	f04f 0000 	mov.w	r0, #0
 800aa16:	f380 8814 	msr	CONTROL, r0
 800aa1a:	b662      	cpsie	i
 800aa1c:	b661      	cpsie	f
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	df00      	svc	0
 800aa28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa2a:	bf00      	nop
 800aa2c:	e000ed08 	.word	0xe000ed08

0800aa30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa36:	4b47      	ldr	r3, [pc, #284]	@ (800ab54 <xPortStartScheduler+0x124>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a47      	ldr	r2, [pc, #284]	@ (800ab58 <xPortStartScheduler+0x128>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d10b      	bne.n	800aa58 <xPortStartScheduler+0x28>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	60fb      	str	r3, [r7, #12]
}
 800aa52:	bf00      	nop
 800aa54:	bf00      	nop
 800aa56:	e7fd      	b.n	800aa54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa58:	4b3e      	ldr	r3, [pc, #248]	@ (800ab54 <xPortStartScheduler+0x124>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a3f      	ldr	r2, [pc, #252]	@ (800ab5c <xPortStartScheduler+0x12c>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d10b      	bne.n	800aa7a <xPortStartScheduler+0x4a>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	613b      	str	r3, [r7, #16]
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	e7fd      	b.n	800aa76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa7a:	4b39      	ldr	r3, [pc, #228]	@ (800ab60 <xPortStartScheduler+0x130>)
 800aa7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	22ff      	movs	r2, #255	@ 0xff
 800aa8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	4b31      	ldr	r3, [pc, #196]	@ (800ab64 <xPortStartScheduler+0x134>)
 800aaa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aaa2:	4b31      	ldr	r3, [pc, #196]	@ (800ab68 <xPortStartScheduler+0x138>)
 800aaa4:	2207      	movs	r2, #7
 800aaa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaa8:	e009      	b.n	800aabe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800aaaa:	4b2f      	ldr	r3, [pc, #188]	@ (800ab68 <xPortStartScheduler+0x138>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	3b01      	subs	r3, #1
 800aab0:	4a2d      	ldr	r2, [pc, #180]	@ (800ab68 <xPortStartScheduler+0x138>)
 800aab2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aab4:	78fb      	ldrb	r3, [r7, #3]
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	005b      	lsls	r3, r3, #1
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aabe:	78fb      	ldrb	r3, [r7, #3]
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aac6:	2b80      	cmp	r3, #128	@ 0x80
 800aac8:	d0ef      	beq.n	800aaaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aaca:	4b27      	ldr	r3, [pc, #156]	@ (800ab68 <xPortStartScheduler+0x138>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f1c3 0307 	rsb	r3, r3, #7
 800aad2:	2b04      	cmp	r3, #4
 800aad4:	d00b      	beq.n	800aaee <xPortStartScheduler+0xbe>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	60bb      	str	r3, [r7, #8]
}
 800aae8:	bf00      	nop
 800aaea:	bf00      	nop
 800aaec:	e7fd      	b.n	800aaea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aaee:	4b1e      	ldr	r3, [pc, #120]	@ (800ab68 <xPortStartScheduler+0x138>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	021b      	lsls	r3, r3, #8
 800aaf4:	4a1c      	ldr	r2, [pc, #112]	@ (800ab68 <xPortStartScheduler+0x138>)
 800aaf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aaf8:	4b1b      	ldr	r3, [pc, #108]	@ (800ab68 <xPortStartScheduler+0x138>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ab00:	4a19      	ldr	r2, [pc, #100]	@ (800ab68 <xPortStartScheduler+0x138>)
 800ab02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab0c:	4b17      	ldr	r3, [pc, #92]	@ (800ab6c <xPortStartScheduler+0x13c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a16      	ldr	r2, [pc, #88]	@ (800ab6c <xPortStartScheduler+0x13c>)
 800ab12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ab16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab18:	4b14      	ldr	r3, [pc, #80]	@ (800ab6c <xPortStartScheduler+0x13c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a13      	ldr	r2, [pc, #76]	@ (800ab6c <xPortStartScheduler+0x13c>)
 800ab1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ab22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab24:	f000 f8da 	bl	800acdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab28:	4b11      	ldr	r3, [pc, #68]	@ (800ab70 <xPortStartScheduler+0x140>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab2e:	f000 f8f9 	bl	800ad24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab32:	4b10      	ldr	r3, [pc, #64]	@ (800ab74 <xPortStartScheduler+0x144>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a0f      	ldr	r2, [pc, #60]	@ (800ab74 <xPortStartScheduler+0x144>)
 800ab38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ab3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab3e:	f7ff ff63 	bl	800aa08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab42:	f001 fa63 	bl	800c00c <vTaskSwitchContext>
	prvTaskExitError();
 800ab46:	f7ff ff17 	bl	800a978 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3718      	adds	r7, #24
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	e000ed00 	.word	0xe000ed00
 800ab58:	410fc271 	.word	0x410fc271
 800ab5c:	410fc270 	.word	0x410fc270
 800ab60:	e000e400 	.word	0xe000e400
 800ab64:	24004544 	.word	0x24004544
 800ab68:	24004548 	.word	0x24004548
 800ab6c:	e000ed20 	.word	0xe000ed20
 800ab70:	24000010 	.word	0x24000010
 800ab74:	e000ef34 	.word	0xe000ef34

0800ab78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	607b      	str	r3, [r7, #4]
}
 800ab90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab92:	4b10      	ldr	r3, [pc, #64]	@ (800abd4 <vPortEnterCritical+0x5c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3301      	adds	r3, #1
 800ab98:	4a0e      	ldr	r2, [pc, #56]	@ (800abd4 <vPortEnterCritical+0x5c>)
 800ab9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab9c:	4b0d      	ldr	r3, [pc, #52]	@ (800abd4 <vPortEnterCritical+0x5c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d110      	bne.n	800abc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aba4:	4b0c      	ldr	r3, [pc, #48]	@ (800abd8 <vPortEnterCritical+0x60>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00b      	beq.n	800abc6 <vPortEnterCritical+0x4e>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	603b      	str	r3, [r7, #0]
}
 800abc0:	bf00      	nop
 800abc2:	bf00      	nop
 800abc4:	e7fd      	b.n	800abc2 <vPortEnterCritical+0x4a>
	}
}
 800abc6:	bf00      	nop
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	24000010 	.word	0x24000010
 800abd8:	e000ed04 	.word	0xe000ed04

0800abdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abe2:	4b12      	ldr	r3, [pc, #72]	@ (800ac2c <vPortExitCritical+0x50>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10b      	bne.n	800ac02 <vPortExitCritical+0x26>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	607b      	str	r3, [r7, #4]
}
 800abfc:	bf00      	nop
 800abfe:	bf00      	nop
 800ac00:	e7fd      	b.n	800abfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac02:	4b0a      	ldr	r3, [pc, #40]	@ (800ac2c <vPortExitCritical+0x50>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	4a08      	ldr	r2, [pc, #32]	@ (800ac2c <vPortExitCritical+0x50>)
 800ac0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac0c:	4b07      	ldr	r3, [pc, #28]	@ (800ac2c <vPortExitCritical+0x50>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d105      	bne.n	800ac20 <vPortExitCritical+0x44>
 800ac14:	2300      	movs	r3, #0
 800ac16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	24000010 	.word	0x24000010

0800ac30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac30:	f3ef 8009 	mrs	r0, PSP
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	4b15      	ldr	r3, [pc, #84]	@ (800ac90 <pxCurrentTCBConst>)
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	f01e 0f10 	tst.w	lr, #16
 800ac40:	bf08      	it	eq
 800ac42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4a:	6010      	str	r0, [r2, #0]
 800ac4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ac54:	f380 8811 	msr	BASEPRI, r0
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f001 f9d4 	bl	800c00c <vTaskSwitchContext>
 800ac64:	f04f 0000 	mov.w	r0, #0
 800ac68:	f380 8811 	msr	BASEPRI, r0
 800ac6c:	bc09      	pop	{r0, r3}
 800ac6e:	6819      	ldr	r1, [r3, #0]
 800ac70:	6808      	ldr	r0, [r1, #0]
 800ac72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac76:	f01e 0f10 	tst.w	lr, #16
 800ac7a:	bf08      	it	eq
 800ac7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac80:	f380 8809 	msr	PSP, r0
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	f3af 8000 	nop.w

0800ac90 <pxCurrentTCBConst>:
 800ac90:	2400458c 	.word	0x2400458c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop

0800ac98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	607b      	str	r3, [r7, #4]
}
 800acb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acb2:	f001 f8f1 	bl	800be98 <xTaskIncrementTick>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acbc:	4b06      	ldr	r3, [pc, #24]	@ (800acd8 <xPortSysTickHandler+0x40>)
 800acbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	2300      	movs	r3, #0
 800acc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	f383 8811 	msr	BASEPRI, r3
}
 800acce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	e000ed04 	.word	0xe000ed04

0800acdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ace0:	4b0b      	ldr	r3, [pc, #44]	@ (800ad10 <vPortSetupTimerInterrupt+0x34>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ace6:	4b0b      	ldr	r3, [pc, #44]	@ (800ad14 <vPortSetupTimerInterrupt+0x38>)
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acec:	4b0a      	ldr	r3, [pc, #40]	@ (800ad18 <vPortSetupTimerInterrupt+0x3c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a0a      	ldr	r2, [pc, #40]	@ (800ad1c <vPortSetupTimerInterrupt+0x40>)
 800acf2:	fba2 2303 	umull	r2, r3, r2, r3
 800acf6:	099b      	lsrs	r3, r3, #6
 800acf8:	4a09      	ldr	r2, [pc, #36]	@ (800ad20 <vPortSetupTimerInterrupt+0x44>)
 800acfa:	3b01      	subs	r3, #1
 800acfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acfe:	4b04      	ldr	r3, [pc, #16]	@ (800ad10 <vPortSetupTimerInterrupt+0x34>)
 800ad00:	2207      	movs	r2, #7
 800ad02:	601a      	str	r2, [r3, #0]
}
 800ad04:	bf00      	nop
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	e000e010 	.word	0xe000e010
 800ad14:	e000e018 	.word	0xe000e018
 800ad18:	24000000 	.word	0x24000000
 800ad1c:	10624dd3 	.word	0x10624dd3
 800ad20:	e000e014 	.word	0xe000e014

0800ad24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ad34 <vPortEnableVFP+0x10>
 800ad28:	6801      	ldr	r1, [r0, #0]
 800ad2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ad2e:	6001      	str	r1, [r0, #0]
 800ad30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad32:	bf00      	nop
 800ad34:	e000ed88 	.word	0xe000ed88

0800ad38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad3e:	f3ef 8305 	mrs	r3, IPSR
 800ad42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b0f      	cmp	r3, #15
 800ad48:	d915      	bls.n	800ad76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad4a:	4a18      	ldr	r2, [pc, #96]	@ (800adac <vPortValidateInterruptPriority+0x74>)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	4413      	add	r3, r2
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad54:	4b16      	ldr	r3, [pc, #88]	@ (800adb0 <vPortValidateInterruptPriority+0x78>)
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	7afa      	ldrb	r2, [r7, #11]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d20b      	bcs.n	800ad76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	607b      	str	r3, [r7, #4]
}
 800ad70:	bf00      	nop
 800ad72:	bf00      	nop
 800ad74:	e7fd      	b.n	800ad72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad76:	4b0f      	ldr	r3, [pc, #60]	@ (800adb4 <vPortValidateInterruptPriority+0x7c>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ad7e:	4b0e      	ldr	r3, [pc, #56]	@ (800adb8 <vPortValidateInterruptPriority+0x80>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d90b      	bls.n	800ad9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ad86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	603b      	str	r3, [r7, #0]
}
 800ad98:	bf00      	nop
 800ad9a:	bf00      	nop
 800ad9c:	e7fd      	b.n	800ad9a <vPortValidateInterruptPriority+0x62>
	}
 800ad9e:	bf00      	nop
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	e000e3f0 	.word	0xe000e3f0
 800adb0:	24004544 	.word	0x24004544
 800adb4:	e000ed0c 	.word	0xe000ed0c
 800adb8:	24004548 	.word	0x24004548

0800adbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10b      	bne.n	800ade8 <xQueueGenericReset+0x2c>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	60bb      	str	r3, [r7, #8]
}
 800ade2:	bf00      	nop
 800ade4:	bf00      	nop
 800ade6:	e7fd      	b.n	800ade4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ade8:	f7ff fec6 	bl	800ab78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adf4:	68f9      	ldr	r1, [r7, #12]
 800adf6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800adf8:	fb01 f303 	mul.w	r3, r1, r3
 800adfc:	441a      	add	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	68f9      	ldr	r1, [r7, #12]
 800ae1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae1e:	fb01 f303 	mul.w	r3, r1, r3
 800ae22:	441a      	add	r2, r3
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	22ff      	movs	r2, #255	@ 0xff
 800ae2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	22ff      	movs	r2, #255	@ 0xff
 800ae34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d114      	bne.n	800ae68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d01a      	beq.n	800ae7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	3310      	adds	r3, #16
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f001 f98e 	bl	800c16c <xTaskRemoveFromEventList>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d012      	beq.n	800ae7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ae56:	4b0d      	ldr	r3, [pc, #52]	@ (800ae8c <xQueueGenericReset+0xd0>)
 800ae58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	e009      	b.n	800ae7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3310      	adds	r3, #16
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7ff fc9b 	bl	800a7a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3324      	adds	r3, #36	@ 0x24
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7ff fc96 	bl	800a7a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae7c:	f7ff feae 	bl	800abdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae80:	2301      	movs	r3, #1
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	e000ed04 	.word	0xe000ed04

0800ae90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b08e      	sub	sp, #56	@ 0x38
 800ae94:	af02      	add	r7, sp, #8
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
 800ae9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10b      	bne.n	800aebc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800aea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	e7fd      	b.n	800aeb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10b      	bne.n	800aeda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800aec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aed4:	bf00      	nop
 800aed6:	bf00      	nop
 800aed8:	e7fd      	b.n	800aed6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <xQueueGenericCreateStatic+0x56>
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <xQueueGenericCreateStatic+0x5a>
 800aee6:	2301      	movs	r3, #1
 800aee8:	e000      	b.n	800aeec <xQueueGenericCreateStatic+0x5c>
 800aeea:	2300      	movs	r3, #0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d10b      	bne.n	800af08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800aef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef4:	f383 8811 	msr	BASEPRI, r3
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	623b      	str	r3, [r7, #32]
}
 800af02:	bf00      	nop
 800af04:	bf00      	nop
 800af06:	e7fd      	b.n	800af04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d102      	bne.n	800af14 <xQueueGenericCreateStatic+0x84>
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <xQueueGenericCreateStatic+0x88>
 800af14:	2301      	movs	r3, #1
 800af16:	e000      	b.n	800af1a <xQueueGenericCreateStatic+0x8a>
 800af18:	2300      	movs	r3, #0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10b      	bne.n	800af36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	61fb      	str	r3, [r7, #28]
}
 800af30:	bf00      	nop
 800af32:	bf00      	nop
 800af34:	e7fd      	b.n	800af32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800af36:	2350      	movs	r3, #80	@ 0x50
 800af38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b50      	cmp	r3, #80	@ 0x50
 800af3e:	d00b      	beq.n	800af58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	61bb      	str	r3, [r7, #24]
}
 800af52:	bf00      	nop
 800af54:	bf00      	nop
 800af56:	e7fd      	b.n	800af54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800af58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800af5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00d      	beq.n	800af80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800af64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af66:	2201      	movs	r2, #1
 800af68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800af70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	4613      	mov	r3, r2
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f000 f805 	bl	800af8a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800af82:	4618      	mov	r0, r3
 800af84:	3730      	adds	r7, #48	@ 0x30
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	60f8      	str	r0, [r7, #12]
 800af92:	60b9      	str	r1, [r7, #8]
 800af94:	607a      	str	r2, [r7, #4]
 800af96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d103      	bne.n	800afa6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	e002      	b.n	800afac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800afb8:	2101      	movs	r1, #1
 800afba:	69b8      	ldr	r0, [r7, #24]
 800afbc:	f7ff fefe 	bl	800adbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	78fa      	ldrb	r2, [r7, #3]
 800afc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800afc8:	bf00      	nop
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08e      	sub	sp, #56	@ 0x38
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800afde:	2300      	movs	r3, #0
 800afe0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800afe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10b      	bne.n	800b004 <xQueueGenericSend+0x34>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800affe:	bf00      	nop
 800b000:	bf00      	nop
 800b002:	e7fd      	b.n	800b000 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d103      	bne.n	800b012 <xQueueGenericSend+0x42>
 800b00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <xQueueGenericSend+0x46>
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <xQueueGenericSend+0x48>
 800b016:	2300      	movs	r3, #0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10b      	bne.n	800b034 <xQueueGenericSend+0x64>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b02e:	bf00      	nop
 800b030:	bf00      	nop
 800b032:	e7fd      	b.n	800b030 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	2b02      	cmp	r3, #2
 800b038:	d103      	bne.n	800b042 <xQueueGenericSend+0x72>
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d101      	bne.n	800b046 <xQueueGenericSend+0x76>
 800b042:	2301      	movs	r3, #1
 800b044:	e000      	b.n	800b048 <xQueueGenericSend+0x78>
 800b046:	2300      	movs	r3, #0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10b      	bne.n	800b064 <xQueueGenericSend+0x94>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	623b      	str	r3, [r7, #32]
}
 800b05e:	bf00      	nop
 800b060:	bf00      	nop
 800b062:	e7fd      	b.n	800b060 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b064:	f001 fa42 	bl	800c4ec <xTaskGetSchedulerState>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d102      	bne.n	800b074 <xQueueGenericSend+0xa4>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <xQueueGenericSend+0xa8>
 800b074:	2301      	movs	r3, #1
 800b076:	e000      	b.n	800b07a <xQueueGenericSend+0xaa>
 800b078:	2300      	movs	r3, #0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10b      	bne.n	800b096 <xQueueGenericSend+0xc6>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	61fb      	str	r3, [r7, #28]
}
 800b090:	bf00      	nop
 800b092:	bf00      	nop
 800b094:	e7fd      	b.n	800b092 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b096:	f7ff fd6f 	bl	800ab78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d302      	bcc.n	800b0ac <xQueueGenericSend+0xdc>
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d129      	bne.n	800b100 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0ac:	683a      	ldr	r2, [r7, #0]
 800b0ae:	68b9      	ldr	r1, [r7, #8]
 800b0b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0b2:	f000 fa0f 	bl	800b4d4 <prvCopyDataToQueue>
 800b0b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d010      	beq.n	800b0e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c2:	3324      	adds	r3, #36	@ 0x24
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f001 f851 	bl	800c16c <xTaskRemoveFromEventList>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d013      	beq.n	800b0f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b0d0:	4b3f      	ldr	r3, [pc, #252]	@ (800b1d0 <xQueueGenericSend+0x200>)
 800b0d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	e00a      	b.n	800b0f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d007      	beq.n	800b0f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b0e8:	4b39      	ldr	r3, [pc, #228]	@ (800b1d0 <xQueueGenericSend+0x200>)
 800b0ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b0f8:	f7ff fd70 	bl	800abdc <vPortExitCritical>
				return pdPASS;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e063      	b.n	800b1c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d103      	bne.n	800b10e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b106:	f7ff fd69 	bl	800abdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b10a:	2300      	movs	r3, #0
 800b10c:	e05c      	b.n	800b1c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b110:	2b00      	cmp	r3, #0
 800b112:	d106      	bne.n	800b122 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b114:	f107 0314 	add.w	r3, r7, #20
 800b118:	4618      	mov	r0, r3
 800b11a:	f001 f88b 	bl	800c234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b11e:	2301      	movs	r3, #1
 800b120:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b122:	f7ff fd5b 	bl	800abdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b126:	f000 fdfb 	bl	800bd20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b12a:	f7ff fd25 	bl	800ab78 <vPortEnterCritical>
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b134:	b25b      	sxtb	r3, r3
 800b136:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b13a:	d103      	bne.n	800b144 <xQueueGenericSend+0x174>
 800b13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b146:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b14a:	b25b      	sxtb	r3, r3
 800b14c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b150:	d103      	bne.n	800b15a <xQueueGenericSend+0x18a>
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	2200      	movs	r2, #0
 800b156:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b15a:	f7ff fd3f 	bl	800abdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b15e:	1d3a      	adds	r2, r7, #4
 800b160:	f107 0314 	add.w	r3, r7, #20
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f001 f87a 	bl	800c260 <xTaskCheckForTimeOut>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d124      	bne.n	800b1bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b172:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b174:	f000 faa6 	bl	800b6c4 <prvIsQueueFull>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d018      	beq.n	800b1b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b180:	3310      	adds	r3, #16
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	4611      	mov	r1, r2
 800b186:	4618      	mov	r0, r3
 800b188:	f000 ff9e 	bl	800c0c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b18c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b18e:	f000 fa31 	bl	800b5f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b192:	f000 fdd3 	bl	800bd3c <xTaskResumeAll>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f47f af7c 	bne.w	800b096 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b19e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d0 <xQueueGenericSend+0x200>)
 800b1a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	e772      	b.n	800b096 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b1b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1b2:	f000 fa1f 	bl	800b5f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1b6:	f000 fdc1 	bl	800bd3c <xTaskResumeAll>
 800b1ba:	e76c      	b.n	800b096 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b1bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1be:	f000 fa19 	bl	800b5f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1c2:	f000 fdbb 	bl	800bd3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b1c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3738      	adds	r7, #56	@ 0x38
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	e000ed04 	.word	0xe000ed04

0800b1d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b090      	sub	sp, #64	@ 0x40
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
 800b1e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10b      	bne.n	800b204 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f0:	f383 8811 	msr	BASEPRI, r3
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b1fe:	bf00      	nop
 800b200:	bf00      	nop
 800b202:	e7fd      	b.n	800b200 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d103      	bne.n	800b212 <xQueueGenericSendFromISR+0x3e>
 800b20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b20c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <xQueueGenericSendFromISR+0x42>
 800b212:	2301      	movs	r3, #1
 800b214:	e000      	b.n	800b218 <xQueueGenericSendFromISR+0x44>
 800b216:	2300      	movs	r3, #0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10b      	bne.n	800b234 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b22e:	bf00      	nop
 800b230:	bf00      	nop
 800b232:	e7fd      	b.n	800b230 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2b02      	cmp	r3, #2
 800b238:	d103      	bne.n	800b242 <xQueueGenericSendFromISR+0x6e>
 800b23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d101      	bne.n	800b246 <xQueueGenericSendFromISR+0x72>
 800b242:	2301      	movs	r3, #1
 800b244:	e000      	b.n	800b248 <xQueueGenericSendFromISR+0x74>
 800b246:	2300      	movs	r3, #0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10b      	bne.n	800b264 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	623b      	str	r3, [r7, #32]
}
 800b25e:	bf00      	nop
 800b260:	bf00      	nop
 800b262:	e7fd      	b.n	800b260 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b264:	f7ff fd68 	bl	800ad38 <vPortValidateInterruptPriority>
	__asm volatile
 800b268:	f3ef 8211 	mrs	r2, BASEPRI
 800b26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b270:	f383 8811 	msr	BASEPRI, r3
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	61fa      	str	r2, [r7, #28]
 800b27e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b280:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b282:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d302      	bcc.n	800b296 <xQueueGenericSendFromISR+0xc2>
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	2b02      	cmp	r3, #2
 800b294:	d12f      	bne.n	800b2f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b29c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	68b9      	ldr	r1, [r7, #8]
 800b2aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b2ac:	f000 f912 	bl	800b4d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b2b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b2b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2b8:	d112      	bne.n	800b2e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d016      	beq.n	800b2f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c4:	3324      	adds	r3, #36	@ 0x24
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 ff50 	bl	800c16c <xTaskRemoveFromEventList>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00e      	beq.n	800b2f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00b      	beq.n	800b2f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	601a      	str	r2, [r3, #0]
 800b2de:	e007      	b.n	800b2f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	b25a      	sxtb	r2, r3
 800b2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b2f4:	e001      	b.n	800b2fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2fc:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f383 8811 	msr	BASEPRI, r3
}
 800b304:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3740      	adds	r7, #64	@ 0x40
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08c      	sub	sp, #48	@ 0x30
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b31c:	2300      	movs	r3, #0
 800b31e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b326:	2b00      	cmp	r3, #0
 800b328:	d10b      	bne.n	800b342 <xQueueReceive+0x32>
	__asm volatile
 800b32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	623b      	str	r3, [r7, #32]
}
 800b33c:	bf00      	nop
 800b33e:	bf00      	nop
 800b340:	e7fd      	b.n	800b33e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d103      	bne.n	800b350 <xQueueReceive+0x40>
 800b348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d101      	bne.n	800b354 <xQueueReceive+0x44>
 800b350:	2301      	movs	r3, #1
 800b352:	e000      	b.n	800b356 <xQueueReceive+0x46>
 800b354:	2300      	movs	r3, #0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10b      	bne.n	800b372 <xQueueReceive+0x62>
	__asm volatile
 800b35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b35e:	f383 8811 	msr	BASEPRI, r3
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	61fb      	str	r3, [r7, #28]
}
 800b36c:	bf00      	nop
 800b36e:	bf00      	nop
 800b370:	e7fd      	b.n	800b36e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b372:	f001 f8bb 	bl	800c4ec <xTaskGetSchedulerState>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d102      	bne.n	800b382 <xQueueReceive+0x72>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <xQueueReceive+0x76>
 800b382:	2301      	movs	r3, #1
 800b384:	e000      	b.n	800b388 <xQueueReceive+0x78>
 800b386:	2300      	movs	r3, #0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10b      	bne.n	800b3a4 <xQueueReceive+0x94>
	__asm volatile
 800b38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	61bb      	str	r3, [r7, #24]
}
 800b39e:	bf00      	nop
 800b3a0:	bf00      	nop
 800b3a2:	e7fd      	b.n	800b3a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3a4:	f7ff fbe8 	bl	800ab78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d01f      	beq.n	800b3f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b3b4:	68b9      	ldr	r1, [r7, #8]
 800b3b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3b8:	f000 f8f6 	bl	800b5a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3be:	1e5a      	subs	r2, r3, #1
 800b3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00f      	beq.n	800b3ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ce:	3310      	adds	r3, #16
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 fecb 	bl	800c16c <xTaskRemoveFromEventList>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d007      	beq.n	800b3ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3dc:	4b3c      	ldr	r3, [pc, #240]	@ (800b4d0 <xQueueReceive+0x1c0>)
 800b3de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3e2:	601a      	str	r2, [r3, #0]
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3ec:	f7ff fbf6 	bl	800abdc <vPortExitCritical>
				return pdPASS;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e069      	b.n	800b4c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d103      	bne.n	800b402 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3fa:	f7ff fbef 	bl	800abdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3fe:	2300      	movs	r3, #0
 800b400:	e062      	b.n	800b4c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b404:	2b00      	cmp	r3, #0
 800b406:	d106      	bne.n	800b416 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b408:	f107 0310 	add.w	r3, r7, #16
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 ff11 	bl	800c234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b412:	2301      	movs	r3, #1
 800b414:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b416:	f7ff fbe1 	bl	800abdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b41a:	f000 fc81 	bl	800bd20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b41e:	f7ff fbab 	bl	800ab78 <vPortEnterCritical>
 800b422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b424:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b428:	b25b      	sxtb	r3, r3
 800b42a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b42e:	d103      	bne.n	800b438 <xQueueReceive+0x128>
 800b430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b432:	2200      	movs	r2, #0
 800b434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b43e:	b25b      	sxtb	r3, r3
 800b440:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b444:	d103      	bne.n	800b44e <xQueueReceive+0x13e>
 800b446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b44e:	f7ff fbc5 	bl	800abdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b452:	1d3a      	adds	r2, r7, #4
 800b454:	f107 0310 	add.w	r3, r7, #16
 800b458:	4611      	mov	r1, r2
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 ff00 	bl	800c260 <xTaskCheckForTimeOut>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d123      	bne.n	800b4ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b468:	f000 f916 	bl	800b698 <prvIsQueueEmpty>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d017      	beq.n	800b4a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b474:	3324      	adds	r3, #36	@ 0x24
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	4611      	mov	r1, r2
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 fe24 	bl	800c0c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b480:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b482:	f000 f8b7 	bl	800b5f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b486:	f000 fc59 	bl	800bd3c <xTaskResumeAll>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d189      	bne.n	800b3a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b490:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d0 <xQueueReceive+0x1c0>)
 800b492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	e780      	b.n	800b3a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b4a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4a4:	f000 f8a6 	bl	800b5f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4a8:	f000 fc48 	bl	800bd3c <xTaskResumeAll>
 800b4ac:	e77a      	b.n	800b3a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b4ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4b0:	f000 f8a0 	bl	800b5f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4b4:	f000 fc42 	bl	800bd3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4ba:	f000 f8ed 	bl	800b698 <prvIsQueueEmpty>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f43f af6f 	beq.w	800b3a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b4c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3730      	adds	r7, #48	@ 0x30
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	e000ed04 	.word	0xe000ed04

0800b4d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10d      	bne.n	800b50e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d14d      	bne.n	800b596 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f001 f812 	bl	800c528 <xTaskPriorityDisinherit>
 800b504:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	609a      	str	r2, [r3, #8]
 800b50c:	e043      	b.n	800b596 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d119      	bne.n	800b548 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6858      	ldr	r0, [r3, #4]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b51c:	461a      	mov	r2, r3
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	f002 faac 	bl	800da7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	685a      	ldr	r2, [r3, #4]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b52c:	441a      	add	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d32b      	bcc.n	800b596 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	605a      	str	r2, [r3, #4]
 800b546:	e026      	b.n	800b596 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	68d8      	ldr	r0, [r3, #12]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b550:	461a      	mov	r2, r3
 800b552:	68b9      	ldr	r1, [r7, #8]
 800b554:	f002 fa92 	bl	800da7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	68da      	ldr	r2, [r3, #12]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b560:	425b      	negs	r3, r3
 800b562:	441a      	add	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	68da      	ldr	r2, [r3, #12]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	429a      	cmp	r2, r3
 800b572:	d207      	bcs.n	800b584 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	689a      	ldr	r2, [r3, #8]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b57c:	425b      	negs	r3, r3
 800b57e:	441a      	add	r2, r3
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b02      	cmp	r3, #2
 800b588:	d105      	bne.n	800b596 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	3b01      	subs	r3, #1
 800b594:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	1c5a      	adds	r2, r3, #1
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b59e:	697b      	ldr	r3, [r7, #20]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3718      	adds	r7, #24
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d018      	beq.n	800b5ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	68da      	ldr	r2, [r3, #12]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5c2:	441a      	add	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68da      	ldr	r2, [r3, #12]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d303      	bcc.n	800b5dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	68d9      	ldr	r1, [r3, #12]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	6838      	ldr	r0, [r7, #0]
 800b5e8:	f002 fa48 	bl	800da7c <memcpy>
	}
}
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b5fc:	f7ff fabc 	bl	800ab78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b606:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b608:	e011      	b.n	800b62e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d012      	beq.n	800b638 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3324      	adds	r3, #36	@ 0x24
 800b616:	4618      	mov	r0, r3
 800b618:	f000 fda8 	bl	800c16c <xTaskRemoveFromEventList>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b622:	f000 fe81 	bl	800c328 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b626:	7bfb      	ldrb	r3, [r7, #15]
 800b628:	3b01      	subs	r3, #1
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b632:	2b00      	cmp	r3, #0
 800b634:	dce9      	bgt.n	800b60a <prvUnlockQueue+0x16>
 800b636:	e000      	b.n	800b63a <prvUnlockQueue+0x46>
					break;
 800b638:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	22ff      	movs	r2, #255	@ 0xff
 800b63e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b642:	f7ff facb 	bl	800abdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b646:	f7ff fa97 	bl	800ab78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b650:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b652:	e011      	b.n	800b678 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d012      	beq.n	800b682 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	3310      	adds	r3, #16
 800b660:	4618      	mov	r0, r3
 800b662:	f000 fd83 	bl	800c16c <xTaskRemoveFromEventList>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b66c:	f000 fe5c 	bl	800c328 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b670:	7bbb      	ldrb	r3, [r7, #14]
 800b672:	3b01      	subs	r3, #1
 800b674:	b2db      	uxtb	r3, r3
 800b676:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	dce9      	bgt.n	800b654 <prvUnlockQueue+0x60>
 800b680:	e000      	b.n	800b684 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b682:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	22ff      	movs	r2, #255	@ 0xff
 800b688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b68c:	f7ff faa6 	bl	800abdc <vPortExitCritical>
}
 800b690:	bf00      	nop
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6a0:	f7ff fa6a 	bl	800ab78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	60fb      	str	r3, [r7, #12]
 800b6b0:	e001      	b.n	800b6b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6b6:	f7ff fa91 	bl	800abdc <vPortExitCritical>

	return xReturn;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6cc:	f7ff fa54 	bl	800ab78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d102      	bne.n	800b6e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	e001      	b.n	800b6e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6e6:	f7ff fa79 	bl	800abdc <vPortExitCritical>

	return xReturn;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6fe:	2300      	movs	r3, #0
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	e014      	b.n	800b72e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b704:	4a0f      	ldr	r2, [pc, #60]	@ (800b744 <vQueueAddToRegistry+0x50>)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10b      	bne.n	800b728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b710:	490c      	ldr	r1, [pc, #48]	@ (800b744 <vQueueAddToRegistry+0x50>)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b71a:	4a0a      	ldr	r2, [pc, #40]	@ (800b744 <vQueueAddToRegistry+0x50>)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	00db      	lsls	r3, r3, #3
 800b720:	4413      	add	r3, r2
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b726:	e006      	b.n	800b736 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	3301      	adds	r3, #1
 800b72c:	60fb      	str	r3, [r7, #12]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2b07      	cmp	r3, #7
 800b732:	d9e7      	bls.n	800b704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b734:	bf00      	nop
 800b736:	bf00      	nop
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	2400454c 	.word	0x2400454c

0800b748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b758:	f7ff fa0e 	bl	800ab78 <vPortEnterCritical>
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b762:	b25b      	sxtb	r3, r3
 800b764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b768:	d103      	bne.n	800b772 <vQueueWaitForMessageRestricted+0x2a>
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b778:	b25b      	sxtb	r3, r3
 800b77a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b77e:	d103      	bne.n	800b788 <vQueueWaitForMessageRestricted+0x40>
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b788:	f7ff fa28 	bl	800abdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b790:	2b00      	cmp	r3, #0
 800b792:	d106      	bne.n	800b7a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	3324      	adds	r3, #36	@ 0x24
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	68b9      	ldr	r1, [r7, #8]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 fcb9 	bl	800c114 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b7a2:	6978      	ldr	r0, [r7, #20]
 800b7a4:	f7ff ff26 	bl	800b5f4 <prvUnlockQueue>
	}
 800b7a8:	bf00      	nop
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08e      	sub	sp, #56	@ 0x38
 800b7b4:	af04      	add	r7, sp, #16
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10b      	bne.n	800b7dc <xTaskCreateStatic+0x2c>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	623b      	str	r3, [r7, #32]
}
 800b7d6:	bf00      	nop
 800b7d8:	bf00      	nop
 800b7da:	e7fd      	b.n	800b7d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10b      	bne.n	800b7fa <xTaskCreateStatic+0x4a>
	__asm volatile
 800b7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e6:	f383 8811 	msr	BASEPRI, r3
 800b7ea:	f3bf 8f6f 	isb	sy
 800b7ee:	f3bf 8f4f 	dsb	sy
 800b7f2:	61fb      	str	r3, [r7, #28]
}
 800b7f4:	bf00      	nop
 800b7f6:	bf00      	nop
 800b7f8:	e7fd      	b.n	800b7f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7fa:	235c      	movs	r3, #92	@ 0x5c
 800b7fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b5c      	cmp	r3, #92	@ 0x5c
 800b802:	d00b      	beq.n	800b81c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	61bb      	str	r3, [r7, #24]
}
 800b816:	bf00      	nop
 800b818:	bf00      	nop
 800b81a:	e7fd      	b.n	800b818 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b81c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b820:	2b00      	cmp	r3, #0
 800b822:	d01e      	beq.n	800b862 <xTaskCreateStatic+0xb2>
 800b824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b826:	2b00      	cmp	r3, #0
 800b828:	d01b      	beq.n	800b862 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b832:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b836:	2202      	movs	r2, #2
 800b838:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b83c:	2300      	movs	r3, #0
 800b83e:	9303      	str	r3, [sp, #12]
 800b840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b842:	9302      	str	r3, [sp, #8]
 800b844:	f107 0314 	add.w	r3, r7, #20
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	68b9      	ldr	r1, [r7, #8]
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 f850 	bl	800b8fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b85a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b85c:	f000 f8de 	bl	800ba1c <prvAddNewTaskToReadyList>
 800b860:	e001      	b.n	800b866 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b866:	697b      	ldr	r3, [r7, #20]
	}
 800b868:	4618      	mov	r0, r3
 800b86a:	3728      	adds	r7, #40	@ 0x28
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b870:	b580      	push	{r7, lr}
 800b872:	b08c      	sub	sp, #48	@ 0x30
 800b874:	af04      	add	r7, sp, #16
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	603b      	str	r3, [r7, #0]
 800b87c:	4613      	mov	r3, r2
 800b87e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b880:	88fb      	ldrh	r3, [r7, #6]
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4618      	mov	r0, r3
 800b886:	f7fe fda1 	bl	800a3cc <pvPortMalloc>
 800b88a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00e      	beq.n	800b8b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b892:	205c      	movs	r0, #92	@ 0x5c
 800b894:	f7fe fd9a 	bl	800a3cc <pvPortMalloc>
 800b898:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d003      	beq.n	800b8a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b8a6:	e005      	b.n	800b8b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b8a8:	6978      	ldr	r0, [r7, #20]
 800b8aa:	f7fe fe5d 	bl	800a568 <vPortFree>
 800b8ae:	e001      	b.n	800b8b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d017      	beq.n	800b8ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8c2:	88fa      	ldrh	r2, [r7, #6]
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	9303      	str	r3, [sp, #12]
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	9302      	str	r3, [sp, #8]
 800b8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ce:	9301      	str	r3, [sp, #4]
 800b8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	68b9      	ldr	r1, [r7, #8]
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 f80e 	bl	800b8fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8de:	69f8      	ldr	r0, [r7, #28]
 800b8e0:	f000 f89c 	bl	800ba1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	61bb      	str	r3, [r7, #24]
 800b8e8:	e002      	b.n	800b8f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8f0:	69bb      	ldr	r3, [r7, #24]
	}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3720      	adds	r7, #32
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b088      	sub	sp, #32
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	60f8      	str	r0, [r7, #12]
 800b902:	60b9      	str	r1, [r7, #8]
 800b904:	607a      	str	r2, [r7, #4]
 800b906:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	461a      	mov	r2, r3
 800b912:	21a5      	movs	r1, #165	@ 0xa5
 800b914:	f002 f886 	bl	800da24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b91c:	6879      	ldr	r1, [r7, #4]
 800b91e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b922:	440b      	add	r3, r1
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	f023 0307 	bic.w	r3, r3, #7
 800b930:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	f003 0307 	and.w	r3, r3, #7
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00b      	beq.n	800b954 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	617b      	str	r3, [r7, #20]
}
 800b94e:	bf00      	nop
 800b950:	bf00      	nop
 800b952:	e7fd      	b.n	800b950 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d01f      	beq.n	800b99a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b95a:	2300      	movs	r3, #0
 800b95c:	61fb      	str	r3, [r7, #28]
 800b95e:	e012      	b.n	800b986 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	4413      	add	r3, r2
 800b966:	7819      	ldrb	r1, [r3, #0]
 800b968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	4413      	add	r3, r2
 800b96e:	3334      	adds	r3, #52	@ 0x34
 800b970:	460a      	mov	r2, r1
 800b972:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	4413      	add	r3, r2
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d006      	beq.n	800b98e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	3301      	adds	r3, #1
 800b984:	61fb      	str	r3, [r7, #28]
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	2b0f      	cmp	r3, #15
 800b98a:	d9e9      	bls.n	800b960 <prvInitialiseNewTask+0x66>
 800b98c:	e000      	b.n	800b990 <prvInitialiseNewTask+0x96>
			{
				break;
 800b98e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b992:	2200      	movs	r2, #0
 800b994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b998:	e003      	b.n	800b9a2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a4:	2b37      	cmp	r3, #55	@ 0x37
 800b9a6:	d901      	bls.n	800b9ac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b9a8:	2337      	movs	r3, #55	@ 0x37
 800b9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe ff10 	bl	800a7e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ca:	3318      	adds	r3, #24
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fe ff0b 	bl	800a7e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	68f9      	ldr	r1, [r7, #12]
 800b9fa:	69b8      	ldr	r0, [r7, #24]
 800b9fc:	f7fe ff88 	bl	800a910 <pxPortInitialiseStack>
 800ba00:	4602      	mov	r2, r0
 800ba02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d002      	beq.n	800ba12 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba12:	bf00      	nop
 800ba14:	3720      	adds	r7, #32
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
	...

0800ba1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba24:	f7ff f8a8 	bl	800ab78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba28:	4b2d      	ldr	r3, [pc, #180]	@ (800bae0 <prvAddNewTaskToReadyList+0xc4>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	4a2c      	ldr	r2, [pc, #176]	@ (800bae0 <prvAddNewTaskToReadyList+0xc4>)
 800ba30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba32:	4b2c      	ldr	r3, [pc, #176]	@ (800bae4 <prvAddNewTaskToReadyList+0xc8>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d109      	bne.n	800ba4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba3a:	4a2a      	ldr	r2, [pc, #168]	@ (800bae4 <prvAddNewTaskToReadyList+0xc8>)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba40:	4b27      	ldr	r3, [pc, #156]	@ (800bae0 <prvAddNewTaskToReadyList+0xc4>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d110      	bne.n	800ba6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba48:	f000 fc92 	bl	800c370 <prvInitialiseTaskLists>
 800ba4c:	e00d      	b.n	800ba6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba4e:	4b26      	ldr	r3, [pc, #152]	@ (800bae8 <prvAddNewTaskToReadyList+0xcc>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d109      	bne.n	800ba6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba56:	4b23      	ldr	r3, [pc, #140]	@ (800bae4 <prvAddNewTaskToReadyList+0xc8>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d802      	bhi.n	800ba6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba64:	4a1f      	ldr	r2, [pc, #124]	@ (800bae4 <prvAddNewTaskToReadyList+0xc8>)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba6a:	4b20      	ldr	r3, [pc, #128]	@ (800baec <prvAddNewTaskToReadyList+0xd0>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	4a1e      	ldr	r2, [pc, #120]	@ (800baec <prvAddNewTaskToReadyList+0xd0>)
 800ba72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba74:	4b1d      	ldr	r3, [pc, #116]	@ (800baec <prvAddNewTaskToReadyList+0xd0>)
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba80:	4b1b      	ldr	r3, [pc, #108]	@ (800baf0 <prvAddNewTaskToReadyList+0xd4>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d903      	bls.n	800ba90 <prvAddNewTaskToReadyList+0x74>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba8c:	4a18      	ldr	r2, [pc, #96]	@ (800baf0 <prvAddNewTaskToReadyList+0xd4>)
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba94:	4613      	mov	r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	4413      	add	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4a15      	ldr	r2, [pc, #84]	@ (800baf4 <prvAddNewTaskToReadyList+0xd8>)
 800ba9e:	441a      	add	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3304      	adds	r3, #4
 800baa4:	4619      	mov	r1, r3
 800baa6:	4610      	mov	r0, r2
 800baa8:	f7fe feab 	bl	800a802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800baac:	f7ff f896 	bl	800abdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bab0:	4b0d      	ldr	r3, [pc, #52]	@ (800bae8 <prvAddNewTaskToReadyList+0xcc>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00e      	beq.n	800bad6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bab8:	4b0a      	ldr	r3, [pc, #40]	@ (800bae4 <prvAddNewTaskToReadyList+0xc8>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d207      	bcs.n	800bad6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bac6:	4b0c      	ldr	r3, [pc, #48]	@ (800baf8 <prvAddNewTaskToReadyList+0xdc>)
 800bac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bacc:	601a      	str	r2, [r3, #0]
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bad6:	bf00      	nop
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	24004a60 	.word	0x24004a60
 800bae4:	2400458c 	.word	0x2400458c
 800bae8:	24004a6c 	.word	0x24004a6c
 800baec:	24004a7c 	.word	0x24004a7c
 800baf0:	24004a68 	.word	0x24004a68
 800baf4:	24004590 	.word	0x24004590
 800baf8:	e000ed04 	.word	0xe000ed04

0800bafc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bb04:	f7ff f838 	bl	800ab78 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d102      	bne.n	800bb14 <vTaskDelete+0x18>
 800bb0e:	4b2d      	ldr	r3, [pc, #180]	@ (800bbc4 <vTaskDelete+0xc8>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	e000      	b.n	800bb16 <vTaskDelete+0x1a>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fe fecd 	bl	800a8bc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d004      	beq.n	800bb34 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	3318      	adds	r3, #24
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fe fec4 	bl	800a8bc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800bb34:	4b24      	ldr	r3, [pc, #144]	@ (800bbc8 <vTaskDelete+0xcc>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	4a23      	ldr	r2, [pc, #140]	@ (800bbc8 <vTaskDelete+0xcc>)
 800bb3c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800bb3e:	4b21      	ldr	r3, [pc, #132]	@ (800bbc4 <vTaskDelete+0xc8>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d10b      	bne.n	800bb60 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	481f      	ldr	r0, [pc, #124]	@ (800bbcc <vTaskDelete+0xd0>)
 800bb50:	f7fe fe57 	bl	800a802 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800bb54:	4b1e      	ldr	r3, [pc, #120]	@ (800bbd0 <vTaskDelete+0xd4>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	4a1d      	ldr	r2, [pc, #116]	@ (800bbd0 <vTaskDelete+0xd4>)
 800bb5c:	6013      	str	r3, [r2, #0]
 800bb5e:	e009      	b.n	800bb74 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800bb60:	4b1c      	ldr	r3, [pc, #112]	@ (800bbd4 <vTaskDelete+0xd8>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	3b01      	subs	r3, #1
 800bb66:	4a1b      	ldr	r2, [pc, #108]	@ (800bbd4 <vTaskDelete+0xd8>)
 800bb68:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f000 fc6e 	bl	800c44c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800bb70:	f000 fc9c 	bl	800c4ac <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800bb74:	f7ff f832 	bl	800abdc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800bb78:	4b17      	ldr	r3, [pc, #92]	@ (800bbd8 <vTaskDelete+0xdc>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d01c      	beq.n	800bbba <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800bb80:	4b10      	ldr	r3, [pc, #64]	@ (800bbc4 <vTaskDelete+0xc8>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d117      	bne.n	800bbba <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800bb8a:	4b14      	ldr	r3, [pc, #80]	@ (800bbdc <vTaskDelete+0xe0>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00b      	beq.n	800bbaa <vTaskDelete+0xae>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	60bb      	str	r3, [r7, #8]
}
 800bba4:	bf00      	nop
 800bba6:	bf00      	nop
 800bba8:	e7fd      	b.n	800bba6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800bbaa:	4b0d      	ldr	r3, [pc, #52]	@ (800bbe0 <vTaskDelete+0xe4>)
 800bbac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bbba:	bf00      	nop
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	2400458c 	.word	0x2400458c
 800bbc8:	24004a7c 	.word	0x24004a7c
 800bbcc:	24004a34 	.word	0x24004a34
 800bbd0:	24004a48 	.word	0x24004a48
 800bbd4:	24004a60 	.word	0x24004a60
 800bbd8:	24004a6c 	.word	0x24004a6c
 800bbdc:	24004a88 	.word	0x24004a88
 800bbe0:	e000ed04 	.word	0xe000ed04

0800bbe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bbec:	2300      	movs	r3, #0
 800bbee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d018      	beq.n	800bc28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bbf6:	4b14      	ldr	r3, [pc, #80]	@ (800bc48 <vTaskDelay+0x64>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00b      	beq.n	800bc16 <vTaskDelay+0x32>
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	60bb      	str	r3, [r7, #8]
}
 800bc10:	bf00      	nop
 800bc12:	bf00      	nop
 800bc14:	e7fd      	b.n	800bc12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bc16:	f000 f883 	bl	800bd20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fcf3 	bl	800c608 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc22:	f000 f88b 	bl	800bd3c <xTaskResumeAll>
 800bc26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d107      	bne.n	800bc3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bc2e:	4b07      	ldr	r3, [pc, #28]	@ (800bc4c <vTaskDelay+0x68>)
 800bc30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc34:	601a      	str	r2, [r3, #0]
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc3e:	bf00      	nop
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	24004a88 	.word	0x24004a88
 800bc4c:	e000ed04 	.word	0xe000ed04

0800bc50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b08a      	sub	sp, #40	@ 0x28
 800bc54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc56:	2300      	movs	r3, #0
 800bc58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc5e:	463a      	mov	r2, r7
 800bc60:	1d39      	adds	r1, r7, #4
 800bc62:	f107 0308 	add.w	r3, r7, #8
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7fe fb7c 	bl	800a364 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	9202      	str	r2, [sp, #8]
 800bc74:	9301      	str	r3, [sp, #4]
 800bc76:	2300      	movs	r3, #0
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	460a      	mov	r2, r1
 800bc7e:	4922      	ldr	r1, [pc, #136]	@ (800bd08 <vTaskStartScheduler+0xb8>)
 800bc80:	4822      	ldr	r0, [pc, #136]	@ (800bd0c <vTaskStartScheduler+0xbc>)
 800bc82:	f7ff fd95 	bl	800b7b0 <xTaskCreateStatic>
 800bc86:	4603      	mov	r3, r0
 800bc88:	4a21      	ldr	r2, [pc, #132]	@ (800bd10 <vTaskStartScheduler+0xc0>)
 800bc8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc8c:	4b20      	ldr	r3, [pc, #128]	@ (800bd10 <vTaskStartScheduler+0xc0>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d002      	beq.n	800bc9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc94:	2301      	movs	r3, #1
 800bc96:	617b      	str	r3, [r7, #20]
 800bc98:	e001      	b.n	800bc9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d102      	bne.n	800bcaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bca4:	f000 fd04 	bl	800c6b0 <xTimerCreateTimerTask>
 800bca8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d116      	bne.n	800bcde <vTaskStartScheduler+0x8e>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	613b      	str	r3, [r7, #16]
}
 800bcc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bcc4:	4b13      	ldr	r3, [pc, #76]	@ (800bd14 <vTaskStartScheduler+0xc4>)
 800bcc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bcca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bccc:	4b12      	ldr	r3, [pc, #72]	@ (800bd18 <vTaskStartScheduler+0xc8>)
 800bcce:	2201      	movs	r2, #1
 800bcd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bcd2:	4b12      	ldr	r3, [pc, #72]	@ (800bd1c <vTaskStartScheduler+0xcc>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bcd8:	f7fe feaa 	bl	800aa30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bcdc:	e00f      	b.n	800bcfe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bce4:	d10b      	bne.n	800bcfe <vTaskStartScheduler+0xae>
	__asm volatile
 800bce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	60fb      	str	r3, [r7, #12]
}
 800bcf8:	bf00      	nop
 800bcfa:	bf00      	nop
 800bcfc:	e7fd      	b.n	800bcfa <vTaskStartScheduler+0xaa>
}
 800bcfe:	bf00      	nop
 800bd00:	3718      	adds	r7, #24
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	0800dae8 	.word	0x0800dae8
 800bd0c:	0800c341 	.word	0x0800c341
 800bd10:	24004a84 	.word	0x24004a84
 800bd14:	24004a80 	.word	0x24004a80
 800bd18:	24004a6c 	.word	0x24004a6c
 800bd1c:	24004a64 	.word	0x24004a64

0800bd20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd20:	b480      	push	{r7}
 800bd22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bd24:	4b04      	ldr	r3, [pc, #16]	@ (800bd38 <vTaskSuspendAll+0x18>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	4a03      	ldr	r2, [pc, #12]	@ (800bd38 <vTaskSuspendAll+0x18>)
 800bd2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bd2e:	bf00      	nop
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	24004a88 	.word	0x24004a88

0800bd3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd46:	2300      	movs	r3, #0
 800bd48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd4a:	4b42      	ldr	r3, [pc, #264]	@ (800be54 <xTaskResumeAll+0x118>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10b      	bne.n	800bd6a <xTaskResumeAll+0x2e>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	603b      	str	r3, [r7, #0]
}
 800bd64:	bf00      	nop
 800bd66:	bf00      	nop
 800bd68:	e7fd      	b.n	800bd66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd6a:	f7fe ff05 	bl	800ab78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd6e:	4b39      	ldr	r3, [pc, #228]	@ (800be54 <xTaskResumeAll+0x118>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	4a37      	ldr	r2, [pc, #220]	@ (800be54 <xTaskResumeAll+0x118>)
 800bd76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd78:	4b36      	ldr	r3, [pc, #216]	@ (800be54 <xTaskResumeAll+0x118>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d162      	bne.n	800be46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd80:	4b35      	ldr	r3, [pc, #212]	@ (800be58 <xTaskResumeAll+0x11c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d05e      	beq.n	800be46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd88:	e02f      	b.n	800bdea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd8a:	4b34      	ldr	r3, [pc, #208]	@ (800be5c <xTaskResumeAll+0x120>)
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3318      	adds	r3, #24
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fe fd90 	bl	800a8bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe fd8b 	bl	800a8bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdaa:	4b2d      	ldr	r3, [pc, #180]	@ (800be60 <xTaskResumeAll+0x124>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d903      	bls.n	800bdba <xTaskResumeAll+0x7e>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb6:	4a2a      	ldr	r2, [pc, #168]	@ (800be60 <xTaskResumeAll+0x124>)
 800bdb8:	6013      	str	r3, [r2, #0]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4a27      	ldr	r2, [pc, #156]	@ (800be64 <xTaskResumeAll+0x128>)
 800bdc8:	441a      	add	r2, r3
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	3304      	adds	r3, #4
 800bdce:	4619      	mov	r1, r3
 800bdd0:	4610      	mov	r0, r2
 800bdd2:	f7fe fd16 	bl	800a802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdda:	4b23      	ldr	r3, [pc, #140]	@ (800be68 <xTaskResumeAll+0x12c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d302      	bcc.n	800bdea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bde4:	4b21      	ldr	r3, [pc, #132]	@ (800be6c <xTaskResumeAll+0x130>)
 800bde6:	2201      	movs	r2, #1
 800bde8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdea:	4b1c      	ldr	r3, [pc, #112]	@ (800be5c <xTaskResumeAll+0x120>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1cb      	bne.n	800bd8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d001      	beq.n	800bdfc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bdf8:	f000 fb58 	bl	800c4ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bdfc:	4b1c      	ldr	r3, [pc, #112]	@ (800be70 <xTaskResumeAll+0x134>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d010      	beq.n	800be2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be08:	f000 f846 	bl	800be98 <xTaskIncrementTick>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d002      	beq.n	800be18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800be12:	4b16      	ldr	r3, [pc, #88]	@ (800be6c <xTaskResumeAll+0x130>)
 800be14:	2201      	movs	r2, #1
 800be16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	3b01      	subs	r3, #1
 800be1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1f1      	bne.n	800be08 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800be24:	4b12      	ldr	r3, [pc, #72]	@ (800be70 <xTaskResumeAll+0x134>)
 800be26:	2200      	movs	r2, #0
 800be28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be2a:	4b10      	ldr	r3, [pc, #64]	@ (800be6c <xTaskResumeAll+0x130>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d009      	beq.n	800be46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be32:	2301      	movs	r3, #1
 800be34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be36:	4b0f      	ldr	r3, [pc, #60]	@ (800be74 <xTaskResumeAll+0x138>)
 800be38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be46:	f7fe fec9 	bl	800abdc <vPortExitCritical>

	return xAlreadyYielded;
 800be4a:	68bb      	ldr	r3, [r7, #8]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	24004a88 	.word	0x24004a88
 800be58:	24004a60 	.word	0x24004a60
 800be5c:	24004a20 	.word	0x24004a20
 800be60:	24004a68 	.word	0x24004a68
 800be64:	24004590 	.word	0x24004590
 800be68:	2400458c 	.word	0x2400458c
 800be6c:	24004a74 	.word	0x24004a74
 800be70:	24004a70 	.word	0x24004a70
 800be74:	e000ed04 	.word	0xe000ed04

0800be78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be7e:	4b05      	ldr	r3, [pc, #20]	@ (800be94 <xTaskGetTickCount+0x1c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be84:	687b      	ldr	r3, [r7, #4]
}
 800be86:	4618      	mov	r0, r3
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	24004a64 	.word	0x24004a64

0800be98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be9e:	2300      	movs	r3, #0
 800bea0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bea2:	4b4f      	ldr	r3, [pc, #316]	@ (800bfe0 <xTaskIncrementTick+0x148>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	f040 8090 	bne.w	800bfcc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800beac:	4b4d      	ldr	r3, [pc, #308]	@ (800bfe4 <xTaskIncrementTick+0x14c>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3301      	adds	r3, #1
 800beb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800beb4:	4a4b      	ldr	r2, [pc, #300]	@ (800bfe4 <xTaskIncrementTick+0x14c>)
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d121      	bne.n	800bf04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bec0:	4b49      	ldr	r3, [pc, #292]	@ (800bfe8 <xTaskIncrementTick+0x150>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00b      	beq.n	800bee2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800beca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	603b      	str	r3, [r7, #0]
}
 800bedc:	bf00      	nop
 800bede:	bf00      	nop
 800bee0:	e7fd      	b.n	800bede <xTaskIncrementTick+0x46>
 800bee2:	4b41      	ldr	r3, [pc, #260]	@ (800bfe8 <xTaskIncrementTick+0x150>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	60fb      	str	r3, [r7, #12]
 800bee8:	4b40      	ldr	r3, [pc, #256]	@ (800bfec <xTaskIncrementTick+0x154>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a3e      	ldr	r2, [pc, #248]	@ (800bfe8 <xTaskIncrementTick+0x150>)
 800beee:	6013      	str	r3, [r2, #0]
 800bef0:	4a3e      	ldr	r2, [pc, #248]	@ (800bfec <xTaskIncrementTick+0x154>)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6013      	str	r3, [r2, #0]
 800bef6:	4b3e      	ldr	r3, [pc, #248]	@ (800bff0 <xTaskIncrementTick+0x158>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	3301      	adds	r3, #1
 800befc:	4a3c      	ldr	r2, [pc, #240]	@ (800bff0 <xTaskIncrementTick+0x158>)
 800befe:	6013      	str	r3, [r2, #0]
 800bf00:	f000 fad4 	bl	800c4ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf04:	4b3b      	ldr	r3, [pc, #236]	@ (800bff4 <xTaskIncrementTick+0x15c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d349      	bcc.n	800bfa2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf0e:	4b36      	ldr	r3, [pc, #216]	@ (800bfe8 <xTaskIncrementTick+0x150>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d104      	bne.n	800bf22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf18:	4b36      	ldr	r3, [pc, #216]	@ (800bff4 <xTaskIncrementTick+0x15c>)
 800bf1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf1e:	601a      	str	r2, [r3, #0]
					break;
 800bf20:	e03f      	b.n	800bfa2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf22:	4b31      	ldr	r3, [pc, #196]	@ (800bfe8 <xTaskIncrementTick+0x150>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d203      	bcs.n	800bf42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf3a:	4a2e      	ldr	r2, [pc, #184]	@ (800bff4 <xTaskIncrementTick+0x15c>)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf40:	e02f      	b.n	800bfa2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	3304      	adds	r3, #4
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fe fcb8 	bl	800a8bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d004      	beq.n	800bf5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	3318      	adds	r3, #24
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fe fcaf 	bl	800a8bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf62:	4b25      	ldr	r3, [pc, #148]	@ (800bff8 <xTaskIncrementTick+0x160>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d903      	bls.n	800bf72 <xTaskIncrementTick+0xda>
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf6e:	4a22      	ldr	r2, [pc, #136]	@ (800bff8 <xTaskIncrementTick+0x160>)
 800bf70:	6013      	str	r3, [r2, #0]
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf76:	4613      	mov	r3, r2
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	4413      	add	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4a1f      	ldr	r2, [pc, #124]	@ (800bffc <xTaskIncrementTick+0x164>)
 800bf80:	441a      	add	r2, r3
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	3304      	adds	r3, #4
 800bf86:	4619      	mov	r1, r3
 800bf88:	4610      	mov	r0, r2
 800bf8a:	f7fe fc3a 	bl	800a802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf92:	4b1b      	ldr	r3, [pc, #108]	@ (800c000 <xTaskIncrementTick+0x168>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d3b8      	bcc.n	800bf0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfa0:	e7b5      	b.n	800bf0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bfa2:	4b17      	ldr	r3, [pc, #92]	@ (800c000 <xTaskIncrementTick+0x168>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfa8:	4914      	ldr	r1, [pc, #80]	@ (800bffc <xTaskIncrementTick+0x164>)
 800bfaa:	4613      	mov	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	440b      	add	r3, r1
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d901      	bls.n	800bfbe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bfbe:	4b11      	ldr	r3, [pc, #68]	@ (800c004 <xTaskIncrementTick+0x16c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d007      	beq.n	800bfd6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	617b      	str	r3, [r7, #20]
 800bfca:	e004      	b.n	800bfd6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bfcc:	4b0e      	ldr	r3, [pc, #56]	@ (800c008 <xTaskIncrementTick+0x170>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	4a0d      	ldr	r2, [pc, #52]	@ (800c008 <xTaskIncrementTick+0x170>)
 800bfd4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bfd6:	697b      	ldr	r3, [r7, #20]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	24004a88 	.word	0x24004a88
 800bfe4:	24004a64 	.word	0x24004a64
 800bfe8:	24004a18 	.word	0x24004a18
 800bfec:	24004a1c 	.word	0x24004a1c
 800bff0:	24004a78 	.word	0x24004a78
 800bff4:	24004a80 	.word	0x24004a80
 800bff8:	24004a68 	.word	0x24004a68
 800bffc:	24004590 	.word	0x24004590
 800c000:	2400458c 	.word	0x2400458c
 800c004:	24004a74 	.word	0x24004a74
 800c008:	24004a70 	.word	0x24004a70

0800c00c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c012:	4b28      	ldr	r3, [pc, #160]	@ (800c0b4 <vTaskSwitchContext+0xa8>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c01a:	4b27      	ldr	r3, [pc, #156]	@ (800c0b8 <vTaskSwitchContext+0xac>)
 800c01c:	2201      	movs	r2, #1
 800c01e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c020:	e042      	b.n	800c0a8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800c022:	4b25      	ldr	r3, [pc, #148]	@ (800c0b8 <vTaskSwitchContext+0xac>)
 800c024:	2200      	movs	r2, #0
 800c026:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c028:	4b24      	ldr	r3, [pc, #144]	@ (800c0bc <vTaskSwitchContext+0xb0>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	e011      	b.n	800c054 <vTaskSwitchContext+0x48>
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10b      	bne.n	800c04e <vTaskSwitchContext+0x42>
	__asm volatile
 800c036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	607b      	str	r3, [r7, #4]
}
 800c048:	bf00      	nop
 800c04a:	bf00      	nop
 800c04c:	e7fd      	b.n	800c04a <vTaskSwitchContext+0x3e>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3b01      	subs	r3, #1
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	491a      	ldr	r1, [pc, #104]	@ (800c0c0 <vTaskSwitchContext+0xb4>)
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	4613      	mov	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	440b      	add	r3, r1
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d0e3      	beq.n	800c030 <vTaskSwitchContext+0x24>
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	4613      	mov	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	4413      	add	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4a13      	ldr	r2, [pc, #76]	@ (800c0c0 <vTaskSwitchContext+0xb4>)
 800c074:	4413      	add	r3, r2
 800c076:	60bb      	str	r3, [r7, #8]
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	605a      	str	r2, [r3, #4]
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	685a      	ldr	r2, [r3, #4]
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	3308      	adds	r3, #8
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d104      	bne.n	800c098 <vTaskSwitchContext+0x8c>
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	685a      	ldr	r2, [r3, #4]
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	605a      	str	r2, [r3, #4]
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	4a09      	ldr	r2, [pc, #36]	@ (800c0c4 <vTaskSwitchContext+0xb8>)
 800c0a0:	6013      	str	r3, [r2, #0]
 800c0a2:	4a06      	ldr	r2, [pc, #24]	@ (800c0bc <vTaskSwitchContext+0xb0>)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6013      	str	r3, [r2, #0]
}
 800c0a8:	bf00      	nop
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	24004a88 	.word	0x24004a88
 800c0b8:	24004a74 	.word	0x24004a74
 800c0bc:	24004a68 	.word	0x24004a68
 800c0c0:	24004590 	.word	0x24004590
 800c0c4:	2400458c 	.word	0x2400458c

0800c0c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10b      	bne.n	800c0f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	60fb      	str	r3, [r7, #12]
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	e7fd      	b.n	800c0ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0f0:	4b07      	ldr	r3, [pc, #28]	@ (800c110 <vTaskPlaceOnEventList+0x48>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3318      	adds	r3, #24
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f7fe fba6 	bl	800a84a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0fe:	2101      	movs	r1, #1
 800c100:	6838      	ldr	r0, [r7, #0]
 800c102:	f000 fa81 	bl	800c608 <prvAddCurrentTaskToDelayedList>
}
 800c106:	bf00      	nop
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	2400458c 	.word	0x2400458c

0800c114 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c114:	b580      	push	{r7, lr}
 800c116:	b086      	sub	sp, #24
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10b      	bne.n	800c13e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	617b      	str	r3, [r7, #20]
}
 800c138:	bf00      	nop
 800c13a:	bf00      	nop
 800c13c:	e7fd      	b.n	800c13a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c13e:	4b0a      	ldr	r3, [pc, #40]	@ (800c168 <vTaskPlaceOnEventListRestricted+0x54>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	3318      	adds	r3, #24
 800c144:	4619      	mov	r1, r3
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7fe fb5b 	bl	800a802 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d002      	beq.n	800c158 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c156:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c158:	6879      	ldr	r1, [r7, #4]
 800c15a:	68b8      	ldr	r0, [r7, #8]
 800c15c:	f000 fa54 	bl	800c608 <prvAddCurrentTaskToDelayedList>
	}
 800c160:	bf00      	nop
 800c162:	3718      	adds	r7, #24
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	2400458c 	.word	0x2400458c

0800c16c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10b      	bne.n	800c19a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	60fb      	str	r3, [r7, #12]
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop
 800c198:	e7fd      	b.n	800c196 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	3318      	adds	r3, #24
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe fb8c 	bl	800a8bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1a4:	4b1d      	ldr	r3, [pc, #116]	@ (800c21c <xTaskRemoveFromEventList+0xb0>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d11d      	bne.n	800c1e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fe fb83 	bl	800a8bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ba:	4b19      	ldr	r3, [pc, #100]	@ (800c220 <xTaskRemoveFromEventList+0xb4>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d903      	bls.n	800c1ca <xTaskRemoveFromEventList+0x5e>
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c6:	4a16      	ldr	r2, [pc, #88]	@ (800c220 <xTaskRemoveFromEventList+0xb4>)
 800c1c8:	6013      	str	r3, [r2, #0]
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4a13      	ldr	r2, [pc, #76]	@ (800c224 <xTaskRemoveFromEventList+0xb8>)
 800c1d8:	441a      	add	r2, r3
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	f7fe fb0e 	bl	800a802 <vListInsertEnd>
 800c1e6:	e005      	b.n	800c1f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	3318      	adds	r3, #24
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	480e      	ldr	r0, [pc, #56]	@ (800c228 <xTaskRemoveFromEventList+0xbc>)
 800c1f0:	f7fe fb07 	bl	800a802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1f8:	4b0c      	ldr	r3, [pc, #48]	@ (800c22c <xTaskRemoveFromEventList+0xc0>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d905      	bls.n	800c20e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c202:	2301      	movs	r3, #1
 800c204:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c206:	4b0a      	ldr	r3, [pc, #40]	@ (800c230 <xTaskRemoveFromEventList+0xc4>)
 800c208:	2201      	movs	r2, #1
 800c20a:	601a      	str	r2, [r3, #0]
 800c20c:	e001      	b.n	800c212 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c20e:	2300      	movs	r3, #0
 800c210:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c212:	697b      	ldr	r3, [r7, #20]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	24004a88 	.word	0x24004a88
 800c220:	24004a68 	.word	0x24004a68
 800c224:	24004590 	.word	0x24004590
 800c228:	24004a20 	.word	0x24004a20
 800c22c:	2400458c 	.word	0x2400458c
 800c230:	24004a74 	.word	0x24004a74

0800c234 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c23c:	4b06      	ldr	r3, [pc, #24]	@ (800c258 <vTaskInternalSetTimeOutState+0x24>)
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c244:	4b05      	ldr	r3, [pc, #20]	@ (800c25c <vTaskInternalSetTimeOutState+0x28>)
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	605a      	str	r2, [r3, #4]
}
 800c24c:	bf00      	nop
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr
 800c258:	24004a78 	.word	0x24004a78
 800c25c:	24004a64 	.word	0x24004a64

0800c260 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b088      	sub	sp, #32
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10b      	bne.n	800c288 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	613b      	str	r3, [r7, #16]
}
 800c282:	bf00      	nop
 800c284:	bf00      	nop
 800c286:	e7fd      	b.n	800c284 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10b      	bne.n	800c2a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	60fb      	str	r3, [r7, #12]
}
 800c2a0:	bf00      	nop
 800c2a2:	bf00      	nop
 800c2a4:	e7fd      	b.n	800c2a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c2a6:	f7fe fc67 	bl	800ab78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c2aa:	4b1d      	ldr	r3, [pc, #116]	@ (800c320 <xTaskCheckForTimeOut+0xc0>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	69ba      	ldr	r2, [r7, #24]
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2c2:	d102      	bne.n	800c2ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	61fb      	str	r3, [r7, #28]
 800c2c8:	e023      	b.n	800c312 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	4b15      	ldr	r3, [pc, #84]	@ (800c324 <xTaskCheckForTimeOut+0xc4>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d007      	beq.n	800c2e6 <xTaskCheckForTimeOut+0x86>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d302      	bcc.n	800c2e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	61fb      	str	r3, [r7, #28]
 800c2e4:	e015      	b.n	800c312 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d20b      	bcs.n	800c308 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	1ad2      	subs	r2, r2, r3
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7ff ff99 	bl	800c234 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c302:	2300      	movs	r3, #0
 800c304:	61fb      	str	r3, [r7, #28]
 800c306:	e004      	b.n	800c312 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	2200      	movs	r2, #0
 800c30c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c30e:	2301      	movs	r3, #1
 800c310:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c312:	f7fe fc63 	bl	800abdc <vPortExitCritical>

	return xReturn;
 800c316:	69fb      	ldr	r3, [r7, #28]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3720      	adds	r7, #32
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	24004a64 	.word	0x24004a64
 800c324:	24004a78 	.word	0x24004a78

0800c328 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c328:	b480      	push	{r7}
 800c32a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c32c:	4b03      	ldr	r3, [pc, #12]	@ (800c33c <vTaskMissedYield+0x14>)
 800c32e:	2201      	movs	r2, #1
 800c330:	601a      	str	r2, [r3, #0]
}
 800c332:	bf00      	nop
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr
 800c33c:	24004a74 	.word	0x24004a74

0800c340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c348:	f000 f852 	bl	800c3f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c34c:	4b06      	ldr	r3, [pc, #24]	@ (800c368 <prvIdleTask+0x28>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d9f9      	bls.n	800c348 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c354:	4b05      	ldr	r3, [pc, #20]	@ (800c36c <prvIdleTask+0x2c>)
 800c356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c35a:	601a      	str	r2, [r3, #0]
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c364:	e7f0      	b.n	800c348 <prvIdleTask+0x8>
 800c366:	bf00      	nop
 800c368:	24004590 	.word	0x24004590
 800c36c:	e000ed04 	.word	0xe000ed04

0800c370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c376:	2300      	movs	r3, #0
 800c378:	607b      	str	r3, [r7, #4]
 800c37a:	e00c      	b.n	800c396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	4613      	mov	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	4a12      	ldr	r2, [pc, #72]	@ (800c3d0 <prvInitialiseTaskLists+0x60>)
 800c388:	4413      	add	r3, r2
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fe fa0c 	bl	800a7a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	3301      	adds	r3, #1
 800c394:	607b      	str	r3, [r7, #4]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b37      	cmp	r3, #55	@ 0x37
 800c39a:	d9ef      	bls.n	800c37c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c39c:	480d      	ldr	r0, [pc, #52]	@ (800c3d4 <prvInitialiseTaskLists+0x64>)
 800c39e:	f7fe fa03 	bl	800a7a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c3a2:	480d      	ldr	r0, [pc, #52]	@ (800c3d8 <prvInitialiseTaskLists+0x68>)
 800c3a4:	f7fe fa00 	bl	800a7a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c3a8:	480c      	ldr	r0, [pc, #48]	@ (800c3dc <prvInitialiseTaskLists+0x6c>)
 800c3aa:	f7fe f9fd 	bl	800a7a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c3ae:	480c      	ldr	r0, [pc, #48]	@ (800c3e0 <prvInitialiseTaskLists+0x70>)
 800c3b0:	f7fe f9fa 	bl	800a7a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c3b4:	480b      	ldr	r0, [pc, #44]	@ (800c3e4 <prvInitialiseTaskLists+0x74>)
 800c3b6:	f7fe f9f7 	bl	800a7a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c3e8 <prvInitialiseTaskLists+0x78>)
 800c3bc:	4a05      	ldr	r2, [pc, #20]	@ (800c3d4 <prvInitialiseTaskLists+0x64>)
 800c3be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c3ec <prvInitialiseTaskLists+0x7c>)
 800c3c2:	4a05      	ldr	r2, [pc, #20]	@ (800c3d8 <prvInitialiseTaskLists+0x68>)
 800c3c4:	601a      	str	r2, [r3, #0]
}
 800c3c6:	bf00      	nop
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	24004590 	.word	0x24004590
 800c3d4:	240049f0 	.word	0x240049f0
 800c3d8:	24004a04 	.word	0x24004a04
 800c3dc:	24004a20 	.word	0x24004a20
 800c3e0:	24004a34 	.word	0x24004a34
 800c3e4:	24004a4c 	.word	0x24004a4c
 800c3e8:	24004a18 	.word	0x24004a18
 800c3ec:	24004a1c 	.word	0x24004a1c

0800c3f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3f6:	e019      	b.n	800c42c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3f8:	f7fe fbbe 	bl	800ab78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3fc:	4b10      	ldr	r3, [pc, #64]	@ (800c440 <prvCheckTasksWaitingTermination+0x50>)
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	3304      	adds	r3, #4
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fe fa57 	bl	800a8bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c40e:	4b0d      	ldr	r3, [pc, #52]	@ (800c444 <prvCheckTasksWaitingTermination+0x54>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3b01      	subs	r3, #1
 800c414:	4a0b      	ldr	r2, [pc, #44]	@ (800c444 <prvCheckTasksWaitingTermination+0x54>)
 800c416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c418:	4b0b      	ldr	r3, [pc, #44]	@ (800c448 <prvCheckTasksWaitingTermination+0x58>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	3b01      	subs	r3, #1
 800c41e:	4a0a      	ldr	r2, [pc, #40]	@ (800c448 <prvCheckTasksWaitingTermination+0x58>)
 800c420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c422:	f7fe fbdb 	bl	800abdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f810 	bl	800c44c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c42c:	4b06      	ldr	r3, [pc, #24]	@ (800c448 <prvCheckTasksWaitingTermination+0x58>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1e1      	bne.n	800c3f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	24004a34 	.word	0x24004a34
 800c444:	24004a60 	.word	0x24004a60
 800c448:	24004a48 	.word	0x24004a48

0800c44c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d108      	bne.n	800c470 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c462:	4618      	mov	r0, r3
 800c464:	f7fe f880 	bl	800a568 <vPortFree>
				vPortFree( pxTCB );
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7fe f87d 	bl	800a568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c46e:	e019      	b.n	800c4a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c476:	2b01      	cmp	r3, #1
 800c478:	d103      	bne.n	800c482 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f7fe f874 	bl	800a568 <vPortFree>
	}
 800c480:	e010      	b.n	800c4a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d00b      	beq.n	800c4a4 <prvDeleteTCB+0x58>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	60fb      	str	r3, [r7, #12]
}
 800c49e:	bf00      	nop
 800c4a0:	bf00      	nop
 800c4a2:	e7fd      	b.n	800c4a0 <prvDeleteTCB+0x54>
	}
 800c4a4:	bf00      	nop
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c4e4 <prvResetNextTaskUnblockTime+0x38>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d104      	bne.n	800c4c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c4e8 <prvResetNextTaskUnblockTime+0x3c>)
 800c4be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c4c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c4c4:	e008      	b.n	800c4d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c6:	4b07      	ldr	r3, [pc, #28]	@ (800c4e4 <prvResetNextTaskUnblockTime+0x38>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	4a04      	ldr	r2, [pc, #16]	@ (800c4e8 <prvResetNextTaskUnblockTime+0x3c>)
 800c4d6:	6013      	str	r3, [r2, #0]
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr
 800c4e4:	24004a18 	.word	0x24004a18
 800c4e8:	24004a80 	.word	0x24004a80

0800c4ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4f2:	4b0b      	ldr	r3, [pc, #44]	@ (800c520 <xTaskGetSchedulerState+0x34>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d102      	bne.n	800c500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	607b      	str	r3, [r7, #4]
 800c4fe:	e008      	b.n	800c512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c500:	4b08      	ldr	r3, [pc, #32]	@ (800c524 <xTaskGetSchedulerState+0x38>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d102      	bne.n	800c50e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c508:	2302      	movs	r3, #2
 800c50a:	607b      	str	r3, [r7, #4]
 800c50c:	e001      	b.n	800c512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c50e:	2300      	movs	r3, #0
 800c510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c512:	687b      	ldr	r3, [r7, #4]
	}
 800c514:	4618      	mov	r0, r3
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	24004a6c 	.word	0x24004a6c
 800c524:	24004a88 	.word	0x24004a88

0800c528 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c534:	2300      	movs	r3, #0
 800c536:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d058      	beq.n	800c5f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c53e:	4b2f      	ldr	r3, [pc, #188]	@ (800c5fc <xTaskPriorityDisinherit+0xd4>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	693a      	ldr	r2, [r7, #16]
 800c544:	429a      	cmp	r2, r3
 800c546:	d00b      	beq.n	800c560 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c54c:	f383 8811 	msr	BASEPRI, r3
 800c550:	f3bf 8f6f 	isb	sy
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	60fb      	str	r3, [r7, #12]
}
 800c55a:	bf00      	nop
 800c55c:	bf00      	nop
 800c55e:	e7fd      	b.n	800c55c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c564:	2b00      	cmp	r3, #0
 800c566:	d10b      	bne.n	800c580 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	60bb      	str	r3, [r7, #8]
}
 800c57a:	bf00      	nop
 800c57c:	bf00      	nop
 800c57e:	e7fd      	b.n	800c57c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c584:	1e5a      	subs	r2, r3, #1
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c592:	429a      	cmp	r2, r3
 800c594:	d02c      	beq.n	800c5f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d128      	bne.n	800c5f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fe f98a 	bl	800a8bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5c0:	4b0f      	ldr	r3, [pc, #60]	@ (800c600 <xTaskPriorityDisinherit+0xd8>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d903      	bls.n	800c5d0 <xTaskPriorityDisinherit+0xa8>
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c600 <xTaskPriorityDisinherit+0xd8>)
 800c5ce:	6013      	str	r3, [r2, #0]
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	4a09      	ldr	r2, [pc, #36]	@ (800c604 <xTaskPriorityDisinherit+0xdc>)
 800c5de:	441a      	add	r2, r3
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	f7fe f90b 	bl	800a802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5f0:	697b      	ldr	r3, [r7, #20]
	}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3718      	adds	r7, #24
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	2400458c 	.word	0x2400458c
 800c600:	24004a68 	.word	0x24004a68
 800c604:	24004590 	.word	0x24004590

0800c608 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c612:	4b21      	ldr	r3, [pc, #132]	@ (800c698 <prvAddCurrentTaskToDelayedList+0x90>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c618:	4b20      	ldr	r3, [pc, #128]	@ (800c69c <prvAddCurrentTaskToDelayedList+0x94>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3304      	adds	r3, #4
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fe f94c 	bl	800a8bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c62a:	d10a      	bne.n	800c642 <prvAddCurrentTaskToDelayedList+0x3a>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d007      	beq.n	800c642 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c632:	4b1a      	ldr	r3, [pc, #104]	@ (800c69c <prvAddCurrentTaskToDelayedList+0x94>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3304      	adds	r3, #4
 800c638:	4619      	mov	r1, r3
 800c63a:	4819      	ldr	r0, [pc, #100]	@ (800c6a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c63c:	f7fe f8e1 	bl	800a802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c640:	e026      	b.n	800c690 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4413      	add	r3, r2
 800c648:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c64a:	4b14      	ldr	r3, [pc, #80]	@ (800c69c <prvAddCurrentTaskToDelayedList+0x94>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	429a      	cmp	r2, r3
 800c658:	d209      	bcs.n	800c66e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c65a:	4b12      	ldr	r3, [pc, #72]	@ (800c6a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	4b0f      	ldr	r3, [pc, #60]	@ (800c69c <prvAddCurrentTaskToDelayedList+0x94>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3304      	adds	r3, #4
 800c664:	4619      	mov	r1, r3
 800c666:	4610      	mov	r0, r2
 800c668:	f7fe f8ef 	bl	800a84a <vListInsert>
}
 800c66c:	e010      	b.n	800c690 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c66e:	4b0e      	ldr	r3, [pc, #56]	@ (800c6a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	4b0a      	ldr	r3, [pc, #40]	@ (800c69c <prvAddCurrentTaskToDelayedList+0x94>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	3304      	adds	r3, #4
 800c678:	4619      	mov	r1, r3
 800c67a:	4610      	mov	r0, r2
 800c67c:	f7fe f8e5 	bl	800a84a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c680:	4b0a      	ldr	r3, [pc, #40]	@ (800c6ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	429a      	cmp	r2, r3
 800c688:	d202      	bcs.n	800c690 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c68a:	4a08      	ldr	r2, [pc, #32]	@ (800c6ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	6013      	str	r3, [r2, #0]
}
 800c690:	bf00      	nop
 800c692:	3710      	adds	r7, #16
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	24004a64 	.word	0x24004a64
 800c69c:	2400458c 	.word	0x2400458c
 800c6a0:	24004a4c 	.word	0x24004a4c
 800c6a4:	24004a1c 	.word	0x24004a1c
 800c6a8:	24004a18 	.word	0x24004a18
 800c6ac:	24004a80 	.word	0x24004a80

0800c6b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08a      	sub	sp, #40	@ 0x28
 800c6b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c6ba:	f000 fb13 	bl	800cce4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c6be:	4b1d      	ldr	r3, [pc, #116]	@ (800c734 <xTimerCreateTimerTask+0x84>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d021      	beq.n	800c70a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c6ce:	1d3a      	adds	r2, r7, #4
 800c6d0:	f107 0108 	add.w	r1, r7, #8
 800c6d4:	f107 030c 	add.w	r3, r7, #12
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7fd fe5d 	bl	800a398 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c6de:	6879      	ldr	r1, [r7, #4]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	9202      	str	r2, [sp, #8]
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	460a      	mov	r2, r1
 800c6f0:	4911      	ldr	r1, [pc, #68]	@ (800c738 <xTimerCreateTimerTask+0x88>)
 800c6f2:	4812      	ldr	r0, [pc, #72]	@ (800c73c <xTimerCreateTimerTask+0x8c>)
 800c6f4:	f7ff f85c 	bl	800b7b0 <xTaskCreateStatic>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	4a11      	ldr	r2, [pc, #68]	@ (800c740 <xTimerCreateTimerTask+0x90>)
 800c6fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c6fe:	4b10      	ldr	r3, [pc, #64]	@ (800c740 <xTimerCreateTimerTask+0x90>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d001      	beq.n	800c70a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c706:	2301      	movs	r3, #1
 800c708:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10b      	bne.n	800c728 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	613b      	str	r3, [r7, #16]
}
 800c722:	bf00      	nop
 800c724:	bf00      	nop
 800c726:	e7fd      	b.n	800c724 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c728:	697b      	ldr	r3, [r7, #20]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3718      	adds	r7, #24
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	24004abc 	.word	0x24004abc
 800c738:	0800daf0 	.word	0x0800daf0
 800c73c:	0800c87d 	.word	0x0800c87d
 800c740:	24004ac0 	.word	0x24004ac0

0800c744 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b08a      	sub	sp, #40	@ 0x28
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	607a      	str	r2, [r7, #4]
 800c750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c752:	2300      	movs	r3, #0
 800c754:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10b      	bne.n	800c774 <xTimerGenericCommand+0x30>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	623b      	str	r3, [r7, #32]
}
 800c76e:	bf00      	nop
 800c770:	bf00      	nop
 800c772:	e7fd      	b.n	800c770 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c774:	4b19      	ldr	r3, [pc, #100]	@ (800c7dc <xTimerGenericCommand+0x98>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d02a      	beq.n	800c7d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	2b05      	cmp	r3, #5
 800c78c:	dc18      	bgt.n	800c7c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c78e:	f7ff fead 	bl	800c4ec <xTaskGetSchedulerState>
 800c792:	4603      	mov	r3, r0
 800c794:	2b02      	cmp	r3, #2
 800c796:	d109      	bne.n	800c7ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c798:	4b10      	ldr	r3, [pc, #64]	@ (800c7dc <xTimerGenericCommand+0x98>)
 800c79a:	6818      	ldr	r0, [r3, #0]
 800c79c:	f107 0110 	add.w	r1, r7, #16
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7a4:	f7fe fc14 	bl	800afd0 <xQueueGenericSend>
 800c7a8:	6278      	str	r0, [r7, #36]	@ 0x24
 800c7aa:	e012      	b.n	800c7d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c7ac:	4b0b      	ldr	r3, [pc, #44]	@ (800c7dc <xTimerGenericCommand+0x98>)
 800c7ae:	6818      	ldr	r0, [r3, #0]
 800c7b0:	f107 0110 	add.w	r1, r7, #16
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f7fe fc0a 	bl	800afd0 <xQueueGenericSend>
 800c7bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800c7be:	e008      	b.n	800c7d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c7c0:	4b06      	ldr	r3, [pc, #24]	@ (800c7dc <xTimerGenericCommand+0x98>)
 800c7c2:	6818      	ldr	r0, [r3, #0]
 800c7c4:	f107 0110 	add.w	r1, r7, #16
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	683a      	ldr	r2, [r7, #0]
 800c7cc:	f7fe fd02 	bl	800b1d4 <xQueueGenericSendFromISR>
 800c7d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3728      	adds	r7, #40	@ 0x28
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	24004abc 	.word	0x24004abc

0800c7e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b088      	sub	sp, #32
 800c7e4:	af02      	add	r7, sp, #8
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ea:	4b23      	ldr	r3, [pc, #140]	@ (800c878 <prvProcessExpiredTimer+0x98>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fe f85f 	bl	800a8bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c804:	f003 0304 	and.w	r3, r3, #4
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d023      	beq.n	800c854 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	699a      	ldr	r2, [r3, #24]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	18d1      	adds	r1, r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	6978      	ldr	r0, [r7, #20]
 800c81a:	f000 f8d5 	bl	800c9c8 <prvInsertTimerInActiveList>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d020      	beq.n	800c866 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c824:	2300      	movs	r3, #0
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	2300      	movs	r3, #0
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	2100      	movs	r1, #0
 800c82e:	6978      	ldr	r0, [r7, #20]
 800c830:	f7ff ff88 	bl	800c744 <xTimerGenericCommand>
 800c834:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d114      	bne.n	800c866 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	60fb      	str	r3, [r7, #12]
}
 800c84e:	bf00      	nop
 800c850:	bf00      	nop
 800c852:	e7fd      	b.n	800c850 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c85a:	f023 0301 	bic.w	r3, r3, #1
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	6978      	ldr	r0, [r7, #20]
 800c86c:	4798      	blx	r3
}
 800c86e:	bf00      	nop
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	24004ab4 	.word	0x24004ab4

0800c87c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c884:	f107 0308 	add.w	r3, r7, #8
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 f859 	bl	800c940 <prvGetNextExpireTime>
 800c88e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	4619      	mov	r1, r3
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f000 f805 	bl	800c8a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c89a:	f000 f8d7 	bl	800ca4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c89e:	bf00      	nop
 800c8a0:	e7f0      	b.n	800c884 <prvTimerTask+0x8>
	...

0800c8a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c8ae:	f7ff fa37 	bl	800bd20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8b2:	f107 0308 	add.w	r3, r7, #8
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f000 f866 	bl	800c988 <prvSampleTimeNow>
 800c8bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d130      	bne.n	800c926 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10a      	bne.n	800c8e0 <prvProcessTimerOrBlockTask+0x3c>
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d806      	bhi.n	800c8e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c8d2:	f7ff fa33 	bl	800bd3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c8d6:	68f9      	ldr	r1, [r7, #12]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f7ff ff81 	bl	800c7e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c8de:	e024      	b.n	800c92a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d008      	beq.n	800c8f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c8e6:	4b13      	ldr	r3, [pc, #76]	@ (800c934 <prvProcessTimerOrBlockTask+0x90>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d101      	bne.n	800c8f4 <prvProcessTimerOrBlockTask+0x50>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e000      	b.n	800c8f6 <prvProcessTimerOrBlockTask+0x52>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c8f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c938 <prvProcessTimerOrBlockTask+0x94>)
 800c8fa:	6818      	ldr	r0, [r3, #0]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	683a      	ldr	r2, [r7, #0]
 800c904:	4619      	mov	r1, r3
 800c906:	f7fe ff1f 	bl	800b748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c90a:	f7ff fa17 	bl	800bd3c <xTaskResumeAll>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10a      	bne.n	800c92a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c914:	4b09      	ldr	r3, [pc, #36]	@ (800c93c <prvProcessTimerOrBlockTask+0x98>)
 800c916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c91a:	601a      	str	r2, [r3, #0]
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	f3bf 8f6f 	isb	sy
}
 800c924:	e001      	b.n	800c92a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c926:	f7ff fa09 	bl	800bd3c <xTaskResumeAll>
}
 800c92a:	bf00      	nop
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	24004ab8 	.word	0x24004ab8
 800c938:	24004abc 	.word	0x24004abc
 800c93c:	e000ed04 	.word	0xe000ed04

0800c940 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c948:	4b0e      	ldr	r3, [pc, #56]	@ (800c984 <prvGetNextExpireTime+0x44>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <prvGetNextExpireTime+0x16>
 800c952:	2201      	movs	r2, #1
 800c954:	e000      	b.n	800c958 <prvGetNextExpireTime+0x18>
 800c956:	2200      	movs	r2, #0
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d105      	bne.n	800c970 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c964:	4b07      	ldr	r3, [pc, #28]	@ (800c984 <prvGetNextExpireTime+0x44>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	60fb      	str	r3, [r7, #12]
 800c96e:	e001      	b.n	800c974 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c970:	2300      	movs	r3, #0
 800c972:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c974:	68fb      	ldr	r3, [r7, #12]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3714      	adds	r7, #20
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	24004ab4 	.word	0x24004ab4

0800c988 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c990:	f7ff fa72 	bl	800be78 <xTaskGetTickCount>
 800c994:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c996:	4b0b      	ldr	r3, [pc, #44]	@ (800c9c4 <prvSampleTimeNow+0x3c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d205      	bcs.n	800c9ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c9a0:	f000 f93a 	bl	800cc18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	e002      	b.n	800c9b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c9b2:	4a04      	ldr	r2, [pc, #16]	@ (800c9c4 <prvSampleTimeNow+0x3c>)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	24004ac4 	.word	0x24004ac4

0800c9c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
 800c9d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d812      	bhi.n	800ca14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	1ad2      	subs	r2, r2, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	699b      	ldr	r3, [r3, #24]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d302      	bcc.n	800ca02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	e01b      	b.n	800ca3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ca02:	4b10      	ldr	r3, [pc, #64]	@ (800ca44 <prvInsertTimerInActiveList+0x7c>)
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3304      	adds	r3, #4
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	f7fd ff1c 	bl	800a84a <vListInsert>
 800ca12:	e012      	b.n	800ca3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d206      	bcs.n	800ca2a <prvInsertTimerInActiveList+0x62>
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d302      	bcc.n	800ca2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ca24:	2301      	movs	r3, #1
 800ca26:	617b      	str	r3, [r7, #20]
 800ca28:	e007      	b.n	800ca3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca2a:	4b07      	ldr	r3, [pc, #28]	@ (800ca48 <prvInsertTimerInActiveList+0x80>)
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3304      	adds	r3, #4
 800ca32:	4619      	mov	r1, r3
 800ca34:	4610      	mov	r0, r2
 800ca36:	f7fd ff08 	bl	800a84a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ca3a:	697b      	ldr	r3, [r7, #20]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3718      	adds	r7, #24
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	24004ab8 	.word	0x24004ab8
 800ca48:	24004ab4 	.word	0x24004ab4

0800ca4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08e      	sub	sp, #56	@ 0x38
 800ca50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca52:	e0ce      	b.n	800cbf2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	da19      	bge.n	800ca8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca5a:	1d3b      	adds	r3, r7, #4
 800ca5c:	3304      	adds	r3, #4
 800ca5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10b      	bne.n	800ca7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	61fb      	str	r3, [r7, #28]
}
 800ca78:	bf00      	nop
 800ca7a:	bf00      	nop
 800ca7c:	e7fd      	b.n	800ca7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca84:	6850      	ldr	r0, [r2, #4]
 800ca86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca88:	6892      	ldr	r2, [r2, #8]
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	f2c0 80ae 	blt.w	800cbf2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9c:	695b      	ldr	r3, [r3, #20]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d004      	beq.n	800caac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800caa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa4:	3304      	adds	r3, #4
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7fd ff08 	bl	800a8bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800caac:	463b      	mov	r3, r7
 800caae:	4618      	mov	r0, r3
 800cab0:	f7ff ff6a 	bl	800c988 <prvSampleTimeNow>
 800cab4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b09      	cmp	r3, #9
 800caba:	f200 8097 	bhi.w	800cbec <prvProcessReceivedCommands+0x1a0>
 800cabe:	a201      	add	r2, pc, #4	@ (adr r2, 800cac4 <prvProcessReceivedCommands+0x78>)
 800cac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac4:	0800caed 	.word	0x0800caed
 800cac8:	0800caed 	.word	0x0800caed
 800cacc:	0800caed 	.word	0x0800caed
 800cad0:	0800cb63 	.word	0x0800cb63
 800cad4:	0800cb77 	.word	0x0800cb77
 800cad8:	0800cbc3 	.word	0x0800cbc3
 800cadc:	0800caed 	.word	0x0800caed
 800cae0:	0800caed 	.word	0x0800caed
 800cae4:	0800cb63 	.word	0x0800cb63
 800cae8:	0800cb77 	.word	0x0800cb77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800caec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800caf2:	f043 0301 	orr.w	r3, r3, #1
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	18d1      	adds	r1, r2, r3
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb0c:	f7ff ff5c 	bl	800c9c8 <prvInsertTimerInActiveList>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d06c      	beq.n	800cbf0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb18:	6a1b      	ldr	r3, [r3, #32]
 800cb1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb24:	f003 0304 	and.w	r3, r3, #4
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d061      	beq.n	800cbf0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	441a      	add	r2, r3
 800cb34:	2300      	movs	r3, #0
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	2300      	movs	r3, #0
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb3e:	f7ff fe01 	bl	800c744 <xTimerGenericCommand>
 800cb42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb44:	6a3b      	ldr	r3, [r7, #32]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d152      	bne.n	800cbf0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cb4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb4e:	f383 8811 	msr	BASEPRI, r3
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	61bb      	str	r3, [r7, #24]
}
 800cb5c:	bf00      	nop
 800cb5e:	bf00      	nop
 800cb60:	e7fd      	b.n	800cb5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb68:	f023 0301 	bic.w	r3, r3, #1
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cb74:	e03d      	b.n	800cbf2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb7c:	f043 0301 	orr.w	r3, r3, #1
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb90:	699b      	ldr	r3, [r3, #24]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10b      	bne.n	800cbae <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb9a:	f383 8811 	msr	BASEPRI, r3
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	617b      	str	r3, [r7, #20]
}
 800cba8:	bf00      	nop
 800cbaa:	bf00      	nop
 800cbac:	e7fd      	b.n	800cbaa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb0:	699a      	ldr	r2, [r3, #24]
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb4:	18d1      	adds	r1, r2, r3
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbbc:	f7ff ff04 	bl	800c9c8 <prvInsertTimerInActiveList>
					break;
 800cbc0:	e017      	b.n	800cbf2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbc8:	f003 0302 	and.w	r3, r3, #2
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d103      	bne.n	800cbd8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cbd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbd2:	f7fd fcc9 	bl	800a568 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cbd6:	e00c      	b.n	800cbf2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbde:	f023 0301 	bic.w	r3, r3, #1
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cbea:	e002      	b.n	800cbf2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cbec:	bf00      	nop
 800cbee:	e000      	b.n	800cbf2 <prvProcessReceivedCommands+0x1a6>
					break;
 800cbf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbf2:	4b08      	ldr	r3, [pc, #32]	@ (800cc14 <prvProcessReceivedCommands+0x1c8>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	1d39      	adds	r1, r7, #4
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fe fb88 	bl	800b310 <xQueueReceive>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	f47f af26 	bne.w	800ca54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cc08:	bf00      	nop
 800cc0a:	bf00      	nop
 800cc0c:	3730      	adds	r7, #48	@ 0x30
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	24004abc 	.word	0x24004abc

0800cc18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b088      	sub	sp, #32
 800cc1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc1e:	e049      	b.n	800ccb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc20:	4b2e      	ldr	r3, [pc, #184]	@ (800ccdc <prvSwitchTimerLists+0xc4>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc2a:	4b2c      	ldr	r3, [pc, #176]	@ (800ccdc <prvSwitchTimerLists+0xc4>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	3304      	adds	r3, #4
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fd fe3f 	bl	800a8bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6a1b      	ldr	r3, [r3, #32]
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc4c:	f003 0304 	and.w	r3, r3, #4
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d02f      	beq.n	800ccb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	693a      	ldr	r2, [r7, #16]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d90e      	bls.n	800cc84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc72:	4b1a      	ldr	r3, [pc, #104]	@ (800ccdc <prvSwitchTimerLists+0xc4>)
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	3304      	adds	r3, #4
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	4610      	mov	r0, r2
 800cc7e:	f7fd fde4 	bl	800a84a <vListInsert>
 800cc82:	e017      	b.n	800ccb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc84:	2300      	movs	r3, #0
 800cc86:	9300      	str	r3, [sp, #0]
 800cc88:	2300      	movs	r3, #0
 800cc8a:	693a      	ldr	r2, [r7, #16]
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f7ff fd58 	bl	800c744 <xTimerGenericCommand>
 800cc94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10b      	bne.n	800ccb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	603b      	str	r3, [r7, #0]
}
 800ccae:	bf00      	nop
 800ccb0:	bf00      	nop
 800ccb2:	e7fd      	b.n	800ccb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ccb4:	4b09      	ldr	r3, [pc, #36]	@ (800ccdc <prvSwitchTimerLists+0xc4>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1b0      	bne.n	800cc20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ccbe:	4b07      	ldr	r3, [pc, #28]	@ (800ccdc <prvSwitchTimerLists+0xc4>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ccc4:	4b06      	ldr	r3, [pc, #24]	@ (800cce0 <prvSwitchTimerLists+0xc8>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a04      	ldr	r2, [pc, #16]	@ (800ccdc <prvSwitchTimerLists+0xc4>)
 800ccca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cccc:	4a04      	ldr	r2, [pc, #16]	@ (800cce0 <prvSwitchTimerLists+0xc8>)
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	6013      	str	r3, [r2, #0]
}
 800ccd2:	bf00      	nop
 800ccd4:	3718      	adds	r7, #24
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	24004ab4 	.word	0x24004ab4
 800cce0:	24004ab8 	.word	0x24004ab8

0800cce4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ccea:	f7fd ff45 	bl	800ab78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ccee:	4b15      	ldr	r3, [pc, #84]	@ (800cd44 <prvCheckForValidListAndQueue+0x60>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d120      	bne.n	800cd38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ccf6:	4814      	ldr	r0, [pc, #80]	@ (800cd48 <prvCheckForValidListAndQueue+0x64>)
 800ccf8:	f7fd fd56 	bl	800a7a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ccfc:	4813      	ldr	r0, [pc, #76]	@ (800cd4c <prvCheckForValidListAndQueue+0x68>)
 800ccfe:	f7fd fd53 	bl	800a7a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cd02:	4b13      	ldr	r3, [pc, #76]	@ (800cd50 <prvCheckForValidListAndQueue+0x6c>)
 800cd04:	4a10      	ldr	r2, [pc, #64]	@ (800cd48 <prvCheckForValidListAndQueue+0x64>)
 800cd06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cd08:	4b12      	ldr	r3, [pc, #72]	@ (800cd54 <prvCheckForValidListAndQueue+0x70>)
 800cd0a:	4a10      	ldr	r2, [pc, #64]	@ (800cd4c <prvCheckForValidListAndQueue+0x68>)
 800cd0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cd0e:	2300      	movs	r3, #0
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	4b11      	ldr	r3, [pc, #68]	@ (800cd58 <prvCheckForValidListAndQueue+0x74>)
 800cd14:	4a11      	ldr	r2, [pc, #68]	@ (800cd5c <prvCheckForValidListAndQueue+0x78>)
 800cd16:	2110      	movs	r1, #16
 800cd18:	200a      	movs	r0, #10
 800cd1a:	f7fe f8b9 	bl	800ae90 <xQueueGenericCreateStatic>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	4a08      	ldr	r2, [pc, #32]	@ (800cd44 <prvCheckForValidListAndQueue+0x60>)
 800cd22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd24:	4b07      	ldr	r3, [pc, #28]	@ (800cd44 <prvCheckForValidListAndQueue+0x60>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d005      	beq.n	800cd38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd2c:	4b05      	ldr	r3, [pc, #20]	@ (800cd44 <prvCheckForValidListAndQueue+0x60>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	490b      	ldr	r1, [pc, #44]	@ (800cd60 <prvCheckForValidListAndQueue+0x7c>)
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fe fcde 	bl	800b6f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd38:	f7fd ff50 	bl	800abdc <vPortExitCritical>
}
 800cd3c:	bf00      	nop
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	24004abc 	.word	0x24004abc
 800cd48:	24004a8c 	.word	0x24004a8c
 800cd4c:	24004aa0 	.word	0x24004aa0
 800cd50:	24004ab4 	.word	0x24004ab4
 800cd54:	24004ab8 	.word	0x24004ab8
 800cd58:	24004b68 	.word	0x24004b68
 800cd5c:	24004ac8 	.word	0x24004ac8
 800cd60:	0800daf8 	.word	0x0800daf8

0800cd64 <idle_task>:
#include "task_header.h"

void idle_task(void *argument)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
	while (1){
 800cd6c:	bf00      	nop
 800cd6e:	e7fd      	b.n	800cd6c <idle_task+0x8>

0800cd70 <Ds18b20_Init>:
  .name = "Task_Ds18b20",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow1,
};
void	Ds18b20_Init(osPriority Priority)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]

  Ds18b20Handle = osThreadNew(Task_Ds18b20,NULL,&Task_Ds18b20_attributes);
 800cd78:	4a05      	ldr	r2, [pc, #20]	@ (800cd90 <Ds18b20_Init+0x20>)
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	4805      	ldr	r0, [pc, #20]	@ (800cd94 <Ds18b20_Init+0x24>)
 800cd7e:	f7fd fa23 	bl	800a1c8 <osThreadNew>
 800cd82:	4603      	mov	r3, r0
 800cd84:	4a04      	ldr	r2, [pc, #16]	@ (800cd98 <Ds18b20_Init+0x28>)
 800cd86:	6013      	str	r3, [r2, #0]
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	0800dc70 	.word	0x0800dc70
 800cd94:	0800cd9d 	.word	0x0800cd9d
 800cd98:	24004be4 	.word	0x24004be4

0800cd9c <Task_Ds18b20>:
	#endif
}
//###########################################################################################
#if (_DS18B20_USE_FREERTOS==1)
void Task_Ds18b20(void const * argument)
{
 800cd9c:	b590      	push	{r4, r7, lr}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
	uint8_t	Ds18b20TryToFind=5;
 800cda4:	2305      	movs	r3, #5
 800cda6:	73fb      	strb	r3, [r7, #15]
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 800cda8:	2201      	movs	r2, #1
 800cdaa:	4969      	ldr	r1, [pc, #420]	@ (800cf50 <Task_Ds18b20+0x1b4>)
 800cdac:	4869      	ldr	r0, [pc, #420]	@ (800cf54 <Task_Ds18b20+0x1b8>)
 800cdae:	f000 fb61 	bl	800d474 <OneWire_Init>
		TempSensorCount = 0;	
 800cdb2:	4b69      	ldr	r3, [pc, #420]	@ (800cf58 <Task_Ds18b20+0x1bc>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 800cdb8:	e002      	b.n	800cdc0 <Task_Ds18b20+0x24>
			Ds18b20Delay(100);
 800cdba:	2064      	movs	r0, #100	@ 0x64
 800cdbc:	f7fd fab6 	bl	800a32c <osDelay>
		while(HAL_GetTick() < 3000)
 800cdc0:	f7f4 fb20 	bl	8001404 <HAL_GetTick>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d9f5      	bls.n	800cdba <Task_Ds18b20+0x1e>
		OneWireDevices = OneWire_First(&OneWire);
 800cdce:	4861      	ldr	r0, [pc, #388]	@ (800cf54 <Task_Ds18b20+0x1b8>)
 800cdd0:	f000 fc43 	bl	800d65a <OneWire_First>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	4b60      	ldr	r3, [pc, #384]	@ (800cf5c <Task_Ds18b20+0x1c0>)
 800cdda:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 800cddc:	e019      	b.n	800ce12 <Task_Ds18b20+0x76>
		{
			Ds18b20Delay(100);
 800cdde:	2064      	movs	r0, #100	@ 0x64
 800cde0:	f7fd faa4 	bl	800a32c <osDelay>
			TempSensorCount++;
 800cde4:	4b5c      	ldr	r3, [pc, #368]	@ (800cf58 <Task_Ds18b20+0x1bc>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	3301      	adds	r3, #1
 800cdea:	b2da      	uxtb	r2, r3
 800cdec:	4b5a      	ldr	r3, [pc, #360]	@ (800cf58 <Task_Ds18b20+0x1bc>)
 800cdee:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 800cdf0:	4b59      	ldr	r3, [pc, #356]	@ (800cf58 <Task_Ds18b20+0x1bc>)
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	011b      	lsls	r3, r3, #4
 800cdf8:	4a59      	ldr	r2, [pc, #356]	@ (800cf60 <Task_Ds18b20+0x1c4>)
 800cdfa:	4413      	add	r3, r2
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	4855      	ldr	r0, [pc, #340]	@ (800cf54 <Task_Ds18b20+0x1b8>)
 800ce00:	f000 fd40 	bl	800d884 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 800ce04:	4853      	ldr	r0, [pc, #332]	@ (800cf54 <Task_Ds18b20+0x1b8>)
 800ce06:	f000 fc38 	bl	800d67a <OneWire_Next>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	4b53      	ldr	r3, [pc, #332]	@ (800cf5c <Task_Ds18b20+0x1c0>)
 800ce10:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 800ce12:	4b52      	ldr	r3, [pc, #328]	@ (800cf5c <Task_Ds18b20+0x1c0>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1e1      	bne.n	800cdde <Task_Ds18b20+0x42>
		}
		if(TempSensorCount>0)
 800ce1a:	4b4f      	ldr	r3, [pc, #316]	@ (800cf58 <Task_Ds18b20+0x1bc>)
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d106      	bne.n	800ce30 <Task_Ds18b20+0x94>
			break;
		Ds18b20TryToFind--;
 800ce22:	7bfb      	ldrb	r3, [r7, #15]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	73fb      	strb	r3, [r7, #15]
	}while(Ds18b20TryToFind>0);
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1bc      	bne.n	800cda8 <Task_Ds18b20+0xc>
 800ce2e:	e000      	b.n	800ce32 <Task_Ds18b20+0x96>
			break;
 800ce30:	bf00      	nop
	if(Ds18b20TryToFind==0)
 800ce32:	7bfb      	ldrb	r3, [r7, #15]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d104      	bne.n	800ce42 <Task_Ds18b20+0xa6>
		vTaskDelete(Ds18b20Handle);
 800ce38:	4b4a      	ldr	r3, [pc, #296]	@ (800cf64 <Task_Ds18b20+0x1c8>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fe fe5d 	bl	800bafc <vTaskDelete>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800ce42:	2300      	movs	r3, #0
 800ce44:	73bb      	strb	r3, [r7, #14]
 800ce46:	e019      	b.n	800ce7c <Task_Ds18b20+0xe0>
	{
		Ds18b20Delay(50);
 800ce48:	2032      	movs	r0, #50	@ 0x32
 800ce4a:	f7fd fa6f 	bl	800a32c <osDelay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 800ce4e:	7bbb      	ldrb	r3, [r7, #14]
 800ce50:	011b      	lsls	r3, r3, #4
 800ce52:	4a43      	ldr	r2, [pc, #268]	@ (800cf60 <Task_Ds18b20+0x1c4>)
 800ce54:	4413      	add	r3, r2
 800ce56:	220c      	movs	r2, #12
 800ce58:	4619      	mov	r1, r3
 800ce5a:	483e      	ldr	r0, [pc, #248]	@ (800cf54 <Task_Ds18b20+0x1b8>)
 800ce5c:	f000 f99e 	bl	800d19c <DS18B20_SetResolution>
		Ds18b20Delay(50);
 800ce60:	2032      	movs	r0, #50	@ 0x32
 800ce62:	f7fd fa63 	bl	800a32c <osDelay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 800ce66:	7bbb      	ldrb	r3, [r7, #14]
 800ce68:	011b      	lsls	r3, r3, #4
 800ce6a:	4a3d      	ldr	r2, [pc, #244]	@ (800cf60 <Task_Ds18b20+0x1c4>)
 800ce6c:	4413      	add	r3, r2
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4838      	ldr	r0, [pc, #224]	@ (800cf54 <Task_Ds18b20+0x1b8>)
 800ce72:	f000 fa2c 	bl	800d2ce <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800ce76:	7bbb      	ldrb	r3, [r7, #14]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	73bb      	strb	r3, [r7, #14]
 800ce7c:	4b36      	ldr	r3, [pc, #216]	@ (800cf58 <Task_Ds18b20+0x1bc>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	7bba      	ldrb	r2, [r7, #14]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d3e0      	bcc.n	800ce48 <Task_Ds18b20+0xac>
  }
	for(;;)
	{
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 800ce86:	bf00      	nop
		{
			if(Ds18b20StartConvert==1)
				break;
			Ds18b20Delay(10);	
		}
		Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 800ce88:	4b37      	ldr	r3, [pc, #220]	@ (800cf68 <Task_Ds18b20+0x1cc>)
 800ce8a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800ce8e:	801a      	strh	r2, [r3, #0]
		DS18B20_StartAll(&OneWire);
 800ce90:	4830      	ldr	r0, [pc, #192]	@ (800cf54 <Task_Ds18b20+0x1b8>)
 800ce92:	f000 f86d 	bl	800cf70 <DS18B20_StartAll>
		osDelay(100);
 800ce96:	2064      	movs	r0, #100	@ 0x64
 800ce98:	f7fd fa48 	bl	800a32c <osDelay>
    while (!DS18B20_AllDone(&OneWire))
 800ce9c:	e00c      	b.n	800ceb8 <Task_Ds18b20+0x11c>
		{
			osDelay(10);  
 800ce9e:	200a      	movs	r0, #10
 800cea0:	f7fd fa44 	bl	800a32c <osDelay>
			Ds18b20Timeout-=1;
 800cea4:	4b30      	ldr	r3, [pc, #192]	@ (800cf68 <Task_Ds18b20+0x1cc>)
 800cea6:	881b      	ldrh	r3, [r3, #0]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	4b2e      	ldr	r3, [pc, #184]	@ (800cf68 <Task_Ds18b20+0x1cc>)
 800ceae:	801a      	strh	r2, [r3, #0]
			if(Ds18b20Timeout==0)
 800ceb0:	4b2d      	ldr	r3, [pc, #180]	@ (800cf68 <Task_Ds18b20+0x1cc>)
 800ceb2:	881b      	ldrh	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d006      	beq.n	800cec6 <Task_Ds18b20+0x12a>
    while (!DS18B20_AllDone(&OneWire))
 800ceb8:	4826      	ldr	r0, [pc, #152]	@ (800cf54 <Task_Ds18b20+0x1b8>)
 800ceba:	f000 fa63 	bl	800d384 <DS18B20_AllDone>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d0ec      	beq.n	800ce9e <Task_Ds18b20+0x102>
 800cec4:	e000      	b.n	800cec8 <Task_Ds18b20+0x12c>
				break;
 800cec6:	bf00      	nop
		}	
		if(Ds18b20Timeout>0)
 800cec8:	4b27      	ldr	r3, [pc, #156]	@ (800cf68 <Task_Ds18b20+0x1cc>)
 800ceca:	881b      	ldrh	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d025      	beq.n	800cf1c <Task_Ds18b20+0x180>
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 800ced0:	2300      	movs	r3, #0
 800ced2:	737b      	strb	r3, [r7, #13]
 800ced4:	e01c      	b.n	800cf10 <Task_Ds18b20+0x174>
			{
				Ds18b20Delay(1000);
 800ced6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ceda:	f7fd fa27 	bl	800a32c <osDelay>
				ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 800cede:	7b7b      	ldrb	r3, [r7, #13]
 800cee0:	011b      	lsls	r3, r3, #4
 800cee2:	4a1f      	ldr	r2, [pc, #124]	@ (800cf60 <Task_Ds18b20+0x1c4>)
 800cee4:	1899      	adds	r1, r3, r2
 800cee6:	7b7b      	ldrb	r3, [r7, #13]
 800cee8:	011b      	lsls	r3, r3, #4
 800ceea:	3308      	adds	r3, #8
 800ceec:	4a1c      	ldr	r2, [pc, #112]	@ (800cf60 <Task_Ds18b20+0x1c4>)
 800ceee:	4413      	add	r3, r2
 800cef0:	7b7c      	ldrb	r4, [r7, #13]
 800cef2:	461a      	mov	r2, r3
 800cef4:	4817      	ldr	r0, [pc, #92]	@ (800cf54 <Task_Ds18b20+0x1b8>)
 800cef6:	f000 f84f 	bl	800cf98 <DS18B20_Read>
 800cefa:	4603      	mov	r3, r0
 800cefc:	4619      	mov	r1, r3
 800cefe:	4a18      	ldr	r2, [pc, #96]	@ (800cf60 <Task_Ds18b20+0x1c4>)
 800cf00:	0123      	lsls	r3, r4, #4
 800cf02:	4413      	add	r3, r2
 800cf04:	330c      	adds	r3, #12
 800cf06:	460a      	mov	r2, r1
 800cf08:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 800cf0a:	7b7b      	ldrb	r3, [r7, #13]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	737b      	strb	r3, [r7, #13]
 800cf10:	4b11      	ldr	r3, [pc, #68]	@ (800cf58 <Task_Ds18b20+0x1bc>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	7b7a      	ldrb	r2, [r7, #13]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d3dd      	bcc.n	800ced6 <Task_Ds18b20+0x13a>
 800cf1a:	e011      	b.n	800cf40 <Task_Ds18b20+0x1a4>
			}
		}
		else
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	733b      	strb	r3, [r7, #12]
 800cf20:	e009      	b.n	800cf36 <Task_Ds18b20+0x19a>
				ds18b20[i].DataIsValid = false;
 800cf22:	7b3b      	ldrb	r3, [r7, #12]
 800cf24:	4a0e      	ldr	r2, [pc, #56]	@ (800cf60 <Task_Ds18b20+0x1c4>)
 800cf26:	011b      	lsls	r3, r3, #4
 800cf28:	4413      	add	r3, r2
 800cf2a:	330c      	adds	r3, #12
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 800cf30:	7b3b      	ldrb	r3, [r7, #12]
 800cf32:	3301      	adds	r3, #1
 800cf34:	733b      	strb	r3, [r7, #12]
 800cf36:	4b08      	ldr	r3, [pc, #32]	@ (800cf58 <Task_Ds18b20+0x1bc>)
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	7b3a      	ldrb	r2, [r7, #12]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d3f0      	bcc.n	800cf22 <Task_Ds18b20+0x186>
		}
		Ds18b20StartConvert=0;
 800cf40:	4b0a      	ldr	r3, [pc, #40]	@ (800cf6c <Task_Ds18b20+0x1d0>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	701a      	strb	r2, [r3, #0]
    osDelay(_DS18B20_UPDATE_INTERVAL_MS);
 800cf46:	f242 7010 	movw	r0, #10000	@ 0x2710
 800cf4a:	f7fd f9ef 	bl	800a32c <osDelay>
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 800cf4e:	e79a      	b.n	800ce86 <Task_Ds18b20+0xea>
 800cf50:	58020800 	.word	0x58020800
 800cf54:	24004bc8 	.word	0x24004bc8
 800cf58:	24004bdd 	.word	0x24004bdd
 800cf5c:	24004bdc 	.word	0x24004bdc
 800cf60:	24004bb8 	.word	0x24004bb8
 800cf64:	24004be4 	.word	0x24004be4
 800cf68:	24004be0 	.word	0x24004be0
 800cf6c:	24004bde 	.word	0x24004bde

0800cf70 <DS18B20_StartAll>:
	
	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 faa9 	bl	800d4d0 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 800cf7e:	21cc      	movs	r1, #204	@ 0xcc
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 fb2b 	bl	800d5dc <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 800cf86:	2144      	movs	r1, #68	@ 0x44
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fb27 	bl	800d5dc <OneWire_WriteByte>
}
 800cf8e:	bf00      	nop
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
	...

0800cf98 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 800cf98:	b590      	push	{r4, r7, lr}
 800cf9a:	b08b      	sub	sp, #44	@ 0x2c
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 800cfae:	68b8      	ldr	r0, [r7, #8]
 800cfb0:	f000 f97c 	bl	800d2ac <DS18B20_Is>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <DS18B20_Read+0x26>
		return false;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	e0e3      	b.n	800d186 <DS18B20_Read+0x1ee>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f000 fae2 	bl	800d588 <OneWire_ReadBit>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d101      	bne.n	800cfce <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 800cfca:	2300      	movs	r3, #0
 800cfcc:	e0db      	b.n	800d186 <DS18B20_Read+0x1ee>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f000 fa7e 	bl	800d4d0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800cfd4:	68b9      	ldr	r1, [r7, #8]
 800cfd6:	68f8      	ldr	r0, [r7, #12]
 800cfd8:	f000 fc35 	bl	800d846 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800cfdc:	21be      	movs	r1, #190	@ 0xbe
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 fafc 	bl	800d5dc <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	77fb      	strb	r3, [r7, #31]
 800cfe8:	e00d      	b.n	800d006 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 800cfea:	7ffc      	ldrb	r4, [r7, #31]
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 fb13 	bl	800d618 <OneWire_ReadByte>
 800cff2:	4603      	mov	r3, r0
 800cff4:	461a      	mov	r2, r3
 800cff6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800cffa:	443b      	add	r3, r7
 800cffc:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 800d000:	7ffb      	ldrb	r3, [r7, #31]
 800d002:	3301      	adds	r3, #1
 800d004:	77fb      	strb	r3, [r7, #31]
 800d006:	7ffb      	ldrb	r3, [r7, #31]
 800d008:	2b08      	cmp	r3, #8
 800d00a:	d9ee      	bls.n	800cfea <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 800d00c:	f107 0314 	add.w	r3, r7, #20
 800d010:	2108      	movs	r1, #8
 800d012:	4618      	mov	r0, r3
 800d014:	f000 fc53 	bl	800d8be <OneWire_CRC8>
 800d018:	4603      	mov	r3, r0
 800d01a:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 800d01c:	7f3b      	ldrb	r3, [r7, #28]
 800d01e:	7fba      	ldrb	r2, [r7, #30]
 800d020:	429a      	cmp	r2, r3
 800d022:	d001      	beq.n	800d028 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 800d024:	2300      	movs	r3, #0
 800d026:	e0ae      	b.n	800d186 <DS18B20_Read+0x1ee>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 800d028:	7d3b      	ldrb	r3, [r7, #20]
 800d02a:	b21a      	sxth	r2, r3
 800d02c:	7d7b      	ldrb	r3, [r7, #21]
 800d02e:	b21b      	sxth	r3, r3
 800d030:	021b      	lsls	r3, r3, #8
 800d032:	b21b      	sxth	r3, r3
 800d034:	4313      	orrs	r3, r2
 800d036:	b21b      	sxth	r3, r3
 800d038:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f000 fa48 	bl	800d4d0 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 800d040:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d044:	2b00      	cmp	r3, #0
 800d046:	da05      	bge.n	800d054 <DS18B20_Read+0xbc>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 800d048:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d04a:	425b      	negs	r3, r3
 800d04c:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 800d04e:	2301      	movs	r3, #1
 800d050:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 800d054:	7e3b      	ldrb	r3, [r7, #24]
 800d056:	115b      	asrs	r3, r3, #5
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	f003 0303 	and.w	r3, r3, #3
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	3309      	adds	r3, #9
 800d062:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 800d064:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d066:	091b      	lsrs	r3, r3, #4
 800d068:	b29b      	uxth	r3, r3
 800d06a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 800d06e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d070:	0a1b      	lsrs	r3, r3, #8
 800d072:	b29b      	uxth	r3, r3
 800d074:	b25b      	sxtb	r3, r3
 800d076:	011b      	lsls	r3, r3, #4
 800d078:	b25b      	sxtb	r3, r3
 800d07a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d07e:	b25a      	sxtb	r2, r3
 800d080:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d084:	4313      	orrs	r3, r2
 800d086:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 800d08a:	7f7b      	ldrb	r3, [r7, #29]
 800d08c:	3b09      	subs	r3, #9
 800d08e:	2b03      	cmp	r3, #3
 800d090:	d858      	bhi.n	800d144 <DS18B20_Read+0x1ac>
 800d092:	a201      	add	r2, pc, #4	@ (adr r2, 800d098 <DS18B20_Read+0x100>)
 800d094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d098:	0800d0a9 	.word	0x0800d0a9
 800d09c:	0800d0d1 	.word	0x0800d0d1
 800d0a0:	0800d0f9 	.word	0x0800d0f9
 800d0a4:	0800d121 	.word	0x0800d121
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 800d0a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d0aa:	08db      	lsrs	r3, r3, #3
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	f003 0301 	and.w	r3, r3, #1
 800d0b2:	ee07 3a90 	vmov	s15, r3
 800d0b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0ba:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 800d0be:	edd7 7a08 	vldr	s15, [r7, #32]
 800d0c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d0c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0ca:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 800d0ce:	e03e      	b.n	800d14e <DS18B20_Read+0x1b6>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 800d0d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d0d2:	089b      	lsrs	r3, r3, #2
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	f003 0303 	and.w	r3, r3, #3
 800d0da:	ee07 3a90 	vmov	s15, r3
 800d0de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0e2:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 800d0e6:	edd7 7a08 	vldr	s15, [r7, #32]
 800d0ea:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800d0ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0f2:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 800d0f6:	e02a      	b.n	800d14e <DS18B20_Read+0x1b6>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 800d0f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d0fa:	085b      	lsrs	r3, r3, #1
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	f003 0307 	and.w	r3, r3, #7
 800d102:	ee07 3a90 	vmov	s15, r3
 800d106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d10a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 800d10e:	edd7 7a08 	vldr	s15, [r7, #32]
 800d112:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 800d116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d11a:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 800d11e:	e016      	b.n	800d14e <DS18B20_Read+0x1b6>
		case 12: 
			decimal = temperature & 0x0F;
 800d120:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d122:	f003 030f 	and.w	r3, r3, #15
 800d126:	ee07 3a90 	vmov	s15, r3
 800d12a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d12e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 800d132:	edd7 7a08 	vldr	s15, [r7, #32]
 800d136:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800d190 <DS18B20_Read+0x1f8>
 800d13a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d13e:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 800d142:	e004      	b.n	800d14e <DS18B20_Read+0x1b6>
		default: 
			decimal = 0xFF;
 800d144:	4b13      	ldr	r3, [pc, #76]	@ (800d194 <DS18B20_Read+0x1fc>)
 800d146:	623b      	str	r3, [r7, #32]
			digit = 0;
 800d148:	2300      	movs	r3, #0
 800d14a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 800d14e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d152:	ee07 3a90 	vmov	s15, r3
 800d156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d15a:	ed97 7a08 	vldr	s14, [r7, #32]
 800d15e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d162:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus) 
 800d166:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d007      	beq.n	800d17e <DS18B20_Read+0x1e6>
		decimal = 0 - decimal;
 800d16e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800d198 <DS18B20_Read+0x200>
 800d172:	edd7 7a08 	vldr	s15, [r7, #32]
 800d176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d17a:	edc7 7a08 	vstr	s15, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a3a      	ldr	r2, [r7, #32]
 800d182:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 800d184:	2301      	movs	r3, #1
}
 800d186:	4618      	mov	r0, r3
 800d188:	372c      	adds	r7, #44	@ 0x2c
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd90      	pop	{r4, r7, pc}
 800d18e:	bf00      	nop
 800d190:	3d800000 	.word	0x3d800000
 800d194:	437f0000 	.word	0x437f0000
 800d198:	00000000 	.word	0x00000000

0800d19c <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b086      	sub	sp, #24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 800d1aa:	68b8      	ldr	r0, [r7, #8]
 800d1ac:	f000 f87e 	bl	800d2ac <DS18B20_Is>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d101      	bne.n	800d1ba <DS18B20_SetResolution+0x1e>
		return 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e074      	b.n	800d2a4 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f000 f988 	bl	800d4d0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800d1c0:	68b9      	ldr	r1, [r7, #8]
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	f000 fb3f 	bl	800d846 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800d1c8:	21be      	movs	r1, #190	@ 0xbe
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f000 fa06 	bl	800d5dc <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f000 fa21 	bl	800d618 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f000 fa1e 	bl	800d618 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f000 fa1b 	bl	800d618 <OneWire_ReadByte>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	f000 fa16 	bl	800d618 <OneWire_ReadByte>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f000 fa11 	bl	800d618 <OneWire_ReadByte>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	2b09      	cmp	r3, #9
 800d1fe:	d108      	bne.n	800d212 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800d200:	7dfb      	ldrb	r3, [r7, #23]
 800d202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d206:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800d208:	7dfb      	ldrb	r3, [r7, #23]
 800d20a:	f023 0320 	bic.w	r3, r3, #32
 800d20e:	75fb      	strb	r3, [r7, #23]
 800d210:	e022      	b.n	800d258 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 800d212:	79fb      	ldrb	r3, [r7, #7]
 800d214:	2b0a      	cmp	r3, #10
 800d216:	d108      	bne.n	800d22a <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800d218:	7dfb      	ldrb	r3, [r7, #23]
 800d21a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d21e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800d220:	7dfb      	ldrb	r3, [r7, #23]
 800d222:	f043 0320 	orr.w	r3, r3, #32
 800d226:	75fb      	strb	r3, [r7, #23]
 800d228:	e016      	b.n	800d258 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 800d22a:	79fb      	ldrb	r3, [r7, #7]
 800d22c:	2b0b      	cmp	r3, #11
 800d22e:	d108      	bne.n	800d242 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800d230:	7dfb      	ldrb	r3, [r7, #23]
 800d232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d236:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800d238:	7dfb      	ldrb	r3, [r7, #23]
 800d23a:	f023 0320 	bic.w	r3, r3, #32
 800d23e:	75fb      	strb	r3, [r7, #23]
 800d240:	e00a      	b.n	800d258 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800d242:	79fb      	ldrb	r3, [r7, #7]
 800d244:	2b0c      	cmp	r3, #12
 800d246:	d107      	bne.n	800d258 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800d248:	7dfb      	ldrb	r3, [r7, #23]
 800d24a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d24e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800d250:	7dfb      	ldrb	r3, [r7, #23]
 800d252:	f043 0320 	orr.w	r3, r3, #32
 800d256:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f000 f939 	bl	800d4d0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800d25e:	68b9      	ldr	r1, [r7, #8]
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f000 faf0 	bl	800d846 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 800d266:	214e      	movs	r1, #78	@ 0x4e
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f000 f9b7 	bl	800d5dc <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800d26e:	7dbb      	ldrb	r3, [r7, #22]
 800d270:	4619      	mov	r1, r3
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f000 f9b2 	bl	800d5dc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 800d278:	7d7b      	ldrb	r3, [r7, #21]
 800d27a:	4619      	mov	r1, r3
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f000 f9ad 	bl	800d5dc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 800d282:	7dfb      	ldrb	r3, [r7, #23]
 800d284:	4619      	mov	r1, r3
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f000 f9a8 	bl	800d5dc <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	f000 f91f 	bl	800d4d0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800d292:	68b9      	ldr	r1, [r7, #8]
 800d294:	68f8      	ldr	r0, [r7, #12]
 800d296:	f000 fad6 	bl	800d846 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800d29a:	2148      	movs	r1, #72	@ 0x48
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	f000 f99d 	bl	800d5dc <OneWire_WriteByte>
	
	return 1;
 800d2a2:	2301      	movs	r3, #1
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3718      	adds	r7, #24
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	2b28      	cmp	r3, #40	@ 0x28
 800d2ba:	d101      	bne.n	800d2c0 <DS18B20_Is+0x14>
		return 1;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e000      	b.n	800d2c2 <DS18B20_Is+0x16>
	
	return 0;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b084      	sub	sp, #16
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 800d2d8:	6838      	ldr	r0, [r7, #0]
 800d2da:	f7ff ffe7 	bl	800d2ac <DS18B20_Is>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d101      	bne.n	800d2e8 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	e049      	b.n	800d37c <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f8f1 	bl	800d4d0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800d2ee:	6839      	ldr	r1, [r7, #0]
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 faa8 	bl	800d846 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800d2f6:	21be      	movs	r1, #190	@ 0xbe
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 f96f 	bl	800d5dc <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f98a 	bl	800d618 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 f987 	bl	800d618 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f984 	bl	800d618 <OneWire_ReadByte>
 800d310:	4603      	mov	r3, r0
 800d312:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f97f 	bl	800d618 <OneWire_ReadByte>
 800d31a:	4603      	mov	r3, r0
 800d31c:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 f97a 	bl	800d618 <OneWire_ReadByte>
 800d324:	4603      	mov	r3, r0
 800d326:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 800d328:	237d      	movs	r3, #125	@ 0x7d
 800d32a:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 800d32c:	23c9      	movs	r3, #201	@ 0xc9
 800d32e:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 f8cd 	bl	800d4d0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800d336:	6839      	ldr	r1, [r7, #0]
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 fa84 	bl	800d846 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 800d33e:	214e      	movs	r1, #78	@ 0x4e
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f94b 	bl	800d5dc <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800d346:	7bfb      	ldrb	r3, [r7, #15]
 800d348:	4619      	mov	r1, r3
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 f946 	bl	800d5dc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 800d350:	7bbb      	ldrb	r3, [r7, #14]
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 f941 	bl	800d5dc <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 800d35a:	7b7b      	ldrb	r3, [r7, #13]
 800d35c:	4619      	mov	r1, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 f93c 	bl	800d5dc <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 f8b3 	bl	800d4d0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800d36a:	6839      	ldr	r1, [r7, #0]
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 fa6a 	bl	800d846 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800d372:	2148      	movs	r1, #72	@ 0x48
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 f931 	bl	800d5dc <OneWire_WriteByte>
	
	return 1;
 800d37a:	2301      	movs	r3, #1
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 f8fb 	bl	800d588 <OneWire_ReadBit>
 800d392:	4603      	mov	r3, r0
}
 800d394:	4618      	mov	r0, r3
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <ONEWIRE_DELAY>:
#include "onewire.h"
#include "ds18b20Config.h"
#include "../../Core/Inc/tim.h"

void ONEWIRE_DELAY(uint16_t time_us)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 800d3a6:	4b09      	ldr	r3, [pc, #36]	@ (800d3cc <ONEWIRE_DELAY+0x30>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 800d3ae:	bf00      	nop
 800d3b0:	4b06      	ldr	r3, [pc, #24]	@ (800d3cc <ONEWIRE_DELAY+0x30>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3b6:	88fb      	ldrh	r3, [r7, #6]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d9f9      	bls.n	800d3b0 <ONEWIRE_DELAY+0x14>
}
 800d3bc:	bf00      	nop
 800d3be:	bf00      	nop
 800d3c0:	370c      	adds	r7, #12
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	24000184 	.word	0x24000184

0800d3d0 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	889b      	ldrh	r3, [r3, #4]
 800d3dc:	461a      	mov	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	0412      	lsls	r2, r2, #16
 800d3e4:	619a      	str	r2, [r3, #24]
}	
 800d3e6:	bf00      	nop
 800d3e8:	370c      	adds	r7, #12
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 800d3f2:	b480      	push	{r7}
 800d3f4:	b083      	sub	sp, #12
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	889a      	ldrh	r2, [r3, #4]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	619a      	str	r2, [r3, #24]
}	
 800d404:	bf00      	nop
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b088      	sub	sp, #32
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 800d418:	2300      	movs	r3, #0
 800d41a:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 800d41c:	2300      	movs	r3, #0
 800d41e:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800d420:	2302      	movs	r3, #2
 800d422:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;	
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	889b      	ldrh	r3, [r3, #4]
 800d428:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f107 020c 	add.w	r2, r7, #12
 800d432:	4611      	mov	r1, r2
 800d434:	4618      	mov	r0, r3
 800d436:	f7f6 f8d1 	bl	80035dc <HAL_GPIO_Init>
}	
 800d43a:	bf00      	nop
 800d43c:	3720      	adds	r7, #32
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b088      	sub	sp, #32
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 800d44a:	2311      	movs	r3, #17
 800d44c:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 800d44e:	2300      	movs	r3, #0
 800d450:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800d452:	2302      	movs	r3, #2
 800d454:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	889b      	ldrh	r3, [r3, #4]
 800d45a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f107 020c 	add.w	r2, r7, #12
 800d464:	4611      	mov	r1, r2
 800d466:	4618      	mov	r0, r3
 800d468:	f7f6 f8b8 	bl	80035dc <HAL_GPIO_Init>

}
 800d46c:	bf00      	nop
 800d46e:	3720      	adds	r7, #32
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	4613      	mov	r3, r2
 800d480:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 800d482:	4812      	ldr	r0, [pc, #72]	@ (800d4cc <OneWire_Init+0x58>)
 800d484:	f7fa f9b6 	bl	80077f4 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	88fa      	ldrh	r2, [r7, #6]
 800d492:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f7ff ffd4 	bl	800d442 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	f7ff ffa9 	bl	800d3f2 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 800d4a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d4a4:	f7f3 ffba 	bl	800141c <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f7ff ff91 	bl	800d3d0 <ONEWIRE_LOW>
	OneWireDelay(1000);
 800d4ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d4b2:	f7f3 ffb3 	bl	800141c <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	f7ff ff9b 	bl	800d3f2 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 800d4bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800d4c0:	f7f3 ffac 	bl	800141c <HAL_Delay>
}
 800d4c4:	bf00      	nop
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	24000184 	.word	0x24000184

0800d4d0 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f7ff ff79 	bl	800d3d0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7ff ffaf 	bl	800d442 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 800d4e4:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800d4e8:	f7ff ff58 	bl	800d39c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 800d4ec:	2014      	movs	r0, #20
 800d4ee:	f7ff ff55 	bl	800d39c <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff ff8c 	bl	800d410 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 800d4f8:	2046      	movs	r0, #70	@ 0x46
 800d4fa:	f7ff ff4f 	bl	800d39c <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	889b      	ldrh	r3, [r3, #4]
 800d506:	4619      	mov	r1, r3
 800d508:	4610      	mov	r0, r2
 800d50a:	f7f6 fa17 	bl	800393c <HAL_GPIO_ReadPin>
 800d50e:	4603      	mov	r3, r0
 800d510:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 800d512:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 800d516:	f7ff ff41 	bl	800d39c <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 800d51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3710      	adds	r7, #16
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	460b      	mov	r3, r1
 800d52e:	70fb      	strb	r3, [r7, #3]
	if (bit) 
 800d530:	78fb      	ldrb	r3, [r7, #3]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d012      	beq.n	800d55c <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f7ff ff4a 	bl	800d3d0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7ff ff80 	bl	800d442 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 800d542:	200a      	movs	r0, #10
 800d544:	f7ff ff2a 	bl	800d39c <ONEWIRE_DELAY>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7ff ff61 	bl	800d410 <ONEWIRE_INPUT>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 800d54e:	2037      	movs	r0, #55	@ 0x37
 800d550:	f7ff ff24 	bl	800d39c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f7ff ff5b 	bl	800d410 <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 800d55a:	e011      	b.n	800d580 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f7ff ff37 	bl	800d3d0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f7ff ff6d 	bl	800d442 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 800d568:	2041      	movs	r0, #65	@ 0x41
 800d56a:	f7ff ff17 	bl	800d39c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f7ff ff4e 	bl	800d410 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 800d574:	2005      	movs	r0, #5
 800d576:	f7ff ff11 	bl	800d39c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7ff ff48 	bl	800d410 <ONEWIRE_INPUT>
}
 800d580:	bf00      	nop
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 800d590:	2300      	movs	r3, #0
 800d592:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7ff ff1b 	bl	800d3d0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7ff ff51 	bl	800d442 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 800d5a0:	2002      	movs	r0, #2
 800d5a2:	f7ff fefb 	bl	800d39c <ONEWIRE_DELAY>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7ff ff32 	bl	800d410 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 800d5ac:	200a      	movs	r0, #10
 800d5ae:	f7ff fef5 	bl	800d39c <ONEWIRE_DELAY>
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	889b      	ldrh	r3, [r3, #4]
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	4610      	mov	r0, r2
 800d5be:	f7f6 f9bd 	bl	800393c <HAL_GPIO_ReadPin>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d001      	beq.n	800d5cc <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 800d5cc:	2032      	movs	r0, #50	@ 0x32
 800d5ce:	f7ff fee5 	bl	800d39c <ONEWIRE_DELAY>
	
	/* Return bit value */
	return bit;
 800d5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 800d5e8:	2308      	movs	r3, #8
 800d5ea:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 800d5ec:	e00a      	b.n	800d604 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800d5ee:	78fb      	ldrb	r3, [r7, #3]
 800d5f0:	f003 0301 	and.w	r3, r3, #1
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7ff ff93 	bl	800d524 <OneWire_WriteBit>
		byte >>= 1;
 800d5fe:	78fb      	ldrb	r3, [r7, #3]
 800d600:	085b      	lsrs	r3, r3, #1
 800d602:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 800d604:	7bfb      	ldrb	r3, [r7, #15]
 800d606:	1e5a      	subs	r2, r3, #1
 800d608:	73fa      	strb	r2, [r7, #15]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1ef      	bne.n	800d5ee <OneWire_WriteByte+0x12>
	}
}
 800d60e:	bf00      	nop
 800d610:	bf00      	nop
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 800d620:	2308      	movs	r3, #8
 800d622:	73fb      	strb	r3, [r7, #15]
 800d624:	2300      	movs	r3, #0
 800d626:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 800d628:	e00d      	b.n	800d646 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 800d62a:	7bbb      	ldrb	r3, [r7, #14]
 800d62c:	085b      	lsrs	r3, r3, #1
 800d62e:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7ff ffa9 	bl	800d588 <OneWire_ReadBit>
 800d636:	4603      	mov	r3, r0
 800d638:	01db      	lsls	r3, r3, #7
 800d63a:	b25a      	sxtb	r2, r3
 800d63c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d640:	4313      	orrs	r3, r2
 800d642:	b25b      	sxtb	r3, r3
 800d644:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 800d646:	7bfb      	ldrb	r3, [r7, #15]
 800d648:	1e5a      	subs	r2, r3, #1
 800d64a:	73fa      	strb	r2, [r7, #15]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d1ec      	bne.n	800d62a <OneWire_ReadByte+0x12>
	}
	
	return byte;
 800d650:	7bbb      	ldrb	r3, [r7, #14]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b082      	sub	sp, #8
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 f816 	bl	800d694 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 800d668:	21f0      	movs	r1, #240	@ 0xf0
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 f825 	bl	800d6ba <OneWire_Search>
 800d670:	4603      	mov	r3, r0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b082      	sub	sp, #8
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 800d682:	21f0      	movs	r1, #240	@ 0xf0
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 f818 	bl	800d6ba <OneWire_Search>
 800d68a:	4603      	mov	r3, r0
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	71da      	strb	r2, [r3, #7]
}
 800d6ae:	bf00      	nop
 800d6b0:	370c      	adds	r7, #12
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr

0800d6ba <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b084      	sub	sp, #16
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	7a1b      	ldrb	r3, [r3, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f040 809a 	bne.w	800d818 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) 
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7ff fef3 	bl	800d4d0 <OneWire_Reset>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00a      	beq.n	800d706 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	71da      	strb	r2, [r3, #7]
			return 0;
 800d702:	2300      	movs	r3, #0
 800d704:	e09b      	b.n	800d83e <OneWire_Search+0x184>
		}

		// issue the search command 
		OneWire_WriteByte(OneWireStruct, command);  
 800d706:	78fb      	ldrb	r3, [r7, #3]
 800d708:	4619      	mov	r1, r3
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7ff ff66 	bl	800d5dc <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7ff ff39 	bl	800d588 <OneWire_ReadBit>
 800d716:	4603      	mov	r3, r0
 800d718:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff ff34 	bl	800d588 <OneWire_ReadBit>
 800d720:	4603      	mov	r3, r0
 800d722:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 800d724:	7a7b      	ldrb	r3, [r7, #9]
 800d726:	2b01      	cmp	r3, #1
 800d728:	d102      	bne.n	800d730 <OneWire_Search+0x76>
 800d72a:	7a3b      	ldrb	r3, [r7, #8]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d064      	beq.n	800d7fa <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 800d730:	7a7a      	ldrb	r2, [r7, #9]
 800d732:	7a3b      	ldrb	r3, [r7, #8]
 800d734:	429a      	cmp	r2, r3
 800d736:	d002      	beq.n	800d73e <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 800d738:	7a7b      	ldrb	r3, [r7, #9]
 800d73a:	72bb      	strb	r3, [r7, #10]
 800d73c:	e026      	b.n	800d78c <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	799b      	ldrb	r3, [r3, #6]
 800d742:	7bfa      	ldrb	r2, [r7, #15]
 800d744:	429a      	cmp	r2, r3
 800d746:	d20d      	bcs.n	800d764 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 800d748:	7b7b      	ldrb	r3, [r7, #13]
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	4413      	add	r3, r2
 800d74e:	7a5a      	ldrb	r2, [r3, #9]
 800d750:	7afb      	ldrb	r3, [r7, #11]
 800d752:	4013      	ands	r3, r2
 800d754:	b2db      	uxtb	r3, r3
 800d756:	2b00      	cmp	r3, #0
 800d758:	bf14      	ite	ne
 800d75a:	2301      	movne	r3, #1
 800d75c:	2300      	moveq	r3, #0
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	72bb      	strb	r3, [r7, #10]
 800d762:	e008      	b.n	800d776 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	799b      	ldrb	r3, [r3, #6]
 800d768:	7bfa      	ldrb	r2, [r7, #15]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	bf0c      	ite	eq
 800d76e:	2301      	moveq	r3, #1
 800d770:	2300      	movne	r3, #0
 800d772:	b2db      	uxtb	r3, r3
 800d774:	72bb      	strb	r3, [r7, #10]
					}
					
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 800d776:	7abb      	ldrb	r3, [r7, #10]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d107      	bne.n	800d78c <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
 800d77e:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 800d780:	7bbb      	ldrb	r3, [r7, #14]
 800d782:	2b08      	cmp	r3, #8
 800d784:	d802      	bhi.n	800d78c <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	7bba      	ldrb	r2, [r7, #14]
 800d78a:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 800d78c:	7abb      	ldrb	r3, [r7, #10]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d10c      	bne.n	800d7ac <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 800d792:	7b7b      	ldrb	r3, [r7, #13]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	4413      	add	r3, r2
 800d798:	7a59      	ldrb	r1, [r3, #9]
 800d79a:	7b7b      	ldrb	r3, [r7, #13]
 800d79c:	7afa      	ldrb	r2, [r7, #11]
 800d79e:	430a      	orrs	r2, r1
 800d7a0:	b2d1      	uxtb	r1, r2
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	460a      	mov	r2, r1
 800d7a8:	725a      	strb	r2, [r3, #9]
 800d7aa:	e010      	b.n	800d7ce <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800d7ac:	7b7b      	ldrb	r3, [r7, #13]
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	7a5b      	ldrb	r3, [r3, #9]
 800d7b4:	b25a      	sxtb	r2, r3
 800d7b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d7ba:	43db      	mvns	r3, r3
 800d7bc:	b25b      	sxtb	r3, r3
 800d7be:	4013      	ands	r3, r2
 800d7c0:	b25a      	sxtb	r2, r3
 800d7c2:	7b7b      	ldrb	r3, [r7, #13]
 800d7c4:	b2d1      	uxtb	r1, r2
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	460a      	mov	r2, r1
 800d7cc:	725a      	strb	r2, [r3, #9]
				}
				
				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 800d7ce:	7abb      	ldrb	r3, [r7, #10]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7ff fea6 	bl	800d524 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800d7de:	7afb      	ldrb	r3, [r7, #11]
 800d7e0:	005b      	lsls	r3, r3, #1
 800d7e2:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 800d7e4:	7afb      	ldrb	r3, [r7, #11]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d104      	bne.n	800d7f4 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 800d7ea:	7b7b      	ldrb	r3, [r7, #13]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 800d7f4:	7b7b      	ldrb	r3, [r7, #13]
 800d7f6:	2b07      	cmp	r3, #7
 800d7f8:	d98a      	bls.n	800d710 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 800d7fa:	7bfb      	ldrb	r3, [r7, #15]
 800d7fc:	2b40      	cmp	r3, #64	@ 0x40
 800d7fe:	d90b      	bls.n	800d818 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	7bba      	ldrb	r2, [r7, #14]
 800d804:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	799b      	ldrb	r3, [r3, #6]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d102      	bne.n	800d814 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2201      	movs	r2, #1
 800d812:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 800d814:	2301      	movs	r3, #1
 800d816:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 800d818:	7b3b      	ldrb	r3, [r7, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d003      	beq.n	800d826 <OneWire_Search+0x16c>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	7a5b      	ldrb	r3, [r3, #9]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10a      	bne.n	800d83c <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 800d838:	2300      	movs	r3, #0
 800d83a:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800d83c:	7b3b      	ldrb	r3, [r7, #12]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 800d846:	b580      	push	{r7, lr}
 800d848:	b084      	sub	sp, #16
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 800d850:	2155      	movs	r1, #85	@ 0x55
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7ff fec2 	bl	800d5dc <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 800d858:	2300      	movs	r3, #0
 800d85a:	73fb      	strb	r3, [r7, #15]
 800d85c:	e00a      	b.n	800d874 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 800d85e:	7bfb      	ldrb	r3, [r7, #15]
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	4413      	add	r3, r2
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff feb7 	bl	800d5dc <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
 800d870:	3301      	adds	r3, #1
 800d872:	73fb      	strb	r3, [r7, #15]
 800d874:	7bfb      	ldrb	r3, [r7, #15]
 800d876:	2b07      	cmp	r3, #7
 800d878:	d9f1      	bls.n	800d85e <OneWire_SelectWithPointer+0x18>
	}	
}
 800d87a:	bf00      	nop
 800d87c:	bf00      	nop
 800d87e:	3710      	adds	r7, #16
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800d88e:	2300      	movs	r3, #0
 800d890:	73fb      	strb	r3, [r7, #15]
 800d892:	e00a      	b.n	800d8aa <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 800d894:	7bfa      	ldrb	r2, [r7, #15]
 800d896:	7bfb      	ldrb	r3, [r7, #15]
 800d898:	6839      	ldr	r1, [r7, #0]
 800d89a:	440b      	add	r3, r1
 800d89c:	6879      	ldr	r1, [r7, #4]
 800d89e:	440a      	add	r2, r1
 800d8a0:	7a52      	ldrb	r2, [r2, #9]
 800d8a2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 800d8a4:	7bfb      	ldrb	r3, [r7, #15]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	73fb      	strb	r3, [r7, #15]
 800d8aa:	7bfb      	ldrb	r3, [r7, #15]
 800d8ac:	2b07      	cmp	r3, #7
 800d8ae:	d9f1      	bls.n	800d894 <OneWire_GetFullROM+0x10>
	}
}
 800d8b0:	bf00      	nop
 800d8b2:	bf00      	nop
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr

0800d8be <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 800d8be:	b480      	push	{r7}
 800d8c0:	b085      	sub	sp, #20
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 800d8ce:	e022      	b.n	800d916 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	1c5a      	adds	r2, r3, #1
 800d8d4:	607a      	str	r2, [r7, #4]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800d8da:	2308      	movs	r3, #8
 800d8dc:	737b      	strb	r3, [r7, #13]
 800d8de:	e017      	b.n	800d910 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 800d8e0:	7bfa      	ldrb	r2, [r7, #15]
 800d8e2:	7bbb      	ldrb	r3, [r7, #14]
 800d8e4:	4053      	eors	r3, r2
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	f003 0301 	and.w	r3, r3, #1
 800d8ec:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
 800d8f0:	085b      	lsrs	r3, r3, #1
 800d8f2:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 800d8f4:	7b3b      	ldrb	r3, [r7, #12]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d004      	beq.n	800d904 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800d8fa:	7bfb      	ldrb	r3, [r7, #15]
 800d8fc:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 800d900:	43db      	mvns	r3, r3
 800d902:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 800d904:	7bbb      	ldrb	r3, [r7, #14]
 800d906:	085b      	lsrs	r3, r3, #1
 800d908:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800d90a:	7b7b      	ldrb	r3, [r7, #13]
 800d90c:	3b01      	subs	r3, #1
 800d90e:	737b      	strb	r3, [r7, #13]
 800d910:	7b7b      	ldrb	r3, [r7, #13]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1e4      	bne.n	800d8e0 <OneWire_CRC8+0x22>
	while (len--) {
 800d916:	78fb      	ldrb	r3, [r7, #3]
 800d918:	1e5a      	subs	r2, r3, #1
 800d91a:	70fa      	strb	r2, [r7, #3]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d1d7      	bne.n	800d8d0 <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 800d920:	7bfb      	ldrb	r3, [r7, #15]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
	...

0800d930 <batterie_task>:
#include "batteries_task.h"

extern osThreadId_t batterieHandle;

void batterie_task(void *argument)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
	//setup

	int adc_reading = 0;
 800d938:	2300      	movs	r3, #0
 800d93a:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_IT(&huart3, "Batt\n", 6);
 800d93c:	2206      	movs	r2, #6
 800d93e:	4909      	ldr	r1, [pc, #36]	@ (800d964 <batterie_task+0x34>)
 800d940:	4809      	ldr	r0, [pc, #36]	@ (800d968 <batterie_task+0x38>)
 800d942:	f7fa fca1 	bl	8008288 <HAL_UART_Transmit_IT>

	//loop
	while(1)
	{
		HAL_ADC_Start_IT(&hadc1);
 800d946:	4809      	ldr	r0, [pc, #36]	@ (800d96c <batterie_task+0x3c>)
 800d948:	f7f4 f92e 	bl	8001ba8 <HAL_ADC_Start_IT>
		osThreadYield();
 800d94c:	f7fc fcce 	bl	800a2ec <osThreadYield>

		adc_reading = HAL_ADC_GetValue(&hadc1);
 800d950:	4806      	ldr	r0, [pc, #24]	@ (800d96c <batterie_task+0x3c>)
 800d952:	f7f4 fa67 	bl	8001e24 <HAL_ADC_GetValue>
 800d956:	4603      	mov	r3, r0
 800d958:	60fb      	str	r3, [r7, #12]

			// Process ADC value (e.g., print or use)
		//printf("ADC Value: %lu\r\n", adc_reading);

			// Start next conversion
		osDelay(ADC_SAMPLE_PERIOD_UC);
 800d95a:	4805      	ldr	r0, [pc, #20]	@ (800d970 <batterie_task+0x40>)
 800d95c:	f7fc fce6 	bl	800a32c <osDelay>
		HAL_ADC_Start_IT(&hadc1);
 800d960:	bf00      	nop
 800d962:	e7f0      	b.n	800d946 <batterie_task+0x16>
 800d964:	0800db10 	.word	0x0800db10
 800d968:	240001d0 	.word	0x240001d0
 800d96c:	24000030 	.word	0x24000030
 800d970:	000927c0 	.word	0x000927c0

0800d974 <cnss_task>:
 */

#include "cnss_task.h"

void cnss_task(void *argument)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit_IT(&huart3, "Gnss\n", 5);
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 800d97c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d980:	f7fc fcd4 	bl	800a32c <osDelay>
 800d984:	e7fa      	b.n	800d97c <cnss_task+0x8>
	...

0800d988 <imu_task>:
 */

#include "imu_task.h"

void imu_task(void *argument)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
	//loop
	while(1)
	{
		//to implement yet
		//osDelay(IMU_SAMPLE_PERIOD_UC);
		HAL_UART_Transmit_IT(&huart3, "Test\n", 6);
 800d990:	2206      	movs	r2, #6
 800d992:	4905      	ldr	r1, [pc, #20]	@ (800d9a8 <imu_task+0x20>)
 800d994:	4805      	ldr	r0, [pc, #20]	@ (800d9ac <imu_task+0x24>)
 800d996:	f7fa fc77 	bl	8008288 <HAL_UART_Transmit_IT>
		osDelay(1000);
 800d99a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d99e:	f7fc fcc5 	bl	800a32c <osDelay>
		HAL_UART_Transmit_IT(&huart3, "Test\n", 6);
 800d9a2:	bf00      	nop
 800d9a4:	e7f4      	b.n	800d990 <imu_task+0x8>
 800d9a6:	bf00      	nop
 800d9a8:	0800db18 	.word	0x0800db18
 800d9ac:	240001d0 	.word	0x240001d0

0800d9b0 <nb_iot_task>:
 */

#include "nb_iot_task.h"

void nb_iot_task(void *argument)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit_IT(&huart3, "NB-Iot\n", 7);
 800d9b8:	2207      	movs	r2, #7
 800d9ba:	4904      	ldr	r1, [pc, #16]	@ (800d9cc <nb_iot_task+0x1c>)
 800d9bc:	4804      	ldr	r0, [pc, #16]	@ (800d9d0 <nb_iot_task+0x20>)
 800d9be:	f7fa fc63 	bl	8008288 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 800d9c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9c6:	f7fc fcb1 	bl	800a32c <osDelay>
 800d9ca:	e7fa      	b.n	800d9c2 <nb_iot_task+0x12>
 800d9cc:	0800db20 	.word	0x0800db20
 800d9d0:	240001d0 	.word	0x240001d0

0800d9d4 <sd_card_task>:
 *  Created on: Apr 23, 2025
 *      Author: viny
 */
#include "sd_card_task.h"
void sd_card_task(void *argument)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit_IT(&huart3, "SD-Card\n", 8);
 800d9dc:	2208      	movs	r2, #8
 800d9de:	4904      	ldr	r1, [pc, #16]	@ (800d9f0 <sd_card_task+0x1c>)
 800d9e0:	4804      	ldr	r0, [pc, #16]	@ (800d9f4 <sd_card_task+0x20>)
 800d9e2:	f7fa fc51 	bl	8008288 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 800d9e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9ea:	f7fc fc9f 	bl	800a32c <osDelay>
 800d9ee:	e7fa      	b.n	800d9e6 <sd_card_task+0x12>
 800d9f0:	0800db28 	.word	0x0800db28
 800d9f4:	240001d0 	.word	0x240001d0

0800d9f8 <temp_task>:
 */

#include "temp_task.h"

void temp_task(void *argument)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit_IT(&huart3, "Temp\n", 5);
 800da00:	2205      	movs	r2, #5
 800da02:	4906      	ldr	r1, [pc, #24]	@ (800da1c <temp_task+0x24>)
 800da04:	4806      	ldr	r0, [pc, #24]	@ (800da20 <temp_task+0x28>)
 800da06:	f7fa fc3f 	bl	8008288 <HAL_UART_Transmit_IT>

	Ds18b20_Init((osPriority_t) osPriorityLow);
 800da0a:	2008      	movs	r0, #8
 800da0c:	f7ff f9b0 	bl	800cd70 <Ds18b20_Init>
	//loop
	while(1)
	{
		//one wire comunication
		osDelay(DELAY_MAX);
 800da10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da14:	f7fc fc8a 	bl	800a32c <osDelay>
 800da18:	e7fa      	b.n	800da10 <temp_task+0x18>
 800da1a:	bf00      	nop
 800da1c:	0800db34 	.word	0x0800db34
 800da20:	240001d0 	.word	0x240001d0

0800da24 <memset>:
 800da24:	4402      	add	r2, r0
 800da26:	4603      	mov	r3, r0
 800da28:	4293      	cmp	r3, r2
 800da2a:	d100      	bne.n	800da2e <memset+0xa>
 800da2c:	4770      	bx	lr
 800da2e:	f803 1b01 	strb.w	r1, [r3], #1
 800da32:	e7f9      	b.n	800da28 <memset+0x4>

0800da34 <__libc_init_array>:
 800da34:	b570      	push	{r4, r5, r6, lr}
 800da36:	4d0d      	ldr	r5, [pc, #52]	@ (800da6c <__libc_init_array+0x38>)
 800da38:	4c0d      	ldr	r4, [pc, #52]	@ (800da70 <__libc_init_array+0x3c>)
 800da3a:	1b64      	subs	r4, r4, r5
 800da3c:	10a4      	asrs	r4, r4, #2
 800da3e:	2600      	movs	r6, #0
 800da40:	42a6      	cmp	r6, r4
 800da42:	d109      	bne.n	800da58 <__libc_init_array+0x24>
 800da44:	4d0b      	ldr	r5, [pc, #44]	@ (800da74 <__libc_init_array+0x40>)
 800da46:	4c0c      	ldr	r4, [pc, #48]	@ (800da78 <__libc_init_array+0x44>)
 800da48:	f000 f826 	bl	800da98 <_init>
 800da4c:	1b64      	subs	r4, r4, r5
 800da4e:	10a4      	asrs	r4, r4, #2
 800da50:	2600      	movs	r6, #0
 800da52:	42a6      	cmp	r6, r4
 800da54:	d105      	bne.n	800da62 <__libc_init_array+0x2e>
 800da56:	bd70      	pop	{r4, r5, r6, pc}
 800da58:	f855 3b04 	ldr.w	r3, [r5], #4
 800da5c:	4798      	blx	r3
 800da5e:	3601      	adds	r6, #1
 800da60:	e7ee      	b.n	800da40 <__libc_init_array+0xc>
 800da62:	f855 3b04 	ldr.w	r3, [r5], #4
 800da66:	4798      	blx	r3
 800da68:	3601      	adds	r6, #1
 800da6a:	e7f2      	b.n	800da52 <__libc_init_array+0x1e>
 800da6c:	0800dc9c 	.word	0x0800dc9c
 800da70:	0800dc9c 	.word	0x0800dc9c
 800da74:	0800dc9c 	.word	0x0800dc9c
 800da78:	0800dca0 	.word	0x0800dca0

0800da7c <memcpy>:
 800da7c:	440a      	add	r2, r1
 800da7e:	4291      	cmp	r1, r2
 800da80:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800da84:	d100      	bne.n	800da88 <memcpy+0xc>
 800da86:	4770      	bx	lr
 800da88:	b510      	push	{r4, lr}
 800da8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da92:	4291      	cmp	r1, r2
 800da94:	d1f9      	bne.n	800da8a <memcpy+0xe>
 800da96:	bd10      	pop	{r4, pc}

0800da98 <_init>:
 800da98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da9a:	bf00      	nop
 800da9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da9e:	bc08      	pop	{r3}
 800daa0:	469e      	mov	lr, r3
 800daa2:	4770      	bx	lr

0800daa4 <_fini>:
 800daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa6:	bf00      	nop
 800daa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daaa:	bc08      	pop	{r3}
 800daac:	469e      	mov	lr, r3
 800daae:	4770      	bx	lr
