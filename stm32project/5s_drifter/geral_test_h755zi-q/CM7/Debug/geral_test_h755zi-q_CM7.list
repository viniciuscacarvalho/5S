
geral_test_h755zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2e0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0800f580  0800f580  00010580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc64  0800fc64  000111d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fc64  0800fc64  00010c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc6c  0800fc6c  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc6c  0800fc6c  00010c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fc70  0800fc70  00010c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800fc74  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003324  240001d8  0800fe4c  000111d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240034fc  0800fe4c  000114fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e00c  00000000  00000000  00011206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ebe  00000000  00000000  0002f212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  000330d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ef  00000000  00000000  00034708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ef80  00000000  00000000  000357f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020527  00000000  00000000  00074777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194b96  00000000  00000000  00094c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00229834  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e64  00000000  00000000  00229878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  002306dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f568 	.word	0x0800f568

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800f568 	.word	0x0800f568

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b49      	ldr	r3, [pc, #292]	@ (8000bd0 <SystemInit+0x12c>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a48      	ldr	r2, [pc, #288]	@ (8000bd0 <SystemInit+0x12c>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000ab8:	4b45      	ldr	r3, [pc, #276]	@ (8000bd0 <SystemInit+0x12c>)
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	4a44      	ldr	r2, [pc, #272]	@ (8000bd0 <SystemInit+0x12c>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac4:	4b43      	ldr	r3, [pc, #268]	@ (8000bd4 <SystemInit+0x130>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	d807      	bhi.n	8000ae0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad0:	4b40      	ldr	r3, [pc, #256]	@ (8000bd4 <SystemInit+0x130>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f023 030f 	bic.w	r3, r3, #15
 8000ad8:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd4 <SystemInit+0x130>)
 8000ada:	f043 0307 	orr.w	r3, r3, #7
 8000ade:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <SystemInit+0x134>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd8 <SystemInit+0x134>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aec:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd8 <SystemInit+0x134>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000af2:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <SystemInit+0x134>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4938      	ldr	r1, [pc, #224]	@ (8000bd8 <SystemInit+0x134>)
 8000af8:	4b38      	ldr	r3, [pc, #224]	@ (8000bdc <SystemInit+0x138>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000afe:	4b35      	ldr	r3, [pc, #212]	@ (8000bd4 <SystemInit+0x130>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d007      	beq.n	8000b1a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b0a:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <SystemInit+0x130>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f023 030f 	bic.w	r3, r3, #15
 8000b12:	4a30      	ldr	r2, [pc, #192]	@ (8000bd4 <SystemInit+0x130>)
 8000b14:	f043 0307 	orr.w	r3, r3, #7
 8000b18:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <SystemInit+0x134>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b20:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <SystemInit+0x134>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b26:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd8 <SystemInit+0x134>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <SystemInit+0x134>)
 8000b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8000be0 <SystemInit+0x13c>)
 8000b30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b32:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <SystemInit+0x134>)
 8000b34:	4a2b      	ldr	r2, [pc, #172]	@ (8000be4 <SystemInit+0x140>)
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <SystemInit+0x134>)
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000be8 <SystemInit+0x144>)
 8000b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <SystemInit+0x134>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <SystemInit+0x134>)
 8000b46:	4a28      	ldr	r2, [pc, #160]	@ (8000be8 <SystemInit+0x144>)
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b4a:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <SystemInit+0x134>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b50:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <SystemInit+0x134>)
 8000b52:	4a25      	ldr	r2, [pc, #148]	@ (8000be8 <SystemInit+0x144>)
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <SystemInit+0x134>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <SystemInit+0x134>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd8 <SystemInit+0x134>)
 8000b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <SystemInit+0x134>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <SystemInit+0x148>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b72:	4a1e      	ldr	r2, [pc, #120]	@ (8000bec <SystemInit+0x148>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <SystemInit+0x14c>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <SystemInit+0x150>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b86:	d202      	bcs.n	8000b8e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <SystemInit+0x154>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <SystemInit+0x134>)
 8000b90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d113      	bne.n	8000bc4 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <SystemInit+0x134>)
 8000b9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <SystemInit+0x134>)
 8000ba4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ba8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <SystemInit+0x158>)
 8000bae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bb2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <SystemInit+0x134>)
 8000bb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bba:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <SystemInit+0x134>)
 8000bbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bc0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	52002000 	.word	0x52002000
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000be0:	02020200 	.word	0x02020200
 8000be4:	01ff0000 	.word	0x01ff0000
 8000be8:	01010280 	.word	0x01010280
 8000bec:	580000c0 	.word	0x580000c0
 8000bf0:	5c001000 	.word	0x5c001000
 8000bf4:	ffff0000 	.word	0xffff0000
 8000bf8:	51008108 	.word	0x51008108
 8000bfc:	52004000 	.word	0x52004000

08000c00 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c0a:	f023 0302 	bic.w	r3, r3, #2
 8000c0e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c10:	bf00      	nop
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f9      	beq.n	8000c12 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	58024800 	.word	0x58024800

08000c30 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c54:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c56:	4a32      	ldr	r2, [pc, #200]	@ (8000d20 <MX_ADC1_Init+0xf0>)
 8000c58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c5a:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c5c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c64:	2210      	movs	r2, #16
 8000c66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c74:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c80:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c92:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c98:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb8:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cba:	f001 f817 	bl	8001cec <HAL_ADC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000cc4:	f000 face 	bl	8001264 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4812      	ldr	r0, [pc, #72]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cd4:	f001 fdce 	bl	8002874 <HAL_ADCEx_MultiModeConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cde:	f000 fac1 	bl	8001264 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_ADC1_Init+0xf4>)
 8000ce4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cee:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000d06:	f001 f993 	bl	8002030 <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d10:	f000 faa8 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	@ 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	240001f4 	.word	0x240001f4
 8000d20:	40022000 	.word	0x40022000
 8000d24:	3ef08000 	.word	0x3ef08000

08000d28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	22c0      	movs	r2, #192	@ 0xc0
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f00b f906 	bl	800bf5a <memset>
  if(adcHandle->Instance==ADC1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a2b      	ldr	r2, [pc, #172]	@ (8000e00 <HAL_ADC_MspInit+0xd8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d14f      	bne.n	8000df8 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d58:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d64:	2304      	movs	r3, #4
 8000d66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000d68:	230a      	movs	r3, #10
 8000d6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d78:	23c0      	movs	r3, #192	@ 0xc0
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 fcb4 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000d9a:	f000 fa63 	bl	8001264 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da4:	4a17      	ldr	r2, [pc, #92]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000da6:	f043 0320 	orr.w	r3, r3, #32
 8000daa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db4:	f003 0320 	and.w	r3, r3, #32
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	4a10      	ldr	r2, [pc, #64]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dda:	2308      	movs	r3, #8
 8000ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000df4:	f002 fc90 	bl	8003718 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000df8:	bf00      	nop
 8000dfa:	37e8      	adds	r7, #232	@ 0xe8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40022000 	.word	0x40022000
 8000e04:	58024400 	.word	0x58024400
 8000e08:	58020000 	.word	0x58020000

08000e0c <MX_GPIO_Init>:
     PG11   ------> ETH_TX_EN
     PG12   ------> USART6_RTS
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b59      	ldr	r3, [pc, #356]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e28:	4a57      	ldr	r2, [pc, #348]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e32:	4b55      	ldr	r3, [pc, #340]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b51      	ldr	r3, [pc, #324]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e46:	4a50      	ldr	r2, [pc, #320]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e50:	4b4d      	ldr	r3, [pc, #308]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e64:	4a48      	ldr	r2, [pc, #288]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6e:	4b46      	ldr	r3, [pc, #280]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7c:	4b42      	ldr	r3, [pc, #264]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e82:	4a41      	ldr	r2, [pc, #260]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea0:	4a39      	ldr	r2, [pc, #228]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eaa:	4b37      	ldr	r3, [pc, #220]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000eb8:	2332      	movs	r3, #50	@ 0x32
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec8:	230b      	movs	r3, #11
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	482e      	ldr	r0, [pc, #184]	@ (8000f8c <MX_GPIO_Init+0x180>)
 8000ed4:	f002 fc20 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ed8:	2386      	movs	r3, #134	@ 0x86
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee8:	230b      	movs	r3, #11
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4827      	ldr	r0, [pc, #156]	@ (8000f90 <MX_GPIO_Init+0x184>)
 8000ef4:	f002 fc10 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ef8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0a:	230b      	movs	r3, #11
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	481f      	ldr	r0, [pc, #124]	@ (8000f94 <MX_GPIO_Init+0x188>)
 8000f16:	f002 fbff 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f1a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4816      	ldr	r0, [pc, #88]	@ (8000f90 <MX_GPIO_Init+0x184>)
 8000f38:	f002 fbee 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8000f3c:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <MX_GPIO_Init+0x18c>)
 8000f5a:	f002 fbdd 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f5e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f70:	230b      	movs	r3, #11
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <MX_GPIO_Init+0x18c>)
 8000f7c:	f002 fbcc 	bl	8003718 <HAL_GPIO_Init>

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	@ 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020800 	.word	0x58020800
 8000f90:	58020000 	.word	0x58020000
 8000f94:	58020400 	.word	0x58020400
 8000f98:	58021800 	.word	0x58021800

08000f9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <MX_I2C1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <MX_I2C1_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd8:	f002 fd7c 	bl	8003ad4 <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 f93f 	bl	8001264 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fea:	f003 faaf 	bl	800454c <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 f936 	bl	8001264 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000ffc:	f003 faf1 	bl	80045e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 f92d 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	24000258 	.word	0x24000258
 8001014:	40005400 	.word	0x40005400
 8001018:	00707cbb 	.word	0x00707cbb

0800101c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0ba      	sub	sp, #232	@ 0xe8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	22c0      	movs	r2, #192	@ 0xc0
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f00a ff8c 	bl	800bf5a <memset>
  if(i2cHandle->Instance==I2C1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <HAL_I2C_MspInit+0xc8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d146      	bne.n	80010da <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800104c:	f04f 0208 	mov.w	r2, #8
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fb4a 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800106e:	f000 f8f9 	bl	8001264 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001090:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001094:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001098:	2312      	movs	r3, #18
 800109a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010aa:	2304      	movs	r3, #4
 80010ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	@ (80010ec <HAL_I2C_MspInit+0xd0>)
 80010b8:	f002 fb2e 	bl	8003718 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 80010be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010c2:	4a09      	ldr	r2, [pc, #36]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 80010ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010da:	bf00      	nop
 80010dc:	37e8      	adds	r7, #232	@ 0xe8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40005400 	.word	0x40005400
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58020400 	.word	0x58020400

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80010f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010fa:	607b      	str	r3, [r7, #4]
  //}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f000 fb76 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f83c 	bl	800117c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001104:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <main+0x88>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110a:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <main+0x88>)
 800110c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <main+0x88>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001122:	2000      	movs	r0, #0
 8001124:	f002 fca8 	bl	8003a78 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f002 fcbe 	bl	8003aac <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001130:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001134:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001136:	bf00      	nop
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <main+0x88>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d104      	bne.n	800114e <main+0x5e>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	1e5a      	subs	r2, r3, #1
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	dcf4      	bgt.n	8001138 <main+0x48>
if ( timeout < 0 )
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	da01      	bge.n	8001158 <main+0x68>
{
Error_Handler();
 8001154:	f000 f886 	bl	8001264 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f7ff fe58 	bl	8000e0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800115c:	f000 fa04 	bl	8001568 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001160:	f7ff fd66 	bl	8000c30 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001164:	f000 f9b4 	bl	80014d0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001168:	f7ff ff18 	bl	8000f9c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  manager_init();
 800116c:	f009 feaa 	bl	800aec4 <manager_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  manager_update();
 8001170:	f009 feb8 	bl	800aee4 <manager_update>
 8001174:	e7fc      	b.n	8001170 <main+0x80>
 8001176:	bf00      	nop
 8001178:	58024400 	.word	0x58024400

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b09c      	sub	sp, #112	@ 0x70
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001186:	224c      	movs	r2, #76	@ 0x4c
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f00a fee5 	bl	800bf5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2220      	movs	r2, #32
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f00a fedf 	bl	800bf5a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800119c:	2004      	movs	r0, #4
 800119e:	f003 fa6d 	bl	800467c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001258 <SystemClock_Config+0xdc>)
 80011a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001258 <SystemClock_Config+0xdc>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <SystemClock_Config+0xdc>)
 80011b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	4b27      	ldr	r3, [pc, #156]	@ (800125c <SystemClock_Config+0xe0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011c4:	4a25      	ldr	r2, [pc, #148]	@ (800125c <SystemClock_Config+0xe0>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b23      	ldr	r3, [pc, #140]	@ (800125c <SystemClock_Config+0xe0>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011d8:	bf00      	nop
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <SystemClock_Config+0xe0>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011e6:	d1f8      	bne.n	80011da <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <SystemClock_Config+0xe4>)
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <SystemClock_Config+0xe4>)
 80011ee:	f023 0303 	bic.w	r3, r3, #3
 80011f2:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f4:	2302      	movs	r3, #2
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fc:	2340      	movs	r3, #64	@ 0x40
 80011fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001200:	2300      	movs	r3, #0
 8001202:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001208:	4618      	mov	r0, r3
 800120a:	f003 fa91 	bl	8004730 <HAL_RCC_OscConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001214:	f000 f826 	bl	8001264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001218:	233f      	movs	r3, #63	@ 0x3f
 800121a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800122c:	2340      	movs	r3, #64	@ 0x40
 800122e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001230:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001234:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2101      	movs	r1, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fed0 	bl	8004fe4 <HAL_RCC_ClockConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800124a:	f000 f80b 	bl	8001264 <Error_Handler>
  }
}
 800124e:	bf00      	nop
 8001250:	3770      	adds	r7, #112	@ 0x70
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	58000400 	.word	0x58000400
 800125c:	58024800 	.word	0x58024800
 8001260:	58024400 	.word	0x58024400

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <Error_Handler+0x8>

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_MspInit+0x30>)
 8001278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800127c:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <HAL_MspInit+0x30>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_MspInit+0x30>)
 8001288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	58024400 	.word	0x58024400

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <NMI_Handler+0x4>

080012ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <MemManage_Handler+0x4>

080012bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <UsageFault_Handler+0x4>

080012cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extended_tick++;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <SysTick_Handler+0x20>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	1c50      	adds	r0, r2, #1
 8001304:	f143 0100 	adc.w	r1, r3, #0
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <SysTick_Handler+0x20>)
 800130a:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130e:	f000 fadf 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	240002b0 	.word	0x240002b0

0800131c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <USART1_IRQHandler+0x10>)
 8001322:	f007 f819 	bl	8008358 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	240002bc 	.word	0x240002bc

08001330 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <USART3_IRQHandler+0x10>)
 8001336:	f007 f80f 	bl	8008358 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24000350 	.word	0x24000350

08001344 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return 1;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_kill>:

int _kill(int pid, int sig)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800135e:	f00a fe4f 	bl	800c000 <__errno>
 8001362:	4603      	mov	r3, r0
 8001364:	2216      	movs	r2, #22
 8001366:	601a      	str	r2, [r3, #0]
  return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_exit>:

void _exit (int status)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800137c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ffe7 	bl	8001354 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001386:	bf00      	nop
 8001388:	e7fd      	b.n	8001386 <_exit+0x12>

0800138a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e00a      	b.n	80013b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800139c:	f3af 8000 	nop.w
 80013a0:	4601      	mov	r1, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	60ba      	str	r2, [r7, #8]
 80013a8:	b2ca      	uxtb	r2, r1
 80013aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dbf0      	blt.n	800139c <_read+0x12>
  }

  return len;
 80013ba:	687b      	ldr	r3, [r7, #4]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	e009      	b.n	80013ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	60ba      	str	r2, [r7, #8]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf1      	blt.n	80013d6 <_write+0x12>
  }
  return len;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_close>:

int _close(int file)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001424:	605a      	str	r2, [r3, #4]
  return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_isatty>:

int _isatty(int file)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800146c:	4a14      	ldr	r2, [pc, #80]	@ (80014c0 <_sbrk+0x5c>)
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <_sbrk+0x60>)
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <_sbrk+0x64>)
 8001482:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <_sbrk+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	429a      	cmp	r2, r3
 8001492:	d207      	bcs.n	80014a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001494:	f00a fdb4 	bl	800c000 <__errno>
 8001498:	4603      	mov	r3, r0
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a2:	e009      	b.n	80014b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <_sbrk+0x64>)
 80014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	24080000 	.word	0x24080000
 80014c4:	00000400 	.word	0x00000400
 80014c8:	240002b8 	.word	0x240002b8
 80014cc:	24003500 	.word	0x24003500

080014d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d4:	4b22      	ldr	r3, [pc, #136]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014d6:	4a23      	ldr	r2, [pc, #140]	@ (8001564 <MX_USART1_UART_Init+0x94>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80014da:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014dc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80014e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 800151a:	f006 fded 	bl	80080f8 <HAL_UART_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001524:	f7ff fe9e 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001528:	2100      	movs	r1, #0
 800152a:	480d      	ldr	r0, [pc, #52]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 800152c:	f009 fb15 	bl	800ab5a <HAL_UARTEx_SetTxFifoThreshold>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001536:	f7ff fe95 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800153a:	2100      	movs	r1, #0
 800153c:	4808      	ldr	r0, [pc, #32]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 800153e:	f009 fb4a 	bl	800abd6 <HAL_UARTEx_SetRxFifoThreshold>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001548:	f7ff fe8c 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 800154e:	f009 facb 	bl	800aae8 <HAL_UARTEx_DisableFifoMode>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001558:	f7ff fe84 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	240002bc 	.word	0x240002bc
 8001564:	40011000 	.word	0x40011000

08001568 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800156e:	4a23      	ldr	r2, [pc, #140]	@ (80015fc <MX_USART3_UART_Init+0x94>)
 8001570:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001572:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015b0:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015b2:	f006 fda1 	bl	80080f8 <HAL_UART_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015bc:	f7ff fe52 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015c4:	f009 fac9 	bl	800ab5a <HAL_UARTEx_SetTxFifoThreshold>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015ce:	f7ff fe49 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015d6:	f009 fafe 	bl	800abd6 <HAL_UARTEx_SetRxFifoThreshold>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015e0:	f7ff fe40 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015e6:	f009 fa7f 	bl	800aae8 <HAL_UARTEx_DisableFifoMode>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015f0:	f7ff fe38 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	24000350 	.word	0x24000350
 80015fc:	40004800 	.word	0x40004800

08001600 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0bc      	sub	sp, #240	@ 0xf0
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	22c0      	movs	r2, #192	@ 0xc0
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f00a fc9a 	bl	800bf5a <memset>
  if(uartHandle->Instance==USART1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a55      	ldr	r2, [pc, #340]	@ (8001780 <HAL_UART_MspInit+0x180>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d14e      	bne.n	80016ce <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001630:	f04f 0201 	mov.w	r2, #1
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 0318 	add.w	r3, r7, #24
 8001646:	4618      	mov	r0, r3
 8001648:	f004 f858 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001652:	f7ff fe07 	bl	8001264 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001656:	4b4b      	ldr	r3, [pc, #300]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800165c:	4a49      	ldr	r2, [pc, #292]	@ (8001784 <HAL_UART_MspInit+0x184>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001666:	4b47      	ldr	r3, [pc, #284]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b43      	ldr	r3, [pc, #268]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167a:	4a42      	ldr	r2, [pc, #264]	@ (8001784 <HAL_UART_MspInit+0x184>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001684:	4b3f      	ldr	r3, [pc, #252]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001692:	23c0      	movs	r3, #192	@ 0xc0
 8001694:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016aa:	2307      	movs	r3, #7
 80016ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016b4:	4619      	mov	r1, r3
 80016b6:	4834      	ldr	r0, [pc, #208]	@ (8001788 <HAL_UART_MspInit+0x188>)
 80016b8:	f002 f82e 	bl	8003718 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2025      	movs	r0, #37	@ 0x25
 80016c2:	f001 fa90 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016c6:	2025      	movs	r0, #37	@ 0x25
 80016c8:	f001 faa7 	bl	8002c1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016cc:	e053      	b.n	8001776 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a2e      	ldr	r2, [pc, #184]	@ (800178c <HAL_UART_MspInit+0x18c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d14e      	bne.n	8001776 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016d8:	f04f 0202 	mov.w	r2, #2
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 f804 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_UART_MspInit+0xfe>
      Error_Handler();
 80016fa:	f7ff fdb3 	bl	8001264 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001704:	4a1f      	ldr	r2, [pc, #124]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001706:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800170a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800170e:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171c:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_UART_MspInit+0x184>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001722:	4a18      	ldr	r2, [pc, #96]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_UART_MspInit+0x184>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800173a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800173e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001754:	2307      	movs	r3, #7
 8001756:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800175e:	4619      	mov	r1, r3
 8001760:	480b      	ldr	r0, [pc, #44]	@ (8001790 <HAL_UART_MspInit+0x190>)
 8001762:	f001 ffd9 	bl	8003718 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2027      	movs	r0, #39	@ 0x27
 800176c:	f001 fa3b 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001770:	2027      	movs	r0, #39	@ 0x27
 8001772:	f001 fa52 	bl	8002c1a <HAL_NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	37f0      	adds	r7, #240	@ 0xf0
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40011000 	.word	0x40011000
 8001784:	58024400 	.word	0x58024400
 8001788:	58020400 	.word	0x58020400
 800178c:	40004800 	.word	0x40004800
 8001790:	58020c00 	.word	0x58020c00

08001794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001794:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80017d0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001798:	f7ff fa32 	bl	8000c00 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800179c:	f7ff f982 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	@ (80017d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c6:	f00a fc21 	bl	800c00c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff fc91 	bl	80010f0 <main>
  bx  lr
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017d8:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80017dc:	0800fc74 	.word	0x0800fc74
  ldr r2, =_sbss
 80017e0:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80017e4:	240034fc 	.word	0x240034fc

080017e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC3_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f2:	2003      	movs	r0, #3
 80017f4:	f001 f9ec 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017f8:	f003 fdaa 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_Init+0x68>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	4913      	ldr	r1, [pc, #76]	@ (8001858 <HAL_Init+0x6c>)
 800180a:	5ccb      	ldrb	r3, [r1, r3]
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
 8001814:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001816:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <HAL_Init+0x68>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	4a0e      	ldr	r2, [pc, #56]	@ (8001858 <HAL_Init+0x6c>)
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	4a0b      	ldr	r2, [pc, #44]	@ (800185c <HAL_Init+0x70>)
 800182e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001830:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <HAL_Init+0x74>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001836:	200f      	movs	r0, #15
 8001838:	f000 f814 	bl	8001864 <HAL_InitTick>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e002      	b.n	800184c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001846:	f7ff fd13 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	58024400 	.word	0x58024400
 8001858:	0800f800 	.word	0x0800f800
 800185c:	24000004 	.word	0x24000004
 8001860:	24000000 	.word	0x24000000

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <HAL_InitTick+0x60>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e021      	b.n	80018bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001878:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <HAL_InitTick+0x64>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <HAL_InitTick+0x60>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f001 f9d1 	bl	8002c36 <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018ac:	f001 f99b 	bl	8002be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <HAL_InitTick+0x68>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2400000c 	.word	0x2400000c
 80018c8:	24000000 	.word	0x24000000
 80018cc:	24000008 	.word	0x24000008

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2400000c 	.word	0x2400000c
 80018f4:	240003e4 	.word	0x240003e4

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	240003e4 	.word	0x240003e4

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff ffee 	bl	80018f8 <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffde 	bl	80018f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2400000c 	.word	0x2400000c

08001958 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <HAL_GetREVID+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	0c1b      	lsrs	r3, r3, #16
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	5c001000 	.word	0x5c001000

08001970 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	609a      	str	r2, [r3, #8]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	609a      	str	r2, [r3, #8]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <LL_ADC_SetChannelPreselection+0x24>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	0e9b      	lsrs	r3, r3, #26
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2201      	movs	r2, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	e015      	b.n	8001a28 <LL_ADC_SetChannelPreselection+0x50>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001a12:	2320      	movs	r3, #32
 8001a14:	e003      	b.n	8001a1e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2201      	movs	r2, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	69d2      	ldr	r2, [r2, #28]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b087      	sub	sp, #28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3360      	adds	r3, #96	@ 0x60
 8001a50:	461a      	mov	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3360      	adds	r3, #96	@ 0x60
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	601a      	str	r2, [r3, #0]
  }
}
 8001ada:	bf00      	nop
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3330      	adds	r3, #48	@ 0x30
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	4413      	add	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	211f      	movs	r1, #31
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	401a      	ands	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	0e9b      	lsrs	r3, r3, #26
 8001b1e:	f003 011f 	and.w	r1, r3, #31
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b087      	sub	sp, #28
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3314      	adds	r3, #20
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	0e5b      	lsrs	r3, r3, #25
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	0d1b      	lsrs	r3, r3, #20
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2107      	movs	r1, #7
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	401a      	ands	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	0d1b      	lsrs	r3, r3, #20
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b88:	bf00      	nop
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bac:	43db      	mvns	r3, r3
 8001bae:	401a      	ands	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0318 	and.w	r3, r3, #24
 8001bb6:	4908      	ldr	r1, [pc, #32]	@ (8001bd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bb8:	40d9      	lsrs	r1, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	000fffff 	.word	0x000fffff

08001bdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6093      	str	r3, [r2, #8]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	5fffffc0 	.word	0x5fffffc0

08001c00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <LL_ADC_EnableInternalRegulator+0x24>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	6fffffc0 	.word	0x6fffffc0

08001c50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c64:	d101      	bne.n	8001c6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <LL_ADC_IsEnabled+0x18>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_ADC_IsEnabled+0x1a>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d101      	bne.n	8001cb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d101      	bne.n	8001cdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e18f      	b.n	8002026 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff f807 	bl	8000d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff67 	bl	8001c00 <LL_ADC_IsDeepPowerDownEnabled>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d004      	beq.n	8001d42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff4d 	bl	8001bdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff82 	bl	8001c50 <LL_ADC_IsInternalRegulatorEnabled>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d114      	bne.n	8001d7c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff66 	bl	8001c28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d5c:	4b87      	ldr	r3, [pc, #540]	@ (8001f7c <HAL_ADC_Init+0x290>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	4a87      	ldr	r2, [pc, #540]	@ (8001f80 <HAL_ADC_Init+0x294>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	099b      	lsrs	r3, r3, #6
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d6e:	e002      	b.n	8001d76 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f9      	bne.n	8001d70 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff65 	bl	8001c50 <LL_ADC_IsInternalRegulatorEnabled>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d90:	f043 0210 	orr.w	r2, r3, #16
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff76 	bl	8001c9e <LL_ADC_REG_IsConversionOngoing>
 8001db2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f040 8129 	bne.w	8002014 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f040 8125 	bne.w	8002014 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dce:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dd2:	f043 0202 	orr.w	r2, r3, #2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff4a 	bl	8001c78 <LL_ADC_IsEnabled>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d136      	bne.n	8001e58 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a65      	ldr	r2, [pc, #404]	@ (8001f84 <HAL_ADC_Init+0x298>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d004      	beq.n	8001dfe <HAL_ADC_Init+0x112>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a63      	ldr	r2, [pc, #396]	@ (8001f88 <HAL_ADC_Init+0x29c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d10e      	bne.n	8001e1c <HAL_ADC_Init+0x130>
 8001dfe:	4861      	ldr	r0, [pc, #388]	@ (8001f84 <HAL_ADC_Init+0x298>)
 8001e00:	f7ff ff3a 	bl	8001c78 <LL_ADC_IsEnabled>
 8001e04:	4604      	mov	r4, r0
 8001e06:	4860      	ldr	r0, [pc, #384]	@ (8001f88 <HAL_ADC_Init+0x29c>)
 8001e08:	f7ff ff36 	bl	8001c78 <LL_ADC_IsEnabled>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4323      	orrs	r3, r4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	e008      	b.n	8001e2e <HAL_ADC_Init+0x142>
 8001e1c:	485b      	ldr	r0, [pc, #364]	@ (8001f8c <HAL_ADC_Init+0x2a0>)
 8001e1e:	f7ff ff2b 	bl	8001c78 <LL_ADC_IsEnabled>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d012      	beq.n	8001e58 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a53      	ldr	r2, [pc, #332]	@ (8001f84 <HAL_ADC_Init+0x298>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_ADC_Init+0x15a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a51      	ldr	r2, [pc, #324]	@ (8001f88 <HAL_ADC_Init+0x29c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_Init+0x15e>
 8001e46:	4a52      	ldr	r2, [pc, #328]	@ (8001f90 <HAL_ADC_Init+0x2a4>)
 8001e48:	e000      	b.n	8001e4c <HAL_ADC_Init+0x160>
 8001e4a:	4a52      	ldr	r2, [pc, #328]	@ (8001f94 <HAL_ADC_Init+0x2a8>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	f7ff fd8c 	bl	8001970 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e58:	f7ff fd7e 	bl	8001958 <HAL_GetREVID>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d914      	bls.n	8001e90 <HAL_ADC_Init+0x1a4>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d110      	bne.n	8001e90 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7d5b      	ldrb	r3, [r3, #21]
 8001e72:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e78:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e7e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7f1b      	ldrb	r3, [r3, #28]
 8001e84:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e86:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e88:	f043 030c 	orr.w	r3, r3, #12
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	e00d      	b.n	8001eac <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7d5b      	ldrb	r3, [r3, #21]
 8001e94:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e9a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ea0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7f1b      	ldrb	r3, [r3, #28]
 8001ea6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7f1b      	ldrb	r3, [r3, #28]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d106      	bne.n	8001ec2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	045b      	lsls	r3, r3, #17
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f98 <HAL_ADC_Init+0x2ac>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	69b9      	ldr	r1, [r7, #24]
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fed1 	bl	8001c9e <LL_ADC_REG_IsConversionOngoing>
 8001efc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fede 	bl	8001cc4 <LL_ADC_INJ_IsConversionOngoing>
 8001f08:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d15f      	bne.n	8001fd0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d15c      	bne.n	8001fd0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7d1b      	ldrb	r3, [r3, #20]
 8001f1a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <HAL_ADC_Init+0x2b0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	69b9      	ldr	r1, [r7, #24]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d130      	bne.n	8001fa4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f46:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <HAL_ADC_Init+0x2b4>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f56:	3a01      	subs	r2, #1
 8001f58:	0411      	lsls	r1, r2, #16
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f64:	4311      	orrs	r1, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	611a      	str	r2, [r3, #16]
 8001f78:	e01c      	b.n	8001fb4 <HAL_ADC_Init+0x2c8>
 8001f7a:	bf00      	nop
 8001f7c:	24000000 	.word	0x24000000
 8001f80:	053e2d63 	.word	0x053e2d63
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40022100 	.word	0x40022100
 8001f8c:	58026000 	.word	0x58026000
 8001f90:	40022300 	.word	0x40022300
 8001f94:	58026300 	.word	0x58026300
 8001f98:	fff0c003 	.word	0xfff0c003
 8001f9c:	ffffbffc 	.word	0xffffbffc
 8001fa0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fb20 	bl	8002610 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f023 010f 	bic.w	r1, r3, #15
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	1e5a      	subs	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ff0:	e007      	b.n	8002002 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 020f 	bic.w	r2, r2, #15
 8002000:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	f023 0303 	bic.w	r3, r3, #3
 800200a:	f043 0201 	orr.w	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	655a      	str	r2, [r3, #84]	@ 0x54
 8002012:	e007      	b.n	8002024 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002018:	f043 0210 	orr.w	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002024:	7ffb      	ldrb	r3, [r7, #31]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	bf00      	nop

08002030 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b08d      	sub	sp, #52	@ 0x34
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a65      	ldr	r2, [pc, #404]	@ (80021e0 <HAL_ADC_ConfigChannel+0x1b0>)
 800204a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x2a>
 8002056:	2302      	movs	r3, #2
 8002058:	e2c7      	b.n	80025ea <HAL_ADC_ConfigChannel+0x5ba>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fe19 	bl	8001c9e <LL_ADC_REG_IsConversionOngoing>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	f040 82ac 	bne.w	80025cc <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db2c      	blt.n	80020d6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002084:	2b00      	cmp	r3, #0
 8002086:	d108      	bne.n	800209a <HAL_ADC_ConfigChannel+0x6a>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	2201      	movs	r2, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	e016      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x98>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	613b      	str	r3, [r7, #16]
  return result;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80020b2:	2320      	movs	r3, #32
 80020b4:	e003      	b.n	80020be <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	2201      	movs	r2, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	69d1      	ldr	r1, [r2, #28]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	430b      	orrs	r3, r1
 80020d4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f7ff fcff 	bl	8001ae6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fdd6 	bl	8001c9e <LL_ADC_REG_IsConversionOngoing>
 80020f2:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fde3 	bl	8001cc4 <LL_ADC_INJ_IsConversionOngoing>
 80020fe:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 80b8 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 80b4 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6819      	ldr	r1, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	461a      	mov	r2, r3
 800211e:	f7ff fd0e 	bl	8001b3e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002122:	4b30      	ldr	r3, [pc, #192]	@ (80021e4 <HAL_ADC_ConfigChannel+0x1b4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800212a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800212e:	d10b      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x118>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	e01d      	b.n	8002184 <HAL_ADC_ConfigChannel+0x154>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10b      	bne.n	800216e <HAL_ADC_ConfigChannel+0x13e>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	e00a      	b.n	8002184 <HAL_ADC_ConfigChannel+0x154>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d02c      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	f7ff fc4f 	bl	8001a3e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6919      	ldr	r1, [r3, #16]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	7e5b      	ldrb	r3, [r3, #25]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d102      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x186>
 80021b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80021b4:	e000      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x188>
 80021b6:	2300      	movs	r3, #0
 80021b8:	461a      	mov	r2, r3
 80021ba:	f7ff fc79 	bl	8001ab0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6919      	ldr	r1, [r3, #16]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	7e1b      	ldrb	r3, [r3, #24]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d102      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1a4>
 80021ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021d2:	e000      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x1a6>
 80021d4:	2300      	movs	r3, #0
 80021d6:	461a      	mov	r2, r3
 80021d8:	f7ff fc51 	bl	8001a7e <LL_ADC_SetDataRightShift>
 80021dc:	e04c      	b.n	8002278 <HAL_ADC_ConfigChannel+0x248>
 80021de:	bf00      	nop
 80021e0:	47ff0000 	.word	0x47ff0000
 80021e4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	069b      	lsls	r3, r3, #26
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d107      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800220a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002212:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	069b      	lsls	r3, r3, #26
 800221c:	429a      	cmp	r2, r3
 800221e:	d107      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800222e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002236:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	069b      	lsls	r3, r3, #26
 8002240:	429a      	cmp	r2, r3
 8002242:	d107      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002252:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800225a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	069b      	lsls	r3, r3, #26
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002276:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fcfb 	bl	8001c78 <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 81aa 	bne.w	80025de <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6819      	ldr	r1, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	461a      	mov	r2, r3
 8002298:	f7ff fc7c 	bl	8001b94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a87      	ldr	r2, [pc, #540]	@ (80024c0 <HAL_ADC_ConfigChannel+0x490>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	f040 809a 	bne.w	80023dc <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4984      	ldr	r1, [pc, #528]	@ (80024c4 <HAL_ADC_ConfigChannel+0x494>)
 80022b2:	428b      	cmp	r3, r1
 80022b4:	d147      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x316>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4983      	ldr	r1, [pc, #524]	@ (80024c8 <HAL_ADC_ConfigChannel+0x498>)
 80022bc:	428b      	cmp	r3, r1
 80022be:	d040      	beq.n	8002342 <HAL_ADC_ConfigChannel+0x312>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4981      	ldr	r1, [pc, #516]	@ (80024cc <HAL_ADC_ConfigChannel+0x49c>)
 80022c6:	428b      	cmp	r3, r1
 80022c8:	d039      	beq.n	800233e <HAL_ADC_ConfigChannel+0x30e>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4980      	ldr	r1, [pc, #512]	@ (80024d0 <HAL_ADC_ConfigChannel+0x4a0>)
 80022d0:	428b      	cmp	r3, r1
 80022d2:	d032      	beq.n	800233a <HAL_ADC_ConfigChannel+0x30a>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	497e      	ldr	r1, [pc, #504]	@ (80024d4 <HAL_ADC_ConfigChannel+0x4a4>)
 80022da:	428b      	cmp	r3, r1
 80022dc:	d02b      	beq.n	8002336 <HAL_ADC_ConfigChannel+0x306>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	497d      	ldr	r1, [pc, #500]	@ (80024d8 <HAL_ADC_ConfigChannel+0x4a8>)
 80022e4:	428b      	cmp	r3, r1
 80022e6:	d024      	beq.n	8002332 <HAL_ADC_ConfigChannel+0x302>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	497b      	ldr	r1, [pc, #492]	@ (80024dc <HAL_ADC_ConfigChannel+0x4ac>)
 80022ee:	428b      	cmp	r3, r1
 80022f0:	d01d      	beq.n	800232e <HAL_ADC_ConfigChannel+0x2fe>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	497a      	ldr	r1, [pc, #488]	@ (80024e0 <HAL_ADC_ConfigChannel+0x4b0>)
 80022f8:	428b      	cmp	r3, r1
 80022fa:	d016      	beq.n	800232a <HAL_ADC_ConfigChannel+0x2fa>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4978      	ldr	r1, [pc, #480]	@ (80024e4 <HAL_ADC_ConfigChannel+0x4b4>)
 8002302:	428b      	cmp	r3, r1
 8002304:	d00f      	beq.n	8002326 <HAL_ADC_ConfigChannel+0x2f6>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4977      	ldr	r1, [pc, #476]	@ (80024e8 <HAL_ADC_ConfigChannel+0x4b8>)
 800230c:	428b      	cmp	r3, r1
 800230e:	d008      	beq.n	8002322 <HAL_ADC_ConfigChannel+0x2f2>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4975      	ldr	r1, [pc, #468]	@ (80024ec <HAL_ADC_ConfigChannel+0x4bc>)
 8002316:	428b      	cmp	r3, r1
 8002318:	d101      	bne.n	800231e <HAL_ADC_ConfigChannel+0x2ee>
 800231a:	4b75      	ldr	r3, [pc, #468]	@ (80024f0 <HAL_ADC_ConfigChannel+0x4c0>)
 800231c:	e05a      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 800231e:	2300      	movs	r3, #0
 8002320:	e058      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 8002322:	4b74      	ldr	r3, [pc, #464]	@ (80024f4 <HAL_ADC_ConfigChannel+0x4c4>)
 8002324:	e056      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 8002326:	4b74      	ldr	r3, [pc, #464]	@ (80024f8 <HAL_ADC_ConfigChannel+0x4c8>)
 8002328:	e054      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 800232a:	4b6e      	ldr	r3, [pc, #440]	@ (80024e4 <HAL_ADC_ConfigChannel+0x4b4>)
 800232c:	e052      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 800232e:	4b6c      	ldr	r3, [pc, #432]	@ (80024e0 <HAL_ADC_ConfigChannel+0x4b0>)
 8002330:	e050      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 8002332:	4b72      	ldr	r3, [pc, #456]	@ (80024fc <HAL_ADC_ConfigChannel+0x4cc>)
 8002334:	e04e      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 8002336:	4b72      	ldr	r3, [pc, #456]	@ (8002500 <HAL_ADC_ConfigChannel+0x4d0>)
 8002338:	e04c      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 800233a:	4b72      	ldr	r3, [pc, #456]	@ (8002504 <HAL_ADC_ConfigChannel+0x4d4>)
 800233c:	e04a      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 800233e:	4b72      	ldr	r3, [pc, #456]	@ (8002508 <HAL_ADC_ConfigChannel+0x4d8>)
 8002340:	e048      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 8002342:	2301      	movs	r3, #1
 8002344:	e046      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4970      	ldr	r1, [pc, #448]	@ (800250c <HAL_ADC_ConfigChannel+0x4dc>)
 800234c:	428b      	cmp	r3, r1
 800234e:	d140      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x3a2>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	495c      	ldr	r1, [pc, #368]	@ (80024c8 <HAL_ADC_ConfigChannel+0x498>)
 8002356:	428b      	cmp	r3, r1
 8002358:	d039      	beq.n	80023ce <HAL_ADC_ConfigChannel+0x39e>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	495b      	ldr	r1, [pc, #364]	@ (80024cc <HAL_ADC_ConfigChannel+0x49c>)
 8002360:	428b      	cmp	r3, r1
 8002362:	d032      	beq.n	80023ca <HAL_ADC_ConfigChannel+0x39a>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4959      	ldr	r1, [pc, #356]	@ (80024d0 <HAL_ADC_ConfigChannel+0x4a0>)
 800236a:	428b      	cmp	r3, r1
 800236c:	d02b      	beq.n	80023c6 <HAL_ADC_ConfigChannel+0x396>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4958      	ldr	r1, [pc, #352]	@ (80024d4 <HAL_ADC_ConfigChannel+0x4a4>)
 8002374:	428b      	cmp	r3, r1
 8002376:	d024      	beq.n	80023c2 <HAL_ADC_ConfigChannel+0x392>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4956      	ldr	r1, [pc, #344]	@ (80024d8 <HAL_ADC_ConfigChannel+0x4a8>)
 800237e:	428b      	cmp	r3, r1
 8002380:	d01d      	beq.n	80023be <HAL_ADC_ConfigChannel+0x38e>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4955      	ldr	r1, [pc, #340]	@ (80024dc <HAL_ADC_ConfigChannel+0x4ac>)
 8002388:	428b      	cmp	r3, r1
 800238a:	d016      	beq.n	80023ba <HAL_ADC_ConfigChannel+0x38a>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4953      	ldr	r1, [pc, #332]	@ (80024e0 <HAL_ADC_ConfigChannel+0x4b0>)
 8002392:	428b      	cmp	r3, r1
 8002394:	d00f      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x386>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4952      	ldr	r1, [pc, #328]	@ (80024e4 <HAL_ADC_ConfigChannel+0x4b4>)
 800239c:	428b      	cmp	r3, r1
 800239e:	d008      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x382>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4951      	ldr	r1, [pc, #324]	@ (80024ec <HAL_ADC_ConfigChannel+0x4bc>)
 80023a6:	428b      	cmp	r3, r1
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x37e>
 80023aa:	4b51      	ldr	r3, [pc, #324]	@ (80024f0 <HAL_ADC_ConfigChannel+0x4c0>)
 80023ac:	e012      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 80023ae:	2300      	movs	r3, #0
 80023b0:	e010      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 80023b2:	4b51      	ldr	r3, [pc, #324]	@ (80024f8 <HAL_ADC_ConfigChannel+0x4c8>)
 80023b4:	e00e      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 80023b6:	4b4b      	ldr	r3, [pc, #300]	@ (80024e4 <HAL_ADC_ConfigChannel+0x4b4>)
 80023b8:	e00c      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 80023ba:	4b49      	ldr	r3, [pc, #292]	@ (80024e0 <HAL_ADC_ConfigChannel+0x4b0>)
 80023bc:	e00a      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 80023be:	4b4f      	ldr	r3, [pc, #316]	@ (80024fc <HAL_ADC_ConfigChannel+0x4cc>)
 80023c0:	e008      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 80023c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002500 <HAL_ADC_ConfigChannel+0x4d0>)
 80023c4:	e006      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 80023c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002504 <HAL_ADC_ConfigChannel+0x4d4>)
 80023c8:	e004      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 80023ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002508 <HAL_ADC_ConfigChannel+0x4d8>)
 80023cc:	e002      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x3a4>
 80023d2:	2300      	movs	r3, #0
 80023d4:	4619      	mov	r1, r3
 80023d6:	4610      	mov	r0, r2
 80023d8:	f7ff fafe 	bl	80019d8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f280 80fc 	bge.w	80025de <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a36      	ldr	r2, [pc, #216]	@ (80024c4 <HAL_ADC_ConfigChannel+0x494>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_ADC_ConfigChannel+0x3ca>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a45      	ldr	r2, [pc, #276]	@ (800250c <HAL_ADC_ConfigChannel+0x4dc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x3ce>
 80023fa:	4b45      	ldr	r3, [pc, #276]	@ (8002510 <HAL_ADC_ConfigChannel+0x4e0>)
 80023fc:	e000      	b.n	8002400 <HAL_ADC_ConfigChannel+0x3d0>
 80023fe:	4b45      	ldr	r3, [pc, #276]	@ (8002514 <HAL_ADC_ConfigChannel+0x4e4>)
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fadb 	bl	80019bc <LL_ADC_GetCommonPathInternalCh>
 8002406:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2d      	ldr	r2, [pc, #180]	@ (80024c4 <HAL_ADC_ConfigChannel+0x494>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_ADC_ConfigChannel+0x3ec>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a3d      	ldr	r2, [pc, #244]	@ (800250c <HAL_ADC_ConfigChannel+0x4dc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d10e      	bne.n	800243a <HAL_ADC_ConfigChannel+0x40a>
 800241c:	4829      	ldr	r0, [pc, #164]	@ (80024c4 <HAL_ADC_ConfigChannel+0x494>)
 800241e:	f7ff fc2b 	bl	8001c78 <LL_ADC_IsEnabled>
 8002422:	4604      	mov	r4, r0
 8002424:	4839      	ldr	r0, [pc, #228]	@ (800250c <HAL_ADC_ConfigChannel+0x4dc>)
 8002426:	f7ff fc27 	bl	8001c78 <LL_ADC_IsEnabled>
 800242a:	4603      	mov	r3, r0
 800242c:	4323      	orrs	r3, r4
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf0c      	ite	eq
 8002432:	2301      	moveq	r3, #1
 8002434:	2300      	movne	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	e008      	b.n	800244c <HAL_ADC_ConfigChannel+0x41c>
 800243a:	4837      	ldr	r0, [pc, #220]	@ (8002518 <HAL_ADC_ConfigChannel+0x4e8>)
 800243c:	f7ff fc1c 	bl	8001c78 <LL_ADC_IsEnabled>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	bf0c      	ite	eq
 8002446:	2301      	moveq	r3, #1
 8002448:	2300      	movne	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80b3 	beq.w	80025b8 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a31      	ldr	r2, [pc, #196]	@ (800251c <HAL_ADC_ConfigChannel+0x4ec>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d165      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x4f8>
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d160      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2b      	ldr	r2, [pc, #172]	@ (8002518 <HAL_ADC_ConfigChannel+0x4e8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	f040 80b6 	bne.w	80025de <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a13      	ldr	r2, [pc, #76]	@ (80024c4 <HAL_ADC_ConfigChannel+0x494>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d004      	beq.n	8002486 <HAL_ADC_ConfigChannel+0x456>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a22      	ldr	r2, [pc, #136]	@ (800250c <HAL_ADC_ConfigChannel+0x4dc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x45a>
 8002486:	4a22      	ldr	r2, [pc, #136]	@ (8002510 <HAL_ADC_ConfigChannel+0x4e0>)
 8002488:	e000      	b.n	800248c <HAL_ADC_ConfigChannel+0x45c>
 800248a:	4a22      	ldr	r2, [pc, #136]	@ (8002514 <HAL_ADC_ConfigChannel+0x4e4>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f7ff fa7e 	bl	8001996 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800249a:	4b21      	ldr	r3, [pc, #132]	@ (8002520 <HAL_ADC_ConfigChannel+0x4f0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	099b      	lsrs	r3, r3, #6
 80024a0:	4a20      	ldr	r2, [pc, #128]	@ (8002524 <HAL_ADC_ConfigChannel+0x4f4>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	3301      	adds	r3, #1
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80024ae:	e002      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f9      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024bc:	e08f      	b.n	80025de <HAL_ADC_ConfigChannel+0x5ae>
 80024be:	bf00      	nop
 80024c0:	47ff0000 	.word	0x47ff0000
 80024c4:	40022000 	.word	0x40022000
 80024c8:	04300002 	.word	0x04300002
 80024cc:	08600004 	.word	0x08600004
 80024d0:	0c900008 	.word	0x0c900008
 80024d4:	10c00010 	.word	0x10c00010
 80024d8:	14f00020 	.word	0x14f00020
 80024dc:	2a000400 	.word	0x2a000400
 80024e0:	2e300800 	.word	0x2e300800
 80024e4:	32601000 	.word	0x32601000
 80024e8:	43210000 	.word	0x43210000
 80024ec:	4b840000 	.word	0x4b840000
 80024f0:	4fb80000 	.word	0x4fb80000
 80024f4:	47520000 	.word	0x47520000
 80024f8:	36902000 	.word	0x36902000
 80024fc:	25b00200 	.word	0x25b00200
 8002500:	21800100 	.word	0x21800100
 8002504:	1d500080 	.word	0x1d500080
 8002508:	19200040 	.word	0x19200040
 800250c:	40022100 	.word	0x40022100
 8002510:	40022300 	.word	0x40022300
 8002514:	58026300 	.word	0x58026300
 8002518:	58026000 	.word	0x58026000
 800251c:	cb840000 	.word	0xcb840000
 8002520:	24000000 	.word	0x24000000
 8002524:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a31      	ldr	r2, [pc, #196]	@ (80025f4 <HAL_ADC_ConfigChannel+0x5c4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d11e      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x540>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d119      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a2d      	ldr	r2, [pc, #180]	@ (80025f8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d14b      	bne.n	80025de <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2c      	ldr	r2, [pc, #176]	@ (80025fc <HAL_ADC_ConfigChannel+0x5cc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d004      	beq.n	800255a <HAL_ADC_ConfigChannel+0x52a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2a      	ldr	r2, [pc, #168]	@ (8002600 <HAL_ADC_ConfigChannel+0x5d0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d101      	bne.n	800255e <HAL_ADC_ConfigChannel+0x52e>
 800255a:	4a2a      	ldr	r2, [pc, #168]	@ (8002604 <HAL_ADC_ConfigChannel+0x5d4>)
 800255c:	e000      	b.n	8002560 <HAL_ADC_ConfigChannel+0x530>
 800255e:	4a2a      	ldr	r2, [pc, #168]	@ (8002608 <HAL_ADC_ConfigChannel+0x5d8>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002566:	4619      	mov	r1, r3
 8002568:	4610      	mov	r0, r2
 800256a:	f7ff fa14 	bl	8001996 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800256e:	e036      	b.n	80025de <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a25      	ldr	r2, [pc, #148]	@ (800260c <HAL_ADC_ConfigChannel+0x5dc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d131      	bne.n	80025de <HAL_ADC_ConfigChannel+0x5ae>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d12c      	bne.n	80025de <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1b      	ldr	r2, [pc, #108]	@ (80025f8 <HAL_ADC_ConfigChannel+0x5c8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d127      	bne.n	80025de <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1a      	ldr	r2, [pc, #104]	@ (80025fc <HAL_ADC_ConfigChannel+0x5cc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d004      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0x572>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a18      	ldr	r2, [pc, #96]	@ (8002600 <HAL_ADC_ConfigChannel+0x5d0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x576>
 80025a2:	4a18      	ldr	r2, [pc, #96]	@ (8002604 <HAL_ADC_ConfigChannel+0x5d4>)
 80025a4:	e000      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x578>
 80025a6:	4a18      	ldr	r2, [pc, #96]	@ (8002608 <HAL_ADC_ConfigChannel+0x5d8>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f7ff f9f0 	bl	8001996 <LL_ADC_SetCommonPathInternalCh>
 80025b6:	e012      	b.n	80025de <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80025ca:	e008      	b.n	80025de <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80025e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3734      	adds	r7, #52	@ 0x34
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	c7520000 	.word	0xc7520000
 80025f8:	58026000 	.word	0x58026000
 80025fc:	40022000 	.word	0x40022000
 8002600:	40022100 	.word	0x40022100
 8002604:	40022300 	.word	0x40022300
 8002608:	58026300 	.word	0x58026300
 800260c:	cfb80000 	.word	0xcfb80000

08002610 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a7a      	ldr	r2, [pc, #488]	@ (8002808 <ADC_ConfigureBoostMode+0x1f8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <ADC_ConfigureBoostMode+0x1c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a79      	ldr	r2, [pc, #484]	@ (800280c <ADC_ConfigureBoostMode+0x1fc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d109      	bne.n	8002640 <ADC_ConfigureBoostMode+0x30>
 800262c:	4b78      	ldr	r3, [pc, #480]	@ (8002810 <ADC_ConfigureBoostMode+0x200>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e008      	b.n	8002652 <ADC_ConfigureBoostMode+0x42>
 8002640:	4b74      	ldr	r3, [pc, #464]	@ (8002814 <ADC_ConfigureBoostMode+0x204>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01c      	beq.n	8002690 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002656:	f002 fff5 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 800265a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002664:	d010      	beq.n	8002688 <ADC_ConfigureBoostMode+0x78>
 8002666:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800266a:	d873      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x144>
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002670:	d002      	beq.n	8002678 <ADC_ConfigureBoostMode+0x68>
 8002672:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002676:	d16d      	bne.n	8002754 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	fbb2 f3f3 	udiv	r3, r2, r3
 8002684:	60fb      	str	r3, [r7, #12]
        break;
 8002686:	e068      	b.n	800275a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	60fb      	str	r3, [r7, #12]
        break;
 800268e:	e064      	b.n	800275a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002690:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	f004 fa3a 	bl	8006b10 <HAL_RCCEx_GetPeriphCLKFreq>
 800269c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80026a6:	d051      	beq.n	800274c <ADC_ConfigureBoostMode+0x13c>
 80026a8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80026ac:	d854      	bhi.n	8002758 <ADC_ConfigureBoostMode+0x148>
 80026ae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80026b2:	d047      	beq.n	8002744 <ADC_ConfigureBoostMode+0x134>
 80026b4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80026b8:	d84e      	bhi.n	8002758 <ADC_ConfigureBoostMode+0x148>
 80026ba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80026be:	d03d      	beq.n	800273c <ADC_ConfigureBoostMode+0x12c>
 80026c0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80026c4:	d848      	bhi.n	8002758 <ADC_ConfigureBoostMode+0x148>
 80026c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026ca:	d033      	beq.n	8002734 <ADC_ConfigureBoostMode+0x124>
 80026cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026d0:	d842      	bhi.n	8002758 <ADC_ConfigureBoostMode+0x148>
 80026d2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026d6:	d029      	beq.n	800272c <ADC_ConfigureBoostMode+0x11c>
 80026d8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026dc:	d83c      	bhi.n	8002758 <ADC_ConfigureBoostMode+0x148>
 80026de:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026e2:	d01a      	beq.n	800271a <ADC_ConfigureBoostMode+0x10a>
 80026e4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026e8:	d836      	bhi.n	8002758 <ADC_ConfigureBoostMode+0x148>
 80026ea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026ee:	d014      	beq.n	800271a <ADC_ConfigureBoostMode+0x10a>
 80026f0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026f4:	d830      	bhi.n	8002758 <ADC_ConfigureBoostMode+0x148>
 80026f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026fa:	d00e      	beq.n	800271a <ADC_ConfigureBoostMode+0x10a>
 80026fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002700:	d82a      	bhi.n	8002758 <ADC_ConfigureBoostMode+0x148>
 8002702:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002706:	d008      	beq.n	800271a <ADC_ConfigureBoostMode+0x10a>
 8002708:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800270c:	d824      	bhi.n	8002758 <ADC_ConfigureBoostMode+0x148>
 800270e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002712:	d002      	beq.n	800271a <ADC_ConfigureBoostMode+0x10a>
 8002714:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002718:	d11e      	bne.n	8002758 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0c9b      	lsrs	r3, r3, #18
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	60fb      	str	r3, [r7, #12]
        break;
 800272a:	e016      	b.n	800275a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	60fb      	str	r3, [r7, #12]
        break;
 8002732:	e012      	b.n	800275a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	60fb      	str	r3, [r7, #12]
        break;
 800273a:	e00e      	b.n	800275a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	099b      	lsrs	r3, r3, #6
 8002740:	60fb      	str	r3, [r7, #12]
        break;
 8002742:	e00a      	b.n	800275a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	09db      	lsrs	r3, r3, #7
 8002748:	60fb      	str	r3, [r7, #12]
        break;
 800274a:	e006      	b.n	800275a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	60fb      	str	r3, [r7, #12]
        break;
 8002752:	e002      	b.n	800275a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002754:	bf00      	nop
 8002756:	e000      	b.n	800275a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002758:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800275a:	f7ff f8fd 	bl	8001958 <HAL_GetREVID>
 800275e:	4603      	mov	r3, r0
 8002760:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002764:	4293      	cmp	r3, r2
 8002766:	d815      	bhi.n	8002794 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a2b      	ldr	r2, [pc, #172]	@ (8002818 <ADC_ConfigureBoostMode+0x208>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d908      	bls.n	8002782 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800277e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002780:	e03e      	b.n	8002800 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002790:	609a      	str	r2, [r3, #8]
}
 8002792:	e035      	b.n	8002800 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4a1f      	ldr	r2, [pc, #124]	@ (800281c <ADC_ConfigureBoostMode+0x20c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d808      	bhi.n	80027b4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80027b0:	609a      	str	r2, [r3, #8]
}
 80027b2:	e025      	b.n	8002800 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002820 <ADC_ConfigureBoostMode+0x210>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d80a      	bhi.n	80027d2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	e016      	b.n	8002800 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a13      	ldr	r2, [pc, #76]	@ (8002824 <ADC_ConfigureBoostMode+0x214>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d80a      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	e007      	b.n	8002800 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80027fe:	609a      	str	r2, [r3, #8]
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40022000 	.word	0x40022000
 800280c:	40022100 	.word	0x40022100
 8002810:	40022300 	.word	0x40022300
 8002814:	58026300 	.word	0x58026300
 8002818:	01312d00 	.word	0x01312d00
 800281c:	005f5e10 	.word	0x005f5e10
 8002820:	00bebc20 	.word	0x00bebc20
 8002824:	017d7840 	.word	0x017d7840

08002828 <LL_ADC_IsEnabled>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <LL_ADC_IsEnabled+0x18>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <LL_ADC_IsEnabled+0x1a>
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_ADC_REG_IsConversionOngoing>:
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b04      	cmp	r3, #4
 8002860:	d101      	bne.n	8002866 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b09f      	sub	sp, #124	@ 0x7c
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800288e:	2302      	movs	r3, #2
 8002890:	e0be      	b.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800289e:	2300      	movs	r3, #0
 80028a0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d102      	bne.n	80028b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028ac:	4b5b      	ldr	r3, [pc, #364]	@ (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	e001      	b.n	80028b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e09d      	b.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ffb9 	bl	800284e <LL_ADC_REG_IsConversionOngoing>
 80028dc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ffb3 	bl	800284e <LL_ADC_REG_IsConversionOngoing>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d17f      	bne.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d17c      	bne.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a47      	ldr	r2, [pc, #284]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a46      	ldr	r2, [pc, #280]	@ (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002908:	4b45      	ldr	r3, [pc, #276]	@ (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800290a:	e000      	b.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800290c:	4b45      	ldr	r3, [pc, #276]	@ (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800290e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d039      	beq.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	431a      	orrs	r2, r3
 8002926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002928:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d004      	beq.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a38      	ldr	r2, [pc, #224]	@ (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d10e      	bne.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800293e:	4836      	ldr	r0, [pc, #216]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002940:	f7ff ff72 	bl	8002828 <LL_ADC_IsEnabled>
 8002944:	4604      	mov	r4, r0
 8002946:	4835      	ldr	r0, [pc, #212]	@ (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002948:	f7ff ff6e 	bl	8002828 <LL_ADC_IsEnabled>
 800294c:	4603      	mov	r3, r0
 800294e:	4323      	orrs	r3, r4
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e008      	b.n	800296e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800295c:	4832      	ldr	r0, [pc, #200]	@ (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800295e:	f7ff ff63 	bl	8002828 <LL_ADC_IsEnabled>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d047      	beq.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002978:	4013      	ands	r3, r2
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	6811      	ldr	r1, [r2, #0]
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	6892      	ldr	r2, [r2, #8]
 8002982:	430a      	orrs	r2, r1
 8002984:	431a      	orrs	r2, r3
 8002986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002988:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800298a:	e03a      	b.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800298c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002996:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d10e      	bne.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80029ac:	481a      	ldr	r0, [pc, #104]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029ae:	f7ff ff3b 	bl	8002828 <LL_ADC_IsEnabled>
 80029b2:	4604      	mov	r4, r0
 80029b4:	4819      	ldr	r0, [pc, #100]	@ (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029b6:	f7ff ff37 	bl	8002828 <LL_ADC_IsEnabled>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4323      	orrs	r3, r4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e008      	b.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80029ca:	4817      	ldr	r0, [pc, #92]	@ (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80029cc:	f7ff ff2c 	bl	8002828 <LL_ADC_IsEnabled>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d010      	beq.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029ec:	e009      	b.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f2:	f043 0220 	orr.w	r2, r3, #32
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002a00:	e000      	b.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a02:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a0c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	377c      	adds	r7, #124	@ 0x7c
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd90      	pop	{r4, r7, pc}
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40022100 	.word	0x40022100
 8002a20:	40022300 	.word	0x40022300
 8002a24:	58026300 	.word	0x58026300
 8002a28:	58026000 	.word	0x58026000
 8002a2c:	fffff0e0 	.word	0xfffff0e0

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x40>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x40>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00
 8002a74:	05fa0000 	.word	0x05fa0000

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	@ (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	@ (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	@ (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	@ 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	@ 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b9c:	d301      	bcc.n	8002ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bcc <SysTick_Config+0x40>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bb0:	f7ff ff8e 	bl	8002ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <SysTick_Config+0x40>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bba:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <SysTick_Config+0x40>)
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff29 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf4:	f7ff ff40 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	6978      	ldr	r0, [r7, #20]
 8002c00:	f7ff ff90 	bl	8002b24 <NVIC_EncodePriority>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff5f 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff33 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffa4 	bl	8002b8c <SysTick_Config>
 8002c44:	4603      	mov	r3, r0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7fe fe4e 	bl	80018f8 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e2dc      	b.n	8003222 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d008      	beq.n	8002c86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2280      	movs	r2, #128	@ 0x80
 8002c78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e2cd      	b.n	8003222 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a76      	ldr	r2, [pc, #472]	@ (8002e64 <HAL_DMA_Abort+0x214>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d04a      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a74      	ldr	r2, [pc, #464]	@ (8002e68 <HAL_DMA_Abort+0x218>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d045      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a73      	ldr	r2, [pc, #460]	@ (8002e6c <HAL_DMA_Abort+0x21c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d040      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a71      	ldr	r2, [pc, #452]	@ (8002e70 <HAL_DMA_Abort+0x220>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d03b      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a70      	ldr	r2, [pc, #448]	@ (8002e74 <HAL_DMA_Abort+0x224>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d036      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a6e      	ldr	r2, [pc, #440]	@ (8002e78 <HAL_DMA_Abort+0x228>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d031      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a6d      	ldr	r2, [pc, #436]	@ (8002e7c <HAL_DMA_Abort+0x22c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d02c      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a6b      	ldr	r2, [pc, #428]	@ (8002e80 <HAL_DMA_Abort+0x230>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d027      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a6a      	ldr	r2, [pc, #424]	@ (8002e84 <HAL_DMA_Abort+0x234>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d022      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a68      	ldr	r2, [pc, #416]	@ (8002e88 <HAL_DMA_Abort+0x238>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01d      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a67      	ldr	r2, [pc, #412]	@ (8002e8c <HAL_DMA_Abort+0x23c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a65      	ldr	r2, [pc, #404]	@ (8002e90 <HAL_DMA_Abort+0x240>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a64      	ldr	r2, [pc, #400]	@ (8002e94 <HAL_DMA_Abort+0x244>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a62      	ldr	r2, [pc, #392]	@ (8002e98 <HAL_DMA_Abort+0x248>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a61      	ldr	r2, [pc, #388]	@ (8002e9c <HAL_DMA_Abort+0x24c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea0 <HAL_DMA_Abort+0x250>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_DMA_Abort+0xda>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_DMA_Abort+0xdc>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 021e 	bic.w	r2, r2, #30
 8002d3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e00a      	b.n	8002d6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 020e 	bic.w	r2, r2, #14
 8002d66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a3c      	ldr	r2, [pc, #240]	@ (8002e64 <HAL_DMA_Abort+0x214>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d072      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e68 <HAL_DMA_Abort+0x218>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d06d      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a39      	ldr	r2, [pc, #228]	@ (8002e6c <HAL_DMA_Abort+0x21c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d068      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a37      	ldr	r2, [pc, #220]	@ (8002e70 <HAL_DMA_Abort+0x220>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d063      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a36      	ldr	r2, [pc, #216]	@ (8002e74 <HAL_DMA_Abort+0x224>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d05e      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a34      	ldr	r2, [pc, #208]	@ (8002e78 <HAL_DMA_Abort+0x228>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d059      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a33      	ldr	r2, [pc, #204]	@ (8002e7c <HAL_DMA_Abort+0x22c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d054      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a31      	ldr	r2, [pc, #196]	@ (8002e80 <HAL_DMA_Abort+0x230>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04f      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a30      	ldr	r2, [pc, #192]	@ (8002e84 <HAL_DMA_Abort+0x234>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d04a      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8002e88 <HAL_DMA_Abort+0x238>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d045      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e8c <HAL_DMA_Abort+0x23c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d040      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e90 <HAL_DMA_Abort+0x240>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d03b      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2a      	ldr	r2, [pc, #168]	@ (8002e94 <HAL_DMA_Abort+0x244>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d036      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a28      	ldr	r2, [pc, #160]	@ (8002e98 <HAL_DMA_Abort+0x248>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d031      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a27      	ldr	r2, [pc, #156]	@ (8002e9c <HAL_DMA_Abort+0x24c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d02c      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a25      	ldr	r2, [pc, #148]	@ (8002ea0 <HAL_DMA_Abort+0x250>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d027      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a24      	ldr	r2, [pc, #144]	@ (8002ea4 <HAL_DMA_Abort+0x254>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a22      	ldr	r2, [pc, #136]	@ (8002ea8 <HAL_DMA_Abort+0x258>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01d      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a21      	ldr	r2, [pc, #132]	@ (8002eac <HAL_DMA_Abort+0x25c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb0 <HAL_DMA_Abort+0x260>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002eb4 <HAL_DMA_Abort+0x264>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb8 <HAL_DMA_Abort+0x268>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ebc <HAL_DMA_Abort+0x26c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <HAL_DMA_Abort+0x270>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d132      	bne.n	8002ec4 <HAL_DMA_Abort+0x274>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e031      	b.n	8002ec6 <HAL_DMA_Abort+0x276>
 8002e62:	bf00      	nop
 8002e64:	40020010 	.word	0x40020010
 8002e68:	40020028 	.word	0x40020028
 8002e6c:	40020040 	.word	0x40020040
 8002e70:	40020058 	.word	0x40020058
 8002e74:	40020070 	.word	0x40020070
 8002e78:	40020088 	.word	0x40020088
 8002e7c:	400200a0 	.word	0x400200a0
 8002e80:	400200b8 	.word	0x400200b8
 8002e84:	40020410 	.word	0x40020410
 8002e88:	40020428 	.word	0x40020428
 8002e8c:	40020440 	.word	0x40020440
 8002e90:	40020458 	.word	0x40020458
 8002e94:	40020470 	.word	0x40020470
 8002e98:	40020488 	.word	0x40020488
 8002e9c:	400204a0 	.word	0x400204a0
 8002ea0:	400204b8 	.word	0x400204b8
 8002ea4:	58025408 	.word	0x58025408
 8002ea8:	5802541c 	.word	0x5802541c
 8002eac:	58025430 	.word	0x58025430
 8002eb0:	58025444 	.word	0x58025444
 8002eb4:	58025458 	.word	0x58025458
 8002eb8:	5802546c 	.word	0x5802546c
 8002ebc:	58025480 	.word	0x58025480
 8002ec0:	58025494 	.word	0x58025494
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6d      	ldr	r2, [pc, #436]	@ (8003094 <HAL_DMA_Abort+0x444>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d04a      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8003098 <HAL_DMA_Abort+0x448>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d045      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6a      	ldr	r2, [pc, #424]	@ (800309c <HAL_DMA_Abort+0x44c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d040      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a68      	ldr	r2, [pc, #416]	@ (80030a0 <HAL_DMA_Abort+0x450>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d03b      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a67      	ldr	r2, [pc, #412]	@ (80030a4 <HAL_DMA_Abort+0x454>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d036      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a65      	ldr	r2, [pc, #404]	@ (80030a8 <HAL_DMA_Abort+0x458>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d031      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a64      	ldr	r2, [pc, #400]	@ (80030ac <HAL_DMA_Abort+0x45c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d02c      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a62      	ldr	r2, [pc, #392]	@ (80030b0 <HAL_DMA_Abort+0x460>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d027      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a61      	ldr	r2, [pc, #388]	@ (80030b4 <HAL_DMA_Abort+0x464>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d022      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a5f      	ldr	r2, [pc, #380]	@ (80030b8 <HAL_DMA_Abort+0x468>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01d      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a5e      	ldr	r2, [pc, #376]	@ (80030bc <HAL_DMA_Abort+0x46c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d018      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80030c0 <HAL_DMA_Abort+0x470>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a5b      	ldr	r2, [pc, #364]	@ (80030c4 <HAL_DMA_Abort+0x474>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a59      	ldr	r2, [pc, #356]	@ (80030c8 <HAL_DMA_Abort+0x478>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a58      	ldr	r2, [pc, #352]	@ (80030cc <HAL_DMA_Abort+0x47c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d004      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a56      	ldr	r2, [pc, #344]	@ (80030d0 <HAL_DMA_Abort+0x480>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d108      	bne.n	8002f8c <HAL_DMA_Abort+0x33c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e007      	b.n	8002f9c <HAL_DMA_Abort+0x34c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f9c:	e013      	b.n	8002fc6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f9e:	f7fe fcab 	bl	80018f8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d90c      	bls.n	8002fc6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e12d      	b.n	8003222 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e5      	bne.n	8002f9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8003094 <HAL_DMA_Abort+0x444>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d04a      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8003098 <HAL_DMA_Abort+0x448>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d045      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2c      	ldr	r2, [pc, #176]	@ (800309c <HAL_DMA_Abort+0x44c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d040      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80030a0 <HAL_DMA_Abort+0x450>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d03b      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a29      	ldr	r2, [pc, #164]	@ (80030a4 <HAL_DMA_Abort+0x454>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d036      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a27      	ldr	r2, [pc, #156]	@ (80030a8 <HAL_DMA_Abort+0x458>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d031      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a26      	ldr	r2, [pc, #152]	@ (80030ac <HAL_DMA_Abort+0x45c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d02c      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a24      	ldr	r2, [pc, #144]	@ (80030b0 <HAL_DMA_Abort+0x460>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d027      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a23      	ldr	r2, [pc, #140]	@ (80030b4 <HAL_DMA_Abort+0x464>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a21      	ldr	r2, [pc, #132]	@ (80030b8 <HAL_DMA_Abort+0x468>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01d      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a20      	ldr	r2, [pc, #128]	@ (80030bc <HAL_DMA_Abort+0x46c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d018      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1e      	ldr	r2, [pc, #120]	@ (80030c0 <HAL_DMA_Abort+0x470>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1d      	ldr	r2, [pc, #116]	@ (80030c4 <HAL_DMA_Abort+0x474>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1b      	ldr	r2, [pc, #108]	@ (80030c8 <HAL_DMA_Abort+0x478>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d009      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1a      	ldr	r2, [pc, #104]	@ (80030cc <HAL_DMA_Abort+0x47c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a18      	ldr	r2, [pc, #96]	@ (80030d0 <HAL_DMA_Abort+0x480>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_DMA_Abort+0x426>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_DMA_Abort+0x428>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02b      	beq.n	80030d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003080:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	223f      	movs	r2, #63	@ 0x3f
 800308c:	409a      	lsls	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	e02a      	b.n	80030ea <HAL_DMA_Abort+0x49a>
 8003094:	40020010 	.word	0x40020010
 8003098:	40020028 	.word	0x40020028
 800309c:	40020040 	.word	0x40020040
 80030a0:	40020058 	.word	0x40020058
 80030a4:	40020070 	.word	0x40020070
 80030a8:	40020088 	.word	0x40020088
 80030ac:	400200a0 	.word	0x400200a0
 80030b0:	400200b8 	.word	0x400200b8
 80030b4:	40020410 	.word	0x40020410
 80030b8:	40020428 	.word	0x40020428
 80030bc:	40020440 	.word	0x40020440
 80030c0:	40020458 	.word	0x40020458
 80030c4:	40020470 	.word	0x40020470
 80030c8:	40020488 	.word	0x40020488
 80030cc:	400204a0 	.word	0x400204a0
 80030d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2201      	movs	r2, #1
 80030e4:	409a      	lsls	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a4f      	ldr	r2, [pc, #316]	@ (800322c <HAL_DMA_Abort+0x5dc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d072      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003230 <HAL_DMA_Abort+0x5e0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d06d      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a4c      	ldr	r2, [pc, #304]	@ (8003234 <HAL_DMA_Abort+0x5e4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d068      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a4a      	ldr	r2, [pc, #296]	@ (8003238 <HAL_DMA_Abort+0x5e8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d063      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a49      	ldr	r2, [pc, #292]	@ (800323c <HAL_DMA_Abort+0x5ec>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d05e      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a47      	ldr	r2, [pc, #284]	@ (8003240 <HAL_DMA_Abort+0x5f0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d059      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a46      	ldr	r2, [pc, #280]	@ (8003244 <HAL_DMA_Abort+0x5f4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d054      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a44      	ldr	r2, [pc, #272]	@ (8003248 <HAL_DMA_Abort+0x5f8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d04f      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a43      	ldr	r2, [pc, #268]	@ (800324c <HAL_DMA_Abort+0x5fc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d04a      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a41      	ldr	r2, [pc, #260]	@ (8003250 <HAL_DMA_Abort+0x600>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d045      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a40      	ldr	r2, [pc, #256]	@ (8003254 <HAL_DMA_Abort+0x604>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d040      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3e      	ldr	r2, [pc, #248]	@ (8003258 <HAL_DMA_Abort+0x608>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d03b      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a3d      	ldr	r2, [pc, #244]	@ (800325c <HAL_DMA_Abort+0x60c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d036      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3b      	ldr	r2, [pc, #236]	@ (8003260 <HAL_DMA_Abort+0x610>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d031      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a3a      	ldr	r2, [pc, #232]	@ (8003264 <HAL_DMA_Abort+0x614>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d02c      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a38      	ldr	r2, [pc, #224]	@ (8003268 <HAL_DMA_Abort+0x618>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d027      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a37      	ldr	r2, [pc, #220]	@ (800326c <HAL_DMA_Abort+0x61c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d022      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a35      	ldr	r2, [pc, #212]	@ (8003270 <HAL_DMA_Abort+0x620>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01d      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a34      	ldr	r2, [pc, #208]	@ (8003274 <HAL_DMA_Abort+0x624>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d018      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a32      	ldr	r2, [pc, #200]	@ (8003278 <HAL_DMA_Abort+0x628>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a31      	ldr	r2, [pc, #196]	@ (800327c <HAL_DMA_Abort+0x62c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00e      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003280 <HAL_DMA_Abort+0x630>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d009      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003284 <HAL_DMA_Abort+0x634>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003288 <HAL_DMA_Abort+0x638>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_DMA_Abort+0x58e>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_DMA_Abort+0x590>
 80031de:	2300      	movs	r3, #0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003204:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800320e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40020010 	.word	0x40020010
 8003230:	40020028 	.word	0x40020028
 8003234:	40020040 	.word	0x40020040
 8003238:	40020058 	.word	0x40020058
 800323c:	40020070 	.word	0x40020070
 8003240:	40020088 	.word	0x40020088
 8003244:	400200a0 	.word	0x400200a0
 8003248:	400200b8 	.word	0x400200b8
 800324c:	40020410 	.word	0x40020410
 8003250:	40020428 	.word	0x40020428
 8003254:	40020440 	.word	0x40020440
 8003258:	40020458 	.word	0x40020458
 800325c:	40020470 	.word	0x40020470
 8003260:	40020488 	.word	0x40020488
 8003264:	400204a0 	.word	0x400204a0
 8003268:	400204b8 	.word	0x400204b8
 800326c:	58025408 	.word	0x58025408
 8003270:	5802541c 	.word	0x5802541c
 8003274:	58025430 	.word	0x58025430
 8003278:	58025444 	.word	0x58025444
 800327c:	58025458 	.word	0x58025458
 8003280:	5802546c 	.word	0x5802546c
 8003284:	58025480 	.word	0x58025480
 8003288:	58025494 	.word	0x58025494

0800328c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e237      	b.n	800370e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d004      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2280      	movs	r2, #128	@ 0x80
 80032ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e22c      	b.n	800370e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a5c      	ldr	r2, [pc, #368]	@ (800342c <HAL_DMA_Abort_IT+0x1a0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d04a      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003430 <HAL_DMA_Abort_IT+0x1a4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d045      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a59      	ldr	r2, [pc, #356]	@ (8003434 <HAL_DMA_Abort_IT+0x1a8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d040      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a58      	ldr	r2, [pc, #352]	@ (8003438 <HAL_DMA_Abort_IT+0x1ac>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d03b      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a56      	ldr	r2, [pc, #344]	@ (800343c <HAL_DMA_Abort_IT+0x1b0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d036      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a55      	ldr	r2, [pc, #340]	@ (8003440 <HAL_DMA_Abort_IT+0x1b4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d031      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a53      	ldr	r2, [pc, #332]	@ (8003444 <HAL_DMA_Abort_IT+0x1b8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d02c      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a52      	ldr	r2, [pc, #328]	@ (8003448 <HAL_DMA_Abort_IT+0x1bc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d027      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a50      	ldr	r2, [pc, #320]	@ (800344c <HAL_DMA_Abort_IT+0x1c0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d022      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4f      	ldr	r2, [pc, #316]	@ (8003450 <HAL_DMA_Abort_IT+0x1c4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d01d      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4d      	ldr	r2, [pc, #308]	@ (8003454 <HAL_DMA_Abort_IT+0x1c8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d018      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4c      	ldr	r2, [pc, #304]	@ (8003458 <HAL_DMA_Abort_IT+0x1cc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d013      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4a      	ldr	r2, [pc, #296]	@ (800345c <HAL_DMA_Abort_IT+0x1d0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00e      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a49      	ldr	r2, [pc, #292]	@ (8003460 <HAL_DMA_Abort_IT+0x1d4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d009      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a47      	ldr	r2, [pc, #284]	@ (8003464 <HAL_DMA_Abort_IT+0x1d8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a46      	ldr	r2, [pc, #280]	@ (8003468 <HAL_DMA_Abort_IT+0x1dc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_DMA_Abort_IT+0xcc>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_DMA_Abort_IT+0xce>
 8003358:	2300      	movs	r3, #0
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8086 	beq.w	800346c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2204      	movs	r2, #4
 8003364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2f      	ldr	r2, [pc, #188]	@ (800342c <HAL_DMA_Abort_IT+0x1a0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04a      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2e      	ldr	r2, [pc, #184]	@ (8003430 <HAL_DMA_Abort_IT+0x1a4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d045      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2c      	ldr	r2, [pc, #176]	@ (8003434 <HAL_DMA_Abort_IT+0x1a8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d040      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2b      	ldr	r2, [pc, #172]	@ (8003438 <HAL_DMA_Abort_IT+0x1ac>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d03b      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a29      	ldr	r2, [pc, #164]	@ (800343c <HAL_DMA_Abort_IT+0x1b0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d036      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a28      	ldr	r2, [pc, #160]	@ (8003440 <HAL_DMA_Abort_IT+0x1b4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d031      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a26      	ldr	r2, [pc, #152]	@ (8003444 <HAL_DMA_Abort_IT+0x1b8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02c      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a25      	ldr	r2, [pc, #148]	@ (8003448 <HAL_DMA_Abort_IT+0x1bc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d027      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a23      	ldr	r2, [pc, #140]	@ (800344c <HAL_DMA_Abort_IT+0x1c0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d022      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a22      	ldr	r2, [pc, #136]	@ (8003450 <HAL_DMA_Abort_IT+0x1c4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d01d      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a20      	ldr	r2, [pc, #128]	@ (8003454 <HAL_DMA_Abort_IT+0x1c8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d018      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <HAL_DMA_Abort_IT+0x1cc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	@ (800345c <HAL_DMA_Abort_IT+0x1d0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <HAL_DMA_Abort_IT+0x1d4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d009      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003464 <HAL_DMA_Abort_IT+0x1d8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a19      	ldr	r2, [pc, #100]	@ (8003468 <HAL_DMA_Abort_IT+0x1dc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d108      	bne.n	800341a <HAL_DMA_Abort_IT+0x18e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e178      	b.n	800370c <HAL_DMA_Abort_IT+0x480>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e16f      	b.n	800370c <HAL_DMA_Abort_IT+0x480>
 800342c:	40020010 	.word	0x40020010
 8003430:	40020028 	.word	0x40020028
 8003434:	40020040 	.word	0x40020040
 8003438:	40020058 	.word	0x40020058
 800343c:	40020070 	.word	0x40020070
 8003440:	40020088 	.word	0x40020088
 8003444:	400200a0 	.word	0x400200a0
 8003448:	400200b8 	.word	0x400200b8
 800344c:	40020410 	.word	0x40020410
 8003450:	40020428 	.word	0x40020428
 8003454:	40020440 	.word	0x40020440
 8003458:	40020458 	.word	0x40020458
 800345c:	40020470 	.word	0x40020470
 8003460:	40020488 	.word	0x40020488
 8003464:	400204a0 	.word	0x400204a0
 8003468:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 020e 	bic.w	r2, r2, #14
 800347a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6c      	ldr	r2, [pc, #432]	@ (8003634 <HAL_DMA_Abort_IT+0x3a8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d04a      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a6b      	ldr	r2, [pc, #428]	@ (8003638 <HAL_DMA_Abort_IT+0x3ac>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d045      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a69      	ldr	r2, [pc, #420]	@ (800363c <HAL_DMA_Abort_IT+0x3b0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d040      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a68      	ldr	r2, [pc, #416]	@ (8003640 <HAL_DMA_Abort_IT+0x3b4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d03b      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a66      	ldr	r2, [pc, #408]	@ (8003644 <HAL_DMA_Abort_IT+0x3b8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d036      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a65      	ldr	r2, [pc, #404]	@ (8003648 <HAL_DMA_Abort_IT+0x3bc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d031      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a63      	ldr	r2, [pc, #396]	@ (800364c <HAL_DMA_Abort_IT+0x3c0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d02c      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a62      	ldr	r2, [pc, #392]	@ (8003650 <HAL_DMA_Abort_IT+0x3c4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d027      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a60      	ldr	r2, [pc, #384]	@ (8003654 <HAL_DMA_Abort_IT+0x3c8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d022      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a5f      	ldr	r2, [pc, #380]	@ (8003658 <HAL_DMA_Abort_IT+0x3cc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d01d      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a5d      	ldr	r2, [pc, #372]	@ (800365c <HAL_DMA_Abort_IT+0x3d0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d018      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003660 <HAL_DMA_Abort_IT+0x3d4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a5a      	ldr	r2, [pc, #360]	@ (8003664 <HAL_DMA_Abort_IT+0x3d8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00e      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a59      	ldr	r2, [pc, #356]	@ (8003668 <HAL_DMA_Abort_IT+0x3dc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d009      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a57      	ldr	r2, [pc, #348]	@ (800366c <HAL_DMA_Abort_IT+0x3e0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a56      	ldr	r2, [pc, #344]	@ (8003670 <HAL_DMA_Abort_IT+0x3e4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d108      	bne.n	800352e <HAL_DMA_Abort_IT+0x2a2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e007      	b.n	800353e <HAL_DMA_Abort_IT+0x2b2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a3c      	ldr	r2, [pc, #240]	@ (8003634 <HAL_DMA_Abort_IT+0x3a8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d072      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a3a      	ldr	r2, [pc, #232]	@ (8003638 <HAL_DMA_Abort_IT+0x3ac>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d06d      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a39      	ldr	r2, [pc, #228]	@ (800363c <HAL_DMA_Abort_IT+0x3b0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d068      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a37      	ldr	r2, [pc, #220]	@ (8003640 <HAL_DMA_Abort_IT+0x3b4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d063      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a36      	ldr	r2, [pc, #216]	@ (8003644 <HAL_DMA_Abort_IT+0x3b8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d05e      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a34      	ldr	r2, [pc, #208]	@ (8003648 <HAL_DMA_Abort_IT+0x3bc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d059      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a33      	ldr	r2, [pc, #204]	@ (800364c <HAL_DMA_Abort_IT+0x3c0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d054      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a31      	ldr	r2, [pc, #196]	@ (8003650 <HAL_DMA_Abort_IT+0x3c4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04f      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a30      	ldr	r2, [pc, #192]	@ (8003654 <HAL_DMA_Abort_IT+0x3c8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d04a      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a2e      	ldr	r2, [pc, #184]	@ (8003658 <HAL_DMA_Abort_IT+0x3cc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d045      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2d      	ldr	r2, [pc, #180]	@ (800365c <HAL_DMA_Abort_IT+0x3d0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d040      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003660 <HAL_DMA_Abort_IT+0x3d4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d03b      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003664 <HAL_DMA_Abort_IT+0x3d8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d036      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a28      	ldr	r2, [pc, #160]	@ (8003668 <HAL_DMA_Abort_IT+0x3dc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a27      	ldr	r2, [pc, #156]	@ (800366c <HAL_DMA_Abort_IT+0x3e0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d02c      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a25      	ldr	r2, [pc, #148]	@ (8003670 <HAL_DMA_Abort_IT+0x3e4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d027      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a24      	ldr	r2, [pc, #144]	@ (8003674 <HAL_DMA_Abort_IT+0x3e8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a22      	ldr	r2, [pc, #136]	@ (8003678 <HAL_DMA_Abort_IT+0x3ec>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01d      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a21      	ldr	r2, [pc, #132]	@ (800367c <HAL_DMA_Abort_IT+0x3f0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d018      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1f      	ldr	r2, [pc, #124]	@ (8003680 <HAL_DMA_Abort_IT+0x3f4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1e      	ldr	r2, [pc, #120]	@ (8003684 <HAL_DMA_Abort_IT+0x3f8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1c      	ldr	r2, [pc, #112]	@ (8003688 <HAL_DMA_Abort_IT+0x3fc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1b      	ldr	r2, [pc, #108]	@ (800368c <HAL_DMA_Abort_IT+0x400>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a19      	ldr	r2, [pc, #100]	@ (8003690 <HAL_DMA_Abort_IT+0x404>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d132      	bne.n	8003694 <HAL_DMA_Abort_IT+0x408>
 800362e:	2301      	movs	r3, #1
 8003630:	e031      	b.n	8003696 <HAL_DMA_Abort_IT+0x40a>
 8003632:	bf00      	nop
 8003634:	40020010 	.word	0x40020010
 8003638:	40020028 	.word	0x40020028
 800363c:	40020040 	.word	0x40020040
 8003640:	40020058 	.word	0x40020058
 8003644:	40020070 	.word	0x40020070
 8003648:	40020088 	.word	0x40020088
 800364c:	400200a0 	.word	0x400200a0
 8003650:	400200b8 	.word	0x400200b8
 8003654:	40020410 	.word	0x40020410
 8003658:	40020428 	.word	0x40020428
 800365c:	40020440 	.word	0x40020440
 8003660:	40020458 	.word	0x40020458
 8003664:	40020470 	.word	0x40020470
 8003668:	40020488 	.word	0x40020488
 800366c:	400204a0 	.word	0x400204a0
 8003670:	400204b8 	.word	0x400204b8
 8003674:	58025408 	.word	0x58025408
 8003678:	5802541c 	.word	0x5802541c
 800367c:	58025430 	.word	0x58025430
 8003680:	58025444 	.word	0x58025444
 8003684:	58025458 	.word	0x58025458
 8003688:	5802546c 	.word	0x5802546c
 800368c:	58025480 	.word	0x58025480
 8003690:	58025494 	.word	0x58025494
 8003694:	2300      	movs	r3, #0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d028      	beq.n	80036ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2201      	movs	r2, #1
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80036c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00c      	beq.n	80036ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop

08003718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003718:	b480      	push	{r7}
 800371a:	b089      	sub	sp, #36	@ 0x24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003726:	4b89      	ldr	r3, [pc, #548]	@ (800394c <HAL_GPIO_Init+0x234>)
 8003728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800372a:	e194      	b.n	8003a56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8186 	beq.w	8003a50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d005      	beq.n	800375c <HAL_GPIO_Init+0x44>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d130      	bne.n	80037be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003792:	2201      	movs	r2, #1
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f003 0201 	and.w	r2, r3, #1
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d017      	beq.n	80037fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	2203      	movs	r2, #3
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d123      	bne.n	800384e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	08da      	lsrs	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3208      	adds	r2, #8
 800380e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	220f      	movs	r2, #15
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	08da      	lsrs	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3208      	adds	r2, #8
 8003848:	69b9      	ldr	r1, [r7, #24]
 800384a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0203 	and.w	r2, r3, #3
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80e0 	beq.w	8003a50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003890:	4b2f      	ldr	r3, [pc, #188]	@ (8003950 <HAL_GPIO_Init+0x238>)
 8003892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003896:	4a2e      	ldr	r2, [pc, #184]	@ (8003950 <HAL_GPIO_Init+0x238>)
 8003898:	f043 0302 	orr.w	r3, r3, #2
 800389c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80038a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003950 <HAL_GPIO_Init+0x238>)
 80038a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ae:	4a29      	ldr	r2, [pc, #164]	@ (8003954 <HAL_GPIO_Init+0x23c>)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a20      	ldr	r2, [pc, #128]	@ (8003958 <HAL_GPIO_Init+0x240>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d052      	beq.n	8003980 <HAL_GPIO_Init+0x268>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1f      	ldr	r2, [pc, #124]	@ (800395c <HAL_GPIO_Init+0x244>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d031      	beq.n	8003946 <HAL_GPIO_Init+0x22e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003960 <HAL_GPIO_Init+0x248>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d02b      	beq.n	8003942 <HAL_GPIO_Init+0x22a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003964 <HAL_GPIO_Init+0x24c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d025      	beq.n	800393e <HAL_GPIO_Init+0x226>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <HAL_GPIO_Init+0x250>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01f      	beq.n	800393a <HAL_GPIO_Init+0x222>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1b      	ldr	r2, [pc, #108]	@ (800396c <HAL_GPIO_Init+0x254>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d019      	beq.n	8003936 <HAL_GPIO_Init+0x21e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1a      	ldr	r2, [pc, #104]	@ (8003970 <HAL_GPIO_Init+0x258>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_GPIO_Init+0x21a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a19      	ldr	r2, [pc, #100]	@ (8003974 <HAL_GPIO_Init+0x25c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00d      	beq.n	800392e <HAL_GPIO_Init+0x216>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a18      	ldr	r2, [pc, #96]	@ (8003978 <HAL_GPIO_Init+0x260>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <HAL_GPIO_Init+0x212>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a17      	ldr	r2, [pc, #92]	@ (800397c <HAL_GPIO_Init+0x264>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_GPIO_Init+0x20e>
 8003922:	2309      	movs	r3, #9
 8003924:	e02d      	b.n	8003982 <HAL_GPIO_Init+0x26a>
 8003926:	230a      	movs	r3, #10
 8003928:	e02b      	b.n	8003982 <HAL_GPIO_Init+0x26a>
 800392a:	2308      	movs	r3, #8
 800392c:	e029      	b.n	8003982 <HAL_GPIO_Init+0x26a>
 800392e:	2307      	movs	r3, #7
 8003930:	e027      	b.n	8003982 <HAL_GPIO_Init+0x26a>
 8003932:	2306      	movs	r3, #6
 8003934:	e025      	b.n	8003982 <HAL_GPIO_Init+0x26a>
 8003936:	2305      	movs	r3, #5
 8003938:	e023      	b.n	8003982 <HAL_GPIO_Init+0x26a>
 800393a:	2304      	movs	r3, #4
 800393c:	e021      	b.n	8003982 <HAL_GPIO_Init+0x26a>
 800393e:	2303      	movs	r3, #3
 8003940:	e01f      	b.n	8003982 <HAL_GPIO_Init+0x26a>
 8003942:	2302      	movs	r3, #2
 8003944:	e01d      	b.n	8003982 <HAL_GPIO_Init+0x26a>
 8003946:	2301      	movs	r3, #1
 8003948:	e01b      	b.n	8003982 <HAL_GPIO_Init+0x26a>
 800394a:	bf00      	nop
 800394c:	58000080 	.word	0x58000080
 8003950:	58024400 	.word	0x58024400
 8003954:	58000400 	.word	0x58000400
 8003958:	58020000 	.word	0x58020000
 800395c:	58020400 	.word	0x58020400
 8003960:	58020800 	.word	0x58020800
 8003964:	58020c00 	.word	0x58020c00
 8003968:	58021000 	.word	0x58021000
 800396c:	58021400 	.word	0x58021400
 8003970:	58021800 	.word	0x58021800
 8003974:	58021c00 	.word	0x58021c00
 8003978:	58022000 	.word	0x58022000
 800397c:	58022400 	.word	0x58022400
 8003980:	2300      	movs	r3, #0
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	f002 0203 	and.w	r2, r2, #3
 8003988:	0092      	lsls	r2, r2, #2
 800398a:	4093      	lsls	r3, r2
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003992:	4938      	ldr	r1, [pc, #224]	@ (8003a74 <HAL_GPIO_Init+0x35c>)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	3301      	adds	r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f47f ae63 	bne.w	800372c <HAL_GPIO_Init+0x14>
  }
}
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	3724      	adds	r7, #36	@ 0x24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	58000400 	.word	0x58000400

08003a78 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003a80:	4a08      	ldr	r2, [pc, #32]	@ (8003aa4 <HAL_HSEM_FastTake+0x2c>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3320      	adds	r3, #32
 8003a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8a:	4a07      	ldr	r2, [pc, #28]	@ (8003aa8 <HAL_HSEM_FastTake+0x30>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	58026400 	.word	0x58026400
 8003aa8:	80000300 	.word	0x80000300

08003aac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003ab6:	4906      	ldr	r1, [pc, #24]	@ (8003ad0 <HAL_HSEM_Release+0x24>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	58026400 	.word	0x58026400

08003ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e08b      	b.n	8003bfe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd fa8e 	bl	800101c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	@ 0x24
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d107      	bne.n	8003b4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	e006      	b.n	8003b5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d108      	bne.n	8003b76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	e007      	b.n	8003b86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b1d      	ldr	r3, [pc, #116]	@ (8003c08 <HAL_I2C_Init+0x134>)
 8003b92:	430b      	orrs	r3, r1
 8003b94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ba4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69d9      	ldr	r1, [r3, #28]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	02008000 	.word	0x02008000

08003c0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	461a      	mov	r2, r3
 8003c18:	460b      	mov	r3, r1
 8003c1a:	817b      	strh	r3, [r7, #10]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	f040 80fd 	bne.w	8003e28 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_I2C_Master_Transmit+0x30>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e0f6      	b.n	8003e2a <HAL_I2C_Master_Transmit+0x21e>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c44:	f7fd fe58 	bl	80018f8 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	2319      	movs	r3, #25
 8003c50:	2201      	movs	r2, #1
 8003c52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fa82 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e0e1      	b.n	8003e2a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2221      	movs	r2, #33	@ 0x21
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2210      	movs	r2, #16
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	893a      	ldrh	r2, [r7, #8]
 8003c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2bff      	cmp	r3, #255	@ 0xff
 8003c96:	d906      	bls.n	8003ca6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	22ff      	movs	r2, #255	@ 0xff
 8003c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e007      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003cb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cb4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d024      	beq.n	8003d08 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	8979      	ldrh	r1, [r7, #10]
 8003cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8003e34 <HAL_I2C_Master_Transmit+0x228>)
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fbf1 	bl	80044e8 <I2C_TransferConfig>
 8003d06:	e066      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	8979      	ldrh	r1, [r7, #10]
 8003d10:	4b48      	ldr	r3, [pc, #288]	@ (8003e34 <HAL_I2C_Master_Transmit+0x228>)
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fbe6 	bl	80044e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d1c:	e05b      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	6a39      	ldr	r1, [r7, #32]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fa75 	bl	8004212 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e07b      	b.n	8003e2a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d034      	beq.n	8003dd6 <HAL_I2C_Master_Transmit+0x1ca>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d130      	bne.n	8003dd6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2180      	movs	r1, #128	@ 0x80
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f9ee 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e04d      	b.n	8003e2a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2bff      	cmp	r3, #255	@ 0xff
 8003d96:	d90e      	bls.n	8003db6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	22ff      	movs	r2, #255	@ 0xff
 8003d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	8979      	ldrh	r1, [r7, #10]
 8003da6:	2300      	movs	r3, #0
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fb9a 	bl	80044e8 <I2C_TransferConfig>
 8003db4:	e00f      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	8979      	ldrh	r1, [r7, #10]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fb89 	bl	80044e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d19e      	bne.n	8003d1e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	6a39      	ldr	r1, [r7, #32]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fa5b 	bl	80042a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e01a      	b.n	8003e2a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b0c      	ldr	r3, [pc, #48]	@ (8003e38 <HAL_I2C_Master_Transmit+0x22c>)
 8003e08:	400b      	ands	r3, r1
 8003e0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	80002000 	.word	0x80002000
 8003e38:	fe00e800 	.word	0xfe00e800

08003e3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	f040 80fd 	bne.w	800405e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_I2C_Mem_Read+0x34>
 8003e6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0f1      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2C_Mem_Read+0x4e>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e0ea      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e92:	f7fd fd31 	bl	80018f8 <HAL_GetTick>
 8003e96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2319      	movs	r3, #25
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f95b 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0d5      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2222      	movs	r2, #34	@ 0x22
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2240      	movs	r2, #64	@ 0x40
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a3a      	ldr	r2, [r7, #32]
 8003ece:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003edc:	88f8      	ldrh	r0, [r7, #6]
 8003ede:	893a      	ldrh	r2, [r7, #8]
 8003ee0:	8979      	ldrh	r1, [r7, #10]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	4603      	mov	r3, r0
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f8bf 	bl	8004070 <I2C_RequestMemoryRead>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0ad      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2bff      	cmp	r3, #255	@ 0xff
 8003f0c:	d90e      	bls.n	8003f2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	22ff      	movs	r2, #255	@ 0xff
 8003f12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	8979      	ldrh	r1, [r7, #10]
 8003f1c:	4b52      	ldr	r3, [pc, #328]	@ (8004068 <HAL_I2C_Mem_Read+0x22c>)
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fadf 	bl	80044e8 <I2C_TransferConfig>
 8003f2a:	e00f      	b.n	8003f4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	8979      	ldrh	r1, [r7, #10]
 8003f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004068 <HAL_I2C_Mem_Read+0x22c>)
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 face 	bl	80044e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f52:	2200      	movs	r2, #0
 8003f54:	2104      	movs	r1, #4
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f902 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e07c      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d034      	beq.n	800400c <HAL_I2C_Mem_Read+0x1d0>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d130      	bne.n	800400c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2180      	movs	r1, #128	@ 0x80
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f8d3 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e04d      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2bff      	cmp	r3, #255	@ 0xff
 8003fcc:	d90e      	bls.n	8003fec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	22ff      	movs	r2, #255	@ 0xff
 8003fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	8979      	ldrh	r1, [r7, #10]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fa7f 	bl	80044e8 <I2C_TransferConfig>
 8003fea:	e00f      	b.n	800400c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	8979      	ldrh	r1, [r7, #10]
 8003ffe:	2300      	movs	r3, #0
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fa6e 	bl	80044e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d19a      	bne.n	8003f4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f940 	bl	80042a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e01a      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2220      	movs	r2, #32
 8004030:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_I2C_Mem_Read+0x230>)
 800403e:	400b      	ands	r3, r1
 8004040:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	80002400 	.word	0x80002400
 800406c:	fe00e800 	.word	0xfe00e800

08004070 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	4608      	mov	r0, r1
 800407a:	4611      	mov	r1, r2
 800407c:	461a      	mov	r2, r3
 800407e:	4603      	mov	r3, r0
 8004080:	817b      	strh	r3, [r7, #10]
 8004082:	460b      	mov	r3, r1
 8004084:	813b      	strh	r3, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	8979      	ldrh	r1, [r7, #10]
 8004090:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <I2C_RequestMemoryRead+0xa4>)
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	2300      	movs	r3, #0
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fa26 	bl	80044e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f8b6 	bl	8004212 <I2C_WaitOnTXISFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e02c      	b.n	800410a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040b6:	893b      	ldrh	r3, [r7, #8]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	629a      	str	r2, [r3, #40]	@ 0x28
 80040c0:	e015      	b.n	80040ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040c2:	893b      	ldrh	r3, [r7, #8]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	69b9      	ldr	r1, [r7, #24]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f89c 	bl	8004212 <I2C_WaitOnTXISFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e012      	b.n	800410a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040e4:	893b      	ldrh	r3, [r7, #8]
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2140      	movs	r1, #64	@ 0x40
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f831 	bl	8004160 <I2C_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	80002000 	.word	0x80002000

08004118 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d103      	bne.n	8004136 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d007      	beq.n	8004154 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	619a      	str	r2, [r3, #24]
  }
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004170:	e03b      	b.n	80041ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	6839      	ldr	r1, [r7, #0]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f8d6 	bl	8004328 <I2C_IsErrorOccurred>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e041      	b.n	800420a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800418c:	d02d      	beq.n	80041ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418e:	f7fd fbb3 	bl	80018f8 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d302      	bcc.n	80041a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d122      	bne.n	80041ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d113      	bne.n	80041ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00f      	b.n	800420a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	429a      	cmp	r2, r3
 8004206:	d0b4      	beq.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800421e:	e033      	b.n	8004288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f87f 	bl	8004328 <I2C_IsErrorOccurred>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e031      	b.n	8004298 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800423a:	d025      	beq.n	8004288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423c:	f7fd fb5c 	bl	80018f8 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	429a      	cmp	r2, r3
 800424a:	d302      	bcc.n	8004252 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d11a      	bne.n	8004288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b02      	cmp	r3, #2
 800425e:	d013      	beq.n	8004288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e007      	b.n	8004298 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d1c4      	bne.n	8004220 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ac:	e02f      	b.n	800430e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f838 	bl	8004328 <I2C_IsErrorOccurred>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e02d      	b.n	800431e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fd fb19 	bl	80018f8 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11a      	bne.n	800430e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d013      	beq.n	800430e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e007      	b.n	800431e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b20      	cmp	r3, #32
 800431a:	d1c8      	bne.n	80042ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	@ 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004342:	2300      	movs	r3, #0
 8004344:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b00      	cmp	r3, #0
 8004352:	d068      	beq.n	8004426 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2210      	movs	r2, #16
 800435a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800435c:	e049      	b.n	80043f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004364:	d045      	beq.n	80043f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fd fac7 	bl	80018f8 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <I2C_IsErrorOccurred+0x54>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d13a      	bne.n	80043f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004386:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800438e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800439a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800439e:	d121      	bne.n	80043e4 <I2C_IsErrorOccurred+0xbc>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043a6:	d01d      	beq.n	80043e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d01a      	beq.n	80043e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043be:	f7fd fa9b 	bl	80018f8 <HAL_GetTick>
 80043c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043c4:	e00e      	b.n	80043e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043c6:	f7fd fa97 	bl	80018f8 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b19      	cmp	r3, #25
 80043d2:	d907      	bls.n	80043e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	f043 0320 	orr.w	r3, r3, #32
 80043da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80043e2:	e006      	b.n	80043f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d1e9      	bne.n	80043c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d003      	beq.n	8004408 <I2C_IsErrorOccurred+0xe0>
 8004400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0aa      	beq.n	800435e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2220      	movs	r2, #32
 8004416:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	f043 0304 	orr.w	r3, r3, #4
 800441e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00b      	beq.n	8004450 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004448:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f043 0308 	orr.w	r3, r3, #8
 8004460:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800446a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	f043 0302 	orr.w	r3, r3, #2
 8004482:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800448c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01c      	beq.n	80044d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff fe3b 	bl	8004118 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <I2C_IsErrorOccurred+0x1bc>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80044d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3728      	adds	r7, #40	@ 0x28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	fe00e800 	.word	0xfe00e800

080044e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	817b      	strh	r3, [r7, #10]
 80044f6:	4613      	mov	r3, r2
 80044f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044fa:	897b      	ldrh	r3, [r7, #10]
 80044fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004500:	7a7b      	ldrb	r3, [r7, #9]
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004508:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	4313      	orrs	r3, r2
 8004512:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004516:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	0d5b      	lsrs	r3, r3, #21
 8004522:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004526:	4b08      	ldr	r3, [pc, #32]	@ (8004548 <I2C_TransferConfig+0x60>)
 8004528:	430b      	orrs	r3, r1
 800452a:	43db      	mvns	r3, r3
 800452c:	ea02 0103 	and.w	r1, r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800453a:	bf00      	nop
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	03ff63ff 	.word	0x03ff63ff

0800454c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b20      	cmp	r3, #32
 8004560:	d138      	bne.n	80045d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800456c:	2302      	movs	r3, #2
 800456e:	e032      	b.n	80045d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2224      	movs	r2, #36	@ 0x24
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800459e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6819      	ldr	r1, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d139      	bne.n	800466c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004602:	2302      	movs	r3, #2
 8004604:	e033      	b.n	800466e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2224      	movs	r2, #36	@ 0x24
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004634:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004684:	4b29      	ldr	r3, [pc, #164]	@ (800472c <HAL_PWREx_ConfigSupply+0xb0>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	2b06      	cmp	r3, #6
 800468e:	d00a      	beq.n	80046a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004690:	4b26      	ldr	r3, [pc, #152]	@ (800472c <HAL_PWREx_ConfigSupply+0xb0>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	429a      	cmp	r2, r3
 800469c:	d001      	beq.n	80046a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e040      	b.n	8004724 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e03e      	b.n	8004724 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046a6:	4b21      	ldr	r3, [pc, #132]	@ (800472c <HAL_PWREx_ConfigSupply+0xb0>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80046ae:	491f      	ldr	r1, [pc, #124]	@ (800472c <HAL_PWREx_ConfigSupply+0xb0>)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046b6:	f7fd f91f 	bl	80018f8 <HAL_GetTick>
 80046ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046bc:	e009      	b.n	80046d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046be:	f7fd f91b 	bl	80018f8 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046cc:	d901      	bls.n	80046d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e028      	b.n	8004724 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046d2:	4b16      	ldr	r3, [pc, #88]	@ (800472c <HAL_PWREx_ConfigSupply+0xb0>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046de:	d1ee      	bne.n	80046be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b1e      	cmp	r3, #30
 80046e4:	d008      	beq.n	80046f8 <HAL_PWREx_ConfigSupply+0x7c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80046ea:	d005      	beq.n	80046f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b1d      	cmp	r3, #29
 80046f0:	d002      	beq.n	80046f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b2d      	cmp	r3, #45	@ 0x2d
 80046f6:	d114      	bne.n	8004722 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80046f8:	f7fd f8fe 	bl	80018f8 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80046fe:	e009      	b.n	8004714 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004700:	f7fd f8fa 	bl	80018f8 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800470e:	d901      	bls.n	8004714 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e007      	b.n	8004724 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004714:	4b05      	ldr	r3, [pc, #20]	@ (800472c <HAL_PWREx_ConfigSupply+0xb0>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004720:	d1ee      	bne.n	8004700 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	58024800 	.word	0x58024800

08004730 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	@ 0x30
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f000 bc48 	b.w	8004fd4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8088 	beq.w	8004862 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004752:	4b99      	ldr	r3, [pc, #612]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800475a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800475c:	4b96      	ldr	r3, [pc, #600]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004764:	2b10      	cmp	r3, #16
 8004766:	d007      	beq.n	8004778 <HAL_RCC_OscConfig+0x48>
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476a:	2b18      	cmp	r3, #24
 800476c:	d111      	bne.n	8004792 <HAL_RCC_OscConfig+0x62>
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d10c      	bne.n	8004792 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004778:	4b8f      	ldr	r3, [pc, #572]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d06d      	beq.n	8004860 <HAL_RCC_OscConfig+0x130>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d169      	bne.n	8004860 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f000 bc21 	b.w	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800479a:	d106      	bne.n	80047aa <HAL_RCC_OscConfig+0x7a>
 800479c:	4b86      	ldr	r3, [pc, #536]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a85      	ldr	r2, [pc, #532]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	e02e      	b.n	8004808 <HAL_RCC_OscConfig+0xd8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0x9c>
 80047b2:	4b81      	ldr	r3, [pc, #516]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a80      	ldr	r2, [pc, #512]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	4b7e      	ldr	r3, [pc, #504]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a7d      	ldr	r2, [pc, #500]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e01d      	b.n	8004808 <HAL_RCC_OscConfig+0xd8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0xc0>
 80047d6:	4b78      	ldr	r3, [pc, #480]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a77      	ldr	r2, [pc, #476]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b75      	ldr	r3, [pc, #468]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a74      	ldr	r2, [pc, #464]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0xd8>
 80047f0:	4b71      	ldr	r3, [pc, #452]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a70      	ldr	r2, [pc, #448]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	4b6e      	ldr	r3, [pc, #440]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a6d      	ldr	r2, [pc, #436]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d013      	beq.n	8004838 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fd f872 	bl	80018f8 <HAL_GetTick>
 8004814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004818:	f7fd f86e 	bl	80018f8 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b64      	cmp	r3, #100	@ 0x64
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e3d4      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800482a:	4b63      	ldr	r3, [pc, #396]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0xe8>
 8004836:	e014      	b.n	8004862 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fd f85e 	bl	80018f8 <HAL_GetTick>
 800483c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004840:	f7fd f85a 	bl	80018f8 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	@ 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e3c0      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004852:	4b59      	ldr	r3, [pc, #356]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x110>
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80ca 	beq.w	8004a04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004870:	4b51      	ldr	r3, [pc, #324]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004878:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800487a:	4b4f      	ldr	r3, [pc, #316]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <HAL_RCC_OscConfig+0x166>
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	2b18      	cmp	r3, #24
 800488a:	d156      	bne.n	800493a <HAL_RCC_OscConfig+0x20a>
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d151      	bne.n	800493a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004896:	4b48      	ldr	r3, [pc, #288]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_RCC_OscConfig+0x17e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e392      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048ae:	4b42      	ldr	r3, [pc, #264]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 0219 	bic.w	r2, r3, #25
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	493f      	ldr	r1, [pc, #252]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fd f81a 	bl	80018f8 <HAL_GetTick>
 80048c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c8:	f7fd f816 	bl	80018f8 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e37c      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048da:	4b37      	ldr	r3, [pc, #220]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e6:	f7fd f837 	bl	8001958 <HAL_GetREVID>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d817      	bhi.n	8004924 <HAL_RCC_OscConfig+0x1f4>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b40      	cmp	r3, #64	@ 0x40
 80048fa:	d108      	bne.n	800490e <HAL_RCC_OscConfig+0x1de>
 80048fc:	4b2e      	ldr	r3, [pc, #184]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004904:	4a2c      	ldr	r2, [pc, #176]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800490a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800490c:	e07a      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490e:	4b2a      	ldr	r3, [pc, #168]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	031b      	lsls	r3, r3, #12
 800491c:	4926      	ldr	r1, [pc, #152]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004922:	e06f      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b24      	ldr	r3, [pc, #144]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	4921      	ldr	r1, [pc, #132]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004938:	e064      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d047      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004942:	4b1d      	ldr	r3, [pc, #116]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 0219 	bic.w	r2, r3, #25
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	491a      	ldr	r1, [pc, #104]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004950:	4313      	orrs	r3, r2
 8004952:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fc ffd0 	bl	80018f8 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800495c:	f7fc ffcc 	bl	80018f8 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e332      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800496e:	4b12      	ldr	r3, [pc, #72]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497a:	f7fc ffed 	bl	8001958 <HAL_GetREVID>
 800497e:	4603      	mov	r3, r0
 8004980:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004984:	4293      	cmp	r3, r2
 8004986:	d819      	bhi.n	80049bc <HAL_RCC_OscConfig+0x28c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b40      	cmp	r3, #64	@ 0x40
 800498e:	d108      	bne.n	80049a2 <HAL_RCC_OscConfig+0x272>
 8004990:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004998:	4a07      	ldr	r2, [pc, #28]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800499a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800499e:	6053      	str	r3, [r2, #4]
 80049a0:	e030      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
 80049a2:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	031b      	lsls	r3, r3, #12
 80049b0:	4901      	ldr	r1, [pc, #4]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	604b      	str	r3, [r1, #4]
 80049b6:	e025      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
 80049b8:	58024400 	.word	0x58024400
 80049bc:	4b9a      	ldr	r3, [pc, #616]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	061b      	lsls	r3, r3, #24
 80049ca:	4997      	ldr	r1, [pc, #604]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
 80049d0:	e018      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d2:	4b95      	ldr	r3, [pc, #596]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a94      	ldr	r2, [pc, #592]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fc ff8b 	bl	80018f8 <HAL_GetTick>
 80049e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e6:	f7fc ff87 	bl	80018f8 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e2ed      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049f8:	4b8b      	ldr	r3, [pc, #556]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f0      	bne.n	80049e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80a9 	beq.w	8004b64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a12:	4b85      	ldr	r3, [pc, #532]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a1c:	4b82      	ldr	r3, [pc, #520]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d007      	beq.n	8004a38 <HAL_RCC_OscConfig+0x308>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b18      	cmp	r3, #24
 8004a2c:	d13a      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x374>
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d135      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a38:	4b7b      	ldr	r3, [pc, #492]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_OscConfig+0x320>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	2b80      	cmp	r3, #128	@ 0x80
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e2c1      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a50:	f7fc ff82 	bl	8001958 <HAL_GetREVID>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d817      	bhi.n	8004a8e <HAL_RCC_OscConfig+0x35e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d108      	bne.n	8004a78 <HAL_RCC_OscConfig+0x348>
 8004a66:	4b70      	ldr	r3, [pc, #448]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a74:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a76:	e075      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a78:	4b6b      	ldr	r3, [pc, #428]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	069b      	lsls	r3, r3, #26
 8004a86:	4968      	ldr	r1, [pc, #416]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a8c:	e06a      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a8e:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	4962      	ldr	r1, [pc, #392]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004aa2:	e05f      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d042      	beq.n	8004b32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004aac:	4b5e      	ldr	r3, [pc, #376]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fc ff1e 	bl	80018f8 <HAL_GetTick>
 8004abc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ac0:	f7fc ff1a 	bl	80018f8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e280      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ad2:	4b55      	ldr	r3, [pc, #340]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ade:	f7fc ff3b 	bl	8001958 <HAL_GetREVID>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d817      	bhi.n	8004b1c <HAL_RCC_OscConfig+0x3ec>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d108      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3d6>
 8004af4:	4b4c      	ldr	r3, [pc, #304]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004afc:	4a4a      	ldr	r2, [pc, #296]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004afe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b02:	6053      	str	r3, [r2, #4]
 8004b04:	e02e      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
 8004b06:	4b48      	ldr	r3, [pc, #288]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	069b      	lsls	r3, r3, #26
 8004b14:	4944      	ldr	r1, [pc, #272]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	604b      	str	r3, [r1, #4]
 8004b1a:	e023      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
 8004b1c:	4b42      	ldr	r3, [pc, #264]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	493f      	ldr	r1, [pc, #252]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60cb      	str	r3, [r1, #12]
 8004b30:	e018      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b32:	4b3d      	ldr	r3, [pc, #244]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3c      	ldr	r2, [pc, #240]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fc fedb 	bl	80018f8 <HAL_GetTick>
 8004b42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b46:	f7fc fed7 	bl	80018f8 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e23d      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b58:	4b33      	ldr	r3, [pc, #204]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d036      	beq.n	8004bde <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d019      	beq.n	8004bac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b78:	4b2b      	ldr	r3, [pc, #172]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fc feb8 	bl	80018f8 <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b8c:	f7fc feb4 	bl	80018f8 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e21a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b9e:	4b22      	ldr	r3, [pc, #136]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x45c>
 8004baa:	e018      	b.n	8004bde <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bac:	4b1e      	ldr	r3, [pc, #120]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fc fe9e 	bl	80018f8 <HAL_GetTick>
 8004bbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc0:	f7fc fe9a 	bl	80018f8 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e200      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bd2:	4b15      	ldr	r3, [pc, #84]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d039      	beq.n	8004c5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bfe:	f7fc fe7b 	bl	80018f8 <HAL_GetTick>
 8004c02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c06:	f7fc fe77 	bl	80018f8 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e1dd      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c18:	4b03      	ldr	r3, [pc, #12]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x4d6>
 8004c24:	e01b      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c2c:	4b9b      	ldr	r3, [pc, #620]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a9a      	ldr	r2, [pc, #616]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004c32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c38:	f7fc fe5e 	bl	80018f8 <HAL_GetTick>
 8004c3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c40:	f7fc fe5a 	bl	80018f8 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e1c0      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c52:	4b92      	ldr	r3, [pc, #584]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8081 	beq.w	8004d6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8004ea0 <HAL_RCC_OscConfig+0x770>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a8b      	ldr	r2, [pc, #556]	@ (8004ea0 <HAL_RCC_OscConfig+0x770>)
 8004c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c78:	f7fc fe3e 	bl	80018f8 <HAL_GetTick>
 8004c7c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c80:	f7fc fe3a 	bl	80018f8 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	@ 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e1a0      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c92:	4b83      	ldr	r3, [pc, #524]	@ (8004ea0 <HAL_RCC_OscConfig+0x770>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x584>
 8004ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	4a7c      	ldr	r2, [pc, #496]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb2:	e02d      	b.n	8004d10 <HAL_RCC_OscConfig+0x5e0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10c      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5a6>
 8004cbc:	4b77      	ldr	r3, [pc, #476]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc0:	4a76      	ldr	r2, [pc, #472]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc8:	4b74      	ldr	r3, [pc, #464]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ccc:	4a73      	ldr	r2, [pc, #460]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cce:	f023 0304 	bic.w	r3, r3, #4
 8004cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd4:	e01c      	b.n	8004d10 <HAL_RCC_OscConfig+0x5e0>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x5c8>
 8004cde:	4b6f      	ldr	r3, [pc, #444]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce2:	4a6e      	ldr	r2, [pc, #440]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cea:	4b6c      	ldr	r3, [pc, #432]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cee:	4a6b      	ldr	r2, [pc, #428]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0x5e0>
 8004cf8:	4b68      	ldr	r3, [pc, #416]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfc:	4a67      	ldr	r2, [pc, #412]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d04:	4b65      	ldr	r3, [pc, #404]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d08:	4a64      	ldr	r2, [pc, #400]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d0a:	f023 0304 	bic.w	r3, r3, #4
 8004d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d015      	beq.n	8004d44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fc fdee 	bl	80018f8 <HAL_GetTick>
 8004d1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fc fdea 	bl	80018f8 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e14e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d36:	4b59      	ldr	r3, [pc, #356]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ee      	beq.n	8004d20 <HAL_RCC_OscConfig+0x5f0>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fc fdd8 	bl	80018f8 <HAL_GetTick>
 8004d48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fc fdd4 	bl	80018f8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e138      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d62:	4b4e      	ldr	r3, [pc, #312]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ee      	bne.n	8004d4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 812d 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d78:	4b48      	ldr	r3, [pc, #288]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d80:	2b18      	cmp	r3, #24
 8004d82:	f000 80bd 	beq.w	8004f00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	f040 809e 	bne.w	8004ecc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d90:	4b42      	ldr	r3, [pc, #264]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a41      	ldr	r2, [pc, #260]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fc fdac 	bl	80018f8 <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fc fda8 	bl	80018f8 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e10e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004db6:	4b39      	ldr	r3, [pc, #228]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dc2:	4b36      	ldr	r3, [pc, #216]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004dc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dc6:	4b37      	ldr	r3, [pc, #220]	@ (8004ea4 <HAL_RCC_OscConfig+0x774>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dd2:	0112      	lsls	r2, r2, #4
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	4931      	ldr	r1, [pc, #196]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de0:	3b01      	subs	r3, #1
 8004de2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dea:	3b01      	subs	r3, #1
 8004dec:	025b      	lsls	r3, r3, #9
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	3b01      	subs	r3, #1
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e04:	3b01      	subs	r3, #1
 8004e06:	061b      	lsls	r3, r3, #24
 8004e08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e0c:	4923      	ldr	r1, [pc, #140]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004e12:	4b22      	ldr	r3, [pc, #136]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	4a21      	ldr	r2, [pc, #132]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e22:	4b21      	ldr	r3, [pc, #132]	@ (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e2a:	00d2      	lsls	r2, r2, #3
 8004e2c:	491b      	ldr	r1, [pc, #108]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e32:	4b1a      	ldr	r3, [pc, #104]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	f023 020c 	bic.w	r2, r3, #12
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	4917      	ldr	r1, [pc, #92]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e44:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	f023 0202 	bic.w	r2, r3, #2
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e50:	4912      	ldr	r1, [pc, #72]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e56:	4b11      	ldr	r3, [pc, #68]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	4a10      	ldr	r2, [pc, #64]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e62:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	4a0d      	ldr	r2, [pc, #52]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	4a0a      	ldr	r2, [pc, #40]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e7a:	4b08      	ldr	r3, [pc, #32]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	4a07      	ldr	r2, [pc, #28]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e86:	4b05      	ldr	r3, [pc, #20]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a04      	ldr	r2, [pc, #16]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fc fd31 	bl	80018f8 <HAL_GetTick>
 8004e96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e98:	e011      	b.n	8004ebe <HAL_RCC_OscConfig+0x78e>
 8004e9a:	bf00      	nop
 8004e9c:	58024400 	.word	0x58024400
 8004ea0:	58024800 	.word	0x58024800
 8004ea4:	fffffc0c 	.word	0xfffffc0c
 8004ea8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fc fd24 	bl	80018f8 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e08a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ebe:	4b47      	ldr	r3, [pc, #284]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x77c>
 8004eca:	e082      	b.n	8004fd2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ecc:	4b43      	ldr	r3, [pc, #268]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a42      	ldr	r2, [pc, #264]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fc fd0e 	bl	80018f8 <HAL_GetTick>
 8004edc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fc fd0a 	bl	80018f8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e070      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x7b0>
 8004efe:	e068      	b.n	8004fd2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f00:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f06:	4b35      	ldr	r3, [pc, #212]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d031      	beq.n	8004f78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f003 0203 	and.w	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d12a      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d122      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d11a      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	0a5b      	lsrs	r3, r3, #9
 8004f46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d111      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d108      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	0e1b      	lsrs	r3, r3, #24
 8004f6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e02b      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f7c:	4b17      	ldr	r3, [pc, #92]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f80:	08db      	lsrs	r3, r3, #3
 8004f82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d01f      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f92:	4b12      	ldr	r3, [pc, #72]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	4a11      	ldr	r2, [pc, #68]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f9e:	f7fc fcab 	bl	80018f8 <HAL_GetTick>
 8004fa2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004fa4:	bf00      	nop
 8004fa6:	f7fc fca7 	bl	80018f8 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d0f9      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe0 <HAL_RCC_OscConfig+0x8b0>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004fbe:	00d2      	lsls	r2, r2, #3
 8004fc0:	4906      	ldr	r1, [pc, #24]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004fc6:	4b05      	ldr	r3, [pc, #20]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	4a04      	ldr	r2, [pc, #16]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3730      	adds	r7, #48	@ 0x30
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	58024400 	.word	0x58024400
 8004fe0:	ffff0007 	.word	0xffff0007

08004fe4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e19c      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b8a      	ldr	r3, [pc, #552]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d910      	bls.n	8005028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b87      	ldr	r3, [pc, #540]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 020f 	bic.w	r2, r3, #15
 800500e:	4985      	ldr	r1, [pc, #532]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b83      	ldr	r3, [pc, #524]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e184      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d010      	beq.n	8005056 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	4b7b      	ldr	r3, [pc, #492]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005040:	429a      	cmp	r2, r3
 8005042:	d908      	bls.n	8005056 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005044:	4b78      	ldr	r3, [pc, #480]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	4975      	ldr	r1, [pc, #468]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005052:	4313      	orrs	r3, r2
 8005054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d010      	beq.n	8005084 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	4b70      	ldr	r3, [pc, #448]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800506e:	429a      	cmp	r2, r3
 8005070:	d908      	bls.n	8005084 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005072:	4b6d      	ldr	r3, [pc, #436]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	496a      	ldr	r1, [pc, #424]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005080:	4313      	orrs	r3, r2
 8005082:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d010      	beq.n	80050b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	4b64      	ldr	r3, [pc, #400]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800509c:	429a      	cmp	r2, r3
 800509e:	d908      	bls.n	80050b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050a0:	4b61      	ldr	r3, [pc, #388]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	495e      	ldr	r1, [pc, #376]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d010      	beq.n	80050e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	4b59      	ldr	r3, [pc, #356]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d908      	bls.n	80050e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050ce:	4b56      	ldr	r3, [pc, #344]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4953      	ldr	r1, [pc, #332]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	4b4d      	ldr	r3, [pc, #308]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d908      	bls.n	800510e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fc:	4b4a      	ldr	r3, [pc, #296]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f023 020f 	bic.w	r2, r3, #15
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4947      	ldr	r1, [pc, #284]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 800510a:	4313      	orrs	r3, r2
 800510c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d055      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800511a:	4b43      	ldr	r3, [pc, #268]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4940      	ldr	r1, [pc, #256]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005128:	4313      	orrs	r3, r2
 800512a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d107      	bne.n	8005144 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005134:	4b3c      	ldr	r3, [pc, #240]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d121      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0f6      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d107      	bne.n	800515c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800514c:	4b36      	ldr	r3, [pc, #216]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d115      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0ea      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005164:	4b30      	ldr	r3, [pc, #192]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d109      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0de      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005174:	4b2c      	ldr	r3, [pc, #176]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0d6      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005184:	4b28      	ldr	r3, [pc, #160]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f023 0207 	bic.w	r2, r3, #7
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4925      	ldr	r1, [pc, #148]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005192:	4313      	orrs	r3, r2
 8005194:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005196:	f7fc fbaf 	bl	80018f8 <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800519e:	f7fc fbab 	bl	80018f8 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e0be      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d1eb      	bne.n	800519e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d010      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	4b14      	ldr	r3, [pc, #80]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	429a      	cmp	r2, r3
 80051e0:	d208      	bcs.n	80051f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e2:	4b11      	ldr	r3, [pc, #68]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f023 020f 	bic.w	r2, r3, #15
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	490e      	ldr	r1, [pc, #56]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d214      	bcs.n	800522c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005202:	4b08      	ldr	r3, [pc, #32]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 020f 	bic.w	r2, r3, #15
 800520a:	4906      	ldr	r1, [pc, #24]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	4313      	orrs	r3, r2
 8005210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b04      	ldr	r3, [pc, #16]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d005      	beq.n	800522c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e086      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
 8005224:	52002000 	.word	0x52002000
 8005228:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d010      	beq.n	800525a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	4b3f      	ldr	r3, [pc, #252]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005244:	429a      	cmp	r2, r3
 8005246:	d208      	bcs.n	800525a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005248:	4b3c      	ldr	r3, [pc, #240]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	4939      	ldr	r1, [pc, #228]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 8005256:	4313      	orrs	r3, r2
 8005258:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d010      	beq.n	8005288 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	4b34      	ldr	r3, [pc, #208]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005272:	429a      	cmp	r2, r3
 8005274:	d208      	bcs.n	8005288 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005276:	4b31      	ldr	r3, [pc, #196]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	492e      	ldr	r1, [pc, #184]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 8005284:	4313      	orrs	r3, r2
 8005286:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	d010      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	4b28      	ldr	r3, [pc, #160]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d208      	bcs.n	80052b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052a4:	4b25      	ldr	r3, [pc, #148]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	4922      	ldr	r1, [pc, #136]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d010      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	4b1d      	ldr	r3, [pc, #116]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d208      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052d2:	4b1a      	ldr	r3, [pc, #104]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4917      	ldr	r1, [pc, #92]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052e4:	f000 f834 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b14      	ldr	r3, [pc, #80]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	4912      	ldr	r1, [pc, #72]	@ (8005340 <HAL_RCC_ClockConfig+0x35c>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005300:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005302:	4b0e      	ldr	r3, [pc, #56]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	4a0d      	ldr	r2, [pc, #52]	@ (8005340 <HAL_RCC_ClockConfig+0x35c>)
 800530c:	5cd3      	ldrb	r3, [r2, r3]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
 8005318:	4a0a      	ldr	r2, [pc, #40]	@ (8005344 <HAL_RCC_ClockConfig+0x360>)
 800531a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800531c:	4a0a      	ldr	r2, [pc, #40]	@ (8005348 <HAL_RCC_ClockConfig+0x364>)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005322:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <HAL_RCC_ClockConfig+0x368>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fc fa9c 	bl	8001864 <HAL_InitTick>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	58024400 	.word	0x58024400
 8005340:	0800f800 	.word	0x0800f800
 8005344:	24000004 	.word	0x24000004
 8005348:	24000000 	.word	0x24000000
 800534c:	24000008 	.word	0x24000008

08005350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	b089      	sub	sp, #36	@ 0x24
 8005354:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005356:	4bb3      	ldr	r3, [pc, #716]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800535e:	2b18      	cmp	r3, #24
 8005360:	f200 8155 	bhi.w	800560e <HAL_RCC_GetSysClockFreq+0x2be>
 8005364:	a201      	add	r2, pc, #4	@ (adr r2, 800536c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053d1 	.word	0x080053d1
 8005370:	0800560f 	.word	0x0800560f
 8005374:	0800560f 	.word	0x0800560f
 8005378:	0800560f 	.word	0x0800560f
 800537c:	0800560f 	.word	0x0800560f
 8005380:	0800560f 	.word	0x0800560f
 8005384:	0800560f 	.word	0x0800560f
 8005388:	0800560f 	.word	0x0800560f
 800538c:	080053f7 	.word	0x080053f7
 8005390:	0800560f 	.word	0x0800560f
 8005394:	0800560f 	.word	0x0800560f
 8005398:	0800560f 	.word	0x0800560f
 800539c:	0800560f 	.word	0x0800560f
 80053a0:	0800560f 	.word	0x0800560f
 80053a4:	0800560f 	.word	0x0800560f
 80053a8:	0800560f 	.word	0x0800560f
 80053ac:	080053fd 	.word	0x080053fd
 80053b0:	0800560f 	.word	0x0800560f
 80053b4:	0800560f 	.word	0x0800560f
 80053b8:	0800560f 	.word	0x0800560f
 80053bc:	0800560f 	.word	0x0800560f
 80053c0:	0800560f 	.word	0x0800560f
 80053c4:	0800560f 	.word	0x0800560f
 80053c8:	0800560f 	.word	0x0800560f
 80053cc:	08005403 	.word	0x08005403
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d0:	4b94      	ldr	r3, [pc, #592]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053dc:	4b91      	ldr	r3, [pc, #580]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	08db      	lsrs	r3, r3, #3
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	4a90      	ldr	r2, [pc, #576]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80053ee:	e111      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053f0:	4b8d      	ldr	r3, [pc, #564]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053f2:	61bb      	str	r3, [r7, #24]
      break;
 80053f4:	e10e      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80053f6:	4b8d      	ldr	r3, [pc, #564]	@ (800562c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053f8:	61bb      	str	r3, [r7, #24]
      break;
 80053fa:	e10b      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80053fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80053fe:	61bb      	str	r3, [r7, #24]
      break;
 8005400:	e108      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005402:	4b88      	ldr	r3, [pc, #544]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800540c:	4b85      	ldr	r3, [pc, #532]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005416:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005418:	4b82      	ldr	r3, [pc, #520]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005422:	4b80      	ldr	r3, [pc, #512]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005426:	08db      	lsrs	r3, r3, #3
 8005428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	fb02 f303 	mul.w	r3, r2, r3
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80e1 	beq.w	8005608 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b02      	cmp	r3, #2
 800544a:	f000 8083 	beq.w	8005554 <HAL_RCC_GetSysClockFreq+0x204>
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b02      	cmp	r3, #2
 8005452:	f200 80a1 	bhi.w	8005598 <HAL_RCC_GetSysClockFreq+0x248>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x114>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d056      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005462:	e099      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005464:	4b6f      	ldr	r3, [pc, #444]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02d      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005470:	4b6c      	ldr	r3, [pc, #432]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	08db      	lsrs	r3, r3, #3
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	4a6b      	ldr	r2, [pc, #428]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
 8005480:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	ee07 3a90 	vmov	s15, r3
 8005488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	4b62      	ldr	r3, [pc, #392]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80054ca:	e087      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005638 <HAL_RCC_GetSysClockFreq+0x2e8>
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b51      	ldr	r3, [pc, #324]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80054f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800550e:	e065      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800563c <HAL_RCC_GetSysClockFreq+0x2ec>
 800551e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005522:	4b40      	ldr	r3, [pc, #256]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005532:	ed97 6a02 	vldr	s12, [r7, #8]
 8005536:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 800553a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005552:	e043      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005640 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005566:	4b2f      	ldr	r3, [pc, #188]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a02 	vldr	s12, [r7, #8]
 800557a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005596:	e021      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800563c <HAL_RCC_GetSysClockFreq+0x2ec>
 80055a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80055be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80055dc:	4b11      	ldr	r3, [pc, #68]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	0a5b      	lsrs	r3, r3, #9
 80055e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055e6:	3301      	adds	r3, #1
 80055e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80055f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005600:	ee17 3a90 	vmov	r3, s15
 8005604:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005606:	e005      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	61bb      	str	r3, [r7, #24]
      break;
 800560c:	e002      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800560e:	4b07      	ldr	r3, [pc, #28]	@ (800562c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005610:	61bb      	str	r3, [r7, #24]
      break;
 8005612:	bf00      	nop
  }

  return sysclockfreq;
 8005614:	69bb      	ldr	r3, [r7, #24]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3724      	adds	r7, #36	@ 0x24
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	58024400 	.word	0x58024400
 8005628:	03d09000 	.word	0x03d09000
 800562c:	003d0900 	.word	0x003d0900
 8005630:	017d7840 	.word	0x017d7840
 8005634:	46000000 	.word	0x46000000
 8005638:	4c742400 	.word	0x4c742400
 800563c:	4a742400 	.word	0x4a742400
 8005640:	4bbebc20 	.word	0x4bbebc20

08005644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800564a:	f7ff fe81 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 800564e:	4602      	mov	r2, r0
 8005650:	4b10      	ldr	r3, [pc, #64]	@ (8005694 <HAL_RCC_GetHCLKFreq+0x50>)
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	490f      	ldr	r1, [pc, #60]	@ (8005698 <HAL_RCC_GetHCLKFreq+0x54>)
 800565c:	5ccb      	ldrb	r3, [r1, r3]
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	fa22 f303 	lsr.w	r3, r2, r3
 8005666:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005668:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <HAL_RCC_GetHCLKFreq+0x50>)
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	4a09      	ldr	r2, [pc, #36]	@ (8005698 <HAL_RCC_GetHCLKFreq+0x54>)
 8005672:	5cd3      	ldrb	r3, [r2, r3]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	fa22 f303 	lsr.w	r3, r2, r3
 800567e:	4a07      	ldr	r2, [pc, #28]	@ (800569c <HAL_RCC_GetHCLKFreq+0x58>)
 8005680:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005682:	4a07      	ldr	r2, [pc, #28]	@ (80056a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005688:	4b04      	ldr	r3, [pc, #16]	@ (800569c <HAL_RCC_GetHCLKFreq+0x58>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	58024400 	.word	0x58024400
 8005698:	0800f800 	.word	0x0800f800
 800569c:	24000004 	.word	0x24000004
 80056a0:	24000000 	.word	0x24000000

080056a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80056a8:	f7ff ffcc 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	091b      	lsrs	r3, r3, #4
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	4904      	ldr	r1, [pc, #16]	@ (80056cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	58024400 	.word	0x58024400
 80056cc:	0800f800 	.word	0x0800f800

080056d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80056d4:	f7ff ffb6 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b06      	ldr	r3, [pc, #24]	@ (80056f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4904      	ldr	r1, [pc, #16]	@ (80056f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	58024400 	.word	0x58024400
 80056f8:	0800f800 	.word	0x0800f800

080056fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005700:	b0ca      	sub	sp, #296	@ 0x128
 8005702:	af00      	add	r7, sp, #0
 8005704:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005708:	2300      	movs	r3, #0
 800570a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800570e:	2300      	movs	r3, #0
 8005710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005720:	2500      	movs	r5, #0
 8005722:	ea54 0305 	orrs.w	r3, r4, r5
 8005726:	d049      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800572e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005732:	d02f      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005734:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005738:	d828      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800573a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800573e:	d01a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005744:	d822      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800574a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800574e:	d007      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005750:	e01c      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005752:	4bb8      	ldr	r3, [pc, #736]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005756:	4ab7      	ldr	r2, [pc, #732]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800575c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800575e:	e01a      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005764:	3308      	adds	r3, #8
 8005766:	2102      	movs	r1, #2
 8005768:	4618      	mov	r0, r3
 800576a:	f002 fb61 	bl	8007e30 <RCCEx_PLL2_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005774:	e00f      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577a:	3328      	adds	r3, #40	@ 0x28
 800577c:	2102      	movs	r1, #2
 800577e:	4618      	mov	r0, r3
 8005780:	f002 fc08 	bl	8007f94 <RCCEx_PLL3_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800578a:	e004      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005792:	e000      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800579e:	4ba5      	ldr	r3, [pc, #660]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ac:	4aa1      	ldr	r2, [pc, #644]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ae:	430b      	orrs	r3, r1
 80057b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80057b2:	e003      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80057c8:	f04f 0900 	mov.w	r9, #0
 80057cc:	ea58 0309 	orrs.w	r3, r8, r9
 80057d0:	d047      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80057d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d82a      	bhi.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80057dc:	a201      	add	r2, pc, #4	@ (adr r2, 80057e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	080057f9 	.word	0x080057f9
 80057e8:	08005807 	.word	0x08005807
 80057ec:	0800581d 	.word	0x0800581d
 80057f0:	0800583b 	.word	0x0800583b
 80057f4:	0800583b 	.word	0x0800583b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f8:	4b8e      	ldr	r3, [pc, #568]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fc:	4a8d      	ldr	r2, [pc, #564]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005804:	e01a      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580a:	3308      	adds	r3, #8
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f002 fb0e 	bl	8007e30 <RCCEx_PLL2_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800581a:	e00f      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800581c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005820:	3328      	adds	r3, #40	@ 0x28
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f002 fbb5 	bl	8007f94 <RCCEx_PLL3_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005830:	e004      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005838:	e000      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800583a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800583c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005844:	4b7b      	ldr	r3, [pc, #492]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005848:	f023 0107 	bic.w	r1, r3, #7
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	4a78      	ldr	r2, [pc, #480]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005854:	430b      	orrs	r3, r1
 8005856:	6513      	str	r3, [r2, #80]	@ 0x50
 8005858:	e003      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800585e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800586e:	f04f 0b00 	mov.w	fp, #0
 8005872:	ea5a 030b 	orrs.w	r3, sl, fp
 8005876:	d04c      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800587e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005882:	d030      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005888:	d829      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800588a:	2bc0      	cmp	r3, #192	@ 0xc0
 800588c:	d02d      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800588e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005890:	d825      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005892:	2b80      	cmp	r3, #128	@ 0x80
 8005894:	d018      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005896:	2b80      	cmp	r3, #128	@ 0x80
 8005898:	d821      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800589e:	2b40      	cmp	r3, #64	@ 0x40
 80058a0:	d007      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80058a2:	e01c      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a4:	4b63      	ldr	r3, [pc, #396]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a8:	4a62      	ldr	r2, [pc, #392]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058b0:	e01c      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b6:	3308      	adds	r3, #8
 80058b8:	2100      	movs	r1, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f002 fab8 	bl	8007e30 <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058c6:	e011      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058cc:	3328      	adds	r3, #40	@ 0x28
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f002 fb5f 	bl	8007f94 <RCCEx_PLL3_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058dc:	e006      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058e4:	e002      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80058f4:	4b4f      	ldr	r3, [pc, #316]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005902:	4a4c      	ldr	r2, [pc, #304]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005904:	430b      	orrs	r3, r1
 8005906:	6513      	str	r3, [r2, #80]	@ 0x50
 8005908:	e003      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800590e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800591e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005922:	2300      	movs	r3, #0
 8005924:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005928:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800592c:	460b      	mov	r3, r1
 800592e:	4313      	orrs	r3, r2
 8005930:	d053      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005936:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800593a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800593e:	d035      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005940:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005944:	d82e      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005946:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800594a:	d031      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800594c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005950:	d828      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005956:	d01a      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005958:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800595c:	d822      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005962:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005966:	d007      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005968:	e01c      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800596a:	4b32      	ldr	r3, [pc, #200]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800596c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596e:	4a31      	ldr	r2, [pc, #196]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005974:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005976:	e01c      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597c:	3308      	adds	r3, #8
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f002 fa55 	bl	8007e30 <RCCEx_PLL2_Config>
 8005986:	4603      	mov	r3, r0
 8005988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800598c:	e011      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005992:	3328      	adds	r3, #40	@ 0x28
 8005994:	2100      	movs	r1, #0
 8005996:	4618      	mov	r0, r3
 8005998:	f002 fafc 	bl	8007f94 <RCCEx_PLL3_Config>
 800599c:	4603      	mov	r3, r0
 800599e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059a2:	e006      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059aa:	e002      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059ac:	bf00      	nop
 80059ae:	e000      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80059ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059cc:	430b      	orrs	r3, r1
 80059ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80059d0:	e003      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80059e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80059ea:	2300      	movs	r3, #0
 80059ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80059f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80059f4:	460b      	mov	r3, r1
 80059f6:	4313      	orrs	r3, r2
 80059f8:	d056      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a06:	d038      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a0c:	d831      	bhi.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a12:	d034      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a18:	d82b      	bhi.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a1e:	d01d      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a24:	d825      	bhi.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d006      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005a2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a30:	e01f      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a32:	bf00      	nop
 8005a34:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a38:	4ba2      	ldr	r3, [pc, #648]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3c:	4aa1      	ldr	r2, [pc, #644]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a44:	e01c      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f002 f9ee 	bl	8007e30 <RCCEx_PLL2_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a5a:	e011      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a60:	3328      	adds	r3, #40	@ 0x28
 8005a62:	2100      	movs	r1, #0
 8005a64:	4618      	mov	r0, r3
 8005a66:	f002 fa95 	bl	8007f94 <RCCEx_PLL3_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a70:	e006      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a78:	e002      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a7a:	bf00      	nop
 8005a7c:	e000      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10b      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a88:	4b8e      	ldr	r3, [pc, #568]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a8c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a98:	4a8a      	ldr	r2, [pc, #552]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a9e:	e003      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005abe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	d03a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ace:	2b30      	cmp	r3, #48	@ 0x30
 8005ad0:	d01f      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005ad2:	2b30      	cmp	r3, #48	@ 0x30
 8005ad4:	d819      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d00c      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d815      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d019      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d111      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae6:	4b77      	ldr	r3, [pc, #476]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aea:	4a76      	ldr	r2, [pc, #472]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005af2:	e011      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af8:	3308      	adds	r3, #8
 8005afa:	2102      	movs	r1, #2
 8005afc:	4618      	mov	r0, r3
 8005afe:	f002 f997 	bl	8007e30 <RCCEx_PLL2_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b08:	e006      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b10:	e002      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b20:	4b68      	ldr	r3, [pc, #416]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b24:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b2e:	4a65      	ldr	r2, [pc, #404]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b30:	430b      	orrs	r3, r1
 8005b32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b34:	e003      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b54:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	d051      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b68:	d035      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005b6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b6e:	d82e      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b74:	d031      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005b76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b7a:	d828      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b80:	d01a      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b86:	d822      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b90:	d007      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005b92:	e01c      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b94:	4b4b      	ldr	r3, [pc, #300]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	4a4a      	ldr	r2, [pc, #296]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ba0:	e01c      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f002 f940 	bl	8007e30 <RCCEx_PLL2_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bb6:	e011      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbc:	3328      	adds	r3, #40	@ 0x28
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f002 f9e7 	bl	8007f94 <RCCEx_PLL3_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bcc:	e006      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bd4:	e002      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bd6:	bf00      	nop
 8005bd8:	e000      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005be4:	4b37      	ldr	r3, [pc, #220]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bf2:	4a34      	ldr	r2, [pc, #208]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bf8:	e003      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c12:	2300      	movs	r3, #0
 8005c14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	d056      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c2c:	d033      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c32:	d82c      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c38:	d02f      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005c3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c3e:	d826      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c44:	d02b      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005c46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c4a:	d820      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c50:	d012      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005c52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c56:	d81a      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d022      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c60:	d115      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c66:	3308      	adds	r3, #8
 8005c68:	2101      	movs	r1, #1
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f002 f8e0 	bl	8007e30 <RCCEx_PLL2_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c76:	e015      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7c:	3328      	adds	r3, #40	@ 0x28
 8005c7e:	2101      	movs	r1, #1
 8005c80:	4618      	mov	r0, r3
 8005c82:	f002 f987 	bl	8007f94 <RCCEx_PLL3_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c8c:	e00a      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c94:	e006      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c96:	bf00      	nop
 8005c98:	e004      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c9a:	bf00      	nop
 8005c9c:	e002      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c9e:	bf00      	nop
 8005ca0:	e000      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10d      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cac:	4b05      	ldr	r3, [pc, #20]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cba:	4a02      	ldr	r2, [pc, #8]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cc0:	e006      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005cc2:	bf00      	nop
 8005cc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ccc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ce6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4313      	orrs	r3, r2
 8005cee:	d055      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cfc:	d033      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d02:	d82c      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d08:	d02f      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d0e:	d826      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d14:	d02b      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d1a:	d820      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d20:	d012      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005d22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d26:	d81a      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d022      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d30:	d115      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d36:	3308      	adds	r3, #8
 8005d38:	2101      	movs	r1, #1
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f002 f878 	bl	8007e30 <RCCEx_PLL2_Config>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d46:	e015      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4c:	3328      	adds	r3, #40	@ 0x28
 8005d4e:	2101      	movs	r1, #1
 8005d50:	4618      	mov	r0, r3
 8005d52:	f002 f91f 	bl	8007f94 <RCCEx_PLL3_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d5c:	e00a      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d64:	e006      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d66:	bf00      	nop
 8005d68:	e004      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d6a:	bf00      	nop
 8005d6c:	e002      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d6e:	bf00      	nop
 8005d70:	e000      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d7c:	4ba3      	ldr	r3, [pc, #652]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d80:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d8c:	4a9f      	ldr	r2, [pc, #636]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d92:	e003      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005da8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005dac:	2300      	movs	r3, #0
 8005dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005db6:	460b      	mov	r3, r1
 8005db8:	4313      	orrs	r3, r2
 8005dba:	d037      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dc6:	d00e      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dcc:	d816      	bhi.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d018      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dd6:	d111      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd8:	4b8c      	ldr	r3, [pc, #560]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ddc:	4a8b      	ldr	r2, [pc, #556]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005de4:	e00f      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dea:	3308      	adds	r3, #8
 8005dec:	2101      	movs	r1, #1
 8005dee:	4618      	mov	r0, r3
 8005df0:	f002 f81e 	bl	8007e30 <RCCEx_PLL2_Config>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005dfa:	e004      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e02:	e000      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e0e:	4b7f      	ldr	r3, [pc, #508]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1c:	4a7b      	ldr	r2, [pc, #492]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e1e:	430b      	orrs	r3, r1
 8005e20:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e22:	e003      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005e42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	d039      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d81c      	bhi.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005e56:	a201      	add	r2, pc, #4	@ (adr r2, 8005e5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005e99 	.word	0x08005e99
 8005e60:	08005e6d 	.word	0x08005e6d
 8005e64:	08005e7b 	.word	0x08005e7b
 8005e68:	08005e99 	.word	0x08005e99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e6c:	4b67      	ldr	r3, [pc, #412]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	4a66      	ldr	r2, [pc, #408]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e78:	e00f      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7e:	3308      	adds	r3, #8
 8005e80:	2102      	movs	r1, #2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 ffd4 	bl	8007e30 <RCCEx_PLL2_Config>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e8e:	e004      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ea2:	4b5a      	ldr	r3, [pc, #360]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea6:	f023 0103 	bic.w	r1, r3, #3
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb0:	4a56      	ldr	r2, [pc, #344]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005eb6:	e003      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ebc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ed6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005eda:	460b      	mov	r3, r1
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f000 809f 	beq.w	8006020 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a4a      	ldr	r2, [pc, #296]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eee:	f7fb fd03 	bl	80018f8 <HAL_GetTick>
 8005ef2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ef6:	e00b      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef8:	f7fb fcfe 	bl	80018f8 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b64      	cmp	r3, #100	@ 0x64
 8005f06:	d903      	bls.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f0e:	e005      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f10:	4b3f      	ldr	r3, [pc, #252]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0ed      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d179      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f24:	4b39      	ldr	r3, [pc, #228]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f30:	4053      	eors	r3, r2
 8005f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d015      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f3a:	4b34      	ldr	r3, [pc, #208]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f46:	4b31      	ldr	r3, [pc, #196]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4a:	4a30      	ldr	r2, [pc, #192]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f52:	4b2e      	ldr	r3, [pc, #184]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f56:	4a2d      	ldr	r2, [pc, #180]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f5e:	4a2b      	ldr	r2, [pc, #172]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f72:	d118      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f74:	f7fb fcc0 	bl	80018f8 <HAL_GetTick>
 8005f78:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f7c:	e00d      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7e:	f7fb fcbb 	bl	80018f8 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f88:	1ad2      	subs	r2, r2, r3
 8005f8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d903      	bls.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005f98:	e005      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0eb      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d129      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fbe:	d10e      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005fc0:	4b12      	ldr	r3, [pc, #72]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fd0:	091a      	lsrs	r2, r3, #4
 8005fd2:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	6113      	str	r3, [r2, #16]
 8005fdc:	e005      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005fde:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005fe8:	6113      	str	r3, [r2, #16]
 8005fea:	4b08      	ldr	r3, [pc, #32]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ffa:	4a04      	ldr	r2, [pc, #16]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006000:	e00e      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800600a:	e009      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800600c:	58024400 	.word	0x58024400
 8006010:	58024800 	.word	0x58024800
 8006014:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	f002 0301 	and.w	r3, r2, #1
 800602c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006030:	2300      	movs	r3, #0
 8006032:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006036:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800603a:	460b      	mov	r3, r1
 800603c:	4313      	orrs	r3, r2
 800603e:	f000 8089 	beq.w	8006154 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006048:	2b28      	cmp	r3, #40	@ 0x28
 800604a:	d86b      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800604c:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	0800612d 	.word	0x0800612d
 8006058:	08006125 	.word	0x08006125
 800605c:	08006125 	.word	0x08006125
 8006060:	08006125 	.word	0x08006125
 8006064:	08006125 	.word	0x08006125
 8006068:	08006125 	.word	0x08006125
 800606c:	08006125 	.word	0x08006125
 8006070:	08006125 	.word	0x08006125
 8006074:	080060f9 	.word	0x080060f9
 8006078:	08006125 	.word	0x08006125
 800607c:	08006125 	.word	0x08006125
 8006080:	08006125 	.word	0x08006125
 8006084:	08006125 	.word	0x08006125
 8006088:	08006125 	.word	0x08006125
 800608c:	08006125 	.word	0x08006125
 8006090:	08006125 	.word	0x08006125
 8006094:	0800610f 	.word	0x0800610f
 8006098:	08006125 	.word	0x08006125
 800609c:	08006125 	.word	0x08006125
 80060a0:	08006125 	.word	0x08006125
 80060a4:	08006125 	.word	0x08006125
 80060a8:	08006125 	.word	0x08006125
 80060ac:	08006125 	.word	0x08006125
 80060b0:	08006125 	.word	0x08006125
 80060b4:	0800612d 	.word	0x0800612d
 80060b8:	08006125 	.word	0x08006125
 80060bc:	08006125 	.word	0x08006125
 80060c0:	08006125 	.word	0x08006125
 80060c4:	08006125 	.word	0x08006125
 80060c8:	08006125 	.word	0x08006125
 80060cc:	08006125 	.word	0x08006125
 80060d0:	08006125 	.word	0x08006125
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	08006125 	.word	0x08006125
 80060dc:	08006125 	.word	0x08006125
 80060e0:	08006125 	.word	0x08006125
 80060e4:	08006125 	.word	0x08006125
 80060e8:	08006125 	.word	0x08006125
 80060ec:	08006125 	.word	0x08006125
 80060f0:	08006125 	.word	0x08006125
 80060f4:	0800612d 	.word	0x0800612d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fc:	3308      	adds	r3, #8
 80060fe:	2101      	movs	r1, #1
 8006100:	4618      	mov	r0, r3
 8006102:	f001 fe95 	bl	8007e30 <RCCEx_PLL2_Config>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800610c:	e00f      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800610e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006112:	3328      	adds	r3, #40	@ 0x28
 8006114:	2101      	movs	r1, #1
 8006116:	4618      	mov	r0, r3
 8006118:	f001 ff3c 	bl	8007f94 <RCCEx_PLL3_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006122:	e004      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800612a:	e000      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800612c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006136:	4bbf      	ldr	r3, [pc, #764]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800613a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006142:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006144:	4abb      	ldr	r2, [pc, #748]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006146:	430b      	orrs	r3, r1
 8006148:	6553      	str	r3, [r2, #84]	@ 0x54
 800614a:	e003      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f002 0302 	and.w	r3, r2, #2
 8006160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006164:	2300      	movs	r3, #0
 8006166:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800616a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800616e:	460b      	mov	r3, r1
 8006170:	4313      	orrs	r3, r2
 8006172:	d041      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800617a:	2b05      	cmp	r3, #5
 800617c:	d824      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800617e:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	080061d1 	.word	0x080061d1
 8006188:	0800619d 	.word	0x0800619d
 800618c:	080061b3 	.word	0x080061b3
 8006190:	080061d1 	.word	0x080061d1
 8006194:	080061d1 	.word	0x080061d1
 8006198:	080061d1 	.word	0x080061d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	3308      	adds	r3, #8
 80061a2:	2101      	movs	r1, #1
 80061a4:	4618      	mov	r0, r3
 80061a6:	f001 fe43 	bl	8007e30 <RCCEx_PLL2_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061b0:	e00f      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b6:	3328      	adds	r3, #40	@ 0x28
 80061b8:	2101      	movs	r1, #1
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 feea 	bl	8007f94 <RCCEx_PLL3_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061c6:	e004      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061ce:	e000      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80061d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10a      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061da:	4b96      	ldr	r3, [pc, #600]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061de:	f023 0107 	bic.w	r1, r3, #7
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061e8:	4a92      	ldr	r2, [pc, #584]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061ea:	430b      	orrs	r3, r1
 80061ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80061ee:	e003      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f002 0304 	and.w	r3, r2, #4
 8006204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006208:	2300      	movs	r3, #0
 800620a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800620e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006212:	460b      	mov	r3, r1
 8006214:	4313      	orrs	r3, r2
 8006216:	d044      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006220:	2b05      	cmp	r3, #5
 8006222:	d825      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006224:	a201      	add	r2, pc, #4	@ (adr r2, 800622c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	08006279 	.word	0x08006279
 8006230:	08006245 	.word	0x08006245
 8006234:	0800625b 	.word	0x0800625b
 8006238:	08006279 	.word	0x08006279
 800623c:	08006279 	.word	0x08006279
 8006240:	08006279 	.word	0x08006279
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006248:	3308      	adds	r3, #8
 800624a:	2101      	movs	r1, #1
 800624c:	4618      	mov	r0, r3
 800624e:	f001 fdef 	bl	8007e30 <RCCEx_PLL2_Config>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006258:	e00f      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625e:	3328      	adds	r3, #40	@ 0x28
 8006260:	2101      	movs	r1, #1
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fe96 	bl	8007f94 <RCCEx_PLL3_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800626e:	e004      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006276:	e000      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006282:	4b6c      	ldr	r3, [pc, #432]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006286:	f023 0107 	bic.w	r1, r3, #7
 800628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006292:	4a68      	ldr	r2, [pc, #416]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006294:	430b      	orrs	r3, r1
 8006296:	6593      	str	r3, [r2, #88]	@ 0x58
 8006298:	e003      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800629e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f002 0320 	and.w	r3, r2, #32
 80062ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062b2:	2300      	movs	r3, #0
 80062b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062bc:	460b      	mov	r3, r1
 80062be:	4313      	orrs	r3, r2
 80062c0:	d055      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062ce:	d033      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80062d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062d4:	d82c      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062da:	d02f      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80062dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e0:	d826      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062e6:	d02b      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80062e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062ec:	d820      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062f2:	d012      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80062f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062f8:	d81a      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d022      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80062fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006302:	d115      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006308:	3308      	adds	r3, #8
 800630a:	2100      	movs	r1, #0
 800630c:	4618      	mov	r0, r3
 800630e:	f001 fd8f 	bl	8007e30 <RCCEx_PLL2_Config>
 8006312:	4603      	mov	r3, r0
 8006314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006318:	e015      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631e:	3328      	adds	r3, #40	@ 0x28
 8006320:	2102      	movs	r1, #2
 8006322:	4618      	mov	r0, r3
 8006324:	f001 fe36 	bl	8007f94 <RCCEx_PLL3_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800632e:	e00a      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006336:	e006      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006338:	bf00      	nop
 800633a:	e004      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800633c:	bf00      	nop
 800633e:	e002      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006340:	bf00      	nop
 8006342:	e000      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10b      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800634e:	4b39      	ldr	r3, [pc, #228]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006352:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800635e:	4a35      	ldr	r2, [pc, #212]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006360:	430b      	orrs	r3, r1
 8006362:	6553      	str	r3, [r2, #84]	@ 0x54
 8006364:	e003      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800636a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800637a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800637e:	2300      	movs	r3, #0
 8006380:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006384:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006388:	460b      	mov	r3, r1
 800638a:	4313      	orrs	r3, r2
 800638c:	d058      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800638e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006392:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006396:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800639a:	d033      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800639c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063a0:	d82c      	bhi.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063a6:	d02f      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80063a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ac:	d826      	bhi.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063b2:	d02b      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80063b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063b8:	d820      	bhi.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063be:	d012      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80063c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063c4:	d81a      	bhi.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d022      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ce:	d115      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d4:	3308      	adds	r3, #8
 80063d6:	2100      	movs	r1, #0
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 fd29 	bl	8007e30 <RCCEx_PLL2_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063e4:	e015      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ea:	3328      	adds	r3, #40	@ 0x28
 80063ec:	2102      	movs	r1, #2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 fdd0 	bl	8007f94 <RCCEx_PLL3_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063fa:	e00a      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006402:	e006      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006404:	bf00      	nop
 8006406:	e004      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006408:	bf00      	nop
 800640a:	e002      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10e      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800641a:	4b06      	ldr	r3, [pc, #24]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800641c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800641e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006426:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800642a:	4a02      	ldr	r2, [pc, #8]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800642c:	430b      	orrs	r3, r1
 800642e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006430:	e006      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006432:	bf00      	nop
 8006434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800643c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800644c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006450:	2300      	movs	r3, #0
 8006452:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006456:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800645a:	460b      	mov	r3, r1
 800645c:	4313      	orrs	r3, r2
 800645e:	d055      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006464:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006468:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800646c:	d033      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800646e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006472:	d82c      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006478:	d02f      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800647a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800647e:	d826      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006480:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006484:	d02b      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006486:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800648a:	d820      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800648c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006490:	d012      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006492:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006496:	d81a      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d022      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800649c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064a0:	d115      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a6:	3308      	adds	r3, #8
 80064a8:	2100      	movs	r1, #0
 80064aa:	4618      	mov	r0, r3
 80064ac:	f001 fcc0 	bl	8007e30 <RCCEx_PLL2_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064b6:	e015      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	3328      	adds	r3, #40	@ 0x28
 80064be:	2102      	movs	r1, #2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 fd67 	bl	8007f94 <RCCEx_PLL3_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064cc:	e00a      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064d4:	e006      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064d6:	bf00      	nop
 80064d8:	e004      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10b      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064ec:	4ba1      	ldr	r3, [pc, #644]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80064f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064fc:	4a9d      	ldr	r2, [pc, #628]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064fe:	430b      	orrs	r3, r1
 8006500:	6593      	str	r3, [r2, #88]	@ 0x58
 8006502:	e003      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800650c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	f002 0308 	and.w	r3, r2, #8
 8006518:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800651c:	2300      	movs	r3, #0
 800651e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006522:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006526:	460b      	mov	r3, r1
 8006528:	4313      	orrs	r3, r2
 800652a:	d01e      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800652c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006538:	d10c      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653e:	3328      	adds	r3, #40	@ 0x28
 8006540:	2102      	movs	r1, #2
 8006542:	4618      	mov	r0, r3
 8006544:	f001 fd26 	bl	8007f94 <RCCEx_PLL3_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006554:	4b87      	ldr	r3, [pc, #540]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006558:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800655c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006564:	4a83      	ldr	r2, [pc, #524]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006566:	430b      	orrs	r3, r1
 8006568:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	f002 0310 	and.w	r3, r2, #16
 8006576:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800657a:	2300      	movs	r3, #0
 800657c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006580:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006584:	460b      	mov	r3, r1
 8006586:	4313      	orrs	r3, r2
 8006588:	d01e      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006596:	d10c      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659c:	3328      	adds	r3, #40	@ 0x28
 800659e:	2102      	movs	r1, #2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f001 fcf7 	bl	8007f94 <RCCEx_PLL3_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065b2:	4b70      	ldr	r3, [pc, #448]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065c2:	4a6c      	ldr	r2, [pc, #432]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80065d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065d8:	2300      	movs	r3, #0
 80065da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80065e2:	460b      	mov	r3, r1
 80065e4:	4313      	orrs	r3, r2
 80065e6:	d03e      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80065f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065f4:	d022      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80065f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065fa:	d81b      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006604:	d00b      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006606:	e015      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660c:	3308      	adds	r3, #8
 800660e:	2100      	movs	r1, #0
 8006610:	4618      	mov	r0, r3
 8006612:	f001 fc0d 	bl	8007e30 <RCCEx_PLL2_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800661c:	e00f      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006622:	3328      	adds	r3, #40	@ 0x28
 8006624:	2102      	movs	r1, #2
 8006626:	4618      	mov	r0, r3
 8006628:	f001 fcb4 	bl	8007f94 <RCCEx_PLL3_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006632:	e004      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800663a:	e000      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800663c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800663e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006646:	4b4b      	ldr	r3, [pc, #300]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800664e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006652:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006656:	4a47      	ldr	r2, [pc, #284]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006658:	430b      	orrs	r3, r1
 800665a:	6593      	str	r3, [r2, #88]	@ 0x58
 800665c:	e003      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006672:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006674:	2300      	movs	r3, #0
 8006676:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006678:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800667c:	460b      	mov	r3, r1
 800667e:	4313      	orrs	r3, r2
 8006680:	d03b      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800668e:	d01f      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006690:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006694:	d818      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800669a:	d003      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800669c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066a0:	d007      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80066a2:	e011      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a4:	4b33      	ldr	r3, [pc, #204]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	4a32      	ldr	r2, [pc, #200]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80066b0:	e00f      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b6:	3328      	adds	r3, #40	@ 0x28
 80066b8:	2101      	movs	r1, #1
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 fc6a 	bl	8007f94 <RCCEx_PLL3_Config>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80066c6:	e004      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066ce:	e000      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80066d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066da:	4b26      	ldr	r3, [pc, #152]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ea:	4a22      	ldr	r2, [pc, #136]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ec:	430b      	orrs	r3, r1
 80066ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80066f0:	e003      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006706:	673b      	str	r3, [r7, #112]	@ 0x70
 8006708:	2300      	movs	r3, #0
 800670a:	677b      	str	r3, [r7, #116]	@ 0x74
 800670c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006710:	460b      	mov	r3, r1
 8006712:	4313      	orrs	r3, r2
 8006714:	d034      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006724:	d007      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006726:	e011      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006728:	4b12      	ldr	r3, [pc, #72]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800672a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672c:	4a11      	ldr	r2, [pc, #68]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800672e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006734:	e00e      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673a:	3308      	adds	r3, #8
 800673c:	2102      	movs	r1, #2
 800673e:	4618      	mov	r0, r3
 8006740:	f001 fb76 	bl	8007e30 <RCCEx_PLL2_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800674a:	e003      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10d      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800675c:	4b05      	ldr	r3, [pc, #20]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800675e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006760:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800676a:	4a02      	ldr	r2, [pc, #8]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800676c:	430b      	orrs	r3, r1
 800676e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006770:	e006      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006772:	bf00      	nop
 8006774:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800678c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800678e:	2300      	movs	r3, #0
 8006790:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006792:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006796:	460b      	mov	r3, r1
 8006798:	4313      	orrs	r3, r2
 800679a:	d00c      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	3328      	adds	r3, #40	@ 0x28
 80067a2:	2102      	movs	r1, #2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 fbf5 	bl	8007f94 <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80067c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80067c4:	2300      	movs	r3, #0
 80067c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80067c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80067cc:	460b      	mov	r3, r1
 80067ce:	4313      	orrs	r3, r2
 80067d0:	d038      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80067d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067de:	d018      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80067e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067e4:	d811      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ea:	d014      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80067ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f0:	d80b      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d011      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80067f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067fa:	d106      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067fc:	4bc3      	ldr	r3, [pc, #780]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	4ac2      	ldr	r2, [pc, #776]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006808:	e008      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006810:	e004      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006812:	bf00      	nop
 8006814:	e002      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800681a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10b      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006824:	4bb9      	ldr	r3, [pc, #740]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006828:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006834:	4ab5      	ldr	r2, [pc, #724]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006836:	430b      	orrs	r3, r1
 8006838:	6553      	str	r3, [r2, #84]	@ 0x54
 800683a:	e003      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006840:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006850:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006852:	2300      	movs	r3, #0
 8006854:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006856:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800685a:	460b      	mov	r3, r1
 800685c:	4313      	orrs	r3, r2
 800685e:	d009      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006860:	4baa      	ldr	r3, [pc, #680]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006864:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800686e:	4aa7      	ldr	r2, [pc, #668]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006870:	430b      	orrs	r3, r1
 8006872:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006880:	653b      	str	r3, [r7, #80]	@ 0x50
 8006882:	2300      	movs	r3, #0
 8006884:	657b      	str	r3, [r7, #84]	@ 0x54
 8006886:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800688a:	460b      	mov	r3, r1
 800688c:	4313      	orrs	r3, r2
 800688e:	d00a      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006890:	4b9e      	ldr	r3, [pc, #632]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068a0:	4a9a      	ldr	r2, [pc, #616]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80068b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068b4:	2300      	movs	r3, #0
 80068b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80068bc:	460b      	mov	r3, r1
 80068be:	4313      	orrs	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068c2:	4b92      	ldr	r3, [pc, #584]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d0:	4a8e      	ldr	r2, [pc, #568]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068d2:	430b      	orrs	r3, r1
 80068d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80068e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80068e4:	2300      	movs	r3, #0
 80068e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80068e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80068ec:	460b      	mov	r3, r1
 80068ee:	4313      	orrs	r3, r2
 80068f0:	d00e      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068f2:	4b86      	ldr	r3, [pc, #536]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	4a85      	ldr	r2, [pc, #532]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068fc:	6113      	str	r3, [r2, #16]
 80068fe:	4b83      	ldr	r3, [pc, #524]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006900:	6919      	ldr	r1, [r3, #16]
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006906:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800690a:	4a80      	ldr	r2, [pc, #512]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800690c:	430b      	orrs	r3, r1
 800690e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800691c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800691e:	2300      	movs	r3, #0
 8006920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006922:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006926:	460b      	mov	r3, r1
 8006928:	4313      	orrs	r3, r2
 800692a:	d009      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800692c:	4b77      	ldr	r3, [pc, #476]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800692e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006930:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693a:	4a74      	ldr	r2, [pc, #464]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800693c:	430b      	orrs	r3, r1
 800693e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800694c:	633b      	str	r3, [r7, #48]	@ 0x30
 800694e:	2300      	movs	r3, #0
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
 8006952:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006956:	460b      	mov	r3, r1
 8006958:	4313      	orrs	r3, r2
 800695a:	d00a      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800695c:	4b6b      	ldr	r3, [pc, #428]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800695e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006960:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800696c:	4a67      	ldr	r2, [pc, #412]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800696e:	430b      	orrs	r3, r1
 8006970:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	2100      	movs	r1, #0
 800697c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006984:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006988:	460b      	mov	r3, r1
 800698a:	4313      	orrs	r3, r2
 800698c:	d011      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006992:	3308      	adds	r3, #8
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f001 fa4a 	bl	8007e30 <RCCEx_PLL2_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	2100      	movs	r1, #0
 80069bc:	6239      	str	r1, [r7, #32]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80069c8:	460b      	mov	r3, r1
 80069ca:	4313      	orrs	r3, r2
 80069cc:	d011      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d2:	3308      	adds	r3, #8
 80069d4:	2101      	movs	r1, #1
 80069d6:	4618      	mov	r0, r3
 80069d8:	f001 fa2a 	bl	8007e30 <RCCEx_PLL2_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	2100      	movs	r1, #0
 80069fc:	61b9      	str	r1, [r7, #24]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	61fb      	str	r3, [r7, #28]
 8006a04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	d011      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a12:	3308      	adds	r3, #8
 8006a14:	2102      	movs	r1, #2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 fa0a 	bl	8007e30 <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	6139      	str	r1, [r7, #16]
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	d011      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a52:	3328      	adds	r3, #40	@ 0x28
 8006a54:	2100      	movs	r1, #0
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 fa9c 	bl	8007f94 <RCCEx_PLL3_Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	d011      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a92:	3328      	adds	r3, #40	@ 0x28
 8006a94:	2101      	movs	r1, #1
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 fa7c 	bl	8007f94 <RCCEx_PLL3_Config>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	2100      	movs	r1, #0
 8006abc:	6039      	str	r1, [r7, #0]
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	607b      	str	r3, [r7, #4]
 8006ac4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4313      	orrs	r3, r2
 8006acc:	d011      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad2:	3328      	adds	r3, #40	@ 0x28
 8006ad4:	2102      	movs	r1, #2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 fa5c 	bl	8007f94 <RCCEx_PLL3_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006af2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e000      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006b06:	46bd      	mov	sp, r7
 8006b08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b0c:	58024400 	.word	0x58024400

08006b10 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b090      	sub	sp, #64	@ 0x40
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b1e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006b22:	430b      	orrs	r3, r1
 8006b24:	f040 8094 	bne.w	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006b28:	4b9e      	ldr	r3, [pc, #632]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	f200 8087 	bhi.w	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b55 	.word	0x08006b55
 8006b44:	08006b7d 	.word	0x08006b7d
 8006b48:	08006ba5 	.word	0x08006ba5
 8006b4c:	08006c41 	.word	0x08006c41
 8006b50:	08006bcd 	.word	0x08006bcd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b54:	4b93      	ldr	r3, [pc, #588]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b60:	d108      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 f810 	bl	8007b8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b70:	f000 bd45 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b78:	f000 bd41 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b7c:	4b89      	ldr	r3, [pc, #548]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b88:	d108      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b8a:	f107 0318 	add.w	r3, r7, #24
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fd54 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b98:	f000 bd31 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba0:	f000 bd2d 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ba4:	4b7f      	ldr	r3, [pc, #508]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bb0:	d108      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bb2:	f107 030c 	add.w	r3, r7, #12
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fe94 	bl	80078e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bc0:	f000 bd1d 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bc8:	f000 bd19 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bcc:	4b75      	ldr	r3, [pc, #468]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006bd4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bd6:	4b73      	ldr	r3, [pc, #460]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d10c      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d109      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006be8:	4b6e      	ldr	r3, [pc, #440]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	08db      	lsrs	r3, r3, #3
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	4a6d      	ldr	r2, [pc, #436]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bfa:	e01f      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bfc:	4b69      	ldr	r3, [pc, #420]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c08:	d106      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c10:	d102      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c12:	4b66      	ldr	r3, [pc, #408]	@ (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c16:	e011      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c18:	4b62      	ldr	r3, [pc, #392]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c24:	d106      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c2c:	d102      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c2e:	4b60      	ldr	r3, [pc, #384]	@ (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c32:	e003      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c38:	f000 bce1 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c3c:	f000 bcdf 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c40:	4b5c      	ldr	r3, [pc, #368]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c44:	f000 bcdb 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c4c:	f000 bcd7 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c54:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	f040 80ad 	bne.w	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006c5e:	4b51      	ldr	r3, [pc, #324]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c62:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006c66:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c6e:	d056      	beq.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c76:	f200 8090 	bhi.w	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c7e:	f000 8088 	beq.w	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c86:	f200 8088 	bhi.w	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	2b80      	cmp	r3, #128	@ 0x80
 8006c8e:	d032      	beq.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c92:	2b80      	cmp	r3, #128	@ 0x80
 8006c94:	f200 8081 	bhi.w	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	2b40      	cmp	r3, #64	@ 0x40
 8006ca2:	d014      	beq.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006ca4:	e079      	b.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cb2:	d108      	bne.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 ff67 	bl	8007b8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cc2:	f000 bc9c 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cca:	f000 bc98 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cce:	4b35      	ldr	r3, [pc, #212]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cda:	d108      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cdc:	f107 0318 	add.w	r3, r7, #24
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fcab 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cea:	f000 bc88 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf2:	f000 bc84 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d02:	d108      	bne.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d04:	f107 030c 	add.w	r3, r7, #12
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fdeb 	bl	80078e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d12:	f000 bc74 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d1a:	f000 bc70 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d1e:	4b21      	ldr	r3, [pc, #132]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d26:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d28:	4b1e      	ldr	r3, [pc, #120]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d10c      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	08db      	lsrs	r3, r3, #3
 8006d40:	f003 0303 	and.w	r3, r3, #3
 8006d44:	4a18      	ldr	r2, [pc, #96]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d46:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d4c:	e01f      	b.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d4e:	4b15      	ldr	r3, [pc, #84]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d5a:	d106      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d62:	d102      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d64:	4b11      	ldr	r3, [pc, #68]	@ (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d68:	e011      	b.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d76:	d106      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d7e:	d102      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d80:	4b0b      	ldr	r3, [pc, #44]	@ (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d84:	e003      	b.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d8a:	f000 bc38 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d8e:	f000 bc36 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d92:	4b08      	ldr	r3, [pc, #32]	@ (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d96:	f000 bc32 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d9e:	f000 bc2e 	b.w	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006da2:	bf00      	nop
 8006da4:	58024400 	.word	0x58024400
 8006da8:	03d09000 	.word	0x03d09000
 8006dac:	003d0900 	.word	0x003d0900
 8006db0:	017d7840 	.word	0x017d7840
 8006db4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dbc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	f040 809c 	bne.w	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006dc6:	4b9e      	ldr	r3, [pc, #632]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dca:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006dce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006dd6:	d054      	beq.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006dde:	f200 808b 	bhi.w	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006de8:	f000 8083 	beq.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006df2:	f200 8081 	bhi.w	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dfc:	d02f      	beq.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e04:	d878      	bhi.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e12:	d012      	beq.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006e14:	e070      	b.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e16:	4b8a      	ldr	r3, [pc, #552]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e22:	d107      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 feaf 	bl	8007b8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e32:	e3e4      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e38:	e3e1      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e3a:	4b81      	ldr	r3, [pc, #516]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e46:	d107      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e48:	f107 0318 	add.w	r3, r7, #24
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fbf5 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e56:	e3d2      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e5c:	e3cf      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e5e:	4b78      	ldr	r3, [pc, #480]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e6a:	d107      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e6c:	f107 030c 	add.w	r3, r7, #12
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fd37 	bl	80078e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e7a:	e3c0      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e80:	e3bd      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e82:	4b6f      	ldr	r3, [pc, #444]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e8c:	4b6c      	ldr	r3, [pc, #432]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d10c      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e9e:	4b68      	ldr	r3, [pc, #416]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	08db      	lsrs	r3, r3, #3
 8006ea4:	f003 0303 	and.w	r3, r3, #3
 8006ea8:	4a66      	ldr	r2, [pc, #408]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8006eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb0:	e01e      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eb2:	4b63      	ldr	r3, [pc, #396]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ebe:	d106      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ec6:	d102      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ec8:	4b5f      	ldr	r3, [pc, #380]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ecc:	e010      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ece:	4b5c      	ldr	r3, [pc, #368]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eda:	d106      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ee2:	d102      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ee4:	4b59      	ldr	r3, [pc, #356]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ee8:	e002      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006eee:	e386      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ef0:	e385      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ef2:	4b57      	ldr	r3, [pc, #348]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef6:	e382      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006efc:	e37f      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f02:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006f06:	430b      	orrs	r3, r1
 8006f08:	f040 80a7 	bne.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006f0c:	4b4c      	ldr	r3, [pc, #304]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f10:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006f14:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f1c:	d055      	beq.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f24:	f200 8096 	bhi.w	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f2e:	f000 8084 	beq.w	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f38:	f200 808c 	bhi.w	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f42:	d030      	beq.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f4a:	f200 8083 	bhi.w	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f5a:	d012      	beq.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006f5c:	e07a      	b.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f5e:	4b38      	ldr	r3, [pc, #224]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f6a:	d107      	bne.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fe0b 	bl	8007b8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f7a:	e340      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f80:	e33d      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f82:	4b2f      	ldr	r3, [pc, #188]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f8e:	d107      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f90:	f107 0318 	add.w	r3, r7, #24
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fb51 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f9e:	e32e      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fa4:	e32b      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fa6:	4b26      	ldr	r3, [pc, #152]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fb2:	d107      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fb4:	f107 030c 	add.w	r3, r7, #12
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fc93 	bl	80078e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc2:	e31c      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc8:	e319      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fca:	4b1d      	ldr	r3, [pc, #116]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fd2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d10c      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fe6:	4b16      	ldr	r3, [pc, #88]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	08db      	lsrs	r3, r3, #3
 8006fec:	f003 0303 	and.w	r3, r3, #3
 8006ff0:	4a14      	ldr	r2, [pc, #80]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ff8:	e01e      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ffa:	4b11      	ldr	r3, [pc, #68]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007006:	d106      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800700e:	d102      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007010:	4b0d      	ldr	r3, [pc, #52]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007014:	e010      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007016:	4b0a      	ldr	r3, [pc, #40]	@ (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800701e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007022:	d106      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800702a:	d102      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800702c:	4b07      	ldr	r3, [pc, #28]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007030:	e002      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007036:	e2e2      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007038:	e2e1      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800703a:	4b05      	ldr	r3, [pc, #20]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800703c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703e:	e2de      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007040:	58024400 	.word	0x58024400
 8007044:	03d09000 	.word	0x03d09000
 8007048:	003d0900 	.word	0x003d0900
 800704c:	017d7840 	.word	0x017d7840
 8007050:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007058:	e2d1      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800705a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800705e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007062:	430b      	orrs	r3, r1
 8007064:	f040 809c 	bne.w	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007068:	4b93      	ldr	r3, [pc, #588]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800706a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800706c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007070:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007078:	d054      	beq.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800707a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007080:	f200 808b 	bhi.w	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007086:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800708a:	f000 8083 	beq.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007094:	f200 8081 	bhi.w	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800709e:	d02f      	beq.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80070a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070a6:	d878      	bhi.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80070a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80070ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070b4:	d012      	beq.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80070b6:	e070      	b.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070b8:	4b7f      	ldr	r3, [pc, #508]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070c4:	d107      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fd5e 	bl	8007b8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d4:	e293      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070da:	e290      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070dc:	4b76      	ldr	r3, [pc, #472]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070e8:	d107      	bne.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ea:	f107 0318 	add.w	r3, r7, #24
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 faa4 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f8:	e281      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070fe:	e27e      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007100:	4b6d      	ldr	r3, [pc, #436]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800710c:	d107      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800710e:	f107 030c 	add.w	r3, r7, #12
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fbe6 	bl	80078e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800711c:	e26f      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007122:	e26c      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007124:	4b64      	ldr	r3, [pc, #400]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007128:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800712c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800712e:	4b62      	ldr	r3, [pc, #392]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b04      	cmp	r3, #4
 8007138:	d10c      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800713a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800713c:	2b00      	cmp	r3, #0
 800713e:	d109      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007140:	4b5d      	ldr	r3, [pc, #372]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	08db      	lsrs	r3, r3, #3
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	4a5c      	ldr	r2, [pc, #368]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
 8007150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007152:	e01e      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007154:	4b58      	ldr	r3, [pc, #352]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800715c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007160:	d106      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007164:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007168:	d102      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800716a:	4b55      	ldr	r3, [pc, #340]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800716c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800716e:	e010      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007170:	4b51      	ldr	r3, [pc, #324]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800717c:	d106      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800717e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007184:	d102      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007186:	4b4f      	ldr	r3, [pc, #316]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800718a:	e002      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007190:	e235      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007192:	e234      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007194:	4b4c      	ldr	r3, [pc, #304]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007198:	e231      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800719e:	e22e      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80071a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071a4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80071a8:	430b      	orrs	r3, r1
 80071aa:	f040 808f 	bne.w	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80071ae:	4b42      	ldr	r3, [pc, #264]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80071b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80071b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071be:	d06b      	beq.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80071c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071c6:	d874      	bhi.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80071c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071ce:	d056      	beq.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80071d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071d6:	d86c      	bhi.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80071d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071de:	d03b      	beq.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80071e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071e6:	d864      	bhi.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80071e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071ee:	d021      	beq.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80071f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071f6:	d85c      	bhi.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80071f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d004      	beq.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80071fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007204:	d004      	beq.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007206:	e054      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007208:	f7fe fa4c 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 800720c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800720e:	e1f6      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007210:	4b29      	ldr	r3, [pc, #164]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007218:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800721c:	d107      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800721e:	f107 0318 	add.w	r3, r7, #24
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fa0a 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800722c:	e1e7      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007232:	e1e4      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007234:	4b20      	ldr	r3, [pc, #128]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800723c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007240:	d107      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007242:	f107 030c 	add.w	r3, r7, #12
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fb4c 	bl	80078e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007250:	e1d5      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007256:	e1d2      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007258:	4b17      	ldr	r3, [pc, #92]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b04      	cmp	r3, #4
 8007262:	d109      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007264:	4b14      	ldr	r3, [pc, #80]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	08db      	lsrs	r3, r3, #3
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	4a13      	ldr	r2, [pc, #76]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007270:	fa22 f303 	lsr.w	r3, r2, r3
 8007274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007276:	e1c2      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800727c:	e1bf      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800727e:	4b0e      	ldr	r3, [pc, #56]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800728a:	d102      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800728c:	4b0c      	ldr	r3, [pc, #48]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007290:	e1b5      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007296:	e1b2      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007298:	4b07      	ldr	r3, [pc, #28]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072a4:	d102      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80072a6:	4b07      	ldr	r3, [pc, #28]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80072a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072aa:	e1a8      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b0:	e1a5      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b6:	e1a2      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072b8:	58024400 	.word	0x58024400
 80072bc:	03d09000 	.word	0x03d09000
 80072c0:	003d0900 	.word	0x003d0900
 80072c4:	017d7840 	.word	0x017d7840
 80072c8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80072cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80072d4:	430b      	orrs	r3, r1
 80072d6:	d173      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80072d8:	4b9c      	ldr	r3, [pc, #624]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80072e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072e8:	d02f      	beq.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80072ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072f0:	d863      	bhi.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80072f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d004      	beq.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072fe:	d012      	beq.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007300:	e05b      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007302:	4b92      	ldr	r3, [pc, #584]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800730a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800730e:	d107      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007310:	f107 0318 	add.w	r3, r7, #24
 8007314:	4618      	mov	r0, r3
 8007316:	f000 f991 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800731e:	e16e      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007324:	e16b      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007326:	4b89      	ldr	r3, [pc, #548]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800732e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007332:	d107      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007334:	f107 030c 	add.w	r3, r7, #12
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fad3 	bl	80078e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007342:	e15c      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007348:	e159      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800734a:	4b80      	ldr	r3, [pc, #512]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800734c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007352:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007354:	4b7d      	ldr	r3, [pc, #500]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b04      	cmp	r3, #4
 800735e:	d10c      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007366:	4b79      	ldr	r3, [pc, #484]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	08db      	lsrs	r3, r3, #3
 800736c:	f003 0303 	and.w	r3, r3, #3
 8007370:	4a77      	ldr	r2, [pc, #476]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007372:	fa22 f303 	lsr.w	r3, r2, r3
 8007376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007378:	e01e      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800737a:	4b74      	ldr	r3, [pc, #464]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007386:	d106      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800738a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800738e:	d102      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007390:	4b70      	ldr	r3, [pc, #448]	@ (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007394:	e010      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007396:	4b6d      	ldr	r3, [pc, #436]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800739e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073a2:	d106      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80073a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073aa:	d102      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073ac:	4b6a      	ldr	r3, [pc, #424]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80073ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073b0:	e002      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80073b6:	e122      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073b8:	e121      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073be:	e11e      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80073c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80073c8:	430b      	orrs	r3, r1
 80073ca:	d133      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80073cc:	4b5f      	ldr	r3, [pc, #380]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80073d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e2:	d012      	beq.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80073e4:	e023      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073e6:	4b59      	ldr	r3, [pc, #356]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073f2:	d107      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 fbc7 	bl	8007b8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007402:	e0fc      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007404:	2300      	movs	r3, #0
 8007406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007408:	e0f9      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800740a:	4b50      	ldr	r3, [pc, #320]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007412:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007416:	d107      	bne.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007418:	f107 0318 	add.w	r3, r7, #24
 800741c:	4618      	mov	r0, r3
 800741e:	f000 f90d 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007426:	e0ea      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800742c:	e0e7      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007432:	e0e4      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007438:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800743c:	430b      	orrs	r3, r1
 800743e:	f040 808d 	bne.w	800755c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007442:	4b42      	ldr	r3, [pc, #264]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007446:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800744a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800744c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007452:	d06b      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800745a:	d874      	bhi.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800745c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007462:	d056      	beq.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800746a:	d86c      	bhi.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007472:	d03b      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800747a:	d864      	bhi.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007482:	d021      	beq.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800748a:	d85c      	bhi.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800748c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748e:	2b00      	cmp	r3, #0
 8007490:	d004      	beq.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007498:	d004      	beq.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800749a:	e054      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800749c:	f000 f8b8 	bl	8007610 <HAL_RCCEx_GetD3PCLK1Freq>
 80074a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074a2:	e0ac      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074a4:	4b29      	ldr	r3, [pc, #164]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074b0:	d107      	bne.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074b2:	f107 0318 	add.w	r3, r7, #24
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f8c0 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074c0:	e09d      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074c2:	2300      	movs	r3, #0
 80074c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c6:	e09a      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074c8:	4b20      	ldr	r3, [pc, #128]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074d4:	d107      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d6:	f107 030c 	add.w	r3, r7, #12
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fa02 	bl	80078e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074e4:	e08b      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ea:	e088      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074ec:	4b17      	ldr	r3, [pc, #92]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d109      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074f8:	4b14      	ldr	r3, [pc, #80]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	08db      	lsrs	r3, r3, #3
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	4a13      	ldr	r2, [pc, #76]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
 8007508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800750a:	e078      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007510:	e075      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007512:	4b0e      	ldr	r3, [pc, #56]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800751a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800751e:	d102      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007520:	4b0c      	ldr	r3, [pc, #48]	@ (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007524:	e06b      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800752a:	e068      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800752c:	4b07      	ldr	r3, [pc, #28]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007538:	d102      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800753a:	4b07      	ldr	r3, [pc, #28]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800753c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800753e:	e05e      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007544:	e05b      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800754a:	e058      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800754c:	58024400 	.word	0x58024400
 8007550:	03d09000 	.word	0x03d09000
 8007554:	003d0900 	.word	0x003d0900
 8007558:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800755c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007560:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007564:	430b      	orrs	r3, r1
 8007566:	d148      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007568:	4b27      	ldr	r3, [pc, #156]	@ (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800756a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800756c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007570:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007578:	d02a      	beq.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800757a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007580:	d838      	bhi.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007584:	2b00      	cmp	r3, #0
 8007586:	d004      	beq.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800758e:	d00d      	beq.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007590:	e030      	b.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007592:	4b1d      	ldr	r3, [pc, #116]	@ (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800759a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800759e:	d102      	bne.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80075a0:	4b1a      	ldr	r3, [pc, #104]	@ (800760c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80075a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075a4:	e02b      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075aa:	e028      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075ac:	4b16      	ldr	r3, [pc, #88]	@ (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075b8:	d107      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fae4 	bl	8007b8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075c8:	e019      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ce:	e016      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075dc:	d107      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075de:	f107 0318 	add.w	r3, r7, #24
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 f82a 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ec:	e007      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075f2:	e004      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075f8:	e001      	b.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80075fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007600:	4618      	mov	r0, r3
 8007602:	3740      	adds	r7, #64	@ 0x40
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	58024400 	.word	0x58024400
 800760c:	017d7840 	.word	0x017d7840

08007610 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007614:	f7fe f816 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 8007618:	4602      	mov	r2, r0
 800761a:	4b06      	ldr	r3, [pc, #24]	@ (8007634 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	091b      	lsrs	r3, r3, #4
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	4904      	ldr	r1, [pc, #16]	@ (8007638 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007626:	5ccb      	ldrb	r3, [r1, r3]
 8007628:	f003 031f 	and.w	r3, r3, #31
 800762c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007630:	4618      	mov	r0, r3
 8007632:	bd80      	pop	{r7, pc}
 8007634:	58024400 	.word	0x58024400
 8007638:	0800f800 	.word	0x0800f800

0800763c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800763c:	b480      	push	{r7}
 800763e:	b089      	sub	sp, #36	@ 0x24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007644:	4ba1      	ldr	r3, [pc, #644]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	f003 0303 	and.w	r3, r3, #3
 800764c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800764e:	4b9f      	ldr	r3, [pc, #636]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007652:	0b1b      	lsrs	r3, r3, #12
 8007654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007658:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800765a:	4b9c      	ldr	r3, [pc, #624]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800765c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765e:	091b      	lsrs	r3, r3, #4
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007666:	4b99      	ldr	r3, [pc, #612]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766a:	08db      	lsrs	r3, r3, #3
 800766c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	fb02 f303 	mul.w	r3, r2, r3
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8111 	beq.w	80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b02      	cmp	r3, #2
 800768e:	f000 8083 	beq.w	8007798 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	2b02      	cmp	r3, #2
 8007696:	f200 80a1 	bhi.w	80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d056      	beq.n	8007754 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80076a6:	e099      	b.n	80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076a8:	4b88      	ldr	r3, [pc, #544]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d02d      	beq.n	8007710 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076b4:	4b85      	ldr	r3, [pc, #532]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	08db      	lsrs	r3, r3, #3
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	4a84      	ldr	r2, [pc, #528]	@ (80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80076c0:	fa22 f303 	lsr.w	r3, r2, r3
 80076c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076de:	4b7b      	ldr	r3, [pc, #492]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80078d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800770e:	e087      	b.n	8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80078d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800771e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007722:	4b6a      	ldr	r3, [pc, #424]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007732:	ed97 6a03 	vldr	s12, [r7, #12]
 8007736:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80078d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800773a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800774a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007752:	e065      	b.n	8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80078dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007766:	4b59      	ldr	r3, [pc, #356]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007776:	ed97 6a03 	vldr	s12, [r7, #12]
 800777a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80078d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800777e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800778a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007796:	e043      	b.n	8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80078e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80077a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077aa:	4b48      	ldr	r3, [pc, #288]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80077be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80078d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077da:	e021      	b.n	8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80078dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ee:	4b37      	ldr	r3, [pc, #220]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007802:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80078d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800780a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800781a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800781e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007820:	4b2a      	ldr	r3, [pc, #168]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007824:	0a5b      	lsrs	r3, r3, #9
 8007826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800782a:	ee07 3a90 	vmov	s15, r3
 800782e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007832:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800783a:	edd7 6a07 	vldr	s13, [r7, #28]
 800783e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007846:	ee17 2a90 	vmov	r2, s15
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800784e:	4b1f      	ldr	r3, [pc, #124]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007858:	ee07 3a90 	vmov	s15, r3
 800785c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007860:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007864:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007868:	edd7 6a07 	vldr	s13, [r7, #28]
 800786c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007874:	ee17 2a90 	vmov	r2, s15
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800787c:	4b13      	ldr	r3, [pc, #76]	@ (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800787e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007880:	0e1b      	lsrs	r3, r3, #24
 8007882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007892:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007896:	edd7 6a07 	vldr	s13, [r7, #28]
 800789a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800789e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078a2:	ee17 2a90 	vmov	r2, s15
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80078aa:	e008      	b.n	80078be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	609a      	str	r2, [r3, #8]
}
 80078be:	bf00      	nop
 80078c0:	3724      	adds	r7, #36	@ 0x24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	58024400 	.word	0x58024400
 80078d0:	03d09000 	.word	0x03d09000
 80078d4:	46000000 	.word	0x46000000
 80078d8:	4c742400 	.word	0x4c742400
 80078dc:	4a742400 	.word	0x4a742400
 80078e0:	4bbebc20 	.word	0x4bbebc20

080078e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b089      	sub	sp, #36	@ 0x24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078ec:	4ba1      	ldr	r3, [pc, #644]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80078f6:	4b9f      	ldr	r3, [pc, #636]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fa:	0d1b      	lsrs	r3, r3, #20
 80078fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007900:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007902:	4b9c      	ldr	r3, [pc, #624]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007906:	0a1b      	lsrs	r3, r3, #8
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800790e:	4b99      	ldr	r3, [pc, #612]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007912:	08db      	lsrs	r3, r3, #3
 8007914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	fb02 f303 	mul.w	r3, r2, r3
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007926:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 8111 	beq.w	8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	2b02      	cmp	r3, #2
 8007936:	f000 8083 	beq.w	8007a40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	2b02      	cmp	r3, #2
 800793e:	f200 80a1 	bhi.w	8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d056      	beq.n	80079fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800794e:	e099      	b.n	8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007950:	4b88      	ldr	r3, [pc, #544]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0320 	and.w	r3, r3, #32
 8007958:	2b00      	cmp	r3, #0
 800795a:	d02d      	beq.n	80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800795c:	4b85      	ldr	r3, [pc, #532]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	08db      	lsrs	r3, r3, #3
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	4a84      	ldr	r2, [pc, #528]	@ (8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007968:	fa22 f303 	lsr.w	r3, r2, r3
 800796c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	ee07 3a90 	vmov	s15, r3
 8007974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007986:	4b7b      	ldr	r3, [pc, #492]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007996:	ed97 6a03 	vldr	s12, [r7, #12]
 800799a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800799e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80079b6:	e087      	b.n	8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	ee07 3a90 	vmov	s15, r3
 80079be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80079c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ca:	4b6a      	ldr	r3, [pc, #424]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079da:	ed97 6a03 	vldr	s12, [r7, #12]
 80079de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079fa:	e065      	b.n	8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	ee07 3a90 	vmov	s15, r3
 8007a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a0e:	4b59      	ldr	r3, [pc, #356]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a3e:	e043      	b.n	8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	ee07 3a90 	vmov	s15, r3
 8007a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a52:	4b48      	ldr	r3, [pc, #288]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a82:	e021      	b.n	8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a96:	4b37      	ldr	r3, [pc, #220]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9e:	ee07 3a90 	vmov	s15, r3
 8007aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ac6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007acc:	0a5b      	lsrs	r3, r3, #9
 8007ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ad2:	ee07 3a90 	vmov	s15, r3
 8007ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aee:	ee17 2a90 	vmov	r2, s15
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007af6:	4b1f      	ldr	r3, [pc, #124]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	0c1b      	lsrs	r3, r3, #16
 8007afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b00:	ee07 3a90 	vmov	s15, r3
 8007b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b1c:	ee17 2a90 	vmov	r2, s15
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007b24:	4b13      	ldr	r3, [pc, #76]	@ (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b28:	0e1b      	lsrs	r3, r3, #24
 8007b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b2e:	ee07 3a90 	vmov	s15, r3
 8007b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b4a:	ee17 2a90 	vmov	r2, s15
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007b52:	e008      	b.n	8007b66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	609a      	str	r2, [r3, #8]
}
 8007b66:	bf00      	nop
 8007b68:	3724      	adds	r7, #36	@ 0x24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	58024400 	.word	0x58024400
 8007b78:	03d09000 	.word	0x03d09000
 8007b7c:	46000000 	.word	0x46000000
 8007b80:	4c742400 	.word	0x4c742400
 8007b84:	4a742400 	.word	0x4a742400
 8007b88:	4bbebc20 	.word	0x4bbebc20

08007b8c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b089      	sub	sp, #36	@ 0x24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b94:	4ba0      	ldr	r3, [pc, #640]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007b9e:	4b9e      	ldr	r3, [pc, #632]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba2:	091b      	lsrs	r3, r3, #4
 8007ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ba8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007baa:	4b9b      	ldr	r3, [pc, #620]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007bb4:	4b98      	ldr	r3, [pc, #608]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb8:	08db      	lsrs	r3, r3, #3
 8007bba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	fb02 f303 	mul.w	r3, r2, r3
 8007bc4:	ee07 3a90 	vmov	s15, r3
 8007bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bcc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 8111 	beq.w	8007dfa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	f000 8083 	beq.w	8007ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	f200 80a1 	bhi.w	8007d2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d056      	beq.n	8007ca2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007bf4:	e099      	b.n	8007d2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bf6:	4b88      	ldr	r3, [pc, #544]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0320 	and.w	r3, r3, #32
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d02d      	beq.n	8007c5e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c02:	4b85      	ldr	r3, [pc, #532]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	08db      	lsrs	r3, r3, #3
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	4a83      	ldr	r2, [pc, #524]	@ (8007e1c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c12:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	ee07 3a90 	vmov	s15, r3
 8007c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2c:	4b7a      	ldr	r3, [pc, #488]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c34:	ee07 3a90 	vmov	s15, r3
 8007c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c40:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007e20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c58:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c5c:	e087      	b.n	8007d6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	ee07 3a90 	vmov	s15, r3
 8007c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c68:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007e24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c70:	4b69      	ldr	r3, [pc, #420]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c84:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007e20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ca0:	e065      	b.n	8007d6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	ee07 3a90 	vmov	s15, r3
 8007ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cac:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007e28 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb4:	4b58      	ldr	r3, [pc, #352]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbc:	ee07 3a90 	vmov	s15, r3
 8007cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cc8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007e20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ce4:	e043      	b.n	8007d6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	ee07 3a90 	vmov	s15, r3
 8007cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf8:	4b47      	ldr	r3, [pc, #284]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d00:	ee07 3a90 	vmov	s15, r3
 8007d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d08:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d0c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007e20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d28:	e021      	b.n	8007d6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d34:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007e24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3c:	4b36      	ldr	r3, [pc, #216]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d44:	ee07 3a90 	vmov	s15, r3
 8007d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d50:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007e20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d6c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d72:	0a5b      	lsrs	r3, r3, #9
 8007d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d78:	ee07 3a90 	vmov	s15, r3
 8007d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d94:	ee17 2a90 	vmov	r2, s15
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da0:	0c1b      	lsrs	r3, r3, #16
 8007da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dc2:	ee17 2a90 	vmov	r2, s15
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007dca:	4b13      	ldr	r3, [pc, #76]	@ (8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dce:	0e1b      	lsrs	r3, r3, #24
 8007dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dd4:	ee07 3a90 	vmov	s15, r3
 8007dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ddc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007df0:	ee17 2a90 	vmov	r2, s15
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007df8:	e008      	b.n	8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	609a      	str	r2, [r3, #8]
}
 8007e0c:	bf00      	nop
 8007e0e:	3724      	adds	r7, #36	@ 0x24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	58024400 	.word	0x58024400
 8007e1c:	03d09000 	.word	0x03d09000
 8007e20:	46000000 	.word	0x46000000
 8007e24:	4c742400 	.word	0x4c742400
 8007e28:	4a742400 	.word	0x4a742400
 8007e2c:	4bbebc20 	.word	0x4bbebc20

08007e30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e3e:	4b53      	ldr	r3, [pc, #332]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d101      	bne.n	8007e4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e099      	b.n	8007f82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a4e      	ldr	r2, [pc, #312]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007e54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e5a:	f7f9 fd4d 	bl	80018f8 <HAL_GetTick>
 8007e5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e60:	e008      	b.n	8007e74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e62:	f7f9 fd49 	bl	80018f8 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d901      	bls.n	8007e74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e086      	b.n	8007f82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e74:	4b45      	ldr	r3, [pc, #276]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1f0      	bne.n	8007e62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e80:	4b42      	ldr	r3, [pc, #264]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	031b      	lsls	r3, r3, #12
 8007e8e:	493f      	ldr	r1, [pc, #252]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	628b      	str	r3, [r1, #40]	@ 0x28
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	025b      	lsls	r3, r3, #9
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	041b      	lsls	r3, r3, #16
 8007eb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	061b      	lsls	r3, r3, #24
 8007ec0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ec4:	4931      	ldr	r1, [pc, #196]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007eca:	4b30      	ldr	r3, [pc, #192]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ece:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	492d      	ldr	r1, [pc, #180]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007edc:	4b2b      	ldr	r3, [pc, #172]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	f023 0220 	bic.w	r2, r3, #32
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	4928      	ldr	r1, [pc, #160]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007eee:	4b27      	ldr	r3, [pc, #156]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef2:	4a26      	ldr	r2, [pc, #152]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007ef4:	f023 0310 	bic.w	r3, r3, #16
 8007ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007efa:	4b24      	ldr	r3, [pc, #144]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007efc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007efe:	4b24      	ldr	r3, [pc, #144]	@ (8007f90 <RCCEx_PLL2_Config+0x160>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	69d2      	ldr	r2, [r2, #28]
 8007f06:	00d2      	lsls	r2, r2, #3
 8007f08:	4920      	ldr	r1, [pc, #128]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f12:	4a1e      	ldr	r2, [pc, #120]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f14:	f043 0310 	orr.w	r3, r3, #16
 8007f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d106      	bne.n	8007f2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007f20:	4b1a      	ldr	r3, [pc, #104]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f24:	4a19      	ldr	r2, [pc, #100]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f2c:	e00f      	b.n	8007f4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d106      	bne.n	8007f42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f34:	4b15      	ldr	r3, [pc, #84]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f38:	4a14      	ldr	r2, [pc, #80]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f40:	e005      	b.n	8007f4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007f42:	4b12      	ldr	r3, [pc, #72]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f46:	4a11      	ldr	r2, [pc, #68]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a0e      	ldr	r2, [pc, #56]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f5a:	f7f9 fccd 	bl	80018f8 <HAL_GetTick>
 8007f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f60:	e008      	b.n	8007f74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f62:	f7f9 fcc9 	bl	80018f8 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d901      	bls.n	8007f74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e006      	b.n	8007f82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f74:	4b05      	ldr	r3, [pc, #20]	@ (8007f8c <RCCEx_PLL2_Config+0x15c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0f0      	beq.n	8007f62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	58024400 	.word	0x58024400
 8007f90:	ffff0007 	.word	0xffff0007

08007f94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fa2:	4b53      	ldr	r3, [pc, #332]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d101      	bne.n	8007fb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e099      	b.n	80080e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a4e      	ldr	r2, [pc, #312]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8007fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fbe:	f7f9 fc9b 	bl	80018f8 <HAL_GetTick>
 8007fc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fc4:	e008      	b.n	8007fd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007fc6:	f7f9 fc97 	bl	80018f8 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d901      	bls.n	8007fd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e086      	b.n	80080e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fd8:	4b45      	ldr	r3, [pc, #276]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1f0      	bne.n	8007fc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007fe4:	4b42      	ldr	r3, [pc, #264]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	051b      	lsls	r3, r3, #20
 8007ff2:	493f      	ldr	r1, [pc, #252]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	3b01      	subs	r3, #1
 8008008:	025b      	lsls	r3, r3, #9
 800800a:	b29b      	uxth	r3, r3
 800800c:	431a      	orrs	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	3b01      	subs	r3, #1
 8008014:	041b      	lsls	r3, r3, #16
 8008016:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	3b01      	subs	r3, #1
 8008022:	061b      	lsls	r3, r3, #24
 8008024:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008028:	4931      	ldr	r1, [pc, #196]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 800802a:	4313      	orrs	r3, r2
 800802c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800802e:	4b30      	ldr	r3, [pc, #192]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8008030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008032:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	492d      	ldr	r1, [pc, #180]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 800803c:	4313      	orrs	r3, r2
 800803e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008040:	4b2b      	ldr	r3, [pc, #172]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8008042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008044:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	4928      	ldr	r1, [pc, #160]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 800804e:	4313      	orrs	r3, r2
 8008050:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008052:	4b27      	ldr	r3, [pc, #156]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8008054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008056:	4a26      	ldr	r2, [pc, #152]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8008058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800805c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800805e:	4b24      	ldr	r3, [pc, #144]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8008060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008062:	4b24      	ldr	r3, [pc, #144]	@ (80080f4 <RCCEx_PLL3_Config+0x160>)
 8008064:	4013      	ands	r3, r2
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	69d2      	ldr	r2, [r2, #28]
 800806a:	00d2      	lsls	r2, r2, #3
 800806c:	4920      	ldr	r1, [pc, #128]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 800806e:	4313      	orrs	r3, r2
 8008070:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008072:	4b1f      	ldr	r3, [pc, #124]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8008074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008076:	4a1e      	ldr	r2, [pc, #120]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8008078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800807c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d106      	bne.n	8008092 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008084:	4b1a      	ldr	r3, [pc, #104]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	4a19      	ldr	r2, [pc, #100]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 800808a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800808e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008090:	e00f      	b.n	80080b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d106      	bne.n	80080a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008098:	4b15      	ldr	r3, [pc, #84]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 800809a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809c:	4a14      	ldr	r2, [pc, #80]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 800809e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80080a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080a4:	e005      	b.n	80080b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80080a6:	4b12      	ldr	r3, [pc, #72]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 80080a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080aa:	4a11      	ldr	r2, [pc, #68]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 80080ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80080b2:	4b0f      	ldr	r3, [pc, #60]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a0e      	ldr	r2, [pc, #56]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 80080b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080be:	f7f9 fc1b 	bl	80018f8 <HAL_GetTick>
 80080c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080c4:	e008      	b.n	80080d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080c6:	f7f9 fc17 	bl	80018f8 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d901      	bls.n	80080d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e006      	b.n	80080e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080d8:	4b05      	ldr	r3, [pc, #20]	@ (80080f0 <RCCEx_PLL3_Config+0x15c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0f0      	beq.n	80080c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	58024400 	.word	0x58024400
 80080f4:	ffff0007 	.word	0xffff0007

080080f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e042      	b.n	8008190 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008110:	2b00      	cmp	r3, #0
 8008112:	d106      	bne.n	8008122 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7f9 fa6f 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2224      	movs	r2, #36	@ 0x24
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0201 	bic.w	r2, r2, #1
 8008138:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 fa70 	bl	8009628 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fd05 	bl	8008b58 <UART_SetConfig>
 800814e:	4603      	mov	r3, r0
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e01b      	b.n	8008190 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 faef 	bl	800976c <UART_CheckIdleState>
 800818e:	4603      	mov	r3, r0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008198:	b480      	push	{r7}
 800819a:	b091      	sub	sp, #68	@ 0x44
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d178      	bne.n	80082a2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <HAL_UART_Transmit_IT+0x24>
 80081b6:	88fb      	ldrh	r3, [r7, #6]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e071      	b.n	80082a4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	88fa      	ldrh	r2, [r7, #6]
 80081ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	88fa      	ldrh	r2, [r7, #6]
 80081d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2221      	movs	r2, #33	@ 0x21
 80081e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081f4:	d12a      	bne.n	800824c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081fe:	d107      	bne.n	8008210 <HAL_UART_Transmit_IT+0x78>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d103      	bne.n	8008210 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4a29      	ldr	r2, [pc, #164]	@ (80082b0 <HAL_UART_Transmit_IT+0x118>)
 800820c:	679a      	str	r2, [r3, #120]	@ 0x78
 800820e:	e002      	b.n	8008216 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4a28      	ldr	r2, [pc, #160]	@ (80082b4 <HAL_UART_Transmit_IT+0x11c>)
 8008214:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3308      	adds	r3, #8
 800821c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800822c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3308      	adds	r3, #8
 8008234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008236:	637a      	str	r2, [r7, #52]	@ 0x34
 8008238:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800823c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e5      	bne.n	8008216 <HAL_UART_Transmit_IT+0x7e>
 800824a:	e028      	b.n	800829e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008254:	d107      	bne.n	8008266 <HAL_UART_Transmit_IT+0xce>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d103      	bne.n	8008266 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4a15      	ldr	r2, [pc, #84]	@ (80082b8 <HAL_UART_Transmit_IT+0x120>)
 8008262:	679a      	str	r2, [r3, #120]	@ 0x78
 8008264:	e002      	b.n	800826c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4a14      	ldr	r2, [pc, #80]	@ (80082bc <HAL_UART_Transmit_IT+0x124>)
 800826a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	613b      	str	r3, [r7, #16]
   return(result);
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800828a:	623b      	str	r3, [r7, #32]
 800828c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	69f9      	ldr	r1, [r7, #28]
 8008290:	6a3a      	ldr	r2, [r7, #32]
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	61bb      	str	r3, [r7, #24]
   return(result);
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e6      	bne.n	800826c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	e000      	b.n	80082a4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80082a2:	2302      	movs	r3, #2
  }
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3744      	adds	r7, #68	@ 0x44
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	08009f2b 	.word	0x08009f2b
 80082b4:	08009e4b 	.word	0x08009e4b
 80082b8:	08009d89 	.word	0x08009d89
 80082bc:	08009cd1 	.word	0x08009cd1

080082c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08a      	sub	sp, #40	@ 0x28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	d137      	bne.n	8008348 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <HAL_UART_Receive_IT+0x24>
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e030      	b.n	800834a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a18      	ldr	r2, [pc, #96]	@ (8008354 <HAL_UART_Receive_IT+0x94>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d01f      	beq.n	8008338 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d018      	beq.n	8008338 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	613b      	str	r3, [r7, #16]
   return(result);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800831a:	627b      	str	r3, [r7, #36]	@ 0x24
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	623b      	str	r3, [r7, #32]
 8008326:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	69f9      	ldr	r1, [r7, #28]
 800832a:	6a3a      	ldr	r2, [r7, #32]
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	61bb      	str	r3, [r7, #24]
   return(result);
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e6      	bne.n	8008306 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008338:	88fb      	ldrh	r3, [r7, #6]
 800833a:	461a      	mov	r2, r3
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f001 fb2c 	bl	800999c <UART_Start_Receive_IT>
 8008344:	4603      	mov	r3, r0
 8008346:	e000      	b.n	800834a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008348:	2302      	movs	r3, #2
  }
}
 800834a:	4618      	mov	r0, r3
 800834c:	3728      	adds	r7, #40	@ 0x28
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	58000c00 	.word	0x58000c00

08008358 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b0ba      	sub	sp, #232	@ 0xe8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800837e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008382:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008386:	4013      	ands	r3, r2
 8008388:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800838c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008390:	2b00      	cmp	r3, #0
 8008392:	d11b      	bne.n	80083cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008398:	f003 0320 	and.w	r3, r3, #32
 800839c:	2b00      	cmp	r3, #0
 800839e:	d015      	beq.n	80083cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083a4:	f003 0320 	and.w	r3, r3, #32
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d105      	bne.n	80083b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d009      	beq.n	80083cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8393 	beq.w	8008ae8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4798      	blx	r3
      }
      return;
 80083ca:	e38d      	b.n	8008ae8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80083cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8123 	beq.w	800861c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80083d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80083da:	4b8d      	ldr	r3, [pc, #564]	@ (8008610 <HAL_UART_IRQHandler+0x2b8>)
 80083dc:	4013      	ands	r3, r2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d106      	bne.n	80083f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80083e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80083e6:	4b8b      	ldr	r3, [pc, #556]	@ (8008614 <HAL_UART_IRQHandler+0x2bc>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 8116 	beq.w	800861c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d011      	beq.n	8008420 <HAL_UART_IRQHandler+0xc8>
 80083fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00b      	beq.n	8008420 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2201      	movs	r2, #1
 800840e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008416:	f043 0201 	orr.w	r2, r3, #1
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d011      	beq.n	8008450 <HAL_UART_IRQHandler+0xf8>
 800842c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00b      	beq.n	8008450 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2202      	movs	r2, #2
 800843e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008446:	f043 0204 	orr.w	r2, r3, #4
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	2b00      	cmp	r3, #0
 800845a:	d011      	beq.n	8008480 <HAL_UART_IRQHandler+0x128>
 800845c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00b      	beq.n	8008480 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2204      	movs	r2, #4
 800846e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008476:	f043 0202 	orr.w	r2, r3, #2
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b00      	cmp	r3, #0
 800848a:	d017      	beq.n	80084bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800848c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008490:	f003 0320 	and.w	r3, r3, #32
 8008494:	2b00      	cmp	r3, #0
 8008496:	d105      	bne.n	80084a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008498:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800849c:	4b5c      	ldr	r3, [pc, #368]	@ (8008610 <HAL_UART_IRQHandler+0x2b8>)
 800849e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2208      	movs	r2, #8
 80084aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084b2:	f043 0208 	orr.w	r2, r3, #8
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80084bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d012      	beq.n	80084ee <HAL_UART_IRQHandler+0x196>
 80084c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00c      	beq.n	80084ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084e4:	f043 0220 	orr.w	r2, r3, #32
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 82f9 	beq.w	8008aec <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084fe:	f003 0320 	and.w	r3, r3, #32
 8008502:	2b00      	cmp	r3, #0
 8008504:	d013      	beq.n	800852e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b00      	cmp	r3, #0
 8008510:	d105      	bne.n	800851e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d007      	beq.n	800852e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008534:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008542:	2b40      	cmp	r3, #64	@ 0x40
 8008544:	d005      	beq.n	8008552 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800854a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800854e:	2b00      	cmp	r3, #0
 8008550:	d054      	beq.n	80085fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 fb44 	bl	8009be0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008562:	2b40      	cmp	r3, #64	@ 0x40
 8008564:	d146      	bne.n	80085f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3308      	adds	r3, #8
 800856c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800857c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3308      	adds	r3, #8
 800858e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008592:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800859e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80085a2:	e841 2300 	strex	r3, r2, [r1]
 80085a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80085aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1d9      	bne.n	8008566 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d017      	beq.n	80085ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085c2:	4a15      	ldr	r2, [pc, #84]	@ (8008618 <HAL_UART_IRQHandler+0x2c0>)
 80085c4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fa fe5d 	bl	800328c <HAL_DMA_Abort_IT>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d019      	beq.n	800860c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80085e6:	4610      	mov	r0, r2
 80085e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ea:	e00f      	b.n	800860c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fa9d 	bl	8008b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f2:	e00b      	b.n	800860c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fa99 	bl	8008b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085fa:	e007      	b.n	800860c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fa95 	bl	8008b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800860a:	e26f      	b.n	8008aec <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800860c:	bf00      	nop
    return;
 800860e:	e26d      	b.n	8008aec <HAL_UART_IRQHandler+0x794>
 8008610:	10000001 	.word	0x10000001
 8008614:	04000120 	.word	0x04000120
 8008618:	08009cad 	.word	0x08009cad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008620:	2b01      	cmp	r3, #1
 8008622:	f040 8203 	bne.w	8008a2c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862a:	f003 0310 	and.w	r3, r3, #16
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 81fc 	beq.w	8008a2c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008638:	f003 0310 	and.w	r3, r3, #16
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 81f5 	beq.w	8008a2c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2210      	movs	r2, #16
 8008648:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008654:	2b40      	cmp	r3, #64	@ 0x40
 8008656:	f040 816d 	bne.w	8008934 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4aa4      	ldr	r2, [pc, #656]	@ (80088f4 <HAL_UART_IRQHandler+0x59c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d068      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4aa1      	ldr	r2, [pc, #644]	@ (80088f8 <HAL_UART_IRQHandler+0x5a0>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d061      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a9f      	ldr	r2, [pc, #636]	@ (80088fc <HAL_UART_IRQHandler+0x5a4>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d05a      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a9c      	ldr	r2, [pc, #624]	@ (8008900 <HAL_UART_IRQHandler+0x5a8>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d053      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a9a      	ldr	r2, [pc, #616]	@ (8008904 <HAL_UART_IRQHandler+0x5ac>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d04c      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a97      	ldr	r2, [pc, #604]	@ (8008908 <HAL_UART_IRQHandler+0x5b0>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d045      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a95      	ldr	r2, [pc, #596]	@ (800890c <HAL_UART_IRQHandler+0x5b4>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d03e      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a92      	ldr	r2, [pc, #584]	@ (8008910 <HAL_UART_IRQHandler+0x5b8>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d037      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a90      	ldr	r2, [pc, #576]	@ (8008914 <HAL_UART_IRQHandler+0x5bc>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d030      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a8d      	ldr	r2, [pc, #564]	@ (8008918 <HAL_UART_IRQHandler+0x5c0>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d029      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a8b      	ldr	r2, [pc, #556]	@ (800891c <HAL_UART_IRQHandler+0x5c4>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d022      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a88      	ldr	r2, [pc, #544]	@ (8008920 <HAL_UART_IRQHandler+0x5c8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d01b      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a86      	ldr	r2, [pc, #536]	@ (8008924 <HAL_UART_IRQHandler+0x5cc>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d014      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a83      	ldr	r2, [pc, #524]	@ (8008928 <HAL_UART_IRQHandler+0x5d0>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00d      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a81      	ldr	r2, [pc, #516]	@ (800892c <HAL_UART_IRQHandler+0x5d4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d006      	beq.n	800873a <HAL_UART_IRQHandler+0x3e2>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a7e      	ldr	r2, [pc, #504]	@ (8008930 <HAL_UART_IRQHandler+0x5d8>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d106      	bne.n	8008748 <HAL_UART_IRQHandler+0x3f0>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	b29b      	uxth	r3, r3
 8008746:	e005      	b.n	8008754 <HAL_UART_IRQHandler+0x3fc>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	b29b      	uxth	r3, r3
 8008754:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008758:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 80ad 	beq.w	80088bc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008768:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800876c:	429a      	cmp	r2, r3
 800876e:	f080 80a5 	bcs.w	80088bc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008778:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008788:	f000 8087 	beq.w	800889a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80087a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80087ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80087c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1da      	bne.n	800878c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3308      	adds	r3, #8
 80087dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087e8:	f023 0301 	bic.w	r3, r3, #1
 80087ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008802:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800880c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e1      	bne.n	80087d6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3308      	adds	r3, #8
 8008818:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3308      	adds	r3, #8
 8008832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008836:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008838:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800883c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800883e:	e841 2300 	strex	r3, r2, [r1]
 8008842:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1e3      	bne.n	8008812 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2220      	movs	r2, #32
 800884e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008868:	f023 0310 	bic.w	r3, r3, #16
 800886c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	461a      	mov	r2, r3
 8008876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800887a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800887c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008880:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e4      	bne.n	8008858 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008894:	4618      	mov	r0, r3
 8008896:	f7fa f9db 	bl	8002c50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2202      	movs	r2, #2
 800889e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f943 	bl	8008b40 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80088ba:	e119      	b.n	8008af0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088c6:	429a      	cmp	r2, r3
 80088c8:	f040 8112 	bne.w	8008af0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088d8:	f040 810a 	bne.w	8008af0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2202      	movs	r2, #2
 80088e0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f928 	bl	8008b40 <HAL_UARTEx_RxEventCallback>
      return;
 80088f0:	e0fe      	b.n	8008af0 <HAL_UART_IRQHandler+0x798>
 80088f2:	bf00      	nop
 80088f4:	40020010 	.word	0x40020010
 80088f8:	40020028 	.word	0x40020028
 80088fc:	40020040 	.word	0x40020040
 8008900:	40020058 	.word	0x40020058
 8008904:	40020070 	.word	0x40020070
 8008908:	40020088 	.word	0x40020088
 800890c:	400200a0 	.word	0x400200a0
 8008910:	400200b8 	.word	0x400200b8
 8008914:	40020410 	.word	0x40020410
 8008918:	40020428 	.word	0x40020428
 800891c:	40020440 	.word	0x40020440
 8008920:	40020458 	.word	0x40020458
 8008924:	40020470 	.word	0x40020470
 8008928:	40020488 	.word	0x40020488
 800892c:	400204a0 	.word	0x400204a0
 8008930:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008940:	b29b      	uxth	r3, r3
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 80cf 	beq.w	8008af4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008956:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 80ca 	beq.w	8008af4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800896e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008970:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008974:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008982:	647b      	str	r3, [r7, #68]	@ 0x44
 8008984:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008988:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e4      	bne.n	8008960 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3308      	adds	r3, #8
 800899c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	623b      	str	r3, [r7, #32]
   return(result);
 80089a6:	6a3a      	ldr	r2, [r7, #32]
 80089a8:	4b55      	ldr	r3, [pc, #340]	@ (8008b00 <HAL_UART_IRQHandler+0x7a8>)
 80089aa:	4013      	ands	r3, r2
 80089ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80089bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089c2:	e841 2300 	strex	r3, r2, [r1]
 80089c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1e3      	bne.n	8008996 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	e853 3f00 	ldrex	r3, [r3]
 80089ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f023 0310 	bic.w	r3, r3, #16
 80089f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a04:	61fb      	str	r3, [r7, #28]
 8008a06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	69b9      	ldr	r1, [r7, #24]
 8008a0a:	69fa      	ldr	r2, [r7, #28]
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	617b      	str	r3, [r7, #20]
   return(result);
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e4      	bne.n	80089e2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f88b 	bl	8008b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a2a:	e063      	b.n	8008af4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00e      	beq.n	8008a56 <HAL_UART_IRQHandler+0x6fe>
 8008a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d008      	beq.n	8008a56 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f002 f82c 	bl	800aaac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a54:	e051      	b.n	8008afa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d014      	beq.n	8008a8c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d105      	bne.n	8008a7a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d008      	beq.n	8008a8c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d03a      	beq.n	8008af8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	4798      	blx	r3
    }
    return;
 8008a8a:	e035      	b.n	8008af8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d009      	beq.n	8008aac <HAL_UART_IRQHandler+0x754>
 8008a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f001 fab5 	bl	800a014 <UART_EndTransmit_IT>
    return;
 8008aaa:	e026      	b.n	8008afa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d009      	beq.n	8008acc <HAL_UART_IRQHandler+0x774>
 8008ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008abc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f002 f805 	bl	800aad4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008aca:	e016      	b.n	8008afa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ad0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d010      	beq.n	8008afa <HAL_UART_IRQHandler+0x7a2>
 8008ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	da0c      	bge.n	8008afa <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 ffed 	bl	800aac0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ae6:	e008      	b.n	8008afa <HAL_UART_IRQHandler+0x7a2>
      return;
 8008ae8:	bf00      	nop
 8008aea:	e006      	b.n	8008afa <HAL_UART_IRQHandler+0x7a2>
    return;
 8008aec:	bf00      	nop
 8008aee:	e004      	b.n	8008afa <HAL_UART_IRQHandler+0x7a2>
      return;
 8008af0:	bf00      	nop
 8008af2:	e002      	b.n	8008afa <HAL_UART_IRQHandler+0x7a2>
      return;
 8008af4:	bf00      	nop
 8008af6:	e000      	b.n	8008afa <HAL_UART_IRQHandler+0x7a2>
    return;
 8008af8:	bf00      	nop
  }
}
 8008afa:	37e8      	adds	r7, #232	@ 0xe8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	effffffe 	.word	0xeffffffe

08008b04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b5c:	b092      	sub	sp, #72	@ 0x48
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	431a      	orrs	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	431a      	orrs	r2, r3
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	4bbe      	ldr	r3, [pc, #760]	@ (8008e80 <UART_SetConfig+0x328>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	6812      	ldr	r2, [r2, #0]
 8008b8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b90:	430b      	orrs	r3, r1
 8008b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4ab3      	ldr	r2, [pc, #716]	@ (8008e84 <UART_SetConfig+0x32c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d004      	beq.n	8008bc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689a      	ldr	r2, [r3, #8]
 8008bca:	4baf      	ldr	r3, [pc, #700]	@ (8008e88 <UART_SetConfig+0x330>)
 8008bcc:	4013      	ands	r3, r2
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	6812      	ldr	r2, [r2, #0]
 8008bd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bde:	f023 010f 	bic.w	r1, r3, #15
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4aa6      	ldr	r2, [pc, #664]	@ (8008e8c <UART_SetConfig+0x334>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d177      	bne.n	8008ce8 <UART_SetConfig+0x190>
 8008bf8:	4ba5      	ldr	r3, [pc, #660]	@ (8008e90 <UART_SetConfig+0x338>)
 8008bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c00:	2b28      	cmp	r3, #40	@ 0x28
 8008c02:	d86d      	bhi.n	8008ce0 <UART_SetConfig+0x188>
 8008c04:	a201      	add	r2, pc, #4	@ (adr r2, 8008c0c <UART_SetConfig+0xb4>)
 8008c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0a:	bf00      	nop
 8008c0c:	08008cb1 	.word	0x08008cb1
 8008c10:	08008ce1 	.word	0x08008ce1
 8008c14:	08008ce1 	.word	0x08008ce1
 8008c18:	08008ce1 	.word	0x08008ce1
 8008c1c:	08008ce1 	.word	0x08008ce1
 8008c20:	08008ce1 	.word	0x08008ce1
 8008c24:	08008ce1 	.word	0x08008ce1
 8008c28:	08008ce1 	.word	0x08008ce1
 8008c2c:	08008cb9 	.word	0x08008cb9
 8008c30:	08008ce1 	.word	0x08008ce1
 8008c34:	08008ce1 	.word	0x08008ce1
 8008c38:	08008ce1 	.word	0x08008ce1
 8008c3c:	08008ce1 	.word	0x08008ce1
 8008c40:	08008ce1 	.word	0x08008ce1
 8008c44:	08008ce1 	.word	0x08008ce1
 8008c48:	08008ce1 	.word	0x08008ce1
 8008c4c:	08008cc1 	.word	0x08008cc1
 8008c50:	08008ce1 	.word	0x08008ce1
 8008c54:	08008ce1 	.word	0x08008ce1
 8008c58:	08008ce1 	.word	0x08008ce1
 8008c5c:	08008ce1 	.word	0x08008ce1
 8008c60:	08008ce1 	.word	0x08008ce1
 8008c64:	08008ce1 	.word	0x08008ce1
 8008c68:	08008ce1 	.word	0x08008ce1
 8008c6c:	08008cc9 	.word	0x08008cc9
 8008c70:	08008ce1 	.word	0x08008ce1
 8008c74:	08008ce1 	.word	0x08008ce1
 8008c78:	08008ce1 	.word	0x08008ce1
 8008c7c:	08008ce1 	.word	0x08008ce1
 8008c80:	08008ce1 	.word	0x08008ce1
 8008c84:	08008ce1 	.word	0x08008ce1
 8008c88:	08008ce1 	.word	0x08008ce1
 8008c8c:	08008cd1 	.word	0x08008cd1
 8008c90:	08008ce1 	.word	0x08008ce1
 8008c94:	08008ce1 	.word	0x08008ce1
 8008c98:	08008ce1 	.word	0x08008ce1
 8008c9c:	08008ce1 	.word	0x08008ce1
 8008ca0:	08008ce1 	.word	0x08008ce1
 8008ca4:	08008ce1 	.word	0x08008ce1
 8008ca8:	08008ce1 	.word	0x08008ce1
 8008cac:	08008cd9 	.word	0x08008cd9
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e222      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008cb8:	2304      	movs	r3, #4
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cbe:	e21e      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008cc0:	2308      	movs	r3, #8
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e21a      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008cc8:	2310      	movs	r3, #16
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cce:	e216      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd6:	e212      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008cd8:	2340      	movs	r3, #64	@ 0x40
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e20e      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008ce0:	2380      	movs	r3, #128	@ 0x80
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce6:	e20a      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a69      	ldr	r2, [pc, #420]	@ (8008e94 <UART_SetConfig+0x33c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d130      	bne.n	8008d54 <UART_SetConfig+0x1fc>
 8008cf2:	4b67      	ldr	r3, [pc, #412]	@ (8008e90 <UART_SetConfig+0x338>)
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	2b05      	cmp	r3, #5
 8008cfc:	d826      	bhi.n	8008d4c <UART_SetConfig+0x1f4>
 8008cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008d04 <UART_SetConfig+0x1ac>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d1d 	.word	0x08008d1d
 8008d08:	08008d25 	.word	0x08008d25
 8008d0c:	08008d2d 	.word	0x08008d2d
 8008d10:	08008d35 	.word	0x08008d35
 8008d14:	08008d3d 	.word	0x08008d3d
 8008d18:	08008d45 	.word	0x08008d45
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e1ec      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008d24:	2304      	movs	r3, #4
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e1e8      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008d2c:	2308      	movs	r3, #8
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e1e4      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008d34:	2310      	movs	r3, #16
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e1e0      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008d3c:	2320      	movs	r3, #32
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e1dc      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008d44:	2340      	movs	r3, #64	@ 0x40
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e1d8      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008d4c:	2380      	movs	r3, #128	@ 0x80
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d52:	e1d4      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a4f      	ldr	r2, [pc, #316]	@ (8008e98 <UART_SetConfig+0x340>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d130      	bne.n	8008dc0 <UART_SetConfig+0x268>
 8008d5e:	4b4c      	ldr	r3, [pc, #304]	@ (8008e90 <UART_SetConfig+0x338>)
 8008d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d62:	f003 0307 	and.w	r3, r3, #7
 8008d66:	2b05      	cmp	r3, #5
 8008d68:	d826      	bhi.n	8008db8 <UART_SetConfig+0x260>
 8008d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d70 <UART_SetConfig+0x218>)
 8008d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d70:	08008d89 	.word	0x08008d89
 8008d74:	08008d91 	.word	0x08008d91
 8008d78:	08008d99 	.word	0x08008d99
 8008d7c:	08008da1 	.word	0x08008da1
 8008d80:	08008da9 	.word	0x08008da9
 8008d84:	08008db1 	.word	0x08008db1
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8e:	e1b6      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008d90:	2304      	movs	r3, #4
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d96:	e1b2      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008d98:	2308      	movs	r3, #8
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e1ae      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008da0:	2310      	movs	r3, #16
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e1aa      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008da8:	2320      	movs	r3, #32
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e1a6      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008db0:	2340      	movs	r3, #64	@ 0x40
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e1a2      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008db8:	2380      	movs	r3, #128	@ 0x80
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dbe:	e19e      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a35      	ldr	r2, [pc, #212]	@ (8008e9c <UART_SetConfig+0x344>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d130      	bne.n	8008e2c <UART_SetConfig+0x2d4>
 8008dca:	4b31      	ldr	r3, [pc, #196]	@ (8008e90 <UART_SetConfig+0x338>)
 8008dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	2b05      	cmp	r3, #5
 8008dd4:	d826      	bhi.n	8008e24 <UART_SetConfig+0x2cc>
 8008dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ddc <UART_SetConfig+0x284>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008df5 	.word	0x08008df5
 8008de0:	08008dfd 	.word	0x08008dfd
 8008de4:	08008e05 	.word	0x08008e05
 8008de8:	08008e0d 	.word	0x08008e0d
 8008dec:	08008e15 	.word	0x08008e15
 8008df0:	08008e1d 	.word	0x08008e1d
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfa:	e180      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008dfc:	2304      	movs	r3, #4
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e17c      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008e04:	2308      	movs	r3, #8
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e178      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e174      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008e14:	2320      	movs	r3, #32
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e170      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008e1c:	2340      	movs	r3, #64	@ 0x40
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e16c      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008e24:	2380      	movs	r3, #128	@ 0x80
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e168      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a1b      	ldr	r2, [pc, #108]	@ (8008ea0 <UART_SetConfig+0x348>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d142      	bne.n	8008ebc <UART_SetConfig+0x364>
 8008e36:	4b16      	ldr	r3, [pc, #88]	@ (8008e90 <UART_SetConfig+0x338>)
 8008e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d838      	bhi.n	8008eb4 <UART_SetConfig+0x35c>
 8008e42:	a201      	add	r2, pc, #4	@ (adr r2, 8008e48 <UART_SetConfig+0x2f0>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e61 	.word	0x08008e61
 8008e4c:	08008e69 	.word	0x08008e69
 8008e50:	08008e71 	.word	0x08008e71
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08008ea5 	.word	0x08008ea5
 8008e5c:	08008ead 	.word	0x08008ead
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e66:	e14a      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008e68:	2304      	movs	r3, #4
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e146      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008e70:	2308      	movs	r3, #8
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e142      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008e78:	2310      	movs	r3, #16
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e13e      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008e80:	cfff69f3 	.word	0xcfff69f3
 8008e84:	58000c00 	.word	0x58000c00
 8008e88:	11fff4ff 	.word	0x11fff4ff
 8008e8c:	40011000 	.word	0x40011000
 8008e90:	58024400 	.word	0x58024400
 8008e94:	40004400 	.word	0x40004400
 8008e98:	40004800 	.word	0x40004800
 8008e9c:	40004c00 	.word	0x40004c00
 8008ea0:	40005000 	.word	0x40005000
 8008ea4:	2320      	movs	r3, #32
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eaa:	e128      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008eac:	2340      	movs	r3, #64	@ 0x40
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb2:	e124      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008eb4:	2380      	movs	r3, #128	@ 0x80
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eba:	e120      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4acb      	ldr	r2, [pc, #812]	@ (80091f0 <UART_SetConfig+0x698>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d176      	bne.n	8008fb4 <UART_SetConfig+0x45c>
 8008ec6:	4bcb      	ldr	r3, [pc, #812]	@ (80091f4 <UART_SetConfig+0x69c>)
 8008ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ece:	2b28      	cmp	r3, #40	@ 0x28
 8008ed0:	d86c      	bhi.n	8008fac <UART_SetConfig+0x454>
 8008ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed8 <UART_SetConfig+0x380>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008f7d 	.word	0x08008f7d
 8008edc:	08008fad 	.word	0x08008fad
 8008ee0:	08008fad 	.word	0x08008fad
 8008ee4:	08008fad 	.word	0x08008fad
 8008ee8:	08008fad 	.word	0x08008fad
 8008eec:	08008fad 	.word	0x08008fad
 8008ef0:	08008fad 	.word	0x08008fad
 8008ef4:	08008fad 	.word	0x08008fad
 8008ef8:	08008f85 	.word	0x08008f85
 8008efc:	08008fad 	.word	0x08008fad
 8008f00:	08008fad 	.word	0x08008fad
 8008f04:	08008fad 	.word	0x08008fad
 8008f08:	08008fad 	.word	0x08008fad
 8008f0c:	08008fad 	.word	0x08008fad
 8008f10:	08008fad 	.word	0x08008fad
 8008f14:	08008fad 	.word	0x08008fad
 8008f18:	08008f8d 	.word	0x08008f8d
 8008f1c:	08008fad 	.word	0x08008fad
 8008f20:	08008fad 	.word	0x08008fad
 8008f24:	08008fad 	.word	0x08008fad
 8008f28:	08008fad 	.word	0x08008fad
 8008f2c:	08008fad 	.word	0x08008fad
 8008f30:	08008fad 	.word	0x08008fad
 8008f34:	08008fad 	.word	0x08008fad
 8008f38:	08008f95 	.word	0x08008f95
 8008f3c:	08008fad 	.word	0x08008fad
 8008f40:	08008fad 	.word	0x08008fad
 8008f44:	08008fad 	.word	0x08008fad
 8008f48:	08008fad 	.word	0x08008fad
 8008f4c:	08008fad 	.word	0x08008fad
 8008f50:	08008fad 	.word	0x08008fad
 8008f54:	08008fad 	.word	0x08008fad
 8008f58:	08008f9d 	.word	0x08008f9d
 8008f5c:	08008fad 	.word	0x08008fad
 8008f60:	08008fad 	.word	0x08008fad
 8008f64:	08008fad 	.word	0x08008fad
 8008f68:	08008fad 	.word	0x08008fad
 8008f6c:	08008fad 	.word	0x08008fad
 8008f70:	08008fad 	.word	0x08008fad
 8008f74:	08008fad 	.word	0x08008fad
 8008f78:	08008fa5 	.word	0x08008fa5
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f82:	e0bc      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008f84:	2304      	movs	r3, #4
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8a:	e0b8      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f92:	e0b4      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008f94:	2310      	movs	r3, #16
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9a:	e0b0      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008f9c:	2320      	movs	r3, #32
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa2:	e0ac      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008fa4:	2340      	movs	r3, #64	@ 0x40
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e0a8      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008fac:	2380      	movs	r3, #128	@ 0x80
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e0a4      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a8f      	ldr	r2, [pc, #572]	@ (80091f8 <UART_SetConfig+0x6a0>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d130      	bne.n	8009020 <UART_SetConfig+0x4c8>
 8008fbe:	4b8d      	ldr	r3, [pc, #564]	@ (80091f4 <UART_SetConfig+0x69c>)
 8008fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fc2:	f003 0307 	and.w	r3, r3, #7
 8008fc6:	2b05      	cmp	r3, #5
 8008fc8:	d826      	bhi.n	8009018 <UART_SetConfig+0x4c0>
 8008fca:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd0 <UART_SetConfig+0x478>)
 8008fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd0:	08008fe9 	.word	0x08008fe9
 8008fd4:	08008ff1 	.word	0x08008ff1
 8008fd8:	08008ff9 	.word	0x08008ff9
 8008fdc:	08009001 	.word	0x08009001
 8008fe0:	08009009 	.word	0x08009009
 8008fe4:	08009011 	.word	0x08009011
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fee:	e086      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008ff0:	2304      	movs	r3, #4
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff6:	e082      	b.n	80090fe <UART_SetConfig+0x5a6>
 8008ff8:	2308      	movs	r3, #8
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e07e      	b.n	80090fe <UART_SetConfig+0x5a6>
 8009000:	2310      	movs	r3, #16
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e07a      	b.n	80090fe <UART_SetConfig+0x5a6>
 8009008:	2320      	movs	r3, #32
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e076      	b.n	80090fe <UART_SetConfig+0x5a6>
 8009010:	2340      	movs	r3, #64	@ 0x40
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e072      	b.n	80090fe <UART_SetConfig+0x5a6>
 8009018:	2380      	movs	r3, #128	@ 0x80
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e06e      	b.n	80090fe <UART_SetConfig+0x5a6>
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a75      	ldr	r2, [pc, #468]	@ (80091fc <UART_SetConfig+0x6a4>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d130      	bne.n	800908c <UART_SetConfig+0x534>
 800902a:	4b72      	ldr	r3, [pc, #456]	@ (80091f4 <UART_SetConfig+0x69c>)
 800902c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	2b05      	cmp	r3, #5
 8009034:	d826      	bhi.n	8009084 <UART_SetConfig+0x52c>
 8009036:	a201      	add	r2, pc, #4	@ (adr r2, 800903c <UART_SetConfig+0x4e4>)
 8009038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903c:	08009055 	.word	0x08009055
 8009040:	0800905d 	.word	0x0800905d
 8009044:	08009065 	.word	0x08009065
 8009048:	0800906d 	.word	0x0800906d
 800904c:	08009075 	.word	0x08009075
 8009050:	0800907d 	.word	0x0800907d
 8009054:	2300      	movs	r3, #0
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905a:	e050      	b.n	80090fe <UART_SetConfig+0x5a6>
 800905c:	2304      	movs	r3, #4
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e04c      	b.n	80090fe <UART_SetConfig+0x5a6>
 8009064:	2308      	movs	r3, #8
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e048      	b.n	80090fe <UART_SetConfig+0x5a6>
 800906c:	2310      	movs	r3, #16
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e044      	b.n	80090fe <UART_SetConfig+0x5a6>
 8009074:	2320      	movs	r3, #32
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e040      	b.n	80090fe <UART_SetConfig+0x5a6>
 800907c:	2340      	movs	r3, #64	@ 0x40
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e03c      	b.n	80090fe <UART_SetConfig+0x5a6>
 8009084:	2380      	movs	r3, #128	@ 0x80
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e038      	b.n	80090fe <UART_SetConfig+0x5a6>
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a5b      	ldr	r2, [pc, #364]	@ (8009200 <UART_SetConfig+0x6a8>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d130      	bne.n	80090f8 <UART_SetConfig+0x5a0>
 8009096:	4b57      	ldr	r3, [pc, #348]	@ (80091f4 <UART_SetConfig+0x69c>)
 8009098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	2b05      	cmp	r3, #5
 80090a0:	d826      	bhi.n	80090f0 <UART_SetConfig+0x598>
 80090a2:	a201      	add	r2, pc, #4	@ (adr r2, 80090a8 <UART_SetConfig+0x550>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	080090c1 	.word	0x080090c1
 80090ac:	080090c9 	.word	0x080090c9
 80090b0:	080090d1 	.word	0x080090d1
 80090b4:	080090d9 	.word	0x080090d9
 80090b8:	080090e1 	.word	0x080090e1
 80090bc:	080090e9 	.word	0x080090e9
 80090c0:	2302      	movs	r3, #2
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c6:	e01a      	b.n	80090fe <UART_SetConfig+0x5a6>
 80090c8:	2304      	movs	r3, #4
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e016      	b.n	80090fe <UART_SetConfig+0x5a6>
 80090d0:	2308      	movs	r3, #8
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e012      	b.n	80090fe <UART_SetConfig+0x5a6>
 80090d8:	2310      	movs	r3, #16
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e00e      	b.n	80090fe <UART_SetConfig+0x5a6>
 80090e0:	2320      	movs	r3, #32
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e00a      	b.n	80090fe <UART_SetConfig+0x5a6>
 80090e8:	2340      	movs	r3, #64	@ 0x40
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e006      	b.n	80090fe <UART_SetConfig+0x5a6>
 80090f0:	2380      	movs	r3, #128	@ 0x80
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e002      	b.n	80090fe <UART_SetConfig+0x5a6>
 80090f8:	2380      	movs	r3, #128	@ 0x80
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a3f      	ldr	r2, [pc, #252]	@ (8009200 <UART_SetConfig+0x6a8>)
 8009104:	4293      	cmp	r3, r2
 8009106:	f040 80f8 	bne.w	80092fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800910a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800910e:	2b20      	cmp	r3, #32
 8009110:	dc46      	bgt.n	80091a0 <UART_SetConfig+0x648>
 8009112:	2b02      	cmp	r3, #2
 8009114:	f2c0 8082 	blt.w	800921c <UART_SetConfig+0x6c4>
 8009118:	3b02      	subs	r3, #2
 800911a:	2b1e      	cmp	r3, #30
 800911c:	d87e      	bhi.n	800921c <UART_SetConfig+0x6c4>
 800911e:	a201      	add	r2, pc, #4	@ (adr r2, 8009124 <UART_SetConfig+0x5cc>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	080091a7 	.word	0x080091a7
 8009128:	0800921d 	.word	0x0800921d
 800912c:	080091af 	.word	0x080091af
 8009130:	0800921d 	.word	0x0800921d
 8009134:	0800921d 	.word	0x0800921d
 8009138:	0800921d 	.word	0x0800921d
 800913c:	080091bf 	.word	0x080091bf
 8009140:	0800921d 	.word	0x0800921d
 8009144:	0800921d 	.word	0x0800921d
 8009148:	0800921d 	.word	0x0800921d
 800914c:	0800921d 	.word	0x0800921d
 8009150:	0800921d 	.word	0x0800921d
 8009154:	0800921d 	.word	0x0800921d
 8009158:	0800921d 	.word	0x0800921d
 800915c:	080091cf 	.word	0x080091cf
 8009160:	0800921d 	.word	0x0800921d
 8009164:	0800921d 	.word	0x0800921d
 8009168:	0800921d 	.word	0x0800921d
 800916c:	0800921d 	.word	0x0800921d
 8009170:	0800921d 	.word	0x0800921d
 8009174:	0800921d 	.word	0x0800921d
 8009178:	0800921d 	.word	0x0800921d
 800917c:	0800921d 	.word	0x0800921d
 8009180:	0800921d 	.word	0x0800921d
 8009184:	0800921d 	.word	0x0800921d
 8009188:	0800921d 	.word	0x0800921d
 800918c:	0800921d 	.word	0x0800921d
 8009190:	0800921d 	.word	0x0800921d
 8009194:	0800921d 	.word	0x0800921d
 8009198:	0800921d 	.word	0x0800921d
 800919c:	0800920f 	.word	0x0800920f
 80091a0:	2b40      	cmp	r3, #64	@ 0x40
 80091a2:	d037      	beq.n	8009214 <UART_SetConfig+0x6bc>
 80091a4:	e03a      	b.n	800921c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80091a6:	f7fe fa33 	bl	8007610 <HAL_RCCEx_GetD3PCLK1Freq>
 80091aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091ac:	e03c      	b.n	8009228 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe fa42 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091bc:	e034      	b.n	8009228 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091be:	f107 0318 	add.w	r3, r7, #24
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe fb8e 	bl	80078e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091cc:	e02c      	b.n	8009228 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091ce:	4b09      	ldr	r3, [pc, #36]	@ (80091f4 <UART_SetConfig+0x69c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d016      	beq.n	8009208 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091da:	4b06      	ldr	r3, [pc, #24]	@ (80091f4 <UART_SetConfig+0x69c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	08db      	lsrs	r3, r3, #3
 80091e0:	f003 0303 	and.w	r3, r3, #3
 80091e4:	4a07      	ldr	r2, [pc, #28]	@ (8009204 <UART_SetConfig+0x6ac>)
 80091e6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091ec:	e01c      	b.n	8009228 <UART_SetConfig+0x6d0>
 80091ee:	bf00      	nop
 80091f0:	40011400 	.word	0x40011400
 80091f4:	58024400 	.word	0x58024400
 80091f8:	40007800 	.word	0x40007800
 80091fc:	40007c00 	.word	0x40007c00
 8009200:	58000c00 	.word	0x58000c00
 8009204:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009208:	4b9d      	ldr	r3, [pc, #628]	@ (8009480 <UART_SetConfig+0x928>)
 800920a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800920c:	e00c      	b.n	8009228 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800920e:	4b9d      	ldr	r3, [pc, #628]	@ (8009484 <UART_SetConfig+0x92c>)
 8009210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009212:	e009      	b.n	8009228 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009214:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800921a:	e005      	b.n	8009228 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009226:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 81de 	beq.w	80095ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009234:	4a94      	ldr	r2, [pc, #592]	@ (8009488 <UART_SetConfig+0x930>)
 8009236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800923a:	461a      	mov	r2, r3
 800923c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800923e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009242:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	4613      	mov	r3, r2
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	4413      	add	r3, r2
 800924e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009250:	429a      	cmp	r2, r3
 8009252:	d305      	bcc.n	8009260 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800925a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800925c:	429a      	cmp	r2, r3
 800925e:	d903      	bls.n	8009268 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009266:	e1c1      	b.n	80095ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800926a:	2200      	movs	r2, #0
 800926c:	60bb      	str	r3, [r7, #8]
 800926e:	60fa      	str	r2, [r7, #12]
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009274:	4a84      	ldr	r2, [pc, #528]	@ (8009488 <UART_SetConfig+0x930>)
 8009276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800927a:	b29b      	uxth	r3, r3
 800927c:	2200      	movs	r2, #0
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009286:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800928a:	f7f7 fa3d 	bl	8000708 <__aeabi_uldivmod>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4610      	mov	r0, r2
 8009294:	4619      	mov	r1, r3
 8009296:	f04f 0200 	mov.w	r2, #0
 800929a:	f04f 0300 	mov.w	r3, #0
 800929e:	020b      	lsls	r3, r1, #8
 80092a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092a4:	0202      	lsls	r2, r0, #8
 80092a6:	6979      	ldr	r1, [r7, #20]
 80092a8:	6849      	ldr	r1, [r1, #4]
 80092aa:	0849      	lsrs	r1, r1, #1
 80092ac:	2000      	movs	r0, #0
 80092ae:	460c      	mov	r4, r1
 80092b0:	4605      	mov	r5, r0
 80092b2:	eb12 0804 	adds.w	r8, r2, r4
 80092b6:	eb43 0905 	adc.w	r9, r3, r5
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	469a      	mov	sl, r3
 80092c2:	4693      	mov	fp, r2
 80092c4:	4652      	mov	r2, sl
 80092c6:	465b      	mov	r3, fp
 80092c8:	4640      	mov	r0, r8
 80092ca:	4649      	mov	r1, r9
 80092cc:	f7f7 fa1c 	bl	8000708 <__aeabi_uldivmod>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4613      	mov	r3, r2
 80092d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092de:	d308      	bcc.n	80092f2 <UART_SetConfig+0x79a>
 80092e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092e6:	d204      	bcs.n	80092f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092ee:	60da      	str	r2, [r3, #12]
 80092f0:	e17c      	b.n	80095ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092f8:	e178      	b.n	80095ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009302:	f040 80c5 	bne.w	8009490 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009306:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800930a:	2b20      	cmp	r3, #32
 800930c:	dc48      	bgt.n	80093a0 <UART_SetConfig+0x848>
 800930e:	2b00      	cmp	r3, #0
 8009310:	db7b      	blt.n	800940a <UART_SetConfig+0x8b2>
 8009312:	2b20      	cmp	r3, #32
 8009314:	d879      	bhi.n	800940a <UART_SetConfig+0x8b2>
 8009316:	a201      	add	r2, pc, #4	@ (adr r2, 800931c <UART_SetConfig+0x7c4>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	080093a7 	.word	0x080093a7
 8009320:	080093af 	.word	0x080093af
 8009324:	0800940b 	.word	0x0800940b
 8009328:	0800940b 	.word	0x0800940b
 800932c:	080093b7 	.word	0x080093b7
 8009330:	0800940b 	.word	0x0800940b
 8009334:	0800940b 	.word	0x0800940b
 8009338:	0800940b 	.word	0x0800940b
 800933c:	080093c7 	.word	0x080093c7
 8009340:	0800940b 	.word	0x0800940b
 8009344:	0800940b 	.word	0x0800940b
 8009348:	0800940b 	.word	0x0800940b
 800934c:	0800940b 	.word	0x0800940b
 8009350:	0800940b 	.word	0x0800940b
 8009354:	0800940b 	.word	0x0800940b
 8009358:	0800940b 	.word	0x0800940b
 800935c:	080093d7 	.word	0x080093d7
 8009360:	0800940b 	.word	0x0800940b
 8009364:	0800940b 	.word	0x0800940b
 8009368:	0800940b 	.word	0x0800940b
 800936c:	0800940b 	.word	0x0800940b
 8009370:	0800940b 	.word	0x0800940b
 8009374:	0800940b 	.word	0x0800940b
 8009378:	0800940b 	.word	0x0800940b
 800937c:	0800940b 	.word	0x0800940b
 8009380:	0800940b 	.word	0x0800940b
 8009384:	0800940b 	.word	0x0800940b
 8009388:	0800940b 	.word	0x0800940b
 800938c:	0800940b 	.word	0x0800940b
 8009390:	0800940b 	.word	0x0800940b
 8009394:	0800940b 	.word	0x0800940b
 8009398:	0800940b 	.word	0x0800940b
 800939c:	080093fd 	.word	0x080093fd
 80093a0:	2b40      	cmp	r3, #64	@ 0x40
 80093a2:	d02e      	beq.n	8009402 <UART_SetConfig+0x8aa>
 80093a4:	e031      	b.n	800940a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093a6:	f7fc f97d 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 80093aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093ac:	e033      	b.n	8009416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093ae:	f7fc f98f 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 80093b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093b4:	e02f      	b.n	8009416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe f93e 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c4:	e027      	b.n	8009416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c6:	f107 0318 	add.w	r3, r7, #24
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fa8a 	bl	80078e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d4:	e01f      	b.n	8009416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093d6:	4b2d      	ldr	r3, [pc, #180]	@ (800948c <UART_SetConfig+0x934>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093e2:	4b2a      	ldr	r3, [pc, #168]	@ (800948c <UART_SetConfig+0x934>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	08db      	lsrs	r3, r3, #3
 80093e8:	f003 0303 	and.w	r3, r3, #3
 80093ec:	4a24      	ldr	r2, [pc, #144]	@ (8009480 <UART_SetConfig+0x928>)
 80093ee:	fa22 f303 	lsr.w	r3, r2, r3
 80093f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093f4:	e00f      	b.n	8009416 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80093f6:	4b22      	ldr	r3, [pc, #136]	@ (8009480 <UART_SetConfig+0x928>)
 80093f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093fa:	e00c      	b.n	8009416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093fc:	4b21      	ldr	r3, [pc, #132]	@ (8009484 <UART_SetConfig+0x92c>)
 80093fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009400:	e009      	b.n	8009416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009408:	e005      	b.n	8009416 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009414:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 80e7 	beq.w	80095ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009422:	4a19      	ldr	r2, [pc, #100]	@ (8009488 <UART_SetConfig+0x930>)
 8009424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009428:	461a      	mov	r2, r3
 800942a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800942c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009430:	005a      	lsls	r2, r3, #1
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	085b      	lsrs	r3, r3, #1
 8009438:	441a      	add	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009442:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009446:	2b0f      	cmp	r3, #15
 8009448:	d916      	bls.n	8009478 <UART_SetConfig+0x920>
 800944a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009450:	d212      	bcs.n	8009478 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009454:	b29b      	uxth	r3, r3
 8009456:	f023 030f 	bic.w	r3, r3, #15
 800945a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800945c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	b29b      	uxth	r3, r3
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	b29a      	uxth	r2, r3
 8009468:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800946a:	4313      	orrs	r3, r2
 800946c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009474:	60da      	str	r2, [r3, #12]
 8009476:	e0b9      	b.n	80095ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800947e:	e0b5      	b.n	80095ec <UART_SetConfig+0xa94>
 8009480:	03d09000 	.word	0x03d09000
 8009484:	003d0900 	.word	0x003d0900
 8009488:	0800f810 	.word	0x0800f810
 800948c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009490:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009494:	2b20      	cmp	r3, #32
 8009496:	dc49      	bgt.n	800952c <UART_SetConfig+0x9d4>
 8009498:	2b00      	cmp	r3, #0
 800949a:	db7c      	blt.n	8009596 <UART_SetConfig+0xa3e>
 800949c:	2b20      	cmp	r3, #32
 800949e:	d87a      	bhi.n	8009596 <UART_SetConfig+0xa3e>
 80094a0:	a201      	add	r2, pc, #4	@ (adr r2, 80094a8 <UART_SetConfig+0x950>)
 80094a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a6:	bf00      	nop
 80094a8:	08009533 	.word	0x08009533
 80094ac:	0800953b 	.word	0x0800953b
 80094b0:	08009597 	.word	0x08009597
 80094b4:	08009597 	.word	0x08009597
 80094b8:	08009543 	.word	0x08009543
 80094bc:	08009597 	.word	0x08009597
 80094c0:	08009597 	.word	0x08009597
 80094c4:	08009597 	.word	0x08009597
 80094c8:	08009553 	.word	0x08009553
 80094cc:	08009597 	.word	0x08009597
 80094d0:	08009597 	.word	0x08009597
 80094d4:	08009597 	.word	0x08009597
 80094d8:	08009597 	.word	0x08009597
 80094dc:	08009597 	.word	0x08009597
 80094e0:	08009597 	.word	0x08009597
 80094e4:	08009597 	.word	0x08009597
 80094e8:	08009563 	.word	0x08009563
 80094ec:	08009597 	.word	0x08009597
 80094f0:	08009597 	.word	0x08009597
 80094f4:	08009597 	.word	0x08009597
 80094f8:	08009597 	.word	0x08009597
 80094fc:	08009597 	.word	0x08009597
 8009500:	08009597 	.word	0x08009597
 8009504:	08009597 	.word	0x08009597
 8009508:	08009597 	.word	0x08009597
 800950c:	08009597 	.word	0x08009597
 8009510:	08009597 	.word	0x08009597
 8009514:	08009597 	.word	0x08009597
 8009518:	08009597 	.word	0x08009597
 800951c:	08009597 	.word	0x08009597
 8009520:	08009597 	.word	0x08009597
 8009524:	08009597 	.word	0x08009597
 8009528:	08009589 	.word	0x08009589
 800952c:	2b40      	cmp	r3, #64	@ 0x40
 800952e:	d02e      	beq.n	800958e <UART_SetConfig+0xa36>
 8009530:	e031      	b.n	8009596 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009532:	f7fc f8b7 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8009536:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009538:	e033      	b.n	80095a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800953a:	f7fc f8c9 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 800953e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009540:	e02f      	b.n	80095a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe f878 	bl	800763c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009550:	e027      	b.n	80095a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009552:	f107 0318 	add.w	r3, r7, #24
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe f9c4 	bl	80078e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009560:	e01f      	b.n	80095a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009562:	4b2d      	ldr	r3, [pc, #180]	@ (8009618 <UART_SetConfig+0xac0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b00      	cmp	r3, #0
 800956c:	d009      	beq.n	8009582 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800956e:	4b2a      	ldr	r3, [pc, #168]	@ (8009618 <UART_SetConfig+0xac0>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	08db      	lsrs	r3, r3, #3
 8009574:	f003 0303 	and.w	r3, r3, #3
 8009578:	4a28      	ldr	r2, [pc, #160]	@ (800961c <UART_SetConfig+0xac4>)
 800957a:	fa22 f303 	lsr.w	r3, r2, r3
 800957e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009580:	e00f      	b.n	80095a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009582:	4b26      	ldr	r3, [pc, #152]	@ (800961c <UART_SetConfig+0xac4>)
 8009584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009586:	e00c      	b.n	80095a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009588:	4b25      	ldr	r3, [pc, #148]	@ (8009620 <UART_SetConfig+0xac8>)
 800958a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958c:	e009      	b.n	80095a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800958e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009594:	e005      	b.n	80095a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095a0:	bf00      	nop
    }

    if (pclk != 0U)
 80095a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d021      	beq.n	80095ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009624 <UART_SetConfig+0xacc>)
 80095ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b2:	461a      	mov	r2, r3
 80095b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	085b      	lsrs	r3, r3, #1
 80095c0:	441a      	add	r2, r3
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ce:	2b0f      	cmp	r3, #15
 80095d0:	d909      	bls.n	80095e6 <UART_SetConfig+0xa8e>
 80095d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095d8:	d205      	bcs.n	80095e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	b29a      	uxth	r2, r3
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	60da      	str	r2, [r3, #12]
 80095e4:	e002      	b.n	80095ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2200      	movs	r2, #0
 8009600:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2200      	movs	r2, #0
 8009606:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009608:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800960c:	4618      	mov	r0, r3
 800960e:	3748      	adds	r7, #72	@ 0x48
 8009610:	46bd      	mov	sp, r7
 8009612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009616:	bf00      	nop
 8009618:	58024400 	.word	0x58024400
 800961c:	03d09000 	.word	0x03d09000
 8009620:	003d0900 	.word	0x003d0900
 8009624:	0800f810 	.word	0x0800f810

08009628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00a      	beq.n	8009696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	f003 0310 	and.w	r3, r3, #16
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00a      	beq.n	80096da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009704:	2b00      	cmp	r3, #0
 8009706:	d01a      	beq.n	800973e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009726:	d10a      	bne.n	800973e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	605a      	str	r2, [r3, #4]
  }
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b098      	sub	sp, #96	@ 0x60
 8009770:	af02      	add	r7, sp, #8
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800977c:	f7f8 f8bc 	bl	80018f8 <HAL_GetTick>
 8009780:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b08      	cmp	r3, #8
 800978e:	d12f      	bne.n	80097f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009790:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009798:	2200      	movs	r2, #0
 800979a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f88e 	bl	80098c0 <UART_WaitOnFlagUntilTimeout>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d022      	beq.n	80097f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b2:	e853 3f00 	ldrex	r3, [r3]
 80097b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097be:	653b      	str	r3, [r7, #80]	@ 0x50
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80097ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e6      	bne.n	80097aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e063      	b.n	80098b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d149      	bne.n	8009892 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009806:	2200      	movs	r2, #0
 8009808:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f857 	bl	80098c0 <UART_WaitOnFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d03c      	beq.n	8009892 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	623b      	str	r3, [r7, #32]
   return(result);
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800982c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009836:	633b      	str	r3, [r7, #48]	@ 0x30
 8009838:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800983c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e6      	bne.n	8009818 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	60fb      	str	r3, [r7, #12]
   return(result);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f023 0301 	bic.w	r3, r3, #1
 8009860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3308      	adds	r3, #8
 8009868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800986a:	61fa      	str	r2, [r7, #28]
 800986c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	69b9      	ldr	r1, [r7, #24]
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	617b      	str	r3, [r7, #20]
   return(result);
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e5      	bne.n	800984a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2220      	movs	r2, #32
 8009882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e012      	b.n	80098b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2220      	movs	r2, #32
 800989e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3758      	adds	r7, #88	@ 0x58
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	4613      	mov	r3, r2
 80098ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098d0:	e04f      	b.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098d8:	d04b      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098da:	f7f8 f80d 	bl	80018f8 <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d302      	bcc.n	80098f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e04e      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d037      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2b80      	cmp	r3, #128	@ 0x80
 8009906:	d034      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2b40      	cmp	r3, #64	@ 0x40
 800990c:	d031      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	f003 0308 	and.w	r3, r3, #8
 8009918:	2b08      	cmp	r3, #8
 800991a:	d110      	bne.n	800993e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2208      	movs	r2, #8
 8009922:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 f95b 	bl	8009be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2208      	movs	r2, #8
 800992e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e029      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800994c:	d111      	bne.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 f941 	bl	8009be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2220      	movs	r2, #32
 8009962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e00f      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69da      	ldr	r2, [r3, #28]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4013      	ands	r3, r2
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	429a      	cmp	r2, r3
 8009980:	bf0c      	ite	eq
 8009982:	2301      	moveq	r3, #1
 8009984:	2300      	movne	r3, #0
 8009986:	b2db      	uxtb	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	429a      	cmp	r2, r3
 800998e:	d0a0      	beq.n	80098d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800999c:	b480      	push	{r7}
 800999e:	b0a3      	sub	sp, #140	@ 0x8c
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	4613      	mov	r3, r2
 80099a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	88fa      	ldrh	r2, [r7, #6]
 80099b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	88fa      	ldrh	r2, [r7, #6]
 80099bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ce:	d10e      	bne.n	80099ee <UART_Start_Receive_IT+0x52>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d105      	bne.n	80099e4 <UART_Start_Receive_IT+0x48>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80099de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80099e2:	e02d      	b.n	8009a40 <UART_Start_Receive_IT+0xa4>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	22ff      	movs	r2, #255	@ 0xff
 80099e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80099ec:	e028      	b.n	8009a40 <UART_Start_Receive_IT+0xa4>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10d      	bne.n	8009a12 <UART_Start_Receive_IT+0x76>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d104      	bne.n	8009a08 <UART_Start_Receive_IT+0x6c>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	22ff      	movs	r2, #255	@ 0xff
 8009a02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a06:	e01b      	b.n	8009a40 <UART_Start_Receive_IT+0xa4>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	227f      	movs	r2, #127	@ 0x7f
 8009a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a10:	e016      	b.n	8009a40 <UART_Start_Receive_IT+0xa4>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a1a:	d10d      	bne.n	8009a38 <UART_Start_Receive_IT+0x9c>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d104      	bne.n	8009a2e <UART_Start_Receive_IT+0x92>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	227f      	movs	r2, #127	@ 0x7f
 8009a28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a2c:	e008      	b.n	8009a40 <UART_Start_Receive_IT+0xa4>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	223f      	movs	r2, #63	@ 0x3f
 8009a32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a36:	e003      	b.n	8009a40 <UART_Start_Receive_IT+0xa4>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2222      	movs	r2, #34	@ 0x22
 8009a4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3308      	adds	r3, #8
 8009a56:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a5a:	e853 3f00 	ldrex	r3, [r3]
 8009a5e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009a60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009a74:	673a      	str	r2, [r7, #112]	@ 0x70
 8009a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a78:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009a7a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009a7c:	e841 2300 	strex	r3, r2, [r1]
 8009a80:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009a82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e3      	bne.n	8009a50 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a90:	d14f      	bne.n	8009b32 <UART_Start_Receive_IT+0x196>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a98:	88fa      	ldrh	r2, [r7, #6]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d349      	bcc.n	8009b32 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aa6:	d107      	bne.n	8009ab8 <UART_Start_Receive_IT+0x11c>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d103      	bne.n	8009ab8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4a47      	ldr	r2, [pc, #284]	@ (8009bd0 <UART_Start_Receive_IT+0x234>)
 8009ab4:	675a      	str	r2, [r3, #116]	@ 0x74
 8009ab6:	e002      	b.n	8009abe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	4a46      	ldr	r2, [pc, #280]	@ (8009bd4 <UART_Start_Receive_IT+0x238>)
 8009abc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d01a      	beq.n	8009afc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ace:	e853 3f00 	ldrex	r3, [r3]
 8009ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ada:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009aea:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009aee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009af0:	e841 2300 	strex	r3, r2, [r1]
 8009af4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e4      	bne.n	8009ac6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3308      	adds	r3, #8
 8009b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b06:	e853 3f00 	ldrex	r3, [r3]
 8009b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009b1c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009b1e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b24:	e841 2300 	strex	r3, r2, [r1]
 8009b28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e5      	bne.n	8009afc <UART_Start_Receive_IT+0x160>
 8009b30:	e046      	b.n	8009bc0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b3a:	d107      	bne.n	8009b4c <UART_Start_Receive_IT+0x1b0>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d103      	bne.n	8009b4c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4a24      	ldr	r2, [pc, #144]	@ (8009bd8 <UART_Start_Receive_IT+0x23c>)
 8009b48:	675a      	str	r2, [r3, #116]	@ 0x74
 8009b4a:	e002      	b.n	8009b52 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4a23      	ldr	r2, [pc, #140]	@ (8009bdc <UART_Start_Receive_IT+0x240>)
 8009b50:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d019      	beq.n	8009b8e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b62:	e853 3f00 	ldrex	r3, [r3]
 8009b66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009b6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	461a      	mov	r2, r3
 8009b76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b7a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b80:	e841 2300 	strex	r3, r2, [r1]
 8009b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1e6      	bne.n	8009b5a <UART_Start_Receive_IT+0x1be>
 8009b8c:	e018      	b.n	8009bc0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	e853 3f00 	ldrex	r3, [r3]
 8009b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f043 0320 	orr.w	r3, r3, #32
 8009ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bac:	623b      	str	r3, [r7, #32]
 8009bae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb0:	69f9      	ldr	r1, [r7, #28]
 8009bb2:	6a3a      	ldr	r2, [r7, #32]
 8009bb4:	e841 2300 	strex	r3, r2, [r1]
 8009bb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1e6      	bne.n	8009b8e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	378c      	adds	r7, #140	@ 0x8c
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	0800a741 	.word	0x0800a741
 8009bd4:	0800a3dd 	.word	0x0800a3dd
 8009bd8:	0800a225 	.word	0x0800a225
 8009bdc:	0800a06d 	.word	0x0800a06d

08009be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b095      	sub	sp, #84	@ 0x54
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf0:	e853 3f00 	ldrex	r3, [r3]
 8009bf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c06:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e6      	bne.n	8009be8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8009ca8 <UART_EndRxTransfer+0xc8>)
 8009c2e:	4013      	ands	r3, r2
 8009c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3308      	adds	r3, #8
 8009c38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e5      	bne.n	8009c1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d118      	bne.n	8009c88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	e853 3f00 	ldrex	r3, [r3]
 8009c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f023 0310 	bic.w	r3, r3, #16
 8009c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	461a      	mov	r2, r3
 8009c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c74:	61bb      	str	r3, [r7, #24]
 8009c76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c78:	6979      	ldr	r1, [r7, #20]
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	e841 2300 	strex	r3, r2, [r1]
 8009c80:	613b      	str	r3, [r7, #16]
   return(result);
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1e6      	bne.n	8009c56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c9c:	bf00      	nop
 8009c9e:	3754      	adds	r7, #84	@ 0x54
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	effffffe 	.word	0xeffffffe

08009cac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f7fe ff32 	bl	8008b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cc8:	bf00      	nop
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b08f      	sub	sp, #60	@ 0x3c
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cde:	2b21      	cmp	r3, #33	@ 0x21
 8009ce0:	d14c      	bne.n	8009d7c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d132      	bne.n	8009d54 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	e853 3f00 	ldrex	r3, [r3]
 8009cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d0e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d14:	e841 2300 	strex	r3, r2, [r1]
 8009d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1e6      	bne.n	8009cee <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	e853 3f00 	ldrex	r3, [r3]
 8009d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3e:	61bb      	str	r3, [r7, #24]
 8009d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d42:	6979      	ldr	r1, [r7, #20]
 8009d44:	69ba      	ldr	r2, [r7, #24]
 8009d46:	e841 2300 	strex	r3, r2, [r1]
 8009d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1e6      	bne.n	8009d20 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009d52:	e013      	b.n	8009d7c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d58:	781a      	ldrb	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d64:	1c5a      	adds	r2, r3, #1
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3b01      	subs	r3, #1
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009d7c:	bf00      	nop
 8009d7e:	373c      	adds	r7, #60	@ 0x3c
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b091      	sub	sp, #68	@ 0x44
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d96:	2b21      	cmp	r3, #33	@ 0x21
 8009d98:	d151      	bne.n	8009e3e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d132      	bne.n	8009e0c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dae:	e853 3f00 	ldrex	r3, [r3]
 8009db2:	623b      	str	r3, [r7, #32]
   return(result);
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dcc:	e841 2300 	strex	r3, r2, [r1]
 8009dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e6      	bne.n	8009da6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	461a      	mov	r2, r3
 8009df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df6:	61fb      	str	r3, [r7, #28]
 8009df8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	69b9      	ldr	r1, [r7, #24]
 8009dfc:	69fa      	ldr	r2, [r7, #28]
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	617b      	str	r3, [r7, #20]
   return(result);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e6      	bne.n	8009dd8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009e0a:	e018      	b.n	8009e3e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e20:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e26:	1c9a      	adds	r2, r3, #2
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	3b01      	subs	r3, #1
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009e3e:	bf00      	nop
 8009e40:	3744      	adds	r7, #68	@ 0x44
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b091      	sub	sp, #68	@ 0x44
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e58:	2b21      	cmp	r3, #33	@ 0x21
 8009e5a:	d160      	bne.n	8009f1e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e62:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009e64:	e057      	b.n	8009f16 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d133      	bne.n	8009eda <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3308      	adds	r3, #8
 8009e78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	623b      	str	r3, [r7, #32]
   return(result);
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009e88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3308      	adds	r3, #8
 8009e90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e92:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e5      	bne.n	8009e72 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	e853 3f00 	ldrex	r3, [r3]
 8009eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec4:	61fb      	str	r3, [r7, #28]
 8009ec6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec8:	69b9      	ldr	r1, [r7, #24]
 8009eca:	69fa      	ldr	r2, [r7, #28]
 8009ecc:	e841 2300 	strex	r3, r2, [r1]
 8009ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1e6      	bne.n	8009ea6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009ed8:	e021      	b.n	8009f1e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d013      	beq.n	8009f10 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eec:	781a      	ldrb	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	3b01      	subs	r3, #1
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009f10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f12:	3b01      	subs	r3, #1
 8009f14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009f16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1a4      	bne.n	8009e66 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009f1c:	e7ff      	b.n	8009f1e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009f1e:	bf00      	nop
 8009f20:	3744      	adds	r7, #68	@ 0x44
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b091      	sub	sp, #68	@ 0x44
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f38:	2b21      	cmp	r3, #33	@ 0x21
 8009f3a:	d165      	bne.n	800a008 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f42:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009f44:	e05c      	b.n	800a000 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d133      	bne.n	8009fba <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3308      	adds	r3, #8
 8009f58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e5      	bne.n	8009f52 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	e853 3f00 	ldrex	r3, [r3]
 8009f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa4:	61bb      	str	r3, [r7, #24]
 8009fa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa8:	6979      	ldr	r1, [r7, #20]
 8009faa:	69ba      	ldr	r2, [r7, #24]
 8009fac:	e841 2300 	strex	r3, r2, [r1]
 8009fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1e6      	bne.n	8009f86 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009fb8:	e026      	b.n	800a008 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	69db      	ldr	r3, [r3, #28]
 8009fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d018      	beq.n	8009ffa <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fdc:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe2:	1c9a      	adds	r2, r3, #2
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009ffa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a000:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a002:	2b00      	cmp	r3, #0
 800a004:	d19f      	bne.n	8009f46 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a006:	e7ff      	b.n	800a008 <UART_TxISR_16BIT_FIFOEN+0xde>
 800a008:	bf00      	nop
 800a00a:	3744      	adds	r7, #68	@ 0x44
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	e853 3f00 	ldrex	r3, [r3]
 800a028:	60bb      	str	r3, [r7, #8]
   return(result);
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a030:	61fb      	str	r3, [r7, #28]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	61bb      	str	r3, [r7, #24]
 800a03c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03e:	6979      	ldr	r1, [r7, #20]
 800a040:	69ba      	ldr	r2, [r7, #24]
 800a042:	e841 2300 	strex	r3, r2, [r1]
 800a046:	613b      	str	r3, [r7, #16]
   return(result);
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1e6      	bne.n	800a01c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2220      	movs	r2, #32
 800a052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7fe fd51 	bl	8008b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a062:	bf00      	nop
 800a064:	3720      	adds	r7, #32
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b09c      	sub	sp, #112	@ 0x70
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a07a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a084:	2b22      	cmp	r3, #34	@ 0x22
 800a086:	f040 80be 	bne.w	800a206 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a090:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a094:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a098:	b2d9      	uxtb	r1, r3
 800a09a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0a4:	400a      	ands	r2, r1
 800a0a6:	b2d2      	uxtb	r2, r2
 800a0a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f040 80a1 	bne.w	800a216 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a0f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0fa:	e841 2300 	strex	r3, r2, [r1]
 800a0fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e6      	bne.n	800a0d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3308      	adds	r3, #8
 800a10c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a110:	e853 3f00 	ldrex	r3, [r3]
 800a114:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a118:	f023 0301 	bic.w	r3, r3, #1
 800a11c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3308      	adds	r3, #8
 800a124:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a126:	647a      	str	r2, [r7, #68]	@ 0x44
 800a128:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a12c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e5      	bne.n	800a106 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2220      	movs	r2, #32
 800a13e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a33      	ldr	r2, [pc, #204]	@ (800a220 <UART_RxISR_8BIT+0x1b4>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d01f      	beq.n	800a198 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d018      	beq.n	800a198 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16e:	e853 3f00 	ldrex	r3, [r3]
 800a172:	623b      	str	r3, [r7, #32]
   return(result);
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a17a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a184:	633b      	str	r3, [r7, #48]	@ 0x30
 800a186:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a188:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a18a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a18c:	e841 2300 	strex	r3, r2, [r1]
 800a190:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e6      	bne.n	800a166 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d12e      	bne.n	800a1fe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	e853 3f00 	ldrex	r3, [r3]
 800a1b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f023 0310 	bic.w	r3, r3, #16
 800a1ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1c4:	61fb      	str	r3, [r7, #28]
 800a1c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	69b9      	ldr	r1, [r7, #24]
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	e841 2300 	strex	r3, r2, [r1]
 800a1d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e6      	bne.n	800a1a6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	f003 0310 	and.w	r3, r3, #16
 800a1e2:	2b10      	cmp	r3, #16
 800a1e4:	d103      	bne.n	800a1ee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2210      	movs	r2, #16
 800a1ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7fe fca2 	bl	8008b40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1fc:	e00b      	b.n	800a216 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7fe fc8a 	bl	8008b18 <HAL_UART_RxCpltCallback>
}
 800a204:	e007      	b.n	800a216 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	699a      	ldr	r2, [r3, #24]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f042 0208 	orr.w	r2, r2, #8
 800a214:	619a      	str	r2, [r3, #24]
}
 800a216:	bf00      	nop
 800a218:	3770      	adds	r7, #112	@ 0x70
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	58000c00 	.word	0x58000c00

0800a224 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b09c      	sub	sp, #112	@ 0x70
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a232:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a23c:	2b22      	cmp	r3, #34	@ 0x22
 800a23e:	f040 80be 	bne.w	800a3be <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a248:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a250:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a252:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a256:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a25a:	4013      	ands	r3, r2
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a260:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a266:	1c9a      	adds	r2, r3, #2
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a272:	b29b      	uxth	r3, r3
 800a274:	3b01      	subs	r3, #1
 800a276:	b29a      	uxth	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a284:	b29b      	uxth	r3, r3
 800a286:	2b00      	cmp	r3, #0
 800a288:	f040 80a1 	bne.w	800a3ce <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a294:	e853 3f00 	ldrex	r3, [r3]
 800a298:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a29a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a29c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2a0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2ac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a2b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a2b2:	e841 2300 	strex	r3, r2, [r1]
 800a2b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a2b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1e6      	bne.n	800a28c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c8:	e853 3f00 	ldrex	r3, [r3]
 800a2cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d0:	f023 0301 	bic.w	r3, r3, #1
 800a2d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3308      	adds	r3, #8
 800a2dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a2de:	643a      	str	r2, [r7, #64]	@ 0x40
 800a2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2e6:	e841 2300 	strex	r3, r2, [r1]
 800a2ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1e5      	bne.n	800a2be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2220      	movs	r2, #32
 800a2f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a33      	ldr	r2, [pc, #204]	@ (800a3d8 <UART_RxISR_16BIT+0x1b4>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d01f      	beq.n	800a350 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d018      	beq.n	800a350 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a332:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	461a      	mov	r2, r3
 800a33a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a33c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a33e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e6      	bne.n	800a31e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a354:	2b01      	cmp	r3, #1
 800a356:	d12e      	bne.n	800a3b6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	e853 3f00 	ldrex	r3, [r3]
 800a36a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f023 0310 	bic.w	r3, r3, #16
 800a372:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a37c:	61bb      	str	r3, [r7, #24]
 800a37e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6979      	ldr	r1, [r7, #20]
 800a382:	69ba      	ldr	r2, [r7, #24]
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	613b      	str	r3, [r7, #16]
   return(result);
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e6      	bne.n	800a35e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	f003 0310 	and.w	r3, r3, #16
 800a39a:	2b10      	cmp	r3, #16
 800a39c:	d103      	bne.n	800a3a6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2210      	movs	r2, #16
 800a3a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7fe fbc6 	bl	8008b40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3b4:	e00b      	b.n	800a3ce <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7fe fbae 	bl	8008b18 <HAL_UART_RxCpltCallback>
}
 800a3bc:	e007      	b.n	800a3ce <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	699a      	ldr	r2, [r3, #24]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f042 0208 	orr.w	r2, r2, #8
 800a3cc:	619a      	str	r2, [r3, #24]
}
 800a3ce:	bf00      	nop
 800a3d0:	3770      	adds	r7, #112	@ 0x70
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	58000c00 	.word	0x58000c00

0800a3dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b0ac      	sub	sp, #176	@ 0xb0
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a3ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a412:	2b22      	cmp	r3, #34	@ 0x22
 800a414:	f040 8181 	bne.w	800a71a <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a41e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a422:	e124      	b.n	800a66e <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a42e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a432:	b2d9      	uxtb	r1, r3
 800a434:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a43e:	400a      	ands	r2, r1
 800a440:	b2d2      	uxtb	r2, r2
 800a442:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a454:	b29b      	uxth	r3, r3
 800a456:	3b01      	subs	r3, #1
 800a458:	b29a      	uxth	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	69db      	ldr	r3, [r3, #28]
 800a466:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a46a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a46e:	f003 0307 	and.w	r3, r3, #7
 800a472:	2b00      	cmp	r3, #0
 800a474:	d053      	beq.n	800a51e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d011      	beq.n	800a4a6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00b      	beq.n	800a4a6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2201      	movs	r2, #1
 800a494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a49c:	f043 0201 	orr.w	r2, r3, #1
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4aa:	f003 0302 	and.w	r3, r3, #2
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d011      	beq.n	800a4d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a4b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00b      	beq.n	800a4d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4cc:	f043 0204 	orr.w	r2, r3, #4
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4da:	f003 0304 	and.w	r3, r3, #4
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d011      	beq.n	800a506 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a4e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00b      	beq.n	800a506 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2204      	movs	r2, #4
 800a4f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4fc:	f043 0202 	orr.w	r2, r3, #2
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d006      	beq.n	800a51e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7fe fb0b 	bl	8008b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a524:	b29b      	uxth	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	f040 80a1 	bne.w	800a66e <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a534:	e853 3f00 	ldrex	r3, [r3]
 800a538:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a53a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a53c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	461a      	mov	r2, r3
 800a54a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a54e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a550:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a552:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a554:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a556:	e841 2300 	strex	r3, r2, [r1]
 800a55a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a55c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1e4      	bne.n	800a52c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3308      	adds	r3, #8
 800a568:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a56c:	e853 3f00 	ldrex	r3, [r3]
 800a570:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a572:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a574:	4b6f      	ldr	r3, [pc, #444]	@ (800a734 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a576:	4013      	ands	r3, r2
 800a578:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3308      	adds	r3, #8
 800a582:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a586:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a588:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a58c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a58e:	e841 2300 	strex	r3, r2, [r1]
 800a592:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1e3      	bne.n	800a562 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a61      	ldr	r2, [pc, #388]	@ (800a738 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d021      	beq.n	800a5fc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d01a      	beq.n	800a5fc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5ce:	e853 3f00 	ldrex	r3, [r3]
 800a5d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a5d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a5da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a5e8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5ea:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a5ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a5f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e4      	bne.n	800a5c6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a600:	2b01      	cmp	r3, #1
 800a602:	d130      	bne.n	800a666 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a612:	e853 3f00 	ldrex	r3, [r3]
 800a616:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61a:	f023 0310 	bic.w	r3, r3, #16
 800a61e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a62c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a62e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a630:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a632:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a634:	e841 2300 	strex	r3, r2, [r1]
 800a638:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1e4      	bne.n	800a60a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	f003 0310 	and.w	r3, r3, #16
 800a64a:	2b10      	cmp	r3, #16
 800a64c:	d103      	bne.n	800a656 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2210      	movs	r2, #16
 800a654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a65c:	4619      	mov	r1, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7fe fa6e 	bl	8008b40 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a664:	e00e      	b.n	800a684 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7fe fa56 	bl	8008b18 <HAL_UART_RxCpltCallback>
        break;
 800a66c:	e00a      	b.n	800a684 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a66e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a672:	2b00      	cmp	r3, #0
 800a674:	d006      	beq.n	800a684 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800a676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a67a:	f003 0320 	and.w	r3, r3, #32
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f47f aed0 	bne.w	800a424 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a68a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a68e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a692:	2b00      	cmp	r3, #0
 800a694:	d049      	beq.n	800a72a <UART_RxISR_8BIT_FIFOEN+0x34e>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a69c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d242      	bcs.n	800a72a <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3308      	adds	r3, #8
 800a6aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ac:	6a3b      	ldr	r3, [r7, #32]
 800a6ae:	e853 3f00 	ldrex	r3, [r3]
 800a6b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3308      	adds	r3, #8
 800a6c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a6c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6d0:	e841 2300 	strex	r3, r2, [r1]
 800a6d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1e3      	bne.n	800a6a4 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a17      	ldr	r2, [pc, #92]	@ (800a73c <UART_RxISR_8BIT_FIFOEN+0x360>)
 800a6e0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	e853 3f00 	ldrex	r3, [r3]
 800a6ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f043 0320 	orr.w	r3, r3, #32
 800a6f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a704:	61bb      	str	r3, [r7, #24]
 800a706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a708:	6979      	ldr	r1, [r7, #20]
 800a70a:	69ba      	ldr	r2, [r7, #24]
 800a70c:	e841 2300 	strex	r3, r2, [r1]
 800a710:	613b      	str	r3, [r7, #16]
   return(result);
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1e4      	bne.n	800a6e2 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a718:	e007      	b.n	800a72a <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	699a      	ldr	r2, [r3, #24]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f042 0208 	orr.w	r2, r2, #8
 800a728:	619a      	str	r2, [r3, #24]
}
 800a72a:	bf00      	nop
 800a72c:	37b0      	adds	r7, #176	@ 0xb0
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	effffffe 	.word	0xeffffffe
 800a738:	58000c00 	.word	0x58000c00
 800a73c:	0800a06d 	.word	0x0800a06d

0800a740 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b0ae      	sub	sp, #184	@ 0xb8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a74e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a776:	2b22      	cmp	r3, #34	@ 0x22
 800a778:	f040 8185 	bne.w	800aa86 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a782:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a786:	e128      	b.n	800a9da <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a796:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a79a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a79e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a7aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7b0:	1c9a      	adds	r2, r3, #2
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a7d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d053      	beq.n	800a886 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d011      	beq.n	800a80e <UART_RxISR_16BIT_FIFOEN+0xce>
 800a7ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00b      	beq.n	800a80e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a804:	f043 0201 	orr.w	r2, r3, #1
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a80e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a812:	f003 0302 	and.w	r3, r3, #2
 800a816:	2b00      	cmp	r3, #0
 800a818:	d011      	beq.n	800a83e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a81a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00b      	beq.n	800a83e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2202      	movs	r2, #2
 800a82c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a834:	f043 0204 	orr.w	r2, r3, #4
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a83e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a842:	f003 0304 	and.w	r3, r3, #4
 800a846:	2b00      	cmp	r3, #0
 800a848:	d011      	beq.n	800a86e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a84a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00b      	beq.n	800a86e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2204      	movs	r2, #4
 800a85c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a864:	f043 0202 	orr.w	r2, r3, #2
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a874:	2b00      	cmp	r3, #0
 800a876:	d006      	beq.n	800a886 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7fe f957 	bl	8008b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f040 80a3 	bne.w	800a9da <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a89c:	e853 3f00 	ldrex	r3, [r3]
 800a8a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a8a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a8ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a8be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a8c2:	e841 2300 	strex	r3, r2, [r1]
 800a8c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a8c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1e2      	bne.n	800a894 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8d8:	e853 3f00 	ldrex	r3, [r3]
 800a8dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a8de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a8e0:	4b6f      	ldr	r3, [pc, #444]	@ (800aaa0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3308      	adds	r3, #8
 800a8ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a8f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a8f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a8f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8fa:	e841 2300 	strex	r3, r2, [r1]
 800a8fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a900:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e3      	bne.n	800a8ce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2220      	movs	r2, #32
 800a90a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a61      	ldr	r2, [pc, #388]	@ (800aaa4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d021      	beq.n	800a968 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d01a      	beq.n	800a968 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a93a:	e853 3f00 	ldrex	r3, [r3]
 800a93e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a942:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a954:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a956:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a958:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a95a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a95c:	e841 2300 	strex	r3, r2, [r1]
 800a960:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e4      	bne.n	800a932 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d130      	bne.n	800a9d2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97e:	e853 3f00 	ldrex	r3, [r3]
 800a982:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a986:	f023 0310 	bic.w	r3, r3, #16
 800a98a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a998:	647b      	str	r3, [r7, #68]	@ 0x44
 800a99a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a99e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9a0:	e841 2300 	strex	r3, r2, [r1]
 800a9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a9a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e4      	bne.n	800a976 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	f003 0310 	and.w	r3, r3, #16
 800a9b6:	2b10      	cmp	r3, #16
 800a9b8:	d103      	bne.n	800a9c2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2210      	movs	r2, #16
 800a9c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7fe f8b8 	bl	8008b40 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a9d0:	e00e      	b.n	800a9f0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7fe f8a0 	bl	8008b18 <HAL_UART_RxCpltCallback>
        break;
 800a9d8:	e00a      	b.n	800a9f0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a9da:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d006      	beq.n	800a9f0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800a9e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a9e6:	f003 0320 	and.w	r3, r3, #32
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f47f aecc 	bne.w	800a788 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9f6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a9fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d049      	beq.n	800aa96 <UART_RxISR_16BIT_FIFOEN+0x356>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aa08:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d242      	bcs.n	800aa96 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3308      	adds	r3, #8
 800aa16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	623b      	str	r3, [r7, #32]
   return(result);
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3308      	adds	r3, #8
 800aa30:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800aa34:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa3c:	e841 2300 	strex	r3, r2, [r1]
 800aa40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e3      	bne.n	800aa10 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a17      	ldr	r2, [pc, #92]	@ (800aaa8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800aa4c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f043 0320 	orr.w	r3, r3, #32
 800aa62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa70:	61fb      	str	r3, [r7, #28]
 800aa72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa74:	69b9      	ldr	r1, [r7, #24]
 800aa76:	69fa      	ldr	r2, [r7, #28]
 800aa78:	e841 2300 	strex	r3, r2, [r1]
 800aa7c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e4      	bne.n	800aa4e <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa84:	e007      	b.n	800aa96 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	699a      	ldr	r2, [r3, #24]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f042 0208 	orr.w	r2, r2, #8
 800aa94:	619a      	str	r2, [r3, #24]
}
 800aa96:	bf00      	nop
 800aa98:	37b8      	adds	r7, #184	@ 0xb8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	effffffe 	.word	0xeffffffe
 800aaa4:	58000c00 	.word	0x58000c00
 800aaa8:	0800a225 	.word	0x0800a225

0800aaac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d101      	bne.n	800aafe <HAL_UARTEx_DisableFifoMode+0x16>
 800aafa:	2302      	movs	r3, #2
 800aafc:	e027      	b.n	800ab4e <HAL_UARTEx_DisableFifoMode+0x66>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2224      	movs	r2, #36	@ 0x24
 800ab0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f022 0201 	bic.w	r2, r2, #1
 800ab24:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ab2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d101      	bne.n	800ab72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab6e:	2302      	movs	r3, #2
 800ab70:	e02d      	b.n	800abce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2224      	movs	r2, #36	@ 0x24
 800ab7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f022 0201 	bic.w	r2, r2, #1
 800ab98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	430a      	orrs	r2, r1
 800abac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f850 	bl	800ac54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2220      	movs	r2, #32
 800abc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d101      	bne.n	800abee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800abea:	2302      	movs	r3, #2
 800abec:	e02d      	b.n	800ac4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2224      	movs	r2, #36	@ 0x24
 800abfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f022 0201 	bic.w	r2, r2, #1
 800ac14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	430a      	orrs	r2, r1
 800ac28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f812 	bl	800ac54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2220      	movs	r2, #32
 800ac3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
	...

0800ac54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d108      	bne.n	800ac76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac74:	e031      	b.n	800acda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac76:	2310      	movs	r3, #16
 800ac78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac7a:	2310      	movs	r3, #16
 800ac7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	0e5b      	lsrs	r3, r3, #25
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	f003 0307 	and.w	r3, r3, #7
 800ac8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	0f5b      	lsrs	r3, r3, #29
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	f003 0307 	and.w	r3, r3, #7
 800ac9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac9e:	7bbb      	ldrb	r3, [r7, #14]
 800aca0:	7b3a      	ldrb	r2, [r7, #12]
 800aca2:	4911      	ldr	r1, [pc, #68]	@ (800ace8 <UARTEx_SetNbDataToProcess+0x94>)
 800aca4:	5c8a      	ldrb	r2, [r1, r2]
 800aca6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800acaa:	7b3a      	ldrb	r2, [r7, #12]
 800acac:	490f      	ldr	r1, [pc, #60]	@ (800acec <UARTEx_SetNbDataToProcess+0x98>)
 800acae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800acb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
 800acbe:	7b7a      	ldrb	r2, [r7, #13]
 800acc0:	4909      	ldr	r1, [pc, #36]	@ (800ace8 <UARTEx_SetNbDataToProcess+0x94>)
 800acc2:	5c8a      	ldrb	r2, [r1, r2]
 800acc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800acc8:	7b7a      	ldrb	r2, [r7, #13]
 800acca:	4908      	ldr	r1, [pc, #32]	@ (800acec <UARTEx_SetNbDataToProcess+0x98>)
 800accc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acce:	fb93 f3f2 	sdiv	r3, r3, r2
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800acda:	bf00      	nop
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	0800f828 	.word	0x0800f828
 800acec:	0800f830 	.word	0x0800f830

0800acf0 <at_echo_off>:
{
	mobile_sendCommand("\r\nATE1\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_echo_off (char* recived)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nATE0\r\n", COMMAND_GENERAL_DELAY, recived);
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	f240 5114 	movw	r1, #1300	@ 0x514
 800acfe:	4803      	ldr	r0, [pc, #12]	@ (800ad0c <at_echo_off+0x1c>)
 800ad00:	f000 f898 	bl	800ae34 <mobile_sendCommand>
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	0800f5a0 	.word	0x0800f5a0

0800ad10 <at_network_mode>:
{
	mobile_sendCommand("\r\nAT+CPIN?\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_network_mode (char* recived)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CNMP=38\r\n", COMMAND_GENERAL_DELAY, recived);
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	f240 5114 	movw	r1, #1300	@ 0x514
 800ad1e:	4803      	ldr	r0, [pc, #12]	@ (800ad2c <at_network_mode+0x1c>)
 800ad20:	f000 f888 	bl	800ae34 <mobile_sendCommand>
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	0800f638 	.word	0x0800f638

0800ad30 <at_set_band>:

void at_set_band(char* recived)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CMNB=3\r\n", COMMAND_GENERAL_DELAY, recived);
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	f240 5114 	movw	r1, #1300	@ 0x514
 800ad3e:	4803      	ldr	r0, [pc, #12]	@ (800ad4c <at_set_band+0x1c>)
 800ad40:	f000 f878 	bl	800ae34 <mobile_sendCommand>
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	0800f648 	.word	0x0800f648

0800ad50 <at_gprs_init>:
{
	mobile_sendCommand("\r\nAT+CBANDCFG=\"CAT-M\",3,20\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_gprs_init (char* recived)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CGACT=1,1\r\n", COMMAND_GENERAL_DELAY, recived);
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	f240 5114 	movw	r1, #1300	@ 0x514
 800ad5e:	4803      	ldr	r0, [pc, #12]	@ (800ad6c <at_gprs_init+0x1c>)
 800ad60:	f000 f868 	bl	800ae34 <mobile_sendCommand>
}
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	0800f688 	.word	0x0800f688

0800ad70 <at_network_attach_request>:
	fprintf(buffer,"\r\nAT%PINGCMD=0,%s,%d\r\n",MONGO_DB_IP,count);
	mobile_sendCommand(buffer, COMMAND_GENERAL_DELAY, recived);
}

void at_network_attach_request (char* recived)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CGATT=1\r\n", COMMAND_GENERAL_DELAY, recived);
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	f240 5114 	movw	r1, #1300	@ 0x514
 800ad7e:	4803      	ldr	r0, [pc, #12]	@ (800ad8c <at_network_attach_request+0x1c>)
 800ad80:	f000 f858 	bl	800ae34 <mobile_sendCommand>
}
 800ad84:	bf00      	nop
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	0800f6d4 	.word	0x0800f6d4

0800ad90 <at_init_http_connection>:
{
	mobile_sendCommand("\r\nAT+CIPSRIP=1\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_init_http_connection (char* recived)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]

	//mobile_sendCommand("\r\nAT+SAPBR=1,1\r\n", COMMAND_GENERAL_DELAY, recived);

	//mobile_sendCommand("\r\nAT+SAPBR=2,1\r\n", COMMAND_GENERAL_DELAY, recived);

	mobile_sendCommand("\r\nAT+HTTPINIT\r\n", COMMAND_GENERAL_DELAY, recived);
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	f240 5114 	movw	r1, #1300	@ 0x514
 800ad9e:	4806      	ldr	r0, [pc, #24]	@ (800adb8 <at_init_http_connection+0x28>)
 800ada0:	f000 f848 	bl	800ae34 <mobile_sendCommand>

	mobile_sendCommand("\r\nAT+HTTPPARA=\"CID\",1\r\n", COMMAND_GENERAL_DELAY, recived);
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	f240 5114 	movw	r1, #1300	@ 0x514
 800adaa:	4804      	ldr	r0, [pc, #16]	@ (800adbc <at_init_http_connection+0x2c>)
 800adac:	f000 f842 	bl	800ae34 <mobile_sendCommand>

}
 800adb0:	bf00      	nop
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	0800f714 	.word	0x0800f714
 800adbc:	0800f724 	.word	0x0800f724

0800adc0 <at_lte_send>:
{
	mobile_sendCommand("\r\nAT+CIPHEAD=1\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_lte_send(char* site, char* to_send,char* recived)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b0a4      	sub	sp, #144	@ 0x90
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
	char buffer[MAX_LTE_MSG_LEN];
	sprintf(buffer,"AT+HTTPPARA=\"URL\",\"%s%s\"",site,to_send);
 800adcc:	f107 0010 	add.w	r0, r7, #16
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	4907      	ldr	r1, [pc, #28]	@ (800adf4 <at_lte_send+0x34>)
 800add6:	f001 f85b 	bl	800be90 <siprintf>
	mobile_sendCommand(buffer, 5000, recived);
 800adda:	f107 0310 	add.w	r3, r7, #16
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ade4:	4618      	mov	r0, r3
 800ade6:	f000 f825 	bl	800ae34 <mobile_sendCommand>
}
 800adea:	bf00      	nop
 800adec:	3790      	adds	r7, #144	@ 0x90
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	0800f750 	.word	0x0800f750

0800adf8 <at_network_pdp_activate>:


//nbiot
void at_network_pdp_activate(char* recived)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b092      	sub	sp, #72	@ 0x48
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
	char buffer[64];
	fprintf(buffer,"\r\nAT+CGDCONT=1,\"%s\",\"%s\"\r\n",MONGO_DB_PDP_TYPE,SIMBASE_APN);
 800ae00:	f107 0008 	add.w	r0, r7, #8
 800ae04:	4b08      	ldr	r3, [pc, #32]	@ (800ae28 <at_network_pdp_activate+0x30>)
 800ae06:	4a09      	ldr	r2, [pc, #36]	@ (800ae2c <at_network_pdp_activate+0x34>)
 800ae08:	4909      	ldr	r1, [pc, #36]	@ (800ae30 <at_network_pdp_activate+0x38>)
 800ae0a:	f001 f811 	bl	800be30 <fiprintf>
	mobile_sendCommand(buffer, COMMAND_GENERAL_DELAY, recived);
 800ae0e:	f107 0308 	add.w	r3, r7, #8
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	f240 5114 	movw	r1, #1300	@ 0x514
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 f80b 	bl	800ae34 <mobile_sendCommand>

}
 800ae1e:	bf00      	nop
 800ae20:	3748      	adds	r7, #72	@ 0x48
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	0800f6e4 	.word	0x0800f6e4
 800ae2c:	0800f76c 	.word	0x0800f76c
 800ae30:	0800f770 	.word	0x0800f770

0800ae34 <mobile_sendCommand>:
}

//----------------------------------------------------------------------------------------

void mobile_sendCommand(char * command, unsigned int timeout, char * recived)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(MOBILE_COMMS_UART, command, strlen(command));
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7f5 fa9d 	bl	8000380 <strlen>
 800ae46:	4603      	mov	r3, r0
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	68f9      	ldr	r1, [r7, #12]
 800ae4e:	4807      	ldr	r0, [pc, #28]	@ (800ae6c <mobile_sendCommand+0x38>)
 800ae50:	f7fd f9a2 	bl	8008198 <HAL_UART_Transmit_IT>
	HAL_Delay(timeout);
 800ae54:	68b8      	ldr	r0, [r7, #8]
 800ae56:	f7f6 fd5b 	bl	8001910 <HAL_Delay>
	HAL_UART_Receive_IT(MOBILE_COMMS_UART, recived, 32);
 800ae5a:	2220      	movs	r2, #32
 800ae5c:	6879      	ldr	r1, [r7, #4]
 800ae5e:	4803      	ldr	r0, [pc, #12]	@ (800ae6c <mobile_sendCommand+0x38>)
 800ae60:	f7fd fa2e 	bl	80082c0 <HAL_UART_Receive_IT>
}
 800ae64:	bf00      	nop
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	240002bc 	.word	0x240002bc

0800ae70 <init_package_data>:
package_data_t package_data[2];
char package_data_index = 0;


void init_package_data(void)
{
 800ae70:	b480      	push	{r7}
 800ae72:	af00      	add	r7, sp, #0
	package_data[0].packege_number = 0;
 800ae74:	4b08      	ldr	r3, [pc, #32]	@ (800ae98 <init_package_data+0x28>)
 800ae76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f8a3 27ac 	strh.w	r2, [r3, #1964]	@ 0x7ac
	package_data[1].packege_number = 0;
 800ae80:	4b05      	ldr	r3, [pc, #20]	@ (800ae98 <init_package_data+0x28>)
 800ae82:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ae86:	2200      	movs	r2, #0
 800ae88:	f8a3 2f5c 	strh.w	r2, [r3, #3932]	@ 0xf5c
}
 800ae8c:	bf00      	nop
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	240003e8 	.word	0x240003e8

0800ae9c <write_package_data>:

package_data_t* write_package_data()
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	af00      	add	r7, sp, #0
    return &package_data[package_data_index];
 800aea0:	4b06      	ldr	r3, [pc, #24]	@ (800aebc <write_package_data+0x20>)
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	461a      	mov	r2, r3
 800aea6:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 800aeaa:	fb02 f303 	mul.w	r3, r2, r3
 800aeae:	4a04      	ldr	r2, [pc, #16]	@ (800aec0 <write_package_data+0x24>)
 800aeb0:	4413      	add	r3, r2
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr
 800aebc:	24003348 	.word	0x24003348
 800aec0:	240003e8 	.word	0x240003e8

0800aec4 <manager_init>:




void manager_init(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0
	//Memory
	init_package_data();
 800aec8:	f7ff ffd2 	bl	800ae70 <init_package_data>
	//Batteries
	battery_init();
 800aecc:	f000 f818 	bl	800af00 <battery_init>
	//Temperature
	temperature_init();
 800aed0:	f000 f8c8 	bl	800b064 <temperature_init>
	//CNSS
	//cnss_init();
	//IMU
	imu_init();
 800aed4:	f000 f81c 	bl	800af10 <imu_init>
	//NB_IoT
	nb_iot_init();
 800aed8:	f000 f876 	bl	800afc8 <nb_iot_init>
	//SD_CARD
	sd_card_init();
 800aedc:	f000 f8b4 	bl	800b048 <sd_card_init>

}
 800aee0:	bf00      	nop
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <manager_update>:
void manager_update(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0

	//Batteries
	//battery_update(); //verified
	//IMU
	imu_update(); //not tested
 800aee8:	f000 f840 	bl	800af6c <imu_update>


	//CNSS
	//cnss_update(); //working but not tested
	//NB_IoT
	nb_iot_update(); //not working
 800aeec:	f000 f898 	bl	800b020 <nb_iot_update>
	//SD_CARD
	sd_card_update();
 800aef0:	f000 f8b1 	bl	800b056 <sd_card_update>


	HAL_Delay(2000);
 800aef4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800aef8:	f7f6 fd0a 	bl	8001910 <HAL_Delay>
}
 800aefc:	bf00      	nop
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <battery_init>:
 *      Author: viny
 */
#include "battery_behavior.h"

void battery_init (void)
{
 800af00:	b480      	push	{r7}
 800af02:	af00      	add	r7, sp, #0

}
 800af04:	bf00      	nop
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
	...

0800af10 <imu_init>:

#include "imu_behavior.h"
unsigned int sample_count = 0;

void imu_init (void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af02      	add	r7, sp, #8
	//buf[0] = 0x2D; buf[1] = 0x08;
	//HAL_I2C_Master_Transmit(hi2c, ADXL345_ADDR, buf, 2, 100);

	//GYRO
	// Set sample rate divider to reduce power (e.g., 125Hz)
	buf[0] = 0x15; buf[1] = 0x07; // Divider = 7 → Fs = 1kHz / (7+1) = 125Hz
 800af16:	2315      	movs	r3, #21
 800af18:	713b      	strb	r3, [r7, #4]
 800af1a:	2307      	movs	r3, #7
 800af1c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(IMU_I2C, ITG3205_ADDR, buf, 2, 100);
 800af1e:	1d3a      	adds	r2, r7, #4
 800af20:	2364      	movs	r3, #100	@ 0x64
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	2302      	movs	r3, #2
 800af26:	21d0      	movs	r1, #208	@ 0xd0
 800af28:	480f      	ldr	r0, [pc, #60]	@ (800af68 <imu_init+0x58>)
 800af2a:	f7f8 fe6f 	bl	8003c0c <HAL_I2C_Master_Transmit>

	// Set DLPF and Full Scale: 0x18 = FS ±2000°/s, low-pass filter at 42Hz
	buf[0] = 0x16; buf[1] = 0x1B;
 800af2e:	2316      	movs	r3, #22
 800af30:	713b      	strb	r3, [r7, #4]
 800af32:	231b      	movs	r3, #27
 800af34:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(IMU_I2C, ITG3205_ADDR, buf, 2, 100);
 800af36:	1d3a      	adds	r2, r7, #4
 800af38:	2364      	movs	r3, #100	@ 0x64
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	2302      	movs	r3, #2
 800af3e:	21d0      	movs	r1, #208	@ 0xd0
 800af40:	4809      	ldr	r0, [pc, #36]	@ (800af68 <imu_init+0x58>)
 800af42:	f7f8 fe63 	bl	8003c0c <HAL_I2C_Master_Transmit>

	// Power management: select Z gyro as PLL source (low-power + stability)
	buf[0] = 0x3E; buf[1] = 0x03;
 800af46:	233e      	movs	r3, #62	@ 0x3e
 800af48:	713b      	strb	r3, [r7, #4]
 800af4a:	2303      	movs	r3, #3
 800af4c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(IMU_I2C, ITG3205_ADDR, buf, 2, 100);
 800af4e:	1d3a      	adds	r2, r7, #4
 800af50:	2364      	movs	r3, #100	@ 0x64
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	2302      	movs	r3, #2
 800af56:	21d0      	movs	r1, #208	@ 0xd0
 800af58:	4803      	ldr	r0, [pc, #12]	@ (800af68 <imu_init+0x58>)
 800af5a:	f7f8 fe57 	bl	8003c0c <HAL_I2C_Master_Transmit>
	// HMC5883L: configure for continuous measurement
	//buf[0]=0x02; buf[1]=0x00; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);
	//buf[0]=0x00; buf[1]=0x70; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);
	//buf[0]=0x01; buf[1]=0xA0; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);

}
 800af5e:	bf00      	nop
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	24000258 	.word	0x24000258

0800af6c <imu_update>:

void imu_update (void)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af04      	add	r7, sp, #16

    if (sample_count < IMU_NUMBER_OF_SAMPLES)
 800af72:	4b13      	ldr	r3, [pc, #76]	@ (800afc0 <imu_update+0x54>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d81c      	bhi.n	800afb8 <imu_update+0x4c>
    {
        uint8_t buf[2];
        HAL_I2C_Mem_Read(IMU_I2C, ITG3205_ADDR, 0x21, 1, buf, 2, 100); // ZOUT_H, ZOUT_L
 800af7e:	2364      	movs	r3, #100	@ 0x64
 800af80:	9302      	str	r3, [sp, #8]
 800af82:	2302      	movs	r3, #2
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	463b      	mov	r3, r7
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	2301      	movs	r3, #1
 800af8c:	2221      	movs	r2, #33	@ 0x21
 800af8e:	21d0      	movs	r1, #208	@ 0xd0
 800af90:	480c      	ldr	r0, [pc, #48]	@ (800afc4 <imu_update+0x58>)
 800af92:	f7f8 ff53 	bl	8003e3c <HAL_I2C_Mem_Read>

    	package_data_t* imu_data = write_package_data();
 800af96:	f7ff ff81 	bl	800ae9c <write_package_data>
 800af9a:	6078      	str	r0, [r7, #4]
    	imu_data->imu[sample_count] = (int16_t)((int16_t)buf[0] << 8 | buf[1]);
 800af9c:	783b      	ldrb	r3, [r7, #0]
 800af9e:	b21b      	sxth	r3, r3
 800afa0:	021b      	lsls	r3, r3, #8
 800afa2:	b219      	sxth	r1, r3
 800afa4:	787b      	ldrb	r3, [r7, #1]
 800afa6:	b21b      	sxth	r3, r3
 800afa8:	4a05      	ldr	r2, [pc, #20]	@ (800afc0 <imu_update+0x54>)
 800afaa:	6812      	ldr	r2, [r2, #0]
 800afac:	430b      	orrs	r3, r1
 800afae:	b219      	sxth	r1, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3218      	adds	r2, #24
 800afb4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    }
}
 800afb8:	bf00      	nop
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	2400334c 	.word	0x2400334c
 800afc4:	24000258 	.word	0x24000258

0800afc8 <nb_iot_init>:

char recived_at_msg[MOBILE_COMMS_ANSWER_LEN];
char msg_buffer[32];

void nb_iot_init (void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(DEBUG_UART, MOBILE_COMMS_INIT_MSG, sizeof MOBILE_COMMS_INIT_MSG);
 800afcc:	2216      	movs	r2, #22
 800afce:	4910      	ldr	r1, [pc, #64]	@ (800b010 <nb_iot_init+0x48>)
 800afd0:	4810      	ldr	r0, [pc, #64]	@ (800b014 <nb_iot_init+0x4c>)
 800afd2:	f7fd f8e1 	bl	8008198 <HAL_UART_Transmit_IT>

	at_echo_off(recived_at_msg);
 800afd6:	4810      	ldr	r0, [pc, #64]	@ (800b018 <nb_iot_init+0x50>)
 800afd8:	f7ff fe8a 	bl	800acf0 <at_echo_off>
	at_network_mode(recived_at_msg);
 800afdc:	480e      	ldr	r0, [pc, #56]	@ (800b018 <nb_iot_init+0x50>)
 800afde:	f7ff fe97 	bl	800ad10 <at_network_mode>
	at_set_band(recived_at_msg);
 800afe2:	480d      	ldr	r0, [pc, #52]	@ (800b018 <nb_iot_init+0x50>)
 800afe4:	f7ff fea4 	bl	800ad30 <at_set_band>
	//at_setup_lte(recived_at_msg);
	at_network_pdp_activate(recived_at_msg);
 800afe8:	480b      	ldr	r0, [pc, #44]	@ (800b018 <nb_iot_init+0x50>)
 800afea:	f7ff ff05 	bl	800adf8 <at_network_pdp_activate>
	at_gprs_init(recived_at_msg);
 800afee:	480a      	ldr	r0, [pc, #40]	@ (800b018 <nb_iot_init+0x50>)
 800aff0:	f7ff feae 	bl	800ad50 <at_gprs_init>
	at_network_attach_request (recived_at_msg);
 800aff4:	4808      	ldr	r0, [pc, #32]	@ (800b018 <nb_iot_init+0x50>)
 800aff6:	f7ff febb 	bl	800ad70 <at_network_attach_request>
	//at_set_ip_config(recived_at_msg);
	//at_set_ip_headers(recived_at_msg);
	at_init_http_connection(recived_at_msg);
 800affa:	4807      	ldr	r0, [pc, #28]	@ (800b018 <nb_iot_init+0x50>)
 800affc:	f7ff fec8 	bl	800ad90 <at_init_http_connection>

	HAL_UART_Transmit_IT(DEBUG_UART, MOBILE_COMMS_END_INIT_MSG, sizeof MOBILE_COMMS_END_INIT_MSG);
 800b000:	221a      	movs	r2, #26
 800b002:	4906      	ldr	r1, [pc, #24]	@ (800b01c <nb_iot_init+0x54>)
 800b004:	4803      	ldr	r0, [pc, #12]	@ (800b014 <nb_iot_init+0x4c>)
 800b006:	f7fd f8c7 	bl	8008198 <HAL_UART_Transmit_IT>

}
 800b00a:	bf00      	nop
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	0800f7a4 	.word	0x0800f7a4
 800b014:	24000350 	.word	0x24000350
 800b018:	24003350 	.word	0x24003350
 800b01c:	0800f7bc 	.word	0x0800f7bc

0800b020 <nb_iot_update>:

void nb_iot_update (void)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
	at_lte_send(TESTE_SITE, "Teste", recived_at_msg);
 800b024:	4a05      	ldr	r2, [pc, #20]	@ (800b03c <nb_iot_update+0x1c>)
 800b026:	4906      	ldr	r1, [pc, #24]	@ (800b040 <nb_iot_update+0x20>)
 800b028:	4806      	ldr	r0, [pc, #24]	@ (800b044 <nb_iot_update+0x24>)
 800b02a:	f7ff fec9 	bl	800adc0 <at_lte_send>
	HAL_Delay(1000);
 800b02e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b032:	f7f6 fc6d 	bl	8001910 <HAL_Delay>
}
 800b036:	bf00      	nop
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	24003350 	.word	0x24003350
 800b040:	0800f7d8 	.word	0x0800f7d8
 800b044:	0800f7e0 	.word	0x0800f7e0

0800b048 <sd_card_init>:
 */

#include "sd_card_behavior.h"

void sd_card_init (void)
{
 800b048:	b480      	push	{r7}
 800b04a:	af00      	add	r7, sp, #0

}
 800b04c:	bf00      	nop
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <sd_card_update>:

void sd_card_update (void)
{
 800b056:	b480      	push	{r7}
 800b058:	af00      	add	r7, sp, #0

}
 800b05a:	bf00      	nop
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <temperature_init>:
 */

#include "temperature_behavior.h"

void temperature_init (void)
{
 800b064:	b480      	push	{r7}
 800b066:	af00      	add	r7, sp, #0

}
 800b068:	bf00      	nop
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <__cvt>:
 800b072:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b074:	ed2d 8b02 	vpush	{d8}
 800b078:	eeb0 8b40 	vmov.f64	d8, d0
 800b07c:	b085      	sub	sp, #20
 800b07e:	4617      	mov	r7, r2
 800b080:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b082:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b084:	ee18 2a90 	vmov	r2, s17
 800b088:	f025 0520 	bic.w	r5, r5, #32
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	bfb6      	itet	lt
 800b090:	222d      	movlt	r2, #45	@ 0x2d
 800b092:	2200      	movge	r2, #0
 800b094:	eeb1 8b40 	vneglt.f64	d8, d0
 800b098:	2d46      	cmp	r5, #70	@ 0x46
 800b09a:	460c      	mov	r4, r1
 800b09c:	701a      	strb	r2, [r3, #0]
 800b09e:	d004      	beq.n	800b0aa <__cvt+0x38>
 800b0a0:	2d45      	cmp	r5, #69	@ 0x45
 800b0a2:	d100      	bne.n	800b0a6 <__cvt+0x34>
 800b0a4:	3401      	adds	r4, #1
 800b0a6:	2102      	movs	r1, #2
 800b0a8:	e000      	b.n	800b0ac <__cvt+0x3a>
 800b0aa:	2103      	movs	r1, #3
 800b0ac:	ab03      	add	r3, sp, #12
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	ab02      	add	r3, sp, #8
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	4622      	mov	r2, r4
 800b0b6:	4633      	mov	r3, r6
 800b0b8:	eeb0 0b48 	vmov.f64	d0, d8
 800b0bc:	f001 f85c 	bl	800c178 <_dtoa_r>
 800b0c0:	2d47      	cmp	r5, #71	@ 0x47
 800b0c2:	d114      	bne.n	800b0ee <__cvt+0x7c>
 800b0c4:	07fb      	lsls	r3, r7, #31
 800b0c6:	d50a      	bpl.n	800b0de <__cvt+0x6c>
 800b0c8:	1902      	adds	r2, r0, r4
 800b0ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d2:	bf08      	it	eq
 800b0d4:	9203      	streq	r2, [sp, #12]
 800b0d6:	2130      	movs	r1, #48	@ 0x30
 800b0d8:	9b03      	ldr	r3, [sp, #12]
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d319      	bcc.n	800b112 <__cvt+0xa0>
 800b0de:	9b03      	ldr	r3, [sp, #12]
 800b0e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0e2:	1a1b      	subs	r3, r3, r0
 800b0e4:	6013      	str	r3, [r2, #0]
 800b0e6:	b005      	add	sp, #20
 800b0e8:	ecbd 8b02 	vpop	{d8}
 800b0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0ee:	2d46      	cmp	r5, #70	@ 0x46
 800b0f0:	eb00 0204 	add.w	r2, r0, r4
 800b0f4:	d1e9      	bne.n	800b0ca <__cvt+0x58>
 800b0f6:	7803      	ldrb	r3, [r0, #0]
 800b0f8:	2b30      	cmp	r3, #48	@ 0x30
 800b0fa:	d107      	bne.n	800b10c <__cvt+0x9a>
 800b0fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b104:	bf1c      	itt	ne
 800b106:	f1c4 0401 	rsbne	r4, r4, #1
 800b10a:	6034      	strne	r4, [r6, #0]
 800b10c:	6833      	ldr	r3, [r6, #0]
 800b10e:	441a      	add	r2, r3
 800b110:	e7db      	b.n	800b0ca <__cvt+0x58>
 800b112:	1c5c      	adds	r4, r3, #1
 800b114:	9403      	str	r4, [sp, #12]
 800b116:	7019      	strb	r1, [r3, #0]
 800b118:	e7de      	b.n	800b0d8 <__cvt+0x66>

0800b11a <__exponent>:
 800b11a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b11c:	2900      	cmp	r1, #0
 800b11e:	bfba      	itte	lt
 800b120:	4249      	neglt	r1, r1
 800b122:	232d      	movlt	r3, #45	@ 0x2d
 800b124:	232b      	movge	r3, #43	@ 0x2b
 800b126:	2909      	cmp	r1, #9
 800b128:	7002      	strb	r2, [r0, #0]
 800b12a:	7043      	strb	r3, [r0, #1]
 800b12c:	dd29      	ble.n	800b182 <__exponent+0x68>
 800b12e:	f10d 0307 	add.w	r3, sp, #7
 800b132:	461d      	mov	r5, r3
 800b134:	270a      	movs	r7, #10
 800b136:	461a      	mov	r2, r3
 800b138:	fbb1 f6f7 	udiv	r6, r1, r7
 800b13c:	fb07 1416 	mls	r4, r7, r6, r1
 800b140:	3430      	adds	r4, #48	@ 0x30
 800b142:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b146:	460c      	mov	r4, r1
 800b148:	2c63      	cmp	r4, #99	@ 0x63
 800b14a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b14e:	4631      	mov	r1, r6
 800b150:	dcf1      	bgt.n	800b136 <__exponent+0x1c>
 800b152:	3130      	adds	r1, #48	@ 0x30
 800b154:	1e94      	subs	r4, r2, #2
 800b156:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b15a:	1c41      	adds	r1, r0, #1
 800b15c:	4623      	mov	r3, r4
 800b15e:	42ab      	cmp	r3, r5
 800b160:	d30a      	bcc.n	800b178 <__exponent+0x5e>
 800b162:	f10d 0309 	add.w	r3, sp, #9
 800b166:	1a9b      	subs	r3, r3, r2
 800b168:	42ac      	cmp	r4, r5
 800b16a:	bf88      	it	hi
 800b16c:	2300      	movhi	r3, #0
 800b16e:	3302      	adds	r3, #2
 800b170:	4403      	add	r3, r0
 800b172:	1a18      	subs	r0, r3, r0
 800b174:	b003      	add	sp, #12
 800b176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b178:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b17c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b180:	e7ed      	b.n	800b15e <__exponent+0x44>
 800b182:	2330      	movs	r3, #48	@ 0x30
 800b184:	3130      	adds	r1, #48	@ 0x30
 800b186:	7083      	strb	r3, [r0, #2]
 800b188:	70c1      	strb	r1, [r0, #3]
 800b18a:	1d03      	adds	r3, r0, #4
 800b18c:	e7f1      	b.n	800b172 <__exponent+0x58>
	...

0800b190 <_printf_float>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	b08d      	sub	sp, #52	@ 0x34
 800b196:	460c      	mov	r4, r1
 800b198:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b19c:	4616      	mov	r6, r2
 800b19e:	461f      	mov	r7, r3
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	f000 fee3 	bl	800bf6c <_localeconv_r>
 800b1a6:	f8d0 b000 	ldr.w	fp, [r0]
 800b1aa:	4658      	mov	r0, fp
 800b1ac:	f7f5 f8e8 	bl	8000380 <strlen>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b1bc:	6822      	ldr	r2, [r4, #0]
 800b1be:	9005      	str	r0, [sp, #20]
 800b1c0:	3307      	adds	r3, #7
 800b1c2:	f023 0307 	bic.w	r3, r3, #7
 800b1c6:	f103 0108 	add.w	r1, r3, #8
 800b1ca:	f8c8 1000 	str.w	r1, [r8]
 800b1ce:	ed93 0b00 	vldr	d0, [r3]
 800b1d2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b430 <_printf_float+0x2a0>
 800b1d6:	eeb0 7bc0 	vabs.f64	d7, d0
 800b1da:	eeb4 7b46 	vcmp.f64	d7, d6
 800b1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b1e6:	dd24      	ble.n	800b232 <_printf_float+0xa2>
 800b1e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f0:	d502      	bpl.n	800b1f8 <_printf_float+0x68>
 800b1f2:	232d      	movs	r3, #45	@ 0x2d
 800b1f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1f8:	498f      	ldr	r1, [pc, #572]	@ (800b438 <_printf_float+0x2a8>)
 800b1fa:	4b90      	ldr	r3, [pc, #576]	@ (800b43c <_printf_float+0x2ac>)
 800b1fc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b200:	bf8c      	ite	hi
 800b202:	4688      	movhi	r8, r1
 800b204:	4698      	movls	r8, r3
 800b206:	f022 0204 	bic.w	r2, r2, #4
 800b20a:	2303      	movs	r3, #3
 800b20c:	6123      	str	r3, [r4, #16]
 800b20e:	6022      	str	r2, [r4, #0]
 800b210:	f04f 0a00 	mov.w	sl, #0
 800b214:	9700      	str	r7, [sp, #0]
 800b216:	4633      	mov	r3, r6
 800b218:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b21a:	4621      	mov	r1, r4
 800b21c:	4628      	mov	r0, r5
 800b21e:	f000 f9d1 	bl	800b5c4 <_printf_common>
 800b222:	3001      	adds	r0, #1
 800b224:	f040 8089 	bne.w	800b33a <_printf_float+0x1aa>
 800b228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b22c:	b00d      	add	sp, #52	@ 0x34
 800b22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b232:	eeb4 0b40 	vcmp.f64	d0, d0
 800b236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23a:	d709      	bvc.n	800b250 <_printf_float+0xc0>
 800b23c:	ee10 3a90 	vmov	r3, s1
 800b240:	2b00      	cmp	r3, #0
 800b242:	bfbc      	itt	lt
 800b244:	232d      	movlt	r3, #45	@ 0x2d
 800b246:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b24a:	497d      	ldr	r1, [pc, #500]	@ (800b440 <_printf_float+0x2b0>)
 800b24c:	4b7d      	ldr	r3, [pc, #500]	@ (800b444 <_printf_float+0x2b4>)
 800b24e:	e7d5      	b.n	800b1fc <_printf_float+0x6c>
 800b250:	6863      	ldr	r3, [r4, #4]
 800b252:	1c59      	adds	r1, r3, #1
 800b254:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b258:	d139      	bne.n	800b2ce <_printf_float+0x13e>
 800b25a:	2306      	movs	r3, #6
 800b25c:	6063      	str	r3, [r4, #4]
 800b25e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b262:	2300      	movs	r3, #0
 800b264:	6022      	str	r2, [r4, #0]
 800b266:	9303      	str	r3, [sp, #12]
 800b268:	ab0a      	add	r3, sp, #40	@ 0x28
 800b26a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b26e:	ab09      	add	r3, sp, #36	@ 0x24
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	6861      	ldr	r1, [r4, #4]
 800b274:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b278:	4628      	mov	r0, r5
 800b27a:	f7ff fefa 	bl	800b072 <__cvt>
 800b27e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b282:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b284:	4680      	mov	r8, r0
 800b286:	d129      	bne.n	800b2dc <_printf_float+0x14c>
 800b288:	1cc8      	adds	r0, r1, #3
 800b28a:	db02      	blt.n	800b292 <_printf_float+0x102>
 800b28c:	6863      	ldr	r3, [r4, #4]
 800b28e:	4299      	cmp	r1, r3
 800b290:	dd41      	ble.n	800b316 <_printf_float+0x186>
 800b292:	f1a9 0902 	sub.w	r9, r9, #2
 800b296:	fa5f f989 	uxtb.w	r9, r9
 800b29a:	3901      	subs	r1, #1
 800b29c:	464a      	mov	r2, r9
 800b29e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b2a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2a4:	f7ff ff39 	bl	800b11a <__exponent>
 800b2a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2aa:	1813      	adds	r3, r2, r0
 800b2ac:	2a01      	cmp	r2, #1
 800b2ae:	4682      	mov	sl, r0
 800b2b0:	6123      	str	r3, [r4, #16]
 800b2b2:	dc02      	bgt.n	800b2ba <_printf_float+0x12a>
 800b2b4:	6822      	ldr	r2, [r4, #0]
 800b2b6:	07d2      	lsls	r2, r2, #31
 800b2b8:	d501      	bpl.n	800b2be <_printf_float+0x12e>
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	6123      	str	r3, [r4, #16]
 800b2be:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d0a6      	beq.n	800b214 <_printf_float+0x84>
 800b2c6:	232d      	movs	r3, #45	@ 0x2d
 800b2c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2cc:	e7a2      	b.n	800b214 <_printf_float+0x84>
 800b2ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b2d2:	d1c4      	bne.n	800b25e <_printf_float+0xce>
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1c2      	bne.n	800b25e <_printf_float+0xce>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e7bf      	b.n	800b25c <_printf_float+0xcc>
 800b2dc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b2e0:	d9db      	bls.n	800b29a <_printf_float+0x10a>
 800b2e2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b2e6:	d118      	bne.n	800b31a <_printf_float+0x18a>
 800b2e8:	2900      	cmp	r1, #0
 800b2ea:	6863      	ldr	r3, [r4, #4]
 800b2ec:	dd0b      	ble.n	800b306 <_printf_float+0x176>
 800b2ee:	6121      	str	r1, [r4, #16]
 800b2f0:	b913      	cbnz	r3, 800b2f8 <_printf_float+0x168>
 800b2f2:	6822      	ldr	r2, [r4, #0]
 800b2f4:	07d0      	lsls	r0, r2, #31
 800b2f6:	d502      	bpl.n	800b2fe <_printf_float+0x16e>
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	440b      	add	r3, r1
 800b2fc:	6123      	str	r3, [r4, #16]
 800b2fe:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b300:	f04f 0a00 	mov.w	sl, #0
 800b304:	e7db      	b.n	800b2be <_printf_float+0x12e>
 800b306:	b913      	cbnz	r3, 800b30e <_printf_float+0x17e>
 800b308:	6822      	ldr	r2, [r4, #0]
 800b30a:	07d2      	lsls	r2, r2, #31
 800b30c:	d501      	bpl.n	800b312 <_printf_float+0x182>
 800b30e:	3302      	adds	r3, #2
 800b310:	e7f4      	b.n	800b2fc <_printf_float+0x16c>
 800b312:	2301      	movs	r3, #1
 800b314:	e7f2      	b.n	800b2fc <_printf_float+0x16c>
 800b316:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b31a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b31c:	4299      	cmp	r1, r3
 800b31e:	db05      	blt.n	800b32c <_printf_float+0x19c>
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	6121      	str	r1, [r4, #16]
 800b324:	07d8      	lsls	r0, r3, #31
 800b326:	d5ea      	bpl.n	800b2fe <_printf_float+0x16e>
 800b328:	1c4b      	adds	r3, r1, #1
 800b32a:	e7e7      	b.n	800b2fc <_printf_float+0x16c>
 800b32c:	2900      	cmp	r1, #0
 800b32e:	bfd4      	ite	le
 800b330:	f1c1 0202 	rsble	r2, r1, #2
 800b334:	2201      	movgt	r2, #1
 800b336:	4413      	add	r3, r2
 800b338:	e7e0      	b.n	800b2fc <_printf_float+0x16c>
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	055a      	lsls	r2, r3, #21
 800b33e:	d407      	bmi.n	800b350 <_printf_float+0x1c0>
 800b340:	6923      	ldr	r3, [r4, #16]
 800b342:	4642      	mov	r2, r8
 800b344:	4631      	mov	r1, r6
 800b346:	4628      	mov	r0, r5
 800b348:	47b8      	blx	r7
 800b34a:	3001      	adds	r0, #1
 800b34c:	d12a      	bne.n	800b3a4 <_printf_float+0x214>
 800b34e:	e76b      	b.n	800b228 <_printf_float+0x98>
 800b350:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b354:	f240 80e0 	bls.w	800b518 <_printf_float+0x388>
 800b358:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b35c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b364:	d133      	bne.n	800b3ce <_printf_float+0x23e>
 800b366:	4a38      	ldr	r2, [pc, #224]	@ (800b448 <_printf_float+0x2b8>)
 800b368:	2301      	movs	r3, #1
 800b36a:	4631      	mov	r1, r6
 800b36c:	4628      	mov	r0, r5
 800b36e:	47b8      	blx	r7
 800b370:	3001      	adds	r0, #1
 800b372:	f43f af59 	beq.w	800b228 <_printf_float+0x98>
 800b376:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b37a:	4543      	cmp	r3, r8
 800b37c:	db02      	blt.n	800b384 <_printf_float+0x1f4>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	07d8      	lsls	r0, r3, #31
 800b382:	d50f      	bpl.n	800b3a4 <_printf_float+0x214>
 800b384:	9b05      	ldr	r3, [sp, #20]
 800b386:	465a      	mov	r2, fp
 800b388:	4631      	mov	r1, r6
 800b38a:	4628      	mov	r0, r5
 800b38c:	47b8      	blx	r7
 800b38e:	3001      	adds	r0, #1
 800b390:	f43f af4a 	beq.w	800b228 <_printf_float+0x98>
 800b394:	f04f 0900 	mov.w	r9, #0
 800b398:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b39c:	f104 0a1a 	add.w	sl, r4, #26
 800b3a0:	45c8      	cmp	r8, r9
 800b3a2:	dc09      	bgt.n	800b3b8 <_printf_float+0x228>
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	079b      	lsls	r3, r3, #30
 800b3a8:	f100 8107 	bmi.w	800b5ba <_printf_float+0x42a>
 800b3ac:	68e0      	ldr	r0, [r4, #12]
 800b3ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3b0:	4298      	cmp	r0, r3
 800b3b2:	bfb8      	it	lt
 800b3b4:	4618      	movlt	r0, r3
 800b3b6:	e739      	b.n	800b22c <_printf_float+0x9c>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	4652      	mov	r2, sl
 800b3bc:	4631      	mov	r1, r6
 800b3be:	4628      	mov	r0, r5
 800b3c0:	47b8      	blx	r7
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	f43f af30 	beq.w	800b228 <_printf_float+0x98>
 800b3c8:	f109 0901 	add.w	r9, r9, #1
 800b3cc:	e7e8      	b.n	800b3a0 <_printf_float+0x210>
 800b3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	dc3b      	bgt.n	800b44c <_printf_float+0x2bc>
 800b3d4:	4a1c      	ldr	r2, [pc, #112]	@ (800b448 <_printf_float+0x2b8>)
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	3001      	adds	r0, #1
 800b3e0:	f43f af22 	beq.w	800b228 <_printf_float+0x98>
 800b3e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b3e8:	ea59 0303 	orrs.w	r3, r9, r3
 800b3ec:	d102      	bne.n	800b3f4 <_printf_float+0x264>
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	07d9      	lsls	r1, r3, #31
 800b3f2:	d5d7      	bpl.n	800b3a4 <_printf_float+0x214>
 800b3f4:	9b05      	ldr	r3, [sp, #20]
 800b3f6:	465a      	mov	r2, fp
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	47b8      	blx	r7
 800b3fe:	3001      	adds	r0, #1
 800b400:	f43f af12 	beq.w	800b228 <_printf_float+0x98>
 800b404:	f04f 0a00 	mov.w	sl, #0
 800b408:	f104 0b1a 	add.w	fp, r4, #26
 800b40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b40e:	425b      	negs	r3, r3
 800b410:	4553      	cmp	r3, sl
 800b412:	dc01      	bgt.n	800b418 <_printf_float+0x288>
 800b414:	464b      	mov	r3, r9
 800b416:	e794      	b.n	800b342 <_printf_float+0x1b2>
 800b418:	2301      	movs	r3, #1
 800b41a:	465a      	mov	r2, fp
 800b41c:	4631      	mov	r1, r6
 800b41e:	4628      	mov	r0, r5
 800b420:	47b8      	blx	r7
 800b422:	3001      	adds	r0, #1
 800b424:	f43f af00 	beq.w	800b228 <_printf_float+0x98>
 800b428:	f10a 0a01 	add.w	sl, sl, #1
 800b42c:	e7ee      	b.n	800b40c <_printf_float+0x27c>
 800b42e:	bf00      	nop
 800b430:	ffffffff 	.word	0xffffffff
 800b434:	7fefffff 	.word	0x7fefffff
 800b438:	0800f83c 	.word	0x0800f83c
 800b43c:	0800f838 	.word	0x0800f838
 800b440:	0800f844 	.word	0x0800f844
 800b444:	0800f840 	.word	0x0800f840
 800b448:	0800f848 	.word	0x0800f848
 800b44c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b44e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b452:	4553      	cmp	r3, sl
 800b454:	bfa8      	it	ge
 800b456:	4653      	movge	r3, sl
 800b458:	2b00      	cmp	r3, #0
 800b45a:	4699      	mov	r9, r3
 800b45c:	dc37      	bgt.n	800b4ce <_printf_float+0x33e>
 800b45e:	2300      	movs	r3, #0
 800b460:	9307      	str	r3, [sp, #28]
 800b462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b466:	f104 021a 	add.w	r2, r4, #26
 800b46a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b46c:	9907      	ldr	r1, [sp, #28]
 800b46e:	9306      	str	r3, [sp, #24]
 800b470:	eba3 0309 	sub.w	r3, r3, r9
 800b474:	428b      	cmp	r3, r1
 800b476:	dc31      	bgt.n	800b4dc <_printf_float+0x34c>
 800b478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b47a:	459a      	cmp	sl, r3
 800b47c:	dc3b      	bgt.n	800b4f6 <_printf_float+0x366>
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	07da      	lsls	r2, r3, #31
 800b482:	d438      	bmi.n	800b4f6 <_printf_float+0x366>
 800b484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b486:	ebaa 0903 	sub.w	r9, sl, r3
 800b48a:	9b06      	ldr	r3, [sp, #24]
 800b48c:	ebaa 0303 	sub.w	r3, sl, r3
 800b490:	4599      	cmp	r9, r3
 800b492:	bfa8      	it	ge
 800b494:	4699      	movge	r9, r3
 800b496:	f1b9 0f00 	cmp.w	r9, #0
 800b49a:	dc34      	bgt.n	800b506 <_printf_float+0x376>
 800b49c:	f04f 0800 	mov.w	r8, #0
 800b4a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4a4:	f104 0b1a 	add.w	fp, r4, #26
 800b4a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4aa:	ebaa 0303 	sub.w	r3, sl, r3
 800b4ae:	eba3 0309 	sub.w	r3, r3, r9
 800b4b2:	4543      	cmp	r3, r8
 800b4b4:	f77f af76 	ble.w	800b3a4 <_printf_float+0x214>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	465a      	mov	r2, fp
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4628      	mov	r0, r5
 800b4c0:	47b8      	blx	r7
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	f43f aeb0 	beq.w	800b228 <_printf_float+0x98>
 800b4c8:	f108 0801 	add.w	r8, r8, #1
 800b4cc:	e7ec      	b.n	800b4a8 <_printf_float+0x318>
 800b4ce:	4642      	mov	r2, r8
 800b4d0:	4631      	mov	r1, r6
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	47b8      	blx	r7
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	d1c1      	bne.n	800b45e <_printf_float+0x2ce>
 800b4da:	e6a5      	b.n	800b228 <_printf_float+0x98>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	9206      	str	r2, [sp, #24]
 800b4e4:	47b8      	blx	r7
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	f43f ae9e 	beq.w	800b228 <_printf_float+0x98>
 800b4ec:	9b07      	ldr	r3, [sp, #28]
 800b4ee:	9a06      	ldr	r2, [sp, #24]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	9307      	str	r3, [sp, #28]
 800b4f4:	e7b9      	b.n	800b46a <_printf_float+0x2da>
 800b4f6:	9b05      	ldr	r3, [sp, #20]
 800b4f8:	465a      	mov	r2, fp
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	47b8      	blx	r7
 800b500:	3001      	adds	r0, #1
 800b502:	d1bf      	bne.n	800b484 <_printf_float+0x2f4>
 800b504:	e690      	b.n	800b228 <_printf_float+0x98>
 800b506:	9a06      	ldr	r2, [sp, #24]
 800b508:	464b      	mov	r3, r9
 800b50a:	4442      	add	r2, r8
 800b50c:	4631      	mov	r1, r6
 800b50e:	4628      	mov	r0, r5
 800b510:	47b8      	blx	r7
 800b512:	3001      	adds	r0, #1
 800b514:	d1c2      	bne.n	800b49c <_printf_float+0x30c>
 800b516:	e687      	b.n	800b228 <_printf_float+0x98>
 800b518:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b51c:	f1b9 0f01 	cmp.w	r9, #1
 800b520:	dc01      	bgt.n	800b526 <_printf_float+0x396>
 800b522:	07db      	lsls	r3, r3, #31
 800b524:	d536      	bpl.n	800b594 <_printf_float+0x404>
 800b526:	2301      	movs	r3, #1
 800b528:	4642      	mov	r2, r8
 800b52a:	4631      	mov	r1, r6
 800b52c:	4628      	mov	r0, r5
 800b52e:	47b8      	blx	r7
 800b530:	3001      	adds	r0, #1
 800b532:	f43f ae79 	beq.w	800b228 <_printf_float+0x98>
 800b536:	9b05      	ldr	r3, [sp, #20]
 800b538:	465a      	mov	r2, fp
 800b53a:	4631      	mov	r1, r6
 800b53c:	4628      	mov	r0, r5
 800b53e:	47b8      	blx	r7
 800b540:	3001      	adds	r0, #1
 800b542:	f43f ae71 	beq.w	800b228 <_printf_float+0x98>
 800b546:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b54a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b552:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800b556:	d018      	beq.n	800b58a <_printf_float+0x3fa>
 800b558:	464b      	mov	r3, r9
 800b55a:	f108 0201 	add.w	r2, r8, #1
 800b55e:	4631      	mov	r1, r6
 800b560:	4628      	mov	r0, r5
 800b562:	47b8      	blx	r7
 800b564:	3001      	adds	r0, #1
 800b566:	d10c      	bne.n	800b582 <_printf_float+0x3f2>
 800b568:	e65e      	b.n	800b228 <_printf_float+0x98>
 800b56a:	2301      	movs	r3, #1
 800b56c:	465a      	mov	r2, fp
 800b56e:	4631      	mov	r1, r6
 800b570:	4628      	mov	r0, r5
 800b572:	47b8      	blx	r7
 800b574:	3001      	adds	r0, #1
 800b576:	f43f ae57 	beq.w	800b228 <_printf_float+0x98>
 800b57a:	f108 0801 	add.w	r8, r8, #1
 800b57e:	45c8      	cmp	r8, r9
 800b580:	dbf3      	blt.n	800b56a <_printf_float+0x3da>
 800b582:	4653      	mov	r3, sl
 800b584:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b588:	e6dc      	b.n	800b344 <_printf_float+0x1b4>
 800b58a:	f04f 0800 	mov.w	r8, #0
 800b58e:	f104 0b1a 	add.w	fp, r4, #26
 800b592:	e7f4      	b.n	800b57e <_printf_float+0x3ee>
 800b594:	2301      	movs	r3, #1
 800b596:	4642      	mov	r2, r8
 800b598:	e7e1      	b.n	800b55e <_printf_float+0x3ce>
 800b59a:	2301      	movs	r3, #1
 800b59c:	464a      	mov	r2, r9
 800b59e:	4631      	mov	r1, r6
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	47b8      	blx	r7
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	f43f ae3f 	beq.w	800b228 <_printf_float+0x98>
 800b5aa:	f108 0801 	add.w	r8, r8, #1
 800b5ae:	68e3      	ldr	r3, [r4, #12]
 800b5b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5b2:	1a5b      	subs	r3, r3, r1
 800b5b4:	4543      	cmp	r3, r8
 800b5b6:	dcf0      	bgt.n	800b59a <_printf_float+0x40a>
 800b5b8:	e6f8      	b.n	800b3ac <_printf_float+0x21c>
 800b5ba:	f04f 0800 	mov.w	r8, #0
 800b5be:	f104 0919 	add.w	r9, r4, #25
 800b5c2:	e7f4      	b.n	800b5ae <_printf_float+0x41e>

0800b5c4 <_printf_common>:
 800b5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c8:	4616      	mov	r6, r2
 800b5ca:	4698      	mov	r8, r3
 800b5cc:	688a      	ldr	r2, [r1, #8]
 800b5ce:	690b      	ldr	r3, [r1, #16]
 800b5d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	bfb8      	it	lt
 800b5d8:	4613      	movlt	r3, r2
 800b5da:	6033      	str	r3, [r6, #0]
 800b5dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	b10a      	cbz	r2, 800b5ea <_printf_common+0x26>
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	6033      	str	r3, [r6, #0]
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	0699      	lsls	r1, r3, #26
 800b5ee:	bf42      	ittt	mi
 800b5f0:	6833      	ldrmi	r3, [r6, #0]
 800b5f2:	3302      	addmi	r3, #2
 800b5f4:	6033      	strmi	r3, [r6, #0]
 800b5f6:	6825      	ldr	r5, [r4, #0]
 800b5f8:	f015 0506 	ands.w	r5, r5, #6
 800b5fc:	d106      	bne.n	800b60c <_printf_common+0x48>
 800b5fe:	f104 0a19 	add.w	sl, r4, #25
 800b602:	68e3      	ldr	r3, [r4, #12]
 800b604:	6832      	ldr	r2, [r6, #0]
 800b606:	1a9b      	subs	r3, r3, r2
 800b608:	42ab      	cmp	r3, r5
 800b60a:	dc26      	bgt.n	800b65a <_printf_common+0x96>
 800b60c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b610:	6822      	ldr	r2, [r4, #0]
 800b612:	3b00      	subs	r3, #0
 800b614:	bf18      	it	ne
 800b616:	2301      	movne	r3, #1
 800b618:	0692      	lsls	r2, r2, #26
 800b61a:	d42b      	bmi.n	800b674 <_printf_common+0xb0>
 800b61c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b620:	4641      	mov	r1, r8
 800b622:	4638      	mov	r0, r7
 800b624:	47c8      	blx	r9
 800b626:	3001      	adds	r0, #1
 800b628:	d01e      	beq.n	800b668 <_printf_common+0xa4>
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	6922      	ldr	r2, [r4, #16]
 800b62e:	f003 0306 	and.w	r3, r3, #6
 800b632:	2b04      	cmp	r3, #4
 800b634:	bf02      	ittt	eq
 800b636:	68e5      	ldreq	r5, [r4, #12]
 800b638:	6833      	ldreq	r3, [r6, #0]
 800b63a:	1aed      	subeq	r5, r5, r3
 800b63c:	68a3      	ldr	r3, [r4, #8]
 800b63e:	bf0c      	ite	eq
 800b640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b644:	2500      	movne	r5, #0
 800b646:	4293      	cmp	r3, r2
 800b648:	bfc4      	itt	gt
 800b64a:	1a9b      	subgt	r3, r3, r2
 800b64c:	18ed      	addgt	r5, r5, r3
 800b64e:	2600      	movs	r6, #0
 800b650:	341a      	adds	r4, #26
 800b652:	42b5      	cmp	r5, r6
 800b654:	d11a      	bne.n	800b68c <_printf_common+0xc8>
 800b656:	2000      	movs	r0, #0
 800b658:	e008      	b.n	800b66c <_printf_common+0xa8>
 800b65a:	2301      	movs	r3, #1
 800b65c:	4652      	mov	r2, sl
 800b65e:	4641      	mov	r1, r8
 800b660:	4638      	mov	r0, r7
 800b662:	47c8      	blx	r9
 800b664:	3001      	adds	r0, #1
 800b666:	d103      	bne.n	800b670 <_printf_common+0xac>
 800b668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b670:	3501      	adds	r5, #1
 800b672:	e7c6      	b.n	800b602 <_printf_common+0x3e>
 800b674:	18e1      	adds	r1, r4, r3
 800b676:	1c5a      	adds	r2, r3, #1
 800b678:	2030      	movs	r0, #48	@ 0x30
 800b67a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b67e:	4422      	add	r2, r4
 800b680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b684:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b688:	3302      	adds	r3, #2
 800b68a:	e7c7      	b.n	800b61c <_printf_common+0x58>
 800b68c:	2301      	movs	r3, #1
 800b68e:	4622      	mov	r2, r4
 800b690:	4641      	mov	r1, r8
 800b692:	4638      	mov	r0, r7
 800b694:	47c8      	blx	r9
 800b696:	3001      	adds	r0, #1
 800b698:	d0e6      	beq.n	800b668 <_printf_common+0xa4>
 800b69a:	3601      	adds	r6, #1
 800b69c:	e7d9      	b.n	800b652 <_printf_common+0x8e>
	...

0800b6a0 <_printf_i>:
 800b6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a4:	7e0f      	ldrb	r7, [r1, #24]
 800b6a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6a8:	2f78      	cmp	r7, #120	@ 0x78
 800b6aa:	4691      	mov	r9, r2
 800b6ac:	4680      	mov	r8, r0
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	469a      	mov	sl, r3
 800b6b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6b6:	d807      	bhi.n	800b6c8 <_printf_i+0x28>
 800b6b8:	2f62      	cmp	r7, #98	@ 0x62
 800b6ba:	d80a      	bhi.n	800b6d2 <_printf_i+0x32>
 800b6bc:	2f00      	cmp	r7, #0
 800b6be:	f000 80d1 	beq.w	800b864 <_printf_i+0x1c4>
 800b6c2:	2f58      	cmp	r7, #88	@ 0x58
 800b6c4:	f000 80b8 	beq.w	800b838 <_printf_i+0x198>
 800b6c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b6d0:	e03a      	b.n	800b748 <_printf_i+0xa8>
 800b6d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b6d6:	2b15      	cmp	r3, #21
 800b6d8:	d8f6      	bhi.n	800b6c8 <_printf_i+0x28>
 800b6da:	a101      	add	r1, pc, #4	@ (adr r1, 800b6e0 <_printf_i+0x40>)
 800b6dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6e0:	0800b739 	.word	0x0800b739
 800b6e4:	0800b74d 	.word	0x0800b74d
 800b6e8:	0800b6c9 	.word	0x0800b6c9
 800b6ec:	0800b6c9 	.word	0x0800b6c9
 800b6f0:	0800b6c9 	.word	0x0800b6c9
 800b6f4:	0800b6c9 	.word	0x0800b6c9
 800b6f8:	0800b74d 	.word	0x0800b74d
 800b6fc:	0800b6c9 	.word	0x0800b6c9
 800b700:	0800b6c9 	.word	0x0800b6c9
 800b704:	0800b6c9 	.word	0x0800b6c9
 800b708:	0800b6c9 	.word	0x0800b6c9
 800b70c:	0800b84b 	.word	0x0800b84b
 800b710:	0800b777 	.word	0x0800b777
 800b714:	0800b805 	.word	0x0800b805
 800b718:	0800b6c9 	.word	0x0800b6c9
 800b71c:	0800b6c9 	.word	0x0800b6c9
 800b720:	0800b86d 	.word	0x0800b86d
 800b724:	0800b6c9 	.word	0x0800b6c9
 800b728:	0800b777 	.word	0x0800b777
 800b72c:	0800b6c9 	.word	0x0800b6c9
 800b730:	0800b6c9 	.word	0x0800b6c9
 800b734:	0800b80d 	.word	0x0800b80d
 800b738:	6833      	ldr	r3, [r6, #0]
 800b73a:	1d1a      	adds	r2, r3, #4
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6032      	str	r2, [r6, #0]
 800b740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b748:	2301      	movs	r3, #1
 800b74a:	e09c      	b.n	800b886 <_printf_i+0x1e6>
 800b74c:	6833      	ldr	r3, [r6, #0]
 800b74e:	6820      	ldr	r0, [r4, #0]
 800b750:	1d19      	adds	r1, r3, #4
 800b752:	6031      	str	r1, [r6, #0]
 800b754:	0606      	lsls	r6, r0, #24
 800b756:	d501      	bpl.n	800b75c <_printf_i+0xbc>
 800b758:	681d      	ldr	r5, [r3, #0]
 800b75a:	e003      	b.n	800b764 <_printf_i+0xc4>
 800b75c:	0645      	lsls	r5, r0, #25
 800b75e:	d5fb      	bpl.n	800b758 <_printf_i+0xb8>
 800b760:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b764:	2d00      	cmp	r5, #0
 800b766:	da03      	bge.n	800b770 <_printf_i+0xd0>
 800b768:	232d      	movs	r3, #45	@ 0x2d
 800b76a:	426d      	negs	r5, r5
 800b76c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b770:	4858      	ldr	r0, [pc, #352]	@ (800b8d4 <_printf_i+0x234>)
 800b772:	230a      	movs	r3, #10
 800b774:	e011      	b.n	800b79a <_printf_i+0xfa>
 800b776:	6821      	ldr	r1, [r4, #0]
 800b778:	6833      	ldr	r3, [r6, #0]
 800b77a:	0608      	lsls	r0, r1, #24
 800b77c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b780:	d402      	bmi.n	800b788 <_printf_i+0xe8>
 800b782:	0649      	lsls	r1, r1, #25
 800b784:	bf48      	it	mi
 800b786:	b2ad      	uxthmi	r5, r5
 800b788:	2f6f      	cmp	r7, #111	@ 0x6f
 800b78a:	4852      	ldr	r0, [pc, #328]	@ (800b8d4 <_printf_i+0x234>)
 800b78c:	6033      	str	r3, [r6, #0]
 800b78e:	bf14      	ite	ne
 800b790:	230a      	movne	r3, #10
 800b792:	2308      	moveq	r3, #8
 800b794:	2100      	movs	r1, #0
 800b796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b79a:	6866      	ldr	r6, [r4, #4]
 800b79c:	60a6      	str	r6, [r4, #8]
 800b79e:	2e00      	cmp	r6, #0
 800b7a0:	db05      	blt.n	800b7ae <_printf_i+0x10e>
 800b7a2:	6821      	ldr	r1, [r4, #0]
 800b7a4:	432e      	orrs	r6, r5
 800b7a6:	f021 0104 	bic.w	r1, r1, #4
 800b7aa:	6021      	str	r1, [r4, #0]
 800b7ac:	d04b      	beq.n	800b846 <_printf_i+0x1a6>
 800b7ae:	4616      	mov	r6, r2
 800b7b0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7b4:	fb03 5711 	mls	r7, r3, r1, r5
 800b7b8:	5dc7      	ldrb	r7, [r0, r7]
 800b7ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7be:	462f      	mov	r7, r5
 800b7c0:	42bb      	cmp	r3, r7
 800b7c2:	460d      	mov	r5, r1
 800b7c4:	d9f4      	bls.n	800b7b0 <_printf_i+0x110>
 800b7c6:	2b08      	cmp	r3, #8
 800b7c8:	d10b      	bne.n	800b7e2 <_printf_i+0x142>
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	07df      	lsls	r7, r3, #31
 800b7ce:	d508      	bpl.n	800b7e2 <_printf_i+0x142>
 800b7d0:	6923      	ldr	r3, [r4, #16]
 800b7d2:	6861      	ldr	r1, [r4, #4]
 800b7d4:	4299      	cmp	r1, r3
 800b7d6:	bfde      	ittt	le
 800b7d8:	2330      	movle	r3, #48	@ 0x30
 800b7da:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7de:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b7e2:	1b92      	subs	r2, r2, r6
 800b7e4:	6122      	str	r2, [r4, #16]
 800b7e6:	f8cd a000 	str.w	sl, [sp]
 800b7ea:	464b      	mov	r3, r9
 800b7ec:	aa03      	add	r2, sp, #12
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4640      	mov	r0, r8
 800b7f2:	f7ff fee7 	bl	800b5c4 <_printf_common>
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d14a      	bne.n	800b890 <_printf_i+0x1f0>
 800b7fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7fe:	b004      	add	sp, #16
 800b800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	f043 0320 	orr.w	r3, r3, #32
 800b80a:	6023      	str	r3, [r4, #0]
 800b80c:	4832      	ldr	r0, [pc, #200]	@ (800b8d8 <_printf_i+0x238>)
 800b80e:	2778      	movs	r7, #120	@ 0x78
 800b810:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b814:	6823      	ldr	r3, [r4, #0]
 800b816:	6831      	ldr	r1, [r6, #0]
 800b818:	061f      	lsls	r7, r3, #24
 800b81a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b81e:	d402      	bmi.n	800b826 <_printf_i+0x186>
 800b820:	065f      	lsls	r7, r3, #25
 800b822:	bf48      	it	mi
 800b824:	b2ad      	uxthmi	r5, r5
 800b826:	6031      	str	r1, [r6, #0]
 800b828:	07d9      	lsls	r1, r3, #31
 800b82a:	bf44      	itt	mi
 800b82c:	f043 0320 	orrmi.w	r3, r3, #32
 800b830:	6023      	strmi	r3, [r4, #0]
 800b832:	b11d      	cbz	r5, 800b83c <_printf_i+0x19c>
 800b834:	2310      	movs	r3, #16
 800b836:	e7ad      	b.n	800b794 <_printf_i+0xf4>
 800b838:	4826      	ldr	r0, [pc, #152]	@ (800b8d4 <_printf_i+0x234>)
 800b83a:	e7e9      	b.n	800b810 <_printf_i+0x170>
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	f023 0320 	bic.w	r3, r3, #32
 800b842:	6023      	str	r3, [r4, #0]
 800b844:	e7f6      	b.n	800b834 <_printf_i+0x194>
 800b846:	4616      	mov	r6, r2
 800b848:	e7bd      	b.n	800b7c6 <_printf_i+0x126>
 800b84a:	6833      	ldr	r3, [r6, #0]
 800b84c:	6825      	ldr	r5, [r4, #0]
 800b84e:	6961      	ldr	r1, [r4, #20]
 800b850:	1d18      	adds	r0, r3, #4
 800b852:	6030      	str	r0, [r6, #0]
 800b854:	062e      	lsls	r6, r5, #24
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	d501      	bpl.n	800b85e <_printf_i+0x1be>
 800b85a:	6019      	str	r1, [r3, #0]
 800b85c:	e002      	b.n	800b864 <_printf_i+0x1c4>
 800b85e:	0668      	lsls	r0, r5, #25
 800b860:	d5fb      	bpl.n	800b85a <_printf_i+0x1ba>
 800b862:	8019      	strh	r1, [r3, #0]
 800b864:	2300      	movs	r3, #0
 800b866:	6123      	str	r3, [r4, #16]
 800b868:	4616      	mov	r6, r2
 800b86a:	e7bc      	b.n	800b7e6 <_printf_i+0x146>
 800b86c:	6833      	ldr	r3, [r6, #0]
 800b86e:	1d1a      	adds	r2, r3, #4
 800b870:	6032      	str	r2, [r6, #0]
 800b872:	681e      	ldr	r6, [r3, #0]
 800b874:	6862      	ldr	r2, [r4, #4]
 800b876:	2100      	movs	r1, #0
 800b878:	4630      	mov	r0, r6
 800b87a:	f7f4 fd31 	bl	80002e0 <memchr>
 800b87e:	b108      	cbz	r0, 800b884 <_printf_i+0x1e4>
 800b880:	1b80      	subs	r0, r0, r6
 800b882:	6060      	str	r0, [r4, #4]
 800b884:	6863      	ldr	r3, [r4, #4]
 800b886:	6123      	str	r3, [r4, #16]
 800b888:	2300      	movs	r3, #0
 800b88a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b88e:	e7aa      	b.n	800b7e6 <_printf_i+0x146>
 800b890:	6923      	ldr	r3, [r4, #16]
 800b892:	4632      	mov	r2, r6
 800b894:	4649      	mov	r1, r9
 800b896:	4640      	mov	r0, r8
 800b898:	47d0      	blx	sl
 800b89a:	3001      	adds	r0, #1
 800b89c:	d0ad      	beq.n	800b7fa <_printf_i+0x15a>
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	079b      	lsls	r3, r3, #30
 800b8a2:	d413      	bmi.n	800b8cc <_printf_i+0x22c>
 800b8a4:	68e0      	ldr	r0, [r4, #12]
 800b8a6:	9b03      	ldr	r3, [sp, #12]
 800b8a8:	4298      	cmp	r0, r3
 800b8aa:	bfb8      	it	lt
 800b8ac:	4618      	movlt	r0, r3
 800b8ae:	e7a6      	b.n	800b7fe <_printf_i+0x15e>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	4632      	mov	r2, r6
 800b8b4:	4649      	mov	r1, r9
 800b8b6:	4640      	mov	r0, r8
 800b8b8:	47d0      	blx	sl
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	d09d      	beq.n	800b7fa <_printf_i+0x15a>
 800b8be:	3501      	adds	r5, #1
 800b8c0:	68e3      	ldr	r3, [r4, #12]
 800b8c2:	9903      	ldr	r1, [sp, #12]
 800b8c4:	1a5b      	subs	r3, r3, r1
 800b8c6:	42ab      	cmp	r3, r5
 800b8c8:	dcf2      	bgt.n	800b8b0 <_printf_i+0x210>
 800b8ca:	e7eb      	b.n	800b8a4 <_printf_i+0x204>
 800b8cc:	2500      	movs	r5, #0
 800b8ce:	f104 0619 	add.w	r6, r4, #25
 800b8d2:	e7f5      	b.n	800b8c0 <_printf_i+0x220>
 800b8d4:	0800f84a 	.word	0x0800f84a
 800b8d8:	0800f85b 	.word	0x0800f85b

0800b8dc <_scanf_float>:
 800b8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e0:	b087      	sub	sp, #28
 800b8e2:	4691      	mov	r9, r2
 800b8e4:	9303      	str	r3, [sp, #12]
 800b8e6:	688b      	ldr	r3, [r1, #8]
 800b8e8:	1e5a      	subs	r2, r3, #1
 800b8ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b8ee:	bf81      	itttt	hi
 800b8f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b8f4:	eb03 0b05 	addhi.w	fp, r3, r5
 800b8f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b8fc:	608b      	strhi	r3, [r1, #8]
 800b8fe:	680b      	ldr	r3, [r1, #0]
 800b900:	460a      	mov	r2, r1
 800b902:	f04f 0500 	mov.w	r5, #0
 800b906:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b90a:	f842 3b1c 	str.w	r3, [r2], #28
 800b90e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b912:	4680      	mov	r8, r0
 800b914:	460c      	mov	r4, r1
 800b916:	bf98      	it	ls
 800b918:	f04f 0b00 	movls.w	fp, #0
 800b91c:	9201      	str	r2, [sp, #4]
 800b91e:	4616      	mov	r6, r2
 800b920:	46aa      	mov	sl, r5
 800b922:	462f      	mov	r7, r5
 800b924:	9502      	str	r5, [sp, #8]
 800b926:	68a2      	ldr	r2, [r4, #8]
 800b928:	b15a      	cbz	r2, 800b942 <_scanf_float+0x66>
 800b92a:	f8d9 3000 	ldr.w	r3, [r9]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b4e      	cmp	r3, #78	@ 0x4e
 800b932:	d863      	bhi.n	800b9fc <_scanf_float+0x120>
 800b934:	2b40      	cmp	r3, #64	@ 0x40
 800b936:	d83b      	bhi.n	800b9b0 <_scanf_float+0xd4>
 800b938:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b93c:	b2c8      	uxtb	r0, r1
 800b93e:	280e      	cmp	r0, #14
 800b940:	d939      	bls.n	800b9b6 <_scanf_float+0xda>
 800b942:	b11f      	cbz	r7, 800b94c <_scanf_float+0x70>
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b950:	f1ba 0f01 	cmp.w	sl, #1
 800b954:	f200 8114 	bhi.w	800bb80 <_scanf_float+0x2a4>
 800b958:	9b01      	ldr	r3, [sp, #4]
 800b95a:	429e      	cmp	r6, r3
 800b95c:	f200 8105 	bhi.w	800bb6a <_scanf_float+0x28e>
 800b960:	2001      	movs	r0, #1
 800b962:	b007      	add	sp, #28
 800b964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b968:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b96c:	2a0d      	cmp	r2, #13
 800b96e:	d8e8      	bhi.n	800b942 <_scanf_float+0x66>
 800b970:	a101      	add	r1, pc, #4	@ (adr r1, 800b978 <_scanf_float+0x9c>)
 800b972:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b976:	bf00      	nop
 800b978:	0800bac1 	.word	0x0800bac1
 800b97c:	0800b943 	.word	0x0800b943
 800b980:	0800b943 	.word	0x0800b943
 800b984:	0800b943 	.word	0x0800b943
 800b988:	0800bb1d 	.word	0x0800bb1d
 800b98c:	0800baf7 	.word	0x0800baf7
 800b990:	0800b943 	.word	0x0800b943
 800b994:	0800b943 	.word	0x0800b943
 800b998:	0800bacf 	.word	0x0800bacf
 800b99c:	0800b943 	.word	0x0800b943
 800b9a0:	0800b943 	.word	0x0800b943
 800b9a4:	0800b943 	.word	0x0800b943
 800b9a8:	0800b943 	.word	0x0800b943
 800b9ac:	0800ba8b 	.word	0x0800ba8b
 800b9b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b9b4:	e7da      	b.n	800b96c <_scanf_float+0x90>
 800b9b6:	290e      	cmp	r1, #14
 800b9b8:	d8c3      	bhi.n	800b942 <_scanf_float+0x66>
 800b9ba:	a001      	add	r0, pc, #4	@ (adr r0, 800b9c0 <_scanf_float+0xe4>)
 800b9bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b9c0:	0800ba7b 	.word	0x0800ba7b
 800b9c4:	0800b943 	.word	0x0800b943
 800b9c8:	0800ba7b 	.word	0x0800ba7b
 800b9cc:	0800bb0b 	.word	0x0800bb0b
 800b9d0:	0800b943 	.word	0x0800b943
 800b9d4:	0800ba1d 	.word	0x0800ba1d
 800b9d8:	0800ba61 	.word	0x0800ba61
 800b9dc:	0800ba61 	.word	0x0800ba61
 800b9e0:	0800ba61 	.word	0x0800ba61
 800b9e4:	0800ba61 	.word	0x0800ba61
 800b9e8:	0800ba61 	.word	0x0800ba61
 800b9ec:	0800ba61 	.word	0x0800ba61
 800b9f0:	0800ba61 	.word	0x0800ba61
 800b9f4:	0800ba61 	.word	0x0800ba61
 800b9f8:	0800ba61 	.word	0x0800ba61
 800b9fc:	2b6e      	cmp	r3, #110	@ 0x6e
 800b9fe:	d809      	bhi.n	800ba14 <_scanf_float+0x138>
 800ba00:	2b60      	cmp	r3, #96	@ 0x60
 800ba02:	d8b1      	bhi.n	800b968 <_scanf_float+0x8c>
 800ba04:	2b54      	cmp	r3, #84	@ 0x54
 800ba06:	d07b      	beq.n	800bb00 <_scanf_float+0x224>
 800ba08:	2b59      	cmp	r3, #89	@ 0x59
 800ba0a:	d19a      	bne.n	800b942 <_scanf_float+0x66>
 800ba0c:	2d07      	cmp	r5, #7
 800ba0e:	d198      	bne.n	800b942 <_scanf_float+0x66>
 800ba10:	2508      	movs	r5, #8
 800ba12:	e02f      	b.n	800ba74 <_scanf_float+0x198>
 800ba14:	2b74      	cmp	r3, #116	@ 0x74
 800ba16:	d073      	beq.n	800bb00 <_scanf_float+0x224>
 800ba18:	2b79      	cmp	r3, #121	@ 0x79
 800ba1a:	e7f6      	b.n	800ba0a <_scanf_float+0x12e>
 800ba1c:	6821      	ldr	r1, [r4, #0]
 800ba1e:	05c8      	lsls	r0, r1, #23
 800ba20:	d51e      	bpl.n	800ba60 <_scanf_float+0x184>
 800ba22:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ba26:	6021      	str	r1, [r4, #0]
 800ba28:	3701      	adds	r7, #1
 800ba2a:	f1bb 0f00 	cmp.w	fp, #0
 800ba2e:	d003      	beq.n	800ba38 <_scanf_float+0x15c>
 800ba30:	3201      	adds	r2, #1
 800ba32:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800ba36:	60a2      	str	r2, [r4, #8]
 800ba38:	68a3      	ldr	r3, [r4, #8]
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	60a3      	str	r3, [r4, #8]
 800ba3e:	6923      	ldr	r3, [r4, #16]
 800ba40:	3301      	adds	r3, #1
 800ba42:	6123      	str	r3, [r4, #16]
 800ba44:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f8c9 3004 	str.w	r3, [r9, #4]
 800ba50:	f340 8082 	ble.w	800bb58 <_scanf_float+0x27c>
 800ba54:	f8d9 3000 	ldr.w	r3, [r9]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	f8c9 3000 	str.w	r3, [r9]
 800ba5e:	e762      	b.n	800b926 <_scanf_float+0x4a>
 800ba60:	eb1a 0105 	adds.w	r1, sl, r5
 800ba64:	f47f af6d 	bne.w	800b942 <_scanf_float+0x66>
 800ba68:	6822      	ldr	r2, [r4, #0]
 800ba6a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ba6e:	6022      	str	r2, [r4, #0]
 800ba70:	460d      	mov	r5, r1
 800ba72:	468a      	mov	sl, r1
 800ba74:	f806 3b01 	strb.w	r3, [r6], #1
 800ba78:	e7de      	b.n	800ba38 <_scanf_float+0x15c>
 800ba7a:	6822      	ldr	r2, [r4, #0]
 800ba7c:	0610      	lsls	r0, r2, #24
 800ba7e:	f57f af60 	bpl.w	800b942 <_scanf_float+0x66>
 800ba82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ba86:	6022      	str	r2, [r4, #0]
 800ba88:	e7f4      	b.n	800ba74 <_scanf_float+0x198>
 800ba8a:	f1ba 0f00 	cmp.w	sl, #0
 800ba8e:	d10c      	bne.n	800baaa <_scanf_float+0x1ce>
 800ba90:	b977      	cbnz	r7, 800bab0 <_scanf_float+0x1d4>
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ba98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba9c:	d108      	bne.n	800bab0 <_scanf_float+0x1d4>
 800ba9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800baa2:	6022      	str	r2, [r4, #0]
 800baa4:	f04f 0a01 	mov.w	sl, #1
 800baa8:	e7e4      	b.n	800ba74 <_scanf_float+0x198>
 800baaa:	f1ba 0f02 	cmp.w	sl, #2
 800baae:	d050      	beq.n	800bb52 <_scanf_float+0x276>
 800bab0:	2d01      	cmp	r5, #1
 800bab2:	d002      	beq.n	800baba <_scanf_float+0x1de>
 800bab4:	2d04      	cmp	r5, #4
 800bab6:	f47f af44 	bne.w	800b942 <_scanf_float+0x66>
 800baba:	3501      	adds	r5, #1
 800babc:	b2ed      	uxtb	r5, r5
 800babe:	e7d9      	b.n	800ba74 <_scanf_float+0x198>
 800bac0:	f1ba 0f01 	cmp.w	sl, #1
 800bac4:	f47f af3d 	bne.w	800b942 <_scanf_float+0x66>
 800bac8:	f04f 0a02 	mov.w	sl, #2
 800bacc:	e7d2      	b.n	800ba74 <_scanf_float+0x198>
 800bace:	b975      	cbnz	r5, 800baee <_scanf_float+0x212>
 800bad0:	2f00      	cmp	r7, #0
 800bad2:	f47f af37 	bne.w	800b944 <_scanf_float+0x68>
 800bad6:	6822      	ldr	r2, [r4, #0]
 800bad8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800badc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bae0:	f040 80fc 	bne.w	800bcdc <_scanf_float+0x400>
 800bae4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bae8:	6022      	str	r2, [r4, #0]
 800baea:	2501      	movs	r5, #1
 800baec:	e7c2      	b.n	800ba74 <_scanf_float+0x198>
 800baee:	2d03      	cmp	r5, #3
 800baf0:	d0e3      	beq.n	800baba <_scanf_float+0x1de>
 800baf2:	2d05      	cmp	r5, #5
 800baf4:	e7df      	b.n	800bab6 <_scanf_float+0x1da>
 800baf6:	2d02      	cmp	r5, #2
 800baf8:	f47f af23 	bne.w	800b942 <_scanf_float+0x66>
 800bafc:	2503      	movs	r5, #3
 800bafe:	e7b9      	b.n	800ba74 <_scanf_float+0x198>
 800bb00:	2d06      	cmp	r5, #6
 800bb02:	f47f af1e 	bne.w	800b942 <_scanf_float+0x66>
 800bb06:	2507      	movs	r5, #7
 800bb08:	e7b4      	b.n	800ba74 <_scanf_float+0x198>
 800bb0a:	6822      	ldr	r2, [r4, #0]
 800bb0c:	0591      	lsls	r1, r2, #22
 800bb0e:	f57f af18 	bpl.w	800b942 <_scanf_float+0x66>
 800bb12:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bb16:	6022      	str	r2, [r4, #0]
 800bb18:	9702      	str	r7, [sp, #8]
 800bb1a:	e7ab      	b.n	800ba74 <_scanf_float+0x198>
 800bb1c:	6822      	ldr	r2, [r4, #0]
 800bb1e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bb22:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bb26:	d005      	beq.n	800bb34 <_scanf_float+0x258>
 800bb28:	0550      	lsls	r0, r2, #21
 800bb2a:	f57f af0a 	bpl.w	800b942 <_scanf_float+0x66>
 800bb2e:	2f00      	cmp	r7, #0
 800bb30:	f000 80d4 	beq.w	800bcdc <_scanf_float+0x400>
 800bb34:	0591      	lsls	r1, r2, #22
 800bb36:	bf58      	it	pl
 800bb38:	9902      	ldrpl	r1, [sp, #8]
 800bb3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb3e:	bf58      	it	pl
 800bb40:	1a79      	subpl	r1, r7, r1
 800bb42:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bb46:	bf58      	it	pl
 800bb48:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bb4c:	6022      	str	r2, [r4, #0]
 800bb4e:	2700      	movs	r7, #0
 800bb50:	e790      	b.n	800ba74 <_scanf_float+0x198>
 800bb52:	f04f 0a03 	mov.w	sl, #3
 800bb56:	e78d      	b.n	800ba74 <_scanf_float+0x198>
 800bb58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bb5c:	4649      	mov	r1, r9
 800bb5e:	4640      	mov	r0, r8
 800bb60:	4798      	blx	r3
 800bb62:	2800      	cmp	r0, #0
 800bb64:	f43f aedf 	beq.w	800b926 <_scanf_float+0x4a>
 800bb68:	e6eb      	b.n	800b942 <_scanf_float+0x66>
 800bb6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb72:	464a      	mov	r2, r9
 800bb74:	4640      	mov	r0, r8
 800bb76:	4798      	blx	r3
 800bb78:	6923      	ldr	r3, [r4, #16]
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	6123      	str	r3, [r4, #16]
 800bb7e:	e6eb      	b.n	800b958 <_scanf_float+0x7c>
 800bb80:	1e6b      	subs	r3, r5, #1
 800bb82:	2b06      	cmp	r3, #6
 800bb84:	d824      	bhi.n	800bbd0 <_scanf_float+0x2f4>
 800bb86:	2d02      	cmp	r5, #2
 800bb88:	d836      	bhi.n	800bbf8 <_scanf_float+0x31c>
 800bb8a:	9b01      	ldr	r3, [sp, #4]
 800bb8c:	429e      	cmp	r6, r3
 800bb8e:	f67f aee7 	bls.w	800b960 <_scanf_float+0x84>
 800bb92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb9a:	464a      	mov	r2, r9
 800bb9c:	4640      	mov	r0, r8
 800bb9e:	4798      	blx	r3
 800bba0:	6923      	ldr	r3, [r4, #16]
 800bba2:	3b01      	subs	r3, #1
 800bba4:	6123      	str	r3, [r4, #16]
 800bba6:	e7f0      	b.n	800bb8a <_scanf_float+0x2ae>
 800bba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bbb0:	464a      	mov	r2, r9
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	4798      	blx	r3
 800bbb6:	6923      	ldr	r3, [r4, #16]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	6123      	str	r3, [r4, #16]
 800bbbc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bbc0:	fa5f fa8a 	uxtb.w	sl, sl
 800bbc4:	f1ba 0f02 	cmp.w	sl, #2
 800bbc8:	d1ee      	bne.n	800bba8 <_scanf_float+0x2cc>
 800bbca:	3d03      	subs	r5, #3
 800bbcc:	b2ed      	uxtb	r5, r5
 800bbce:	1b76      	subs	r6, r6, r5
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	05da      	lsls	r2, r3, #23
 800bbd4:	d530      	bpl.n	800bc38 <_scanf_float+0x35c>
 800bbd6:	055b      	lsls	r3, r3, #21
 800bbd8:	d511      	bpl.n	800bbfe <_scanf_float+0x322>
 800bbda:	9b01      	ldr	r3, [sp, #4]
 800bbdc:	429e      	cmp	r6, r3
 800bbde:	f67f aebf 	bls.w	800b960 <_scanf_float+0x84>
 800bbe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbea:	464a      	mov	r2, r9
 800bbec:	4640      	mov	r0, r8
 800bbee:	4798      	blx	r3
 800bbf0:	6923      	ldr	r3, [r4, #16]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	6123      	str	r3, [r4, #16]
 800bbf6:	e7f0      	b.n	800bbda <_scanf_float+0x2fe>
 800bbf8:	46aa      	mov	sl, r5
 800bbfa:	46b3      	mov	fp, r6
 800bbfc:	e7de      	b.n	800bbbc <_scanf_float+0x2e0>
 800bbfe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bc02:	6923      	ldr	r3, [r4, #16]
 800bc04:	2965      	cmp	r1, #101	@ 0x65
 800bc06:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bc0a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800bc0e:	6123      	str	r3, [r4, #16]
 800bc10:	d00c      	beq.n	800bc2c <_scanf_float+0x350>
 800bc12:	2945      	cmp	r1, #69	@ 0x45
 800bc14:	d00a      	beq.n	800bc2c <_scanf_float+0x350>
 800bc16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc1a:	464a      	mov	r2, r9
 800bc1c:	4640      	mov	r0, r8
 800bc1e:	4798      	blx	r3
 800bc20:	6923      	ldr	r3, [r4, #16]
 800bc22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bc26:	3b01      	subs	r3, #1
 800bc28:	1eb5      	subs	r5, r6, #2
 800bc2a:	6123      	str	r3, [r4, #16]
 800bc2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc30:	464a      	mov	r2, r9
 800bc32:	4640      	mov	r0, r8
 800bc34:	4798      	blx	r3
 800bc36:	462e      	mov	r6, r5
 800bc38:	6822      	ldr	r2, [r4, #0]
 800bc3a:	f012 0210 	ands.w	r2, r2, #16
 800bc3e:	d001      	beq.n	800bc44 <_scanf_float+0x368>
 800bc40:	2000      	movs	r0, #0
 800bc42:	e68e      	b.n	800b962 <_scanf_float+0x86>
 800bc44:	7032      	strb	r2, [r6, #0]
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bc4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc50:	d123      	bne.n	800bc9a <_scanf_float+0x3be>
 800bc52:	9b02      	ldr	r3, [sp, #8]
 800bc54:	429f      	cmp	r7, r3
 800bc56:	d00a      	beq.n	800bc6e <_scanf_float+0x392>
 800bc58:	1bda      	subs	r2, r3, r7
 800bc5a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bc5e:	429e      	cmp	r6, r3
 800bc60:	bf28      	it	cs
 800bc62:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bc66:	491e      	ldr	r1, [pc, #120]	@ (800bce0 <_scanf_float+0x404>)
 800bc68:	4630      	mov	r0, r6
 800bc6a:	f000 f911 	bl	800be90 <siprintf>
 800bc6e:	9901      	ldr	r1, [sp, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	4640      	mov	r0, r8
 800bc74:	f002 fb3a 	bl	800e2ec <_strtod_r>
 800bc78:	9b03      	ldr	r3, [sp, #12]
 800bc7a:	6821      	ldr	r1, [r4, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f011 0f02 	tst.w	r1, #2
 800bc82:	f103 0204 	add.w	r2, r3, #4
 800bc86:	d015      	beq.n	800bcb4 <_scanf_float+0x3d8>
 800bc88:	9903      	ldr	r1, [sp, #12]
 800bc8a:	600a      	str	r2, [r1, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	ed83 0b00 	vstr	d0, [r3]
 800bc92:	68e3      	ldr	r3, [r4, #12]
 800bc94:	3301      	adds	r3, #1
 800bc96:	60e3      	str	r3, [r4, #12]
 800bc98:	e7d2      	b.n	800bc40 <_scanf_float+0x364>
 800bc9a:	9b04      	ldr	r3, [sp, #16]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d0e6      	beq.n	800bc6e <_scanf_float+0x392>
 800bca0:	9905      	ldr	r1, [sp, #20]
 800bca2:	230a      	movs	r3, #10
 800bca4:	3101      	adds	r1, #1
 800bca6:	4640      	mov	r0, r8
 800bca8:	f002 fba0 	bl	800e3ec <_strtol_r>
 800bcac:	9b04      	ldr	r3, [sp, #16]
 800bcae:	9e05      	ldr	r6, [sp, #20]
 800bcb0:	1ac2      	subs	r2, r0, r3
 800bcb2:	e7d2      	b.n	800bc5a <_scanf_float+0x37e>
 800bcb4:	f011 0f04 	tst.w	r1, #4
 800bcb8:	9903      	ldr	r1, [sp, #12]
 800bcba:	600a      	str	r2, [r1, #0]
 800bcbc:	d1e6      	bne.n	800bc8c <_scanf_float+0x3b0>
 800bcbe:	eeb4 0b40 	vcmp.f64	d0, d0
 800bcc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc6:	681d      	ldr	r5, [r3, #0]
 800bcc8:	d705      	bvc.n	800bcd6 <_scanf_float+0x3fa>
 800bcca:	4806      	ldr	r0, [pc, #24]	@ (800bce4 <_scanf_float+0x408>)
 800bccc:	f000 f9c6 	bl	800c05c <nanf>
 800bcd0:	ed85 0a00 	vstr	s0, [r5]
 800bcd4:	e7dd      	b.n	800bc92 <_scanf_float+0x3b6>
 800bcd6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bcda:	e7f9      	b.n	800bcd0 <_scanf_float+0x3f4>
 800bcdc:	2700      	movs	r7, #0
 800bcde:	e635      	b.n	800b94c <_scanf_float+0x70>
 800bce0:	0800f86c 	.word	0x0800f86c
 800bce4:	0800f9ad 	.word	0x0800f9ad

0800bce8 <std>:
 800bce8:	2300      	movs	r3, #0
 800bcea:	b510      	push	{r4, lr}
 800bcec:	4604      	mov	r4, r0
 800bcee:	e9c0 3300 	strd	r3, r3, [r0]
 800bcf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcf6:	6083      	str	r3, [r0, #8]
 800bcf8:	8181      	strh	r1, [r0, #12]
 800bcfa:	6643      	str	r3, [r0, #100]	@ 0x64
 800bcfc:	81c2      	strh	r2, [r0, #14]
 800bcfe:	6183      	str	r3, [r0, #24]
 800bd00:	4619      	mov	r1, r3
 800bd02:	2208      	movs	r2, #8
 800bd04:	305c      	adds	r0, #92	@ 0x5c
 800bd06:	f000 f928 	bl	800bf5a <memset>
 800bd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd40 <std+0x58>)
 800bd0c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd0e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd44 <std+0x5c>)
 800bd10:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd12:	4b0d      	ldr	r3, [pc, #52]	@ (800bd48 <std+0x60>)
 800bd14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd16:	4b0d      	ldr	r3, [pc, #52]	@ (800bd4c <std+0x64>)
 800bd18:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd1a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd50 <std+0x68>)
 800bd1c:	6224      	str	r4, [r4, #32]
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	d006      	beq.n	800bd30 <std+0x48>
 800bd22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd26:	4294      	cmp	r4, r2
 800bd28:	d002      	beq.n	800bd30 <std+0x48>
 800bd2a:	33d0      	adds	r3, #208	@ 0xd0
 800bd2c:	429c      	cmp	r4, r3
 800bd2e:	d105      	bne.n	800bd3c <std+0x54>
 800bd30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd38:	f000 b98c 	b.w	800c054 <__retarget_lock_init_recursive>
 800bd3c:	bd10      	pop	{r4, pc}
 800bd3e:	bf00      	nop
 800bd40:	0800bed5 	.word	0x0800bed5
 800bd44:	0800bef7 	.word	0x0800bef7
 800bd48:	0800bf2f 	.word	0x0800bf2f
 800bd4c:	0800bf53 	.word	0x0800bf53
 800bd50:	240033b0 	.word	0x240033b0

0800bd54 <stdio_exit_handler>:
 800bd54:	4a02      	ldr	r2, [pc, #8]	@ (800bd60 <stdio_exit_handler+0xc>)
 800bd56:	4903      	ldr	r1, [pc, #12]	@ (800bd64 <stdio_exit_handler+0x10>)
 800bd58:	4803      	ldr	r0, [pc, #12]	@ (800bd68 <stdio_exit_handler+0x14>)
 800bd5a:	f000 b87b 	b.w	800be54 <_fwalk_sglue>
 800bd5e:	bf00      	nop
 800bd60:	24000010 	.word	0x24000010
 800bd64:	0800ea2d 	.word	0x0800ea2d
 800bd68:	24000020 	.word	0x24000020

0800bd6c <cleanup_stdio>:
 800bd6c:	6841      	ldr	r1, [r0, #4]
 800bd6e:	4b0c      	ldr	r3, [pc, #48]	@ (800bda0 <cleanup_stdio+0x34>)
 800bd70:	4299      	cmp	r1, r3
 800bd72:	b510      	push	{r4, lr}
 800bd74:	4604      	mov	r4, r0
 800bd76:	d001      	beq.n	800bd7c <cleanup_stdio+0x10>
 800bd78:	f002 fe58 	bl	800ea2c <_fflush_r>
 800bd7c:	68a1      	ldr	r1, [r4, #8]
 800bd7e:	4b09      	ldr	r3, [pc, #36]	@ (800bda4 <cleanup_stdio+0x38>)
 800bd80:	4299      	cmp	r1, r3
 800bd82:	d002      	beq.n	800bd8a <cleanup_stdio+0x1e>
 800bd84:	4620      	mov	r0, r4
 800bd86:	f002 fe51 	bl	800ea2c <_fflush_r>
 800bd8a:	68e1      	ldr	r1, [r4, #12]
 800bd8c:	4b06      	ldr	r3, [pc, #24]	@ (800bda8 <cleanup_stdio+0x3c>)
 800bd8e:	4299      	cmp	r1, r3
 800bd90:	d004      	beq.n	800bd9c <cleanup_stdio+0x30>
 800bd92:	4620      	mov	r0, r4
 800bd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd98:	f002 be48 	b.w	800ea2c <_fflush_r>
 800bd9c:	bd10      	pop	{r4, pc}
 800bd9e:	bf00      	nop
 800bda0:	240033b0 	.word	0x240033b0
 800bda4:	24003418 	.word	0x24003418
 800bda8:	24003480 	.word	0x24003480

0800bdac <global_stdio_init.part.0>:
 800bdac:	b510      	push	{r4, lr}
 800bdae:	4b0b      	ldr	r3, [pc, #44]	@ (800bddc <global_stdio_init.part.0+0x30>)
 800bdb0:	4c0b      	ldr	r4, [pc, #44]	@ (800bde0 <global_stdio_init.part.0+0x34>)
 800bdb2:	4a0c      	ldr	r2, [pc, #48]	@ (800bde4 <global_stdio_init.part.0+0x38>)
 800bdb4:	601a      	str	r2, [r3, #0]
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	2200      	movs	r2, #0
 800bdba:	2104      	movs	r1, #4
 800bdbc:	f7ff ff94 	bl	800bce8 <std>
 800bdc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	2109      	movs	r1, #9
 800bdc8:	f7ff ff8e 	bl	800bce8 <std>
 800bdcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bdd0:	2202      	movs	r2, #2
 800bdd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdd6:	2112      	movs	r1, #18
 800bdd8:	f7ff bf86 	b.w	800bce8 <std>
 800bddc:	240034e8 	.word	0x240034e8
 800bde0:	240033b0 	.word	0x240033b0
 800bde4:	0800bd55 	.word	0x0800bd55

0800bde8 <__sfp_lock_acquire>:
 800bde8:	4801      	ldr	r0, [pc, #4]	@ (800bdf0 <__sfp_lock_acquire+0x8>)
 800bdea:	f000 b934 	b.w	800c056 <__retarget_lock_acquire_recursive>
 800bdee:	bf00      	nop
 800bdf0:	240034f1 	.word	0x240034f1

0800bdf4 <__sfp_lock_release>:
 800bdf4:	4801      	ldr	r0, [pc, #4]	@ (800bdfc <__sfp_lock_release+0x8>)
 800bdf6:	f000 b92f 	b.w	800c058 <__retarget_lock_release_recursive>
 800bdfa:	bf00      	nop
 800bdfc:	240034f1 	.word	0x240034f1

0800be00 <__sinit>:
 800be00:	b510      	push	{r4, lr}
 800be02:	4604      	mov	r4, r0
 800be04:	f7ff fff0 	bl	800bde8 <__sfp_lock_acquire>
 800be08:	6a23      	ldr	r3, [r4, #32]
 800be0a:	b11b      	cbz	r3, 800be14 <__sinit+0x14>
 800be0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be10:	f7ff bff0 	b.w	800bdf4 <__sfp_lock_release>
 800be14:	4b04      	ldr	r3, [pc, #16]	@ (800be28 <__sinit+0x28>)
 800be16:	6223      	str	r3, [r4, #32]
 800be18:	4b04      	ldr	r3, [pc, #16]	@ (800be2c <__sinit+0x2c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1f5      	bne.n	800be0c <__sinit+0xc>
 800be20:	f7ff ffc4 	bl	800bdac <global_stdio_init.part.0>
 800be24:	e7f2      	b.n	800be0c <__sinit+0xc>
 800be26:	bf00      	nop
 800be28:	0800bd6d 	.word	0x0800bd6d
 800be2c:	240034e8 	.word	0x240034e8

0800be30 <fiprintf>:
 800be30:	b40e      	push	{r1, r2, r3}
 800be32:	b503      	push	{r0, r1, lr}
 800be34:	4601      	mov	r1, r0
 800be36:	ab03      	add	r3, sp, #12
 800be38:	4805      	ldr	r0, [pc, #20]	@ (800be50 <fiprintf+0x20>)
 800be3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be3e:	6800      	ldr	r0, [r0, #0]
 800be40:	9301      	str	r3, [sp, #4]
 800be42:	f002 fc57 	bl	800e6f4 <_vfiprintf_r>
 800be46:	b002      	add	sp, #8
 800be48:	f85d eb04 	ldr.w	lr, [sp], #4
 800be4c:	b003      	add	sp, #12
 800be4e:	4770      	bx	lr
 800be50:	2400001c 	.word	0x2400001c

0800be54 <_fwalk_sglue>:
 800be54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be58:	4607      	mov	r7, r0
 800be5a:	4688      	mov	r8, r1
 800be5c:	4614      	mov	r4, r2
 800be5e:	2600      	movs	r6, #0
 800be60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be64:	f1b9 0901 	subs.w	r9, r9, #1
 800be68:	d505      	bpl.n	800be76 <_fwalk_sglue+0x22>
 800be6a:	6824      	ldr	r4, [r4, #0]
 800be6c:	2c00      	cmp	r4, #0
 800be6e:	d1f7      	bne.n	800be60 <_fwalk_sglue+0xc>
 800be70:	4630      	mov	r0, r6
 800be72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be76:	89ab      	ldrh	r3, [r5, #12]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d907      	bls.n	800be8c <_fwalk_sglue+0x38>
 800be7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be80:	3301      	adds	r3, #1
 800be82:	d003      	beq.n	800be8c <_fwalk_sglue+0x38>
 800be84:	4629      	mov	r1, r5
 800be86:	4638      	mov	r0, r7
 800be88:	47c0      	blx	r8
 800be8a:	4306      	orrs	r6, r0
 800be8c:	3568      	adds	r5, #104	@ 0x68
 800be8e:	e7e9      	b.n	800be64 <_fwalk_sglue+0x10>

0800be90 <siprintf>:
 800be90:	b40e      	push	{r1, r2, r3}
 800be92:	b510      	push	{r4, lr}
 800be94:	b09d      	sub	sp, #116	@ 0x74
 800be96:	ab1f      	add	r3, sp, #124	@ 0x7c
 800be98:	9002      	str	r0, [sp, #8]
 800be9a:	9006      	str	r0, [sp, #24]
 800be9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bea0:	480a      	ldr	r0, [pc, #40]	@ (800becc <siprintf+0x3c>)
 800bea2:	9107      	str	r1, [sp, #28]
 800bea4:	9104      	str	r1, [sp, #16]
 800bea6:	490a      	ldr	r1, [pc, #40]	@ (800bed0 <siprintf+0x40>)
 800bea8:	f853 2b04 	ldr.w	r2, [r3], #4
 800beac:	9105      	str	r1, [sp, #20]
 800beae:	2400      	movs	r4, #0
 800beb0:	a902      	add	r1, sp, #8
 800beb2:	6800      	ldr	r0, [r0, #0]
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800beb8:	f002 faf6 	bl	800e4a8 <_svfiprintf_r>
 800bebc:	9b02      	ldr	r3, [sp, #8]
 800bebe:	701c      	strb	r4, [r3, #0]
 800bec0:	b01d      	add	sp, #116	@ 0x74
 800bec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bec6:	b003      	add	sp, #12
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	2400001c 	.word	0x2400001c
 800bed0:	ffff0208 	.word	0xffff0208

0800bed4 <__sread>:
 800bed4:	b510      	push	{r4, lr}
 800bed6:	460c      	mov	r4, r1
 800bed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bedc:	f000 f86c 	bl	800bfb8 <_read_r>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	bfab      	itete	ge
 800bee4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bee6:	89a3      	ldrhlt	r3, [r4, #12]
 800bee8:	181b      	addge	r3, r3, r0
 800beea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800beee:	bfac      	ite	ge
 800bef0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bef2:	81a3      	strhlt	r3, [r4, #12]
 800bef4:	bd10      	pop	{r4, pc}

0800bef6 <__swrite>:
 800bef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800befa:	461f      	mov	r7, r3
 800befc:	898b      	ldrh	r3, [r1, #12]
 800befe:	05db      	lsls	r3, r3, #23
 800bf00:	4605      	mov	r5, r0
 800bf02:	460c      	mov	r4, r1
 800bf04:	4616      	mov	r6, r2
 800bf06:	d505      	bpl.n	800bf14 <__swrite+0x1e>
 800bf08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f000 f840 	bl	800bf94 <_lseek_r>
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf1e:	81a3      	strh	r3, [r4, #12]
 800bf20:	4632      	mov	r2, r6
 800bf22:	463b      	mov	r3, r7
 800bf24:	4628      	mov	r0, r5
 800bf26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2a:	f000 b857 	b.w	800bfdc <_write_r>

0800bf2e <__sseek>:
 800bf2e:	b510      	push	{r4, lr}
 800bf30:	460c      	mov	r4, r1
 800bf32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf36:	f000 f82d 	bl	800bf94 <_lseek_r>
 800bf3a:	1c43      	adds	r3, r0, #1
 800bf3c:	89a3      	ldrh	r3, [r4, #12]
 800bf3e:	bf15      	itete	ne
 800bf40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf4a:	81a3      	strheq	r3, [r4, #12]
 800bf4c:	bf18      	it	ne
 800bf4e:	81a3      	strhne	r3, [r4, #12]
 800bf50:	bd10      	pop	{r4, pc}

0800bf52 <__sclose>:
 800bf52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf56:	f000 b80d 	b.w	800bf74 <_close_r>

0800bf5a <memset>:
 800bf5a:	4402      	add	r2, r0
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d100      	bne.n	800bf64 <memset+0xa>
 800bf62:	4770      	bx	lr
 800bf64:	f803 1b01 	strb.w	r1, [r3], #1
 800bf68:	e7f9      	b.n	800bf5e <memset+0x4>
	...

0800bf6c <_localeconv_r>:
 800bf6c:	4800      	ldr	r0, [pc, #0]	@ (800bf70 <_localeconv_r+0x4>)
 800bf6e:	4770      	bx	lr
 800bf70:	2400015c 	.word	0x2400015c

0800bf74 <_close_r>:
 800bf74:	b538      	push	{r3, r4, r5, lr}
 800bf76:	4d06      	ldr	r5, [pc, #24]	@ (800bf90 <_close_r+0x1c>)
 800bf78:	2300      	movs	r3, #0
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	4608      	mov	r0, r1
 800bf7e:	602b      	str	r3, [r5, #0]
 800bf80:	f7f5 fa3c 	bl	80013fc <_close>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d102      	bne.n	800bf8e <_close_r+0x1a>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	b103      	cbz	r3, 800bf8e <_close_r+0x1a>
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	240034ec 	.word	0x240034ec

0800bf94 <_lseek_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d07      	ldr	r5, [pc, #28]	@ (800bfb4 <_lseek_r+0x20>)
 800bf98:	4604      	mov	r4, r0
 800bf9a:	4608      	mov	r0, r1
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	602a      	str	r2, [r5, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f7f5 fa51 	bl	800144a <_lseek>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_lseek_r+0x1e>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_lseek_r+0x1e>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	240034ec 	.word	0x240034ec

0800bfb8 <_read_r>:
 800bfb8:	b538      	push	{r3, r4, r5, lr}
 800bfba:	4d07      	ldr	r5, [pc, #28]	@ (800bfd8 <_read_r+0x20>)
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	4608      	mov	r0, r1
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	602a      	str	r2, [r5, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	f7f5 f9df 	bl	800138a <_read>
 800bfcc:	1c43      	adds	r3, r0, #1
 800bfce:	d102      	bne.n	800bfd6 <_read_r+0x1e>
 800bfd0:	682b      	ldr	r3, [r5, #0]
 800bfd2:	b103      	cbz	r3, 800bfd6 <_read_r+0x1e>
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	240034ec 	.word	0x240034ec

0800bfdc <_write_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4d07      	ldr	r5, [pc, #28]	@ (800bffc <_write_r+0x20>)
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	4608      	mov	r0, r1
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	602a      	str	r2, [r5, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	f7f5 f9ea 	bl	80013c4 <_write>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d102      	bne.n	800bffa <_write_r+0x1e>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	b103      	cbz	r3, 800bffa <_write_r+0x1e>
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	bd38      	pop	{r3, r4, r5, pc}
 800bffc:	240034ec 	.word	0x240034ec

0800c000 <__errno>:
 800c000:	4b01      	ldr	r3, [pc, #4]	@ (800c008 <__errno+0x8>)
 800c002:	6818      	ldr	r0, [r3, #0]
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	2400001c 	.word	0x2400001c

0800c00c <__libc_init_array>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	4d0d      	ldr	r5, [pc, #52]	@ (800c044 <__libc_init_array+0x38>)
 800c010:	4c0d      	ldr	r4, [pc, #52]	@ (800c048 <__libc_init_array+0x3c>)
 800c012:	1b64      	subs	r4, r4, r5
 800c014:	10a4      	asrs	r4, r4, #2
 800c016:	2600      	movs	r6, #0
 800c018:	42a6      	cmp	r6, r4
 800c01a:	d109      	bne.n	800c030 <__libc_init_array+0x24>
 800c01c:	4d0b      	ldr	r5, [pc, #44]	@ (800c04c <__libc_init_array+0x40>)
 800c01e:	4c0c      	ldr	r4, [pc, #48]	@ (800c050 <__libc_init_array+0x44>)
 800c020:	f003 faa2 	bl	800f568 <_init>
 800c024:	1b64      	subs	r4, r4, r5
 800c026:	10a4      	asrs	r4, r4, #2
 800c028:	2600      	movs	r6, #0
 800c02a:	42a6      	cmp	r6, r4
 800c02c:	d105      	bne.n	800c03a <__libc_init_array+0x2e>
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	f855 3b04 	ldr.w	r3, [r5], #4
 800c034:	4798      	blx	r3
 800c036:	3601      	adds	r6, #1
 800c038:	e7ee      	b.n	800c018 <__libc_init_array+0xc>
 800c03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c03e:	4798      	blx	r3
 800c040:	3601      	adds	r6, #1
 800c042:	e7f2      	b.n	800c02a <__libc_init_array+0x1e>
 800c044:	0800fc6c 	.word	0x0800fc6c
 800c048:	0800fc6c 	.word	0x0800fc6c
 800c04c:	0800fc6c 	.word	0x0800fc6c
 800c050:	0800fc70 	.word	0x0800fc70

0800c054 <__retarget_lock_init_recursive>:
 800c054:	4770      	bx	lr

0800c056 <__retarget_lock_acquire_recursive>:
 800c056:	4770      	bx	lr

0800c058 <__retarget_lock_release_recursive>:
 800c058:	4770      	bx	lr
	...

0800c05c <nanf>:
 800c05c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c064 <nanf+0x8>
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	7fc00000 	.word	0x7fc00000

0800c068 <quorem>:
 800c068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06c:	6903      	ldr	r3, [r0, #16]
 800c06e:	690c      	ldr	r4, [r1, #16]
 800c070:	42a3      	cmp	r3, r4
 800c072:	4607      	mov	r7, r0
 800c074:	db7e      	blt.n	800c174 <quorem+0x10c>
 800c076:	3c01      	subs	r4, #1
 800c078:	f101 0814 	add.w	r8, r1, #20
 800c07c:	00a3      	lsls	r3, r4, #2
 800c07e:	f100 0514 	add.w	r5, r0, #20
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c088:	9301      	str	r3, [sp, #4]
 800c08a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c08e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c092:	3301      	adds	r3, #1
 800c094:	429a      	cmp	r2, r3
 800c096:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c09a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c09e:	d32e      	bcc.n	800c0fe <quorem+0x96>
 800c0a0:	f04f 0a00 	mov.w	sl, #0
 800c0a4:	46c4      	mov	ip, r8
 800c0a6:	46ae      	mov	lr, r5
 800c0a8:	46d3      	mov	fp, sl
 800c0aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c0ae:	b298      	uxth	r0, r3
 800c0b0:	fb06 a000 	mla	r0, r6, r0, sl
 800c0b4:	0c02      	lsrs	r2, r0, #16
 800c0b6:	0c1b      	lsrs	r3, r3, #16
 800c0b8:	fb06 2303 	mla	r3, r6, r3, r2
 800c0bc:	f8de 2000 	ldr.w	r2, [lr]
 800c0c0:	b280      	uxth	r0, r0
 800c0c2:	b292      	uxth	r2, r2
 800c0c4:	1a12      	subs	r2, r2, r0
 800c0c6:	445a      	add	r2, fp
 800c0c8:	f8de 0000 	ldr.w	r0, [lr]
 800c0cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c0d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c0da:	b292      	uxth	r2, r2
 800c0dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c0e0:	45e1      	cmp	r9, ip
 800c0e2:	f84e 2b04 	str.w	r2, [lr], #4
 800c0e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c0ea:	d2de      	bcs.n	800c0aa <quorem+0x42>
 800c0ec:	9b00      	ldr	r3, [sp, #0]
 800c0ee:	58eb      	ldr	r3, [r5, r3]
 800c0f0:	b92b      	cbnz	r3, 800c0fe <quorem+0x96>
 800c0f2:	9b01      	ldr	r3, [sp, #4]
 800c0f4:	3b04      	subs	r3, #4
 800c0f6:	429d      	cmp	r5, r3
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	d32f      	bcc.n	800c15c <quorem+0xf4>
 800c0fc:	613c      	str	r4, [r7, #16]
 800c0fe:	4638      	mov	r0, r7
 800c100:	f001 f954 	bl	800d3ac <__mcmp>
 800c104:	2800      	cmp	r0, #0
 800c106:	db25      	blt.n	800c154 <quorem+0xec>
 800c108:	4629      	mov	r1, r5
 800c10a:	2000      	movs	r0, #0
 800c10c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c110:	f8d1 c000 	ldr.w	ip, [r1]
 800c114:	fa1f fe82 	uxth.w	lr, r2
 800c118:	fa1f f38c 	uxth.w	r3, ip
 800c11c:	eba3 030e 	sub.w	r3, r3, lr
 800c120:	4403      	add	r3, r0
 800c122:	0c12      	lsrs	r2, r2, #16
 800c124:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c128:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c132:	45c1      	cmp	r9, r8
 800c134:	f841 3b04 	str.w	r3, [r1], #4
 800c138:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c13c:	d2e6      	bcs.n	800c10c <quorem+0xa4>
 800c13e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c146:	b922      	cbnz	r2, 800c152 <quorem+0xea>
 800c148:	3b04      	subs	r3, #4
 800c14a:	429d      	cmp	r5, r3
 800c14c:	461a      	mov	r2, r3
 800c14e:	d30b      	bcc.n	800c168 <quorem+0x100>
 800c150:	613c      	str	r4, [r7, #16]
 800c152:	3601      	adds	r6, #1
 800c154:	4630      	mov	r0, r6
 800c156:	b003      	add	sp, #12
 800c158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15c:	6812      	ldr	r2, [r2, #0]
 800c15e:	3b04      	subs	r3, #4
 800c160:	2a00      	cmp	r2, #0
 800c162:	d1cb      	bne.n	800c0fc <quorem+0x94>
 800c164:	3c01      	subs	r4, #1
 800c166:	e7c6      	b.n	800c0f6 <quorem+0x8e>
 800c168:	6812      	ldr	r2, [r2, #0]
 800c16a:	3b04      	subs	r3, #4
 800c16c:	2a00      	cmp	r2, #0
 800c16e:	d1ef      	bne.n	800c150 <quorem+0xe8>
 800c170:	3c01      	subs	r4, #1
 800c172:	e7ea      	b.n	800c14a <quorem+0xe2>
 800c174:	2000      	movs	r0, #0
 800c176:	e7ee      	b.n	800c156 <quorem+0xee>

0800c178 <_dtoa_r>:
 800c178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17c:	ed2d 8b02 	vpush	{d8}
 800c180:	69c7      	ldr	r7, [r0, #28]
 800c182:	b091      	sub	sp, #68	@ 0x44
 800c184:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c188:	ec55 4b10 	vmov	r4, r5, d0
 800c18c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c18e:	9107      	str	r1, [sp, #28]
 800c190:	4681      	mov	r9, r0
 800c192:	9209      	str	r2, [sp, #36]	@ 0x24
 800c194:	930d      	str	r3, [sp, #52]	@ 0x34
 800c196:	b97f      	cbnz	r7, 800c1b8 <_dtoa_r+0x40>
 800c198:	2010      	movs	r0, #16
 800c19a:	f000 fd95 	bl	800ccc8 <malloc>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	f8c9 001c 	str.w	r0, [r9, #28]
 800c1a4:	b920      	cbnz	r0, 800c1b0 <_dtoa_r+0x38>
 800c1a6:	4ba0      	ldr	r3, [pc, #640]	@ (800c428 <_dtoa_r+0x2b0>)
 800c1a8:	21ef      	movs	r1, #239	@ 0xef
 800c1aa:	48a0      	ldr	r0, [pc, #640]	@ (800c42c <_dtoa_r+0x2b4>)
 800c1ac:	f002 fd4c 	bl	800ec48 <__assert_func>
 800c1b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c1b4:	6007      	str	r7, [r0, #0]
 800c1b6:	60c7      	str	r7, [r0, #12]
 800c1b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c1bc:	6819      	ldr	r1, [r3, #0]
 800c1be:	b159      	cbz	r1, 800c1d8 <_dtoa_r+0x60>
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	604a      	str	r2, [r1, #4]
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	4093      	lsls	r3, r2
 800c1c8:	608b      	str	r3, [r1, #8]
 800c1ca:	4648      	mov	r0, r9
 800c1cc:	f000 fe72 	bl	800ceb4 <_Bfree>
 800c1d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	601a      	str	r2, [r3, #0]
 800c1d8:	1e2b      	subs	r3, r5, #0
 800c1da:	bfbb      	ittet	lt
 800c1dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c1e0:	9303      	strlt	r3, [sp, #12]
 800c1e2:	2300      	movge	r3, #0
 800c1e4:	2201      	movlt	r2, #1
 800c1e6:	bfac      	ite	ge
 800c1e8:	6033      	strge	r3, [r6, #0]
 800c1ea:	6032      	strlt	r2, [r6, #0]
 800c1ec:	4b90      	ldr	r3, [pc, #576]	@ (800c430 <_dtoa_r+0x2b8>)
 800c1ee:	9e03      	ldr	r6, [sp, #12]
 800c1f0:	43b3      	bics	r3, r6
 800c1f2:	d110      	bne.n	800c216 <_dtoa_r+0x9e>
 800c1f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c1f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c1fa:	6013      	str	r3, [r2, #0]
 800c1fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c200:	4323      	orrs	r3, r4
 800c202:	f000 84e6 	beq.w	800cbd2 <_dtoa_r+0xa5a>
 800c206:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c208:	4f8a      	ldr	r7, [pc, #552]	@ (800c434 <_dtoa_r+0x2bc>)
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f000 84e8 	beq.w	800cbe0 <_dtoa_r+0xa68>
 800c210:	1cfb      	adds	r3, r7, #3
 800c212:	f000 bce3 	b.w	800cbdc <_dtoa_r+0xa64>
 800c216:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c21a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c222:	d10a      	bne.n	800c23a <_dtoa_r+0xc2>
 800c224:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c226:	2301      	movs	r3, #1
 800c228:	6013      	str	r3, [r2, #0]
 800c22a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c22c:	b113      	cbz	r3, 800c234 <_dtoa_r+0xbc>
 800c22e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c230:	4b81      	ldr	r3, [pc, #516]	@ (800c438 <_dtoa_r+0x2c0>)
 800c232:	6013      	str	r3, [r2, #0]
 800c234:	4f81      	ldr	r7, [pc, #516]	@ (800c43c <_dtoa_r+0x2c4>)
 800c236:	f000 bcd3 	b.w	800cbe0 <_dtoa_r+0xa68>
 800c23a:	aa0e      	add	r2, sp, #56	@ 0x38
 800c23c:	a90f      	add	r1, sp, #60	@ 0x3c
 800c23e:	4648      	mov	r0, r9
 800c240:	eeb0 0b48 	vmov.f64	d0, d8
 800c244:	f001 f9d2 	bl	800d5ec <__d2b>
 800c248:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c24c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c24e:	9001      	str	r0, [sp, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d045      	beq.n	800c2e0 <_dtoa_r+0x168>
 800c254:	eeb0 7b48 	vmov.f64	d7, d8
 800c258:	ee18 1a90 	vmov	r1, s17
 800c25c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c260:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c264:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c268:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c26c:	2500      	movs	r5, #0
 800c26e:	ee07 1a90 	vmov	s15, r1
 800c272:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c276:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c410 <_dtoa_r+0x298>
 800c27a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c27e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c418 <_dtoa_r+0x2a0>
 800c282:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c286:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c420 <_dtoa_r+0x2a8>
 800c28a:	ee07 3a90 	vmov	s15, r3
 800c28e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c292:	eeb0 7b46 	vmov.f64	d7, d6
 800c296:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c29a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c29e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a6:	ee16 8a90 	vmov	r8, s13
 800c2aa:	d508      	bpl.n	800c2be <_dtoa_r+0x146>
 800c2ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c2b0:	eeb4 6b47 	vcmp.f64	d6, d7
 800c2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b8:	bf18      	it	ne
 800c2ba:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800c2be:	f1b8 0f16 	cmp.w	r8, #22
 800c2c2:	d82b      	bhi.n	800c31c <_dtoa_r+0x1a4>
 800c2c4:	495e      	ldr	r1, [pc, #376]	@ (800c440 <_dtoa_r+0x2c8>)
 800c2c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c2ca:	ed91 7b00 	vldr	d7, [r1]
 800c2ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d6:	d501      	bpl.n	800c2dc <_dtoa_r+0x164>
 800c2d8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c2dc:	2100      	movs	r1, #0
 800c2de:	e01e      	b.n	800c31e <_dtoa_r+0x1a6>
 800c2e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2e2:	4413      	add	r3, r2
 800c2e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c2e8:	2920      	cmp	r1, #32
 800c2ea:	bfc1      	itttt	gt
 800c2ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c2f0:	408e      	lslgt	r6, r1
 800c2f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c2f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c2fa:	bfd6      	itet	le
 800c2fc:	f1c1 0120 	rsble	r1, r1, #32
 800c300:	4331      	orrgt	r1, r6
 800c302:	fa04 f101 	lslle.w	r1, r4, r1
 800c306:	ee07 1a90 	vmov	s15, r1
 800c30a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c30e:	3b01      	subs	r3, #1
 800c310:	ee17 1a90 	vmov	r1, s15
 800c314:	2501      	movs	r5, #1
 800c316:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c31a:	e7a8      	b.n	800c26e <_dtoa_r+0xf6>
 800c31c:	2101      	movs	r1, #1
 800c31e:	1ad2      	subs	r2, r2, r3
 800c320:	1e53      	subs	r3, r2, #1
 800c322:	9306      	str	r3, [sp, #24]
 800c324:	bf45      	ittet	mi
 800c326:	f1c2 0301 	rsbmi	r3, r2, #1
 800c32a:	9304      	strmi	r3, [sp, #16]
 800c32c:	2300      	movpl	r3, #0
 800c32e:	2300      	movmi	r3, #0
 800c330:	bf4c      	ite	mi
 800c332:	9306      	strmi	r3, [sp, #24]
 800c334:	9304      	strpl	r3, [sp, #16]
 800c336:	f1b8 0f00 	cmp.w	r8, #0
 800c33a:	910c      	str	r1, [sp, #48]	@ 0x30
 800c33c:	db18      	blt.n	800c370 <_dtoa_r+0x1f8>
 800c33e:	9b06      	ldr	r3, [sp, #24]
 800c340:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c344:	4443      	add	r3, r8
 800c346:	9306      	str	r3, [sp, #24]
 800c348:	2300      	movs	r3, #0
 800c34a:	9a07      	ldr	r2, [sp, #28]
 800c34c:	2a09      	cmp	r2, #9
 800c34e:	d845      	bhi.n	800c3dc <_dtoa_r+0x264>
 800c350:	2a05      	cmp	r2, #5
 800c352:	bfc4      	itt	gt
 800c354:	3a04      	subgt	r2, #4
 800c356:	9207      	strgt	r2, [sp, #28]
 800c358:	9a07      	ldr	r2, [sp, #28]
 800c35a:	f1a2 0202 	sub.w	r2, r2, #2
 800c35e:	bfcc      	ite	gt
 800c360:	2400      	movgt	r4, #0
 800c362:	2401      	movle	r4, #1
 800c364:	2a03      	cmp	r2, #3
 800c366:	d844      	bhi.n	800c3f2 <_dtoa_r+0x27a>
 800c368:	e8df f002 	tbb	[pc, r2]
 800c36c:	0b173634 	.word	0x0b173634
 800c370:	9b04      	ldr	r3, [sp, #16]
 800c372:	2200      	movs	r2, #0
 800c374:	eba3 0308 	sub.w	r3, r3, r8
 800c378:	9304      	str	r3, [sp, #16]
 800c37a:	920a      	str	r2, [sp, #40]	@ 0x28
 800c37c:	f1c8 0300 	rsb	r3, r8, #0
 800c380:	e7e3      	b.n	800c34a <_dtoa_r+0x1d2>
 800c382:	2201      	movs	r2, #1
 800c384:	9208      	str	r2, [sp, #32]
 800c386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c388:	eb08 0b02 	add.w	fp, r8, r2
 800c38c:	f10b 0a01 	add.w	sl, fp, #1
 800c390:	4652      	mov	r2, sl
 800c392:	2a01      	cmp	r2, #1
 800c394:	bfb8      	it	lt
 800c396:	2201      	movlt	r2, #1
 800c398:	e006      	b.n	800c3a8 <_dtoa_r+0x230>
 800c39a:	2201      	movs	r2, #1
 800c39c:	9208      	str	r2, [sp, #32]
 800c39e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3a0:	2a00      	cmp	r2, #0
 800c3a2:	dd29      	ble.n	800c3f8 <_dtoa_r+0x280>
 800c3a4:	4693      	mov	fp, r2
 800c3a6:	4692      	mov	sl, r2
 800c3a8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	2004      	movs	r0, #4
 800c3b0:	f100 0614 	add.w	r6, r0, #20
 800c3b4:	4296      	cmp	r6, r2
 800c3b6:	d926      	bls.n	800c406 <_dtoa_r+0x28e>
 800c3b8:	6079      	str	r1, [r7, #4]
 800c3ba:	4648      	mov	r0, r9
 800c3bc:	9305      	str	r3, [sp, #20]
 800c3be:	f000 fd39 	bl	800ce34 <_Balloc>
 800c3c2:	9b05      	ldr	r3, [sp, #20]
 800c3c4:	4607      	mov	r7, r0
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d13e      	bne.n	800c448 <_dtoa_r+0x2d0>
 800c3ca:	4b1e      	ldr	r3, [pc, #120]	@ (800c444 <_dtoa_r+0x2cc>)
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800c3d2:	e6ea      	b.n	800c1aa <_dtoa_r+0x32>
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	e7e1      	b.n	800c39c <_dtoa_r+0x224>
 800c3d8:	2200      	movs	r2, #0
 800c3da:	e7d3      	b.n	800c384 <_dtoa_r+0x20c>
 800c3dc:	2401      	movs	r4, #1
 800c3de:	2200      	movs	r2, #0
 800c3e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c3e4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	46da      	mov	sl, fp
 800c3ec:	2212      	movs	r2, #18
 800c3ee:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3f0:	e7da      	b.n	800c3a8 <_dtoa_r+0x230>
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	9208      	str	r2, [sp, #32]
 800c3f6:	e7f5      	b.n	800c3e4 <_dtoa_r+0x26c>
 800c3f8:	f04f 0b01 	mov.w	fp, #1
 800c3fc:	46da      	mov	sl, fp
 800c3fe:	465a      	mov	r2, fp
 800c400:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c404:	e7d0      	b.n	800c3a8 <_dtoa_r+0x230>
 800c406:	3101      	adds	r1, #1
 800c408:	0040      	lsls	r0, r0, #1
 800c40a:	e7d1      	b.n	800c3b0 <_dtoa_r+0x238>
 800c40c:	f3af 8000 	nop.w
 800c410:	636f4361 	.word	0x636f4361
 800c414:	3fd287a7 	.word	0x3fd287a7
 800c418:	8b60c8b3 	.word	0x8b60c8b3
 800c41c:	3fc68a28 	.word	0x3fc68a28
 800c420:	509f79fb 	.word	0x509f79fb
 800c424:	3fd34413 	.word	0x3fd34413
 800c428:	0800f87e 	.word	0x0800f87e
 800c42c:	0800f895 	.word	0x0800f895
 800c430:	7ff00000 	.word	0x7ff00000
 800c434:	0800f87a 	.word	0x0800f87a
 800c438:	0800f849 	.word	0x0800f849
 800c43c:	0800f848 	.word	0x0800f848
 800c440:	0800fa48 	.word	0x0800fa48
 800c444:	0800f8ed 	.word	0x0800f8ed
 800c448:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c44c:	f1ba 0f0e 	cmp.w	sl, #14
 800c450:	6010      	str	r0, [r2, #0]
 800c452:	d86e      	bhi.n	800c532 <_dtoa_r+0x3ba>
 800c454:	2c00      	cmp	r4, #0
 800c456:	d06c      	beq.n	800c532 <_dtoa_r+0x3ba>
 800c458:	f1b8 0f00 	cmp.w	r8, #0
 800c45c:	f340 80b4 	ble.w	800c5c8 <_dtoa_r+0x450>
 800c460:	4ac8      	ldr	r2, [pc, #800]	@ (800c784 <_dtoa_r+0x60c>)
 800c462:	f008 010f 	and.w	r1, r8, #15
 800c466:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c46a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c46e:	ed92 7b00 	vldr	d7, [r2]
 800c472:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c476:	f000 809b 	beq.w	800c5b0 <_dtoa_r+0x438>
 800c47a:	4ac3      	ldr	r2, [pc, #780]	@ (800c788 <_dtoa_r+0x610>)
 800c47c:	ed92 6b08 	vldr	d6, [r2, #32]
 800c480:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c484:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c488:	f001 010f 	and.w	r1, r1, #15
 800c48c:	2203      	movs	r2, #3
 800c48e:	48be      	ldr	r0, [pc, #760]	@ (800c788 <_dtoa_r+0x610>)
 800c490:	2900      	cmp	r1, #0
 800c492:	f040 808f 	bne.w	800c5b4 <_dtoa_r+0x43c>
 800c496:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c49a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c49e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c4a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c4a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4a8:	2900      	cmp	r1, #0
 800c4aa:	f000 80b3 	beq.w	800c614 <_dtoa_r+0x49c>
 800c4ae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c4b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ba:	f140 80ab 	bpl.w	800c614 <_dtoa_r+0x49c>
 800c4be:	f1ba 0f00 	cmp.w	sl, #0
 800c4c2:	f000 80a7 	beq.w	800c614 <_dtoa_r+0x49c>
 800c4c6:	f1bb 0f00 	cmp.w	fp, #0
 800c4ca:	dd30      	ble.n	800c52e <_dtoa_r+0x3b6>
 800c4cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c4d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c4d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c4d8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800c4dc:	9105      	str	r1, [sp, #20]
 800c4de:	3201      	adds	r2, #1
 800c4e0:	465c      	mov	r4, fp
 800c4e2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c4e6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c4ea:	ee07 2a90 	vmov	s15, r2
 800c4ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c4f2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c4f6:	ee15 2a90 	vmov	r2, s11
 800c4fa:	ec51 0b15 	vmov	r0, r1, d5
 800c4fe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c502:	2c00      	cmp	r4, #0
 800c504:	f040 808a 	bne.w	800c61c <_dtoa_r+0x4a4>
 800c508:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c50c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c510:	ec41 0b17 	vmov	d7, r0, r1
 800c514:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51c:	f300 826a 	bgt.w	800c9f4 <_dtoa_r+0x87c>
 800c520:	eeb1 7b47 	vneg.f64	d7, d7
 800c524:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c52c:	d423      	bmi.n	800c576 <_dtoa_r+0x3fe>
 800c52e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c532:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c534:	2a00      	cmp	r2, #0
 800c536:	f2c0 8129 	blt.w	800c78c <_dtoa_r+0x614>
 800c53a:	f1b8 0f0e 	cmp.w	r8, #14
 800c53e:	f300 8125 	bgt.w	800c78c <_dtoa_r+0x614>
 800c542:	4b90      	ldr	r3, [pc, #576]	@ (800c784 <_dtoa_r+0x60c>)
 800c544:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c548:	ed93 6b00 	vldr	d6, [r3]
 800c54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f280 80c8 	bge.w	800c6e4 <_dtoa_r+0x56c>
 800c554:	f1ba 0f00 	cmp.w	sl, #0
 800c558:	f300 80c4 	bgt.w	800c6e4 <_dtoa_r+0x56c>
 800c55c:	d10b      	bne.n	800c576 <_dtoa_r+0x3fe>
 800c55e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c562:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c566:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c56a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c572:	f2c0 823c 	blt.w	800c9ee <_dtoa_r+0x876>
 800c576:	2400      	movs	r4, #0
 800c578:	4625      	mov	r5, r4
 800c57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c57c:	43db      	mvns	r3, r3
 800c57e:	9305      	str	r3, [sp, #20]
 800c580:	463e      	mov	r6, r7
 800c582:	f04f 0800 	mov.w	r8, #0
 800c586:	4621      	mov	r1, r4
 800c588:	4648      	mov	r0, r9
 800c58a:	f000 fc93 	bl	800ceb4 <_Bfree>
 800c58e:	2d00      	cmp	r5, #0
 800c590:	f000 80a2 	beq.w	800c6d8 <_dtoa_r+0x560>
 800c594:	f1b8 0f00 	cmp.w	r8, #0
 800c598:	d005      	beq.n	800c5a6 <_dtoa_r+0x42e>
 800c59a:	45a8      	cmp	r8, r5
 800c59c:	d003      	beq.n	800c5a6 <_dtoa_r+0x42e>
 800c59e:	4641      	mov	r1, r8
 800c5a0:	4648      	mov	r0, r9
 800c5a2:	f000 fc87 	bl	800ceb4 <_Bfree>
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4648      	mov	r0, r9
 800c5aa:	f000 fc83 	bl	800ceb4 <_Bfree>
 800c5ae:	e093      	b.n	800c6d8 <_dtoa_r+0x560>
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	e76c      	b.n	800c48e <_dtoa_r+0x316>
 800c5b4:	07cc      	lsls	r4, r1, #31
 800c5b6:	d504      	bpl.n	800c5c2 <_dtoa_r+0x44a>
 800c5b8:	ed90 6b00 	vldr	d6, [r0]
 800c5bc:	3201      	adds	r2, #1
 800c5be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5c2:	1049      	asrs	r1, r1, #1
 800c5c4:	3008      	adds	r0, #8
 800c5c6:	e763      	b.n	800c490 <_dtoa_r+0x318>
 800c5c8:	d022      	beq.n	800c610 <_dtoa_r+0x498>
 800c5ca:	f1c8 0100 	rsb	r1, r8, #0
 800c5ce:	4a6d      	ldr	r2, [pc, #436]	@ (800c784 <_dtoa_r+0x60c>)
 800c5d0:	f001 000f 	and.w	r0, r1, #15
 800c5d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c5d8:	ed92 7b00 	vldr	d7, [r2]
 800c5dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c5e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c5e4:	4868      	ldr	r0, [pc, #416]	@ (800c788 <_dtoa_r+0x610>)
 800c5e6:	1109      	asrs	r1, r1, #4
 800c5e8:	2400      	movs	r4, #0
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	b929      	cbnz	r1, 800c5fa <_dtoa_r+0x482>
 800c5ee:	2c00      	cmp	r4, #0
 800c5f0:	f43f af57 	beq.w	800c4a2 <_dtoa_r+0x32a>
 800c5f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c5f8:	e753      	b.n	800c4a2 <_dtoa_r+0x32a>
 800c5fa:	07ce      	lsls	r6, r1, #31
 800c5fc:	d505      	bpl.n	800c60a <_dtoa_r+0x492>
 800c5fe:	ed90 6b00 	vldr	d6, [r0]
 800c602:	3201      	adds	r2, #1
 800c604:	2401      	movs	r4, #1
 800c606:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c60a:	1049      	asrs	r1, r1, #1
 800c60c:	3008      	adds	r0, #8
 800c60e:	e7ed      	b.n	800c5ec <_dtoa_r+0x474>
 800c610:	2202      	movs	r2, #2
 800c612:	e746      	b.n	800c4a2 <_dtoa_r+0x32a>
 800c614:	f8cd 8014 	str.w	r8, [sp, #20]
 800c618:	4654      	mov	r4, sl
 800c61a:	e762      	b.n	800c4e2 <_dtoa_r+0x36a>
 800c61c:	4a59      	ldr	r2, [pc, #356]	@ (800c784 <_dtoa_r+0x60c>)
 800c61e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c622:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c626:	9a08      	ldr	r2, [sp, #32]
 800c628:	ec41 0b17 	vmov	d7, r0, r1
 800c62c:	443c      	add	r4, r7
 800c62e:	b34a      	cbz	r2, 800c684 <_dtoa_r+0x50c>
 800c630:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c634:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c638:	463e      	mov	r6, r7
 800c63a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c63e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c642:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c646:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c64a:	ee14 2a90 	vmov	r2, s9
 800c64e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c652:	3230      	adds	r2, #48	@ 0x30
 800c654:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c658:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c660:	f806 2b01 	strb.w	r2, [r6], #1
 800c664:	d438      	bmi.n	800c6d8 <_dtoa_r+0x560>
 800c666:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c66a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c672:	d46e      	bmi.n	800c752 <_dtoa_r+0x5da>
 800c674:	42a6      	cmp	r6, r4
 800c676:	f43f af5a 	beq.w	800c52e <_dtoa_r+0x3b6>
 800c67a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c67e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c682:	e7e0      	b.n	800c646 <_dtoa_r+0x4ce>
 800c684:	4621      	mov	r1, r4
 800c686:	463e      	mov	r6, r7
 800c688:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c68c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c690:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c694:	ee14 2a90 	vmov	r2, s9
 800c698:	3230      	adds	r2, #48	@ 0x30
 800c69a:	f806 2b01 	strb.w	r2, [r6], #1
 800c69e:	42a6      	cmp	r6, r4
 800c6a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c6a4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c6a8:	d119      	bne.n	800c6de <_dtoa_r+0x566>
 800c6aa:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c6ae:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c6b2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ba:	dc4a      	bgt.n	800c752 <_dtoa_r+0x5da>
 800c6bc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c6c0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6c8:	f57f af31 	bpl.w	800c52e <_dtoa_r+0x3b6>
 800c6cc:	460e      	mov	r6, r1
 800c6ce:	3901      	subs	r1, #1
 800c6d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6d4:	2b30      	cmp	r3, #48	@ 0x30
 800c6d6:	d0f9      	beq.n	800c6cc <_dtoa_r+0x554>
 800c6d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c6dc:	e027      	b.n	800c72e <_dtoa_r+0x5b6>
 800c6de:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c6e2:	e7d5      	b.n	800c690 <_dtoa_r+0x518>
 800c6e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6e8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c6ec:	463e      	mov	r6, r7
 800c6ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c6f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c6f6:	ee15 3a10 	vmov	r3, s10
 800c6fa:	3330      	adds	r3, #48	@ 0x30
 800c6fc:	f806 3b01 	strb.w	r3, [r6], #1
 800c700:	1bf3      	subs	r3, r6, r7
 800c702:	459a      	cmp	sl, r3
 800c704:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c708:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c70c:	d132      	bne.n	800c774 <_dtoa_r+0x5fc>
 800c70e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c712:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c71a:	dc18      	bgt.n	800c74e <_dtoa_r+0x5d6>
 800c71c:	eeb4 7b46 	vcmp.f64	d7, d6
 800c720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c724:	d103      	bne.n	800c72e <_dtoa_r+0x5b6>
 800c726:	ee15 3a10 	vmov	r3, s10
 800c72a:	07db      	lsls	r3, r3, #31
 800c72c:	d40f      	bmi.n	800c74e <_dtoa_r+0x5d6>
 800c72e:	9901      	ldr	r1, [sp, #4]
 800c730:	4648      	mov	r0, r9
 800c732:	f000 fbbf 	bl	800ceb4 <_Bfree>
 800c736:	2300      	movs	r3, #0
 800c738:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c73a:	7033      	strb	r3, [r6, #0]
 800c73c:	f108 0301 	add.w	r3, r8, #1
 800c740:	6013      	str	r3, [r2, #0]
 800c742:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 824b 	beq.w	800cbe0 <_dtoa_r+0xa68>
 800c74a:	601e      	str	r6, [r3, #0]
 800c74c:	e248      	b.n	800cbe0 <_dtoa_r+0xa68>
 800c74e:	f8cd 8014 	str.w	r8, [sp, #20]
 800c752:	4633      	mov	r3, r6
 800c754:	461e      	mov	r6, r3
 800c756:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c75a:	2a39      	cmp	r2, #57	@ 0x39
 800c75c:	d106      	bne.n	800c76c <_dtoa_r+0x5f4>
 800c75e:	429f      	cmp	r7, r3
 800c760:	d1f8      	bne.n	800c754 <_dtoa_r+0x5dc>
 800c762:	9a05      	ldr	r2, [sp, #20]
 800c764:	3201      	adds	r2, #1
 800c766:	9205      	str	r2, [sp, #20]
 800c768:	2230      	movs	r2, #48	@ 0x30
 800c76a:	703a      	strb	r2, [r7, #0]
 800c76c:	781a      	ldrb	r2, [r3, #0]
 800c76e:	3201      	adds	r2, #1
 800c770:	701a      	strb	r2, [r3, #0]
 800c772:	e7b1      	b.n	800c6d8 <_dtoa_r+0x560>
 800c774:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c778:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c780:	d1b5      	bne.n	800c6ee <_dtoa_r+0x576>
 800c782:	e7d4      	b.n	800c72e <_dtoa_r+0x5b6>
 800c784:	0800fa48 	.word	0x0800fa48
 800c788:	0800fa20 	.word	0x0800fa20
 800c78c:	9908      	ldr	r1, [sp, #32]
 800c78e:	2900      	cmp	r1, #0
 800c790:	f000 80e9 	beq.w	800c966 <_dtoa_r+0x7ee>
 800c794:	9907      	ldr	r1, [sp, #28]
 800c796:	2901      	cmp	r1, #1
 800c798:	f300 80cb 	bgt.w	800c932 <_dtoa_r+0x7ba>
 800c79c:	2d00      	cmp	r5, #0
 800c79e:	f000 80c4 	beq.w	800c92a <_dtoa_r+0x7b2>
 800c7a2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c7a6:	9e04      	ldr	r6, [sp, #16]
 800c7a8:	461c      	mov	r4, r3
 800c7aa:	9305      	str	r3, [sp, #20]
 800c7ac:	9b04      	ldr	r3, [sp, #16]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	9304      	str	r3, [sp, #16]
 800c7b2:	9b06      	ldr	r3, [sp, #24]
 800c7b4:	2101      	movs	r1, #1
 800c7b6:	4413      	add	r3, r2
 800c7b8:	4648      	mov	r0, r9
 800c7ba:	9306      	str	r3, [sp, #24]
 800c7bc:	f000 fc78 	bl	800d0b0 <__i2b>
 800c7c0:	9b05      	ldr	r3, [sp, #20]
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	b166      	cbz	r6, 800c7e0 <_dtoa_r+0x668>
 800c7c6:	9a06      	ldr	r2, [sp, #24]
 800c7c8:	2a00      	cmp	r2, #0
 800c7ca:	dd09      	ble.n	800c7e0 <_dtoa_r+0x668>
 800c7cc:	42b2      	cmp	r2, r6
 800c7ce:	9904      	ldr	r1, [sp, #16]
 800c7d0:	bfa8      	it	ge
 800c7d2:	4632      	movge	r2, r6
 800c7d4:	1a89      	subs	r1, r1, r2
 800c7d6:	9104      	str	r1, [sp, #16]
 800c7d8:	9906      	ldr	r1, [sp, #24]
 800c7da:	1ab6      	subs	r6, r6, r2
 800c7dc:	1a8a      	subs	r2, r1, r2
 800c7de:	9206      	str	r2, [sp, #24]
 800c7e0:	b30b      	cbz	r3, 800c826 <_dtoa_r+0x6ae>
 800c7e2:	9a08      	ldr	r2, [sp, #32]
 800c7e4:	2a00      	cmp	r2, #0
 800c7e6:	f000 80c5 	beq.w	800c974 <_dtoa_r+0x7fc>
 800c7ea:	2c00      	cmp	r4, #0
 800c7ec:	f000 80bf 	beq.w	800c96e <_dtoa_r+0x7f6>
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4622      	mov	r2, r4
 800c7f4:	4648      	mov	r0, r9
 800c7f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7f8:	f000 fd12 	bl	800d220 <__pow5mult>
 800c7fc:	9a01      	ldr	r2, [sp, #4]
 800c7fe:	4601      	mov	r1, r0
 800c800:	4605      	mov	r5, r0
 800c802:	4648      	mov	r0, r9
 800c804:	f000 fc6a 	bl	800d0dc <__multiply>
 800c808:	9901      	ldr	r1, [sp, #4]
 800c80a:	9005      	str	r0, [sp, #20]
 800c80c:	4648      	mov	r0, r9
 800c80e:	f000 fb51 	bl	800ceb4 <_Bfree>
 800c812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c814:	1b1b      	subs	r3, r3, r4
 800c816:	f000 80b0 	beq.w	800c97a <_dtoa_r+0x802>
 800c81a:	9905      	ldr	r1, [sp, #20]
 800c81c:	461a      	mov	r2, r3
 800c81e:	4648      	mov	r0, r9
 800c820:	f000 fcfe 	bl	800d220 <__pow5mult>
 800c824:	9001      	str	r0, [sp, #4]
 800c826:	2101      	movs	r1, #1
 800c828:	4648      	mov	r0, r9
 800c82a:	f000 fc41 	bl	800d0b0 <__i2b>
 800c82e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c830:	4604      	mov	r4, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	f000 81da 	beq.w	800cbec <_dtoa_r+0xa74>
 800c838:	461a      	mov	r2, r3
 800c83a:	4601      	mov	r1, r0
 800c83c:	4648      	mov	r0, r9
 800c83e:	f000 fcef 	bl	800d220 <__pow5mult>
 800c842:	9b07      	ldr	r3, [sp, #28]
 800c844:	2b01      	cmp	r3, #1
 800c846:	4604      	mov	r4, r0
 800c848:	f300 80a0 	bgt.w	800c98c <_dtoa_r+0x814>
 800c84c:	9b02      	ldr	r3, [sp, #8]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f040 8096 	bne.w	800c980 <_dtoa_r+0x808>
 800c854:	9b03      	ldr	r3, [sp, #12]
 800c856:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c85a:	2a00      	cmp	r2, #0
 800c85c:	f040 8092 	bne.w	800c984 <_dtoa_r+0x80c>
 800c860:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c864:	0d12      	lsrs	r2, r2, #20
 800c866:	0512      	lsls	r2, r2, #20
 800c868:	2a00      	cmp	r2, #0
 800c86a:	f000 808d 	beq.w	800c988 <_dtoa_r+0x810>
 800c86e:	9b04      	ldr	r3, [sp, #16]
 800c870:	3301      	adds	r3, #1
 800c872:	9304      	str	r3, [sp, #16]
 800c874:	9b06      	ldr	r3, [sp, #24]
 800c876:	3301      	adds	r3, #1
 800c878:	9306      	str	r3, [sp, #24]
 800c87a:	2301      	movs	r3, #1
 800c87c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c87e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 81b9 	beq.w	800cbf8 <_dtoa_r+0xa80>
 800c886:	6922      	ldr	r2, [r4, #16]
 800c888:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c88c:	6910      	ldr	r0, [r2, #16]
 800c88e:	f000 fbc3 	bl	800d018 <__hi0bits>
 800c892:	f1c0 0020 	rsb	r0, r0, #32
 800c896:	9b06      	ldr	r3, [sp, #24]
 800c898:	4418      	add	r0, r3
 800c89a:	f010 001f 	ands.w	r0, r0, #31
 800c89e:	f000 8081 	beq.w	800c9a4 <_dtoa_r+0x82c>
 800c8a2:	f1c0 0220 	rsb	r2, r0, #32
 800c8a6:	2a04      	cmp	r2, #4
 800c8a8:	dd73      	ble.n	800c992 <_dtoa_r+0x81a>
 800c8aa:	9b04      	ldr	r3, [sp, #16]
 800c8ac:	f1c0 001c 	rsb	r0, r0, #28
 800c8b0:	4403      	add	r3, r0
 800c8b2:	9304      	str	r3, [sp, #16]
 800c8b4:	9b06      	ldr	r3, [sp, #24]
 800c8b6:	4406      	add	r6, r0
 800c8b8:	4403      	add	r3, r0
 800c8ba:	9306      	str	r3, [sp, #24]
 800c8bc:	9b04      	ldr	r3, [sp, #16]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	dd05      	ble.n	800c8ce <_dtoa_r+0x756>
 800c8c2:	9901      	ldr	r1, [sp, #4]
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	4648      	mov	r0, r9
 800c8c8:	f000 fd04 	bl	800d2d4 <__lshift>
 800c8cc:	9001      	str	r0, [sp, #4]
 800c8ce:	9b06      	ldr	r3, [sp, #24]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	dd05      	ble.n	800c8e0 <_dtoa_r+0x768>
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	4648      	mov	r0, r9
 800c8da:	f000 fcfb 	bl	800d2d4 <__lshift>
 800c8de:	4604      	mov	r4, r0
 800c8e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d060      	beq.n	800c9a8 <_dtoa_r+0x830>
 800c8e6:	9801      	ldr	r0, [sp, #4]
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	f000 fd5f 	bl	800d3ac <__mcmp>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	da5a      	bge.n	800c9a8 <_dtoa_r+0x830>
 800c8f2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800c8f6:	9305      	str	r3, [sp, #20]
 800c8f8:	9901      	ldr	r1, [sp, #4]
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	220a      	movs	r2, #10
 800c8fe:	4648      	mov	r0, r9
 800c900:	f000 fafa 	bl	800cef8 <__multadd>
 800c904:	9b08      	ldr	r3, [sp, #32]
 800c906:	9001      	str	r0, [sp, #4]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f000 8177 	beq.w	800cbfc <_dtoa_r+0xa84>
 800c90e:	4629      	mov	r1, r5
 800c910:	2300      	movs	r3, #0
 800c912:	220a      	movs	r2, #10
 800c914:	4648      	mov	r0, r9
 800c916:	f000 faef 	bl	800cef8 <__multadd>
 800c91a:	f1bb 0f00 	cmp.w	fp, #0
 800c91e:	4605      	mov	r5, r0
 800c920:	dc6e      	bgt.n	800ca00 <_dtoa_r+0x888>
 800c922:	9b07      	ldr	r3, [sp, #28]
 800c924:	2b02      	cmp	r3, #2
 800c926:	dc48      	bgt.n	800c9ba <_dtoa_r+0x842>
 800c928:	e06a      	b.n	800ca00 <_dtoa_r+0x888>
 800c92a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c92c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c930:	e739      	b.n	800c7a6 <_dtoa_r+0x62e>
 800c932:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800c936:	42a3      	cmp	r3, r4
 800c938:	db07      	blt.n	800c94a <_dtoa_r+0x7d2>
 800c93a:	f1ba 0f00 	cmp.w	sl, #0
 800c93e:	eba3 0404 	sub.w	r4, r3, r4
 800c942:	db0b      	blt.n	800c95c <_dtoa_r+0x7e4>
 800c944:	9e04      	ldr	r6, [sp, #16]
 800c946:	4652      	mov	r2, sl
 800c948:	e72f      	b.n	800c7aa <_dtoa_r+0x632>
 800c94a:	1ae2      	subs	r2, r4, r3
 800c94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c94e:	9e04      	ldr	r6, [sp, #16]
 800c950:	4413      	add	r3, r2
 800c952:	930a      	str	r3, [sp, #40]	@ 0x28
 800c954:	4652      	mov	r2, sl
 800c956:	4623      	mov	r3, r4
 800c958:	2400      	movs	r4, #0
 800c95a:	e726      	b.n	800c7aa <_dtoa_r+0x632>
 800c95c:	9a04      	ldr	r2, [sp, #16]
 800c95e:	eba2 060a 	sub.w	r6, r2, sl
 800c962:	2200      	movs	r2, #0
 800c964:	e721      	b.n	800c7aa <_dtoa_r+0x632>
 800c966:	9e04      	ldr	r6, [sp, #16]
 800c968:	9d08      	ldr	r5, [sp, #32]
 800c96a:	461c      	mov	r4, r3
 800c96c:	e72a      	b.n	800c7c4 <_dtoa_r+0x64c>
 800c96e:	9a01      	ldr	r2, [sp, #4]
 800c970:	9205      	str	r2, [sp, #20]
 800c972:	e752      	b.n	800c81a <_dtoa_r+0x6a2>
 800c974:	9901      	ldr	r1, [sp, #4]
 800c976:	461a      	mov	r2, r3
 800c978:	e751      	b.n	800c81e <_dtoa_r+0x6a6>
 800c97a:	9b05      	ldr	r3, [sp, #20]
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	e752      	b.n	800c826 <_dtoa_r+0x6ae>
 800c980:	2300      	movs	r3, #0
 800c982:	e77b      	b.n	800c87c <_dtoa_r+0x704>
 800c984:	9b02      	ldr	r3, [sp, #8]
 800c986:	e779      	b.n	800c87c <_dtoa_r+0x704>
 800c988:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c98a:	e778      	b.n	800c87e <_dtoa_r+0x706>
 800c98c:	2300      	movs	r3, #0
 800c98e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c990:	e779      	b.n	800c886 <_dtoa_r+0x70e>
 800c992:	d093      	beq.n	800c8bc <_dtoa_r+0x744>
 800c994:	9b04      	ldr	r3, [sp, #16]
 800c996:	321c      	adds	r2, #28
 800c998:	4413      	add	r3, r2
 800c99a:	9304      	str	r3, [sp, #16]
 800c99c:	9b06      	ldr	r3, [sp, #24]
 800c99e:	4416      	add	r6, r2
 800c9a0:	4413      	add	r3, r2
 800c9a2:	e78a      	b.n	800c8ba <_dtoa_r+0x742>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	e7f5      	b.n	800c994 <_dtoa_r+0x81c>
 800c9a8:	f1ba 0f00 	cmp.w	sl, #0
 800c9ac:	f8cd 8014 	str.w	r8, [sp, #20]
 800c9b0:	46d3      	mov	fp, sl
 800c9b2:	dc21      	bgt.n	800c9f8 <_dtoa_r+0x880>
 800c9b4:	9b07      	ldr	r3, [sp, #28]
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	dd1e      	ble.n	800c9f8 <_dtoa_r+0x880>
 800c9ba:	f1bb 0f00 	cmp.w	fp, #0
 800c9be:	f47f addc 	bne.w	800c57a <_dtoa_r+0x402>
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	465b      	mov	r3, fp
 800c9c6:	2205      	movs	r2, #5
 800c9c8:	4648      	mov	r0, r9
 800c9ca:	f000 fa95 	bl	800cef8 <__multadd>
 800c9ce:	4601      	mov	r1, r0
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	9801      	ldr	r0, [sp, #4]
 800c9d4:	f000 fcea 	bl	800d3ac <__mcmp>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	f77f adce 	ble.w	800c57a <_dtoa_r+0x402>
 800c9de:	463e      	mov	r6, r7
 800c9e0:	2331      	movs	r3, #49	@ 0x31
 800c9e2:	f806 3b01 	strb.w	r3, [r6], #1
 800c9e6:	9b05      	ldr	r3, [sp, #20]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	9305      	str	r3, [sp, #20]
 800c9ec:	e5c9      	b.n	800c582 <_dtoa_r+0x40a>
 800c9ee:	f8cd 8014 	str.w	r8, [sp, #20]
 800c9f2:	4654      	mov	r4, sl
 800c9f4:	4625      	mov	r5, r4
 800c9f6:	e7f2      	b.n	800c9de <_dtoa_r+0x866>
 800c9f8:	9b08      	ldr	r3, [sp, #32]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 8102 	beq.w	800cc04 <_dtoa_r+0xa8c>
 800ca00:	2e00      	cmp	r6, #0
 800ca02:	dd05      	ble.n	800ca10 <_dtoa_r+0x898>
 800ca04:	4629      	mov	r1, r5
 800ca06:	4632      	mov	r2, r6
 800ca08:	4648      	mov	r0, r9
 800ca0a:	f000 fc63 	bl	800d2d4 <__lshift>
 800ca0e:	4605      	mov	r5, r0
 800ca10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d058      	beq.n	800cac8 <_dtoa_r+0x950>
 800ca16:	6869      	ldr	r1, [r5, #4]
 800ca18:	4648      	mov	r0, r9
 800ca1a:	f000 fa0b 	bl	800ce34 <_Balloc>
 800ca1e:	4606      	mov	r6, r0
 800ca20:	b928      	cbnz	r0, 800ca2e <_dtoa_r+0x8b6>
 800ca22:	4b82      	ldr	r3, [pc, #520]	@ (800cc2c <_dtoa_r+0xab4>)
 800ca24:	4602      	mov	r2, r0
 800ca26:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca2a:	f7ff bbbe 	b.w	800c1aa <_dtoa_r+0x32>
 800ca2e:	692a      	ldr	r2, [r5, #16]
 800ca30:	3202      	adds	r2, #2
 800ca32:	0092      	lsls	r2, r2, #2
 800ca34:	f105 010c 	add.w	r1, r5, #12
 800ca38:	300c      	adds	r0, #12
 800ca3a:	f002 f8ef 	bl	800ec1c <memcpy>
 800ca3e:	2201      	movs	r2, #1
 800ca40:	4631      	mov	r1, r6
 800ca42:	4648      	mov	r0, r9
 800ca44:	f000 fc46 	bl	800d2d4 <__lshift>
 800ca48:	1c7b      	adds	r3, r7, #1
 800ca4a:	9304      	str	r3, [sp, #16]
 800ca4c:	eb07 030b 	add.w	r3, r7, fp
 800ca50:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca52:	9b02      	ldr	r3, [sp, #8]
 800ca54:	f003 0301 	and.w	r3, r3, #1
 800ca58:	46a8      	mov	r8, r5
 800ca5a:	9308      	str	r3, [sp, #32]
 800ca5c:	4605      	mov	r5, r0
 800ca5e:	9b04      	ldr	r3, [sp, #16]
 800ca60:	9801      	ldr	r0, [sp, #4]
 800ca62:	4621      	mov	r1, r4
 800ca64:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800ca68:	f7ff fafe 	bl	800c068 <quorem>
 800ca6c:	4641      	mov	r1, r8
 800ca6e:	9002      	str	r0, [sp, #8]
 800ca70:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ca74:	9801      	ldr	r0, [sp, #4]
 800ca76:	f000 fc99 	bl	800d3ac <__mcmp>
 800ca7a:	462a      	mov	r2, r5
 800ca7c:	9006      	str	r0, [sp, #24]
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4648      	mov	r0, r9
 800ca82:	f000 fcaf 	bl	800d3e4 <__mdiff>
 800ca86:	68c2      	ldr	r2, [r0, #12]
 800ca88:	4606      	mov	r6, r0
 800ca8a:	b9fa      	cbnz	r2, 800cacc <_dtoa_r+0x954>
 800ca8c:	4601      	mov	r1, r0
 800ca8e:	9801      	ldr	r0, [sp, #4]
 800ca90:	f000 fc8c 	bl	800d3ac <__mcmp>
 800ca94:	4602      	mov	r2, r0
 800ca96:	4631      	mov	r1, r6
 800ca98:	4648      	mov	r0, r9
 800ca9a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ca9c:	f000 fa0a 	bl	800ceb4 <_Bfree>
 800caa0:	9b07      	ldr	r3, [sp, #28]
 800caa2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800caa4:	9e04      	ldr	r6, [sp, #16]
 800caa6:	ea42 0103 	orr.w	r1, r2, r3
 800caaa:	9b08      	ldr	r3, [sp, #32]
 800caac:	4319      	orrs	r1, r3
 800caae:	d10f      	bne.n	800cad0 <_dtoa_r+0x958>
 800cab0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cab4:	d028      	beq.n	800cb08 <_dtoa_r+0x990>
 800cab6:	9b06      	ldr	r3, [sp, #24]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	dd02      	ble.n	800cac2 <_dtoa_r+0x94a>
 800cabc:	9b02      	ldr	r3, [sp, #8]
 800cabe:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800cac2:	f88b a000 	strb.w	sl, [fp]
 800cac6:	e55e      	b.n	800c586 <_dtoa_r+0x40e>
 800cac8:	4628      	mov	r0, r5
 800caca:	e7bd      	b.n	800ca48 <_dtoa_r+0x8d0>
 800cacc:	2201      	movs	r2, #1
 800cace:	e7e2      	b.n	800ca96 <_dtoa_r+0x91e>
 800cad0:	9b06      	ldr	r3, [sp, #24]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	db04      	blt.n	800cae0 <_dtoa_r+0x968>
 800cad6:	9907      	ldr	r1, [sp, #28]
 800cad8:	430b      	orrs	r3, r1
 800cada:	9908      	ldr	r1, [sp, #32]
 800cadc:	430b      	orrs	r3, r1
 800cade:	d120      	bne.n	800cb22 <_dtoa_r+0x9aa>
 800cae0:	2a00      	cmp	r2, #0
 800cae2:	ddee      	ble.n	800cac2 <_dtoa_r+0x94a>
 800cae4:	9901      	ldr	r1, [sp, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	4648      	mov	r0, r9
 800caea:	f000 fbf3 	bl	800d2d4 <__lshift>
 800caee:	4621      	mov	r1, r4
 800caf0:	9001      	str	r0, [sp, #4]
 800caf2:	f000 fc5b 	bl	800d3ac <__mcmp>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	dc03      	bgt.n	800cb02 <_dtoa_r+0x98a>
 800cafa:	d1e2      	bne.n	800cac2 <_dtoa_r+0x94a>
 800cafc:	f01a 0f01 	tst.w	sl, #1
 800cb00:	d0df      	beq.n	800cac2 <_dtoa_r+0x94a>
 800cb02:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cb06:	d1d9      	bne.n	800cabc <_dtoa_r+0x944>
 800cb08:	2339      	movs	r3, #57	@ 0x39
 800cb0a:	f88b 3000 	strb.w	r3, [fp]
 800cb0e:	4633      	mov	r3, r6
 800cb10:	461e      	mov	r6, r3
 800cb12:	3b01      	subs	r3, #1
 800cb14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb18:	2a39      	cmp	r2, #57	@ 0x39
 800cb1a:	d052      	beq.n	800cbc2 <_dtoa_r+0xa4a>
 800cb1c:	3201      	adds	r2, #1
 800cb1e:	701a      	strb	r2, [r3, #0]
 800cb20:	e531      	b.n	800c586 <_dtoa_r+0x40e>
 800cb22:	2a00      	cmp	r2, #0
 800cb24:	dd07      	ble.n	800cb36 <_dtoa_r+0x9be>
 800cb26:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cb2a:	d0ed      	beq.n	800cb08 <_dtoa_r+0x990>
 800cb2c:	f10a 0301 	add.w	r3, sl, #1
 800cb30:	f88b 3000 	strb.w	r3, [fp]
 800cb34:	e527      	b.n	800c586 <_dtoa_r+0x40e>
 800cb36:	9b04      	ldr	r3, [sp, #16]
 800cb38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb3a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d029      	beq.n	800cb96 <_dtoa_r+0xa1e>
 800cb42:	9901      	ldr	r1, [sp, #4]
 800cb44:	2300      	movs	r3, #0
 800cb46:	220a      	movs	r2, #10
 800cb48:	4648      	mov	r0, r9
 800cb4a:	f000 f9d5 	bl	800cef8 <__multadd>
 800cb4e:	45a8      	cmp	r8, r5
 800cb50:	9001      	str	r0, [sp, #4]
 800cb52:	f04f 0300 	mov.w	r3, #0
 800cb56:	f04f 020a 	mov.w	r2, #10
 800cb5a:	4641      	mov	r1, r8
 800cb5c:	4648      	mov	r0, r9
 800cb5e:	d107      	bne.n	800cb70 <_dtoa_r+0x9f8>
 800cb60:	f000 f9ca 	bl	800cef8 <__multadd>
 800cb64:	4680      	mov	r8, r0
 800cb66:	4605      	mov	r5, r0
 800cb68:	9b04      	ldr	r3, [sp, #16]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	9304      	str	r3, [sp, #16]
 800cb6e:	e776      	b.n	800ca5e <_dtoa_r+0x8e6>
 800cb70:	f000 f9c2 	bl	800cef8 <__multadd>
 800cb74:	4629      	mov	r1, r5
 800cb76:	4680      	mov	r8, r0
 800cb78:	2300      	movs	r3, #0
 800cb7a:	220a      	movs	r2, #10
 800cb7c:	4648      	mov	r0, r9
 800cb7e:	f000 f9bb 	bl	800cef8 <__multadd>
 800cb82:	4605      	mov	r5, r0
 800cb84:	e7f0      	b.n	800cb68 <_dtoa_r+0x9f0>
 800cb86:	f1bb 0f00 	cmp.w	fp, #0
 800cb8a:	bfcc      	ite	gt
 800cb8c:	465e      	movgt	r6, fp
 800cb8e:	2601      	movle	r6, #1
 800cb90:	443e      	add	r6, r7
 800cb92:	f04f 0800 	mov.w	r8, #0
 800cb96:	9901      	ldr	r1, [sp, #4]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	4648      	mov	r0, r9
 800cb9c:	f000 fb9a 	bl	800d2d4 <__lshift>
 800cba0:	4621      	mov	r1, r4
 800cba2:	9001      	str	r0, [sp, #4]
 800cba4:	f000 fc02 	bl	800d3ac <__mcmp>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	dcb0      	bgt.n	800cb0e <_dtoa_r+0x996>
 800cbac:	d102      	bne.n	800cbb4 <_dtoa_r+0xa3c>
 800cbae:	f01a 0f01 	tst.w	sl, #1
 800cbb2:	d1ac      	bne.n	800cb0e <_dtoa_r+0x996>
 800cbb4:	4633      	mov	r3, r6
 800cbb6:	461e      	mov	r6, r3
 800cbb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbbc:	2a30      	cmp	r2, #48	@ 0x30
 800cbbe:	d0fa      	beq.n	800cbb6 <_dtoa_r+0xa3e>
 800cbc0:	e4e1      	b.n	800c586 <_dtoa_r+0x40e>
 800cbc2:	429f      	cmp	r7, r3
 800cbc4:	d1a4      	bne.n	800cb10 <_dtoa_r+0x998>
 800cbc6:	9b05      	ldr	r3, [sp, #20]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	9305      	str	r3, [sp, #20]
 800cbcc:	2331      	movs	r3, #49	@ 0x31
 800cbce:	703b      	strb	r3, [r7, #0]
 800cbd0:	e4d9      	b.n	800c586 <_dtoa_r+0x40e>
 800cbd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cbd4:	4f16      	ldr	r7, [pc, #88]	@ (800cc30 <_dtoa_r+0xab8>)
 800cbd6:	b11b      	cbz	r3, 800cbe0 <_dtoa_r+0xa68>
 800cbd8:	f107 0308 	add.w	r3, r7, #8
 800cbdc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	4638      	mov	r0, r7
 800cbe2:	b011      	add	sp, #68	@ 0x44
 800cbe4:	ecbd 8b02 	vpop	{d8}
 800cbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbec:	9b07      	ldr	r3, [sp, #28]
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	f77f ae2c 	ble.w	800c84c <_dtoa_r+0x6d4>
 800cbf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbf8:	2001      	movs	r0, #1
 800cbfa:	e64c      	b.n	800c896 <_dtoa_r+0x71e>
 800cbfc:	f1bb 0f00 	cmp.w	fp, #0
 800cc00:	f77f aed8 	ble.w	800c9b4 <_dtoa_r+0x83c>
 800cc04:	463e      	mov	r6, r7
 800cc06:	9801      	ldr	r0, [sp, #4]
 800cc08:	4621      	mov	r1, r4
 800cc0a:	f7ff fa2d 	bl	800c068 <quorem>
 800cc0e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cc12:	f806 ab01 	strb.w	sl, [r6], #1
 800cc16:	1bf2      	subs	r2, r6, r7
 800cc18:	4593      	cmp	fp, r2
 800cc1a:	ddb4      	ble.n	800cb86 <_dtoa_r+0xa0e>
 800cc1c:	9901      	ldr	r1, [sp, #4]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	220a      	movs	r2, #10
 800cc22:	4648      	mov	r0, r9
 800cc24:	f000 f968 	bl	800cef8 <__multadd>
 800cc28:	9001      	str	r0, [sp, #4]
 800cc2a:	e7ec      	b.n	800cc06 <_dtoa_r+0xa8e>
 800cc2c:	0800f8ed 	.word	0x0800f8ed
 800cc30:	0800f871 	.word	0x0800f871

0800cc34 <_free_r>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	4605      	mov	r5, r0
 800cc38:	2900      	cmp	r1, #0
 800cc3a:	d041      	beq.n	800ccc0 <_free_r+0x8c>
 800cc3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc40:	1f0c      	subs	r4, r1, #4
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	bfb8      	it	lt
 800cc46:	18e4      	addlt	r4, r4, r3
 800cc48:	f000 f8e8 	bl	800ce1c <__malloc_lock>
 800cc4c:	4a1d      	ldr	r2, [pc, #116]	@ (800ccc4 <_free_r+0x90>)
 800cc4e:	6813      	ldr	r3, [r2, #0]
 800cc50:	b933      	cbnz	r3, 800cc60 <_free_r+0x2c>
 800cc52:	6063      	str	r3, [r4, #4]
 800cc54:	6014      	str	r4, [r2, #0]
 800cc56:	4628      	mov	r0, r5
 800cc58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc5c:	f000 b8e4 	b.w	800ce28 <__malloc_unlock>
 800cc60:	42a3      	cmp	r3, r4
 800cc62:	d908      	bls.n	800cc76 <_free_r+0x42>
 800cc64:	6820      	ldr	r0, [r4, #0]
 800cc66:	1821      	adds	r1, r4, r0
 800cc68:	428b      	cmp	r3, r1
 800cc6a:	bf01      	itttt	eq
 800cc6c:	6819      	ldreq	r1, [r3, #0]
 800cc6e:	685b      	ldreq	r3, [r3, #4]
 800cc70:	1809      	addeq	r1, r1, r0
 800cc72:	6021      	streq	r1, [r4, #0]
 800cc74:	e7ed      	b.n	800cc52 <_free_r+0x1e>
 800cc76:	461a      	mov	r2, r3
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	b10b      	cbz	r3, 800cc80 <_free_r+0x4c>
 800cc7c:	42a3      	cmp	r3, r4
 800cc7e:	d9fa      	bls.n	800cc76 <_free_r+0x42>
 800cc80:	6811      	ldr	r1, [r2, #0]
 800cc82:	1850      	adds	r0, r2, r1
 800cc84:	42a0      	cmp	r0, r4
 800cc86:	d10b      	bne.n	800cca0 <_free_r+0x6c>
 800cc88:	6820      	ldr	r0, [r4, #0]
 800cc8a:	4401      	add	r1, r0
 800cc8c:	1850      	adds	r0, r2, r1
 800cc8e:	4283      	cmp	r3, r0
 800cc90:	6011      	str	r1, [r2, #0]
 800cc92:	d1e0      	bne.n	800cc56 <_free_r+0x22>
 800cc94:	6818      	ldr	r0, [r3, #0]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	6053      	str	r3, [r2, #4]
 800cc9a:	4408      	add	r0, r1
 800cc9c:	6010      	str	r0, [r2, #0]
 800cc9e:	e7da      	b.n	800cc56 <_free_r+0x22>
 800cca0:	d902      	bls.n	800cca8 <_free_r+0x74>
 800cca2:	230c      	movs	r3, #12
 800cca4:	602b      	str	r3, [r5, #0]
 800cca6:	e7d6      	b.n	800cc56 <_free_r+0x22>
 800cca8:	6820      	ldr	r0, [r4, #0]
 800ccaa:	1821      	adds	r1, r4, r0
 800ccac:	428b      	cmp	r3, r1
 800ccae:	bf04      	itt	eq
 800ccb0:	6819      	ldreq	r1, [r3, #0]
 800ccb2:	685b      	ldreq	r3, [r3, #4]
 800ccb4:	6063      	str	r3, [r4, #4]
 800ccb6:	bf04      	itt	eq
 800ccb8:	1809      	addeq	r1, r1, r0
 800ccba:	6021      	streq	r1, [r4, #0]
 800ccbc:	6054      	str	r4, [r2, #4]
 800ccbe:	e7ca      	b.n	800cc56 <_free_r+0x22>
 800ccc0:	bd38      	pop	{r3, r4, r5, pc}
 800ccc2:	bf00      	nop
 800ccc4:	240034f8 	.word	0x240034f8

0800ccc8 <malloc>:
 800ccc8:	4b02      	ldr	r3, [pc, #8]	@ (800ccd4 <malloc+0xc>)
 800ccca:	4601      	mov	r1, r0
 800cccc:	6818      	ldr	r0, [r3, #0]
 800ccce:	f000 b825 	b.w	800cd1c <_malloc_r>
 800ccd2:	bf00      	nop
 800ccd4:	2400001c 	.word	0x2400001c

0800ccd8 <sbrk_aligned>:
 800ccd8:	b570      	push	{r4, r5, r6, lr}
 800ccda:	4e0f      	ldr	r6, [pc, #60]	@ (800cd18 <sbrk_aligned+0x40>)
 800ccdc:	460c      	mov	r4, r1
 800ccde:	6831      	ldr	r1, [r6, #0]
 800cce0:	4605      	mov	r5, r0
 800cce2:	b911      	cbnz	r1, 800ccea <sbrk_aligned+0x12>
 800cce4:	f001 ff8a 	bl	800ebfc <_sbrk_r>
 800cce8:	6030      	str	r0, [r6, #0]
 800ccea:	4621      	mov	r1, r4
 800ccec:	4628      	mov	r0, r5
 800ccee:	f001 ff85 	bl	800ebfc <_sbrk_r>
 800ccf2:	1c43      	adds	r3, r0, #1
 800ccf4:	d103      	bne.n	800ccfe <sbrk_aligned+0x26>
 800ccf6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	bd70      	pop	{r4, r5, r6, pc}
 800ccfe:	1cc4      	adds	r4, r0, #3
 800cd00:	f024 0403 	bic.w	r4, r4, #3
 800cd04:	42a0      	cmp	r0, r4
 800cd06:	d0f8      	beq.n	800ccfa <sbrk_aligned+0x22>
 800cd08:	1a21      	subs	r1, r4, r0
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	f001 ff76 	bl	800ebfc <_sbrk_r>
 800cd10:	3001      	adds	r0, #1
 800cd12:	d1f2      	bne.n	800ccfa <sbrk_aligned+0x22>
 800cd14:	e7ef      	b.n	800ccf6 <sbrk_aligned+0x1e>
 800cd16:	bf00      	nop
 800cd18:	240034f4 	.word	0x240034f4

0800cd1c <_malloc_r>:
 800cd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd20:	1ccd      	adds	r5, r1, #3
 800cd22:	f025 0503 	bic.w	r5, r5, #3
 800cd26:	3508      	adds	r5, #8
 800cd28:	2d0c      	cmp	r5, #12
 800cd2a:	bf38      	it	cc
 800cd2c:	250c      	movcc	r5, #12
 800cd2e:	2d00      	cmp	r5, #0
 800cd30:	4606      	mov	r6, r0
 800cd32:	db01      	blt.n	800cd38 <_malloc_r+0x1c>
 800cd34:	42a9      	cmp	r1, r5
 800cd36:	d904      	bls.n	800cd42 <_malloc_r+0x26>
 800cd38:	230c      	movs	r3, #12
 800cd3a:	6033      	str	r3, [r6, #0]
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce18 <_malloc_r+0xfc>
 800cd46:	f000 f869 	bl	800ce1c <__malloc_lock>
 800cd4a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd4e:	461c      	mov	r4, r3
 800cd50:	bb44      	cbnz	r4, 800cda4 <_malloc_r+0x88>
 800cd52:	4629      	mov	r1, r5
 800cd54:	4630      	mov	r0, r6
 800cd56:	f7ff ffbf 	bl	800ccd8 <sbrk_aligned>
 800cd5a:	1c43      	adds	r3, r0, #1
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	d158      	bne.n	800ce12 <_malloc_r+0xf6>
 800cd60:	f8d8 4000 	ldr.w	r4, [r8]
 800cd64:	4627      	mov	r7, r4
 800cd66:	2f00      	cmp	r7, #0
 800cd68:	d143      	bne.n	800cdf2 <_malloc_r+0xd6>
 800cd6a:	2c00      	cmp	r4, #0
 800cd6c:	d04b      	beq.n	800ce06 <_malloc_r+0xea>
 800cd6e:	6823      	ldr	r3, [r4, #0]
 800cd70:	4639      	mov	r1, r7
 800cd72:	4630      	mov	r0, r6
 800cd74:	eb04 0903 	add.w	r9, r4, r3
 800cd78:	f001 ff40 	bl	800ebfc <_sbrk_r>
 800cd7c:	4581      	cmp	r9, r0
 800cd7e:	d142      	bne.n	800ce06 <_malloc_r+0xea>
 800cd80:	6821      	ldr	r1, [r4, #0]
 800cd82:	1a6d      	subs	r5, r5, r1
 800cd84:	4629      	mov	r1, r5
 800cd86:	4630      	mov	r0, r6
 800cd88:	f7ff ffa6 	bl	800ccd8 <sbrk_aligned>
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	d03a      	beq.n	800ce06 <_malloc_r+0xea>
 800cd90:	6823      	ldr	r3, [r4, #0]
 800cd92:	442b      	add	r3, r5
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	f8d8 3000 	ldr.w	r3, [r8]
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	bb62      	cbnz	r2, 800cdf8 <_malloc_r+0xdc>
 800cd9e:	f8c8 7000 	str.w	r7, [r8]
 800cda2:	e00f      	b.n	800cdc4 <_malloc_r+0xa8>
 800cda4:	6822      	ldr	r2, [r4, #0]
 800cda6:	1b52      	subs	r2, r2, r5
 800cda8:	d420      	bmi.n	800cdec <_malloc_r+0xd0>
 800cdaa:	2a0b      	cmp	r2, #11
 800cdac:	d917      	bls.n	800cdde <_malloc_r+0xc2>
 800cdae:	1961      	adds	r1, r4, r5
 800cdb0:	42a3      	cmp	r3, r4
 800cdb2:	6025      	str	r5, [r4, #0]
 800cdb4:	bf18      	it	ne
 800cdb6:	6059      	strne	r1, [r3, #4]
 800cdb8:	6863      	ldr	r3, [r4, #4]
 800cdba:	bf08      	it	eq
 800cdbc:	f8c8 1000 	streq.w	r1, [r8]
 800cdc0:	5162      	str	r2, [r4, r5]
 800cdc2:	604b      	str	r3, [r1, #4]
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	f000 f82f 	bl	800ce28 <__malloc_unlock>
 800cdca:	f104 000b 	add.w	r0, r4, #11
 800cdce:	1d23      	adds	r3, r4, #4
 800cdd0:	f020 0007 	bic.w	r0, r0, #7
 800cdd4:	1ac2      	subs	r2, r0, r3
 800cdd6:	bf1c      	itt	ne
 800cdd8:	1a1b      	subne	r3, r3, r0
 800cdda:	50a3      	strne	r3, [r4, r2]
 800cddc:	e7af      	b.n	800cd3e <_malloc_r+0x22>
 800cdde:	6862      	ldr	r2, [r4, #4]
 800cde0:	42a3      	cmp	r3, r4
 800cde2:	bf0c      	ite	eq
 800cde4:	f8c8 2000 	streq.w	r2, [r8]
 800cde8:	605a      	strne	r2, [r3, #4]
 800cdea:	e7eb      	b.n	800cdc4 <_malloc_r+0xa8>
 800cdec:	4623      	mov	r3, r4
 800cdee:	6864      	ldr	r4, [r4, #4]
 800cdf0:	e7ae      	b.n	800cd50 <_malloc_r+0x34>
 800cdf2:	463c      	mov	r4, r7
 800cdf4:	687f      	ldr	r7, [r7, #4]
 800cdf6:	e7b6      	b.n	800cd66 <_malloc_r+0x4a>
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	42a3      	cmp	r3, r4
 800cdfe:	d1fb      	bne.n	800cdf8 <_malloc_r+0xdc>
 800ce00:	2300      	movs	r3, #0
 800ce02:	6053      	str	r3, [r2, #4]
 800ce04:	e7de      	b.n	800cdc4 <_malloc_r+0xa8>
 800ce06:	230c      	movs	r3, #12
 800ce08:	6033      	str	r3, [r6, #0]
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	f000 f80c 	bl	800ce28 <__malloc_unlock>
 800ce10:	e794      	b.n	800cd3c <_malloc_r+0x20>
 800ce12:	6005      	str	r5, [r0, #0]
 800ce14:	e7d6      	b.n	800cdc4 <_malloc_r+0xa8>
 800ce16:	bf00      	nop
 800ce18:	240034f8 	.word	0x240034f8

0800ce1c <__malloc_lock>:
 800ce1c:	4801      	ldr	r0, [pc, #4]	@ (800ce24 <__malloc_lock+0x8>)
 800ce1e:	f7ff b91a 	b.w	800c056 <__retarget_lock_acquire_recursive>
 800ce22:	bf00      	nop
 800ce24:	240034f0 	.word	0x240034f0

0800ce28 <__malloc_unlock>:
 800ce28:	4801      	ldr	r0, [pc, #4]	@ (800ce30 <__malloc_unlock+0x8>)
 800ce2a:	f7ff b915 	b.w	800c058 <__retarget_lock_release_recursive>
 800ce2e:	bf00      	nop
 800ce30:	240034f0 	.word	0x240034f0

0800ce34 <_Balloc>:
 800ce34:	b570      	push	{r4, r5, r6, lr}
 800ce36:	69c6      	ldr	r6, [r0, #28]
 800ce38:	4604      	mov	r4, r0
 800ce3a:	460d      	mov	r5, r1
 800ce3c:	b976      	cbnz	r6, 800ce5c <_Balloc+0x28>
 800ce3e:	2010      	movs	r0, #16
 800ce40:	f7ff ff42 	bl	800ccc8 <malloc>
 800ce44:	4602      	mov	r2, r0
 800ce46:	61e0      	str	r0, [r4, #28]
 800ce48:	b920      	cbnz	r0, 800ce54 <_Balloc+0x20>
 800ce4a:	4b18      	ldr	r3, [pc, #96]	@ (800ceac <_Balloc+0x78>)
 800ce4c:	4818      	ldr	r0, [pc, #96]	@ (800ceb0 <_Balloc+0x7c>)
 800ce4e:	216b      	movs	r1, #107	@ 0x6b
 800ce50:	f001 fefa 	bl	800ec48 <__assert_func>
 800ce54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce58:	6006      	str	r6, [r0, #0]
 800ce5a:	60c6      	str	r6, [r0, #12]
 800ce5c:	69e6      	ldr	r6, [r4, #28]
 800ce5e:	68f3      	ldr	r3, [r6, #12]
 800ce60:	b183      	cbz	r3, 800ce84 <_Balloc+0x50>
 800ce62:	69e3      	ldr	r3, [r4, #28]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce6a:	b9b8      	cbnz	r0, 800ce9c <_Balloc+0x68>
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	fa01 f605 	lsl.w	r6, r1, r5
 800ce72:	1d72      	adds	r2, r6, #5
 800ce74:	0092      	lsls	r2, r2, #2
 800ce76:	4620      	mov	r0, r4
 800ce78:	f001 ff04 	bl	800ec84 <_calloc_r>
 800ce7c:	b160      	cbz	r0, 800ce98 <_Balloc+0x64>
 800ce7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce82:	e00e      	b.n	800cea2 <_Balloc+0x6e>
 800ce84:	2221      	movs	r2, #33	@ 0x21
 800ce86:	2104      	movs	r1, #4
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f001 fefb 	bl	800ec84 <_calloc_r>
 800ce8e:	69e3      	ldr	r3, [r4, #28]
 800ce90:	60f0      	str	r0, [r6, #12]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1e4      	bne.n	800ce62 <_Balloc+0x2e>
 800ce98:	2000      	movs	r0, #0
 800ce9a:	bd70      	pop	{r4, r5, r6, pc}
 800ce9c:	6802      	ldr	r2, [r0, #0]
 800ce9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cea2:	2300      	movs	r3, #0
 800cea4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cea8:	e7f7      	b.n	800ce9a <_Balloc+0x66>
 800ceaa:	bf00      	nop
 800ceac:	0800f87e 	.word	0x0800f87e
 800ceb0:	0800f8fe 	.word	0x0800f8fe

0800ceb4 <_Bfree>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	69c6      	ldr	r6, [r0, #28]
 800ceb8:	4605      	mov	r5, r0
 800ceba:	460c      	mov	r4, r1
 800cebc:	b976      	cbnz	r6, 800cedc <_Bfree+0x28>
 800cebe:	2010      	movs	r0, #16
 800cec0:	f7ff ff02 	bl	800ccc8 <malloc>
 800cec4:	4602      	mov	r2, r0
 800cec6:	61e8      	str	r0, [r5, #28]
 800cec8:	b920      	cbnz	r0, 800ced4 <_Bfree+0x20>
 800ceca:	4b09      	ldr	r3, [pc, #36]	@ (800cef0 <_Bfree+0x3c>)
 800cecc:	4809      	ldr	r0, [pc, #36]	@ (800cef4 <_Bfree+0x40>)
 800cece:	218f      	movs	r1, #143	@ 0x8f
 800ced0:	f001 feba 	bl	800ec48 <__assert_func>
 800ced4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ced8:	6006      	str	r6, [r0, #0]
 800ceda:	60c6      	str	r6, [r0, #12]
 800cedc:	b13c      	cbz	r4, 800ceee <_Bfree+0x3a>
 800cede:	69eb      	ldr	r3, [r5, #28]
 800cee0:	6862      	ldr	r2, [r4, #4]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cee8:	6021      	str	r1, [r4, #0]
 800ceea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ceee:	bd70      	pop	{r4, r5, r6, pc}
 800cef0:	0800f87e 	.word	0x0800f87e
 800cef4:	0800f8fe 	.word	0x0800f8fe

0800cef8 <__multadd>:
 800cef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cefc:	690d      	ldr	r5, [r1, #16]
 800cefe:	4607      	mov	r7, r0
 800cf00:	460c      	mov	r4, r1
 800cf02:	461e      	mov	r6, r3
 800cf04:	f101 0c14 	add.w	ip, r1, #20
 800cf08:	2000      	movs	r0, #0
 800cf0a:	f8dc 3000 	ldr.w	r3, [ip]
 800cf0e:	b299      	uxth	r1, r3
 800cf10:	fb02 6101 	mla	r1, r2, r1, r6
 800cf14:	0c1e      	lsrs	r6, r3, #16
 800cf16:	0c0b      	lsrs	r3, r1, #16
 800cf18:	fb02 3306 	mla	r3, r2, r6, r3
 800cf1c:	b289      	uxth	r1, r1
 800cf1e:	3001      	adds	r0, #1
 800cf20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf24:	4285      	cmp	r5, r0
 800cf26:	f84c 1b04 	str.w	r1, [ip], #4
 800cf2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf2e:	dcec      	bgt.n	800cf0a <__multadd+0x12>
 800cf30:	b30e      	cbz	r6, 800cf76 <__multadd+0x7e>
 800cf32:	68a3      	ldr	r3, [r4, #8]
 800cf34:	42ab      	cmp	r3, r5
 800cf36:	dc19      	bgt.n	800cf6c <__multadd+0x74>
 800cf38:	6861      	ldr	r1, [r4, #4]
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	3101      	adds	r1, #1
 800cf3e:	f7ff ff79 	bl	800ce34 <_Balloc>
 800cf42:	4680      	mov	r8, r0
 800cf44:	b928      	cbnz	r0, 800cf52 <__multadd+0x5a>
 800cf46:	4602      	mov	r2, r0
 800cf48:	4b0c      	ldr	r3, [pc, #48]	@ (800cf7c <__multadd+0x84>)
 800cf4a:	480d      	ldr	r0, [pc, #52]	@ (800cf80 <__multadd+0x88>)
 800cf4c:	21ba      	movs	r1, #186	@ 0xba
 800cf4e:	f001 fe7b 	bl	800ec48 <__assert_func>
 800cf52:	6922      	ldr	r2, [r4, #16]
 800cf54:	3202      	adds	r2, #2
 800cf56:	f104 010c 	add.w	r1, r4, #12
 800cf5a:	0092      	lsls	r2, r2, #2
 800cf5c:	300c      	adds	r0, #12
 800cf5e:	f001 fe5d 	bl	800ec1c <memcpy>
 800cf62:	4621      	mov	r1, r4
 800cf64:	4638      	mov	r0, r7
 800cf66:	f7ff ffa5 	bl	800ceb4 <_Bfree>
 800cf6a:	4644      	mov	r4, r8
 800cf6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf70:	3501      	adds	r5, #1
 800cf72:	615e      	str	r6, [r3, #20]
 800cf74:	6125      	str	r5, [r4, #16]
 800cf76:	4620      	mov	r0, r4
 800cf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf7c:	0800f8ed 	.word	0x0800f8ed
 800cf80:	0800f8fe 	.word	0x0800f8fe

0800cf84 <__s2b>:
 800cf84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf88:	460c      	mov	r4, r1
 800cf8a:	4615      	mov	r5, r2
 800cf8c:	461f      	mov	r7, r3
 800cf8e:	2209      	movs	r2, #9
 800cf90:	3308      	adds	r3, #8
 800cf92:	4606      	mov	r6, r0
 800cf94:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf98:	2100      	movs	r1, #0
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	db09      	blt.n	800cfb4 <__s2b+0x30>
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	f7ff ff47 	bl	800ce34 <_Balloc>
 800cfa6:	b940      	cbnz	r0, 800cfba <__s2b+0x36>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	4b19      	ldr	r3, [pc, #100]	@ (800d010 <__s2b+0x8c>)
 800cfac:	4819      	ldr	r0, [pc, #100]	@ (800d014 <__s2b+0x90>)
 800cfae:	21d3      	movs	r1, #211	@ 0xd3
 800cfb0:	f001 fe4a 	bl	800ec48 <__assert_func>
 800cfb4:	0052      	lsls	r2, r2, #1
 800cfb6:	3101      	adds	r1, #1
 800cfb8:	e7f0      	b.n	800cf9c <__s2b+0x18>
 800cfba:	9b08      	ldr	r3, [sp, #32]
 800cfbc:	6143      	str	r3, [r0, #20]
 800cfbe:	2d09      	cmp	r5, #9
 800cfc0:	f04f 0301 	mov.w	r3, #1
 800cfc4:	6103      	str	r3, [r0, #16]
 800cfc6:	dd16      	ble.n	800cff6 <__s2b+0x72>
 800cfc8:	f104 0909 	add.w	r9, r4, #9
 800cfcc:	46c8      	mov	r8, r9
 800cfce:	442c      	add	r4, r5
 800cfd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cfd4:	4601      	mov	r1, r0
 800cfd6:	3b30      	subs	r3, #48	@ 0x30
 800cfd8:	220a      	movs	r2, #10
 800cfda:	4630      	mov	r0, r6
 800cfdc:	f7ff ff8c 	bl	800cef8 <__multadd>
 800cfe0:	45a0      	cmp	r8, r4
 800cfe2:	d1f5      	bne.n	800cfd0 <__s2b+0x4c>
 800cfe4:	f1a5 0408 	sub.w	r4, r5, #8
 800cfe8:	444c      	add	r4, r9
 800cfea:	1b2d      	subs	r5, r5, r4
 800cfec:	1963      	adds	r3, r4, r5
 800cfee:	42bb      	cmp	r3, r7
 800cff0:	db04      	blt.n	800cffc <__s2b+0x78>
 800cff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cff6:	340a      	adds	r4, #10
 800cff8:	2509      	movs	r5, #9
 800cffa:	e7f6      	b.n	800cfea <__s2b+0x66>
 800cffc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d000:	4601      	mov	r1, r0
 800d002:	3b30      	subs	r3, #48	@ 0x30
 800d004:	220a      	movs	r2, #10
 800d006:	4630      	mov	r0, r6
 800d008:	f7ff ff76 	bl	800cef8 <__multadd>
 800d00c:	e7ee      	b.n	800cfec <__s2b+0x68>
 800d00e:	bf00      	nop
 800d010:	0800f8ed 	.word	0x0800f8ed
 800d014:	0800f8fe 	.word	0x0800f8fe

0800d018 <__hi0bits>:
 800d018:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d01c:	4603      	mov	r3, r0
 800d01e:	bf36      	itet	cc
 800d020:	0403      	lslcc	r3, r0, #16
 800d022:	2000      	movcs	r0, #0
 800d024:	2010      	movcc	r0, #16
 800d026:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d02a:	bf3c      	itt	cc
 800d02c:	021b      	lslcc	r3, r3, #8
 800d02e:	3008      	addcc	r0, #8
 800d030:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d034:	bf3c      	itt	cc
 800d036:	011b      	lslcc	r3, r3, #4
 800d038:	3004      	addcc	r0, #4
 800d03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d03e:	bf3c      	itt	cc
 800d040:	009b      	lslcc	r3, r3, #2
 800d042:	3002      	addcc	r0, #2
 800d044:	2b00      	cmp	r3, #0
 800d046:	db05      	blt.n	800d054 <__hi0bits+0x3c>
 800d048:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d04c:	f100 0001 	add.w	r0, r0, #1
 800d050:	bf08      	it	eq
 800d052:	2020      	moveq	r0, #32
 800d054:	4770      	bx	lr

0800d056 <__lo0bits>:
 800d056:	6803      	ldr	r3, [r0, #0]
 800d058:	4602      	mov	r2, r0
 800d05a:	f013 0007 	ands.w	r0, r3, #7
 800d05e:	d00b      	beq.n	800d078 <__lo0bits+0x22>
 800d060:	07d9      	lsls	r1, r3, #31
 800d062:	d421      	bmi.n	800d0a8 <__lo0bits+0x52>
 800d064:	0798      	lsls	r0, r3, #30
 800d066:	bf49      	itett	mi
 800d068:	085b      	lsrmi	r3, r3, #1
 800d06a:	089b      	lsrpl	r3, r3, #2
 800d06c:	2001      	movmi	r0, #1
 800d06e:	6013      	strmi	r3, [r2, #0]
 800d070:	bf5c      	itt	pl
 800d072:	6013      	strpl	r3, [r2, #0]
 800d074:	2002      	movpl	r0, #2
 800d076:	4770      	bx	lr
 800d078:	b299      	uxth	r1, r3
 800d07a:	b909      	cbnz	r1, 800d080 <__lo0bits+0x2a>
 800d07c:	0c1b      	lsrs	r3, r3, #16
 800d07e:	2010      	movs	r0, #16
 800d080:	b2d9      	uxtb	r1, r3
 800d082:	b909      	cbnz	r1, 800d088 <__lo0bits+0x32>
 800d084:	3008      	adds	r0, #8
 800d086:	0a1b      	lsrs	r3, r3, #8
 800d088:	0719      	lsls	r1, r3, #28
 800d08a:	bf04      	itt	eq
 800d08c:	091b      	lsreq	r3, r3, #4
 800d08e:	3004      	addeq	r0, #4
 800d090:	0799      	lsls	r1, r3, #30
 800d092:	bf04      	itt	eq
 800d094:	089b      	lsreq	r3, r3, #2
 800d096:	3002      	addeq	r0, #2
 800d098:	07d9      	lsls	r1, r3, #31
 800d09a:	d403      	bmi.n	800d0a4 <__lo0bits+0x4e>
 800d09c:	085b      	lsrs	r3, r3, #1
 800d09e:	f100 0001 	add.w	r0, r0, #1
 800d0a2:	d003      	beq.n	800d0ac <__lo0bits+0x56>
 800d0a4:	6013      	str	r3, [r2, #0]
 800d0a6:	4770      	bx	lr
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	4770      	bx	lr
 800d0ac:	2020      	movs	r0, #32
 800d0ae:	4770      	bx	lr

0800d0b0 <__i2b>:
 800d0b0:	b510      	push	{r4, lr}
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	2101      	movs	r1, #1
 800d0b6:	f7ff febd 	bl	800ce34 <_Balloc>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	b928      	cbnz	r0, 800d0ca <__i2b+0x1a>
 800d0be:	4b05      	ldr	r3, [pc, #20]	@ (800d0d4 <__i2b+0x24>)
 800d0c0:	4805      	ldr	r0, [pc, #20]	@ (800d0d8 <__i2b+0x28>)
 800d0c2:	f240 1145 	movw	r1, #325	@ 0x145
 800d0c6:	f001 fdbf 	bl	800ec48 <__assert_func>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	6144      	str	r4, [r0, #20]
 800d0ce:	6103      	str	r3, [r0, #16]
 800d0d0:	bd10      	pop	{r4, pc}
 800d0d2:	bf00      	nop
 800d0d4:	0800f8ed 	.word	0x0800f8ed
 800d0d8:	0800f8fe 	.word	0x0800f8fe

0800d0dc <__multiply>:
 800d0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e0:	4617      	mov	r7, r2
 800d0e2:	690a      	ldr	r2, [r1, #16]
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	bfa8      	it	ge
 800d0ea:	463b      	movge	r3, r7
 800d0ec:	4689      	mov	r9, r1
 800d0ee:	bfa4      	itt	ge
 800d0f0:	460f      	movge	r7, r1
 800d0f2:	4699      	movge	r9, r3
 800d0f4:	693d      	ldr	r5, [r7, #16]
 800d0f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	6879      	ldr	r1, [r7, #4]
 800d0fe:	eb05 060a 	add.w	r6, r5, sl
 800d102:	42b3      	cmp	r3, r6
 800d104:	b085      	sub	sp, #20
 800d106:	bfb8      	it	lt
 800d108:	3101      	addlt	r1, #1
 800d10a:	f7ff fe93 	bl	800ce34 <_Balloc>
 800d10e:	b930      	cbnz	r0, 800d11e <__multiply+0x42>
 800d110:	4602      	mov	r2, r0
 800d112:	4b41      	ldr	r3, [pc, #260]	@ (800d218 <__multiply+0x13c>)
 800d114:	4841      	ldr	r0, [pc, #260]	@ (800d21c <__multiply+0x140>)
 800d116:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d11a:	f001 fd95 	bl	800ec48 <__assert_func>
 800d11e:	f100 0414 	add.w	r4, r0, #20
 800d122:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d126:	4623      	mov	r3, r4
 800d128:	2200      	movs	r2, #0
 800d12a:	4573      	cmp	r3, lr
 800d12c:	d320      	bcc.n	800d170 <__multiply+0x94>
 800d12e:	f107 0814 	add.w	r8, r7, #20
 800d132:	f109 0114 	add.w	r1, r9, #20
 800d136:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d13a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d13e:	9302      	str	r3, [sp, #8]
 800d140:	1beb      	subs	r3, r5, r7
 800d142:	3b15      	subs	r3, #21
 800d144:	f023 0303 	bic.w	r3, r3, #3
 800d148:	3304      	adds	r3, #4
 800d14a:	3715      	adds	r7, #21
 800d14c:	42bd      	cmp	r5, r7
 800d14e:	bf38      	it	cc
 800d150:	2304      	movcc	r3, #4
 800d152:	9301      	str	r3, [sp, #4]
 800d154:	9b02      	ldr	r3, [sp, #8]
 800d156:	9103      	str	r1, [sp, #12]
 800d158:	428b      	cmp	r3, r1
 800d15a:	d80c      	bhi.n	800d176 <__multiply+0x9a>
 800d15c:	2e00      	cmp	r6, #0
 800d15e:	dd03      	ble.n	800d168 <__multiply+0x8c>
 800d160:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d164:	2b00      	cmp	r3, #0
 800d166:	d055      	beq.n	800d214 <__multiply+0x138>
 800d168:	6106      	str	r6, [r0, #16]
 800d16a:	b005      	add	sp, #20
 800d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d170:	f843 2b04 	str.w	r2, [r3], #4
 800d174:	e7d9      	b.n	800d12a <__multiply+0x4e>
 800d176:	f8b1 a000 	ldrh.w	sl, [r1]
 800d17a:	f1ba 0f00 	cmp.w	sl, #0
 800d17e:	d01f      	beq.n	800d1c0 <__multiply+0xe4>
 800d180:	46c4      	mov	ip, r8
 800d182:	46a1      	mov	r9, r4
 800d184:	2700      	movs	r7, #0
 800d186:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d18a:	f8d9 3000 	ldr.w	r3, [r9]
 800d18e:	fa1f fb82 	uxth.w	fp, r2
 800d192:	b29b      	uxth	r3, r3
 800d194:	fb0a 330b 	mla	r3, sl, fp, r3
 800d198:	443b      	add	r3, r7
 800d19a:	f8d9 7000 	ldr.w	r7, [r9]
 800d19e:	0c12      	lsrs	r2, r2, #16
 800d1a0:	0c3f      	lsrs	r7, r7, #16
 800d1a2:	fb0a 7202 	mla	r2, sl, r2, r7
 800d1a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1b0:	4565      	cmp	r5, ip
 800d1b2:	f849 3b04 	str.w	r3, [r9], #4
 800d1b6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d1ba:	d8e4      	bhi.n	800d186 <__multiply+0xaa>
 800d1bc:	9b01      	ldr	r3, [sp, #4]
 800d1be:	50e7      	str	r7, [r4, r3]
 800d1c0:	9b03      	ldr	r3, [sp, #12]
 800d1c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d1c6:	3104      	adds	r1, #4
 800d1c8:	f1b9 0f00 	cmp.w	r9, #0
 800d1cc:	d020      	beq.n	800d210 <__multiply+0x134>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	4647      	mov	r7, r8
 800d1d2:	46a4      	mov	ip, r4
 800d1d4:	f04f 0a00 	mov.w	sl, #0
 800d1d8:	f8b7 b000 	ldrh.w	fp, [r7]
 800d1dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d1e0:	fb09 220b 	mla	r2, r9, fp, r2
 800d1e4:	4452      	add	r2, sl
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1ec:	f84c 3b04 	str.w	r3, [ip], #4
 800d1f0:	f857 3b04 	ldr.w	r3, [r7], #4
 800d1f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1f8:	f8bc 3000 	ldrh.w	r3, [ip]
 800d1fc:	fb09 330a 	mla	r3, r9, sl, r3
 800d200:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d204:	42bd      	cmp	r5, r7
 800d206:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d20a:	d8e5      	bhi.n	800d1d8 <__multiply+0xfc>
 800d20c:	9a01      	ldr	r2, [sp, #4]
 800d20e:	50a3      	str	r3, [r4, r2]
 800d210:	3404      	adds	r4, #4
 800d212:	e79f      	b.n	800d154 <__multiply+0x78>
 800d214:	3e01      	subs	r6, #1
 800d216:	e7a1      	b.n	800d15c <__multiply+0x80>
 800d218:	0800f8ed 	.word	0x0800f8ed
 800d21c:	0800f8fe 	.word	0x0800f8fe

0800d220 <__pow5mult>:
 800d220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d224:	4615      	mov	r5, r2
 800d226:	f012 0203 	ands.w	r2, r2, #3
 800d22a:	4607      	mov	r7, r0
 800d22c:	460e      	mov	r6, r1
 800d22e:	d007      	beq.n	800d240 <__pow5mult+0x20>
 800d230:	4c25      	ldr	r4, [pc, #148]	@ (800d2c8 <__pow5mult+0xa8>)
 800d232:	3a01      	subs	r2, #1
 800d234:	2300      	movs	r3, #0
 800d236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d23a:	f7ff fe5d 	bl	800cef8 <__multadd>
 800d23e:	4606      	mov	r6, r0
 800d240:	10ad      	asrs	r5, r5, #2
 800d242:	d03d      	beq.n	800d2c0 <__pow5mult+0xa0>
 800d244:	69fc      	ldr	r4, [r7, #28]
 800d246:	b97c      	cbnz	r4, 800d268 <__pow5mult+0x48>
 800d248:	2010      	movs	r0, #16
 800d24a:	f7ff fd3d 	bl	800ccc8 <malloc>
 800d24e:	4602      	mov	r2, r0
 800d250:	61f8      	str	r0, [r7, #28]
 800d252:	b928      	cbnz	r0, 800d260 <__pow5mult+0x40>
 800d254:	4b1d      	ldr	r3, [pc, #116]	@ (800d2cc <__pow5mult+0xac>)
 800d256:	481e      	ldr	r0, [pc, #120]	@ (800d2d0 <__pow5mult+0xb0>)
 800d258:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d25c:	f001 fcf4 	bl	800ec48 <__assert_func>
 800d260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d264:	6004      	str	r4, [r0, #0]
 800d266:	60c4      	str	r4, [r0, #12]
 800d268:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d26c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d270:	b94c      	cbnz	r4, 800d286 <__pow5mult+0x66>
 800d272:	f240 2171 	movw	r1, #625	@ 0x271
 800d276:	4638      	mov	r0, r7
 800d278:	f7ff ff1a 	bl	800d0b0 <__i2b>
 800d27c:	2300      	movs	r3, #0
 800d27e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d282:	4604      	mov	r4, r0
 800d284:	6003      	str	r3, [r0, #0]
 800d286:	f04f 0900 	mov.w	r9, #0
 800d28a:	07eb      	lsls	r3, r5, #31
 800d28c:	d50a      	bpl.n	800d2a4 <__pow5mult+0x84>
 800d28e:	4631      	mov	r1, r6
 800d290:	4622      	mov	r2, r4
 800d292:	4638      	mov	r0, r7
 800d294:	f7ff ff22 	bl	800d0dc <__multiply>
 800d298:	4631      	mov	r1, r6
 800d29a:	4680      	mov	r8, r0
 800d29c:	4638      	mov	r0, r7
 800d29e:	f7ff fe09 	bl	800ceb4 <_Bfree>
 800d2a2:	4646      	mov	r6, r8
 800d2a4:	106d      	asrs	r5, r5, #1
 800d2a6:	d00b      	beq.n	800d2c0 <__pow5mult+0xa0>
 800d2a8:	6820      	ldr	r0, [r4, #0]
 800d2aa:	b938      	cbnz	r0, 800d2bc <__pow5mult+0x9c>
 800d2ac:	4622      	mov	r2, r4
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	f7ff ff13 	bl	800d0dc <__multiply>
 800d2b6:	6020      	str	r0, [r4, #0]
 800d2b8:	f8c0 9000 	str.w	r9, [r0]
 800d2bc:	4604      	mov	r4, r0
 800d2be:	e7e4      	b.n	800d28a <__pow5mult+0x6a>
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c6:	bf00      	nop
 800d2c8:	0800fa10 	.word	0x0800fa10
 800d2cc:	0800f87e 	.word	0x0800f87e
 800d2d0:	0800f8fe 	.word	0x0800f8fe

0800d2d4 <__lshift>:
 800d2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d8:	460c      	mov	r4, r1
 800d2da:	6849      	ldr	r1, [r1, #4]
 800d2dc:	6923      	ldr	r3, [r4, #16]
 800d2de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2e2:	68a3      	ldr	r3, [r4, #8]
 800d2e4:	4607      	mov	r7, r0
 800d2e6:	4691      	mov	r9, r2
 800d2e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2ec:	f108 0601 	add.w	r6, r8, #1
 800d2f0:	42b3      	cmp	r3, r6
 800d2f2:	db0b      	blt.n	800d30c <__lshift+0x38>
 800d2f4:	4638      	mov	r0, r7
 800d2f6:	f7ff fd9d 	bl	800ce34 <_Balloc>
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	b948      	cbnz	r0, 800d312 <__lshift+0x3e>
 800d2fe:	4602      	mov	r2, r0
 800d300:	4b28      	ldr	r3, [pc, #160]	@ (800d3a4 <__lshift+0xd0>)
 800d302:	4829      	ldr	r0, [pc, #164]	@ (800d3a8 <__lshift+0xd4>)
 800d304:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d308:	f001 fc9e 	bl	800ec48 <__assert_func>
 800d30c:	3101      	adds	r1, #1
 800d30e:	005b      	lsls	r3, r3, #1
 800d310:	e7ee      	b.n	800d2f0 <__lshift+0x1c>
 800d312:	2300      	movs	r3, #0
 800d314:	f100 0114 	add.w	r1, r0, #20
 800d318:	f100 0210 	add.w	r2, r0, #16
 800d31c:	4618      	mov	r0, r3
 800d31e:	4553      	cmp	r3, sl
 800d320:	db33      	blt.n	800d38a <__lshift+0xb6>
 800d322:	6920      	ldr	r0, [r4, #16]
 800d324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d328:	f104 0314 	add.w	r3, r4, #20
 800d32c:	f019 091f 	ands.w	r9, r9, #31
 800d330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d334:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d338:	d02b      	beq.n	800d392 <__lshift+0xbe>
 800d33a:	f1c9 0e20 	rsb	lr, r9, #32
 800d33e:	468a      	mov	sl, r1
 800d340:	2200      	movs	r2, #0
 800d342:	6818      	ldr	r0, [r3, #0]
 800d344:	fa00 f009 	lsl.w	r0, r0, r9
 800d348:	4310      	orrs	r0, r2
 800d34a:	f84a 0b04 	str.w	r0, [sl], #4
 800d34e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d352:	459c      	cmp	ip, r3
 800d354:	fa22 f20e 	lsr.w	r2, r2, lr
 800d358:	d8f3      	bhi.n	800d342 <__lshift+0x6e>
 800d35a:	ebac 0304 	sub.w	r3, ip, r4
 800d35e:	3b15      	subs	r3, #21
 800d360:	f023 0303 	bic.w	r3, r3, #3
 800d364:	3304      	adds	r3, #4
 800d366:	f104 0015 	add.w	r0, r4, #21
 800d36a:	4560      	cmp	r0, ip
 800d36c:	bf88      	it	hi
 800d36e:	2304      	movhi	r3, #4
 800d370:	50ca      	str	r2, [r1, r3]
 800d372:	b10a      	cbz	r2, 800d378 <__lshift+0xa4>
 800d374:	f108 0602 	add.w	r6, r8, #2
 800d378:	3e01      	subs	r6, #1
 800d37a:	4638      	mov	r0, r7
 800d37c:	612e      	str	r6, [r5, #16]
 800d37e:	4621      	mov	r1, r4
 800d380:	f7ff fd98 	bl	800ceb4 <_Bfree>
 800d384:	4628      	mov	r0, r5
 800d386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d38a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d38e:	3301      	adds	r3, #1
 800d390:	e7c5      	b.n	800d31e <__lshift+0x4a>
 800d392:	3904      	subs	r1, #4
 800d394:	f853 2b04 	ldr.w	r2, [r3], #4
 800d398:	f841 2f04 	str.w	r2, [r1, #4]!
 800d39c:	459c      	cmp	ip, r3
 800d39e:	d8f9      	bhi.n	800d394 <__lshift+0xc0>
 800d3a0:	e7ea      	b.n	800d378 <__lshift+0xa4>
 800d3a2:	bf00      	nop
 800d3a4:	0800f8ed 	.word	0x0800f8ed
 800d3a8:	0800f8fe 	.word	0x0800f8fe

0800d3ac <__mcmp>:
 800d3ac:	690a      	ldr	r2, [r1, #16]
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	6900      	ldr	r0, [r0, #16]
 800d3b2:	1a80      	subs	r0, r0, r2
 800d3b4:	b530      	push	{r4, r5, lr}
 800d3b6:	d10e      	bne.n	800d3d6 <__mcmp+0x2a>
 800d3b8:	3314      	adds	r3, #20
 800d3ba:	3114      	adds	r1, #20
 800d3bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d3c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d3c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d3cc:	4295      	cmp	r5, r2
 800d3ce:	d003      	beq.n	800d3d8 <__mcmp+0x2c>
 800d3d0:	d205      	bcs.n	800d3de <__mcmp+0x32>
 800d3d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3d6:	bd30      	pop	{r4, r5, pc}
 800d3d8:	42a3      	cmp	r3, r4
 800d3da:	d3f3      	bcc.n	800d3c4 <__mcmp+0x18>
 800d3dc:	e7fb      	b.n	800d3d6 <__mcmp+0x2a>
 800d3de:	2001      	movs	r0, #1
 800d3e0:	e7f9      	b.n	800d3d6 <__mcmp+0x2a>
	...

0800d3e4 <__mdiff>:
 800d3e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e8:	4689      	mov	r9, r1
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	4611      	mov	r1, r2
 800d3ee:	4648      	mov	r0, r9
 800d3f0:	4614      	mov	r4, r2
 800d3f2:	f7ff ffdb 	bl	800d3ac <__mcmp>
 800d3f6:	1e05      	subs	r5, r0, #0
 800d3f8:	d112      	bne.n	800d420 <__mdiff+0x3c>
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	f7ff fd19 	bl	800ce34 <_Balloc>
 800d402:	4602      	mov	r2, r0
 800d404:	b928      	cbnz	r0, 800d412 <__mdiff+0x2e>
 800d406:	4b3f      	ldr	r3, [pc, #252]	@ (800d504 <__mdiff+0x120>)
 800d408:	f240 2137 	movw	r1, #567	@ 0x237
 800d40c:	483e      	ldr	r0, [pc, #248]	@ (800d508 <__mdiff+0x124>)
 800d40e:	f001 fc1b 	bl	800ec48 <__assert_func>
 800d412:	2301      	movs	r3, #1
 800d414:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d418:	4610      	mov	r0, r2
 800d41a:	b003      	add	sp, #12
 800d41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d420:	bfbc      	itt	lt
 800d422:	464b      	movlt	r3, r9
 800d424:	46a1      	movlt	r9, r4
 800d426:	4630      	mov	r0, r6
 800d428:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d42c:	bfba      	itte	lt
 800d42e:	461c      	movlt	r4, r3
 800d430:	2501      	movlt	r5, #1
 800d432:	2500      	movge	r5, #0
 800d434:	f7ff fcfe 	bl	800ce34 <_Balloc>
 800d438:	4602      	mov	r2, r0
 800d43a:	b918      	cbnz	r0, 800d444 <__mdiff+0x60>
 800d43c:	4b31      	ldr	r3, [pc, #196]	@ (800d504 <__mdiff+0x120>)
 800d43e:	f240 2145 	movw	r1, #581	@ 0x245
 800d442:	e7e3      	b.n	800d40c <__mdiff+0x28>
 800d444:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d448:	6926      	ldr	r6, [r4, #16]
 800d44a:	60c5      	str	r5, [r0, #12]
 800d44c:	f109 0310 	add.w	r3, r9, #16
 800d450:	f109 0514 	add.w	r5, r9, #20
 800d454:	f104 0e14 	add.w	lr, r4, #20
 800d458:	f100 0b14 	add.w	fp, r0, #20
 800d45c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d460:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d464:	9301      	str	r3, [sp, #4]
 800d466:	46d9      	mov	r9, fp
 800d468:	f04f 0c00 	mov.w	ip, #0
 800d46c:	9b01      	ldr	r3, [sp, #4]
 800d46e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d472:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d476:	9301      	str	r3, [sp, #4]
 800d478:	fa1f f38a 	uxth.w	r3, sl
 800d47c:	4619      	mov	r1, r3
 800d47e:	b283      	uxth	r3, r0
 800d480:	1acb      	subs	r3, r1, r3
 800d482:	0c00      	lsrs	r0, r0, #16
 800d484:	4463      	add	r3, ip
 800d486:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d48a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d48e:	b29b      	uxth	r3, r3
 800d490:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d494:	4576      	cmp	r6, lr
 800d496:	f849 3b04 	str.w	r3, [r9], #4
 800d49a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d49e:	d8e5      	bhi.n	800d46c <__mdiff+0x88>
 800d4a0:	1b33      	subs	r3, r6, r4
 800d4a2:	3b15      	subs	r3, #21
 800d4a4:	f023 0303 	bic.w	r3, r3, #3
 800d4a8:	3415      	adds	r4, #21
 800d4aa:	3304      	adds	r3, #4
 800d4ac:	42a6      	cmp	r6, r4
 800d4ae:	bf38      	it	cc
 800d4b0:	2304      	movcc	r3, #4
 800d4b2:	441d      	add	r5, r3
 800d4b4:	445b      	add	r3, fp
 800d4b6:	461e      	mov	r6, r3
 800d4b8:	462c      	mov	r4, r5
 800d4ba:	4544      	cmp	r4, r8
 800d4bc:	d30e      	bcc.n	800d4dc <__mdiff+0xf8>
 800d4be:	f108 0103 	add.w	r1, r8, #3
 800d4c2:	1b49      	subs	r1, r1, r5
 800d4c4:	f021 0103 	bic.w	r1, r1, #3
 800d4c8:	3d03      	subs	r5, #3
 800d4ca:	45a8      	cmp	r8, r5
 800d4cc:	bf38      	it	cc
 800d4ce:	2100      	movcc	r1, #0
 800d4d0:	440b      	add	r3, r1
 800d4d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4d6:	b191      	cbz	r1, 800d4fe <__mdiff+0x11a>
 800d4d8:	6117      	str	r7, [r2, #16]
 800d4da:	e79d      	b.n	800d418 <__mdiff+0x34>
 800d4dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800d4e0:	46e6      	mov	lr, ip
 800d4e2:	0c08      	lsrs	r0, r1, #16
 800d4e4:	fa1c fc81 	uxtah	ip, ip, r1
 800d4e8:	4471      	add	r1, lr
 800d4ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d4ee:	b289      	uxth	r1, r1
 800d4f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d4f4:	f846 1b04 	str.w	r1, [r6], #4
 800d4f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4fc:	e7dd      	b.n	800d4ba <__mdiff+0xd6>
 800d4fe:	3f01      	subs	r7, #1
 800d500:	e7e7      	b.n	800d4d2 <__mdiff+0xee>
 800d502:	bf00      	nop
 800d504:	0800f8ed 	.word	0x0800f8ed
 800d508:	0800f8fe 	.word	0x0800f8fe

0800d50c <__ulp>:
 800d50c:	b082      	sub	sp, #8
 800d50e:	ed8d 0b00 	vstr	d0, [sp]
 800d512:	9a01      	ldr	r2, [sp, #4]
 800d514:	4b0f      	ldr	r3, [pc, #60]	@ (800d554 <__ulp+0x48>)
 800d516:	4013      	ands	r3, r2
 800d518:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	dc08      	bgt.n	800d532 <__ulp+0x26>
 800d520:	425b      	negs	r3, r3
 800d522:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d526:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d52a:	da04      	bge.n	800d536 <__ulp+0x2a>
 800d52c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d530:	4113      	asrs	r3, r2
 800d532:	2200      	movs	r2, #0
 800d534:	e008      	b.n	800d548 <__ulp+0x3c>
 800d536:	f1a2 0314 	sub.w	r3, r2, #20
 800d53a:	2b1e      	cmp	r3, #30
 800d53c:	bfda      	itte	le
 800d53e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d542:	40da      	lsrle	r2, r3
 800d544:	2201      	movgt	r2, #1
 800d546:	2300      	movs	r3, #0
 800d548:	4619      	mov	r1, r3
 800d54a:	4610      	mov	r0, r2
 800d54c:	ec41 0b10 	vmov	d0, r0, r1
 800d550:	b002      	add	sp, #8
 800d552:	4770      	bx	lr
 800d554:	7ff00000 	.word	0x7ff00000

0800d558 <__b2d>:
 800d558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d55c:	6906      	ldr	r6, [r0, #16]
 800d55e:	f100 0814 	add.w	r8, r0, #20
 800d562:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d566:	1f37      	subs	r7, r6, #4
 800d568:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d56c:	4610      	mov	r0, r2
 800d56e:	f7ff fd53 	bl	800d018 <__hi0bits>
 800d572:	f1c0 0320 	rsb	r3, r0, #32
 800d576:	280a      	cmp	r0, #10
 800d578:	600b      	str	r3, [r1, #0]
 800d57a:	491b      	ldr	r1, [pc, #108]	@ (800d5e8 <__b2d+0x90>)
 800d57c:	dc15      	bgt.n	800d5aa <__b2d+0x52>
 800d57e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d582:	fa22 f30c 	lsr.w	r3, r2, ip
 800d586:	45b8      	cmp	r8, r7
 800d588:	ea43 0501 	orr.w	r5, r3, r1
 800d58c:	bf34      	ite	cc
 800d58e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d592:	2300      	movcs	r3, #0
 800d594:	3015      	adds	r0, #21
 800d596:	fa02 f000 	lsl.w	r0, r2, r0
 800d59a:	fa23 f30c 	lsr.w	r3, r3, ip
 800d59e:	4303      	orrs	r3, r0
 800d5a0:	461c      	mov	r4, r3
 800d5a2:	ec45 4b10 	vmov	d0, r4, r5
 800d5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5aa:	45b8      	cmp	r8, r7
 800d5ac:	bf3a      	itte	cc
 800d5ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d5b2:	f1a6 0708 	subcc.w	r7, r6, #8
 800d5b6:	2300      	movcs	r3, #0
 800d5b8:	380b      	subs	r0, #11
 800d5ba:	d012      	beq.n	800d5e2 <__b2d+0x8a>
 800d5bc:	f1c0 0120 	rsb	r1, r0, #32
 800d5c0:	fa23 f401 	lsr.w	r4, r3, r1
 800d5c4:	4082      	lsls	r2, r0
 800d5c6:	4322      	orrs	r2, r4
 800d5c8:	4547      	cmp	r7, r8
 800d5ca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d5ce:	bf8c      	ite	hi
 800d5d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d5d4:	2200      	movls	r2, #0
 800d5d6:	4083      	lsls	r3, r0
 800d5d8:	40ca      	lsrs	r2, r1
 800d5da:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	e7de      	b.n	800d5a0 <__b2d+0x48>
 800d5e2:	ea42 0501 	orr.w	r5, r2, r1
 800d5e6:	e7db      	b.n	800d5a0 <__b2d+0x48>
 800d5e8:	3ff00000 	.word	0x3ff00000

0800d5ec <__d2b>:
 800d5ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5f0:	460f      	mov	r7, r1
 800d5f2:	2101      	movs	r1, #1
 800d5f4:	ec59 8b10 	vmov	r8, r9, d0
 800d5f8:	4616      	mov	r6, r2
 800d5fa:	f7ff fc1b 	bl	800ce34 <_Balloc>
 800d5fe:	4604      	mov	r4, r0
 800d600:	b930      	cbnz	r0, 800d610 <__d2b+0x24>
 800d602:	4602      	mov	r2, r0
 800d604:	4b23      	ldr	r3, [pc, #140]	@ (800d694 <__d2b+0xa8>)
 800d606:	4824      	ldr	r0, [pc, #144]	@ (800d698 <__d2b+0xac>)
 800d608:	f240 310f 	movw	r1, #783	@ 0x30f
 800d60c:	f001 fb1c 	bl	800ec48 <__assert_func>
 800d610:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d614:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d618:	b10d      	cbz	r5, 800d61e <__d2b+0x32>
 800d61a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d61e:	9301      	str	r3, [sp, #4]
 800d620:	f1b8 0300 	subs.w	r3, r8, #0
 800d624:	d023      	beq.n	800d66e <__d2b+0x82>
 800d626:	4668      	mov	r0, sp
 800d628:	9300      	str	r3, [sp, #0]
 800d62a:	f7ff fd14 	bl	800d056 <__lo0bits>
 800d62e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d632:	b1d0      	cbz	r0, 800d66a <__d2b+0x7e>
 800d634:	f1c0 0320 	rsb	r3, r0, #32
 800d638:	fa02 f303 	lsl.w	r3, r2, r3
 800d63c:	430b      	orrs	r3, r1
 800d63e:	40c2      	lsrs	r2, r0
 800d640:	6163      	str	r3, [r4, #20]
 800d642:	9201      	str	r2, [sp, #4]
 800d644:	9b01      	ldr	r3, [sp, #4]
 800d646:	61a3      	str	r3, [r4, #24]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	bf0c      	ite	eq
 800d64c:	2201      	moveq	r2, #1
 800d64e:	2202      	movne	r2, #2
 800d650:	6122      	str	r2, [r4, #16]
 800d652:	b1a5      	cbz	r5, 800d67e <__d2b+0x92>
 800d654:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d658:	4405      	add	r5, r0
 800d65a:	603d      	str	r5, [r7, #0]
 800d65c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d660:	6030      	str	r0, [r6, #0]
 800d662:	4620      	mov	r0, r4
 800d664:	b003      	add	sp, #12
 800d666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d66a:	6161      	str	r1, [r4, #20]
 800d66c:	e7ea      	b.n	800d644 <__d2b+0x58>
 800d66e:	a801      	add	r0, sp, #4
 800d670:	f7ff fcf1 	bl	800d056 <__lo0bits>
 800d674:	9b01      	ldr	r3, [sp, #4]
 800d676:	6163      	str	r3, [r4, #20]
 800d678:	3020      	adds	r0, #32
 800d67a:	2201      	movs	r2, #1
 800d67c:	e7e8      	b.n	800d650 <__d2b+0x64>
 800d67e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d682:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d686:	6038      	str	r0, [r7, #0]
 800d688:	6918      	ldr	r0, [r3, #16]
 800d68a:	f7ff fcc5 	bl	800d018 <__hi0bits>
 800d68e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d692:	e7e5      	b.n	800d660 <__d2b+0x74>
 800d694:	0800f8ed 	.word	0x0800f8ed
 800d698:	0800f8fe 	.word	0x0800f8fe

0800d69c <__ratio>:
 800d69c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a0:	4688      	mov	r8, r1
 800d6a2:	4669      	mov	r1, sp
 800d6a4:	4681      	mov	r9, r0
 800d6a6:	f7ff ff57 	bl	800d558 <__b2d>
 800d6aa:	a901      	add	r1, sp, #4
 800d6ac:	4640      	mov	r0, r8
 800d6ae:	ec55 4b10 	vmov	r4, r5, d0
 800d6b2:	f7ff ff51 	bl	800d558 <__b2d>
 800d6b6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d6ba:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d6be:	1ad2      	subs	r2, r2, r3
 800d6c0:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d6c4:	1a5b      	subs	r3, r3, r1
 800d6c6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d6ca:	ec57 6b10 	vmov	r6, r7, d0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	bfd6      	itet	le
 800d6d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d6d6:	462a      	movgt	r2, r5
 800d6d8:	463a      	movle	r2, r7
 800d6da:	46ab      	mov	fp, r5
 800d6dc:	46a2      	mov	sl, r4
 800d6de:	bfce      	itee	gt
 800d6e0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d6e4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d6e8:	ee00 3a90 	vmovle	s1, r3
 800d6ec:	ec4b ab17 	vmov	d7, sl, fp
 800d6f0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d6f4:	b003      	add	sp, #12
 800d6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6fa <__copybits>:
 800d6fa:	3901      	subs	r1, #1
 800d6fc:	b570      	push	{r4, r5, r6, lr}
 800d6fe:	1149      	asrs	r1, r1, #5
 800d700:	6914      	ldr	r4, [r2, #16]
 800d702:	3101      	adds	r1, #1
 800d704:	f102 0314 	add.w	r3, r2, #20
 800d708:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d70c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d710:	1f05      	subs	r5, r0, #4
 800d712:	42a3      	cmp	r3, r4
 800d714:	d30c      	bcc.n	800d730 <__copybits+0x36>
 800d716:	1aa3      	subs	r3, r4, r2
 800d718:	3b11      	subs	r3, #17
 800d71a:	f023 0303 	bic.w	r3, r3, #3
 800d71e:	3211      	adds	r2, #17
 800d720:	42a2      	cmp	r2, r4
 800d722:	bf88      	it	hi
 800d724:	2300      	movhi	r3, #0
 800d726:	4418      	add	r0, r3
 800d728:	2300      	movs	r3, #0
 800d72a:	4288      	cmp	r0, r1
 800d72c:	d305      	bcc.n	800d73a <__copybits+0x40>
 800d72e:	bd70      	pop	{r4, r5, r6, pc}
 800d730:	f853 6b04 	ldr.w	r6, [r3], #4
 800d734:	f845 6f04 	str.w	r6, [r5, #4]!
 800d738:	e7eb      	b.n	800d712 <__copybits+0x18>
 800d73a:	f840 3b04 	str.w	r3, [r0], #4
 800d73e:	e7f4      	b.n	800d72a <__copybits+0x30>

0800d740 <__any_on>:
 800d740:	f100 0214 	add.w	r2, r0, #20
 800d744:	6900      	ldr	r0, [r0, #16]
 800d746:	114b      	asrs	r3, r1, #5
 800d748:	4298      	cmp	r0, r3
 800d74a:	b510      	push	{r4, lr}
 800d74c:	db11      	blt.n	800d772 <__any_on+0x32>
 800d74e:	dd0a      	ble.n	800d766 <__any_on+0x26>
 800d750:	f011 011f 	ands.w	r1, r1, #31
 800d754:	d007      	beq.n	800d766 <__any_on+0x26>
 800d756:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d75a:	fa24 f001 	lsr.w	r0, r4, r1
 800d75e:	fa00 f101 	lsl.w	r1, r0, r1
 800d762:	428c      	cmp	r4, r1
 800d764:	d10b      	bne.n	800d77e <__any_on+0x3e>
 800d766:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d803      	bhi.n	800d776 <__any_on+0x36>
 800d76e:	2000      	movs	r0, #0
 800d770:	bd10      	pop	{r4, pc}
 800d772:	4603      	mov	r3, r0
 800d774:	e7f7      	b.n	800d766 <__any_on+0x26>
 800d776:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d77a:	2900      	cmp	r1, #0
 800d77c:	d0f5      	beq.n	800d76a <__any_on+0x2a>
 800d77e:	2001      	movs	r0, #1
 800d780:	e7f6      	b.n	800d770 <__any_on+0x30>

0800d782 <sulp>:
 800d782:	b570      	push	{r4, r5, r6, lr}
 800d784:	4604      	mov	r4, r0
 800d786:	460d      	mov	r5, r1
 800d788:	4616      	mov	r6, r2
 800d78a:	ec45 4b10 	vmov	d0, r4, r5
 800d78e:	f7ff febd 	bl	800d50c <__ulp>
 800d792:	b17e      	cbz	r6, 800d7b4 <sulp+0x32>
 800d794:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d798:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	dd09      	ble.n	800d7b4 <sulp+0x32>
 800d7a0:	051b      	lsls	r3, r3, #20
 800d7a2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d7ac:	ec41 0b17 	vmov	d7, r0, r1
 800d7b0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d7b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d7b8 <_strtod_l>:
 800d7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7bc:	ed2d 8b0a 	vpush	{d8-d12}
 800d7c0:	b097      	sub	sp, #92	@ 0x5c
 800d7c2:	4688      	mov	r8, r1
 800d7c4:	920e      	str	r2, [sp, #56]	@ 0x38
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	9212      	str	r2, [sp, #72]	@ 0x48
 800d7ca:	9005      	str	r0, [sp, #20]
 800d7cc:	f04f 0a00 	mov.w	sl, #0
 800d7d0:	f04f 0b00 	mov.w	fp, #0
 800d7d4:	460a      	mov	r2, r1
 800d7d6:	9211      	str	r2, [sp, #68]	@ 0x44
 800d7d8:	7811      	ldrb	r1, [r2, #0]
 800d7da:	292b      	cmp	r1, #43	@ 0x2b
 800d7dc:	d04c      	beq.n	800d878 <_strtod_l+0xc0>
 800d7de:	d839      	bhi.n	800d854 <_strtod_l+0x9c>
 800d7e0:	290d      	cmp	r1, #13
 800d7e2:	d833      	bhi.n	800d84c <_strtod_l+0x94>
 800d7e4:	2908      	cmp	r1, #8
 800d7e6:	d833      	bhi.n	800d850 <_strtod_l+0x98>
 800d7e8:	2900      	cmp	r1, #0
 800d7ea:	d03c      	beq.n	800d866 <_strtod_l+0xae>
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	9208      	str	r2, [sp, #32]
 800d7f0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d7f2:	782a      	ldrb	r2, [r5, #0]
 800d7f4:	2a30      	cmp	r2, #48	@ 0x30
 800d7f6:	f040 80b7 	bne.w	800d968 <_strtod_l+0x1b0>
 800d7fa:	786a      	ldrb	r2, [r5, #1]
 800d7fc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d800:	2a58      	cmp	r2, #88	@ 0x58
 800d802:	d170      	bne.n	800d8e6 <_strtod_l+0x12e>
 800d804:	9302      	str	r3, [sp, #8]
 800d806:	9b08      	ldr	r3, [sp, #32]
 800d808:	9301      	str	r3, [sp, #4]
 800d80a:	ab12      	add	r3, sp, #72	@ 0x48
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	4a90      	ldr	r2, [pc, #576]	@ (800da50 <_strtod_l+0x298>)
 800d810:	9805      	ldr	r0, [sp, #20]
 800d812:	ab13      	add	r3, sp, #76	@ 0x4c
 800d814:	a911      	add	r1, sp, #68	@ 0x44
 800d816:	f001 fab1 	bl	800ed7c <__gethex>
 800d81a:	f010 060f 	ands.w	r6, r0, #15
 800d81e:	4604      	mov	r4, r0
 800d820:	d005      	beq.n	800d82e <_strtod_l+0x76>
 800d822:	2e06      	cmp	r6, #6
 800d824:	d12a      	bne.n	800d87c <_strtod_l+0xc4>
 800d826:	3501      	adds	r5, #1
 800d828:	2300      	movs	r3, #0
 800d82a:	9511      	str	r5, [sp, #68]	@ 0x44
 800d82c:	9308      	str	r3, [sp, #32]
 800d82e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d830:	2b00      	cmp	r3, #0
 800d832:	f040 8537 	bne.w	800e2a4 <_strtod_l+0xaec>
 800d836:	9b08      	ldr	r3, [sp, #32]
 800d838:	ec4b ab10 	vmov	d0, sl, fp
 800d83c:	b1cb      	cbz	r3, 800d872 <_strtod_l+0xba>
 800d83e:	eeb1 0b40 	vneg.f64	d0, d0
 800d842:	b017      	add	sp, #92	@ 0x5c
 800d844:	ecbd 8b0a 	vpop	{d8-d12}
 800d848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84c:	2920      	cmp	r1, #32
 800d84e:	d1cd      	bne.n	800d7ec <_strtod_l+0x34>
 800d850:	3201      	adds	r2, #1
 800d852:	e7c0      	b.n	800d7d6 <_strtod_l+0x1e>
 800d854:	292d      	cmp	r1, #45	@ 0x2d
 800d856:	d1c9      	bne.n	800d7ec <_strtod_l+0x34>
 800d858:	2101      	movs	r1, #1
 800d85a:	9108      	str	r1, [sp, #32]
 800d85c:	1c51      	adds	r1, r2, #1
 800d85e:	9111      	str	r1, [sp, #68]	@ 0x44
 800d860:	7852      	ldrb	r2, [r2, #1]
 800d862:	2a00      	cmp	r2, #0
 800d864:	d1c4      	bne.n	800d7f0 <_strtod_l+0x38>
 800d866:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d868:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f040 8517 	bne.w	800e2a0 <_strtod_l+0xae8>
 800d872:	ec4b ab10 	vmov	d0, sl, fp
 800d876:	e7e4      	b.n	800d842 <_strtod_l+0x8a>
 800d878:	2100      	movs	r1, #0
 800d87a:	e7ee      	b.n	800d85a <_strtod_l+0xa2>
 800d87c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d87e:	b13a      	cbz	r2, 800d890 <_strtod_l+0xd8>
 800d880:	2135      	movs	r1, #53	@ 0x35
 800d882:	a814      	add	r0, sp, #80	@ 0x50
 800d884:	f7ff ff39 	bl	800d6fa <__copybits>
 800d888:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d88a:	9805      	ldr	r0, [sp, #20]
 800d88c:	f7ff fb12 	bl	800ceb4 <_Bfree>
 800d890:	1e73      	subs	r3, r6, #1
 800d892:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d894:	2b04      	cmp	r3, #4
 800d896:	d806      	bhi.n	800d8a6 <_strtod_l+0xee>
 800d898:	e8df f003 	tbb	[pc, r3]
 800d89c:	201d0314 	.word	0x201d0314
 800d8a0:	14          	.byte	0x14
 800d8a1:	00          	.byte	0x00
 800d8a2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d8a6:	05e3      	lsls	r3, r4, #23
 800d8a8:	bf48      	it	mi
 800d8aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d8ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8b2:	0d1b      	lsrs	r3, r3, #20
 800d8b4:	051b      	lsls	r3, r3, #20
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1b9      	bne.n	800d82e <_strtod_l+0x76>
 800d8ba:	f7fe fba1 	bl	800c000 <__errno>
 800d8be:	2322      	movs	r3, #34	@ 0x22
 800d8c0:	6003      	str	r3, [r0, #0]
 800d8c2:	e7b4      	b.n	800d82e <_strtod_l+0x76>
 800d8c4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800d8c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d8cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d8d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d8d4:	e7e7      	b.n	800d8a6 <_strtod_l+0xee>
 800d8d6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800da58 <_strtod_l+0x2a0>
 800d8da:	e7e4      	b.n	800d8a6 <_strtod_l+0xee>
 800d8dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d8e0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d8e4:	e7df      	b.n	800d8a6 <_strtod_l+0xee>
 800d8e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	9211      	str	r2, [sp, #68]	@ 0x44
 800d8ec:	785b      	ldrb	r3, [r3, #1]
 800d8ee:	2b30      	cmp	r3, #48	@ 0x30
 800d8f0:	d0f9      	beq.n	800d8e6 <_strtod_l+0x12e>
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d09b      	beq.n	800d82e <_strtod_l+0x76>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	9307      	str	r3, [sp, #28]
 800d8fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d8fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8fe:	2300      	movs	r3, #0
 800d900:	9306      	str	r3, [sp, #24]
 800d902:	4699      	mov	r9, r3
 800d904:	461d      	mov	r5, r3
 800d906:	220a      	movs	r2, #10
 800d908:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d90a:	7804      	ldrb	r4, [r0, #0]
 800d90c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d910:	b2d9      	uxtb	r1, r3
 800d912:	2909      	cmp	r1, #9
 800d914:	d92a      	bls.n	800d96c <_strtod_l+0x1b4>
 800d916:	494f      	ldr	r1, [pc, #316]	@ (800da54 <_strtod_l+0x29c>)
 800d918:	2201      	movs	r2, #1
 800d91a:	f001 f95d 	bl	800ebd8 <strncmp>
 800d91e:	b398      	cbz	r0, 800d988 <_strtod_l+0x1d0>
 800d920:	2000      	movs	r0, #0
 800d922:	4622      	mov	r2, r4
 800d924:	462b      	mov	r3, r5
 800d926:	4607      	mov	r7, r0
 800d928:	4601      	mov	r1, r0
 800d92a:	2a65      	cmp	r2, #101	@ 0x65
 800d92c:	d001      	beq.n	800d932 <_strtod_l+0x17a>
 800d92e:	2a45      	cmp	r2, #69	@ 0x45
 800d930:	d118      	bne.n	800d964 <_strtod_l+0x1ac>
 800d932:	b91b      	cbnz	r3, 800d93c <_strtod_l+0x184>
 800d934:	9b07      	ldr	r3, [sp, #28]
 800d936:	4303      	orrs	r3, r0
 800d938:	d095      	beq.n	800d866 <_strtod_l+0xae>
 800d93a:	2300      	movs	r3, #0
 800d93c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d940:	f108 0201 	add.w	r2, r8, #1
 800d944:	9211      	str	r2, [sp, #68]	@ 0x44
 800d946:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d94a:	2a2b      	cmp	r2, #43	@ 0x2b
 800d94c:	d074      	beq.n	800da38 <_strtod_l+0x280>
 800d94e:	2a2d      	cmp	r2, #45	@ 0x2d
 800d950:	d07a      	beq.n	800da48 <_strtod_l+0x290>
 800d952:	f04f 0e00 	mov.w	lr, #0
 800d956:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d95a:	2c09      	cmp	r4, #9
 800d95c:	f240 8082 	bls.w	800da64 <_strtod_l+0x2ac>
 800d960:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d964:	2400      	movs	r4, #0
 800d966:	e09d      	b.n	800daa4 <_strtod_l+0x2ec>
 800d968:	2300      	movs	r3, #0
 800d96a:	e7c5      	b.n	800d8f8 <_strtod_l+0x140>
 800d96c:	2d08      	cmp	r5, #8
 800d96e:	bfc8      	it	gt
 800d970:	9906      	ldrgt	r1, [sp, #24]
 800d972:	f100 0001 	add.w	r0, r0, #1
 800d976:	bfca      	itet	gt
 800d978:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d97c:	fb02 3909 	mlale	r9, r2, r9, r3
 800d980:	9306      	strgt	r3, [sp, #24]
 800d982:	3501      	adds	r5, #1
 800d984:	9011      	str	r0, [sp, #68]	@ 0x44
 800d986:	e7bf      	b.n	800d908 <_strtod_l+0x150>
 800d988:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d98a:	1c5a      	adds	r2, r3, #1
 800d98c:	9211      	str	r2, [sp, #68]	@ 0x44
 800d98e:	785a      	ldrb	r2, [r3, #1]
 800d990:	b3bd      	cbz	r5, 800da02 <_strtod_l+0x24a>
 800d992:	4607      	mov	r7, r0
 800d994:	462b      	mov	r3, r5
 800d996:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d99a:	2909      	cmp	r1, #9
 800d99c:	d912      	bls.n	800d9c4 <_strtod_l+0x20c>
 800d99e:	2101      	movs	r1, #1
 800d9a0:	e7c3      	b.n	800d92a <_strtod_l+0x172>
 800d9a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d9a4:	1c5a      	adds	r2, r3, #1
 800d9a6:	9211      	str	r2, [sp, #68]	@ 0x44
 800d9a8:	785a      	ldrb	r2, [r3, #1]
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	2a30      	cmp	r2, #48	@ 0x30
 800d9ae:	d0f8      	beq.n	800d9a2 <_strtod_l+0x1ea>
 800d9b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d9b4:	2b08      	cmp	r3, #8
 800d9b6:	f200 847a 	bhi.w	800e2ae <_strtod_l+0xaf6>
 800d9ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d9bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9be:	4607      	mov	r7, r0
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	3a30      	subs	r2, #48	@ 0x30
 800d9c6:	f100 0101 	add.w	r1, r0, #1
 800d9ca:	d014      	beq.n	800d9f6 <_strtod_l+0x23e>
 800d9cc:	440f      	add	r7, r1
 800d9ce:	469c      	mov	ip, r3
 800d9d0:	f04f 0e0a 	mov.w	lr, #10
 800d9d4:	f10c 0401 	add.w	r4, ip, #1
 800d9d8:	1ae6      	subs	r6, r4, r3
 800d9da:	42b1      	cmp	r1, r6
 800d9dc:	dc13      	bgt.n	800da06 <_strtod_l+0x24e>
 800d9de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d9e2:	1819      	adds	r1, r3, r0
 800d9e4:	2908      	cmp	r1, #8
 800d9e6:	f103 0301 	add.w	r3, r3, #1
 800d9ea:	4403      	add	r3, r0
 800d9ec:	dc19      	bgt.n	800da22 <_strtod_l+0x26a>
 800d9ee:	210a      	movs	r1, #10
 800d9f0:	fb01 2909 	mla	r9, r1, r9, r2
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d9f8:	1c50      	adds	r0, r2, #1
 800d9fa:	9011      	str	r0, [sp, #68]	@ 0x44
 800d9fc:	7852      	ldrb	r2, [r2, #1]
 800d9fe:	4608      	mov	r0, r1
 800da00:	e7c9      	b.n	800d996 <_strtod_l+0x1de>
 800da02:	4628      	mov	r0, r5
 800da04:	e7d2      	b.n	800d9ac <_strtod_l+0x1f4>
 800da06:	f1bc 0f08 	cmp.w	ip, #8
 800da0a:	dc03      	bgt.n	800da14 <_strtod_l+0x25c>
 800da0c:	fb0e f909 	mul.w	r9, lr, r9
 800da10:	46a4      	mov	ip, r4
 800da12:	e7df      	b.n	800d9d4 <_strtod_l+0x21c>
 800da14:	2c10      	cmp	r4, #16
 800da16:	bfde      	ittt	le
 800da18:	9e06      	ldrle	r6, [sp, #24]
 800da1a:	fb0e f606 	mulle.w	r6, lr, r6
 800da1e:	9606      	strle	r6, [sp, #24]
 800da20:	e7f6      	b.n	800da10 <_strtod_l+0x258>
 800da22:	290f      	cmp	r1, #15
 800da24:	bfdf      	itttt	le
 800da26:	9806      	ldrle	r0, [sp, #24]
 800da28:	210a      	movle	r1, #10
 800da2a:	fb01 2200 	mlale	r2, r1, r0, r2
 800da2e:	9206      	strle	r2, [sp, #24]
 800da30:	e7e0      	b.n	800d9f4 <_strtod_l+0x23c>
 800da32:	2700      	movs	r7, #0
 800da34:	2101      	movs	r1, #1
 800da36:	e77d      	b.n	800d934 <_strtod_l+0x17c>
 800da38:	f04f 0e00 	mov.w	lr, #0
 800da3c:	f108 0202 	add.w	r2, r8, #2
 800da40:	9211      	str	r2, [sp, #68]	@ 0x44
 800da42:	f898 2002 	ldrb.w	r2, [r8, #2]
 800da46:	e786      	b.n	800d956 <_strtod_l+0x19e>
 800da48:	f04f 0e01 	mov.w	lr, #1
 800da4c:	e7f6      	b.n	800da3c <_strtod_l+0x284>
 800da4e:	bf00      	nop
 800da50:	0800fb24 	.word	0x0800fb24
 800da54:	0800f957 	.word	0x0800f957
 800da58:	7ff00000 	.word	0x7ff00000
 800da5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800da5e:	1c54      	adds	r4, r2, #1
 800da60:	9411      	str	r4, [sp, #68]	@ 0x44
 800da62:	7852      	ldrb	r2, [r2, #1]
 800da64:	2a30      	cmp	r2, #48	@ 0x30
 800da66:	d0f9      	beq.n	800da5c <_strtod_l+0x2a4>
 800da68:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800da6c:	2c08      	cmp	r4, #8
 800da6e:	f63f af79 	bhi.w	800d964 <_strtod_l+0x1ac>
 800da72:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800da76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800da78:	9209      	str	r2, [sp, #36]	@ 0x24
 800da7a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800da7c:	1c54      	adds	r4, r2, #1
 800da7e:	9411      	str	r4, [sp, #68]	@ 0x44
 800da80:	7852      	ldrb	r2, [r2, #1]
 800da82:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800da86:	2e09      	cmp	r6, #9
 800da88:	d937      	bls.n	800dafa <_strtod_l+0x342>
 800da8a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800da8c:	1ba4      	subs	r4, r4, r6
 800da8e:	2c08      	cmp	r4, #8
 800da90:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800da94:	dc02      	bgt.n	800da9c <_strtod_l+0x2e4>
 800da96:	4564      	cmp	r4, ip
 800da98:	bfa8      	it	ge
 800da9a:	4664      	movge	r4, ip
 800da9c:	f1be 0f00 	cmp.w	lr, #0
 800daa0:	d000      	beq.n	800daa4 <_strtod_l+0x2ec>
 800daa2:	4264      	negs	r4, r4
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d14d      	bne.n	800db44 <_strtod_l+0x38c>
 800daa8:	9b07      	ldr	r3, [sp, #28]
 800daaa:	4318      	orrs	r0, r3
 800daac:	f47f aebf 	bne.w	800d82e <_strtod_l+0x76>
 800dab0:	2900      	cmp	r1, #0
 800dab2:	f47f aed8 	bne.w	800d866 <_strtod_l+0xae>
 800dab6:	2a69      	cmp	r2, #105	@ 0x69
 800dab8:	d027      	beq.n	800db0a <_strtod_l+0x352>
 800daba:	dc24      	bgt.n	800db06 <_strtod_l+0x34e>
 800dabc:	2a49      	cmp	r2, #73	@ 0x49
 800dabe:	d024      	beq.n	800db0a <_strtod_l+0x352>
 800dac0:	2a4e      	cmp	r2, #78	@ 0x4e
 800dac2:	f47f aed0 	bne.w	800d866 <_strtod_l+0xae>
 800dac6:	4997      	ldr	r1, [pc, #604]	@ (800dd24 <_strtod_l+0x56c>)
 800dac8:	a811      	add	r0, sp, #68	@ 0x44
 800daca:	f001 fb79 	bl	800f1c0 <__match>
 800dace:	2800      	cmp	r0, #0
 800dad0:	f43f aec9 	beq.w	800d866 <_strtod_l+0xae>
 800dad4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	2b28      	cmp	r3, #40	@ 0x28
 800dada:	d12d      	bne.n	800db38 <_strtod_l+0x380>
 800dadc:	4992      	ldr	r1, [pc, #584]	@ (800dd28 <_strtod_l+0x570>)
 800dade:	aa14      	add	r2, sp, #80	@ 0x50
 800dae0:	a811      	add	r0, sp, #68	@ 0x44
 800dae2:	f001 fb81 	bl	800f1e8 <__hexnan>
 800dae6:	2805      	cmp	r0, #5
 800dae8:	d126      	bne.n	800db38 <_strtod_l+0x380>
 800daea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800daec:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800daf0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800daf4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800daf8:	e699      	b.n	800d82e <_strtod_l+0x76>
 800dafa:	240a      	movs	r4, #10
 800dafc:	fb04 2c0c 	mla	ip, r4, ip, r2
 800db00:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800db04:	e7b9      	b.n	800da7a <_strtod_l+0x2c2>
 800db06:	2a6e      	cmp	r2, #110	@ 0x6e
 800db08:	e7db      	b.n	800dac2 <_strtod_l+0x30a>
 800db0a:	4988      	ldr	r1, [pc, #544]	@ (800dd2c <_strtod_l+0x574>)
 800db0c:	a811      	add	r0, sp, #68	@ 0x44
 800db0e:	f001 fb57 	bl	800f1c0 <__match>
 800db12:	2800      	cmp	r0, #0
 800db14:	f43f aea7 	beq.w	800d866 <_strtod_l+0xae>
 800db18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db1a:	4985      	ldr	r1, [pc, #532]	@ (800dd30 <_strtod_l+0x578>)
 800db1c:	3b01      	subs	r3, #1
 800db1e:	a811      	add	r0, sp, #68	@ 0x44
 800db20:	9311      	str	r3, [sp, #68]	@ 0x44
 800db22:	f001 fb4d 	bl	800f1c0 <__match>
 800db26:	b910      	cbnz	r0, 800db2e <_strtod_l+0x376>
 800db28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db2a:	3301      	adds	r3, #1
 800db2c:	9311      	str	r3, [sp, #68]	@ 0x44
 800db2e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800dd44 <_strtod_l+0x58c>
 800db32:	f04f 0a00 	mov.w	sl, #0
 800db36:	e67a      	b.n	800d82e <_strtod_l+0x76>
 800db38:	487e      	ldr	r0, [pc, #504]	@ (800dd34 <_strtod_l+0x57c>)
 800db3a:	f001 f87d 	bl	800ec38 <nan>
 800db3e:	ec5b ab10 	vmov	sl, fp, d0
 800db42:	e674      	b.n	800d82e <_strtod_l+0x76>
 800db44:	ee07 9a90 	vmov	s15, r9
 800db48:	1be2      	subs	r2, r4, r7
 800db4a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800db4e:	2d00      	cmp	r5, #0
 800db50:	bf08      	it	eq
 800db52:	461d      	moveq	r5, r3
 800db54:	2b10      	cmp	r3, #16
 800db56:	9209      	str	r2, [sp, #36]	@ 0x24
 800db58:	461a      	mov	r2, r3
 800db5a:	bfa8      	it	ge
 800db5c:	2210      	movge	r2, #16
 800db5e:	2b09      	cmp	r3, #9
 800db60:	ec5b ab17 	vmov	sl, fp, d7
 800db64:	dc15      	bgt.n	800db92 <_strtod_l+0x3da>
 800db66:	1be1      	subs	r1, r4, r7
 800db68:	2900      	cmp	r1, #0
 800db6a:	f43f ae60 	beq.w	800d82e <_strtod_l+0x76>
 800db6e:	eba4 0107 	sub.w	r1, r4, r7
 800db72:	dd72      	ble.n	800dc5a <_strtod_l+0x4a2>
 800db74:	2916      	cmp	r1, #22
 800db76:	dc59      	bgt.n	800dc2c <_strtod_l+0x474>
 800db78:	4b6f      	ldr	r3, [pc, #444]	@ (800dd38 <_strtod_l+0x580>)
 800db7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db80:	ed93 7b00 	vldr	d7, [r3]
 800db84:	ec4b ab16 	vmov	d6, sl, fp
 800db88:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db8c:	ec5b ab17 	vmov	sl, fp, d7
 800db90:	e64d      	b.n	800d82e <_strtod_l+0x76>
 800db92:	4969      	ldr	r1, [pc, #420]	@ (800dd38 <_strtod_l+0x580>)
 800db94:	eddd 6a06 	vldr	s13, [sp, #24]
 800db98:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800db9c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800dba0:	2b0f      	cmp	r3, #15
 800dba2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800dba6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800dbaa:	ec5b ab16 	vmov	sl, fp, d6
 800dbae:	ddda      	ble.n	800db66 <_strtod_l+0x3ae>
 800dbb0:	1a9a      	subs	r2, r3, r2
 800dbb2:	1be1      	subs	r1, r4, r7
 800dbb4:	440a      	add	r2, r1
 800dbb6:	2a00      	cmp	r2, #0
 800dbb8:	f340 8094 	ble.w	800dce4 <_strtod_l+0x52c>
 800dbbc:	f012 000f 	ands.w	r0, r2, #15
 800dbc0:	d00a      	beq.n	800dbd8 <_strtod_l+0x420>
 800dbc2:	495d      	ldr	r1, [pc, #372]	@ (800dd38 <_strtod_l+0x580>)
 800dbc4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dbc8:	ed91 7b00 	vldr	d7, [r1]
 800dbcc:	ec4b ab16 	vmov	d6, sl, fp
 800dbd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dbd4:	ec5b ab17 	vmov	sl, fp, d7
 800dbd8:	f032 020f 	bics.w	r2, r2, #15
 800dbdc:	d073      	beq.n	800dcc6 <_strtod_l+0x50e>
 800dbde:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800dbe2:	dd47      	ble.n	800dc74 <_strtod_l+0x4bc>
 800dbe4:	2400      	movs	r4, #0
 800dbe6:	4625      	mov	r5, r4
 800dbe8:	9407      	str	r4, [sp, #28]
 800dbea:	4626      	mov	r6, r4
 800dbec:	9a05      	ldr	r2, [sp, #20]
 800dbee:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dd44 <_strtod_l+0x58c>
 800dbf2:	2322      	movs	r3, #34	@ 0x22
 800dbf4:	6013      	str	r3, [r2, #0]
 800dbf6:	f04f 0a00 	mov.w	sl, #0
 800dbfa:	9b07      	ldr	r3, [sp, #28]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f43f ae16 	beq.w	800d82e <_strtod_l+0x76>
 800dc02:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dc04:	9805      	ldr	r0, [sp, #20]
 800dc06:	f7ff f955 	bl	800ceb4 <_Bfree>
 800dc0a:	9805      	ldr	r0, [sp, #20]
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	f7ff f951 	bl	800ceb4 <_Bfree>
 800dc12:	9805      	ldr	r0, [sp, #20]
 800dc14:	4629      	mov	r1, r5
 800dc16:	f7ff f94d 	bl	800ceb4 <_Bfree>
 800dc1a:	9907      	ldr	r1, [sp, #28]
 800dc1c:	9805      	ldr	r0, [sp, #20]
 800dc1e:	f7ff f949 	bl	800ceb4 <_Bfree>
 800dc22:	9805      	ldr	r0, [sp, #20]
 800dc24:	4621      	mov	r1, r4
 800dc26:	f7ff f945 	bl	800ceb4 <_Bfree>
 800dc2a:	e600      	b.n	800d82e <_strtod_l+0x76>
 800dc2c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800dc30:	1be0      	subs	r0, r4, r7
 800dc32:	4281      	cmp	r1, r0
 800dc34:	dbbc      	blt.n	800dbb0 <_strtod_l+0x3f8>
 800dc36:	4a40      	ldr	r2, [pc, #256]	@ (800dd38 <_strtod_l+0x580>)
 800dc38:	f1c3 030f 	rsb	r3, r3, #15
 800dc3c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800dc40:	ed91 7b00 	vldr	d7, [r1]
 800dc44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc46:	ec4b ab16 	vmov	d6, sl, fp
 800dc4a:	1acb      	subs	r3, r1, r3
 800dc4c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800dc50:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc54:	ed92 6b00 	vldr	d6, [r2]
 800dc58:	e796      	b.n	800db88 <_strtod_l+0x3d0>
 800dc5a:	3116      	adds	r1, #22
 800dc5c:	dba8      	blt.n	800dbb0 <_strtod_l+0x3f8>
 800dc5e:	4b36      	ldr	r3, [pc, #216]	@ (800dd38 <_strtod_l+0x580>)
 800dc60:	1b3c      	subs	r4, r7, r4
 800dc62:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800dc66:	ed94 7b00 	vldr	d7, [r4]
 800dc6a:	ec4b ab16 	vmov	d6, sl, fp
 800dc6e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dc72:	e78b      	b.n	800db8c <_strtod_l+0x3d4>
 800dc74:	2000      	movs	r0, #0
 800dc76:	ec4b ab17 	vmov	d7, sl, fp
 800dc7a:	4e30      	ldr	r6, [pc, #192]	@ (800dd3c <_strtod_l+0x584>)
 800dc7c:	1112      	asrs	r2, r2, #4
 800dc7e:	4601      	mov	r1, r0
 800dc80:	2a01      	cmp	r2, #1
 800dc82:	dc23      	bgt.n	800dccc <_strtod_l+0x514>
 800dc84:	b108      	cbz	r0, 800dc8a <_strtod_l+0x4d2>
 800dc86:	ec5b ab17 	vmov	sl, fp, d7
 800dc8a:	4a2c      	ldr	r2, [pc, #176]	@ (800dd3c <_strtod_l+0x584>)
 800dc8c:	482c      	ldr	r0, [pc, #176]	@ (800dd40 <_strtod_l+0x588>)
 800dc8e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dc92:	ed92 7b00 	vldr	d7, [r2]
 800dc96:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dc9a:	ec4b ab16 	vmov	d6, sl, fp
 800dc9e:	4a29      	ldr	r2, [pc, #164]	@ (800dd44 <_strtod_l+0x58c>)
 800dca0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dca4:	ee17 1a90 	vmov	r1, s15
 800dca8:	400a      	ands	r2, r1
 800dcaa:	4282      	cmp	r2, r0
 800dcac:	ec5b ab17 	vmov	sl, fp, d7
 800dcb0:	d898      	bhi.n	800dbe4 <_strtod_l+0x42c>
 800dcb2:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800dcb6:	4282      	cmp	r2, r0
 800dcb8:	bf86      	itte	hi
 800dcba:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800dd48 <_strtod_l+0x590>
 800dcbe:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800dcc2:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	9206      	str	r2, [sp, #24]
 800dcca:	e076      	b.n	800ddba <_strtod_l+0x602>
 800dccc:	f012 0f01 	tst.w	r2, #1
 800dcd0:	d004      	beq.n	800dcdc <_strtod_l+0x524>
 800dcd2:	ed96 6b00 	vldr	d6, [r6]
 800dcd6:	2001      	movs	r0, #1
 800dcd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dcdc:	3101      	adds	r1, #1
 800dcde:	1052      	asrs	r2, r2, #1
 800dce0:	3608      	adds	r6, #8
 800dce2:	e7cd      	b.n	800dc80 <_strtod_l+0x4c8>
 800dce4:	d0ef      	beq.n	800dcc6 <_strtod_l+0x50e>
 800dce6:	4252      	negs	r2, r2
 800dce8:	f012 000f 	ands.w	r0, r2, #15
 800dcec:	d00a      	beq.n	800dd04 <_strtod_l+0x54c>
 800dcee:	4912      	ldr	r1, [pc, #72]	@ (800dd38 <_strtod_l+0x580>)
 800dcf0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dcf4:	ed91 7b00 	vldr	d7, [r1]
 800dcf8:	ec4b ab16 	vmov	d6, sl, fp
 800dcfc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dd00:	ec5b ab17 	vmov	sl, fp, d7
 800dd04:	1112      	asrs	r2, r2, #4
 800dd06:	d0de      	beq.n	800dcc6 <_strtod_l+0x50e>
 800dd08:	2a1f      	cmp	r2, #31
 800dd0a:	dd1f      	ble.n	800dd4c <_strtod_l+0x594>
 800dd0c:	2400      	movs	r4, #0
 800dd0e:	4625      	mov	r5, r4
 800dd10:	9407      	str	r4, [sp, #28]
 800dd12:	4626      	mov	r6, r4
 800dd14:	9a05      	ldr	r2, [sp, #20]
 800dd16:	2322      	movs	r3, #34	@ 0x22
 800dd18:	f04f 0a00 	mov.w	sl, #0
 800dd1c:	f04f 0b00 	mov.w	fp, #0
 800dd20:	6013      	str	r3, [r2, #0]
 800dd22:	e76a      	b.n	800dbfa <_strtod_l+0x442>
 800dd24:	0800f845 	.word	0x0800f845
 800dd28:	0800fb10 	.word	0x0800fb10
 800dd2c:	0800f83d 	.word	0x0800f83d
 800dd30:	0800f874 	.word	0x0800f874
 800dd34:	0800f9ad 	.word	0x0800f9ad
 800dd38:	0800fa48 	.word	0x0800fa48
 800dd3c:	0800fa20 	.word	0x0800fa20
 800dd40:	7ca00000 	.word	0x7ca00000
 800dd44:	7ff00000 	.word	0x7ff00000
 800dd48:	7fefffff 	.word	0x7fefffff
 800dd4c:	f012 0110 	ands.w	r1, r2, #16
 800dd50:	bf18      	it	ne
 800dd52:	216a      	movne	r1, #106	@ 0x6a
 800dd54:	9106      	str	r1, [sp, #24]
 800dd56:	ec4b ab17 	vmov	d7, sl, fp
 800dd5a:	49af      	ldr	r1, [pc, #700]	@ (800e018 <_strtod_l+0x860>)
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	07d6      	lsls	r6, r2, #31
 800dd60:	d504      	bpl.n	800dd6c <_strtod_l+0x5b4>
 800dd62:	ed91 6b00 	vldr	d6, [r1]
 800dd66:	2001      	movs	r0, #1
 800dd68:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd6c:	1052      	asrs	r2, r2, #1
 800dd6e:	f101 0108 	add.w	r1, r1, #8
 800dd72:	d1f4      	bne.n	800dd5e <_strtod_l+0x5a6>
 800dd74:	b108      	cbz	r0, 800dd7a <_strtod_l+0x5c2>
 800dd76:	ec5b ab17 	vmov	sl, fp, d7
 800dd7a:	9a06      	ldr	r2, [sp, #24]
 800dd7c:	b1b2      	cbz	r2, 800ddac <_strtod_l+0x5f4>
 800dd7e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800dd82:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800dd86:	2a00      	cmp	r2, #0
 800dd88:	4658      	mov	r0, fp
 800dd8a:	dd0f      	ble.n	800ddac <_strtod_l+0x5f4>
 800dd8c:	2a1f      	cmp	r2, #31
 800dd8e:	dd55      	ble.n	800de3c <_strtod_l+0x684>
 800dd90:	2a34      	cmp	r2, #52	@ 0x34
 800dd92:	bfde      	ittt	le
 800dd94:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 800dd98:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800dd9c:	408a      	lslle	r2, r1
 800dd9e:	f04f 0a00 	mov.w	sl, #0
 800dda2:	bfcc      	ite	gt
 800dda4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dda8:	ea02 0b00 	andle.w	fp, r2, r0
 800ddac:	ec4b ab17 	vmov	d7, sl, fp
 800ddb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ddb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb8:	d0a8      	beq.n	800dd0c <_strtod_l+0x554>
 800ddba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ddbc:	9805      	ldr	r0, [sp, #20]
 800ddbe:	f8cd 9000 	str.w	r9, [sp]
 800ddc2:	462a      	mov	r2, r5
 800ddc4:	f7ff f8de 	bl	800cf84 <__s2b>
 800ddc8:	9007      	str	r0, [sp, #28]
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	f43f af0a 	beq.w	800dbe4 <_strtod_l+0x42c>
 800ddd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddd2:	1b3f      	subs	r7, r7, r4
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	bfb4      	ite	lt
 800ddd8:	463b      	movlt	r3, r7
 800ddda:	2300      	movge	r3, #0
 800dddc:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde0:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800e008 <_strtod_l+0x850>
 800dde4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dde8:	2400      	movs	r4, #0
 800ddea:	930d      	str	r3, [sp, #52]	@ 0x34
 800ddec:	4625      	mov	r5, r4
 800ddee:	9b07      	ldr	r3, [sp, #28]
 800ddf0:	9805      	ldr	r0, [sp, #20]
 800ddf2:	6859      	ldr	r1, [r3, #4]
 800ddf4:	f7ff f81e 	bl	800ce34 <_Balloc>
 800ddf8:	4606      	mov	r6, r0
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	f43f aef6 	beq.w	800dbec <_strtod_l+0x434>
 800de00:	9b07      	ldr	r3, [sp, #28]
 800de02:	691a      	ldr	r2, [r3, #16]
 800de04:	ec4b ab19 	vmov	d9, sl, fp
 800de08:	3202      	adds	r2, #2
 800de0a:	f103 010c 	add.w	r1, r3, #12
 800de0e:	0092      	lsls	r2, r2, #2
 800de10:	300c      	adds	r0, #12
 800de12:	f000 ff03 	bl	800ec1c <memcpy>
 800de16:	eeb0 0b49 	vmov.f64	d0, d9
 800de1a:	9805      	ldr	r0, [sp, #20]
 800de1c:	aa14      	add	r2, sp, #80	@ 0x50
 800de1e:	a913      	add	r1, sp, #76	@ 0x4c
 800de20:	f7ff fbe4 	bl	800d5ec <__d2b>
 800de24:	9012      	str	r0, [sp, #72]	@ 0x48
 800de26:	2800      	cmp	r0, #0
 800de28:	f43f aee0 	beq.w	800dbec <_strtod_l+0x434>
 800de2c:	9805      	ldr	r0, [sp, #20]
 800de2e:	2101      	movs	r1, #1
 800de30:	f7ff f93e 	bl	800d0b0 <__i2b>
 800de34:	4605      	mov	r5, r0
 800de36:	b940      	cbnz	r0, 800de4a <_strtod_l+0x692>
 800de38:	2500      	movs	r5, #0
 800de3a:	e6d7      	b.n	800dbec <_strtod_l+0x434>
 800de3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800de40:	fa01 f202 	lsl.w	r2, r1, r2
 800de44:	ea02 0a0a 	and.w	sl, r2, sl
 800de48:	e7b0      	b.n	800ddac <_strtod_l+0x5f4>
 800de4a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800de4c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800de4e:	2f00      	cmp	r7, #0
 800de50:	bfab      	itete	ge
 800de52:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800de54:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800de56:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800de5a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800de5e:	bfac      	ite	ge
 800de60:	eb07 0903 	addge.w	r9, r7, r3
 800de64:	eba3 0807 	sublt.w	r8, r3, r7
 800de68:	9b06      	ldr	r3, [sp, #24]
 800de6a:	1aff      	subs	r7, r7, r3
 800de6c:	4417      	add	r7, r2
 800de6e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800de72:	4a6a      	ldr	r2, [pc, #424]	@ (800e01c <_strtod_l+0x864>)
 800de74:	3f01      	subs	r7, #1
 800de76:	4297      	cmp	r7, r2
 800de78:	da51      	bge.n	800df1e <_strtod_l+0x766>
 800de7a:	1bd1      	subs	r1, r2, r7
 800de7c:	291f      	cmp	r1, #31
 800de7e:	eba3 0301 	sub.w	r3, r3, r1
 800de82:	f04f 0201 	mov.w	r2, #1
 800de86:	dc3e      	bgt.n	800df06 <_strtod_l+0x74e>
 800de88:	408a      	lsls	r2, r1
 800de8a:	920c      	str	r2, [sp, #48]	@ 0x30
 800de8c:	2200      	movs	r2, #0
 800de8e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800de90:	eb09 0703 	add.w	r7, r9, r3
 800de94:	4498      	add	r8, r3
 800de96:	9b06      	ldr	r3, [sp, #24]
 800de98:	45b9      	cmp	r9, r7
 800de9a:	4498      	add	r8, r3
 800de9c:	464b      	mov	r3, r9
 800de9e:	bfa8      	it	ge
 800dea0:	463b      	movge	r3, r7
 800dea2:	4543      	cmp	r3, r8
 800dea4:	bfa8      	it	ge
 800dea6:	4643      	movge	r3, r8
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	bfc2      	ittt	gt
 800deac:	1aff      	subgt	r7, r7, r3
 800deae:	eba8 0803 	subgt.w	r8, r8, r3
 800deb2:	eba9 0903 	subgt.w	r9, r9, r3
 800deb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800deb8:	2b00      	cmp	r3, #0
 800deba:	dd16      	ble.n	800deea <_strtod_l+0x732>
 800debc:	4629      	mov	r1, r5
 800debe:	9805      	ldr	r0, [sp, #20]
 800dec0:	461a      	mov	r2, r3
 800dec2:	f7ff f9ad 	bl	800d220 <__pow5mult>
 800dec6:	4605      	mov	r5, r0
 800dec8:	2800      	cmp	r0, #0
 800deca:	d0b5      	beq.n	800de38 <_strtod_l+0x680>
 800decc:	4601      	mov	r1, r0
 800dece:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ded0:	9805      	ldr	r0, [sp, #20]
 800ded2:	f7ff f903 	bl	800d0dc <__multiply>
 800ded6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ded8:	2800      	cmp	r0, #0
 800deda:	f43f ae87 	beq.w	800dbec <_strtod_l+0x434>
 800dede:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dee0:	9805      	ldr	r0, [sp, #20]
 800dee2:	f7fe ffe7 	bl	800ceb4 <_Bfree>
 800dee6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dee8:	9312      	str	r3, [sp, #72]	@ 0x48
 800deea:	2f00      	cmp	r7, #0
 800deec:	dc1b      	bgt.n	800df26 <_strtod_l+0x76e>
 800deee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def0:	2b00      	cmp	r3, #0
 800def2:	dd21      	ble.n	800df38 <_strtod_l+0x780>
 800def4:	4631      	mov	r1, r6
 800def6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800def8:	9805      	ldr	r0, [sp, #20]
 800defa:	f7ff f991 	bl	800d220 <__pow5mult>
 800defe:	4606      	mov	r6, r0
 800df00:	b9d0      	cbnz	r0, 800df38 <_strtod_l+0x780>
 800df02:	2600      	movs	r6, #0
 800df04:	e672      	b.n	800dbec <_strtod_l+0x434>
 800df06:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800df0a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800df0e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800df12:	37e2      	adds	r7, #226	@ 0xe2
 800df14:	fa02 f107 	lsl.w	r1, r2, r7
 800df18:	910b      	str	r1, [sp, #44]	@ 0x2c
 800df1a:	920c      	str	r2, [sp, #48]	@ 0x30
 800df1c:	e7b8      	b.n	800de90 <_strtod_l+0x6d8>
 800df1e:	2200      	movs	r2, #0
 800df20:	920b      	str	r2, [sp, #44]	@ 0x2c
 800df22:	2201      	movs	r2, #1
 800df24:	e7f9      	b.n	800df1a <_strtod_l+0x762>
 800df26:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800df28:	9805      	ldr	r0, [sp, #20]
 800df2a:	463a      	mov	r2, r7
 800df2c:	f7ff f9d2 	bl	800d2d4 <__lshift>
 800df30:	9012      	str	r0, [sp, #72]	@ 0x48
 800df32:	2800      	cmp	r0, #0
 800df34:	d1db      	bne.n	800deee <_strtod_l+0x736>
 800df36:	e659      	b.n	800dbec <_strtod_l+0x434>
 800df38:	f1b8 0f00 	cmp.w	r8, #0
 800df3c:	dd07      	ble.n	800df4e <_strtod_l+0x796>
 800df3e:	4631      	mov	r1, r6
 800df40:	9805      	ldr	r0, [sp, #20]
 800df42:	4642      	mov	r2, r8
 800df44:	f7ff f9c6 	bl	800d2d4 <__lshift>
 800df48:	4606      	mov	r6, r0
 800df4a:	2800      	cmp	r0, #0
 800df4c:	d0d9      	beq.n	800df02 <_strtod_l+0x74a>
 800df4e:	f1b9 0f00 	cmp.w	r9, #0
 800df52:	dd08      	ble.n	800df66 <_strtod_l+0x7ae>
 800df54:	4629      	mov	r1, r5
 800df56:	9805      	ldr	r0, [sp, #20]
 800df58:	464a      	mov	r2, r9
 800df5a:	f7ff f9bb 	bl	800d2d4 <__lshift>
 800df5e:	4605      	mov	r5, r0
 800df60:	2800      	cmp	r0, #0
 800df62:	f43f ae43 	beq.w	800dbec <_strtod_l+0x434>
 800df66:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800df68:	9805      	ldr	r0, [sp, #20]
 800df6a:	4632      	mov	r2, r6
 800df6c:	f7ff fa3a 	bl	800d3e4 <__mdiff>
 800df70:	4604      	mov	r4, r0
 800df72:	2800      	cmp	r0, #0
 800df74:	f43f ae3a 	beq.w	800dbec <_strtod_l+0x434>
 800df78:	2300      	movs	r3, #0
 800df7a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800df7e:	60c3      	str	r3, [r0, #12]
 800df80:	4629      	mov	r1, r5
 800df82:	f7ff fa13 	bl	800d3ac <__mcmp>
 800df86:	2800      	cmp	r0, #0
 800df88:	da4c      	bge.n	800e024 <_strtod_l+0x86c>
 800df8a:	ea58 080a 	orrs.w	r8, r8, sl
 800df8e:	d172      	bne.n	800e076 <_strtod_l+0x8be>
 800df90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df94:	2b00      	cmp	r3, #0
 800df96:	d16e      	bne.n	800e076 <_strtod_l+0x8be>
 800df98:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800df9c:	0d1b      	lsrs	r3, r3, #20
 800df9e:	051b      	lsls	r3, r3, #20
 800dfa0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dfa4:	d967      	bls.n	800e076 <_strtod_l+0x8be>
 800dfa6:	6963      	ldr	r3, [r4, #20]
 800dfa8:	b913      	cbnz	r3, 800dfb0 <_strtod_l+0x7f8>
 800dfaa:	6923      	ldr	r3, [r4, #16]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	dd62      	ble.n	800e076 <_strtod_l+0x8be>
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	9805      	ldr	r0, [sp, #20]
 800dfb6:	f7ff f98d 	bl	800d2d4 <__lshift>
 800dfba:	4629      	mov	r1, r5
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	f7ff f9f5 	bl	800d3ac <__mcmp>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	dd57      	ble.n	800e076 <_strtod_l+0x8be>
 800dfc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dfca:	9a06      	ldr	r2, [sp, #24]
 800dfcc:	0d1b      	lsrs	r3, r3, #20
 800dfce:	051b      	lsls	r3, r3, #20
 800dfd0:	2a00      	cmp	r2, #0
 800dfd2:	d06e      	beq.n	800e0b2 <_strtod_l+0x8fa>
 800dfd4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dfd8:	d86b      	bhi.n	800e0b2 <_strtod_l+0x8fa>
 800dfda:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dfde:	f67f ae99 	bls.w	800dd14 <_strtod_l+0x55c>
 800dfe2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800e010 <_strtod_l+0x858>
 800dfe6:	ec4b ab16 	vmov	d6, sl, fp
 800dfea:	4b0d      	ldr	r3, [pc, #52]	@ (800e020 <_strtod_l+0x868>)
 800dfec:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dff0:	ee17 2a90 	vmov	r2, s15
 800dff4:	4013      	ands	r3, r2
 800dff6:	ec5b ab17 	vmov	sl, fp, d7
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	f47f ae01 	bne.w	800dc02 <_strtod_l+0x44a>
 800e000:	9a05      	ldr	r2, [sp, #20]
 800e002:	2322      	movs	r3, #34	@ 0x22
 800e004:	6013      	str	r3, [r2, #0]
 800e006:	e5fc      	b.n	800dc02 <_strtod_l+0x44a>
 800e008:	ffc00000 	.word	0xffc00000
 800e00c:	41dfffff 	.word	0x41dfffff
 800e010:	00000000 	.word	0x00000000
 800e014:	39500000 	.word	0x39500000
 800e018:	0800fb38 	.word	0x0800fb38
 800e01c:	fffffc02 	.word	0xfffffc02
 800e020:	7ff00000 	.word	0x7ff00000
 800e024:	46d9      	mov	r9, fp
 800e026:	d15d      	bne.n	800e0e4 <_strtod_l+0x92c>
 800e028:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e02c:	f1b8 0f00 	cmp.w	r8, #0
 800e030:	d02a      	beq.n	800e088 <_strtod_l+0x8d0>
 800e032:	4aa9      	ldr	r2, [pc, #676]	@ (800e2d8 <_strtod_l+0xb20>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d12a      	bne.n	800e08e <_strtod_l+0x8d6>
 800e038:	9b06      	ldr	r3, [sp, #24]
 800e03a:	4652      	mov	r2, sl
 800e03c:	b1fb      	cbz	r3, 800e07e <_strtod_l+0x8c6>
 800e03e:	4ba7      	ldr	r3, [pc, #668]	@ (800e2dc <_strtod_l+0xb24>)
 800e040:	ea0b 0303 	and.w	r3, fp, r3
 800e044:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e048:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800e04c:	d81a      	bhi.n	800e084 <_strtod_l+0x8cc>
 800e04e:	0d1b      	lsrs	r3, r3, #20
 800e050:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e054:	fa01 f303 	lsl.w	r3, r1, r3
 800e058:	429a      	cmp	r2, r3
 800e05a:	d118      	bne.n	800e08e <_strtod_l+0x8d6>
 800e05c:	4ba0      	ldr	r3, [pc, #640]	@ (800e2e0 <_strtod_l+0xb28>)
 800e05e:	4599      	cmp	r9, r3
 800e060:	d102      	bne.n	800e068 <_strtod_l+0x8b0>
 800e062:	3201      	adds	r2, #1
 800e064:	f43f adc2 	beq.w	800dbec <_strtod_l+0x434>
 800e068:	4b9c      	ldr	r3, [pc, #624]	@ (800e2dc <_strtod_l+0xb24>)
 800e06a:	ea09 0303 	and.w	r3, r9, r3
 800e06e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e072:	f04f 0a00 	mov.w	sl, #0
 800e076:	9b06      	ldr	r3, [sp, #24]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1b2      	bne.n	800dfe2 <_strtod_l+0x82a>
 800e07c:	e5c1      	b.n	800dc02 <_strtod_l+0x44a>
 800e07e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e082:	e7e9      	b.n	800e058 <_strtod_l+0x8a0>
 800e084:	460b      	mov	r3, r1
 800e086:	e7e7      	b.n	800e058 <_strtod_l+0x8a0>
 800e088:	ea53 030a 	orrs.w	r3, r3, sl
 800e08c:	d09b      	beq.n	800dfc6 <_strtod_l+0x80e>
 800e08e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e090:	b1c3      	cbz	r3, 800e0c4 <_strtod_l+0x90c>
 800e092:	ea13 0f09 	tst.w	r3, r9
 800e096:	d0ee      	beq.n	800e076 <_strtod_l+0x8be>
 800e098:	9a06      	ldr	r2, [sp, #24]
 800e09a:	4650      	mov	r0, sl
 800e09c:	4659      	mov	r1, fp
 800e09e:	f1b8 0f00 	cmp.w	r8, #0
 800e0a2:	d013      	beq.n	800e0cc <_strtod_l+0x914>
 800e0a4:	f7ff fb6d 	bl	800d782 <sulp>
 800e0a8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e0ac:	ec5b ab17 	vmov	sl, fp, d7
 800e0b0:	e7e1      	b.n	800e076 <_strtod_l+0x8be>
 800e0b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e0b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e0ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e0be:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e0c2:	e7d8      	b.n	800e076 <_strtod_l+0x8be>
 800e0c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0c6:	ea13 0f0a 	tst.w	r3, sl
 800e0ca:	e7e4      	b.n	800e096 <_strtod_l+0x8de>
 800e0cc:	f7ff fb59 	bl	800d782 <sulp>
 800e0d0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e0d4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0dc:	ec5b ab10 	vmov	sl, fp, d0
 800e0e0:	d1c9      	bne.n	800e076 <_strtod_l+0x8be>
 800e0e2:	e617      	b.n	800dd14 <_strtod_l+0x55c>
 800e0e4:	4629      	mov	r1, r5
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f7ff fad8 	bl	800d69c <__ratio>
 800e0ec:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e0f0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f8:	d85d      	bhi.n	800e1b6 <_strtod_l+0x9fe>
 800e0fa:	f1b8 0f00 	cmp.w	r8, #0
 800e0fe:	d164      	bne.n	800e1ca <_strtod_l+0xa12>
 800e100:	f1ba 0f00 	cmp.w	sl, #0
 800e104:	d14b      	bne.n	800e19e <_strtod_l+0x9e6>
 800e106:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e10a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d160      	bne.n	800e1d4 <_strtod_l+0xa1c>
 800e112:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e116:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e11e:	d401      	bmi.n	800e124 <_strtod_l+0x96c>
 800e120:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e124:	eeb1 ab48 	vneg.f64	d10, d8
 800e128:	486c      	ldr	r0, [pc, #432]	@ (800e2dc <_strtod_l+0xb24>)
 800e12a:	496e      	ldr	r1, [pc, #440]	@ (800e2e4 <_strtod_l+0xb2c>)
 800e12c:	ea09 0700 	and.w	r7, r9, r0
 800e130:	428f      	cmp	r7, r1
 800e132:	ec53 2b1a 	vmov	r2, r3, d10
 800e136:	d17d      	bne.n	800e234 <_strtod_l+0xa7c>
 800e138:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e13c:	ec4b ab1c 	vmov	d12, sl, fp
 800e140:	eeb0 0b4c 	vmov.f64	d0, d12
 800e144:	f7ff f9e2 	bl	800d50c <__ulp>
 800e148:	4864      	ldr	r0, [pc, #400]	@ (800e2dc <_strtod_l+0xb24>)
 800e14a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e14e:	ee1c 3a90 	vmov	r3, s25
 800e152:	4a65      	ldr	r2, [pc, #404]	@ (800e2e8 <_strtod_l+0xb30>)
 800e154:	ea03 0100 	and.w	r1, r3, r0
 800e158:	4291      	cmp	r1, r2
 800e15a:	ec5b ab1c 	vmov	sl, fp, d12
 800e15e:	d93c      	bls.n	800e1da <_strtod_l+0xa22>
 800e160:	ee19 2a90 	vmov	r2, s19
 800e164:	4b5e      	ldr	r3, [pc, #376]	@ (800e2e0 <_strtod_l+0xb28>)
 800e166:	429a      	cmp	r2, r3
 800e168:	d104      	bne.n	800e174 <_strtod_l+0x9bc>
 800e16a:	ee19 3a10 	vmov	r3, s18
 800e16e:	3301      	adds	r3, #1
 800e170:	f43f ad3c 	beq.w	800dbec <_strtod_l+0x434>
 800e174:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800e2e0 <_strtod_l+0xb28>
 800e178:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e17c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e17e:	9805      	ldr	r0, [sp, #20]
 800e180:	f7fe fe98 	bl	800ceb4 <_Bfree>
 800e184:	9805      	ldr	r0, [sp, #20]
 800e186:	4631      	mov	r1, r6
 800e188:	f7fe fe94 	bl	800ceb4 <_Bfree>
 800e18c:	9805      	ldr	r0, [sp, #20]
 800e18e:	4629      	mov	r1, r5
 800e190:	f7fe fe90 	bl	800ceb4 <_Bfree>
 800e194:	9805      	ldr	r0, [sp, #20]
 800e196:	4621      	mov	r1, r4
 800e198:	f7fe fe8c 	bl	800ceb4 <_Bfree>
 800e19c:	e627      	b.n	800ddee <_strtod_l+0x636>
 800e19e:	f1ba 0f01 	cmp.w	sl, #1
 800e1a2:	d103      	bne.n	800e1ac <_strtod_l+0x9f4>
 800e1a4:	f1bb 0f00 	cmp.w	fp, #0
 800e1a8:	f43f adb4 	beq.w	800dd14 <_strtod_l+0x55c>
 800e1ac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e1b0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e1b4:	e7b8      	b.n	800e128 <_strtod_l+0x970>
 800e1b6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e1ba:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e1be:	f1b8 0f00 	cmp.w	r8, #0
 800e1c2:	d0af      	beq.n	800e124 <_strtod_l+0x96c>
 800e1c4:	eeb0 ab48 	vmov.f64	d10, d8
 800e1c8:	e7ae      	b.n	800e128 <_strtod_l+0x970>
 800e1ca:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e1ce:	eeb0 8b4a 	vmov.f64	d8, d10
 800e1d2:	e7a9      	b.n	800e128 <_strtod_l+0x970>
 800e1d4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e1d8:	e7a6      	b.n	800e128 <_strtod_l+0x970>
 800e1da:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e1de:	9b06      	ldr	r3, [sp, #24]
 800e1e0:	46d9      	mov	r9, fp
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1ca      	bne.n	800e17c <_strtod_l+0x9c4>
 800e1e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e1ea:	0d1b      	lsrs	r3, r3, #20
 800e1ec:	051b      	lsls	r3, r3, #20
 800e1ee:	429f      	cmp	r7, r3
 800e1f0:	d1c4      	bne.n	800e17c <_strtod_l+0x9c4>
 800e1f2:	ec51 0b18 	vmov	r0, r1, d8
 800e1f6:	f7f2 fa9f 	bl	8000738 <__aeabi_d2lz>
 800e1fa:	f7f2 fa57 	bl	80006ac <__aeabi_l2d>
 800e1fe:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e202:	ec41 0b17 	vmov	d7, r0, r1
 800e206:	ea49 090a 	orr.w	r9, r9, sl
 800e20a:	ea59 0908 	orrs.w	r9, r9, r8
 800e20e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e212:	d03c      	beq.n	800e28e <_strtod_l+0xad6>
 800e214:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e2c0 <_strtod_l+0xb08>
 800e218:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e220:	f53f acef 	bmi.w	800dc02 <_strtod_l+0x44a>
 800e224:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800e2c8 <_strtod_l+0xb10>
 800e228:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e230:	dda4      	ble.n	800e17c <_strtod_l+0x9c4>
 800e232:	e4e6      	b.n	800dc02 <_strtod_l+0x44a>
 800e234:	9906      	ldr	r1, [sp, #24]
 800e236:	b1e1      	cbz	r1, 800e272 <_strtod_l+0xaba>
 800e238:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e23c:	d819      	bhi.n	800e272 <_strtod_l+0xaba>
 800e23e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e246:	d811      	bhi.n	800e26c <_strtod_l+0xab4>
 800e248:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e24c:	ee18 3a10 	vmov	r3, s16
 800e250:	2b01      	cmp	r3, #1
 800e252:	bf38      	it	cc
 800e254:	2301      	movcc	r3, #1
 800e256:	ee08 3a10 	vmov	s16, r3
 800e25a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e25e:	f1b8 0f00 	cmp.w	r8, #0
 800e262:	d111      	bne.n	800e288 <_strtod_l+0xad0>
 800e264:	eeb1 7b48 	vneg.f64	d7, d8
 800e268:	ec53 2b17 	vmov	r2, r3, d7
 800e26c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e270:	1bcb      	subs	r3, r1, r7
 800e272:	eeb0 0b49 	vmov.f64	d0, d9
 800e276:	ec43 2b1a 	vmov	d10, r2, r3
 800e27a:	f7ff f947 	bl	800d50c <__ulp>
 800e27e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800e282:	ec5b ab19 	vmov	sl, fp, d9
 800e286:	e7aa      	b.n	800e1de <_strtod_l+0xa26>
 800e288:	eeb0 7b48 	vmov.f64	d7, d8
 800e28c:	e7ec      	b.n	800e268 <_strtod_l+0xab0>
 800e28e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e2d0 <_strtod_l+0xb18>
 800e292:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29a:	f57f af6f 	bpl.w	800e17c <_strtod_l+0x9c4>
 800e29e:	e4b0      	b.n	800dc02 <_strtod_l+0x44a>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	9308      	str	r3, [sp, #32]
 800e2a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e2a8:	6013      	str	r3, [r2, #0]
 800e2aa:	f7ff bac4 	b.w	800d836 <_strtod_l+0x7e>
 800e2ae:	2a65      	cmp	r2, #101	@ 0x65
 800e2b0:	f43f abbf 	beq.w	800da32 <_strtod_l+0x27a>
 800e2b4:	2a45      	cmp	r2, #69	@ 0x45
 800e2b6:	f43f abbc 	beq.w	800da32 <_strtod_l+0x27a>
 800e2ba:	2101      	movs	r1, #1
 800e2bc:	f7ff bbf4 	b.w	800daa8 <_strtod_l+0x2f0>
 800e2c0:	94a03595 	.word	0x94a03595
 800e2c4:	3fdfffff 	.word	0x3fdfffff
 800e2c8:	35afe535 	.word	0x35afe535
 800e2cc:	3fe00000 	.word	0x3fe00000
 800e2d0:	94a03595 	.word	0x94a03595
 800e2d4:	3fcfffff 	.word	0x3fcfffff
 800e2d8:	000fffff 	.word	0x000fffff
 800e2dc:	7ff00000 	.word	0x7ff00000
 800e2e0:	7fefffff 	.word	0x7fefffff
 800e2e4:	7fe00000 	.word	0x7fe00000
 800e2e8:	7c9fffff 	.word	0x7c9fffff

0800e2ec <_strtod_r>:
 800e2ec:	4b01      	ldr	r3, [pc, #4]	@ (800e2f4 <_strtod_r+0x8>)
 800e2ee:	f7ff ba63 	b.w	800d7b8 <_strtod_l>
 800e2f2:	bf00      	nop
 800e2f4:	2400006c 	.word	0x2400006c

0800e2f8 <_strtol_l.isra.0>:
 800e2f8:	2b24      	cmp	r3, #36	@ 0x24
 800e2fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2fe:	4686      	mov	lr, r0
 800e300:	4690      	mov	r8, r2
 800e302:	d801      	bhi.n	800e308 <_strtol_l.isra.0+0x10>
 800e304:	2b01      	cmp	r3, #1
 800e306:	d106      	bne.n	800e316 <_strtol_l.isra.0+0x1e>
 800e308:	f7fd fe7a 	bl	800c000 <__errno>
 800e30c:	2316      	movs	r3, #22
 800e30e:	6003      	str	r3, [r0, #0]
 800e310:	2000      	movs	r0, #0
 800e312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e316:	4834      	ldr	r0, [pc, #208]	@ (800e3e8 <_strtol_l.isra.0+0xf0>)
 800e318:	460d      	mov	r5, r1
 800e31a:	462a      	mov	r2, r5
 800e31c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e320:	5d06      	ldrb	r6, [r0, r4]
 800e322:	f016 0608 	ands.w	r6, r6, #8
 800e326:	d1f8      	bne.n	800e31a <_strtol_l.isra.0+0x22>
 800e328:	2c2d      	cmp	r4, #45	@ 0x2d
 800e32a:	d110      	bne.n	800e34e <_strtol_l.isra.0+0x56>
 800e32c:	782c      	ldrb	r4, [r5, #0]
 800e32e:	2601      	movs	r6, #1
 800e330:	1c95      	adds	r5, r2, #2
 800e332:	f033 0210 	bics.w	r2, r3, #16
 800e336:	d115      	bne.n	800e364 <_strtol_l.isra.0+0x6c>
 800e338:	2c30      	cmp	r4, #48	@ 0x30
 800e33a:	d10d      	bne.n	800e358 <_strtol_l.isra.0+0x60>
 800e33c:	782a      	ldrb	r2, [r5, #0]
 800e33e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e342:	2a58      	cmp	r2, #88	@ 0x58
 800e344:	d108      	bne.n	800e358 <_strtol_l.isra.0+0x60>
 800e346:	786c      	ldrb	r4, [r5, #1]
 800e348:	3502      	adds	r5, #2
 800e34a:	2310      	movs	r3, #16
 800e34c:	e00a      	b.n	800e364 <_strtol_l.isra.0+0x6c>
 800e34e:	2c2b      	cmp	r4, #43	@ 0x2b
 800e350:	bf04      	itt	eq
 800e352:	782c      	ldrbeq	r4, [r5, #0]
 800e354:	1c95      	addeq	r5, r2, #2
 800e356:	e7ec      	b.n	800e332 <_strtol_l.isra.0+0x3a>
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d1f6      	bne.n	800e34a <_strtol_l.isra.0+0x52>
 800e35c:	2c30      	cmp	r4, #48	@ 0x30
 800e35e:	bf14      	ite	ne
 800e360:	230a      	movne	r3, #10
 800e362:	2308      	moveq	r3, #8
 800e364:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e368:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800e36c:	2200      	movs	r2, #0
 800e36e:	fbbc f9f3 	udiv	r9, ip, r3
 800e372:	4610      	mov	r0, r2
 800e374:	fb03 ca19 	mls	sl, r3, r9, ip
 800e378:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e37c:	2f09      	cmp	r7, #9
 800e37e:	d80f      	bhi.n	800e3a0 <_strtol_l.isra.0+0xa8>
 800e380:	463c      	mov	r4, r7
 800e382:	42a3      	cmp	r3, r4
 800e384:	dd1b      	ble.n	800e3be <_strtol_l.isra.0+0xc6>
 800e386:	1c57      	adds	r7, r2, #1
 800e388:	d007      	beq.n	800e39a <_strtol_l.isra.0+0xa2>
 800e38a:	4581      	cmp	r9, r0
 800e38c:	d314      	bcc.n	800e3b8 <_strtol_l.isra.0+0xc0>
 800e38e:	d101      	bne.n	800e394 <_strtol_l.isra.0+0x9c>
 800e390:	45a2      	cmp	sl, r4
 800e392:	db11      	blt.n	800e3b8 <_strtol_l.isra.0+0xc0>
 800e394:	fb00 4003 	mla	r0, r0, r3, r4
 800e398:	2201      	movs	r2, #1
 800e39a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e39e:	e7eb      	b.n	800e378 <_strtol_l.isra.0+0x80>
 800e3a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e3a4:	2f19      	cmp	r7, #25
 800e3a6:	d801      	bhi.n	800e3ac <_strtol_l.isra.0+0xb4>
 800e3a8:	3c37      	subs	r4, #55	@ 0x37
 800e3aa:	e7ea      	b.n	800e382 <_strtol_l.isra.0+0x8a>
 800e3ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e3b0:	2f19      	cmp	r7, #25
 800e3b2:	d804      	bhi.n	800e3be <_strtol_l.isra.0+0xc6>
 800e3b4:	3c57      	subs	r4, #87	@ 0x57
 800e3b6:	e7e4      	b.n	800e382 <_strtol_l.isra.0+0x8a>
 800e3b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3bc:	e7ed      	b.n	800e39a <_strtol_l.isra.0+0xa2>
 800e3be:	1c53      	adds	r3, r2, #1
 800e3c0:	d108      	bne.n	800e3d4 <_strtol_l.isra.0+0xdc>
 800e3c2:	2322      	movs	r3, #34	@ 0x22
 800e3c4:	f8ce 3000 	str.w	r3, [lr]
 800e3c8:	4660      	mov	r0, ip
 800e3ca:	f1b8 0f00 	cmp.w	r8, #0
 800e3ce:	d0a0      	beq.n	800e312 <_strtol_l.isra.0+0x1a>
 800e3d0:	1e69      	subs	r1, r5, #1
 800e3d2:	e006      	b.n	800e3e2 <_strtol_l.isra.0+0xea>
 800e3d4:	b106      	cbz	r6, 800e3d8 <_strtol_l.isra.0+0xe0>
 800e3d6:	4240      	negs	r0, r0
 800e3d8:	f1b8 0f00 	cmp.w	r8, #0
 800e3dc:	d099      	beq.n	800e312 <_strtol_l.isra.0+0x1a>
 800e3de:	2a00      	cmp	r2, #0
 800e3e0:	d1f6      	bne.n	800e3d0 <_strtol_l.isra.0+0xd8>
 800e3e2:	f8c8 1000 	str.w	r1, [r8]
 800e3e6:	e794      	b.n	800e312 <_strtol_l.isra.0+0x1a>
 800e3e8:	0800fb61 	.word	0x0800fb61

0800e3ec <_strtol_r>:
 800e3ec:	f7ff bf84 	b.w	800e2f8 <_strtol_l.isra.0>

0800e3f0 <__ssputs_r>:
 800e3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f4:	688e      	ldr	r6, [r1, #8]
 800e3f6:	461f      	mov	r7, r3
 800e3f8:	42be      	cmp	r6, r7
 800e3fa:	680b      	ldr	r3, [r1, #0]
 800e3fc:	4682      	mov	sl, r0
 800e3fe:	460c      	mov	r4, r1
 800e400:	4690      	mov	r8, r2
 800e402:	d82d      	bhi.n	800e460 <__ssputs_r+0x70>
 800e404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e408:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e40c:	d026      	beq.n	800e45c <__ssputs_r+0x6c>
 800e40e:	6965      	ldr	r5, [r4, #20]
 800e410:	6909      	ldr	r1, [r1, #16]
 800e412:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e416:	eba3 0901 	sub.w	r9, r3, r1
 800e41a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e41e:	1c7b      	adds	r3, r7, #1
 800e420:	444b      	add	r3, r9
 800e422:	106d      	asrs	r5, r5, #1
 800e424:	429d      	cmp	r5, r3
 800e426:	bf38      	it	cc
 800e428:	461d      	movcc	r5, r3
 800e42a:	0553      	lsls	r3, r2, #21
 800e42c:	d527      	bpl.n	800e47e <__ssputs_r+0x8e>
 800e42e:	4629      	mov	r1, r5
 800e430:	f7fe fc74 	bl	800cd1c <_malloc_r>
 800e434:	4606      	mov	r6, r0
 800e436:	b360      	cbz	r0, 800e492 <__ssputs_r+0xa2>
 800e438:	6921      	ldr	r1, [r4, #16]
 800e43a:	464a      	mov	r2, r9
 800e43c:	f000 fbee 	bl	800ec1c <memcpy>
 800e440:	89a3      	ldrh	r3, [r4, #12]
 800e442:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e44a:	81a3      	strh	r3, [r4, #12]
 800e44c:	6126      	str	r6, [r4, #16]
 800e44e:	6165      	str	r5, [r4, #20]
 800e450:	444e      	add	r6, r9
 800e452:	eba5 0509 	sub.w	r5, r5, r9
 800e456:	6026      	str	r6, [r4, #0]
 800e458:	60a5      	str	r5, [r4, #8]
 800e45a:	463e      	mov	r6, r7
 800e45c:	42be      	cmp	r6, r7
 800e45e:	d900      	bls.n	800e462 <__ssputs_r+0x72>
 800e460:	463e      	mov	r6, r7
 800e462:	6820      	ldr	r0, [r4, #0]
 800e464:	4632      	mov	r2, r6
 800e466:	4641      	mov	r1, r8
 800e468:	f000 fb9c 	bl	800eba4 <memmove>
 800e46c:	68a3      	ldr	r3, [r4, #8]
 800e46e:	1b9b      	subs	r3, r3, r6
 800e470:	60a3      	str	r3, [r4, #8]
 800e472:	6823      	ldr	r3, [r4, #0]
 800e474:	4433      	add	r3, r6
 800e476:	6023      	str	r3, [r4, #0]
 800e478:	2000      	movs	r0, #0
 800e47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47e:	462a      	mov	r2, r5
 800e480:	f000 ff5f 	bl	800f342 <_realloc_r>
 800e484:	4606      	mov	r6, r0
 800e486:	2800      	cmp	r0, #0
 800e488:	d1e0      	bne.n	800e44c <__ssputs_r+0x5c>
 800e48a:	6921      	ldr	r1, [r4, #16]
 800e48c:	4650      	mov	r0, sl
 800e48e:	f7fe fbd1 	bl	800cc34 <_free_r>
 800e492:	230c      	movs	r3, #12
 800e494:	f8ca 3000 	str.w	r3, [sl]
 800e498:	89a3      	ldrh	r3, [r4, #12]
 800e49a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e49e:	81a3      	strh	r3, [r4, #12]
 800e4a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4a4:	e7e9      	b.n	800e47a <__ssputs_r+0x8a>
	...

0800e4a8 <_svfiprintf_r>:
 800e4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ac:	4698      	mov	r8, r3
 800e4ae:	898b      	ldrh	r3, [r1, #12]
 800e4b0:	061b      	lsls	r3, r3, #24
 800e4b2:	b09d      	sub	sp, #116	@ 0x74
 800e4b4:	4607      	mov	r7, r0
 800e4b6:	460d      	mov	r5, r1
 800e4b8:	4614      	mov	r4, r2
 800e4ba:	d510      	bpl.n	800e4de <_svfiprintf_r+0x36>
 800e4bc:	690b      	ldr	r3, [r1, #16]
 800e4be:	b973      	cbnz	r3, 800e4de <_svfiprintf_r+0x36>
 800e4c0:	2140      	movs	r1, #64	@ 0x40
 800e4c2:	f7fe fc2b 	bl	800cd1c <_malloc_r>
 800e4c6:	6028      	str	r0, [r5, #0]
 800e4c8:	6128      	str	r0, [r5, #16]
 800e4ca:	b930      	cbnz	r0, 800e4da <_svfiprintf_r+0x32>
 800e4cc:	230c      	movs	r3, #12
 800e4ce:	603b      	str	r3, [r7, #0]
 800e4d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4d4:	b01d      	add	sp, #116	@ 0x74
 800e4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4da:	2340      	movs	r3, #64	@ 0x40
 800e4dc:	616b      	str	r3, [r5, #20]
 800e4de:	2300      	movs	r3, #0
 800e4e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4e2:	2320      	movs	r3, #32
 800e4e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4ec:	2330      	movs	r3, #48	@ 0x30
 800e4ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e68c <_svfiprintf_r+0x1e4>
 800e4f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4f6:	f04f 0901 	mov.w	r9, #1
 800e4fa:	4623      	mov	r3, r4
 800e4fc:	469a      	mov	sl, r3
 800e4fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e502:	b10a      	cbz	r2, 800e508 <_svfiprintf_r+0x60>
 800e504:	2a25      	cmp	r2, #37	@ 0x25
 800e506:	d1f9      	bne.n	800e4fc <_svfiprintf_r+0x54>
 800e508:	ebba 0b04 	subs.w	fp, sl, r4
 800e50c:	d00b      	beq.n	800e526 <_svfiprintf_r+0x7e>
 800e50e:	465b      	mov	r3, fp
 800e510:	4622      	mov	r2, r4
 800e512:	4629      	mov	r1, r5
 800e514:	4638      	mov	r0, r7
 800e516:	f7ff ff6b 	bl	800e3f0 <__ssputs_r>
 800e51a:	3001      	adds	r0, #1
 800e51c:	f000 80a7 	beq.w	800e66e <_svfiprintf_r+0x1c6>
 800e520:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e522:	445a      	add	r2, fp
 800e524:	9209      	str	r2, [sp, #36]	@ 0x24
 800e526:	f89a 3000 	ldrb.w	r3, [sl]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f000 809f 	beq.w	800e66e <_svfiprintf_r+0x1c6>
 800e530:	2300      	movs	r3, #0
 800e532:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e53a:	f10a 0a01 	add.w	sl, sl, #1
 800e53e:	9304      	str	r3, [sp, #16]
 800e540:	9307      	str	r3, [sp, #28]
 800e542:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e546:	931a      	str	r3, [sp, #104]	@ 0x68
 800e548:	4654      	mov	r4, sl
 800e54a:	2205      	movs	r2, #5
 800e54c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e550:	484e      	ldr	r0, [pc, #312]	@ (800e68c <_svfiprintf_r+0x1e4>)
 800e552:	f7f1 fec5 	bl	80002e0 <memchr>
 800e556:	9a04      	ldr	r2, [sp, #16]
 800e558:	b9d8      	cbnz	r0, 800e592 <_svfiprintf_r+0xea>
 800e55a:	06d0      	lsls	r0, r2, #27
 800e55c:	bf44      	itt	mi
 800e55e:	2320      	movmi	r3, #32
 800e560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e564:	0711      	lsls	r1, r2, #28
 800e566:	bf44      	itt	mi
 800e568:	232b      	movmi	r3, #43	@ 0x2b
 800e56a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e56e:	f89a 3000 	ldrb.w	r3, [sl]
 800e572:	2b2a      	cmp	r3, #42	@ 0x2a
 800e574:	d015      	beq.n	800e5a2 <_svfiprintf_r+0xfa>
 800e576:	9a07      	ldr	r2, [sp, #28]
 800e578:	4654      	mov	r4, sl
 800e57a:	2000      	movs	r0, #0
 800e57c:	f04f 0c0a 	mov.w	ip, #10
 800e580:	4621      	mov	r1, r4
 800e582:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e586:	3b30      	subs	r3, #48	@ 0x30
 800e588:	2b09      	cmp	r3, #9
 800e58a:	d94b      	bls.n	800e624 <_svfiprintf_r+0x17c>
 800e58c:	b1b0      	cbz	r0, 800e5bc <_svfiprintf_r+0x114>
 800e58e:	9207      	str	r2, [sp, #28]
 800e590:	e014      	b.n	800e5bc <_svfiprintf_r+0x114>
 800e592:	eba0 0308 	sub.w	r3, r0, r8
 800e596:	fa09 f303 	lsl.w	r3, r9, r3
 800e59a:	4313      	orrs	r3, r2
 800e59c:	9304      	str	r3, [sp, #16]
 800e59e:	46a2      	mov	sl, r4
 800e5a0:	e7d2      	b.n	800e548 <_svfiprintf_r+0xa0>
 800e5a2:	9b03      	ldr	r3, [sp, #12]
 800e5a4:	1d19      	adds	r1, r3, #4
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	9103      	str	r1, [sp, #12]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	bfbb      	ittet	lt
 800e5ae:	425b      	neglt	r3, r3
 800e5b0:	f042 0202 	orrlt.w	r2, r2, #2
 800e5b4:	9307      	strge	r3, [sp, #28]
 800e5b6:	9307      	strlt	r3, [sp, #28]
 800e5b8:	bfb8      	it	lt
 800e5ba:	9204      	strlt	r2, [sp, #16]
 800e5bc:	7823      	ldrb	r3, [r4, #0]
 800e5be:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5c0:	d10a      	bne.n	800e5d8 <_svfiprintf_r+0x130>
 800e5c2:	7863      	ldrb	r3, [r4, #1]
 800e5c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5c6:	d132      	bne.n	800e62e <_svfiprintf_r+0x186>
 800e5c8:	9b03      	ldr	r3, [sp, #12]
 800e5ca:	1d1a      	adds	r2, r3, #4
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	9203      	str	r2, [sp, #12]
 800e5d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5d4:	3402      	adds	r4, #2
 800e5d6:	9305      	str	r3, [sp, #20]
 800e5d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e69c <_svfiprintf_r+0x1f4>
 800e5dc:	7821      	ldrb	r1, [r4, #0]
 800e5de:	2203      	movs	r2, #3
 800e5e0:	4650      	mov	r0, sl
 800e5e2:	f7f1 fe7d 	bl	80002e0 <memchr>
 800e5e6:	b138      	cbz	r0, 800e5f8 <_svfiprintf_r+0x150>
 800e5e8:	9b04      	ldr	r3, [sp, #16]
 800e5ea:	eba0 000a 	sub.w	r0, r0, sl
 800e5ee:	2240      	movs	r2, #64	@ 0x40
 800e5f0:	4082      	lsls	r2, r0
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	3401      	adds	r4, #1
 800e5f6:	9304      	str	r3, [sp, #16]
 800e5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5fc:	4824      	ldr	r0, [pc, #144]	@ (800e690 <_svfiprintf_r+0x1e8>)
 800e5fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e602:	2206      	movs	r2, #6
 800e604:	f7f1 fe6c 	bl	80002e0 <memchr>
 800e608:	2800      	cmp	r0, #0
 800e60a:	d036      	beq.n	800e67a <_svfiprintf_r+0x1d2>
 800e60c:	4b21      	ldr	r3, [pc, #132]	@ (800e694 <_svfiprintf_r+0x1ec>)
 800e60e:	bb1b      	cbnz	r3, 800e658 <_svfiprintf_r+0x1b0>
 800e610:	9b03      	ldr	r3, [sp, #12]
 800e612:	3307      	adds	r3, #7
 800e614:	f023 0307 	bic.w	r3, r3, #7
 800e618:	3308      	adds	r3, #8
 800e61a:	9303      	str	r3, [sp, #12]
 800e61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e61e:	4433      	add	r3, r6
 800e620:	9309      	str	r3, [sp, #36]	@ 0x24
 800e622:	e76a      	b.n	800e4fa <_svfiprintf_r+0x52>
 800e624:	fb0c 3202 	mla	r2, ip, r2, r3
 800e628:	460c      	mov	r4, r1
 800e62a:	2001      	movs	r0, #1
 800e62c:	e7a8      	b.n	800e580 <_svfiprintf_r+0xd8>
 800e62e:	2300      	movs	r3, #0
 800e630:	3401      	adds	r4, #1
 800e632:	9305      	str	r3, [sp, #20]
 800e634:	4619      	mov	r1, r3
 800e636:	f04f 0c0a 	mov.w	ip, #10
 800e63a:	4620      	mov	r0, r4
 800e63c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e640:	3a30      	subs	r2, #48	@ 0x30
 800e642:	2a09      	cmp	r2, #9
 800e644:	d903      	bls.n	800e64e <_svfiprintf_r+0x1a6>
 800e646:	2b00      	cmp	r3, #0
 800e648:	d0c6      	beq.n	800e5d8 <_svfiprintf_r+0x130>
 800e64a:	9105      	str	r1, [sp, #20]
 800e64c:	e7c4      	b.n	800e5d8 <_svfiprintf_r+0x130>
 800e64e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e652:	4604      	mov	r4, r0
 800e654:	2301      	movs	r3, #1
 800e656:	e7f0      	b.n	800e63a <_svfiprintf_r+0x192>
 800e658:	ab03      	add	r3, sp, #12
 800e65a:	9300      	str	r3, [sp, #0]
 800e65c:	462a      	mov	r2, r5
 800e65e:	4b0e      	ldr	r3, [pc, #56]	@ (800e698 <_svfiprintf_r+0x1f0>)
 800e660:	a904      	add	r1, sp, #16
 800e662:	4638      	mov	r0, r7
 800e664:	f7fc fd94 	bl	800b190 <_printf_float>
 800e668:	1c42      	adds	r2, r0, #1
 800e66a:	4606      	mov	r6, r0
 800e66c:	d1d6      	bne.n	800e61c <_svfiprintf_r+0x174>
 800e66e:	89ab      	ldrh	r3, [r5, #12]
 800e670:	065b      	lsls	r3, r3, #25
 800e672:	f53f af2d 	bmi.w	800e4d0 <_svfiprintf_r+0x28>
 800e676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e678:	e72c      	b.n	800e4d4 <_svfiprintf_r+0x2c>
 800e67a:	ab03      	add	r3, sp, #12
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	462a      	mov	r2, r5
 800e680:	4b05      	ldr	r3, [pc, #20]	@ (800e698 <_svfiprintf_r+0x1f0>)
 800e682:	a904      	add	r1, sp, #16
 800e684:	4638      	mov	r0, r7
 800e686:	f7fd f80b 	bl	800b6a0 <_printf_i>
 800e68a:	e7ed      	b.n	800e668 <_svfiprintf_r+0x1c0>
 800e68c:	0800f959 	.word	0x0800f959
 800e690:	0800f963 	.word	0x0800f963
 800e694:	0800b191 	.word	0x0800b191
 800e698:	0800e3f1 	.word	0x0800e3f1
 800e69c:	0800f95f 	.word	0x0800f95f

0800e6a0 <__sfputc_r>:
 800e6a0:	6893      	ldr	r3, [r2, #8]
 800e6a2:	3b01      	subs	r3, #1
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	b410      	push	{r4}
 800e6a8:	6093      	str	r3, [r2, #8]
 800e6aa:	da08      	bge.n	800e6be <__sfputc_r+0x1e>
 800e6ac:	6994      	ldr	r4, [r2, #24]
 800e6ae:	42a3      	cmp	r3, r4
 800e6b0:	db01      	blt.n	800e6b6 <__sfputc_r+0x16>
 800e6b2:	290a      	cmp	r1, #10
 800e6b4:	d103      	bne.n	800e6be <__sfputc_r+0x1e>
 800e6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6ba:	f000 b9df 	b.w	800ea7c <__swbuf_r>
 800e6be:	6813      	ldr	r3, [r2, #0]
 800e6c0:	1c58      	adds	r0, r3, #1
 800e6c2:	6010      	str	r0, [r2, #0]
 800e6c4:	7019      	strb	r1, [r3, #0]
 800e6c6:	4608      	mov	r0, r1
 800e6c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6cc:	4770      	bx	lr

0800e6ce <__sfputs_r>:
 800e6ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d0:	4606      	mov	r6, r0
 800e6d2:	460f      	mov	r7, r1
 800e6d4:	4614      	mov	r4, r2
 800e6d6:	18d5      	adds	r5, r2, r3
 800e6d8:	42ac      	cmp	r4, r5
 800e6da:	d101      	bne.n	800e6e0 <__sfputs_r+0x12>
 800e6dc:	2000      	movs	r0, #0
 800e6de:	e007      	b.n	800e6f0 <__sfputs_r+0x22>
 800e6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6e4:	463a      	mov	r2, r7
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f7ff ffda 	bl	800e6a0 <__sfputc_r>
 800e6ec:	1c43      	adds	r3, r0, #1
 800e6ee:	d1f3      	bne.n	800e6d8 <__sfputs_r+0xa>
 800e6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6f4 <_vfiprintf_r>:
 800e6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f8:	460d      	mov	r5, r1
 800e6fa:	b09d      	sub	sp, #116	@ 0x74
 800e6fc:	4614      	mov	r4, r2
 800e6fe:	4698      	mov	r8, r3
 800e700:	4606      	mov	r6, r0
 800e702:	b118      	cbz	r0, 800e70c <_vfiprintf_r+0x18>
 800e704:	6a03      	ldr	r3, [r0, #32]
 800e706:	b90b      	cbnz	r3, 800e70c <_vfiprintf_r+0x18>
 800e708:	f7fd fb7a 	bl	800be00 <__sinit>
 800e70c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e70e:	07d9      	lsls	r1, r3, #31
 800e710:	d405      	bmi.n	800e71e <_vfiprintf_r+0x2a>
 800e712:	89ab      	ldrh	r3, [r5, #12]
 800e714:	059a      	lsls	r2, r3, #22
 800e716:	d402      	bmi.n	800e71e <_vfiprintf_r+0x2a>
 800e718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e71a:	f7fd fc9c 	bl	800c056 <__retarget_lock_acquire_recursive>
 800e71e:	89ab      	ldrh	r3, [r5, #12]
 800e720:	071b      	lsls	r3, r3, #28
 800e722:	d501      	bpl.n	800e728 <_vfiprintf_r+0x34>
 800e724:	692b      	ldr	r3, [r5, #16]
 800e726:	b99b      	cbnz	r3, 800e750 <_vfiprintf_r+0x5c>
 800e728:	4629      	mov	r1, r5
 800e72a:	4630      	mov	r0, r6
 800e72c:	f000 f9e4 	bl	800eaf8 <__swsetup_r>
 800e730:	b170      	cbz	r0, 800e750 <_vfiprintf_r+0x5c>
 800e732:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e734:	07dc      	lsls	r4, r3, #31
 800e736:	d504      	bpl.n	800e742 <_vfiprintf_r+0x4e>
 800e738:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e73c:	b01d      	add	sp, #116	@ 0x74
 800e73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e742:	89ab      	ldrh	r3, [r5, #12]
 800e744:	0598      	lsls	r0, r3, #22
 800e746:	d4f7      	bmi.n	800e738 <_vfiprintf_r+0x44>
 800e748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e74a:	f7fd fc85 	bl	800c058 <__retarget_lock_release_recursive>
 800e74e:	e7f3      	b.n	800e738 <_vfiprintf_r+0x44>
 800e750:	2300      	movs	r3, #0
 800e752:	9309      	str	r3, [sp, #36]	@ 0x24
 800e754:	2320      	movs	r3, #32
 800e756:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e75a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e75e:	2330      	movs	r3, #48	@ 0x30
 800e760:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e910 <_vfiprintf_r+0x21c>
 800e764:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e768:	f04f 0901 	mov.w	r9, #1
 800e76c:	4623      	mov	r3, r4
 800e76e:	469a      	mov	sl, r3
 800e770:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e774:	b10a      	cbz	r2, 800e77a <_vfiprintf_r+0x86>
 800e776:	2a25      	cmp	r2, #37	@ 0x25
 800e778:	d1f9      	bne.n	800e76e <_vfiprintf_r+0x7a>
 800e77a:	ebba 0b04 	subs.w	fp, sl, r4
 800e77e:	d00b      	beq.n	800e798 <_vfiprintf_r+0xa4>
 800e780:	465b      	mov	r3, fp
 800e782:	4622      	mov	r2, r4
 800e784:	4629      	mov	r1, r5
 800e786:	4630      	mov	r0, r6
 800e788:	f7ff ffa1 	bl	800e6ce <__sfputs_r>
 800e78c:	3001      	adds	r0, #1
 800e78e:	f000 80a7 	beq.w	800e8e0 <_vfiprintf_r+0x1ec>
 800e792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e794:	445a      	add	r2, fp
 800e796:	9209      	str	r2, [sp, #36]	@ 0x24
 800e798:	f89a 3000 	ldrb.w	r3, [sl]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 809f 	beq.w	800e8e0 <_vfiprintf_r+0x1ec>
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e7a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7ac:	f10a 0a01 	add.w	sl, sl, #1
 800e7b0:	9304      	str	r3, [sp, #16]
 800e7b2:	9307      	str	r3, [sp, #28]
 800e7b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e7b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800e7ba:	4654      	mov	r4, sl
 800e7bc:	2205      	movs	r2, #5
 800e7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7c2:	4853      	ldr	r0, [pc, #332]	@ (800e910 <_vfiprintf_r+0x21c>)
 800e7c4:	f7f1 fd8c 	bl	80002e0 <memchr>
 800e7c8:	9a04      	ldr	r2, [sp, #16]
 800e7ca:	b9d8      	cbnz	r0, 800e804 <_vfiprintf_r+0x110>
 800e7cc:	06d1      	lsls	r1, r2, #27
 800e7ce:	bf44      	itt	mi
 800e7d0:	2320      	movmi	r3, #32
 800e7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7d6:	0713      	lsls	r3, r2, #28
 800e7d8:	bf44      	itt	mi
 800e7da:	232b      	movmi	r3, #43	@ 0x2b
 800e7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e7e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7e6:	d015      	beq.n	800e814 <_vfiprintf_r+0x120>
 800e7e8:	9a07      	ldr	r2, [sp, #28]
 800e7ea:	4654      	mov	r4, sl
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	f04f 0c0a 	mov.w	ip, #10
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7f8:	3b30      	subs	r3, #48	@ 0x30
 800e7fa:	2b09      	cmp	r3, #9
 800e7fc:	d94b      	bls.n	800e896 <_vfiprintf_r+0x1a2>
 800e7fe:	b1b0      	cbz	r0, 800e82e <_vfiprintf_r+0x13a>
 800e800:	9207      	str	r2, [sp, #28]
 800e802:	e014      	b.n	800e82e <_vfiprintf_r+0x13a>
 800e804:	eba0 0308 	sub.w	r3, r0, r8
 800e808:	fa09 f303 	lsl.w	r3, r9, r3
 800e80c:	4313      	orrs	r3, r2
 800e80e:	9304      	str	r3, [sp, #16]
 800e810:	46a2      	mov	sl, r4
 800e812:	e7d2      	b.n	800e7ba <_vfiprintf_r+0xc6>
 800e814:	9b03      	ldr	r3, [sp, #12]
 800e816:	1d19      	adds	r1, r3, #4
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	9103      	str	r1, [sp, #12]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	bfbb      	ittet	lt
 800e820:	425b      	neglt	r3, r3
 800e822:	f042 0202 	orrlt.w	r2, r2, #2
 800e826:	9307      	strge	r3, [sp, #28]
 800e828:	9307      	strlt	r3, [sp, #28]
 800e82a:	bfb8      	it	lt
 800e82c:	9204      	strlt	r2, [sp, #16]
 800e82e:	7823      	ldrb	r3, [r4, #0]
 800e830:	2b2e      	cmp	r3, #46	@ 0x2e
 800e832:	d10a      	bne.n	800e84a <_vfiprintf_r+0x156>
 800e834:	7863      	ldrb	r3, [r4, #1]
 800e836:	2b2a      	cmp	r3, #42	@ 0x2a
 800e838:	d132      	bne.n	800e8a0 <_vfiprintf_r+0x1ac>
 800e83a:	9b03      	ldr	r3, [sp, #12]
 800e83c:	1d1a      	adds	r2, r3, #4
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	9203      	str	r2, [sp, #12]
 800e842:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e846:	3402      	adds	r4, #2
 800e848:	9305      	str	r3, [sp, #20]
 800e84a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e920 <_vfiprintf_r+0x22c>
 800e84e:	7821      	ldrb	r1, [r4, #0]
 800e850:	2203      	movs	r2, #3
 800e852:	4650      	mov	r0, sl
 800e854:	f7f1 fd44 	bl	80002e0 <memchr>
 800e858:	b138      	cbz	r0, 800e86a <_vfiprintf_r+0x176>
 800e85a:	9b04      	ldr	r3, [sp, #16]
 800e85c:	eba0 000a 	sub.w	r0, r0, sl
 800e860:	2240      	movs	r2, #64	@ 0x40
 800e862:	4082      	lsls	r2, r0
 800e864:	4313      	orrs	r3, r2
 800e866:	3401      	adds	r4, #1
 800e868:	9304      	str	r3, [sp, #16]
 800e86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e86e:	4829      	ldr	r0, [pc, #164]	@ (800e914 <_vfiprintf_r+0x220>)
 800e870:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e874:	2206      	movs	r2, #6
 800e876:	f7f1 fd33 	bl	80002e0 <memchr>
 800e87a:	2800      	cmp	r0, #0
 800e87c:	d03f      	beq.n	800e8fe <_vfiprintf_r+0x20a>
 800e87e:	4b26      	ldr	r3, [pc, #152]	@ (800e918 <_vfiprintf_r+0x224>)
 800e880:	bb1b      	cbnz	r3, 800e8ca <_vfiprintf_r+0x1d6>
 800e882:	9b03      	ldr	r3, [sp, #12]
 800e884:	3307      	adds	r3, #7
 800e886:	f023 0307 	bic.w	r3, r3, #7
 800e88a:	3308      	adds	r3, #8
 800e88c:	9303      	str	r3, [sp, #12]
 800e88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e890:	443b      	add	r3, r7
 800e892:	9309      	str	r3, [sp, #36]	@ 0x24
 800e894:	e76a      	b.n	800e76c <_vfiprintf_r+0x78>
 800e896:	fb0c 3202 	mla	r2, ip, r2, r3
 800e89a:	460c      	mov	r4, r1
 800e89c:	2001      	movs	r0, #1
 800e89e:	e7a8      	b.n	800e7f2 <_vfiprintf_r+0xfe>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	3401      	adds	r4, #1
 800e8a4:	9305      	str	r3, [sp, #20]
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	f04f 0c0a 	mov.w	ip, #10
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8b2:	3a30      	subs	r2, #48	@ 0x30
 800e8b4:	2a09      	cmp	r2, #9
 800e8b6:	d903      	bls.n	800e8c0 <_vfiprintf_r+0x1cc>
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d0c6      	beq.n	800e84a <_vfiprintf_r+0x156>
 800e8bc:	9105      	str	r1, [sp, #20]
 800e8be:	e7c4      	b.n	800e84a <_vfiprintf_r+0x156>
 800e8c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e7f0      	b.n	800e8ac <_vfiprintf_r+0x1b8>
 800e8ca:	ab03      	add	r3, sp, #12
 800e8cc:	9300      	str	r3, [sp, #0]
 800e8ce:	462a      	mov	r2, r5
 800e8d0:	4b12      	ldr	r3, [pc, #72]	@ (800e91c <_vfiprintf_r+0x228>)
 800e8d2:	a904      	add	r1, sp, #16
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	f7fc fc5b 	bl	800b190 <_printf_float>
 800e8da:	4607      	mov	r7, r0
 800e8dc:	1c78      	adds	r0, r7, #1
 800e8de:	d1d6      	bne.n	800e88e <_vfiprintf_r+0x19a>
 800e8e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8e2:	07d9      	lsls	r1, r3, #31
 800e8e4:	d405      	bmi.n	800e8f2 <_vfiprintf_r+0x1fe>
 800e8e6:	89ab      	ldrh	r3, [r5, #12]
 800e8e8:	059a      	lsls	r2, r3, #22
 800e8ea:	d402      	bmi.n	800e8f2 <_vfiprintf_r+0x1fe>
 800e8ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8ee:	f7fd fbb3 	bl	800c058 <__retarget_lock_release_recursive>
 800e8f2:	89ab      	ldrh	r3, [r5, #12]
 800e8f4:	065b      	lsls	r3, r3, #25
 800e8f6:	f53f af1f 	bmi.w	800e738 <_vfiprintf_r+0x44>
 800e8fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8fc:	e71e      	b.n	800e73c <_vfiprintf_r+0x48>
 800e8fe:	ab03      	add	r3, sp, #12
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	462a      	mov	r2, r5
 800e904:	4b05      	ldr	r3, [pc, #20]	@ (800e91c <_vfiprintf_r+0x228>)
 800e906:	a904      	add	r1, sp, #16
 800e908:	4630      	mov	r0, r6
 800e90a:	f7fc fec9 	bl	800b6a0 <_printf_i>
 800e90e:	e7e4      	b.n	800e8da <_vfiprintf_r+0x1e6>
 800e910:	0800f959 	.word	0x0800f959
 800e914:	0800f963 	.word	0x0800f963
 800e918:	0800b191 	.word	0x0800b191
 800e91c:	0800e6cf 	.word	0x0800e6cf
 800e920:	0800f95f 	.word	0x0800f95f

0800e924 <__sflush_r>:
 800e924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e92c:	0716      	lsls	r6, r2, #28
 800e92e:	4605      	mov	r5, r0
 800e930:	460c      	mov	r4, r1
 800e932:	d454      	bmi.n	800e9de <__sflush_r+0xba>
 800e934:	684b      	ldr	r3, [r1, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	dc02      	bgt.n	800e940 <__sflush_r+0x1c>
 800e93a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	dd48      	ble.n	800e9d2 <__sflush_r+0xae>
 800e940:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e942:	2e00      	cmp	r6, #0
 800e944:	d045      	beq.n	800e9d2 <__sflush_r+0xae>
 800e946:	2300      	movs	r3, #0
 800e948:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e94c:	682f      	ldr	r7, [r5, #0]
 800e94e:	6a21      	ldr	r1, [r4, #32]
 800e950:	602b      	str	r3, [r5, #0]
 800e952:	d030      	beq.n	800e9b6 <__sflush_r+0x92>
 800e954:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e956:	89a3      	ldrh	r3, [r4, #12]
 800e958:	0759      	lsls	r1, r3, #29
 800e95a:	d505      	bpl.n	800e968 <__sflush_r+0x44>
 800e95c:	6863      	ldr	r3, [r4, #4]
 800e95e:	1ad2      	subs	r2, r2, r3
 800e960:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e962:	b10b      	cbz	r3, 800e968 <__sflush_r+0x44>
 800e964:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e966:	1ad2      	subs	r2, r2, r3
 800e968:	2300      	movs	r3, #0
 800e96a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e96c:	6a21      	ldr	r1, [r4, #32]
 800e96e:	4628      	mov	r0, r5
 800e970:	47b0      	blx	r6
 800e972:	1c43      	adds	r3, r0, #1
 800e974:	89a3      	ldrh	r3, [r4, #12]
 800e976:	d106      	bne.n	800e986 <__sflush_r+0x62>
 800e978:	6829      	ldr	r1, [r5, #0]
 800e97a:	291d      	cmp	r1, #29
 800e97c:	d82b      	bhi.n	800e9d6 <__sflush_r+0xb2>
 800e97e:	4a2a      	ldr	r2, [pc, #168]	@ (800ea28 <__sflush_r+0x104>)
 800e980:	40ca      	lsrs	r2, r1
 800e982:	07d6      	lsls	r6, r2, #31
 800e984:	d527      	bpl.n	800e9d6 <__sflush_r+0xb2>
 800e986:	2200      	movs	r2, #0
 800e988:	6062      	str	r2, [r4, #4]
 800e98a:	04d9      	lsls	r1, r3, #19
 800e98c:	6922      	ldr	r2, [r4, #16]
 800e98e:	6022      	str	r2, [r4, #0]
 800e990:	d504      	bpl.n	800e99c <__sflush_r+0x78>
 800e992:	1c42      	adds	r2, r0, #1
 800e994:	d101      	bne.n	800e99a <__sflush_r+0x76>
 800e996:	682b      	ldr	r3, [r5, #0]
 800e998:	b903      	cbnz	r3, 800e99c <__sflush_r+0x78>
 800e99a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e99c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e99e:	602f      	str	r7, [r5, #0]
 800e9a0:	b1b9      	cbz	r1, 800e9d2 <__sflush_r+0xae>
 800e9a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e9a6:	4299      	cmp	r1, r3
 800e9a8:	d002      	beq.n	800e9b0 <__sflush_r+0x8c>
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	f7fe f942 	bl	800cc34 <_free_r>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e9b4:	e00d      	b.n	800e9d2 <__sflush_r+0xae>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	47b0      	blx	r6
 800e9bc:	4602      	mov	r2, r0
 800e9be:	1c50      	adds	r0, r2, #1
 800e9c0:	d1c9      	bne.n	800e956 <__sflush_r+0x32>
 800e9c2:	682b      	ldr	r3, [r5, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d0c6      	beq.n	800e956 <__sflush_r+0x32>
 800e9c8:	2b1d      	cmp	r3, #29
 800e9ca:	d001      	beq.n	800e9d0 <__sflush_r+0xac>
 800e9cc:	2b16      	cmp	r3, #22
 800e9ce:	d11e      	bne.n	800ea0e <__sflush_r+0xea>
 800e9d0:	602f      	str	r7, [r5, #0]
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	e022      	b.n	800ea1c <__sflush_r+0xf8>
 800e9d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9da:	b21b      	sxth	r3, r3
 800e9dc:	e01b      	b.n	800ea16 <__sflush_r+0xf2>
 800e9de:	690f      	ldr	r7, [r1, #16]
 800e9e0:	2f00      	cmp	r7, #0
 800e9e2:	d0f6      	beq.n	800e9d2 <__sflush_r+0xae>
 800e9e4:	0793      	lsls	r3, r2, #30
 800e9e6:	680e      	ldr	r6, [r1, #0]
 800e9e8:	bf08      	it	eq
 800e9ea:	694b      	ldreq	r3, [r1, #20]
 800e9ec:	600f      	str	r7, [r1, #0]
 800e9ee:	bf18      	it	ne
 800e9f0:	2300      	movne	r3, #0
 800e9f2:	eba6 0807 	sub.w	r8, r6, r7
 800e9f6:	608b      	str	r3, [r1, #8]
 800e9f8:	f1b8 0f00 	cmp.w	r8, #0
 800e9fc:	dde9      	ble.n	800e9d2 <__sflush_r+0xae>
 800e9fe:	6a21      	ldr	r1, [r4, #32]
 800ea00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ea02:	4643      	mov	r3, r8
 800ea04:	463a      	mov	r2, r7
 800ea06:	4628      	mov	r0, r5
 800ea08:	47b0      	blx	r6
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	dc08      	bgt.n	800ea20 <__sflush_r+0xfc>
 800ea0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea16:	81a3      	strh	r3, [r4, #12]
 800ea18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea20:	4407      	add	r7, r0
 800ea22:	eba8 0800 	sub.w	r8, r8, r0
 800ea26:	e7e7      	b.n	800e9f8 <__sflush_r+0xd4>
 800ea28:	20400001 	.word	0x20400001

0800ea2c <_fflush_r>:
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	690b      	ldr	r3, [r1, #16]
 800ea30:	4605      	mov	r5, r0
 800ea32:	460c      	mov	r4, r1
 800ea34:	b913      	cbnz	r3, 800ea3c <_fflush_r+0x10>
 800ea36:	2500      	movs	r5, #0
 800ea38:	4628      	mov	r0, r5
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	b118      	cbz	r0, 800ea46 <_fflush_r+0x1a>
 800ea3e:	6a03      	ldr	r3, [r0, #32]
 800ea40:	b90b      	cbnz	r3, 800ea46 <_fflush_r+0x1a>
 800ea42:	f7fd f9dd 	bl	800be00 <__sinit>
 800ea46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d0f3      	beq.n	800ea36 <_fflush_r+0xa>
 800ea4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ea50:	07d0      	lsls	r0, r2, #31
 800ea52:	d404      	bmi.n	800ea5e <_fflush_r+0x32>
 800ea54:	0599      	lsls	r1, r3, #22
 800ea56:	d402      	bmi.n	800ea5e <_fflush_r+0x32>
 800ea58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea5a:	f7fd fafc 	bl	800c056 <__retarget_lock_acquire_recursive>
 800ea5e:	4628      	mov	r0, r5
 800ea60:	4621      	mov	r1, r4
 800ea62:	f7ff ff5f 	bl	800e924 <__sflush_r>
 800ea66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea68:	07da      	lsls	r2, r3, #31
 800ea6a:	4605      	mov	r5, r0
 800ea6c:	d4e4      	bmi.n	800ea38 <_fflush_r+0xc>
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	059b      	lsls	r3, r3, #22
 800ea72:	d4e1      	bmi.n	800ea38 <_fflush_r+0xc>
 800ea74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea76:	f7fd faef 	bl	800c058 <__retarget_lock_release_recursive>
 800ea7a:	e7dd      	b.n	800ea38 <_fflush_r+0xc>

0800ea7c <__swbuf_r>:
 800ea7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7e:	460e      	mov	r6, r1
 800ea80:	4614      	mov	r4, r2
 800ea82:	4605      	mov	r5, r0
 800ea84:	b118      	cbz	r0, 800ea8e <__swbuf_r+0x12>
 800ea86:	6a03      	ldr	r3, [r0, #32]
 800ea88:	b90b      	cbnz	r3, 800ea8e <__swbuf_r+0x12>
 800ea8a:	f7fd f9b9 	bl	800be00 <__sinit>
 800ea8e:	69a3      	ldr	r3, [r4, #24]
 800ea90:	60a3      	str	r3, [r4, #8]
 800ea92:	89a3      	ldrh	r3, [r4, #12]
 800ea94:	071a      	lsls	r2, r3, #28
 800ea96:	d501      	bpl.n	800ea9c <__swbuf_r+0x20>
 800ea98:	6923      	ldr	r3, [r4, #16]
 800ea9a:	b943      	cbnz	r3, 800eaae <__swbuf_r+0x32>
 800ea9c:	4621      	mov	r1, r4
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f000 f82a 	bl	800eaf8 <__swsetup_r>
 800eaa4:	b118      	cbz	r0, 800eaae <__swbuf_r+0x32>
 800eaa6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800eaaa:	4638      	mov	r0, r7
 800eaac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaae:	6823      	ldr	r3, [r4, #0]
 800eab0:	6922      	ldr	r2, [r4, #16]
 800eab2:	1a98      	subs	r0, r3, r2
 800eab4:	6963      	ldr	r3, [r4, #20]
 800eab6:	b2f6      	uxtb	r6, r6
 800eab8:	4283      	cmp	r3, r0
 800eaba:	4637      	mov	r7, r6
 800eabc:	dc05      	bgt.n	800eaca <__swbuf_r+0x4e>
 800eabe:	4621      	mov	r1, r4
 800eac0:	4628      	mov	r0, r5
 800eac2:	f7ff ffb3 	bl	800ea2c <_fflush_r>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d1ed      	bne.n	800eaa6 <__swbuf_r+0x2a>
 800eaca:	68a3      	ldr	r3, [r4, #8]
 800eacc:	3b01      	subs	r3, #1
 800eace:	60a3      	str	r3, [r4, #8]
 800ead0:	6823      	ldr	r3, [r4, #0]
 800ead2:	1c5a      	adds	r2, r3, #1
 800ead4:	6022      	str	r2, [r4, #0]
 800ead6:	701e      	strb	r6, [r3, #0]
 800ead8:	6962      	ldr	r2, [r4, #20]
 800eada:	1c43      	adds	r3, r0, #1
 800eadc:	429a      	cmp	r2, r3
 800eade:	d004      	beq.n	800eaea <__swbuf_r+0x6e>
 800eae0:	89a3      	ldrh	r3, [r4, #12]
 800eae2:	07db      	lsls	r3, r3, #31
 800eae4:	d5e1      	bpl.n	800eaaa <__swbuf_r+0x2e>
 800eae6:	2e0a      	cmp	r6, #10
 800eae8:	d1df      	bne.n	800eaaa <__swbuf_r+0x2e>
 800eaea:	4621      	mov	r1, r4
 800eaec:	4628      	mov	r0, r5
 800eaee:	f7ff ff9d 	bl	800ea2c <_fflush_r>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	d0d9      	beq.n	800eaaa <__swbuf_r+0x2e>
 800eaf6:	e7d6      	b.n	800eaa6 <__swbuf_r+0x2a>

0800eaf8 <__swsetup_r>:
 800eaf8:	b538      	push	{r3, r4, r5, lr}
 800eafa:	4b29      	ldr	r3, [pc, #164]	@ (800eba0 <__swsetup_r+0xa8>)
 800eafc:	4605      	mov	r5, r0
 800eafe:	6818      	ldr	r0, [r3, #0]
 800eb00:	460c      	mov	r4, r1
 800eb02:	b118      	cbz	r0, 800eb0c <__swsetup_r+0x14>
 800eb04:	6a03      	ldr	r3, [r0, #32]
 800eb06:	b90b      	cbnz	r3, 800eb0c <__swsetup_r+0x14>
 800eb08:	f7fd f97a 	bl	800be00 <__sinit>
 800eb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb10:	0719      	lsls	r1, r3, #28
 800eb12:	d422      	bmi.n	800eb5a <__swsetup_r+0x62>
 800eb14:	06da      	lsls	r2, r3, #27
 800eb16:	d407      	bmi.n	800eb28 <__swsetup_r+0x30>
 800eb18:	2209      	movs	r2, #9
 800eb1a:	602a      	str	r2, [r5, #0]
 800eb1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb20:	81a3      	strh	r3, [r4, #12]
 800eb22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb26:	e033      	b.n	800eb90 <__swsetup_r+0x98>
 800eb28:	0758      	lsls	r0, r3, #29
 800eb2a:	d512      	bpl.n	800eb52 <__swsetup_r+0x5a>
 800eb2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb2e:	b141      	cbz	r1, 800eb42 <__swsetup_r+0x4a>
 800eb30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb34:	4299      	cmp	r1, r3
 800eb36:	d002      	beq.n	800eb3e <__swsetup_r+0x46>
 800eb38:	4628      	mov	r0, r5
 800eb3a:	f7fe f87b 	bl	800cc34 <_free_r>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb42:	89a3      	ldrh	r3, [r4, #12]
 800eb44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb48:	81a3      	strh	r3, [r4, #12]
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	6063      	str	r3, [r4, #4]
 800eb4e:	6923      	ldr	r3, [r4, #16]
 800eb50:	6023      	str	r3, [r4, #0]
 800eb52:	89a3      	ldrh	r3, [r4, #12]
 800eb54:	f043 0308 	orr.w	r3, r3, #8
 800eb58:	81a3      	strh	r3, [r4, #12]
 800eb5a:	6923      	ldr	r3, [r4, #16]
 800eb5c:	b94b      	cbnz	r3, 800eb72 <__swsetup_r+0x7a>
 800eb5e:	89a3      	ldrh	r3, [r4, #12]
 800eb60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eb64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb68:	d003      	beq.n	800eb72 <__swsetup_r+0x7a>
 800eb6a:	4621      	mov	r1, r4
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	f000 fc49 	bl	800f404 <__smakebuf_r>
 800eb72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb76:	f013 0201 	ands.w	r2, r3, #1
 800eb7a:	d00a      	beq.n	800eb92 <__swsetup_r+0x9a>
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	60a2      	str	r2, [r4, #8]
 800eb80:	6962      	ldr	r2, [r4, #20]
 800eb82:	4252      	negs	r2, r2
 800eb84:	61a2      	str	r2, [r4, #24]
 800eb86:	6922      	ldr	r2, [r4, #16]
 800eb88:	b942      	cbnz	r2, 800eb9c <__swsetup_r+0xa4>
 800eb8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eb8e:	d1c5      	bne.n	800eb1c <__swsetup_r+0x24>
 800eb90:	bd38      	pop	{r3, r4, r5, pc}
 800eb92:	0799      	lsls	r1, r3, #30
 800eb94:	bf58      	it	pl
 800eb96:	6962      	ldrpl	r2, [r4, #20]
 800eb98:	60a2      	str	r2, [r4, #8]
 800eb9a:	e7f4      	b.n	800eb86 <__swsetup_r+0x8e>
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	e7f7      	b.n	800eb90 <__swsetup_r+0x98>
 800eba0:	2400001c 	.word	0x2400001c

0800eba4 <memmove>:
 800eba4:	4288      	cmp	r0, r1
 800eba6:	b510      	push	{r4, lr}
 800eba8:	eb01 0402 	add.w	r4, r1, r2
 800ebac:	d902      	bls.n	800ebb4 <memmove+0x10>
 800ebae:	4284      	cmp	r4, r0
 800ebb0:	4623      	mov	r3, r4
 800ebb2:	d807      	bhi.n	800ebc4 <memmove+0x20>
 800ebb4:	1e43      	subs	r3, r0, #1
 800ebb6:	42a1      	cmp	r1, r4
 800ebb8:	d008      	beq.n	800ebcc <memmove+0x28>
 800ebba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebc2:	e7f8      	b.n	800ebb6 <memmove+0x12>
 800ebc4:	4402      	add	r2, r0
 800ebc6:	4601      	mov	r1, r0
 800ebc8:	428a      	cmp	r2, r1
 800ebca:	d100      	bne.n	800ebce <memmove+0x2a>
 800ebcc:	bd10      	pop	{r4, pc}
 800ebce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebd6:	e7f7      	b.n	800ebc8 <memmove+0x24>

0800ebd8 <strncmp>:
 800ebd8:	b510      	push	{r4, lr}
 800ebda:	b16a      	cbz	r2, 800ebf8 <strncmp+0x20>
 800ebdc:	3901      	subs	r1, #1
 800ebde:	1884      	adds	r4, r0, r2
 800ebe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebe4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d103      	bne.n	800ebf4 <strncmp+0x1c>
 800ebec:	42a0      	cmp	r0, r4
 800ebee:	d001      	beq.n	800ebf4 <strncmp+0x1c>
 800ebf0:	2a00      	cmp	r2, #0
 800ebf2:	d1f5      	bne.n	800ebe0 <strncmp+0x8>
 800ebf4:	1ad0      	subs	r0, r2, r3
 800ebf6:	bd10      	pop	{r4, pc}
 800ebf8:	4610      	mov	r0, r2
 800ebfa:	e7fc      	b.n	800ebf6 <strncmp+0x1e>

0800ebfc <_sbrk_r>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	4d06      	ldr	r5, [pc, #24]	@ (800ec18 <_sbrk_r+0x1c>)
 800ec00:	2300      	movs	r3, #0
 800ec02:	4604      	mov	r4, r0
 800ec04:	4608      	mov	r0, r1
 800ec06:	602b      	str	r3, [r5, #0]
 800ec08:	f7f2 fc2c 	bl	8001464 <_sbrk>
 800ec0c:	1c43      	adds	r3, r0, #1
 800ec0e:	d102      	bne.n	800ec16 <_sbrk_r+0x1a>
 800ec10:	682b      	ldr	r3, [r5, #0]
 800ec12:	b103      	cbz	r3, 800ec16 <_sbrk_r+0x1a>
 800ec14:	6023      	str	r3, [r4, #0]
 800ec16:	bd38      	pop	{r3, r4, r5, pc}
 800ec18:	240034ec 	.word	0x240034ec

0800ec1c <memcpy>:
 800ec1c:	440a      	add	r2, r1
 800ec1e:	4291      	cmp	r1, r2
 800ec20:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ec24:	d100      	bne.n	800ec28 <memcpy+0xc>
 800ec26:	4770      	bx	lr
 800ec28:	b510      	push	{r4, lr}
 800ec2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec32:	4291      	cmp	r1, r2
 800ec34:	d1f9      	bne.n	800ec2a <memcpy+0xe>
 800ec36:	bd10      	pop	{r4, pc}

0800ec38 <nan>:
 800ec38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ec40 <nan+0x8>
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop
 800ec40:	00000000 	.word	0x00000000
 800ec44:	7ff80000 	.word	0x7ff80000

0800ec48 <__assert_func>:
 800ec48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec4a:	4614      	mov	r4, r2
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	4b09      	ldr	r3, [pc, #36]	@ (800ec74 <__assert_func+0x2c>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4605      	mov	r5, r0
 800ec54:	68d8      	ldr	r0, [r3, #12]
 800ec56:	b14c      	cbz	r4, 800ec6c <__assert_func+0x24>
 800ec58:	4b07      	ldr	r3, [pc, #28]	@ (800ec78 <__assert_func+0x30>)
 800ec5a:	9100      	str	r1, [sp, #0]
 800ec5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec60:	4906      	ldr	r1, [pc, #24]	@ (800ec7c <__assert_func+0x34>)
 800ec62:	462b      	mov	r3, r5
 800ec64:	f7fd f8e4 	bl	800be30 <fiprintf>
 800ec68:	f000 fc2a 	bl	800f4c0 <abort>
 800ec6c:	4b04      	ldr	r3, [pc, #16]	@ (800ec80 <__assert_func+0x38>)
 800ec6e:	461c      	mov	r4, r3
 800ec70:	e7f3      	b.n	800ec5a <__assert_func+0x12>
 800ec72:	bf00      	nop
 800ec74:	2400001c 	.word	0x2400001c
 800ec78:	0800f972 	.word	0x0800f972
 800ec7c:	0800f97f 	.word	0x0800f97f
 800ec80:	0800f9ad 	.word	0x0800f9ad

0800ec84 <_calloc_r>:
 800ec84:	b570      	push	{r4, r5, r6, lr}
 800ec86:	fba1 5402 	umull	r5, r4, r1, r2
 800ec8a:	b934      	cbnz	r4, 800ec9a <_calloc_r+0x16>
 800ec8c:	4629      	mov	r1, r5
 800ec8e:	f7fe f845 	bl	800cd1c <_malloc_r>
 800ec92:	4606      	mov	r6, r0
 800ec94:	b928      	cbnz	r0, 800eca2 <_calloc_r+0x1e>
 800ec96:	4630      	mov	r0, r6
 800ec98:	bd70      	pop	{r4, r5, r6, pc}
 800ec9a:	220c      	movs	r2, #12
 800ec9c:	6002      	str	r2, [r0, #0]
 800ec9e:	2600      	movs	r6, #0
 800eca0:	e7f9      	b.n	800ec96 <_calloc_r+0x12>
 800eca2:	462a      	mov	r2, r5
 800eca4:	4621      	mov	r1, r4
 800eca6:	f7fd f958 	bl	800bf5a <memset>
 800ecaa:	e7f4      	b.n	800ec96 <_calloc_r+0x12>

0800ecac <rshift>:
 800ecac:	6903      	ldr	r3, [r0, #16]
 800ecae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ecb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ecba:	f100 0414 	add.w	r4, r0, #20
 800ecbe:	dd45      	ble.n	800ed4c <rshift+0xa0>
 800ecc0:	f011 011f 	ands.w	r1, r1, #31
 800ecc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ecc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eccc:	d10c      	bne.n	800ece8 <rshift+0x3c>
 800ecce:	f100 0710 	add.w	r7, r0, #16
 800ecd2:	4629      	mov	r1, r5
 800ecd4:	42b1      	cmp	r1, r6
 800ecd6:	d334      	bcc.n	800ed42 <rshift+0x96>
 800ecd8:	1a9b      	subs	r3, r3, r2
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	1eea      	subs	r2, r5, #3
 800ecde:	4296      	cmp	r6, r2
 800ece0:	bf38      	it	cc
 800ece2:	2300      	movcc	r3, #0
 800ece4:	4423      	add	r3, r4
 800ece6:	e015      	b.n	800ed14 <rshift+0x68>
 800ece8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ecec:	f1c1 0820 	rsb	r8, r1, #32
 800ecf0:	40cf      	lsrs	r7, r1
 800ecf2:	f105 0e04 	add.w	lr, r5, #4
 800ecf6:	46a1      	mov	r9, r4
 800ecf8:	4576      	cmp	r6, lr
 800ecfa:	46f4      	mov	ip, lr
 800ecfc:	d815      	bhi.n	800ed2a <rshift+0x7e>
 800ecfe:	1a9a      	subs	r2, r3, r2
 800ed00:	0092      	lsls	r2, r2, #2
 800ed02:	3a04      	subs	r2, #4
 800ed04:	3501      	adds	r5, #1
 800ed06:	42ae      	cmp	r6, r5
 800ed08:	bf38      	it	cc
 800ed0a:	2200      	movcc	r2, #0
 800ed0c:	18a3      	adds	r3, r4, r2
 800ed0e:	50a7      	str	r7, [r4, r2]
 800ed10:	b107      	cbz	r7, 800ed14 <rshift+0x68>
 800ed12:	3304      	adds	r3, #4
 800ed14:	1b1a      	subs	r2, r3, r4
 800ed16:	42a3      	cmp	r3, r4
 800ed18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ed1c:	bf08      	it	eq
 800ed1e:	2300      	moveq	r3, #0
 800ed20:	6102      	str	r2, [r0, #16]
 800ed22:	bf08      	it	eq
 800ed24:	6143      	streq	r3, [r0, #20]
 800ed26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed2a:	f8dc c000 	ldr.w	ip, [ip]
 800ed2e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ed32:	ea4c 0707 	orr.w	r7, ip, r7
 800ed36:	f849 7b04 	str.w	r7, [r9], #4
 800ed3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed3e:	40cf      	lsrs	r7, r1
 800ed40:	e7da      	b.n	800ecf8 <rshift+0x4c>
 800ed42:	f851 cb04 	ldr.w	ip, [r1], #4
 800ed46:	f847 cf04 	str.w	ip, [r7, #4]!
 800ed4a:	e7c3      	b.n	800ecd4 <rshift+0x28>
 800ed4c:	4623      	mov	r3, r4
 800ed4e:	e7e1      	b.n	800ed14 <rshift+0x68>

0800ed50 <__hexdig_fun>:
 800ed50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ed54:	2b09      	cmp	r3, #9
 800ed56:	d802      	bhi.n	800ed5e <__hexdig_fun+0xe>
 800ed58:	3820      	subs	r0, #32
 800ed5a:	b2c0      	uxtb	r0, r0
 800ed5c:	4770      	bx	lr
 800ed5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ed62:	2b05      	cmp	r3, #5
 800ed64:	d801      	bhi.n	800ed6a <__hexdig_fun+0x1a>
 800ed66:	3847      	subs	r0, #71	@ 0x47
 800ed68:	e7f7      	b.n	800ed5a <__hexdig_fun+0xa>
 800ed6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ed6e:	2b05      	cmp	r3, #5
 800ed70:	d801      	bhi.n	800ed76 <__hexdig_fun+0x26>
 800ed72:	3827      	subs	r0, #39	@ 0x27
 800ed74:	e7f1      	b.n	800ed5a <__hexdig_fun+0xa>
 800ed76:	2000      	movs	r0, #0
 800ed78:	4770      	bx	lr
	...

0800ed7c <__gethex>:
 800ed7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed80:	b085      	sub	sp, #20
 800ed82:	468a      	mov	sl, r1
 800ed84:	9302      	str	r3, [sp, #8]
 800ed86:	680b      	ldr	r3, [r1, #0]
 800ed88:	9001      	str	r0, [sp, #4]
 800ed8a:	4690      	mov	r8, r2
 800ed8c:	1c9c      	adds	r4, r3, #2
 800ed8e:	46a1      	mov	r9, r4
 800ed90:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ed94:	2830      	cmp	r0, #48	@ 0x30
 800ed96:	d0fa      	beq.n	800ed8e <__gethex+0x12>
 800ed98:	eba9 0303 	sub.w	r3, r9, r3
 800ed9c:	f1a3 0b02 	sub.w	fp, r3, #2
 800eda0:	f7ff ffd6 	bl	800ed50 <__hexdig_fun>
 800eda4:	4605      	mov	r5, r0
 800eda6:	2800      	cmp	r0, #0
 800eda8:	d168      	bne.n	800ee7c <__gethex+0x100>
 800edaa:	49a0      	ldr	r1, [pc, #640]	@ (800f02c <__gethex+0x2b0>)
 800edac:	2201      	movs	r2, #1
 800edae:	4648      	mov	r0, r9
 800edb0:	f7ff ff12 	bl	800ebd8 <strncmp>
 800edb4:	4607      	mov	r7, r0
 800edb6:	2800      	cmp	r0, #0
 800edb8:	d167      	bne.n	800ee8a <__gethex+0x10e>
 800edba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800edbe:	4626      	mov	r6, r4
 800edc0:	f7ff ffc6 	bl	800ed50 <__hexdig_fun>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d062      	beq.n	800ee8e <__gethex+0x112>
 800edc8:	4623      	mov	r3, r4
 800edca:	7818      	ldrb	r0, [r3, #0]
 800edcc:	2830      	cmp	r0, #48	@ 0x30
 800edce:	4699      	mov	r9, r3
 800edd0:	f103 0301 	add.w	r3, r3, #1
 800edd4:	d0f9      	beq.n	800edca <__gethex+0x4e>
 800edd6:	f7ff ffbb 	bl	800ed50 <__hexdig_fun>
 800edda:	fab0 f580 	clz	r5, r0
 800edde:	096d      	lsrs	r5, r5, #5
 800ede0:	f04f 0b01 	mov.w	fp, #1
 800ede4:	464a      	mov	r2, r9
 800ede6:	4616      	mov	r6, r2
 800ede8:	3201      	adds	r2, #1
 800edea:	7830      	ldrb	r0, [r6, #0]
 800edec:	f7ff ffb0 	bl	800ed50 <__hexdig_fun>
 800edf0:	2800      	cmp	r0, #0
 800edf2:	d1f8      	bne.n	800ede6 <__gethex+0x6a>
 800edf4:	498d      	ldr	r1, [pc, #564]	@ (800f02c <__gethex+0x2b0>)
 800edf6:	2201      	movs	r2, #1
 800edf8:	4630      	mov	r0, r6
 800edfa:	f7ff feed 	bl	800ebd8 <strncmp>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d13f      	bne.n	800ee82 <__gethex+0x106>
 800ee02:	b944      	cbnz	r4, 800ee16 <__gethex+0x9a>
 800ee04:	1c74      	adds	r4, r6, #1
 800ee06:	4622      	mov	r2, r4
 800ee08:	4616      	mov	r6, r2
 800ee0a:	3201      	adds	r2, #1
 800ee0c:	7830      	ldrb	r0, [r6, #0]
 800ee0e:	f7ff ff9f 	bl	800ed50 <__hexdig_fun>
 800ee12:	2800      	cmp	r0, #0
 800ee14:	d1f8      	bne.n	800ee08 <__gethex+0x8c>
 800ee16:	1ba4      	subs	r4, r4, r6
 800ee18:	00a7      	lsls	r7, r4, #2
 800ee1a:	7833      	ldrb	r3, [r6, #0]
 800ee1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ee20:	2b50      	cmp	r3, #80	@ 0x50
 800ee22:	d13e      	bne.n	800eea2 <__gethex+0x126>
 800ee24:	7873      	ldrb	r3, [r6, #1]
 800ee26:	2b2b      	cmp	r3, #43	@ 0x2b
 800ee28:	d033      	beq.n	800ee92 <__gethex+0x116>
 800ee2a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ee2c:	d034      	beq.n	800ee98 <__gethex+0x11c>
 800ee2e:	1c71      	adds	r1, r6, #1
 800ee30:	2400      	movs	r4, #0
 800ee32:	7808      	ldrb	r0, [r1, #0]
 800ee34:	f7ff ff8c 	bl	800ed50 <__hexdig_fun>
 800ee38:	1e43      	subs	r3, r0, #1
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b18      	cmp	r3, #24
 800ee3e:	d830      	bhi.n	800eea2 <__gethex+0x126>
 800ee40:	f1a0 0210 	sub.w	r2, r0, #16
 800ee44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ee48:	f7ff ff82 	bl	800ed50 <__hexdig_fun>
 800ee4c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800ee50:	fa5f fc8c 	uxtb.w	ip, ip
 800ee54:	f1bc 0f18 	cmp.w	ip, #24
 800ee58:	f04f 030a 	mov.w	r3, #10
 800ee5c:	d91e      	bls.n	800ee9c <__gethex+0x120>
 800ee5e:	b104      	cbz	r4, 800ee62 <__gethex+0xe6>
 800ee60:	4252      	negs	r2, r2
 800ee62:	4417      	add	r7, r2
 800ee64:	f8ca 1000 	str.w	r1, [sl]
 800ee68:	b1ed      	cbz	r5, 800eea6 <__gethex+0x12a>
 800ee6a:	f1bb 0f00 	cmp.w	fp, #0
 800ee6e:	bf0c      	ite	eq
 800ee70:	2506      	moveq	r5, #6
 800ee72:	2500      	movne	r5, #0
 800ee74:	4628      	mov	r0, r5
 800ee76:	b005      	add	sp, #20
 800ee78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee7c:	2500      	movs	r5, #0
 800ee7e:	462c      	mov	r4, r5
 800ee80:	e7b0      	b.n	800ede4 <__gethex+0x68>
 800ee82:	2c00      	cmp	r4, #0
 800ee84:	d1c7      	bne.n	800ee16 <__gethex+0x9a>
 800ee86:	4627      	mov	r7, r4
 800ee88:	e7c7      	b.n	800ee1a <__gethex+0x9e>
 800ee8a:	464e      	mov	r6, r9
 800ee8c:	462f      	mov	r7, r5
 800ee8e:	2501      	movs	r5, #1
 800ee90:	e7c3      	b.n	800ee1a <__gethex+0x9e>
 800ee92:	2400      	movs	r4, #0
 800ee94:	1cb1      	adds	r1, r6, #2
 800ee96:	e7cc      	b.n	800ee32 <__gethex+0xb6>
 800ee98:	2401      	movs	r4, #1
 800ee9a:	e7fb      	b.n	800ee94 <__gethex+0x118>
 800ee9c:	fb03 0002 	mla	r0, r3, r2, r0
 800eea0:	e7ce      	b.n	800ee40 <__gethex+0xc4>
 800eea2:	4631      	mov	r1, r6
 800eea4:	e7de      	b.n	800ee64 <__gethex+0xe8>
 800eea6:	eba6 0309 	sub.w	r3, r6, r9
 800eeaa:	3b01      	subs	r3, #1
 800eeac:	4629      	mov	r1, r5
 800eeae:	2b07      	cmp	r3, #7
 800eeb0:	dc0a      	bgt.n	800eec8 <__gethex+0x14c>
 800eeb2:	9801      	ldr	r0, [sp, #4]
 800eeb4:	f7fd ffbe 	bl	800ce34 <_Balloc>
 800eeb8:	4604      	mov	r4, r0
 800eeba:	b940      	cbnz	r0, 800eece <__gethex+0x152>
 800eebc:	4b5c      	ldr	r3, [pc, #368]	@ (800f030 <__gethex+0x2b4>)
 800eebe:	4602      	mov	r2, r0
 800eec0:	21e4      	movs	r1, #228	@ 0xe4
 800eec2:	485c      	ldr	r0, [pc, #368]	@ (800f034 <__gethex+0x2b8>)
 800eec4:	f7ff fec0 	bl	800ec48 <__assert_func>
 800eec8:	3101      	adds	r1, #1
 800eeca:	105b      	asrs	r3, r3, #1
 800eecc:	e7ef      	b.n	800eeae <__gethex+0x132>
 800eece:	f100 0a14 	add.w	sl, r0, #20
 800eed2:	2300      	movs	r3, #0
 800eed4:	4655      	mov	r5, sl
 800eed6:	469b      	mov	fp, r3
 800eed8:	45b1      	cmp	r9, r6
 800eeda:	d337      	bcc.n	800ef4c <__gethex+0x1d0>
 800eedc:	f845 bb04 	str.w	fp, [r5], #4
 800eee0:	eba5 050a 	sub.w	r5, r5, sl
 800eee4:	10ad      	asrs	r5, r5, #2
 800eee6:	6125      	str	r5, [r4, #16]
 800eee8:	4658      	mov	r0, fp
 800eeea:	f7fe f895 	bl	800d018 <__hi0bits>
 800eeee:	016d      	lsls	r5, r5, #5
 800eef0:	f8d8 6000 	ldr.w	r6, [r8]
 800eef4:	1a2d      	subs	r5, r5, r0
 800eef6:	42b5      	cmp	r5, r6
 800eef8:	dd54      	ble.n	800efa4 <__gethex+0x228>
 800eefa:	1bad      	subs	r5, r5, r6
 800eefc:	4629      	mov	r1, r5
 800eefe:	4620      	mov	r0, r4
 800ef00:	f7fe fc1e 	bl	800d740 <__any_on>
 800ef04:	4681      	mov	r9, r0
 800ef06:	b178      	cbz	r0, 800ef28 <__gethex+0x1ac>
 800ef08:	1e6b      	subs	r3, r5, #1
 800ef0a:	1159      	asrs	r1, r3, #5
 800ef0c:	f003 021f 	and.w	r2, r3, #31
 800ef10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ef14:	f04f 0901 	mov.w	r9, #1
 800ef18:	fa09 f202 	lsl.w	r2, r9, r2
 800ef1c:	420a      	tst	r2, r1
 800ef1e:	d003      	beq.n	800ef28 <__gethex+0x1ac>
 800ef20:	454b      	cmp	r3, r9
 800ef22:	dc36      	bgt.n	800ef92 <__gethex+0x216>
 800ef24:	f04f 0902 	mov.w	r9, #2
 800ef28:	4629      	mov	r1, r5
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	f7ff febe 	bl	800ecac <rshift>
 800ef30:	442f      	add	r7, r5
 800ef32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef36:	42bb      	cmp	r3, r7
 800ef38:	da42      	bge.n	800efc0 <__gethex+0x244>
 800ef3a:	9801      	ldr	r0, [sp, #4]
 800ef3c:	4621      	mov	r1, r4
 800ef3e:	f7fd ffb9 	bl	800ceb4 <_Bfree>
 800ef42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef44:	2300      	movs	r3, #0
 800ef46:	6013      	str	r3, [r2, #0]
 800ef48:	25a3      	movs	r5, #163	@ 0xa3
 800ef4a:	e793      	b.n	800ee74 <__gethex+0xf8>
 800ef4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ef50:	2a2e      	cmp	r2, #46	@ 0x2e
 800ef52:	d012      	beq.n	800ef7a <__gethex+0x1fe>
 800ef54:	2b20      	cmp	r3, #32
 800ef56:	d104      	bne.n	800ef62 <__gethex+0x1e6>
 800ef58:	f845 bb04 	str.w	fp, [r5], #4
 800ef5c:	f04f 0b00 	mov.w	fp, #0
 800ef60:	465b      	mov	r3, fp
 800ef62:	7830      	ldrb	r0, [r6, #0]
 800ef64:	9303      	str	r3, [sp, #12]
 800ef66:	f7ff fef3 	bl	800ed50 <__hexdig_fun>
 800ef6a:	9b03      	ldr	r3, [sp, #12]
 800ef6c:	f000 000f 	and.w	r0, r0, #15
 800ef70:	4098      	lsls	r0, r3
 800ef72:	ea4b 0b00 	orr.w	fp, fp, r0
 800ef76:	3304      	adds	r3, #4
 800ef78:	e7ae      	b.n	800eed8 <__gethex+0x15c>
 800ef7a:	45b1      	cmp	r9, r6
 800ef7c:	d8ea      	bhi.n	800ef54 <__gethex+0x1d8>
 800ef7e:	492b      	ldr	r1, [pc, #172]	@ (800f02c <__gethex+0x2b0>)
 800ef80:	9303      	str	r3, [sp, #12]
 800ef82:	2201      	movs	r2, #1
 800ef84:	4630      	mov	r0, r6
 800ef86:	f7ff fe27 	bl	800ebd8 <strncmp>
 800ef8a:	9b03      	ldr	r3, [sp, #12]
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d1e1      	bne.n	800ef54 <__gethex+0x1d8>
 800ef90:	e7a2      	b.n	800eed8 <__gethex+0x15c>
 800ef92:	1ea9      	subs	r1, r5, #2
 800ef94:	4620      	mov	r0, r4
 800ef96:	f7fe fbd3 	bl	800d740 <__any_on>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	d0c2      	beq.n	800ef24 <__gethex+0x1a8>
 800ef9e:	f04f 0903 	mov.w	r9, #3
 800efa2:	e7c1      	b.n	800ef28 <__gethex+0x1ac>
 800efa4:	da09      	bge.n	800efba <__gethex+0x23e>
 800efa6:	1b75      	subs	r5, r6, r5
 800efa8:	4621      	mov	r1, r4
 800efaa:	9801      	ldr	r0, [sp, #4]
 800efac:	462a      	mov	r2, r5
 800efae:	f7fe f991 	bl	800d2d4 <__lshift>
 800efb2:	1b7f      	subs	r7, r7, r5
 800efb4:	4604      	mov	r4, r0
 800efb6:	f100 0a14 	add.w	sl, r0, #20
 800efba:	f04f 0900 	mov.w	r9, #0
 800efbe:	e7b8      	b.n	800ef32 <__gethex+0x1b6>
 800efc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800efc4:	42bd      	cmp	r5, r7
 800efc6:	dd6f      	ble.n	800f0a8 <__gethex+0x32c>
 800efc8:	1bed      	subs	r5, r5, r7
 800efca:	42ae      	cmp	r6, r5
 800efcc:	dc34      	bgt.n	800f038 <__gethex+0x2bc>
 800efce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	d022      	beq.n	800f01c <__gethex+0x2a0>
 800efd6:	2b03      	cmp	r3, #3
 800efd8:	d024      	beq.n	800f024 <__gethex+0x2a8>
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d115      	bne.n	800f00a <__gethex+0x28e>
 800efde:	42ae      	cmp	r6, r5
 800efe0:	d113      	bne.n	800f00a <__gethex+0x28e>
 800efe2:	2e01      	cmp	r6, #1
 800efe4:	d10b      	bne.n	800effe <__gethex+0x282>
 800efe6:	9a02      	ldr	r2, [sp, #8]
 800efe8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800efec:	6013      	str	r3, [r2, #0]
 800efee:	2301      	movs	r3, #1
 800eff0:	6123      	str	r3, [r4, #16]
 800eff2:	f8ca 3000 	str.w	r3, [sl]
 800eff6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eff8:	2562      	movs	r5, #98	@ 0x62
 800effa:	601c      	str	r4, [r3, #0]
 800effc:	e73a      	b.n	800ee74 <__gethex+0xf8>
 800effe:	1e71      	subs	r1, r6, #1
 800f000:	4620      	mov	r0, r4
 800f002:	f7fe fb9d 	bl	800d740 <__any_on>
 800f006:	2800      	cmp	r0, #0
 800f008:	d1ed      	bne.n	800efe6 <__gethex+0x26a>
 800f00a:	9801      	ldr	r0, [sp, #4]
 800f00c:	4621      	mov	r1, r4
 800f00e:	f7fd ff51 	bl	800ceb4 <_Bfree>
 800f012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f014:	2300      	movs	r3, #0
 800f016:	6013      	str	r3, [r2, #0]
 800f018:	2550      	movs	r5, #80	@ 0x50
 800f01a:	e72b      	b.n	800ee74 <__gethex+0xf8>
 800f01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1f3      	bne.n	800f00a <__gethex+0x28e>
 800f022:	e7e0      	b.n	800efe6 <__gethex+0x26a>
 800f024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f026:	2b00      	cmp	r3, #0
 800f028:	d1dd      	bne.n	800efe6 <__gethex+0x26a>
 800f02a:	e7ee      	b.n	800f00a <__gethex+0x28e>
 800f02c:	0800f957 	.word	0x0800f957
 800f030:	0800f8ed 	.word	0x0800f8ed
 800f034:	0800f9ae 	.word	0x0800f9ae
 800f038:	1e6f      	subs	r7, r5, #1
 800f03a:	f1b9 0f00 	cmp.w	r9, #0
 800f03e:	d130      	bne.n	800f0a2 <__gethex+0x326>
 800f040:	b127      	cbz	r7, 800f04c <__gethex+0x2d0>
 800f042:	4639      	mov	r1, r7
 800f044:	4620      	mov	r0, r4
 800f046:	f7fe fb7b 	bl	800d740 <__any_on>
 800f04a:	4681      	mov	r9, r0
 800f04c:	117a      	asrs	r2, r7, #5
 800f04e:	2301      	movs	r3, #1
 800f050:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f054:	f007 071f 	and.w	r7, r7, #31
 800f058:	40bb      	lsls	r3, r7
 800f05a:	4213      	tst	r3, r2
 800f05c:	4629      	mov	r1, r5
 800f05e:	4620      	mov	r0, r4
 800f060:	bf18      	it	ne
 800f062:	f049 0902 	orrne.w	r9, r9, #2
 800f066:	f7ff fe21 	bl	800ecac <rshift>
 800f06a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f06e:	1b76      	subs	r6, r6, r5
 800f070:	2502      	movs	r5, #2
 800f072:	f1b9 0f00 	cmp.w	r9, #0
 800f076:	d047      	beq.n	800f108 <__gethex+0x38c>
 800f078:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f07c:	2b02      	cmp	r3, #2
 800f07e:	d015      	beq.n	800f0ac <__gethex+0x330>
 800f080:	2b03      	cmp	r3, #3
 800f082:	d017      	beq.n	800f0b4 <__gethex+0x338>
 800f084:	2b01      	cmp	r3, #1
 800f086:	d109      	bne.n	800f09c <__gethex+0x320>
 800f088:	f019 0f02 	tst.w	r9, #2
 800f08c:	d006      	beq.n	800f09c <__gethex+0x320>
 800f08e:	f8da 3000 	ldr.w	r3, [sl]
 800f092:	ea49 0903 	orr.w	r9, r9, r3
 800f096:	f019 0f01 	tst.w	r9, #1
 800f09a:	d10e      	bne.n	800f0ba <__gethex+0x33e>
 800f09c:	f045 0510 	orr.w	r5, r5, #16
 800f0a0:	e032      	b.n	800f108 <__gethex+0x38c>
 800f0a2:	f04f 0901 	mov.w	r9, #1
 800f0a6:	e7d1      	b.n	800f04c <__gethex+0x2d0>
 800f0a8:	2501      	movs	r5, #1
 800f0aa:	e7e2      	b.n	800f072 <__gethex+0x2f6>
 800f0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0ae:	f1c3 0301 	rsb	r3, r3, #1
 800f0b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f0b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d0f0      	beq.n	800f09c <__gethex+0x320>
 800f0ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f0be:	f104 0314 	add.w	r3, r4, #20
 800f0c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f0c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f0ca:	f04f 0c00 	mov.w	ip, #0
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0d4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800f0d8:	d01b      	beq.n	800f112 <__gethex+0x396>
 800f0da:	3201      	adds	r2, #1
 800f0dc:	6002      	str	r2, [r0, #0]
 800f0de:	2d02      	cmp	r5, #2
 800f0e0:	f104 0314 	add.w	r3, r4, #20
 800f0e4:	d13c      	bne.n	800f160 <__gethex+0x3e4>
 800f0e6:	f8d8 2000 	ldr.w	r2, [r8]
 800f0ea:	3a01      	subs	r2, #1
 800f0ec:	42b2      	cmp	r2, r6
 800f0ee:	d109      	bne.n	800f104 <__gethex+0x388>
 800f0f0:	1171      	asrs	r1, r6, #5
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0f8:	f006 061f 	and.w	r6, r6, #31
 800f0fc:	fa02 f606 	lsl.w	r6, r2, r6
 800f100:	421e      	tst	r6, r3
 800f102:	d13a      	bne.n	800f17a <__gethex+0x3fe>
 800f104:	f045 0520 	orr.w	r5, r5, #32
 800f108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f10a:	601c      	str	r4, [r3, #0]
 800f10c:	9b02      	ldr	r3, [sp, #8]
 800f10e:	601f      	str	r7, [r3, #0]
 800f110:	e6b0      	b.n	800ee74 <__gethex+0xf8>
 800f112:	4299      	cmp	r1, r3
 800f114:	f843 cc04 	str.w	ip, [r3, #-4]
 800f118:	d8d9      	bhi.n	800f0ce <__gethex+0x352>
 800f11a:	68a3      	ldr	r3, [r4, #8]
 800f11c:	459b      	cmp	fp, r3
 800f11e:	db17      	blt.n	800f150 <__gethex+0x3d4>
 800f120:	6861      	ldr	r1, [r4, #4]
 800f122:	9801      	ldr	r0, [sp, #4]
 800f124:	3101      	adds	r1, #1
 800f126:	f7fd fe85 	bl	800ce34 <_Balloc>
 800f12a:	4681      	mov	r9, r0
 800f12c:	b918      	cbnz	r0, 800f136 <__gethex+0x3ba>
 800f12e:	4b1a      	ldr	r3, [pc, #104]	@ (800f198 <__gethex+0x41c>)
 800f130:	4602      	mov	r2, r0
 800f132:	2184      	movs	r1, #132	@ 0x84
 800f134:	e6c5      	b.n	800eec2 <__gethex+0x146>
 800f136:	6922      	ldr	r2, [r4, #16]
 800f138:	3202      	adds	r2, #2
 800f13a:	f104 010c 	add.w	r1, r4, #12
 800f13e:	0092      	lsls	r2, r2, #2
 800f140:	300c      	adds	r0, #12
 800f142:	f7ff fd6b 	bl	800ec1c <memcpy>
 800f146:	4621      	mov	r1, r4
 800f148:	9801      	ldr	r0, [sp, #4]
 800f14a:	f7fd feb3 	bl	800ceb4 <_Bfree>
 800f14e:	464c      	mov	r4, r9
 800f150:	6923      	ldr	r3, [r4, #16]
 800f152:	1c5a      	adds	r2, r3, #1
 800f154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f158:	6122      	str	r2, [r4, #16]
 800f15a:	2201      	movs	r2, #1
 800f15c:	615a      	str	r2, [r3, #20]
 800f15e:	e7be      	b.n	800f0de <__gethex+0x362>
 800f160:	6922      	ldr	r2, [r4, #16]
 800f162:	455a      	cmp	r2, fp
 800f164:	dd0b      	ble.n	800f17e <__gethex+0x402>
 800f166:	2101      	movs	r1, #1
 800f168:	4620      	mov	r0, r4
 800f16a:	f7ff fd9f 	bl	800ecac <rshift>
 800f16e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f172:	3701      	adds	r7, #1
 800f174:	42bb      	cmp	r3, r7
 800f176:	f6ff aee0 	blt.w	800ef3a <__gethex+0x1be>
 800f17a:	2501      	movs	r5, #1
 800f17c:	e7c2      	b.n	800f104 <__gethex+0x388>
 800f17e:	f016 061f 	ands.w	r6, r6, #31
 800f182:	d0fa      	beq.n	800f17a <__gethex+0x3fe>
 800f184:	4453      	add	r3, sl
 800f186:	f1c6 0620 	rsb	r6, r6, #32
 800f18a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f18e:	f7fd ff43 	bl	800d018 <__hi0bits>
 800f192:	42b0      	cmp	r0, r6
 800f194:	dbe7      	blt.n	800f166 <__gethex+0x3ea>
 800f196:	e7f0      	b.n	800f17a <__gethex+0x3fe>
 800f198:	0800f8ed 	.word	0x0800f8ed

0800f19c <L_shift>:
 800f19c:	f1c2 0208 	rsb	r2, r2, #8
 800f1a0:	0092      	lsls	r2, r2, #2
 800f1a2:	b570      	push	{r4, r5, r6, lr}
 800f1a4:	f1c2 0620 	rsb	r6, r2, #32
 800f1a8:	6843      	ldr	r3, [r0, #4]
 800f1aa:	6804      	ldr	r4, [r0, #0]
 800f1ac:	fa03 f506 	lsl.w	r5, r3, r6
 800f1b0:	432c      	orrs	r4, r5
 800f1b2:	40d3      	lsrs	r3, r2
 800f1b4:	6004      	str	r4, [r0, #0]
 800f1b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f1ba:	4288      	cmp	r0, r1
 800f1bc:	d3f4      	bcc.n	800f1a8 <L_shift+0xc>
 800f1be:	bd70      	pop	{r4, r5, r6, pc}

0800f1c0 <__match>:
 800f1c0:	b530      	push	{r4, r5, lr}
 800f1c2:	6803      	ldr	r3, [r0, #0]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1ca:	b914      	cbnz	r4, 800f1d2 <__match+0x12>
 800f1cc:	6003      	str	r3, [r0, #0]
 800f1ce:	2001      	movs	r0, #1
 800f1d0:	bd30      	pop	{r4, r5, pc}
 800f1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f1da:	2d19      	cmp	r5, #25
 800f1dc:	bf98      	it	ls
 800f1de:	3220      	addls	r2, #32
 800f1e0:	42a2      	cmp	r2, r4
 800f1e2:	d0f0      	beq.n	800f1c6 <__match+0x6>
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	e7f3      	b.n	800f1d0 <__match+0x10>

0800f1e8 <__hexnan>:
 800f1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ec:	680b      	ldr	r3, [r1, #0]
 800f1ee:	6801      	ldr	r1, [r0, #0]
 800f1f0:	115e      	asrs	r6, r3, #5
 800f1f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f1f6:	f013 031f 	ands.w	r3, r3, #31
 800f1fa:	b087      	sub	sp, #28
 800f1fc:	bf18      	it	ne
 800f1fe:	3604      	addne	r6, #4
 800f200:	2500      	movs	r5, #0
 800f202:	1f37      	subs	r7, r6, #4
 800f204:	4682      	mov	sl, r0
 800f206:	4690      	mov	r8, r2
 800f208:	9301      	str	r3, [sp, #4]
 800f20a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f20e:	46b9      	mov	r9, r7
 800f210:	463c      	mov	r4, r7
 800f212:	9502      	str	r5, [sp, #8]
 800f214:	46ab      	mov	fp, r5
 800f216:	784a      	ldrb	r2, [r1, #1]
 800f218:	1c4b      	adds	r3, r1, #1
 800f21a:	9303      	str	r3, [sp, #12]
 800f21c:	b342      	cbz	r2, 800f270 <__hexnan+0x88>
 800f21e:	4610      	mov	r0, r2
 800f220:	9105      	str	r1, [sp, #20]
 800f222:	9204      	str	r2, [sp, #16]
 800f224:	f7ff fd94 	bl	800ed50 <__hexdig_fun>
 800f228:	2800      	cmp	r0, #0
 800f22a:	d151      	bne.n	800f2d0 <__hexnan+0xe8>
 800f22c:	9a04      	ldr	r2, [sp, #16]
 800f22e:	9905      	ldr	r1, [sp, #20]
 800f230:	2a20      	cmp	r2, #32
 800f232:	d818      	bhi.n	800f266 <__hexnan+0x7e>
 800f234:	9b02      	ldr	r3, [sp, #8]
 800f236:	459b      	cmp	fp, r3
 800f238:	dd13      	ble.n	800f262 <__hexnan+0x7a>
 800f23a:	454c      	cmp	r4, r9
 800f23c:	d206      	bcs.n	800f24c <__hexnan+0x64>
 800f23e:	2d07      	cmp	r5, #7
 800f240:	dc04      	bgt.n	800f24c <__hexnan+0x64>
 800f242:	462a      	mov	r2, r5
 800f244:	4649      	mov	r1, r9
 800f246:	4620      	mov	r0, r4
 800f248:	f7ff ffa8 	bl	800f19c <L_shift>
 800f24c:	4544      	cmp	r4, r8
 800f24e:	d952      	bls.n	800f2f6 <__hexnan+0x10e>
 800f250:	2300      	movs	r3, #0
 800f252:	f1a4 0904 	sub.w	r9, r4, #4
 800f256:	f844 3c04 	str.w	r3, [r4, #-4]
 800f25a:	f8cd b008 	str.w	fp, [sp, #8]
 800f25e:	464c      	mov	r4, r9
 800f260:	461d      	mov	r5, r3
 800f262:	9903      	ldr	r1, [sp, #12]
 800f264:	e7d7      	b.n	800f216 <__hexnan+0x2e>
 800f266:	2a29      	cmp	r2, #41	@ 0x29
 800f268:	d157      	bne.n	800f31a <__hexnan+0x132>
 800f26a:	3102      	adds	r1, #2
 800f26c:	f8ca 1000 	str.w	r1, [sl]
 800f270:	f1bb 0f00 	cmp.w	fp, #0
 800f274:	d051      	beq.n	800f31a <__hexnan+0x132>
 800f276:	454c      	cmp	r4, r9
 800f278:	d206      	bcs.n	800f288 <__hexnan+0xa0>
 800f27a:	2d07      	cmp	r5, #7
 800f27c:	dc04      	bgt.n	800f288 <__hexnan+0xa0>
 800f27e:	462a      	mov	r2, r5
 800f280:	4649      	mov	r1, r9
 800f282:	4620      	mov	r0, r4
 800f284:	f7ff ff8a 	bl	800f19c <L_shift>
 800f288:	4544      	cmp	r4, r8
 800f28a:	d936      	bls.n	800f2fa <__hexnan+0x112>
 800f28c:	f1a8 0204 	sub.w	r2, r8, #4
 800f290:	4623      	mov	r3, r4
 800f292:	f853 1b04 	ldr.w	r1, [r3], #4
 800f296:	f842 1f04 	str.w	r1, [r2, #4]!
 800f29a:	429f      	cmp	r7, r3
 800f29c:	d2f9      	bcs.n	800f292 <__hexnan+0xaa>
 800f29e:	1b3b      	subs	r3, r7, r4
 800f2a0:	f023 0303 	bic.w	r3, r3, #3
 800f2a4:	3304      	adds	r3, #4
 800f2a6:	3401      	adds	r4, #1
 800f2a8:	3e03      	subs	r6, #3
 800f2aa:	42b4      	cmp	r4, r6
 800f2ac:	bf88      	it	hi
 800f2ae:	2304      	movhi	r3, #4
 800f2b0:	4443      	add	r3, r8
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f843 2b04 	str.w	r2, [r3], #4
 800f2b8:	429f      	cmp	r7, r3
 800f2ba:	d2fb      	bcs.n	800f2b4 <__hexnan+0xcc>
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	b91b      	cbnz	r3, 800f2c8 <__hexnan+0xe0>
 800f2c0:	4547      	cmp	r7, r8
 800f2c2:	d128      	bne.n	800f316 <__hexnan+0x12e>
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	603b      	str	r3, [r7, #0]
 800f2c8:	2005      	movs	r0, #5
 800f2ca:	b007      	add	sp, #28
 800f2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d0:	3501      	adds	r5, #1
 800f2d2:	2d08      	cmp	r5, #8
 800f2d4:	f10b 0b01 	add.w	fp, fp, #1
 800f2d8:	dd06      	ble.n	800f2e8 <__hexnan+0x100>
 800f2da:	4544      	cmp	r4, r8
 800f2dc:	d9c1      	bls.n	800f262 <__hexnan+0x7a>
 800f2de:	2300      	movs	r3, #0
 800f2e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2e4:	2501      	movs	r5, #1
 800f2e6:	3c04      	subs	r4, #4
 800f2e8:	6822      	ldr	r2, [r4, #0]
 800f2ea:	f000 000f 	and.w	r0, r0, #15
 800f2ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f2f2:	6020      	str	r0, [r4, #0]
 800f2f4:	e7b5      	b.n	800f262 <__hexnan+0x7a>
 800f2f6:	2508      	movs	r5, #8
 800f2f8:	e7b3      	b.n	800f262 <__hexnan+0x7a>
 800f2fa:	9b01      	ldr	r3, [sp, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d0dd      	beq.n	800f2bc <__hexnan+0xd4>
 800f300:	f1c3 0320 	rsb	r3, r3, #32
 800f304:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f308:	40da      	lsrs	r2, r3
 800f30a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f30e:	4013      	ands	r3, r2
 800f310:	f846 3c04 	str.w	r3, [r6, #-4]
 800f314:	e7d2      	b.n	800f2bc <__hexnan+0xd4>
 800f316:	3f04      	subs	r7, #4
 800f318:	e7d0      	b.n	800f2bc <__hexnan+0xd4>
 800f31a:	2004      	movs	r0, #4
 800f31c:	e7d5      	b.n	800f2ca <__hexnan+0xe2>

0800f31e <__ascii_mbtowc>:
 800f31e:	b082      	sub	sp, #8
 800f320:	b901      	cbnz	r1, 800f324 <__ascii_mbtowc+0x6>
 800f322:	a901      	add	r1, sp, #4
 800f324:	b142      	cbz	r2, 800f338 <__ascii_mbtowc+0x1a>
 800f326:	b14b      	cbz	r3, 800f33c <__ascii_mbtowc+0x1e>
 800f328:	7813      	ldrb	r3, [r2, #0]
 800f32a:	600b      	str	r3, [r1, #0]
 800f32c:	7812      	ldrb	r2, [r2, #0]
 800f32e:	1e10      	subs	r0, r2, #0
 800f330:	bf18      	it	ne
 800f332:	2001      	movne	r0, #1
 800f334:	b002      	add	sp, #8
 800f336:	4770      	bx	lr
 800f338:	4610      	mov	r0, r2
 800f33a:	e7fb      	b.n	800f334 <__ascii_mbtowc+0x16>
 800f33c:	f06f 0001 	mvn.w	r0, #1
 800f340:	e7f8      	b.n	800f334 <__ascii_mbtowc+0x16>

0800f342 <_realloc_r>:
 800f342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f346:	4607      	mov	r7, r0
 800f348:	4614      	mov	r4, r2
 800f34a:	460d      	mov	r5, r1
 800f34c:	b921      	cbnz	r1, 800f358 <_realloc_r+0x16>
 800f34e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f352:	4611      	mov	r1, r2
 800f354:	f7fd bce2 	b.w	800cd1c <_malloc_r>
 800f358:	b92a      	cbnz	r2, 800f366 <_realloc_r+0x24>
 800f35a:	f7fd fc6b 	bl	800cc34 <_free_r>
 800f35e:	4625      	mov	r5, r4
 800f360:	4628      	mov	r0, r5
 800f362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f366:	f000 f8b2 	bl	800f4ce <_malloc_usable_size_r>
 800f36a:	4284      	cmp	r4, r0
 800f36c:	4606      	mov	r6, r0
 800f36e:	d802      	bhi.n	800f376 <_realloc_r+0x34>
 800f370:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f374:	d8f4      	bhi.n	800f360 <_realloc_r+0x1e>
 800f376:	4621      	mov	r1, r4
 800f378:	4638      	mov	r0, r7
 800f37a:	f7fd fccf 	bl	800cd1c <_malloc_r>
 800f37e:	4680      	mov	r8, r0
 800f380:	b908      	cbnz	r0, 800f386 <_realloc_r+0x44>
 800f382:	4645      	mov	r5, r8
 800f384:	e7ec      	b.n	800f360 <_realloc_r+0x1e>
 800f386:	42b4      	cmp	r4, r6
 800f388:	4622      	mov	r2, r4
 800f38a:	4629      	mov	r1, r5
 800f38c:	bf28      	it	cs
 800f38e:	4632      	movcs	r2, r6
 800f390:	f7ff fc44 	bl	800ec1c <memcpy>
 800f394:	4629      	mov	r1, r5
 800f396:	4638      	mov	r0, r7
 800f398:	f7fd fc4c 	bl	800cc34 <_free_r>
 800f39c:	e7f1      	b.n	800f382 <_realloc_r+0x40>

0800f39e <__ascii_wctomb>:
 800f39e:	4603      	mov	r3, r0
 800f3a0:	4608      	mov	r0, r1
 800f3a2:	b141      	cbz	r1, 800f3b6 <__ascii_wctomb+0x18>
 800f3a4:	2aff      	cmp	r2, #255	@ 0xff
 800f3a6:	d904      	bls.n	800f3b2 <__ascii_wctomb+0x14>
 800f3a8:	228a      	movs	r2, #138	@ 0x8a
 800f3aa:	601a      	str	r2, [r3, #0]
 800f3ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3b0:	4770      	bx	lr
 800f3b2:	700a      	strb	r2, [r1, #0]
 800f3b4:	2001      	movs	r0, #1
 800f3b6:	4770      	bx	lr

0800f3b8 <__swhatbuf_r>:
 800f3b8:	b570      	push	{r4, r5, r6, lr}
 800f3ba:	460c      	mov	r4, r1
 800f3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3c0:	2900      	cmp	r1, #0
 800f3c2:	b096      	sub	sp, #88	@ 0x58
 800f3c4:	4615      	mov	r5, r2
 800f3c6:	461e      	mov	r6, r3
 800f3c8:	da0d      	bge.n	800f3e6 <__swhatbuf_r+0x2e>
 800f3ca:	89a3      	ldrh	r3, [r4, #12]
 800f3cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f3d0:	f04f 0100 	mov.w	r1, #0
 800f3d4:	bf14      	ite	ne
 800f3d6:	2340      	movne	r3, #64	@ 0x40
 800f3d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f3dc:	2000      	movs	r0, #0
 800f3de:	6031      	str	r1, [r6, #0]
 800f3e0:	602b      	str	r3, [r5, #0]
 800f3e2:	b016      	add	sp, #88	@ 0x58
 800f3e4:	bd70      	pop	{r4, r5, r6, pc}
 800f3e6:	466a      	mov	r2, sp
 800f3e8:	f000 f848 	bl	800f47c <_fstat_r>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	dbec      	blt.n	800f3ca <__swhatbuf_r+0x12>
 800f3f0:	9901      	ldr	r1, [sp, #4]
 800f3f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f3f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f3fa:	4259      	negs	r1, r3
 800f3fc:	4159      	adcs	r1, r3
 800f3fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f402:	e7eb      	b.n	800f3dc <__swhatbuf_r+0x24>

0800f404 <__smakebuf_r>:
 800f404:	898b      	ldrh	r3, [r1, #12]
 800f406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f408:	079d      	lsls	r5, r3, #30
 800f40a:	4606      	mov	r6, r0
 800f40c:	460c      	mov	r4, r1
 800f40e:	d507      	bpl.n	800f420 <__smakebuf_r+0x1c>
 800f410:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f414:	6023      	str	r3, [r4, #0]
 800f416:	6123      	str	r3, [r4, #16]
 800f418:	2301      	movs	r3, #1
 800f41a:	6163      	str	r3, [r4, #20]
 800f41c:	b003      	add	sp, #12
 800f41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f420:	ab01      	add	r3, sp, #4
 800f422:	466a      	mov	r2, sp
 800f424:	f7ff ffc8 	bl	800f3b8 <__swhatbuf_r>
 800f428:	9f00      	ldr	r7, [sp, #0]
 800f42a:	4605      	mov	r5, r0
 800f42c:	4639      	mov	r1, r7
 800f42e:	4630      	mov	r0, r6
 800f430:	f7fd fc74 	bl	800cd1c <_malloc_r>
 800f434:	b948      	cbnz	r0, 800f44a <__smakebuf_r+0x46>
 800f436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f43a:	059a      	lsls	r2, r3, #22
 800f43c:	d4ee      	bmi.n	800f41c <__smakebuf_r+0x18>
 800f43e:	f023 0303 	bic.w	r3, r3, #3
 800f442:	f043 0302 	orr.w	r3, r3, #2
 800f446:	81a3      	strh	r3, [r4, #12]
 800f448:	e7e2      	b.n	800f410 <__smakebuf_r+0xc>
 800f44a:	89a3      	ldrh	r3, [r4, #12]
 800f44c:	6020      	str	r0, [r4, #0]
 800f44e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f452:	81a3      	strh	r3, [r4, #12]
 800f454:	9b01      	ldr	r3, [sp, #4]
 800f456:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f45a:	b15b      	cbz	r3, 800f474 <__smakebuf_r+0x70>
 800f45c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f460:	4630      	mov	r0, r6
 800f462:	f000 f81d 	bl	800f4a0 <_isatty_r>
 800f466:	b128      	cbz	r0, 800f474 <__smakebuf_r+0x70>
 800f468:	89a3      	ldrh	r3, [r4, #12]
 800f46a:	f023 0303 	bic.w	r3, r3, #3
 800f46e:	f043 0301 	orr.w	r3, r3, #1
 800f472:	81a3      	strh	r3, [r4, #12]
 800f474:	89a3      	ldrh	r3, [r4, #12]
 800f476:	431d      	orrs	r5, r3
 800f478:	81a5      	strh	r5, [r4, #12]
 800f47a:	e7cf      	b.n	800f41c <__smakebuf_r+0x18>

0800f47c <_fstat_r>:
 800f47c:	b538      	push	{r3, r4, r5, lr}
 800f47e:	4d07      	ldr	r5, [pc, #28]	@ (800f49c <_fstat_r+0x20>)
 800f480:	2300      	movs	r3, #0
 800f482:	4604      	mov	r4, r0
 800f484:	4608      	mov	r0, r1
 800f486:	4611      	mov	r1, r2
 800f488:	602b      	str	r3, [r5, #0]
 800f48a:	f7f1 ffc3 	bl	8001414 <_fstat>
 800f48e:	1c43      	adds	r3, r0, #1
 800f490:	d102      	bne.n	800f498 <_fstat_r+0x1c>
 800f492:	682b      	ldr	r3, [r5, #0]
 800f494:	b103      	cbz	r3, 800f498 <_fstat_r+0x1c>
 800f496:	6023      	str	r3, [r4, #0]
 800f498:	bd38      	pop	{r3, r4, r5, pc}
 800f49a:	bf00      	nop
 800f49c:	240034ec 	.word	0x240034ec

0800f4a0 <_isatty_r>:
 800f4a0:	b538      	push	{r3, r4, r5, lr}
 800f4a2:	4d06      	ldr	r5, [pc, #24]	@ (800f4bc <_isatty_r+0x1c>)
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	4604      	mov	r4, r0
 800f4a8:	4608      	mov	r0, r1
 800f4aa:	602b      	str	r3, [r5, #0]
 800f4ac:	f7f1 ffc2 	bl	8001434 <_isatty>
 800f4b0:	1c43      	adds	r3, r0, #1
 800f4b2:	d102      	bne.n	800f4ba <_isatty_r+0x1a>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	b103      	cbz	r3, 800f4ba <_isatty_r+0x1a>
 800f4b8:	6023      	str	r3, [r4, #0]
 800f4ba:	bd38      	pop	{r3, r4, r5, pc}
 800f4bc:	240034ec 	.word	0x240034ec

0800f4c0 <abort>:
 800f4c0:	b508      	push	{r3, lr}
 800f4c2:	2006      	movs	r0, #6
 800f4c4:	f000 f834 	bl	800f530 <raise>
 800f4c8:	2001      	movs	r0, #1
 800f4ca:	f7f1 ff53 	bl	8001374 <_exit>

0800f4ce <_malloc_usable_size_r>:
 800f4ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4d2:	1f18      	subs	r0, r3, #4
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	bfbc      	itt	lt
 800f4d8:	580b      	ldrlt	r3, [r1, r0]
 800f4da:	18c0      	addlt	r0, r0, r3
 800f4dc:	4770      	bx	lr

0800f4de <_raise_r>:
 800f4de:	291f      	cmp	r1, #31
 800f4e0:	b538      	push	{r3, r4, r5, lr}
 800f4e2:	4605      	mov	r5, r0
 800f4e4:	460c      	mov	r4, r1
 800f4e6:	d904      	bls.n	800f4f2 <_raise_r+0x14>
 800f4e8:	2316      	movs	r3, #22
 800f4ea:	6003      	str	r3, [r0, #0]
 800f4ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f4f0:	bd38      	pop	{r3, r4, r5, pc}
 800f4f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f4f4:	b112      	cbz	r2, 800f4fc <_raise_r+0x1e>
 800f4f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4fa:	b94b      	cbnz	r3, 800f510 <_raise_r+0x32>
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	f000 f831 	bl	800f564 <_getpid_r>
 800f502:	4622      	mov	r2, r4
 800f504:	4601      	mov	r1, r0
 800f506:	4628      	mov	r0, r5
 800f508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f50c:	f000 b818 	b.w	800f540 <_kill_r>
 800f510:	2b01      	cmp	r3, #1
 800f512:	d00a      	beq.n	800f52a <_raise_r+0x4c>
 800f514:	1c59      	adds	r1, r3, #1
 800f516:	d103      	bne.n	800f520 <_raise_r+0x42>
 800f518:	2316      	movs	r3, #22
 800f51a:	6003      	str	r3, [r0, #0]
 800f51c:	2001      	movs	r0, #1
 800f51e:	e7e7      	b.n	800f4f0 <_raise_r+0x12>
 800f520:	2100      	movs	r1, #0
 800f522:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f526:	4620      	mov	r0, r4
 800f528:	4798      	blx	r3
 800f52a:	2000      	movs	r0, #0
 800f52c:	e7e0      	b.n	800f4f0 <_raise_r+0x12>
	...

0800f530 <raise>:
 800f530:	4b02      	ldr	r3, [pc, #8]	@ (800f53c <raise+0xc>)
 800f532:	4601      	mov	r1, r0
 800f534:	6818      	ldr	r0, [r3, #0]
 800f536:	f7ff bfd2 	b.w	800f4de <_raise_r>
 800f53a:	bf00      	nop
 800f53c:	2400001c 	.word	0x2400001c

0800f540 <_kill_r>:
 800f540:	b538      	push	{r3, r4, r5, lr}
 800f542:	4d07      	ldr	r5, [pc, #28]	@ (800f560 <_kill_r+0x20>)
 800f544:	2300      	movs	r3, #0
 800f546:	4604      	mov	r4, r0
 800f548:	4608      	mov	r0, r1
 800f54a:	4611      	mov	r1, r2
 800f54c:	602b      	str	r3, [r5, #0]
 800f54e:	f7f1 ff01 	bl	8001354 <_kill>
 800f552:	1c43      	adds	r3, r0, #1
 800f554:	d102      	bne.n	800f55c <_kill_r+0x1c>
 800f556:	682b      	ldr	r3, [r5, #0]
 800f558:	b103      	cbz	r3, 800f55c <_kill_r+0x1c>
 800f55a:	6023      	str	r3, [r4, #0]
 800f55c:	bd38      	pop	{r3, r4, r5, pc}
 800f55e:	bf00      	nop
 800f560:	240034ec 	.word	0x240034ec

0800f564 <_getpid_r>:
 800f564:	f7f1 beee 	b.w	8001344 <_getpid>

0800f568 <_init>:
 800f568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56a:	bf00      	nop
 800f56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f56e:	bc08      	pop	{r3}
 800f570:	469e      	mov	lr, r3
 800f572:	4770      	bx	lr

0800f574 <_fini>:
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f576:	bf00      	nop
 800f578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f57a:	bc08      	pop	{r3}
 800f57c:	469e      	mov	lr, r3
 800f57e:	4770      	bx	lr
