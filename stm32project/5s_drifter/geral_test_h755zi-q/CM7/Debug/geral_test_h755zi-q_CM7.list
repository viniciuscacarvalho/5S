
geral_test_h755zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c16c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800c40c  0800c40c  0000d40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c614  0800c614  0000e070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c614  0800c614  0000d614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c61c  0800c61c  0000e070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c61c  0800c61c  0000d61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c620  0800c620  0000d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  0800c624  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ca8  24000070  0800c694  0000e070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004d18  0800c694  0000ed18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bee2  00000000  00000000  0000e09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058cd  00000000  00000000  00039f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002138  00000000  00000000  0003f850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000197f  00000000  00000000  00041988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000432b1  00000000  00000000  00043307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bc50  00000000  00000000  000865b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ad699  00000000  00000000  000b2208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025f8a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092ac  00000000  00000000  0025f8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00268b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c3f4 	.word	0x0800c3f4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800c3f4 	.word	0x0800c3f4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800085c:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_ADC1_Init+0xec>)
 800085e:	4a32      	ldr	r2, [pc, #200]	@ (8000928 <MX_ADC1_Init+0xf0>)
 8000860:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000864:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000868:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800086a:	4b2e      	ldr	r3, [pc, #184]	@ (8000924 <MX_ADC1_Init+0xec>)
 800086c:	2210      	movs	r2, #16
 800086e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000878:	2204      	movs	r2, #4
 800087a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087c:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <MX_ADC1_Init+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000882:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000884:	2200      	movs	r2, #0
 8000886:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000888:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_ADC1_Init+0xec>)
 800088a:	2201      	movs	r2, #1
 800088c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <MX_ADC1_Init+0xec>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008a0:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008bc:	2201      	movs	r2, #1
 80008be:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c0:	4818      	ldr	r0, [pc, #96]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008c2:	f001 f81b 	bl	80018fc <HAL_ADC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008cc:	f000 faa6 	bl	8000e1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008dc:	f001 ffa8 	bl	8002830 <HAL_ADCEx_MultiModeConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008e6:	f000 fa99 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_ADC1_Init+0xf4>)
 80008ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ee:	2306      	movs	r3, #6
 80008f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008fc:	2304      	movs	r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_ADC1_Init+0xec>)
 800090e:	f001 fae3 	bl	8001ed8 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000918:	f000 fa80 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	@ 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2400008c 	.word	0x2400008c
 8000928:	40022000 	.word	0x40022000
 800092c:	3ef08000 	.word	0x3ef08000

08000930 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0ba      	sub	sp, #232	@ 0xe8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	22c0      	movs	r2, #192	@ 0xc0
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f00a ff2a 	bl	800b7aa <memset>
  if(adcHandle->Instance==ADC1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a08 <HAL_ADC_MspInit+0xd8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d14f      	bne.n	8000a00 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000960:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000970:	230a      	movs	r3, #10
 8000972:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000980:	23c0      	movs	r3, #192	@ 0xc0
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000984:	2320      	movs	r3, #32
 8000986:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000988:	2300      	movs	r3, #0
 800098a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fb68 	bl	800406c <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80009a2:	f000 fa3b 	bl	8000e1c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009ac:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009ae:	f043 0320 	orr.w	r3, r3, #32
 80009b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009e2:	2308      	movs	r3, #8
 80009e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <HAL_ADC_MspInit+0xe0>)
 80009fc:	f002 f8d6 	bl	8002bac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a00:	bf00      	nop
 8000a02:	37e8      	adds	r7, #232	@ 0xe8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40022000 	.word	0x40022000
 8000a0c:	58024400 	.word	0x58024400
 8000a10:	58020000 	.word	0x58020000

08000a14 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idle */
  idleHandle = osThreadNew(idle_task, NULL, &idle_attributes);
 8000a18:	4a1c      	ldr	r2, [pc, #112]	@ (8000a8c <MX_FREERTOS_Init+0x78>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	481c      	ldr	r0, [pc, #112]	@ (8000a90 <MX_FREERTOS_Init+0x7c>)
 8000a1e:	f007 ffc9 	bl	80089b4 <osThreadNew>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <MX_FREERTOS_Init+0x80>)
 8000a26:	6013      	str	r3, [r2, #0]

  /* creation of nb_iot */
  nb_iotHandle = osThreadNew(nb_iot_task, NULL, &nb_iot_attributes);
 8000a28:	4a1b      	ldr	r2, [pc, #108]	@ (8000a98 <MX_FREERTOS_Init+0x84>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	481b      	ldr	r0, [pc, #108]	@ (8000a9c <MX_FREERTOS_Init+0x88>)
 8000a2e:	f007 ffc1 	bl	80089b4 <osThreadNew>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa0 <MX_FREERTOS_Init+0x8c>)
 8000a36:	6013      	str	r3, [r2, #0]

  /* creation of cnss */
  cnssHandle = osThreadNew(cnss_task, NULL, &cnss_attributes);
 8000a38:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa4 <MX_FREERTOS_Init+0x90>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	481a      	ldr	r0, [pc, #104]	@ (8000aa8 <MX_FREERTOS_Init+0x94>)
 8000a3e:	f007 ffb9 	bl	80089b4 <osThreadNew>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a19      	ldr	r2, [pc, #100]	@ (8000aac <MX_FREERTOS_Init+0x98>)
 8000a46:	6013      	str	r3, [r2, #0]

  /* creation of sd_card */
  sd_cardHandle = osThreadNew(sd_card_task, NULL, &sd_card_attributes);
 8000a48:	4a19      	ldr	r2, [pc, #100]	@ (8000ab0 <MX_FREERTOS_Init+0x9c>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4819      	ldr	r0, [pc, #100]	@ (8000ab4 <MX_FREERTOS_Init+0xa0>)
 8000a4e:	f007 ffb1 	bl	80089b4 <osThreadNew>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a18      	ldr	r2, [pc, #96]	@ (8000ab8 <MX_FREERTOS_Init+0xa4>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* creation of temp */
  tempHandle = osThreadNew(temp_task, NULL, &temp_attributes);
 8000a58:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <MX_FREERTOS_Init+0xa8>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4818      	ldr	r0, [pc, #96]	@ (8000ac0 <MX_FREERTOS_Init+0xac>)
 8000a5e:	f007 ffa9 	bl	80089b4 <osThreadNew>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <MX_FREERTOS_Init+0xb0>)
 8000a66:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(imu_task, NULL, &imu_attributes);
 8000a68:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <MX_FREERTOS_Init+0xb4>)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4817      	ldr	r0, [pc, #92]	@ (8000acc <MX_FREERTOS_Init+0xb8>)
 8000a6e:	f007 ffa1 	bl	80089b4 <osThreadNew>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4a16      	ldr	r2, [pc, #88]	@ (8000ad0 <MX_FREERTOS_Init+0xbc>)
 8000a76:	6013      	str	r3, [r2, #0]

  /* creation of batterie */
  batterieHandle = osThreadNew(batterie_task, NULL, &batterie_attributes);
 8000a78:	4a16      	ldr	r2, [pc, #88]	@ (8000ad4 <MX_FREERTOS_Init+0xc0>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4816      	ldr	r0, [pc, #88]	@ (8000ad8 <MX_FREERTOS_Init+0xc4>)
 8000a7e:	f007 ff99 	bl	80089b4 <osThreadNew>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4a15      	ldr	r2, [pc, #84]	@ (8000adc <MX_FREERTOS_Init+0xc8>)
 8000a86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	0800c4bc 	.word	0x0800c4bc
 8000a90:	0800b45d 	.word	0x0800b45d
 8000a94:	240000f0 	.word	0x240000f0
 8000a98:	0800c4e0 	.word	0x0800c4e0
 8000a9c:	0800b511 	.word	0x0800b511
 8000aa0:	240000f4 	.word	0x240000f4
 8000aa4:	0800c504 	.word	0x0800c504
 8000aa8:	0800b4b9 	.word	0x0800b4b9
 8000aac:	240000f8 	.word	0x240000f8
 8000ab0:	0800c528 	.word	0x0800c528
 8000ab4:	0800b535 	.word	0x0800b535
 8000ab8:	240000fc 	.word	0x240000fc
 8000abc:	0800c54c 	.word	0x0800c54c
 8000ac0:	0800b559 	.word	0x0800b559
 8000ac4:	24000100 	.word	0x24000100
 8000ac8:	0800c570 	.word	0x0800c570
 8000acc:	0800b4dd 	.word	0x0800b4dd
 8000ad0:	24000104 	.word	0x24000104
 8000ad4:	0800c594 	.word	0x0800c594
 8000ad8:	0800b469 	.word	0x0800b469
 8000adc:	24000108 	.word	0x24000108

08000ae0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b51      	ldr	r3, [pc, #324]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afc:	4a4f      	ldr	r2, [pc, #316]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b06:	4b4d      	ldr	r3, [pc, #308]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b49      	ldr	r3, [pc, #292]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1a:	4a48      	ldr	r2, [pc, #288]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b24:	4b45      	ldr	r3, [pc, #276]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b42      	ldr	r3, [pc, #264]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b38:	4a40      	ldr	r2, [pc, #256]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b42:	4b3e      	ldr	r3, [pc, #248]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b50:	4b3a      	ldr	r3, [pc, #232]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b56:	4a39      	ldr	r2, [pc, #228]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b60:	4b36      	ldr	r3, [pc, #216]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6e:	4b33      	ldr	r3, [pc, #204]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b74:	4a31      	ldr	r2, [pc, #196]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b8c:	2332      	movs	r3, #50	@ 0x32
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4826      	ldr	r0, [pc, #152]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000ba8:	f002 f800 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bac:	2386      	movs	r3, #134	@ 0x86
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481f      	ldr	r0, [pc, #124]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000bc8:	f001 fff0 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bde:	230b      	movs	r3, #11
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4817      	ldr	r0, [pc, #92]	@ (8000c48 <MX_GPIO_Init+0x168>)
 8000bea:	f001 ffdf 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bee:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c00:	230a      	movs	r3, #10
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000c0c:	f001 ffce 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c10:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c22:	230b      	movs	r3, #11
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4807      	ldr	r0, [pc, #28]	@ (8000c4c <MX_GPIO_Init+0x16c>)
 8000c2e:	f001 ffbd 	bl	8002bac <HAL_GPIO_Init>

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	@ 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58020800 	.word	0x58020800
 8000c44:	58020000 	.word	0x58020000
 8000c48:	58020400 	.word	0x58020400
 8000c4c:	58021800 	.word	0x58021800

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c5a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c5c:	bf00      	nop
 8000c5e:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <main+0xac>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d004      	beq.n	8000c74 <main+0x24>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dcf4      	bgt.n	8000c5e <main+0xe>
  if ( timeout < 0 )
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	da01      	bge.n	8000c7e <main+0x2e>
  {
  Error_Handler();
 8000c7a:	f000 f8cf 	bl	8000e1c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7e:	f000 fbe1 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c82:	f000 f83d 	bl	8000d00 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <main+0xac>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <main+0xac>)
 8000c8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <main+0xac>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f002 f931 	bl	8002f0c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	f002 f947 	bl	8002f40 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000cb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cb6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000cb8:	bf00      	nop
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <main+0xac>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <main+0x80>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	dcf4      	bgt.n	8000cba <main+0x6a>
if ( timeout < 0 )
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da01      	bge.n	8000cda <main+0x8a>
{
Error_Handler();
 8000cd6:	f000 f8a1 	bl	8000e1c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cda:	f7ff ff01 	bl	8000ae0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cde:	f000 f8a3 	bl	8000e28 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ce2:	f000 facd 	bl	8001280 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000ce6:	f7ff fda7 	bl	8000838 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cea:	f007 fe19 	bl	8008920 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000cee:	f7ff fe91 	bl	8000a14 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cf2:	f007 fe39 	bl	8008968 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf6:	bf00      	nop
 8000cf8:	e7fd      	b.n	8000cf6 <main+0xa6>
 8000cfa:	bf00      	nop
 8000cfc:	58024400 	.word	0x58024400

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b09c      	sub	sp, #112	@ 0x70
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0a:	224c      	movs	r2, #76	@ 0x4c
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f00a fd4b 	bl	800b7aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2220      	movs	r2, #32
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00a fd45 	bl	800b7aa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d20:	2004      	movs	r0, #4
 8000d22:	f002 f921 	bl	8002f68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b31      	ldr	r3, [pc, #196]	@ (8000df0 <SystemClock_Config+0xf0>)
 8000d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2e:	4a30      	ldr	r2, [pc, #192]	@ (8000df0 <SystemClock_Config+0xf0>)
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d36:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <SystemClock_Config+0xf0>)
 8000d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <SystemClock_Config+0xf4>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d48:	4a2a      	ldr	r2, [pc, #168]	@ (8000df4 <SystemClock_Config+0xf4>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <SystemClock_Config+0xf4>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d5c:	bf00      	nop
 8000d5e:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <SystemClock_Config+0xf4>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d6a:	d1f8      	bne.n	8000d5e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d74:	2340      	movs	r3, #64	@ 0x40
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d80:	2304      	movs	r3, #4
 8000d82:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d84:	230a      	movs	r3, #10
 8000d86:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d94:	230c      	movs	r3, #12
 8000d96:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 f939 	bl	800301c <HAL_RCC_OscConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000db0:	f000 f834 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db4:	233f      	movs	r3, #63	@ 0x3f
 8000db6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dc8:	2340      	movs	r3, #64	@ 0x40
 8000dca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 fd79 	bl	80038d0 <HAL_RCC_ClockConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000de4:	f000 f81a 	bl	8000e1c <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3770      	adds	r7, #112	@ 0x70
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58000400 	.word	0x58000400
 8000df4:	58024800 	.word	0x58024800

08000df8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d101      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e0a:	f000 fb57 	bl	80014bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40010000 	.word	0x40010000

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <Error_Handler+0x8>

08000e28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e2e:	4a28      	ldr	r2, [pc, #160]	@ (8000ed0 <MX_SPI1_Init+0xa8>)
 8000e30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e32:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e34:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3a:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e40:	4b22      	ldr	r3, [pc, #136]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e42:	2203      	movs	r2, #3
 8000e44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e46:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e78:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_SPI1_Init+0xa4>)
 8000eb8:	f005 fdd6 	bl	8006a68 <HAL_SPI_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000ec2:	f7ff ffab 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2400010c 	.word	0x2400010c
 8000ed0:	40013000 	.word	0x40013000

08000ed4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0bc      	sub	sp, #240	@ 0xf0
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	22c0      	movs	r2, #192	@ 0xc0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f00a fc58 	bl	800b7aa <memset>
  if(spiHandle->Instance==SPI1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a38      	ldr	r2, [pc, #224]	@ (8000fe0 <HAL_SPI_MspInit+0x10c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d168      	bne.n	8000fd6 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f14:	f107 0318 	add.w	r3, r7, #24
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 f8a7 	bl	800406c <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f24:	f7ff ff7a 	bl	8000e1c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f28:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f38:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b27      	ldr	r3, [pc, #156]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	4a25      	ldr	r2, [pc, #148]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f56:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <HAL_SPI_MspInit+0x110>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f82:	2360      	movs	r3, #96	@ 0x60
 8000f84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4810      	ldr	r0, [pc, #64]	@ (8000fe8 <HAL_SPI_MspInit+0x114>)
 8000fa8:	f001 fe00 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4806      	ldr	r0, [pc, #24]	@ (8000fec <HAL_SPI_MspInit+0x118>)
 8000fd2:	f001 fdeb 	bl	8002bac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	37f0      	adds	r7, #240	@ 0xf0
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40013000 	.word	0x40013000
 8000fe4:	58024400 	.word	0x58024400
 8000fe8:	58020000 	.word	0x58020000
 8000fec:	58020c00 	.word	0x58020c00

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <HAL_MspInit+0x38>)
 8000ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <HAL_MspInit+0x38>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_MspInit+0x38>)
 8001008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	210f      	movs	r1, #15
 8001018:	f06f 0001 	mvn.w	r0, #1
 800101c:	f001 fd9e 	bl	8002b5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	58024400 	.word	0x58024400

0800102c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	@ 0x38
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d842      	bhi.n	80010c0 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800103a:	2200      	movs	r2, #0
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	2019      	movs	r0, #25
 8001040:	f001 fd8c 	bl	8002b5c <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001044:	2019      	movs	r0, #25
 8001046:	f001 fda3 	bl	8002b90 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800104a:	4a23      	ldr	r2, [pc, #140]	@ (80010d8 <HAL_InitTick+0xac>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <HAL_InitTick+0xb0>)
 8001052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001056:	4a21      	ldr	r2, [pc, #132]	@ (80010dc <HAL_InitTick+0xb0>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001060:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <HAL_InitTick+0xb0>)
 8001062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800106e:	f107 020c 	add.w	r2, r7, #12
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f002 ffb5 	bl	8003fe8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800107e:	f002 ff9d 	bl	8003fbc <HAL_RCC_GetPCLK2Freq>
 8001082:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001086:	4a16      	ldr	r2, [pc, #88]	@ (80010e0 <HAL_InitTick+0xb4>)
 8001088:	fba2 2303 	umull	r2, r3, r2, r3
 800108c:	0c9b      	lsrs	r3, r3, #18
 800108e:	3b01      	subs	r3, #1
 8001090:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HAL_InitTick+0xb8>)
 8001094:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <HAL_InitTick+0xbc>)
 8001096:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <HAL_InitTick+0xb8>)
 800109a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800109e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010a0:	4a10      	ldr	r2, [pc, #64]	@ (80010e4 <HAL_InitTick+0xb8>)
 80010a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <HAL_InitTick+0xb8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <HAL_InitTick+0xb8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010b2:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <HAL_InitTick+0xb8>)
 80010b4:	f005 fe17 	bl	8006ce6 <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d107      	bne.n	80010ce <HAL_InitTick+0xa2>
 80010be:	e001      	b.n	80010c4 <HAL_InitTick+0x98>
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e005      	b.n	80010d0 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010c4:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <HAL_InitTick+0xb8>)
 80010c6:	f005 fe6f 	bl	8006da8 <HAL_TIM_Base_Start_IT>
 80010ca:	4603      	mov	r3, r0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3738      	adds	r7, #56	@ 0x38
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24000008 	.word	0x24000008
 80010dc:	58024400 	.word	0x58024400
 80010e0:	431bde83 	.word	0x431bde83
 80010e4:	24000194 	.word	0x24000194
 80010e8:	40010000 	.word	0x40010000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <NMI_Handler+0x4>

080010f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <UsageFault_Handler+0x4>

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <TIM1_UP_IRQHandler+0x10>)
 800112a:	f005 feb5 	bl	8006e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	24000194 	.word	0x24000194

08001138 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e00a      	b.n	8001160 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800114a:	f3af 8000 	nop.w
 800114e:	4601      	mov	r1, r0
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	60ba      	str	r2, [r7, #8]
 8001156:	b2ca      	uxtb	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf0      	blt.n	800114a <_read+0x12>
  }

  return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e009      	b.n	8001198 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	60ba      	str	r2, [r7, #8]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbf1      	blt.n	8001184 <_write+0x12>
  }
  return len;
 80011a0:	687b      	ldr	r3, [r7, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_close>:

int _close(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011d2:	605a      	str	r2, [r3, #4]
  return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_isatty>:

int _isatty(int file)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	@ (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f00a fb00 	bl	800b848 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	24080000 	.word	0x24080000
 8001274:	00000400 	.word	0x00000400
 8001278:	240001e0 	.word	0x240001e0
 800127c:	24004d18 	.word	0x24004d18

08001280 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001284:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 8001286:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <MX_USART3_UART_Init+0x94>)
 8001288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012ca:	f005 ffd3 	bl	8007274 <HAL_UART_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012d4:	f7ff fda2 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	480d      	ldr	r0, [pc, #52]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012dc:	f007 fa11 	bl	8008702 <HAL_UARTEx_SetTxFifoThreshold>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012e6:	f7ff fd99 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4808      	ldr	r0, [pc, #32]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012ee:	f007 fa46 	bl	800877e <HAL_UARTEx_SetRxFifoThreshold>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012f8:	f7ff fd90 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012fe:	f007 f9c7 	bl	8008690 <HAL_UARTEx_DisableFifoMode>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001308:	f7ff fd88 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	240001e4 	.word	0x240001e4
 8001314:	40004800 	.word	0x40004800

08001318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0ba      	sub	sp, #232	@ 0xe8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	22c0      	movs	r2, #192	@ 0xc0
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f00a fa36 	bl	800b7aa <memset>
  if(uartHandle->Instance==USART3)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a27      	ldr	r2, [pc, #156]	@ (80013e0 <HAL_UART_MspInit+0xc8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d146      	bne.n	80013d6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001348:	f04f 0202 	mov.w	r2, #2
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fe84 	bl	800406c <HAL_RCCEx_PeriphCLKConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800136a:	f7ff fd57 	bl	8000e1c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HAL_UART_MspInit+0xcc>)
 8001370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001374:	4a1b      	ldr	r2, [pc, #108]	@ (80013e4 <HAL_UART_MspInit+0xcc>)
 8001376:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800137a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <HAL_UART_MspInit+0xcc>)
 8001380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_UART_MspInit+0xcc>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001392:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <HAL_UART_MspInit+0xcc>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_UART_MspInit+0xcc>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013c4:	2307      	movs	r3, #7
 80013c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <HAL_UART_MspInit+0xd0>)
 80013d2:	f001 fbeb 	bl	8002bac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013d6:	bf00      	nop
 80013d8:	37e8      	adds	r7, #232	@ 0xe8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40004800 	.word	0x40004800
 80013e4:	58024400 	.word	0x58024400
 80013e8:	58020c00 	.word	0x58020c00

080013ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013ec:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001428 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80013f0:	f7ff fa0a 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013f4:	f7ff f95a 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	@ (8001430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	@ (800143c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f00a fa19 	bl	800b854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001422:	f7ff fc15 	bl	8000c50 <main>
  bx  lr
 8001426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800142c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001430:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001434:	0800c624 	.word	0x0800c624
  ldr r2, =_sbss
 8001438:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 800143c:	24004d18 	.word	0x24004d18

08001440 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC3_IRQHandler>
	...

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144a:	2003      	movs	r0, #3
 800144c:	f001 fb7b 	bl	8002b46 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001450:	f002 fbf4 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HAL_Init+0x68>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	4913      	ldr	r1, [pc, #76]	@ (80014b0 <HAL_Init+0x6c>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
 800146c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_Init+0x68>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <HAL_Init+0x6c>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	4a0b      	ldr	r2, [pc, #44]	@ (80014b4 <HAL_Init+0x70>)
 8001486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001488:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <HAL_Init+0x74>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148e:	200f      	movs	r0, #15
 8001490:	f7ff fdcc 	bl	800102c <HAL_InitTick>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e002      	b.n	80014a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800149e:	f7ff fda7 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	58024400 	.word	0x58024400
 80014b0:	0800c4ac 	.word	0x0800c4ac
 80014b4:	24000004 	.word	0x24000004
 80014b8:	24000000 	.word	0x24000000

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2400000c 	.word	0x2400000c
 80014e0:	24000278 	.word	0x24000278

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	24000278 	.word	0x24000278

080014fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <HAL_GetREVID+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	0c1b      	lsrs	r3, r3, #16
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	5c001000 	.word	0x5c001000

08001514 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	609a      	str	r2, [r3, #8]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800158c:	2b00      	cmp	r3, #0
 800158e:	d107      	bne.n	80015a0 <LL_ADC_SetChannelPreselection+0x24>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	0e9b      	lsrs	r3, r3, #26
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	2201      	movs	r2, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	e015      	b.n	80015cc <LL_ADC_SetChannelPreselection+0x50>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80015b6:	2320      	movs	r3, #32
 80015b8:	e003      	b.n	80015c2 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	fab3 f383 	clz	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2201      	movs	r2, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	69d2      	ldr	r2, [r2, #28]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80015d6:	bf00      	nop
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b087      	sub	sp, #28
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3360      	adds	r3, #96	@ 0x60
 80015f4:	461a      	mov	r2, r3
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	430b      	orrs	r3, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	431a      	orrs	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	611a      	str	r2, [r3, #16]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3360      	adds	r3, #96	@ 0x60
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	431a      	orrs	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	601a      	str	r2, [r3, #0]
  }
}
 800167e:	bf00      	nop
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800168a:	b480      	push	{r7}
 800168c:	b087      	sub	sp, #28
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3330      	adds	r3, #48	@ 0x30
 800169a:	461a      	mov	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	4413      	add	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	211f      	movs	r1, #31
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	401a      	ands	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	0e9b      	lsrs	r3, r3, #26
 80016c2:	f003 011f 	and.w	r1, r3, #31
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	431a      	orrs	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016d6:	bf00      	nop
 80016d8:	371c      	adds	r7, #28
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b087      	sub	sp, #28
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3314      	adds	r3, #20
 80016f2:	461a      	mov	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	0e5b      	lsrs	r3, r3, #25
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	4413      	add	r3, r2
 8001700:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	0d1b      	lsrs	r3, r3, #20
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	2107      	movs	r1, #7
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	401a      	ands	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	0d1b      	lsrs	r3, r3, #20
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	431a      	orrs	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800172c:	bf00      	nop
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0318 	and.w	r3, r3, #24
 800175a:	4908      	ldr	r1, [pc, #32]	@ (800177c <LL_ADC_SetChannelSingleDiff+0x44>)
 800175c:	40d9      	lsrs	r1, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	400b      	ands	r3, r1
 8001762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001766:	431a      	orrs	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	000fffff 	.word	0x000fffff

08001780 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 031f 	and.w	r3, r3, #31
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <LL_ADC_DisableDeepPowerDown+0x20>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6093      	str	r3, [r2, #8]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	5fffffc0 	.word	0x5fffffc0

080017c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017d4:	d101      	bne.n	80017da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <LL_ADC_EnableInternalRegulator+0x24>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	6fffffc0 	.word	0x6fffffc0

08001810 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001824:	d101      	bne.n	800182a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	4b05      	ldr	r3, [pc, #20]	@ (800185c <LL_ADC_Enable+0x24>)
 8001846:	4013      	ands	r3, r2
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	7fffffc0 	.word	0x7fffffc0

08001860 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <LL_ADC_IsEnabled+0x18>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <LL_ADC_IsEnabled+0x1a>
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <LL_ADC_REG_StartConversion+0x24>)
 8001896:	4013      	ands	r3, r2
 8001898:	f043 0204 	orr.w	r2, r3, #4
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	7fffffc0 	.word	0x7fffffc0

080018b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d101      	bne.n	80018c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d101      	bne.n	80018ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b089      	sub	sp, #36	@ 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e18f      	b.n	8001c36 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001920:	2b00      	cmp	r3, #0
 8001922:	d109      	bne.n	8001938 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff f803 	bl	8000930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff3f 	bl	80017c0 <LL_ADC_IsDeepPowerDownEnabled>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff25 	bl	800179c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff5a 	bl	8001810 <LL_ADC_IsInternalRegulatorEnabled>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d114      	bne.n	800198c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff3e 	bl	80017e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800196c:	4b87      	ldr	r3, [pc, #540]	@ (8001b8c <HAL_ADC_Init+0x290>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	4a87      	ldr	r2, [pc, #540]	@ (8001b90 <HAL_ADC_Init+0x294>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	099b      	lsrs	r3, r3, #6
 800197a:	3301      	adds	r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800197e:	e002      	b.n	8001986 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	3b01      	subs	r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f9      	bne.n	8001980 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff3d 	bl	8001810 <LL_ADC_IsInternalRegulatorEnabled>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10d      	bne.n	80019b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a0:	f043 0210 	orr.w	r2, r3, #16
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ac:	f043 0201 	orr.w	r2, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff77 	bl	80018b0 <LL_ADC_REG_IsConversionOngoing>
 80019c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f040 8129 	bne.w	8001c24 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f040 8125 	bne.w	8001c24 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019de:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019e2:	f043 0202 	orr.w	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff36 	bl	8001860 <LL_ADC_IsEnabled>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d136      	bne.n	8001a68 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a65      	ldr	r2, [pc, #404]	@ (8001b94 <HAL_ADC_Init+0x298>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d004      	beq.n	8001a0e <HAL_ADC_Init+0x112>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a63      	ldr	r2, [pc, #396]	@ (8001b98 <HAL_ADC_Init+0x29c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d10e      	bne.n	8001a2c <HAL_ADC_Init+0x130>
 8001a0e:	4861      	ldr	r0, [pc, #388]	@ (8001b94 <HAL_ADC_Init+0x298>)
 8001a10:	f7ff ff26 	bl	8001860 <LL_ADC_IsEnabled>
 8001a14:	4604      	mov	r4, r0
 8001a16:	4860      	ldr	r0, [pc, #384]	@ (8001b98 <HAL_ADC_Init+0x29c>)
 8001a18:	f7ff ff22 	bl	8001860 <LL_ADC_IsEnabled>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4323      	orrs	r3, r4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf0c      	ite	eq
 8001a24:	2301      	moveq	r3, #1
 8001a26:	2300      	movne	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	e008      	b.n	8001a3e <HAL_ADC_Init+0x142>
 8001a2c:	485b      	ldr	r0, [pc, #364]	@ (8001b9c <HAL_ADC_Init+0x2a0>)
 8001a2e:	f7ff ff17 	bl	8001860 <LL_ADC_IsEnabled>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d012      	beq.n	8001a68 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a53      	ldr	r2, [pc, #332]	@ (8001b94 <HAL_ADC_Init+0x298>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d004      	beq.n	8001a56 <HAL_ADC_Init+0x15a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a51      	ldr	r2, [pc, #324]	@ (8001b98 <HAL_ADC_Init+0x29c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Init+0x15e>
 8001a56:	4a52      	ldr	r2, [pc, #328]	@ (8001ba0 <HAL_ADC_Init+0x2a4>)
 8001a58:	e000      	b.n	8001a5c <HAL_ADC_Init+0x160>
 8001a5a:	4a52      	ldr	r2, [pc, #328]	@ (8001ba4 <HAL_ADC_Init+0x2a8>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f7ff fd56 	bl	8001514 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a68:	f7ff fd48 	bl	80014fc <HAL_GetREVID>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d914      	bls.n	8001aa0 <HAL_ADC_Init+0x1a4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b10      	cmp	r3, #16
 8001a7c:	d110      	bne.n	8001aa0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7d5b      	ldrb	r3, [r3, #21]
 8001a82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a88:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7f1b      	ldrb	r3, [r3, #28]
 8001a94:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a96:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a98:	f043 030c 	orr.w	r3, r3, #12
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	e00d      	b.n	8001abc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7d5b      	ldrb	r3, [r3, #21]
 8001aa4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aaa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ab0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7f1b      	ldrb	r3, [r3, #28]
 8001ab6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7f1b      	ldrb	r3, [r3, #28]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d106      	bne.n	8001ad2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	045b      	lsls	r3, r3, #17
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba8 <HAL_ADC_Init+0x2ac>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	69b9      	ldr	r1, [r7, #24]
 8001afe:	430b      	orrs	r3, r1
 8001b00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fed2 	bl	80018b0 <LL_ADC_REG_IsConversionOngoing>
 8001b0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fedf 	bl	80018d6 <LL_ADC_INJ_IsConversionOngoing>
 8001b18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d15f      	bne.n	8001be0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d15c      	bne.n	8001be0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7d1b      	ldrb	r3, [r3, #20]
 8001b2a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <HAL_ADC_Init+0x2b0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	69b9      	ldr	r1, [r7, #24]
 8001b44:	430b      	orrs	r3, r1
 8001b46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d130      	bne.n	8001bb4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <HAL_ADC_Init+0x2b4>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b66:	3a01      	subs	r2, #1
 8001b68:	0411      	lsls	r1, r2, #16
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b6e:	4311      	orrs	r1, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b74:	4311      	orrs	r1, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	e01c      	b.n	8001bc4 <HAL_ADC_Init+0x2c8>
 8001b8a:	bf00      	nop
 8001b8c:	24000000 	.word	0x24000000
 8001b90:	053e2d63 	.word	0x053e2d63
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40022100 	.word	0x40022100
 8001b9c:	58026000 	.word	0x58026000
 8001ba0:	40022300 	.word	0x40022300
 8001ba4:	58026300 	.word	0x58026300
 8001ba8:	fff0c003 	.word	0xfff0c003
 8001bac:	ffffbffc 	.word	0xffffbffc
 8001bb0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fcf6 	bl	80025cc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d10c      	bne.n	8001c02 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f023 010f 	bic.w	r1, r3, #15
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	1e5a      	subs	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c00:	e007      	b.n	8001c12 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 020f 	bic.w	r2, r2, #15
 8001c10:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c16:	f023 0303 	bic.w	r3, r3, #3
 8001c1a:	f043 0201 	orr.w	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c22:	e007      	b.n	8001c34 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c28:	f043 0210 	orr.w	r2, r3, #16
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c34:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	@ 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd90      	pop	{r4, r7, pc}
 8001c3e:	bf00      	nop

08001c40 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a92      	ldr	r2, [pc, #584]	@ (8001e98 <HAL_ADC_Start_IT+0x258>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_ADC_Start_IT+0x1c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a91      	ldr	r2, [pc, #580]	@ (8001e9c <HAL_ADC_Start_IT+0x25c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_ADC_Start_IT+0x20>
 8001c5c:	4b90      	ldr	r3, [pc, #576]	@ (8001ea0 <HAL_ADC_Start_IT+0x260>)
 8001c5e:	e000      	b.n	8001c62 <HAL_ADC_Start_IT+0x22>
 8001c60:	4b90      	ldr	r3, [pc, #576]	@ (8001ea4 <HAL_ADC_Start_IT+0x264>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fd8c 	bl	8001780 <LL_ADC_GetMultimode>
 8001c68:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fe1e 	bl	80018b0 <LL_ADC_REG_IsConversionOngoing>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 8118 	bne.w	8001eac <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_Start_IT+0x4a>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e113      	b.n	8001eb2 <HAL_ADC_Start_IT+0x272>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fc10 	bl	80024b8 <ADC_Enable>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 80f5 	bne.w	8001e8e <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ca8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea8 <HAL_ADC_Start_IT+0x268>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a78      	ldr	r2, [pc, #480]	@ (8001e9c <HAL_ADC_Start_IT+0x25c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d002      	beq.n	8001cc4 <HAL_ADC_Start_IT+0x84>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	e000      	b.n	8001cc6 <HAL_ADC_Start_IT+0x86>
 8001cc4:	4b74      	ldr	r3, [pc, #464]	@ (8001e98 <HAL_ADC_Start_IT+0x258>)
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d002      	beq.n	8001cd4 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	f023 0206 	bic.w	r2, r3, #6
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cf8:	e002      	b.n	8001d00 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	221c      	movs	r2, #28
 8001d06:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 021c 	bic.w	r2, r2, #28
 8001d1e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d108      	bne.n	8001d3a <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0208 	orr.w	r2, r2, #8
 8001d36:	605a      	str	r2, [r3, #4]
          break;
 8001d38:	e008      	b.n	8001d4c <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0204 	orr.w	r2, r2, #4
 8001d48:	605a      	str	r2, [r3, #4]
          break;
 8001d4a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d107      	bne.n	8001d64 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0210 	orr.w	r2, r2, #16
 8001d62:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a4c      	ldr	r2, [pc, #304]	@ (8001e9c <HAL_ADC_Start_IT+0x25c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d002      	beq.n	8001d74 <HAL_ADC_Start_IT+0x134>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e000      	b.n	8001d76 <HAL_ADC_Start_IT+0x136>
 8001d74:	4b48      	ldr	r3, [pc, #288]	@ (8001e98 <HAL_ADC_Start_IT+0x258>)
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d008      	beq.n	8001d90 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d002      	beq.n	8001d90 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b09      	cmp	r3, #9
 8001d8e:	d13a      	bne.n	8001e06 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d02d      	beq.n	8001dfa <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001da6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d110      	bne.n	8001dd8 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0220 	bic.w	r2, r2, #32
 8001dc4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dd4:	605a      	str	r2, [r3, #4]
              break;
 8001dd6:	e010      	b.n	8001dfa <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001de6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	605a      	str	r2, [r3, #4]
              break;
 8001df8:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fd42 	bl	8001888 <LL_ADC_REG_StartConversion>
 8001e04:	e054      	b.n	8001eb0 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a21      	ldr	r2, [pc, #132]	@ (8001e9c <HAL_ADC_Start_IT+0x25c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d002      	beq.n	8001e22 <HAL_ADC_Start_IT+0x1e2>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	e000      	b.n	8001e24 <HAL_ADC_Start_IT+0x1e4>
 8001e22:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <HAL_ADC_Start_IT+0x258>)
 8001e24:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d03e      	beq.n	8001eb0 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d110      	bne.n	8001e6c <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0220 	bic.w	r2, r2, #32
 8001e58:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e68:	605a      	str	r2, [r3, #4]
              break;
 8001e6a:	e021      	b.n	8001eb0 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e7a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	605a      	str	r2, [r3, #4]
              break;
 8001e8c:	e010      	b.n	8001eb0 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001e96:	e00b      	b.n	8001eb0 <HAL_ADC_Start_IT+0x270>
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40022100 	.word	0x40022100
 8001ea0:	40022300 	.word	0x40022300
 8001ea4:	58026300 	.word	0x58026300
 8001ea8:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001eac:	2302      	movs	r3, #2
 8001eae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop

08001ebc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b08d      	sub	sp, #52	@ 0x34
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a65      	ldr	r2, [pc, #404]	@ (8002088 <HAL_ADC_ConfigChannel+0x1b0>)
 8001ef2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x2a>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e2c7      	b.n	8002492 <HAL_ADC_ConfigChannel+0x5ba>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fcce 	bl	80018b0 <LL_ADC_REG_IsConversionOngoing>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 82ac 	bne.w	8002474 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db2c      	blt.n	8001f7e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d108      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x6a>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	e016      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x98>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	613b      	str	r3, [r7, #16]
  return result;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	e003      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	fab3 f383 	clz	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	69d1      	ldr	r1, [r2, #28]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6859      	ldr	r1, [r3, #4]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f7ff fb7d 	bl	800168a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fc8b 	bl	80018b0 <LL_ADC_REG_IsConversionOngoing>
 8001f9a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fc98 	bl	80018d6 <LL_ADC_INJ_IsConversionOngoing>
 8001fa6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 80b8 	bne.w	8002120 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 80b4 	bne.w	8002120 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f7ff fb8c 	bl	80016e2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fca:	4b30      	ldr	r3, [pc, #192]	@ (800208c <HAL_ADC_ConfigChannel+0x1b4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001fd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x118>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	e01d      	b.n	800202c <HAL_ADC_ConfigChannel+0x154>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10b      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x13e>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	e00a      	b.n	800202c <HAL_ADC_ConfigChannel+0x154>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b04      	cmp	r3, #4
 8002034:	d02c      	beq.n	8002090 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6919      	ldr	r1, [r3, #16]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	f7ff facd 	bl	80015e2 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6919      	ldr	r1, [r3, #16]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	7e5b      	ldrb	r3, [r3, #25]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d102      	bne.n	800205e <HAL_ADC_ConfigChannel+0x186>
 8002058:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800205c:	e000      	b.n	8002060 <HAL_ADC_ConfigChannel+0x188>
 800205e:	2300      	movs	r3, #0
 8002060:	461a      	mov	r2, r3
 8002062:	f7ff faf7 	bl	8001654 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6919      	ldr	r1, [r3, #16]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	7e1b      	ldrb	r3, [r3, #24]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_ADC_ConfigChannel+0x1a4>
 8002076:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800207a:	e000      	b.n	800207e <HAL_ADC_ConfigChannel+0x1a6>
 800207c:	2300      	movs	r3, #0
 800207e:	461a      	mov	r2, r3
 8002080:	f7ff facf 	bl	8001622 <LL_ADC_SetDataRightShift>
 8002084:	e04c      	b.n	8002120 <HAL_ADC_ConfigChannel+0x248>
 8002086:	bf00      	nop
 8002088:	47ff0000 	.word	0x47ff0000
 800208c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002096:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	069b      	lsls	r3, r3, #26
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d107      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020b2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	069b      	lsls	r3, r3, #26
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d107      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020d6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	069b      	lsls	r3, r3, #26
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d107      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020fa:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002102:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	069b      	lsls	r3, r3, #26
 800210c:	429a      	cmp	r2, r3
 800210e:	d107      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800211e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fb9b 	bl	8001860 <LL_ADC_IsEnabled>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	f040 81aa 	bne.w	8002486 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	461a      	mov	r2, r3
 8002140:	f7ff fafa 	bl	8001738 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a87      	ldr	r2, [pc, #540]	@ (8002368 <HAL_ADC_ConfigChannel+0x490>)
 800214a:	4293      	cmp	r3, r2
 800214c:	f040 809a 	bne.w	8002284 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4984      	ldr	r1, [pc, #528]	@ (800236c <HAL_ADC_ConfigChannel+0x494>)
 800215a:	428b      	cmp	r3, r1
 800215c:	d147      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x316>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4983      	ldr	r1, [pc, #524]	@ (8002370 <HAL_ADC_ConfigChannel+0x498>)
 8002164:	428b      	cmp	r3, r1
 8002166:	d040      	beq.n	80021ea <HAL_ADC_ConfigChannel+0x312>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4981      	ldr	r1, [pc, #516]	@ (8002374 <HAL_ADC_ConfigChannel+0x49c>)
 800216e:	428b      	cmp	r3, r1
 8002170:	d039      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x30e>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4980      	ldr	r1, [pc, #512]	@ (8002378 <HAL_ADC_ConfigChannel+0x4a0>)
 8002178:	428b      	cmp	r3, r1
 800217a:	d032      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x30a>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	497e      	ldr	r1, [pc, #504]	@ (800237c <HAL_ADC_ConfigChannel+0x4a4>)
 8002182:	428b      	cmp	r3, r1
 8002184:	d02b      	beq.n	80021de <HAL_ADC_ConfigChannel+0x306>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	497d      	ldr	r1, [pc, #500]	@ (8002380 <HAL_ADC_ConfigChannel+0x4a8>)
 800218c:	428b      	cmp	r3, r1
 800218e:	d024      	beq.n	80021da <HAL_ADC_ConfigChannel+0x302>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	497b      	ldr	r1, [pc, #492]	@ (8002384 <HAL_ADC_ConfigChannel+0x4ac>)
 8002196:	428b      	cmp	r3, r1
 8002198:	d01d      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x2fe>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	497a      	ldr	r1, [pc, #488]	@ (8002388 <HAL_ADC_ConfigChannel+0x4b0>)
 80021a0:	428b      	cmp	r3, r1
 80021a2:	d016      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x2fa>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4978      	ldr	r1, [pc, #480]	@ (800238c <HAL_ADC_ConfigChannel+0x4b4>)
 80021aa:	428b      	cmp	r3, r1
 80021ac:	d00f      	beq.n	80021ce <HAL_ADC_ConfigChannel+0x2f6>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4977      	ldr	r1, [pc, #476]	@ (8002390 <HAL_ADC_ConfigChannel+0x4b8>)
 80021b4:	428b      	cmp	r3, r1
 80021b6:	d008      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x2f2>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4975      	ldr	r1, [pc, #468]	@ (8002394 <HAL_ADC_ConfigChannel+0x4bc>)
 80021be:	428b      	cmp	r3, r1
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x2ee>
 80021c2:	4b75      	ldr	r3, [pc, #468]	@ (8002398 <HAL_ADC_ConfigChannel+0x4c0>)
 80021c4:	e05a      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 80021c6:	2300      	movs	r3, #0
 80021c8:	e058      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 80021ca:	4b74      	ldr	r3, [pc, #464]	@ (800239c <HAL_ADC_ConfigChannel+0x4c4>)
 80021cc:	e056      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 80021ce:	4b74      	ldr	r3, [pc, #464]	@ (80023a0 <HAL_ADC_ConfigChannel+0x4c8>)
 80021d0:	e054      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 80021d2:	4b6e      	ldr	r3, [pc, #440]	@ (800238c <HAL_ADC_ConfigChannel+0x4b4>)
 80021d4:	e052      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 80021d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002388 <HAL_ADC_ConfigChannel+0x4b0>)
 80021d8:	e050      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 80021da:	4b72      	ldr	r3, [pc, #456]	@ (80023a4 <HAL_ADC_ConfigChannel+0x4cc>)
 80021dc:	e04e      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 80021de:	4b72      	ldr	r3, [pc, #456]	@ (80023a8 <HAL_ADC_ConfigChannel+0x4d0>)
 80021e0:	e04c      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 80021e2:	4b72      	ldr	r3, [pc, #456]	@ (80023ac <HAL_ADC_ConfigChannel+0x4d4>)
 80021e4:	e04a      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 80021e6:	4b72      	ldr	r3, [pc, #456]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4d8>)
 80021e8:	e048      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e046      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4970      	ldr	r1, [pc, #448]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4dc>)
 80021f4:	428b      	cmp	r3, r1
 80021f6:	d140      	bne.n	800227a <HAL_ADC_ConfigChannel+0x3a2>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	495c      	ldr	r1, [pc, #368]	@ (8002370 <HAL_ADC_ConfigChannel+0x498>)
 80021fe:	428b      	cmp	r3, r1
 8002200:	d039      	beq.n	8002276 <HAL_ADC_ConfigChannel+0x39e>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	495b      	ldr	r1, [pc, #364]	@ (8002374 <HAL_ADC_ConfigChannel+0x49c>)
 8002208:	428b      	cmp	r3, r1
 800220a:	d032      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x39a>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4959      	ldr	r1, [pc, #356]	@ (8002378 <HAL_ADC_ConfigChannel+0x4a0>)
 8002212:	428b      	cmp	r3, r1
 8002214:	d02b      	beq.n	800226e <HAL_ADC_ConfigChannel+0x396>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4958      	ldr	r1, [pc, #352]	@ (800237c <HAL_ADC_ConfigChannel+0x4a4>)
 800221c:	428b      	cmp	r3, r1
 800221e:	d024      	beq.n	800226a <HAL_ADC_ConfigChannel+0x392>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4956      	ldr	r1, [pc, #344]	@ (8002380 <HAL_ADC_ConfigChannel+0x4a8>)
 8002226:	428b      	cmp	r3, r1
 8002228:	d01d      	beq.n	8002266 <HAL_ADC_ConfigChannel+0x38e>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4955      	ldr	r1, [pc, #340]	@ (8002384 <HAL_ADC_ConfigChannel+0x4ac>)
 8002230:	428b      	cmp	r3, r1
 8002232:	d016      	beq.n	8002262 <HAL_ADC_ConfigChannel+0x38a>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4953      	ldr	r1, [pc, #332]	@ (8002388 <HAL_ADC_ConfigChannel+0x4b0>)
 800223a:	428b      	cmp	r3, r1
 800223c:	d00f      	beq.n	800225e <HAL_ADC_ConfigChannel+0x386>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4952      	ldr	r1, [pc, #328]	@ (800238c <HAL_ADC_ConfigChannel+0x4b4>)
 8002244:	428b      	cmp	r3, r1
 8002246:	d008      	beq.n	800225a <HAL_ADC_ConfigChannel+0x382>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4951      	ldr	r1, [pc, #324]	@ (8002394 <HAL_ADC_ConfigChannel+0x4bc>)
 800224e:	428b      	cmp	r3, r1
 8002250:	d101      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x37e>
 8002252:	4b51      	ldr	r3, [pc, #324]	@ (8002398 <HAL_ADC_ConfigChannel+0x4c0>)
 8002254:	e012      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 8002256:	2300      	movs	r3, #0
 8002258:	e010      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 800225a:	4b51      	ldr	r3, [pc, #324]	@ (80023a0 <HAL_ADC_ConfigChannel+0x4c8>)
 800225c:	e00e      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 800225e:	4b4b      	ldr	r3, [pc, #300]	@ (800238c <HAL_ADC_ConfigChannel+0x4b4>)
 8002260:	e00c      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 8002262:	4b49      	ldr	r3, [pc, #292]	@ (8002388 <HAL_ADC_ConfigChannel+0x4b0>)
 8002264:	e00a      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 8002266:	4b4f      	ldr	r3, [pc, #316]	@ (80023a4 <HAL_ADC_ConfigChannel+0x4cc>)
 8002268:	e008      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 800226a:	4b4f      	ldr	r3, [pc, #316]	@ (80023a8 <HAL_ADC_ConfigChannel+0x4d0>)
 800226c:	e006      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 800226e:	4b4f      	ldr	r3, [pc, #316]	@ (80023ac <HAL_ADC_ConfigChannel+0x4d4>)
 8002270:	e004      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 8002272:	4b4f      	ldr	r3, [pc, #316]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4d8>)
 8002274:	e002      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_ADC_ConfigChannel+0x3a4>
 800227a:	2300      	movs	r3, #0
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f7ff f97c 	bl	800157c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f280 80fc 	bge.w	8002486 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a36      	ldr	r2, [pc, #216]	@ (800236c <HAL_ADC_ConfigChannel+0x494>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_ADC_ConfigChannel+0x3ca>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a45      	ldr	r2, [pc, #276]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4dc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x3ce>
 80022a2:	4b45      	ldr	r3, [pc, #276]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4e0>)
 80022a4:	e000      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x3d0>
 80022a6:	4b45      	ldr	r3, [pc, #276]	@ (80023bc <HAL_ADC_ConfigChannel+0x4e4>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f959 	bl	8001560 <LL_ADC_GetCommonPathInternalCh>
 80022ae:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2d      	ldr	r2, [pc, #180]	@ (800236c <HAL_ADC_ConfigChannel+0x494>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d004      	beq.n	80022c4 <HAL_ADC_ConfigChannel+0x3ec>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a3d      	ldr	r2, [pc, #244]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4dc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d10e      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x40a>
 80022c4:	4829      	ldr	r0, [pc, #164]	@ (800236c <HAL_ADC_ConfigChannel+0x494>)
 80022c6:	f7ff facb 	bl	8001860 <LL_ADC_IsEnabled>
 80022ca:	4604      	mov	r4, r0
 80022cc:	4839      	ldr	r0, [pc, #228]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4dc>)
 80022ce:	f7ff fac7 	bl	8001860 <LL_ADC_IsEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4323      	orrs	r3, r4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bf0c      	ite	eq
 80022da:	2301      	moveq	r3, #1
 80022dc:	2300      	movne	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	e008      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x41c>
 80022e2:	4837      	ldr	r0, [pc, #220]	@ (80023c0 <HAL_ADC_ConfigChannel+0x4e8>)
 80022e4:	f7ff fabc 	bl	8001860 <LL_ADC_IsEnabled>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80b3 	beq.w	8002460 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a31      	ldr	r2, [pc, #196]	@ (80023c4 <HAL_ADC_ConfigChannel+0x4ec>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d165      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x4f8>
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d160      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2b      	ldr	r2, [pc, #172]	@ (80023c0 <HAL_ADC_ConfigChannel+0x4e8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	f040 80b6 	bne.w	8002486 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a13      	ldr	r2, [pc, #76]	@ (800236c <HAL_ADC_ConfigChannel+0x494>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d004      	beq.n	800232e <HAL_ADC_ConfigChannel+0x456>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a22      	ldr	r2, [pc, #136]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4dc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x45a>
 800232e:	4a22      	ldr	r2, [pc, #136]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4e0>)
 8002330:	e000      	b.n	8002334 <HAL_ADC_ConfigChannel+0x45c>
 8002332:	4a22      	ldr	r2, [pc, #136]	@ (80023bc <HAL_ADC_ConfigChannel+0x4e4>)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f7ff f8fc 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002342:	4b21      	ldr	r3, [pc, #132]	@ (80023c8 <HAL_ADC_ConfigChannel+0x4f0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	099b      	lsrs	r3, r3, #6
 8002348:	4a20      	ldr	r2, [pc, #128]	@ (80023cc <HAL_ADC_ConfigChannel+0x4f4>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	099b      	lsrs	r3, r3, #6
 8002350:	3301      	adds	r3, #1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002356:	e002      	b.n	800235e <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3b01      	subs	r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f9      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002364:	e08f      	b.n	8002486 <HAL_ADC_ConfigChannel+0x5ae>
 8002366:	bf00      	nop
 8002368:	47ff0000 	.word	0x47ff0000
 800236c:	40022000 	.word	0x40022000
 8002370:	04300002 	.word	0x04300002
 8002374:	08600004 	.word	0x08600004
 8002378:	0c900008 	.word	0x0c900008
 800237c:	10c00010 	.word	0x10c00010
 8002380:	14f00020 	.word	0x14f00020
 8002384:	2a000400 	.word	0x2a000400
 8002388:	2e300800 	.word	0x2e300800
 800238c:	32601000 	.word	0x32601000
 8002390:	43210000 	.word	0x43210000
 8002394:	4b840000 	.word	0x4b840000
 8002398:	4fb80000 	.word	0x4fb80000
 800239c:	47520000 	.word	0x47520000
 80023a0:	36902000 	.word	0x36902000
 80023a4:	25b00200 	.word	0x25b00200
 80023a8:	21800100 	.word	0x21800100
 80023ac:	1d500080 	.word	0x1d500080
 80023b0:	19200040 	.word	0x19200040
 80023b4:	40022100 	.word	0x40022100
 80023b8:	40022300 	.word	0x40022300
 80023bc:	58026300 	.word	0x58026300
 80023c0:	58026000 	.word	0x58026000
 80023c4:	cb840000 	.word	0xcb840000
 80023c8:	24000000 	.word	0x24000000
 80023cc:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a31      	ldr	r2, [pc, #196]	@ (800249c <HAL_ADC_ConfigChannel+0x5c4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d11e      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x540>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d119      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2d      	ldr	r2, [pc, #180]	@ (80024a0 <HAL_ADC_ConfigChannel+0x5c8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d14b      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2c      	ldr	r2, [pc, #176]	@ (80024a4 <HAL_ADC_ConfigChannel+0x5cc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_ConfigChannel+0x52a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2a      	ldr	r2, [pc, #168]	@ (80024a8 <HAL_ADC_ConfigChannel+0x5d0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x52e>
 8002402:	4a2a      	ldr	r2, [pc, #168]	@ (80024ac <HAL_ADC_ConfigChannel+0x5d4>)
 8002404:	e000      	b.n	8002408 <HAL_ADC_ConfigChannel+0x530>
 8002406:	4a2a      	ldr	r2, [pc, #168]	@ (80024b0 <HAL_ADC_ConfigChannel+0x5d8>)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800240e:	4619      	mov	r1, r3
 8002410:	4610      	mov	r0, r2
 8002412:	f7ff f892 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002416:	e036      	b.n	8002486 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a25      	ldr	r2, [pc, #148]	@ (80024b4 <HAL_ADC_ConfigChannel+0x5dc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d131      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x5ae>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d12c      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1b      	ldr	r2, [pc, #108]	@ (80024a0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d127      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1a      	ldr	r2, [pc, #104]	@ (80024a4 <HAL_ADC_ConfigChannel+0x5cc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_ADC_ConfigChannel+0x572>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a18      	ldr	r2, [pc, #96]	@ (80024a8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x576>
 800244a:	4a18      	ldr	r2, [pc, #96]	@ (80024ac <HAL_ADC_ConfigChannel+0x5d4>)
 800244c:	e000      	b.n	8002450 <HAL_ADC_ConfigChannel+0x578>
 800244e:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <HAL_ADC_ConfigChannel+0x5d8>)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f7ff f86e 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
 800245e:	e012      	b.n	8002486 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002464:	f043 0220 	orr.w	r2, r3, #32
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002472:	e008      	b.n	8002486 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800248e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002492:	4618      	mov	r0, r3
 8002494:	3734      	adds	r7, #52	@ 0x34
 8002496:	46bd      	mov	sp, r7
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	bf00      	nop
 800249c:	c7520000 	.word	0xc7520000
 80024a0:	58026000 	.word	0x58026000
 80024a4:	40022000 	.word	0x40022000
 80024a8:	40022100 	.word	0x40022100
 80024ac:	40022300 	.word	0x40022300
 80024b0:	58026300 	.word	0x58026300
 80024b4:	cfb80000 	.word	0xcfb80000

080024b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f9cb 	bl	8001860 <LL_ADC_IsEnabled>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d16e      	bne.n	80025ae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	4b38      	ldr	r3, [pc, #224]	@ (80025b8 <ADC_Enable+0x100>)
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e2:	f043 0210 	orr.w	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e05a      	b.n	80025b0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f99a 	bl	8001838 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002504:	f7fe ffee 	bl	80014e4 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a2b      	ldr	r2, [pc, #172]	@ (80025bc <ADC_Enable+0x104>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d004      	beq.n	800251e <ADC_Enable+0x66>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a29      	ldr	r2, [pc, #164]	@ (80025c0 <ADC_Enable+0x108>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <ADC_Enable+0x6a>
 800251e:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <ADC_Enable+0x10c>)
 8002520:	e000      	b.n	8002524 <ADC_Enable+0x6c>
 8002522:	4b29      	ldr	r3, [pc, #164]	@ (80025c8 <ADC_Enable+0x110>)
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff f92b 	bl	8001780 <LL_ADC_GetMultimode>
 800252a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a23      	ldr	r2, [pc, #140]	@ (80025c0 <ADC_Enable+0x108>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d002      	beq.n	800253c <ADC_Enable+0x84>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e000      	b.n	800253e <ADC_Enable+0x86>
 800253c:	4b1f      	ldr	r3, [pc, #124]	@ (80025bc <ADC_Enable+0x104>)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4293      	cmp	r3, r2
 8002544:	d02c      	beq.n	80025a0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d130      	bne.n	80025ae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800254c:	e028      	b.n	80025a0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f984 	bl	8001860 <LL_ADC_IsEnabled>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d104      	bne.n	8002568 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f968 	bl	8001838 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002568:	f7fe ffbc 	bl	80014e4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d914      	bls.n	80025a0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d00d      	beq.n	80025a0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002588:	f043 0210 	orr.w	r2, r3, #16
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002594:	f043 0201 	orr.w	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e007      	b.n	80025b0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d1cf      	bne.n	800254e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	8000003f 	.word	0x8000003f
 80025bc:	40022000 	.word	0x40022000
 80025c0:	40022100 	.word	0x40022100
 80025c4:	40022300 	.word	0x40022300
 80025c8:	58026300 	.word	0x58026300

080025cc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a7a      	ldr	r2, [pc, #488]	@ (80027c4 <ADC_ConfigureBoostMode+0x1f8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <ADC_ConfigureBoostMode+0x1c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a79      	ldr	r2, [pc, #484]	@ (80027c8 <ADC_ConfigureBoostMode+0x1fc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d109      	bne.n	80025fc <ADC_ConfigureBoostMode+0x30>
 80025e8:	4b78      	ldr	r3, [pc, #480]	@ (80027cc <ADC_ConfigureBoostMode+0x200>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	e008      	b.n	800260e <ADC_ConfigureBoostMode+0x42>
 80025fc:	4b74      	ldr	r3, [pc, #464]	@ (80027d0 <ADC_ConfigureBoostMode+0x204>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf14      	ite	ne
 8002608:	2301      	movne	r3, #1
 800260a:	2300      	moveq	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01c      	beq.n	800264c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002612:	f001 fc8d 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8002616:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002620:	d010      	beq.n	8002644 <ADC_ConfigureBoostMode+0x78>
 8002622:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002626:	d873      	bhi.n	8002710 <ADC_ConfigureBoostMode+0x144>
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262c:	d002      	beq.n	8002634 <ADC_ConfigureBoostMode+0x68>
 800262e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002632:	d16d      	bne.n	8002710 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	60fb      	str	r3, [r7, #12]
        break;
 8002642:	e068      	b.n	8002716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	60fb      	str	r3, [r7, #12]
        break;
 800264a:	e064      	b.n	8002716 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800264c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002650:	f04f 0100 	mov.w	r1, #0
 8002654:	f002 ff14 	bl	8005480 <HAL_RCCEx_GetPeriphCLKFreq>
 8002658:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002662:	d051      	beq.n	8002708 <ADC_ConfigureBoostMode+0x13c>
 8002664:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002668:	d854      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x148>
 800266a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800266e:	d047      	beq.n	8002700 <ADC_ConfigureBoostMode+0x134>
 8002670:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002674:	d84e      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x148>
 8002676:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800267a:	d03d      	beq.n	80026f8 <ADC_ConfigureBoostMode+0x12c>
 800267c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002680:	d848      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x148>
 8002682:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002686:	d033      	beq.n	80026f0 <ADC_ConfigureBoostMode+0x124>
 8002688:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800268c:	d842      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x148>
 800268e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002692:	d029      	beq.n	80026e8 <ADC_ConfigureBoostMode+0x11c>
 8002694:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002698:	d83c      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x148>
 800269a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800269e:	d01a      	beq.n	80026d6 <ADC_ConfigureBoostMode+0x10a>
 80026a0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026a4:	d836      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x148>
 80026a6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026aa:	d014      	beq.n	80026d6 <ADC_ConfigureBoostMode+0x10a>
 80026ac:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026b0:	d830      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x148>
 80026b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026b6:	d00e      	beq.n	80026d6 <ADC_ConfigureBoostMode+0x10a>
 80026b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026bc:	d82a      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x148>
 80026be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026c2:	d008      	beq.n	80026d6 <ADC_ConfigureBoostMode+0x10a>
 80026c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026c8:	d824      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x148>
 80026ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026ce:	d002      	beq.n	80026d6 <ADC_ConfigureBoostMode+0x10a>
 80026d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026d4:	d11e      	bne.n	8002714 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	0c9b      	lsrs	r3, r3, #18
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	60fb      	str	r3, [r7, #12]
        break;
 80026e6:	e016      	b.n	8002716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	60fb      	str	r3, [r7, #12]
        break;
 80026ee:	e012      	b.n	8002716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	60fb      	str	r3, [r7, #12]
        break;
 80026f6:	e00e      	b.n	8002716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	60fb      	str	r3, [r7, #12]
        break;
 80026fe:	e00a      	b.n	8002716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	09db      	lsrs	r3, r3, #7
 8002704:	60fb      	str	r3, [r7, #12]
        break;
 8002706:	e006      	b.n	8002716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	60fb      	str	r3, [r7, #12]
        break;
 800270e:	e002      	b.n	8002716 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002710:	bf00      	nop
 8002712:	e000      	b.n	8002716 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002714:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002716:	f7fe fef1 	bl	80014fc <HAL_GetREVID>
 800271a:	4603      	mov	r3, r0
 800271c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002720:	4293      	cmp	r3, r2
 8002722:	d815      	bhi.n	8002750 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a2b      	ldr	r2, [pc, #172]	@ (80027d4 <ADC_ConfigureBoostMode+0x208>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d908      	bls.n	800273e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800273a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800273c:	e03e      	b.n	80027bc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800274c:	609a      	str	r2, [r3, #8]
}
 800274e:	e035      	b.n	80027bc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a1f      	ldr	r2, [pc, #124]	@ (80027d8 <ADC_ConfigureBoostMode+0x20c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d808      	bhi.n	8002770 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800276c:	609a      	str	r2, [r3, #8]
}
 800276e:	e025      	b.n	80027bc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a1a      	ldr	r2, [pc, #104]	@ (80027dc <ADC_ConfigureBoostMode+0x210>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d80a      	bhi.n	800278e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800278a:	609a      	str	r2, [r3, #8]
}
 800278c:	e016      	b.n	80027bc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <ADC_ConfigureBoostMode+0x214>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d80a      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a8:	609a      	str	r2, [r3, #8]
}
 80027aa:	e007      	b.n	80027bc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40022100 	.word	0x40022100
 80027cc:	40022300 	.word	0x40022300
 80027d0:	58026300 	.word	0x58026300
 80027d4:	01312d00 	.word	0x01312d00
 80027d8:	005f5e10 	.word	0x005f5e10
 80027dc:	00bebc20 	.word	0x00bebc20
 80027e0:	017d7840 	.word	0x017d7840

080027e4 <LL_ADC_IsEnabled>:
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <LL_ADC_IsEnabled+0x18>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <LL_ADC_IsEnabled+0x1a>
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_ADC_REG_IsConversionOngoing>:
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b04      	cmp	r3, #4
 800281c:	d101      	bne.n	8002822 <LL_ADC_REG_IsConversionOngoing+0x18>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b09f      	sub	sp, #124	@ 0x7c
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800284a:	2302      	movs	r3, #2
 800284c:	e0be      	b.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800285a:	2300      	movs	r3, #0
 800285c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a5c      	ldr	r2, [pc, #368]	@ (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d102      	bne.n	800286e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002868:	4b5b      	ldr	r3, [pc, #364]	@ (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	e001      	b.n	8002872 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e09d      	b.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ffb9 	bl	800280a <LL_ADC_REG_IsConversionOngoing>
 8002898:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ffb3 	bl	800280a <LL_ADC_REG_IsConversionOngoing>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d17f      	bne.n	80029aa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d17c      	bne.n	80029aa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a47      	ldr	r2, [pc, #284]	@ (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d004      	beq.n	80028c4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a46      	ldr	r2, [pc, #280]	@ (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80028c4:	4b45      	ldr	r3, [pc, #276]	@ (80029dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80028c6:	e000      	b.n	80028ca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80028c8:	4b45      	ldr	r3, [pc, #276]	@ (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80028ca:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d039      	beq.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80028d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028e4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a3a      	ldr	r2, [pc, #232]	@ (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a38      	ldr	r2, [pc, #224]	@ (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10e      	bne.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80028fa:	4836      	ldr	r0, [pc, #216]	@ (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028fc:	f7ff ff72 	bl	80027e4 <LL_ADC_IsEnabled>
 8002900:	4604      	mov	r4, r0
 8002902:	4835      	ldr	r0, [pc, #212]	@ (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002904:	f7ff ff6e 	bl	80027e4 <LL_ADC_IsEnabled>
 8002908:	4603      	mov	r3, r0
 800290a:	4323      	orrs	r3, r4
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e008      	b.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002918:	4832      	ldr	r0, [pc, #200]	@ (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800291a:	f7ff ff63 	bl	80027e4 <LL_ADC_IsEnabled>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d047      	beq.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800292e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	4b2d      	ldr	r3, [pc, #180]	@ (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002934:	4013      	ands	r3, r2
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	6811      	ldr	r1, [r2, #0]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	6892      	ldr	r2, [r2, #8]
 800293e:	430a      	orrs	r2, r1
 8002940:	431a      	orrs	r2, r3
 8002942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002944:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002946:	e03a      	b.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002952:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1d      	ldr	r2, [pc, #116]	@ (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d10e      	bne.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002968:	481a      	ldr	r0, [pc, #104]	@ (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800296a:	f7ff ff3b 	bl	80027e4 <LL_ADC_IsEnabled>
 800296e:	4604      	mov	r4, r0
 8002970:	4819      	ldr	r0, [pc, #100]	@ (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002972:	f7ff ff37 	bl	80027e4 <LL_ADC_IsEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	4323      	orrs	r3, r4
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf0c      	ite	eq
 800297e:	2301      	moveq	r3, #1
 8002980:	2300      	movne	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e008      	b.n	8002998 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002986:	4817      	ldr	r0, [pc, #92]	@ (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002988:	f7ff ff2c 	bl	80027e4 <LL_ADC_IsEnabled>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d010      	beq.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800299c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029a6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029a8:	e009      	b.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80029bc:	e000      	b.n	80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029c8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	377c      	adds	r7, #124	@ 0x7c
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd90      	pop	{r4, r7, pc}
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40022100 	.word	0x40022100
 80029dc:	40022300 	.word	0x40022300
 80029e0:	58026300 	.word	0x58026300
 80029e4:	58026000 	.word	0x58026000
 80029e8:	fffff0e0 	.word	0xfffff0e0

080029ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <__NVIC_SetPriorityGrouping+0x40>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <__NVIC_SetPriorityGrouping+0x44>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <__NVIC_SetPriorityGrouping+0x40>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00
 8002a30:	05fa0000 	.word	0x05fa0000

08002a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a38:	4b04      	ldr	r3, [pc, #16]	@ (8002a4c <__NVIC_GetPriorityGrouping+0x18>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	f003 0307 	and.w	r3, r3, #7
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	db0b      	blt.n	8002a7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	f003 021f 	and.w	r2, r3, #31
 8002a68:	4907      	ldr	r1, [pc, #28]	@ (8002a88 <__NVIC_EnableIRQ+0x38>)
 8002a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	2001      	movs	r0, #1
 8002a72:	fa00 f202 	lsl.w	r2, r0, r2
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000e100 	.word	0xe000e100

08002a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	6039      	str	r1, [r7, #0]
 8002a96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	db0a      	blt.n	8002ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	490c      	ldr	r1, [pc, #48]	@ (8002ad8 <__NVIC_SetPriority+0x4c>)
 8002aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aaa:	0112      	lsls	r2, r2, #4
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	440b      	add	r3, r1
 8002ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab4:	e00a      	b.n	8002acc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4908      	ldr	r1, [pc, #32]	@ (8002adc <__NVIC_SetPriority+0x50>)
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	3b04      	subs	r3, #4
 8002ac4:	0112      	lsls	r2, r2, #4
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	440b      	add	r3, r1
 8002aca:	761a      	strb	r2, [r3, #24]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000e100 	.word	0xe000e100
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b089      	sub	sp, #36	@ 0x24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f1c3 0307 	rsb	r3, r3, #7
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	bf28      	it	cs
 8002afe:	2304      	movcs	r3, #4
 8002b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3304      	adds	r3, #4
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d902      	bls.n	8002b10 <NVIC_EncodePriority+0x30>
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3b03      	subs	r3, #3
 8002b0e:	e000      	b.n	8002b12 <NVIC_EncodePriority+0x32>
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43da      	mvns	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	401a      	ands	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	43d9      	mvns	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b38:	4313      	orrs	r3, r2
         );
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3724      	adds	r7, #36	@ 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ff4c 	bl	80029ec <__NVIC_SetPriorityGrouping>
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b6a:	f7ff ff63 	bl	8002a34 <__NVIC_GetPriorityGrouping>
 8002b6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	6978      	ldr	r0, [r7, #20]
 8002b76:	f7ff ffb3 	bl	8002ae0 <NVIC_EncodePriority>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff82 	bl	8002a8c <__NVIC_SetPriority>
}
 8002b88:	bf00      	nop
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ff56 	bl	8002a50 <__NVIC_EnableIRQ>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	@ 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002bba:	4b89      	ldr	r3, [pc, #548]	@ (8002de0 <HAL_GPIO_Init+0x234>)
 8002bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bbe:	e194      	b.n	8002eea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8186 	beq.w	8002ee4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d005      	beq.n	8002bf0 <HAL_GPIO_Init+0x44>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d130      	bne.n	8002c52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c26:	2201      	movs	r2, #1
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	f003 0201 	and.w	r2, r3, #1
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d017      	beq.n	8002c8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d123      	bne.n	8002ce2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	08da      	lsrs	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3208      	adds	r2, #8
 8002ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	69b9      	ldr	r1, [r7, #24]
 8002cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	2203      	movs	r2, #3
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0203 	and.w	r2, r3, #3
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80e0 	beq.w	8002ee4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d24:	4b2f      	ldr	r3, [pc, #188]	@ (8002de4 <HAL_GPIO_Init+0x238>)
 8002d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8002de4 <HAL_GPIO_Init+0x238>)
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d34:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <HAL_GPIO_Init+0x238>)
 8002d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d42:	4a29      	ldr	r2, [pc, #164]	@ (8002de8 <HAL_GPIO_Init+0x23c>)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a20      	ldr	r2, [pc, #128]	@ (8002dec <HAL_GPIO_Init+0x240>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d052      	beq.n	8002e14 <HAL_GPIO_Init+0x268>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1f      	ldr	r2, [pc, #124]	@ (8002df0 <HAL_GPIO_Init+0x244>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d031      	beq.n	8002dda <HAL_GPIO_Init+0x22e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1e      	ldr	r2, [pc, #120]	@ (8002df4 <HAL_GPIO_Init+0x248>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_GPIO_Init+0x22a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1d      	ldr	r2, [pc, #116]	@ (8002df8 <HAL_GPIO_Init+0x24c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d025      	beq.n	8002dd2 <HAL_GPIO_Init+0x226>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a1c      	ldr	r2, [pc, #112]	@ (8002dfc <HAL_GPIO_Init+0x250>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01f      	beq.n	8002dce <HAL_GPIO_Init+0x222>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a1b      	ldr	r2, [pc, #108]	@ (8002e00 <HAL_GPIO_Init+0x254>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x21e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a1a      	ldr	r2, [pc, #104]	@ (8002e04 <HAL_GPIO_Init+0x258>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x21a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a19      	ldr	r2, [pc, #100]	@ (8002e08 <HAL_GPIO_Init+0x25c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x216>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a18      	ldr	r2, [pc, #96]	@ (8002e0c <HAL_GPIO_Init+0x260>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x212>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a17      	ldr	r2, [pc, #92]	@ (8002e10 <HAL_GPIO_Init+0x264>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x20e>
 8002db6:	2309      	movs	r3, #9
 8002db8:	e02d      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dba:	230a      	movs	r3, #10
 8002dbc:	e02b      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	e029      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	e027      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dc6:	2306      	movs	r3, #6
 8002dc8:	e025      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dca:	2305      	movs	r3, #5
 8002dcc:	e023      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dce:	2304      	movs	r3, #4
 8002dd0:	e021      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e01f      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e01d      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e01b      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dde:	bf00      	nop
 8002de0:	58000080 	.word	0x58000080
 8002de4:	58024400 	.word	0x58024400
 8002de8:	58000400 	.word	0x58000400
 8002dec:	58020000 	.word	0x58020000
 8002df0:	58020400 	.word	0x58020400
 8002df4:	58020800 	.word	0x58020800
 8002df8:	58020c00 	.word	0x58020c00
 8002dfc:	58021000 	.word	0x58021000
 8002e00:	58021400 	.word	0x58021400
 8002e04:	58021800 	.word	0x58021800
 8002e08:	58021c00 	.word	0x58021c00
 8002e0c:	58022000 	.word	0x58022000
 8002e10:	58022400 	.word	0x58022400
 8002e14:	2300      	movs	r3, #0
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	f002 0203 	and.w	r2, r2, #3
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	4093      	lsls	r3, r2
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e26:	4938      	ldr	r1, [pc, #224]	@ (8002f08 <HAL_GPIO_Init+0x35c>)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f47f ae63 	bne.w	8002bc0 <HAL_GPIO_Init+0x14>
  }
}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	3724      	adds	r7, #36	@ 0x24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	58000400 	.word	0x58000400

08002f0c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002f14:	4a08      	ldr	r2, [pc, #32]	@ (8002f38 <HAL_HSEM_FastTake+0x2c>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3320      	adds	r3, #32
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	4a07      	ldr	r2, [pc, #28]	@ (8002f3c <HAL_HSEM_FastTake+0x30>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d101      	bne.n	8002f28 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	58026400 	.word	0x58026400
 8002f3c:	80000300 	.word	0x80000300

08002f40 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002f4a:	4906      	ldr	r1, [pc, #24]	@ (8002f64 <HAL_HSEM_Release+0x24>)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	58026400 	.word	0x58026400

08002f68 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f70:	4b29      	ldr	r3, [pc, #164]	@ (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d00a      	beq.n	8002f92 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f7c:	4b26      	ldr	r3, [pc, #152]	@ (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d001      	beq.n	8002f8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e040      	b.n	8003010 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e03e      	b.n	8003010 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f92:	4b21      	ldr	r3, [pc, #132]	@ (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002f9a:	491f      	ldr	r1, [pc, #124]	@ (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002fa2:	f7fe fa9f 	bl	80014e4 <HAL_GetTick>
 8002fa6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fa8:	e009      	b.n	8002fbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002faa:	f7fe fa9b 	bl	80014e4 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fb8:	d901      	bls.n	8002fbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e028      	b.n	8003010 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fbe:	4b16      	ldr	r3, [pc, #88]	@ (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fca:	d1ee      	bne.n	8002faa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b1e      	cmp	r3, #30
 8002fd0:	d008      	beq.n	8002fe4 <HAL_PWREx_ConfigSupply+0x7c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fd6:	d005      	beq.n	8002fe4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b1d      	cmp	r3, #29
 8002fdc:	d002      	beq.n	8002fe4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b2d      	cmp	r3, #45	@ 0x2d
 8002fe2:	d114      	bne.n	800300e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002fe4:	f7fe fa7e 	bl	80014e4 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002fea:	e009      	b.n	8003000 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fec:	f7fe fa7a 	bl	80014e4 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ffa:	d901      	bls.n	8003000 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e007      	b.n	8003010 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003000:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300c:	d1ee      	bne.n	8002fec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	58024800 	.word	0x58024800

0800301c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	@ 0x30
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	f000 bc48 	b.w	80038c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8088 	beq.w	800314e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303e:	4b99      	ldr	r3, [pc, #612]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003048:	4b96      	ldr	r3, [pc, #600]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 800304a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003050:	2b10      	cmp	r3, #16
 8003052:	d007      	beq.n	8003064 <HAL_RCC_OscConfig+0x48>
 8003054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003056:	2b18      	cmp	r3, #24
 8003058:	d111      	bne.n	800307e <HAL_RCC_OscConfig+0x62>
 800305a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d10c      	bne.n	800307e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003064:	4b8f      	ldr	r3, [pc, #572]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d06d      	beq.n	800314c <HAL_RCC_OscConfig+0x130>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d169      	bne.n	800314c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	f000 bc21 	b.w	80038c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x7a>
 8003088:	4b86      	ldr	r3, [pc, #536]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a85      	ldr	r2, [pc, #532]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	e02e      	b.n	80030f4 <HAL_RCC_OscConfig+0xd8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x9c>
 800309e:	4b81      	ldr	r3, [pc, #516]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a80      	ldr	r2, [pc, #512]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b7e      	ldr	r3, [pc, #504]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a7d      	ldr	r2, [pc, #500]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e01d      	b.n	80030f4 <HAL_RCC_OscConfig+0xd8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0xc0>
 80030c2:	4b78      	ldr	r3, [pc, #480]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a77      	ldr	r2, [pc, #476]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b75      	ldr	r3, [pc, #468]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a74      	ldr	r2, [pc, #464]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0xd8>
 80030dc:	4b71      	ldr	r3, [pc, #452]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a70      	ldr	r2, [pc, #448]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b6e      	ldr	r3, [pc, #440]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6d      	ldr	r2, [pc, #436]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80030ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe f9f2 	bl	80014e4 <HAL_GetTick>
 8003100:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003104:	f7fe f9ee 	bl	80014e4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	@ 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e3d4      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003116:	4b63      	ldr	r3, [pc, #396]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0xe8>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe f9de 	bl	80014e4 <HAL_GetTick>
 8003128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fe f9da 	bl	80014e4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	@ 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e3c0      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800313e:	4b59      	ldr	r3, [pc, #356]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x110>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 80ca 	beq.w	80032f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315c:	4b51      	ldr	r3, [pc, #324]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003164:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003166:	4b4f      	ldr	r3, [pc, #316]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_RCC_OscConfig+0x166>
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	2b18      	cmp	r3, #24
 8003176:	d156      	bne.n	8003226 <HAL_RCC_OscConfig+0x20a>
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d151      	bne.n	8003226 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003182:	4b48      	ldr	r3, [pc, #288]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_RCC_OscConfig+0x17e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e392      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800319a:	4b42      	ldr	r3, [pc, #264]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 0219 	bic.w	r2, r3, #25
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	493f      	ldr	r1, [pc, #252]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe f99a 	bl	80014e4 <HAL_GetTick>
 80031b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fe f996 	bl	80014e4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e37c      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c6:	4b37      	ldr	r3, [pc, #220]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	f7fe f993 	bl	80014fc <HAL_GetREVID>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031dc:	4293      	cmp	r3, r2
 80031de:	d817      	bhi.n	8003210 <HAL_RCC_OscConfig+0x1f4>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b40      	cmp	r3, #64	@ 0x40
 80031e6:	d108      	bne.n	80031fa <HAL_RCC_OscConfig+0x1de>
 80031e8:	4b2e      	ldr	r3, [pc, #184]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80031f0:	4a2c      	ldr	r2, [pc, #176]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80031f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f8:	e07a      	b.n	80032f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fa:	4b2a      	ldr	r3, [pc, #168]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	031b      	lsls	r3, r3, #12
 8003208:	4926      	ldr	r1, [pc, #152]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320e:	e06f      	b.n	80032f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003210:	4b24      	ldr	r3, [pc, #144]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	4921      	ldr	r1, [pc, #132]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003224:	e064      	b.n	80032f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d047      	beq.n	80032be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800322e:	4b1d      	ldr	r3, [pc, #116]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 0219 	bic.w	r2, r3, #25
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	491a      	ldr	r1, [pc, #104]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe f950 	bl	80014e4 <HAL_GetTick>
 8003244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003248:	f7fe f94c 	bl	80014e4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e332      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800325a:	4b12      	ldr	r3, [pc, #72]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003266:	f7fe f949 	bl	80014fc <HAL_GetREVID>
 800326a:	4603      	mov	r3, r0
 800326c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003270:	4293      	cmp	r3, r2
 8003272:	d819      	bhi.n	80032a8 <HAL_RCC_OscConfig+0x28c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	2b40      	cmp	r3, #64	@ 0x40
 800327a:	d108      	bne.n	800328e <HAL_RCC_OscConfig+0x272>
 800327c:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003284:	4a07      	ldr	r2, [pc, #28]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 8003286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800328a:	6053      	str	r3, [r2, #4]
 800328c:	e030      	b.n	80032f0 <HAL_RCC_OscConfig+0x2d4>
 800328e:	4b05      	ldr	r3, [pc, #20]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	031b      	lsls	r3, r3, #12
 800329c:	4901      	ldr	r1, [pc, #4]	@ (80032a4 <HAL_RCC_OscConfig+0x288>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
 80032a2:	e025      	b.n	80032f0 <HAL_RCC_OscConfig+0x2d4>
 80032a4:	58024400 	.word	0x58024400
 80032a8:	4b9a      	ldr	r3, [pc, #616]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	4997      	ldr	r1, [pc, #604]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
 80032bc:	e018      	b.n	80032f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032be:	4b95      	ldr	r3, [pc, #596]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a94      	ldr	r2, [pc, #592]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe f90b 	bl	80014e4 <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d2:	f7fe f907 	bl	80014e4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e2ed      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032e4:	4b8b      	ldr	r3, [pc, #556]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f0      	bne.n	80032d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80a9 	beq.w	8003450 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fe:	4b85      	ldr	r3, [pc, #532]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003306:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003308:	4b82      	ldr	r3, [pc, #520]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d007      	beq.n	8003324 <HAL_RCC_OscConfig+0x308>
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b18      	cmp	r3, #24
 8003318:	d13a      	bne.n	8003390 <HAL_RCC_OscConfig+0x374>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d135      	bne.n	8003390 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003324:	4b7b      	ldr	r3, [pc, #492]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_OscConfig+0x320>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	2b80      	cmp	r3, #128	@ 0x80
 8003336:	d001      	beq.n	800333c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e2c1      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800333c:	f7fe f8de 	bl	80014fc <HAL_GetREVID>
 8003340:	4603      	mov	r3, r0
 8003342:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003346:	4293      	cmp	r3, r2
 8003348:	d817      	bhi.n	800337a <HAL_RCC_OscConfig+0x35e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	2b20      	cmp	r3, #32
 8003350:	d108      	bne.n	8003364 <HAL_RCC_OscConfig+0x348>
 8003352:	4b70      	ldr	r3, [pc, #448]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800335a:	4a6e      	ldr	r2, [pc, #440]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 800335c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003360:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003362:	e075      	b.n	8003450 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003364:	4b6b      	ldr	r3, [pc, #428]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	069b      	lsls	r3, r3, #26
 8003372:	4968      	ldr	r1, [pc, #416]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003374:	4313      	orrs	r3, r2
 8003376:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003378:	e06a      	b.n	8003450 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800337a:	4b66      	ldr	r3, [pc, #408]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	061b      	lsls	r3, r3, #24
 8003388:	4962      	ldr	r1, [pc, #392]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 800338a:	4313      	orrs	r3, r2
 800338c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800338e:	e05f      	b.n	8003450 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d042      	beq.n	800341e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003398:	4b5e      	ldr	r3, [pc, #376]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a5d      	ldr	r2, [pc, #372]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 800339e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe f89e 	bl	80014e4 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033ac:	f7fe f89a 	bl	80014e4 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e280      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033be:	4b55      	ldr	r3, [pc, #340]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033ca:	f7fe f897 	bl	80014fc <HAL_GetREVID>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d817      	bhi.n	8003408 <HAL_RCC_OscConfig+0x3ec>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d108      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3d6>
 80033e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80033e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80033ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033ee:	6053      	str	r3, [r2, #4]
 80033f0:	e02e      	b.n	8003450 <HAL_RCC_OscConfig+0x434>
 80033f2:	4b48      	ldr	r3, [pc, #288]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	069b      	lsls	r3, r3, #26
 8003400:	4944      	ldr	r1, [pc, #272]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
 8003406:	e023      	b.n	8003450 <HAL_RCC_OscConfig+0x434>
 8003408:	4b42      	ldr	r3, [pc, #264]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	061b      	lsls	r3, r3, #24
 8003416:	493f      	ldr	r1, [pc, #252]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003418:	4313      	orrs	r3, r2
 800341a:	60cb      	str	r3, [r1, #12]
 800341c:	e018      	b.n	8003450 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800341e:	4b3d      	ldr	r3, [pc, #244]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3c      	ldr	r2, [pc, #240]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003424:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe f85b 	bl	80014e4 <HAL_GetTick>
 800342e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003432:	f7fe f857 	bl	80014e4 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e23d      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003444:	4b33      	ldr	r3, [pc, #204]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d036      	beq.n	80034ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d019      	beq.n	8003498 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003464:	4b2b      	ldr	r3, [pc, #172]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003468:	4a2a      	ldr	r2, [pc, #168]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fe f838 	bl	80014e4 <HAL_GetTick>
 8003474:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003478:	f7fe f834 	bl	80014e4 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e21a      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800348a:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 800348c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x45c>
 8003496:	e018      	b.n	80034ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003498:	4b1e      	ldr	r3, [pc, #120]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 800349a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349c:	4a1d      	ldr	r2, [pc, #116]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fe f81e 	bl	80014e4 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ac:	f7fe f81a 	bl	80014e4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e200      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034be:	4b15      	ldr	r3, [pc, #84]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80034c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d039      	beq.n	800354a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01c      	beq.n	8003518 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034de:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 80034e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034ea:	f7fd fffb 	bl	80014e4 <HAL_GetTick>
 80034ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034f2:	f7fd fff7 	bl	80014e4 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1dd      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003504:	4b03      	ldr	r3, [pc, #12]	@ (8003514 <HAL_RCC_OscConfig+0x4f8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x4d6>
 8003510:	e01b      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
 8003512:	bf00      	nop
 8003514:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003518:	4b9b      	ldr	r3, [pc, #620]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a9a      	ldr	r2, [pc, #616]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 800351e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003522:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003524:	f7fd ffde 	bl	80014e4 <HAL_GetTick>
 8003528:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800352c:	f7fd ffda 	bl	80014e4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e1c0      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800353e:	4b92      	ldr	r3, [pc, #584]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8081 	beq.w	800365a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003558:	4b8c      	ldr	r3, [pc, #560]	@ (800378c <HAL_RCC_OscConfig+0x770>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a8b      	ldr	r2, [pc, #556]	@ (800378c <HAL_RCC_OscConfig+0x770>)
 800355e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003562:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003564:	f7fd ffbe 	bl	80014e4 <HAL_GetTick>
 8003568:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356c:	f7fd ffba 	bl	80014e4 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	@ 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e1a0      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800357e:	4b83      	ldr	r3, [pc, #524]	@ (800378c <HAL_RCC_OscConfig+0x770>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d106      	bne.n	80035a0 <HAL_RCC_OscConfig+0x584>
 8003592:	4b7d      	ldr	r3, [pc, #500]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003596:	4a7c      	ldr	r2, [pc, #496]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6713      	str	r3, [r2, #112]	@ 0x70
 800359e:	e02d      	b.n	80035fc <HAL_RCC_OscConfig+0x5e0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10c      	bne.n	80035c2 <HAL_RCC_OscConfig+0x5a6>
 80035a8:	4b77      	ldr	r3, [pc, #476]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ac:	4a76      	ldr	r2, [pc, #472]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b4:	4b74      	ldr	r3, [pc, #464]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b8:	4a73      	ldr	r2, [pc, #460]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c0:	e01c      	b.n	80035fc <HAL_RCC_OscConfig+0x5e0>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b05      	cmp	r3, #5
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5c8>
 80035ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035da:	4a6b      	ldr	r2, [pc, #428]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e2:	e00b      	b.n	80035fc <HAL_RCC_OscConfig+0x5e0>
 80035e4:	4b68      	ldr	r3, [pc, #416]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e8:	4a67      	ldr	r2, [pc, #412]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f0:	4b65      	ldr	r3, [pc, #404]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f4:	4a64      	ldr	r2, [pc, #400]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80035f6:	f023 0304 	bic.w	r3, r3, #4
 80035fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fd ff6e 	bl	80014e4 <HAL_GetTick>
 8003608:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fd ff6a 	bl	80014e4 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e14e      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003622:	4b59      	ldr	r3, [pc, #356]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0ee      	beq.n	800360c <HAL_RCC_OscConfig+0x5f0>
 800362e:	e014      	b.n	800365a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fd ff58 	bl	80014e4 <HAL_GetTick>
 8003634:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003636:	e00a      	b.n	800364e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003638:	f7fd ff54 	bl	80014e4 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e138      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800364e:	4b4e      	ldr	r3, [pc, #312]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1ee      	bne.n	8003638 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 812d 	beq.w	80038be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003664:	4b48      	ldr	r3, [pc, #288]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800366c:	2b18      	cmp	r3, #24
 800366e:	f000 80bd 	beq.w	80037ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	2b02      	cmp	r3, #2
 8003678:	f040 809e 	bne.w	80037b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367c:	4b42      	ldr	r3, [pc, #264]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a41      	ldr	r2, [pc, #260]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd ff2c 	bl	80014e4 <HAL_GetTick>
 800368c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7fd ff28 	bl	80014e4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e10e      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036a2:	4b39      	ldr	r3, [pc, #228]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ae:	4b36      	ldr	r3, [pc, #216]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80036b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036b2:	4b37      	ldr	r3, [pc, #220]	@ (8003790 <HAL_RCC_OscConfig+0x774>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036be:	0112      	lsls	r2, r2, #4
 80036c0:	430a      	orrs	r2, r1
 80036c2:	4931      	ldr	r1, [pc, #196]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	3b01      	subs	r3, #1
 80036ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d6:	3b01      	subs	r3, #1
 80036d8:	025b      	lsls	r3, r3, #9
 80036da:	b29b      	uxth	r3, r3
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e2:	3b01      	subs	r3, #1
 80036e4:	041b      	lsls	r3, r3, #16
 80036e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f0:	3b01      	subs	r3, #1
 80036f2:	061b      	lsls	r3, r3, #24
 80036f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036f8:	4923      	ldr	r1, [pc, #140]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80036fe:	4b22      	ldr	r3, [pc, #136]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	4a21      	ldr	r2, [pc, #132]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800370a:	4b1f      	ldr	r3, [pc, #124]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 800370c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800370e:	4b21      	ldr	r3, [pc, #132]	@ (8003794 <HAL_RCC_OscConfig+0x778>)
 8003710:	4013      	ands	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003716:	00d2      	lsls	r2, r2, #3
 8003718:	491b      	ldr	r1, [pc, #108]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800371e:	4b1a      	ldr	r3, [pc, #104]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003722:	f023 020c 	bic.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	4917      	ldr	r1, [pc, #92]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 800372c:	4313      	orrs	r3, r2
 800372e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003730:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003734:	f023 0202 	bic.w	r2, r3, #2
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373c:	4912      	ldr	r1, [pc, #72]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 800373e:	4313      	orrs	r3, r2
 8003740:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003742:	4b11      	ldr	r3, [pc, #68]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	4a10      	ldr	r2, [pc, #64]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800374c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374e:	4b0e      	ldr	r3, [pc, #56]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003752:	4a0d      	ldr	r2, [pc, #52]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003758:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800375a:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 800375c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375e:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003764:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003766:	4b08      	ldr	r3, [pc, #32]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	4a07      	ldr	r2, [pc, #28]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003772:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a04      	ldr	r2, [pc, #16]	@ (8003788 <HAL_RCC_OscConfig+0x76c>)
 8003778:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800377c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fd feb1 	bl	80014e4 <HAL_GetTick>
 8003782:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003784:	e011      	b.n	80037aa <HAL_RCC_OscConfig+0x78e>
 8003786:	bf00      	nop
 8003788:	58024400 	.word	0x58024400
 800378c:	58024800 	.word	0x58024800
 8003790:	fffffc0c 	.word	0xfffffc0c
 8003794:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003798:	f7fd fea4 	bl	80014e4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e08a      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037aa:	4b47      	ldr	r3, [pc, #284]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x77c>
 80037b6:	e082      	b.n	80038be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b8:	4b43      	ldr	r3, [pc, #268]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a42      	ldr	r2, [pc, #264]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 80037be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fd fe8e 	bl	80014e4 <HAL_GetTick>
 80037c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fd fe8a 	bl	80014e4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e070      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037de:	4b3a      	ldr	r3, [pc, #232]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x7b0>
 80037ea:	e068      	b.n	80038be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037ec:	4b36      	ldr	r3, [pc, #216]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037f2:	4b35      	ldr	r3, [pc, #212]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d031      	beq.n	8003864 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f003 0203 	and.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d12a      	bne.n	8003864 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d122      	bne.n	8003864 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003828:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d11a      	bne.n	8003864 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	0a5b      	lsrs	r3, r3, #9
 8003832:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d111      	bne.n	8003864 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d108      	bne.n	8003864 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	0e1b      	lsrs	r3, r3, #24
 8003856:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e02b      	b.n	80038c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003868:	4b17      	ldr	r3, [pc, #92]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 800386a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800386c:	08db      	lsrs	r3, r3, #3
 800386e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003872:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	429a      	cmp	r2, r3
 800387c:	d01f      	beq.n	80038be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800387e:	4b12      	ldr	r3, [pc, #72]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 8003880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003882:	4a11      	ldr	r2, [pc, #68]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800388a:	f7fd fe2b 	bl	80014e4 <HAL_GetTick>
 800388e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003890:	bf00      	nop
 8003892:	f7fd fe27 	bl	80014e4 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389a:	4293      	cmp	r3, r2
 800389c:	d0f9      	beq.n	8003892 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800389e:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 80038a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038a2:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <HAL_RCC_OscConfig+0x8b0>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038aa:	00d2      	lsls	r2, r2, #3
 80038ac:	4906      	ldr	r1, [pc, #24]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80038b2:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	4a04      	ldr	r2, [pc, #16]	@ (80038c8 <HAL_RCC_OscConfig+0x8ac>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3730      	adds	r7, #48	@ 0x30
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	58024400 	.word	0x58024400
 80038cc:	ffff0007 	.word	0xffff0007

080038d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e19c      	b.n	8003c1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e4:	4b8a      	ldr	r3, [pc, #552]	@ (8003b10 <HAL_RCC_ClockConfig+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d910      	bls.n	8003914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b87      	ldr	r3, [pc, #540]	@ (8003b10 <HAL_RCC_ClockConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 020f 	bic.w	r2, r3, #15
 80038fa:	4985      	ldr	r1, [pc, #532]	@ (8003b10 <HAL_RCC_ClockConfig+0x240>)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b83      	ldr	r3, [pc, #524]	@ (8003b10 <HAL_RCC_ClockConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e184      	b.n	8003c1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d010      	beq.n	8003942 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	4b7b      	ldr	r3, [pc, #492]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800392c:	429a      	cmp	r2, r3
 800392e:	d908      	bls.n	8003942 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003930:	4b78      	ldr	r3, [pc, #480]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	4975      	ldr	r1, [pc, #468]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 800393e:	4313      	orrs	r3, r2
 8003940:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d010      	beq.n	8003970 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	4b70      	ldr	r3, [pc, #448]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800395a:	429a      	cmp	r2, r3
 800395c:	d908      	bls.n	8003970 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800395e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	496a      	ldr	r1, [pc, #424]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 800396c:	4313      	orrs	r3, r2
 800396e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d010      	beq.n	800399e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	4b64      	ldr	r3, [pc, #400]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003988:	429a      	cmp	r2, r3
 800398a:	d908      	bls.n	800399e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800398c:	4b61      	ldr	r3, [pc, #388]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	495e      	ldr	r1, [pc, #376]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 800399a:	4313      	orrs	r3, r2
 800399c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	4b59      	ldr	r3, [pc, #356]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d908      	bls.n	80039cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039ba:	4b56      	ldr	r3, [pc, #344]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	4953      	ldr	r1, [pc, #332]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d010      	beq.n	80039fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d908      	bls.n	80039fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f023 020f 	bic.w	r2, r3, #15
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4947      	ldr	r1, [pc, #284]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d055      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a06:	4b43      	ldr	r3, [pc, #268]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	4940      	ldr	r1, [pc, #256]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a20:	4b3c      	ldr	r3, [pc, #240]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d121      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0f6      	b.n	8003c1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d107      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a38:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d115      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0ea      	b.n	8003c1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a50:	4b30      	ldr	r3, [pc, #192]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0de      	b.n	8003c1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a60:	4b2c      	ldr	r3, [pc, #176]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0d6      	b.n	8003c1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a70:	4b28      	ldr	r3, [pc, #160]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f023 0207 	bic.w	r2, r3, #7
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4925      	ldr	r1, [pc, #148]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a82:	f7fd fd2f 	bl	80014e4 <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8a:	f7fd fd2b 	bl	80014e4 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e0be      	b.n	8003c1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d1eb      	bne.n	8003a8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d010      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	4b14      	ldr	r3, [pc, #80]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d208      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ace:	4b11      	ldr	r3, [pc, #68]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f023 020f 	bic.w	r2, r3, #15
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	490e      	ldr	r1, [pc, #56]	@ (8003b14 <HAL_RCC_ClockConfig+0x244>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <HAL_RCC_ClockConfig+0x240>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d214      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b08      	ldr	r3, [pc, #32]	@ (8003b10 <HAL_RCC_ClockConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 020f 	bic.w	r2, r3, #15
 8003af6:	4906      	ldr	r1, [pc, #24]	@ (8003b10 <HAL_RCC_ClockConfig+0x240>)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <HAL_RCC_ClockConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e086      	b.n	8003c1e <HAL_RCC_ClockConfig+0x34e>
 8003b10:	52002000 	.word	0x52002000
 8003b14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d010      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	4b3f      	ldr	r3, [pc, #252]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d208      	bcs.n	8003b46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b34:	4b3c      	ldr	r3, [pc, #240]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	4939      	ldr	r1, [pc, #228]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d010      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	4b34      	ldr	r3, [pc, #208]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d208      	bcs.n	8003b74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b62:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	492e      	ldr	r1, [pc, #184]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	4b28      	ldr	r3, [pc, #160]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d208      	bcs.n	8003ba2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b90:	4b25      	ldr	r3, [pc, #148]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	4922      	ldr	r1, [pc, #136]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d010      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69da      	ldr	r2, [r3, #28]
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d208      	bcs.n	8003bd0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	4917      	ldr	r1, [pc, #92]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bd0:	f000 f834 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b14      	ldr	r3, [pc, #80]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	4912      	ldr	r1, [pc, #72]	@ (8003c2c <HAL_RCC_ClockConfig+0x35c>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bee:	4b0e      	ldr	r3, [pc, #56]	@ (8003c28 <HAL_RCC_ClockConfig+0x358>)
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	4a0d      	ldr	r2, [pc, #52]	@ (8003c2c <HAL_RCC_ClockConfig+0x35c>)
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
 8003c04:	4a0a      	ldr	r2, [pc, #40]	@ (8003c30 <HAL_RCC_ClockConfig+0x360>)
 8003c06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c08:	4a0a      	ldr	r2, [pc, #40]	@ (8003c34 <HAL_RCC_ClockConfig+0x364>)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c38 <HAL_RCC_ClockConfig+0x368>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd fa0a 	bl	800102c <HAL_InitTick>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	58024400 	.word	0x58024400
 8003c2c:	0800c4ac 	.word	0x0800c4ac
 8003c30:	24000004 	.word	0x24000004
 8003c34:	24000000 	.word	0x24000000
 8003c38:	24000008 	.word	0x24000008

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	@ 0x24
 8003c40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c42:	4bb3      	ldr	r3, [pc, #716]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c4a:	2b18      	cmp	r3, #24
 8003c4c:	f200 8155 	bhi.w	8003efa <HAL_RCC_GetSysClockFreq+0x2be>
 8003c50:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003cbd 	.word	0x08003cbd
 8003c5c:	08003efb 	.word	0x08003efb
 8003c60:	08003efb 	.word	0x08003efb
 8003c64:	08003efb 	.word	0x08003efb
 8003c68:	08003efb 	.word	0x08003efb
 8003c6c:	08003efb 	.word	0x08003efb
 8003c70:	08003efb 	.word	0x08003efb
 8003c74:	08003efb 	.word	0x08003efb
 8003c78:	08003ce3 	.word	0x08003ce3
 8003c7c:	08003efb 	.word	0x08003efb
 8003c80:	08003efb 	.word	0x08003efb
 8003c84:	08003efb 	.word	0x08003efb
 8003c88:	08003efb 	.word	0x08003efb
 8003c8c:	08003efb 	.word	0x08003efb
 8003c90:	08003efb 	.word	0x08003efb
 8003c94:	08003efb 	.word	0x08003efb
 8003c98:	08003ce9 	.word	0x08003ce9
 8003c9c:	08003efb 	.word	0x08003efb
 8003ca0:	08003efb 	.word	0x08003efb
 8003ca4:	08003efb 	.word	0x08003efb
 8003ca8:	08003efb 	.word	0x08003efb
 8003cac:	08003efb 	.word	0x08003efb
 8003cb0:	08003efb 	.word	0x08003efb
 8003cb4:	08003efb 	.word	0x08003efb
 8003cb8:	08003cef 	.word	0x08003cef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cbc:	4b94      	ldr	r3, [pc, #592]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d009      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cc8:	4b91      	ldr	r3, [pc, #580]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	4a90      	ldr	r2, [pc, #576]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003cda:	e111      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003cdc:	4b8d      	ldr	r3, [pc, #564]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cde:	61bb      	str	r3, [r7, #24]
      break;
 8003ce0:	e10e      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ce4:	61bb      	str	r3, [r7, #24]
      break;
 8003ce6:	e10b      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ce8:	4b8c      	ldr	r3, [pc, #560]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003cea:	61bb      	str	r3, [r7, #24]
      break;
 8003cec:	e108      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cee:	4b88      	ldr	r3, [pc, #544]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003cf8:	4b85      	ldr	r3, [pc, #532]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d04:	4b82      	ldr	r3, [pc, #520]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d0e:	4b80      	ldr	r3, [pc, #512]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d12:	08db      	lsrs	r3, r3, #3
 8003d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80e1 	beq.w	8003ef4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	f000 8083 	beq.w	8003e40 <HAL_RCC_GetSysClockFreq+0x204>
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	f200 80a1 	bhi.w	8003e84 <HAL_RCC_GetSysClockFreq+0x248>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x114>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d056      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d4e:	e099      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d50:	4b6f      	ldr	r3, [pc, #444]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d02d      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	08db      	lsrs	r3, r3, #3
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	4a6b      	ldr	r2, [pc, #428]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d86:	4b62      	ldr	r3, [pc, #392]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d9a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003db6:	e087      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003f24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dca:	4b51      	ldr	r3, [pc, #324]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dde:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dfa:	e065      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003f28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0e:	4b40      	ldr	r3, [pc, #256]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e22:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e3e:	e043      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003f2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e52:	4b2f      	ldr	r3, [pc, #188]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e66:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e82:	e021      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003f28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e96:	4b1e      	ldr	r3, [pc, #120]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eaa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ec6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ec8:	4b11      	ldr	r3, [pc, #68]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	0a5b      	lsrs	r3, r3, #9
 8003ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	ee07 3a90 	vmov	s15, r3
 8003edc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eec:	ee17 3a90 	vmov	r3, s15
 8003ef0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003ef2:	e005      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61bb      	str	r3, [r7, #24]
      break;
 8003ef8:	e002      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003efa:	4b07      	ldr	r3, [pc, #28]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003efc:	61bb      	str	r3, [r7, #24]
      break;
 8003efe:	bf00      	nop
  }

  return sysclockfreq;
 8003f00:	69bb      	ldr	r3, [r7, #24]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3724      	adds	r7, #36	@ 0x24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	58024400 	.word	0x58024400
 8003f14:	03d09000 	.word	0x03d09000
 8003f18:	003d0900 	.word	0x003d0900
 8003f1c:	017d7840 	.word	0x017d7840
 8003f20:	46000000 	.word	0x46000000
 8003f24:	4c742400 	.word	0x4c742400
 8003f28:	4a742400 	.word	0x4a742400
 8003f2c:	4bbebc20 	.word	0x4bbebc20

08003f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f36:	f7ff fe81 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	4b10      	ldr	r3, [pc, #64]	@ (8003f80 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	490f      	ldr	r1, [pc, #60]	@ (8003f84 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f48:	5ccb      	ldrb	r3, [r1, r3]
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f54:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	4a09      	ldr	r2, [pc, #36]	@ (8003f84 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f5e:	5cd3      	ldrb	r3, [r2, r3]
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	4a07      	ldr	r2, [pc, #28]	@ (8003f88 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f6e:	4a07      	ldr	r2, [pc, #28]	@ (8003f8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f74:	4b04      	ldr	r3, [pc, #16]	@ (8003f88 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f76:	681b      	ldr	r3, [r3, #0]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	58024400 	.word	0x58024400
 8003f84:	0800c4ac 	.word	0x0800c4ac
 8003f88:	24000004 	.word	0x24000004
 8003f8c:	24000000 	.word	0x24000000

08003f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f94:	f7ff ffcc 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4904      	ldr	r1, [pc, #16]	@ (8003fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	0800c4ac 	.word	0x0800c4ac

08003fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003fc0:	f7ff ffb6 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	4904      	ldr	r1, [pc, #16]	@ (8003fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	58024400 	.word	0x58024400
 8003fe4:	0800c4ac 	.word	0x0800c4ac

08003fe8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	223f      	movs	r2, #63	@ 0x3f
 8003ff6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8004064 <HAL_RCC_GetClockConfig+0x7c>)
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0207 	and.w	r2, r3, #7
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004004:	4b17      	ldr	r3, [pc, #92]	@ (8004064 <HAL_RCC_GetClockConfig+0x7c>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004010:	4b14      	ldr	r3, [pc, #80]	@ (8004064 <HAL_RCC_GetClockConfig+0x7c>)
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800401c:	4b11      	ldr	r3, [pc, #68]	@ (8004064 <HAL_RCC_GetClockConfig+0x7c>)
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004028:	4b0e      	ldr	r3, [pc, #56]	@ (8004064 <HAL_RCC_GetClockConfig+0x7c>)
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <HAL_RCC_GetClockConfig+0x7c>)
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004040:	4b08      	ldr	r3, [pc, #32]	@ (8004064 <HAL_RCC_GetClockConfig+0x7c>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800404c:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <HAL_RCC_GetClockConfig+0x80>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 020f 	and.w	r2, r3, #15
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	601a      	str	r2, [r3, #0]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	58024400 	.word	0x58024400
 8004068:	52002000 	.word	0x52002000

0800406c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800406c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004070:	b0ca      	sub	sp, #296	@ 0x128
 8004072:	af00      	add	r7, sp, #0
 8004074:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004078:	2300      	movs	r3, #0
 800407a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800407e:	2300      	movs	r3, #0
 8004080:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004090:	2500      	movs	r5, #0
 8004092:	ea54 0305 	orrs.w	r3, r4, r5
 8004096:	d049      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800409e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040a2:	d02f      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80040a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040a8:	d828      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040ae:	d01a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040b4:	d822      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80040ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040be:	d007      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040c0:	e01c      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c2:	4bb8      	ldr	r3, [pc, #736]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	4ab7      	ldr	r2, [pc, #732]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040ce:	e01a      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d4:	3308      	adds	r3, #8
 80040d6:	2102      	movs	r1, #2
 80040d8:	4618      	mov	r0, r3
 80040da:	f002 fb61 	bl	80067a0 <RCCEx_PLL2_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040e4:	e00f      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	3328      	adds	r3, #40	@ 0x28
 80040ec:	2102      	movs	r1, #2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f002 fc08 	bl	8006904 <RCCEx_PLL3_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040fa:	e004      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004102:	e000      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800410e:	4ba5      	ldr	r3, [pc, #660]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004112:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411c:	4aa1      	ldr	r2, [pc, #644]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800411e:	430b      	orrs	r3, r1
 8004120:	6513      	str	r3, [r2, #80]	@ 0x50
 8004122:	e003      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004138:	f04f 0900 	mov.w	r9, #0
 800413c:	ea58 0309 	orrs.w	r3, r8, r9
 8004140:	d047      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004148:	2b04      	cmp	r3, #4
 800414a:	d82a      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800414c:	a201      	add	r2, pc, #4	@ (adr r2, 8004154 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004169 	.word	0x08004169
 8004158:	08004177 	.word	0x08004177
 800415c:	0800418d 	.word	0x0800418d
 8004160:	080041ab 	.word	0x080041ab
 8004164:	080041ab 	.word	0x080041ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004168:	4b8e      	ldr	r3, [pc, #568]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	4a8d      	ldr	r2, [pc, #564]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800416e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004174:	e01a      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	3308      	adds	r3, #8
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f002 fb0e 	bl	80067a0 <RCCEx_PLL2_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800418a:	e00f      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	3328      	adds	r3, #40	@ 0x28
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f002 fbb5 	bl	8006904 <RCCEx_PLL3_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041a0:	e004      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041a8:	e000      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80041aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041b4:	4b7b      	ldr	r3, [pc, #492]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b8:	f023 0107 	bic.w	r1, r3, #7
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c2:	4a78      	ldr	r2, [pc, #480]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80041c8:	e003      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80041de:	f04f 0b00 	mov.w	fp, #0
 80041e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80041e6:	d04c      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f2:	d030      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80041f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f8:	d829      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80041fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80041fc:	d02d      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80041fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004200:	d825      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004202:	2b80      	cmp	r3, #128	@ 0x80
 8004204:	d018      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004206:	2b80      	cmp	r3, #128	@ 0x80
 8004208:	d821      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800420e:	2b40      	cmp	r3, #64	@ 0x40
 8004210:	d007      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004212:	e01c      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004214:	4b63      	ldr	r3, [pc, #396]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	4a62      	ldr	r2, [pc, #392]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800421a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800421e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004220:	e01c      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004226:	3308      	adds	r3, #8
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f002 fab8 	bl	80067a0 <RCCEx_PLL2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004236:	e011      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	3328      	adds	r3, #40	@ 0x28
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f002 fb5f 	bl	8006904 <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800424c:	e006      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004254:	e002      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004256:	bf00      	nop
 8004258:	e000      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800425a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004264:	4b4f      	ldr	r3, [pc, #316]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004268:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004272:	4a4c      	ldr	r2, [pc, #304]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004274:	430b      	orrs	r3, r1
 8004276:	6513      	str	r3, [r2, #80]	@ 0x50
 8004278:	e003      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800428e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004292:	2300      	movs	r3, #0
 8004294:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004298:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800429c:	460b      	mov	r3, r1
 800429e:	4313      	orrs	r3, r2
 80042a0:	d053      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042ae:	d035      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80042b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042b4:	d82e      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80042ba:	d031      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80042bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80042c0:	d828      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c6:	d01a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80042c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042cc:	d822      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80042d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042d6:	d007      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80042d8:	e01c      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042da:	4b32      	ldr	r3, [pc, #200]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	4a31      	ldr	r2, [pc, #196]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042e6:	e01c      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ec:	3308      	adds	r3, #8
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f002 fa55 	bl	80067a0 <RCCEx_PLL2_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80042fc:	e011      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	3328      	adds	r3, #40	@ 0x28
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f002 fafc 	bl	8006904 <RCCEx_PLL3_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004312:	e006      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800431a:	e002      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800431c:	bf00      	nop
 800431e:	e000      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800432a:	4b1e      	ldr	r3, [pc, #120]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800433a:	4a1a      	ldr	r2, [pc, #104]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800433c:	430b      	orrs	r3, r1
 800433e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004340:	e003      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004346:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800434a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004356:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800435a:	2300      	movs	r3, #0
 800435c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004360:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004364:	460b      	mov	r3, r1
 8004366:	4313      	orrs	r3, r2
 8004368:	d056      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004372:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004376:	d038      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004378:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800437c:	d831      	bhi.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800437e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004382:	d034      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004384:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004388:	d82b      	bhi.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800438a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800438e:	d01d      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004390:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004394:	d825      	bhi.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d006      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800439a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043a0:	e01f      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043a2:	bf00      	nop
 80043a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a8:	4ba2      	ldr	r3, [pc, #648]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	4aa1      	ldr	r2, [pc, #644]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043b4:	e01c      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	3308      	adds	r3, #8
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f002 f9ee 	bl	80067a0 <RCCEx_PLL2_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043ca:	e011      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d0:	3328      	adds	r3, #40	@ 0x28
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f002 fa95 	bl	8006904 <RCCEx_PLL3_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043e0:	e006      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043e8:	e002      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80043ea:	bf00      	nop
 80043ec:	e000      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80043ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80043f8:	4b8e      	ldr	r3, [pc, #568]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004408:	4a8a      	ldr	r2, [pc, #552]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800440a:	430b      	orrs	r3, r1
 800440c:	6593      	str	r3, [r2, #88]	@ 0x58
 800440e:	e003      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004414:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004424:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004428:	2300      	movs	r3, #0
 800442a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800442e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004432:	460b      	mov	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	d03a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443e:	2b30      	cmp	r3, #48	@ 0x30
 8004440:	d01f      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004442:	2b30      	cmp	r3, #48	@ 0x30
 8004444:	d819      	bhi.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004446:	2b20      	cmp	r3, #32
 8004448:	d00c      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800444a:	2b20      	cmp	r3, #32
 800444c:	d815      	bhi.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d019      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004452:	2b10      	cmp	r3, #16
 8004454:	d111      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004456:	4b77      	ldr	r3, [pc, #476]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	4a76      	ldr	r2, [pc, #472]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800445c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004460:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004462:	e011      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004468:	3308      	adds	r3, #8
 800446a:	2102      	movs	r1, #2
 800446c:	4618      	mov	r0, r3
 800446e:	f002 f997 	bl	80067a0 <RCCEx_PLL2_Config>
 8004472:	4603      	mov	r3, r0
 8004474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004478:	e006      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004480:	e002      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004490:	4b68      	ldr	r3, [pc, #416]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004494:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449e:	4a65      	ldr	r2, [pc, #404]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044a0:	430b      	orrs	r3, r1
 80044a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044a4:	e003      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80044ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80044be:	2300      	movs	r3, #0
 80044c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80044c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4313      	orrs	r3, r2
 80044cc:	d051      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044d8:	d035      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80044da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044de:	d82e      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044e4:	d031      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80044e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044ea:	d828      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f0:	d01a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80044f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f6:	d822      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004500:	d007      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004502:	e01c      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004504:	4b4b      	ldr	r3, [pc, #300]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	4a4a      	ldr	r2, [pc, #296]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800450a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800450e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004510:	e01c      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004516:	3308      	adds	r3, #8
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f002 f940 	bl	80067a0 <RCCEx_PLL2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004526:	e011      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452c:	3328      	adds	r3, #40	@ 0x28
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f002 f9e7 	bl	8006904 <RCCEx_PLL3_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800453c:	e006      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004544:	e002      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800454a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004554:	4b37      	ldr	r3, [pc, #220]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004558:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004562:	4a34      	ldr	r2, [pc, #208]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004564:	430b      	orrs	r3, r1
 8004566:	6513      	str	r3, [r2, #80]	@ 0x50
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800457e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004582:	2300      	movs	r3, #0
 8004584:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004588:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d056      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800459c:	d033      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800459e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045a2:	d82c      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045a8:	d02f      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80045aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045ae:	d826      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045b4:	d02b      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80045b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045ba:	d820      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045c0:	d012      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80045c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045c6:	d81a      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d022      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d0:	d115      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	3308      	adds	r3, #8
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f002 f8e0 	bl	80067a0 <RCCEx_PLL2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045e6:	e015      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ec:	3328      	adds	r3, #40	@ 0x28
 80045ee:	2101      	movs	r1, #1
 80045f0:	4618      	mov	r0, r3
 80045f2:	f002 f987 	bl	8006904 <RCCEx_PLL3_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045fc:	e00a      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004604:	e006      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004606:	bf00      	nop
 8004608:	e004      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800460a:	bf00      	nop
 800460c:	e002      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800461e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004620:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800462a:	4a02      	ldr	r2, [pc, #8]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800462c:	430b      	orrs	r3, r1
 800462e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004630:	e006      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004632:	bf00      	nop
 8004634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800464c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004650:	2300      	movs	r3, #0
 8004652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004656:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800465a:	460b      	mov	r3, r1
 800465c:	4313      	orrs	r3, r2
 800465e:	d055      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004664:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004668:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800466c:	d033      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800466e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004672:	d82c      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004678:	d02f      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467e:	d826      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004680:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004684:	d02b      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004686:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800468a:	d820      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800468c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004690:	d012      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004696:	d81a      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d022      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800469c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046a0:	d115      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a6:	3308      	adds	r3, #8
 80046a8:	2101      	movs	r1, #1
 80046aa:	4618      	mov	r0, r3
 80046ac:	f002 f878 	bl	80067a0 <RCCEx_PLL2_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046b6:	e015      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046bc:	3328      	adds	r3, #40	@ 0x28
 80046be:	2101      	movs	r1, #1
 80046c0:	4618      	mov	r0, r3
 80046c2:	f002 f91f 	bl	8006904 <RCCEx_PLL3_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046cc:	e00a      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046d4:	e006      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046d6:	bf00      	nop
 80046d8:	e004      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046da:	bf00      	nop
 80046dc:	e002      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10b      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046ec:	4ba3      	ldr	r3, [pc, #652]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80046fc:	4a9f      	ldr	r2, [pc, #636]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046fe:	430b      	orrs	r3, r1
 8004700:	6593      	str	r3, [r2, #88]	@ 0x58
 8004702:	e003      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004708:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004718:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004726:	460b      	mov	r3, r1
 8004728:	4313      	orrs	r3, r2
 800472a:	d037      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004736:	d00e      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800473c:	d816      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d018      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004746:	d111      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004748:	4b8c      	ldr	r3, [pc, #560]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	4a8b      	ldr	r2, [pc, #556]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800474e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004754:	e00f      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	3308      	adds	r3, #8
 800475c:	2101      	movs	r1, #1
 800475e:	4618      	mov	r0, r3
 8004760:	f002 f81e 	bl	80067a0 <RCCEx_PLL2_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800476a:	e004      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800477e:	4b7f      	ldr	r3, [pc, #508]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004782:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478c:	4a7b      	ldr	r2, [pc, #492]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800478e:	430b      	orrs	r3, r1
 8004790:	6513      	str	r3, [r2, #80]	@ 0x50
 8004792:	e003      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800479c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80047a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047ac:	2300      	movs	r3, #0
 80047ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80047b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4313      	orrs	r3, r2
 80047ba:	d039      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80047bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d81c      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80047c6:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	08004809 	.word	0x08004809
 80047d0:	080047dd 	.word	0x080047dd
 80047d4:	080047eb 	.word	0x080047eb
 80047d8:	08004809 	.word	0x08004809
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047dc:	4b67      	ldr	r3, [pc, #412]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	4a66      	ldr	r2, [pc, #408]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047e8:	e00f      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	3308      	adds	r3, #8
 80047f0:	2102      	movs	r1, #2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 ffd4 	bl	80067a0 <RCCEx_PLL2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047fe:	e004      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004806:	e000      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800480a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004812:	4b5a      	ldr	r3, [pc, #360]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004816:	f023 0103 	bic.w	r1, r3, #3
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004820:	4a56      	ldr	r2, [pc, #344]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004822:	430b      	orrs	r3, r1
 8004824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004826:	e003      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800483c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004846:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	f000 809f 	beq.w	8004990 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004852:	4b4b      	ldr	r3, [pc, #300]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a4a      	ldr	r2, [pc, #296]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800485e:	f7fc fe41 	bl	80014e4 <HAL_GetTick>
 8004862:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004866:	e00b      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004868:	f7fc fe3c 	bl	80014e4 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b64      	cmp	r3, #100	@ 0x64
 8004876:	d903      	bls.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800487e:	e005      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004880:	4b3f      	ldr	r3, [pc, #252]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ed      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800488c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004890:	2b00      	cmp	r3, #0
 8004892:	d179      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004894:	4b39      	ldr	r3, [pc, #228]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004896:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048a0:	4053      	eors	r3, r2
 80048a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d015      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048aa:	4b34      	ldr	r3, [pc, #208]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048b6:	4b31      	ldr	r3, [pc, #196]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	4a30      	ldr	r2, [pc, #192]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048c2:	4b2e      	ldr	r3, [pc, #184]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c6:	4a2d      	ldr	r2, [pc, #180]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048ce:	4a2b      	ldr	r2, [pc, #172]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e2:	d118      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fc fdfe 	bl	80014e4 <HAL_GetTick>
 80048e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048ec:	e00d      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ee:	f7fc fdf9 	bl	80014e4 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048f8:	1ad2      	subs	r2, r2, r3
 80048fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80048fe:	429a      	cmp	r2, r3
 8004900:	d903      	bls.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004908:	e005      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800490a:	4b1c      	ldr	r3, [pc, #112]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0eb      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491a:	2b00      	cmp	r3, #0
 800491c:	d129      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800492e:	d10e      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004930:	4b12      	ldr	r3, [pc, #72]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004940:	091a      	lsrs	r2, r3, #4
 8004942:	4b10      	ldr	r3, [pc, #64]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004944:	4013      	ands	r3, r2
 8004946:	4a0d      	ldr	r2, [pc, #52]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004948:	430b      	orrs	r3, r1
 800494a:	6113      	str	r3, [r2, #16]
 800494c:	e005      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800494e:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	4a0a      	ldr	r2, [pc, #40]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004954:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004958:	6113      	str	r3, [r2, #16]
 800495a:	4b08      	ldr	r3, [pc, #32]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800495c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004962:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800496a:	4a04      	ldr	r2, [pc, #16]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800496c:	430b      	orrs	r3, r1
 800496e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004970:	e00e      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800497a:	e009      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800497c:	58024400 	.word	0x58024400
 8004980:	58024800 	.word	0x58024800
 8004984:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800498c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f002 0301 	and.w	r3, r2, #1
 800499c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f000 8089 	beq.w	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049b8:	2b28      	cmp	r3, #40	@ 0x28
 80049ba:	d86b      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80049bc:	a201      	add	r2, pc, #4	@ (adr r2, 80049c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	08004a9d 	.word	0x08004a9d
 80049c8:	08004a95 	.word	0x08004a95
 80049cc:	08004a95 	.word	0x08004a95
 80049d0:	08004a95 	.word	0x08004a95
 80049d4:	08004a95 	.word	0x08004a95
 80049d8:	08004a95 	.word	0x08004a95
 80049dc:	08004a95 	.word	0x08004a95
 80049e0:	08004a95 	.word	0x08004a95
 80049e4:	08004a69 	.word	0x08004a69
 80049e8:	08004a95 	.word	0x08004a95
 80049ec:	08004a95 	.word	0x08004a95
 80049f0:	08004a95 	.word	0x08004a95
 80049f4:	08004a95 	.word	0x08004a95
 80049f8:	08004a95 	.word	0x08004a95
 80049fc:	08004a95 	.word	0x08004a95
 8004a00:	08004a95 	.word	0x08004a95
 8004a04:	08004a7f 	.word	0x08004a7f
 8004a08:	08004a95 	.word	0x08004a95
 8004a0c:	08004a95 	.word	0x08004a95
 8004a10:	08004a95 	.word	0x08004a95
 8004a14:	08004a95 	.word	0x08004a95
 8004a18:	08004a95 	.word	0x08004a95
 8004a1c:	08004a95 	.word	0x08004a95
 8004a20:	08004a95 	.word	0x08004a95
 8004a24:	08004a9d 	.word	0x08004a9d
 8004a28:	08004a95 	.word	0x08004a95
 8004a2c:	08004a95 	.word	0x08004a95
 8004a30:	08004a95 	.word	0x08004a95
 8004a34:	08004a95 	.word	0x08004a95
 8004a38:	08004a95 	.word	0x08004a95
 8004a3c:	08004a95 	.word	0x08004a95
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	08004a9d 	.word	0x08004a9d
 8004a48:	08004a95 	.word	0x08004a95
 8004a4c:	08004a95 	.word	0x08004a95
 8004a50:	08004a95 	.word	0x08004a95
 8004a54:	08004a95 	.word	0x08004a95
 8004a58:	08004a95 	.word	0x08004a95
 8004a5c:	08004a95 	.word	0x08004a95
 8004a60:	08004a95 	.word	0x08004a95
 8004a64:	08004a9d 	.word	0x08004a9d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	2101      	movs	r1, #1
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 fe95 	bl	80067a0 <RCCEx_PLL2_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a7c:	e00f      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a82:	3328      	adds	r3, #40	@ 0x28
 8004a84:	2101      	movs	r1, #1
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 ff3c 	bl	8006904 <RCCEx_PLL3_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a92:	e004      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a9a:	e000      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004aa6:	4bbf      	ldr	r3, [pc, #764]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aaa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ab4:	4abb      	ldr	r2, [pc, #748]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004aba:	e003      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f002 0302 	and.w	r3, r2, #2
 8004ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004ada:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	d041      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d824      	bhi.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004aee:	a201      	add	r2, pc, #4	@ (adr r2, 8004af4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b41 	.word	0x08004b41
 8004af8:	08004b0d 	.word	0x08004b0d
 8004afc:	08004b23 	.word	0x08004b23
 8004b00:	08004b41 	.word	0x08004b41
 8004b04:	08004b41 	.word	0x08004b41
 8004b08:	08004b41 	.word	0x08004b41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b10:	3308      	adds	r3, #8
 8004b12:	2101      	movs	r1, #1
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 fe43 	bl	80067a0 <RCCEx_PLL2_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b20:	e00f      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b26:	3328      	adds	r3, #40	@ 0x28
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f001 feea 	bl	8006904 <RCCEx_PLL3_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b36:	e004      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b3e:	e000      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b4a:	4b96      	ldr	r3, [pc, #600]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4e:	f023 0107 	bic.w	r1, r3, #7
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b58:	4a92      	ldr	r2, [pc, #584]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b5e:	e003      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f002 0304 	and.w	r3, r2, #4
 8004b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4313      	orrs	r3, r2
 8004b86:	d044      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b90:	2b05      	cmp	r3, #5
 8004b92:	d825      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004b94:	a201      	add	r2, pc, #4	@ (adr r2, 8004b9c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004be9 	.word	0x08004be9
 8004ba0:	08004bb5 	.word	0x08004bb5
 8004ba4:	08004bcb 	.word	0x08004bcb
 8004ba8:	08004be9 	.word	0x08004be9
 8004bac:	08004be9 	.word	0x08004be9
 8004bb0:	08004be9 	.word	0x08004be9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb8:	3308      	adds	r3, #8
 8004bba:	2101      	movs	r1, #1
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 fdef 	bl	80067a0 <RCCEx_PLL2_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bc8:	e00f      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	3328      	adds	r3, #40	@ 0x28
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fe96 	bl	8006904 <RCCEx_PLL3_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bde:	e004      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004be6:	e000      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf6:	f023 0107 	bic.w	r1, r3, #7
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c02:	4a68      	ldr	r2, [pc, #416]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c08:	e003      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f002 0320 	and.w	r3, r2, #32
 8004c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c22:	2300      	movs	r3, #0
 8004c24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d055      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c3e:	d033      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c44:	d82c      	bhi.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4a:	d02f      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c50:	d826      	bhi.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c56:	d02b      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004c58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c5c:	d820      	bhi.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c62:	d012      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c68:	d81a      	bhi.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d022      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c72:	d115      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c78:	3308      	adds	r3, #8
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 fd8f 	bl	80067a0 <RCCEx_PLL2_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c88:	e015      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8e:	3328      	adds	r3, #40	@ 0x28
 8004c90:	2102      	movs	r1, #2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f001 fe36 	bl	8006904 <RCCEx_PLL3_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ca6:	e006      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ca8:	bf00      	nop
 8004caa:	e004      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cac:	bf00      	nop
 8004cae:	e002      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cb0:	bf00      	nop
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cbe:	4b39      	ldr	r3, [pc, #228]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cce:	4a35      	ldr	r2, [pc, #212]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cd4:	e003      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004cea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004cf4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	d058      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d06:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d0a:	d033      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004d0c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d10:	d82c      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d16:	d02f      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d1c:	d826      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d22:	d02b      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004d24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d28:	d820      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d2e:	d012      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d34:	d81a      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d022      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d3e:	d115      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d44:	3308      	adds	r3, #8
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 fd29 	bl	80067a0 <RCCEx_PLL2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d54:	e015      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5a:	3328      	adds	r3, #40	@ 0x28
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 fdd0 	bl	8006904 <RCCEx_PLL3_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d72:	e006      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d74:	bf00      	nop
 8004d76:	e004      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d78:	bf00      	nop
 8004d7a:	e002      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d7c:	bf00      	nop
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10e      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d8a:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d9a:	4a02      	ldr	r2, [pc, #8]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004da0:	e006      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004da2:	bf00      	nop
 8004da4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dc6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	d055      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004dd8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ddc:	d033      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004dde:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004de2:	d82c      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de8:	d02f      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004dea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dee:	d826      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004df0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004df4:	d02b      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004df6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004dfa:	d820      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004dfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e00:	d012      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004e02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e06:	d81a      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d022      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e10:	d115      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e16:	3308      	adds	r3, #8
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f001 fcc0 	bl	80067a0 <RCCEx_PLL2_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e26:	e015      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2c:	3328      	adds	r3, #40	@ 0x28
 8004e2e:	2102      	movs	r1, #2
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 fd67 	bl	8006904 <RCCEx_PLL3_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e44:	e006      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e46:	bf00      	nop
 8004e48:	e004      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10b      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e5c:	4ba1      	ldr	r3, [pc, #644]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e60:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e6c:	4a9d      	ldr	r2, [pc, #628]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e72:	e003      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f002 0308 	and.w	r3, r2, #8
 8004e88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e96:	460b      	mov	r3, r1
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	d01e      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eae:	3328      	adds	r3, #40	@ 0x28
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 fd26 	bl	8006904 <RCCEx_PLL3_Config>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ec4:	4b87      	ldr	r3, [pc, #540]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed4:	4a83      	ldr	r2, [pc, #524]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f002 0310 	and.w	r3, r2, #16
 8004ee6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ef0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	d01e      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f06:	d10c      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0c:	3328      	adds	r3, #40	@ 0x28
 8004f0e:	2102      	movs	r1, #2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 fcf7 	bl	8006904 <RCCEx_PLL3_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f22:	4b70      	ldr	r3, [pc, #448]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f32:	4a6c      	ldr	r2, [pc, #432]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004f52:	460b      	mov	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	d03e      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f64:	d022      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004f66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f6a:	d81b      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f74:	d00b      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004f76:	e015      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f001 fc0d 	bl	80067a0 <RCCEx_PLL2_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f8c:	e00f      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f92:	3328      	adds	r3, #40	@ 0x28
 8004f94:	2102      	movs	r1, #2
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 fcb4 	bl	8006904 <RCCEx_PLL3_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004fa2:	e004      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004faa:	e000      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fc6:	4a47      	ldr	r2, [pc, #284]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fcc:	e003      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fe8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004fec:	460b      	mov	r3, r1
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	d03b      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ffe:	d01f      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005000:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005004:	d818      	bhi.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800500a:	d003      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800500c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005010:	d007      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005012:	e011      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005014:	4b33      	ldr	r3, [pc, #204]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	4a32      	ldr	r2, [pc, #200]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800501a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800501e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005020:	e00f      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005026:	3328      	adds	r3, #40	@ 0x28
 8005028:	2101      	movs	r1, #1
 800502a:	4618      	mov	r0, r3
 800502c:	f001 fc6a 	bl	8006904 <RCCEx_PLL3_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005036:	e004      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800503e:	e000      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800504a:	4b26      	ldr	r3, [pc, #152]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800504c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800504e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505a:	4a22      	ldr	r2, [pc, #136]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800505c:	430b      	orrs	r3, r1
 800505e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005060:	e003      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005076:	673b      	str	r3, [r7, #112]	@ 0x70
 8005078:	2300      	movs	r3, #0
 800507a:	677b      	str	r3, [r7, #116]	@ 0x74
 800507c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005080:	460b      	mov	r3, r1
 8005082:	4313      	orrs	r3, r2
 8005084:	d034      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005094:	d007      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005096:	e011      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005098:	4b12      	ldr	r3, [pc, #72]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800509a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509c:	4a11      	ldr	r2, [pc, #68]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800509e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050a4:	e00e      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050aa:	3308      	adds	r3, #8
 80050ac:	2102      	movs	r1, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f001 fb76 	bl	80067a0 <RCCEx_PLL2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050ba:	e003      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10d      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050cc:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050da:	4a02      	ldr	r2, [pc, #8]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050dc:	430b      	orrs	r3, r1
 80050de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050e0:	e006      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80050e2:	bf00      	nop
 80050e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80050fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050fe:	2300      	movs	r3, #0
 8005100:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005102:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005106:	460b      	mov	r3, r1
 8005108:	4313      	orrs	r3, r2
 800510a:	d00c      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005110:	3328      	adds	r3, #40	@ 0x28
 8005112:	2102      	movs	r1, #2
 8005114:	4618      	mov	r0, r3
 8005116:	f001 fbf5 	bl	8006904 <RCCEx_PLL3_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005132:	663b      	str	r3, [r7, #96]	@ 0x60
 8005134:	2300      	movs	r3, #0
 8005136:	667b      	str	r3, [r7, #100]	@ 0x64
 8005138:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800513c:	460b      	mov	r3, r1
 800513e:	4313      	orrs	r3, r2
 8005140:	d038      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800514a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800514e:	d018      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005150:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005154:	d811      	bhi.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800515a:	d014      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800515c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005160:	d80b      	bhi.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d011      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800516a:	d106      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516c:	4bc3      	ldr	r3, [pc, #780]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800516e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005170:	4ac2      	ldr	r2, [pc, #776]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005178:	e008      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005180:	e004      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800518a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800518c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10b      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005194:	4bb9      	ldr	r3, [pc, #740]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005198:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800519c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051a4:	4ab5      	ldr	r2, [pc, #724]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051a6:	430b      	orrs	r3, r1
 80051a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80051aa:	e003      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80051c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051c2:	2300      	movs	r3, #0
 80051c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80051ca:	460b      	mov	r3, r1
 80051cc:	4313      	orrs	r3, r2
 80051ce:	d009      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051d0:	4baa      	ldr	r3, [pc, #680]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80051d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051de:	4aa7      	ldr	r2, [pc, #668]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051e0:	430b      	orrs	r3, r1
 80051e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80051e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80051f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80051f2:	2300      	movs	r3, #0
 80051f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80051f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80051fa:	460b      	mov	r3, r1
 80051fc:	4313      	orrs	r3, r2
 80051fe:	d00a      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005200:	4b9e      	ldr	r3, [pc, #632]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005210:	4a9a      	ldr	r2, [pc, #616]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005212:	430b      	orrs	r3, r1
 8005214:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005224:	2300      	movs	r3, #0
 8005226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005228:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800522c:	460b      	mov	r3, r1
 800522e:	4313      	orrs	r3, r2
 8005230:	d009      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005232:	4b92      	ldr	r3, [pc, #584]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005236:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800523a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005240:	4a8e      	ldr	r2, [pc, #568]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005242:	430b      	orrs	r3, r1
 8005244:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005252:	643b      	str	r3, [r7, #64]	@ 0x40
 8005254:	2300      	movs	r3, #0
 8005256:	647b      	str	r3, [r7, #68]	@ 0x44
 8005258:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800525c:	460b      	mov	r3, r1
 800525e:	4313      	orrs	r3, r2
 8005260:	d00e      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005262:	4b86      	ldr	r3, [pc, #536]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	4a85      	ldr	r2, [pc, #532]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005268:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800526c:	6113      	str	r3, [r2, #16]
 800526e:	4b83      	ldr	r3, [pc, #524]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005270:	6919      	ldr	r1, [r3, #16]
 8005272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005276:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800527a:	4a80      	ldr	r2, [pc, #512]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800527c:	430b      	orrs	r3, r1
 800527e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800528c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800528e:	2300      	movs	r3, #0
 8005290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005292:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005296:	460b      	mov	r3, r1
 8005298:	4313      	orrs	r3, r2
 800529a:	d009      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800529c:	4b77      	ldr	r3, [pc, #476]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800529e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052aa:	4a74      	ldr	r2, [pc, #464]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052ac:	430b      	orrs	r3, r1
 80052ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80052bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80052be:	2300      	movs	r3, #0
 80052c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80052c6:	460b      	mov	r3, r1
 80052c8:	4313      	orrs	r3, r2
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052cc:	4b6b      	ldr	r3, [pc, #428]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80052d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052dc:	4a67      	ldr	r2, [pc, #412]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052de:	430b      	orrs	r3, r1
 80052e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80052e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	2100      	movs	r1, #0
 80052ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80052f8:	460b      	mov	r3, r1
 80052fa:	4313      	orrs	r3, r2
 80052fc:	d011      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005302:	3308      	adds	r3, #8
 8005304:	2100      	movs	r1, #0
 8005306:	4618      	mov	r0, r3
 8005308:	f001 fa4a 	bl	80067a0 <RCCEx_PLL2_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800531e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	2100      	movs	r1, #0
 800532c:	6239      	str	r1, [r7, #32]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
 8005334:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005338:	460b      	mov	r3, r1
 800533a:	4313      	orrs	r3, r2
 800533c:	d011      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800533e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005342:	3308      	adds	r3, #8
 8005344:	2101      	movs	r1, #1
 8005346:	4618      	mov	r0, r3
 8005348:	f001 fa2a 	bl	80067a0 <RCCEx_PLL2_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800535e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	2100      	movs	r1, #0
 800536c:	61b9      	str	r1, [r7, #24]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005378:	460b      	mov	r3, r1
 800537a:	4313      	orrs	r3, r2
 800537c:	d011      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	3308      	adds	r3, #8
 8005384:	2102      	movs	r1, #2
 8005386:	4618      	mov	r0, r3
 8005388:	f001 fa0a 	bl	80067a0 <RCCEx_PLL2_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80053a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	2100      	movs	r1, #0
 80053ac:	6139      	str	r1, [r7, #16]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80053b8:	460b      	mov	r3, r1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	d011      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c2:	3328      	adds	r3, #40	@ 0x28
 80053c4:	2100      	movs	r1, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 fa9c 	bl	8006904 <RCCEx_PLL3_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80053d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	2100      	movs	r1, #0
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053f8:	460b      	mov	r3, r1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	d011      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005402:	3328      	adds	r3, #40	@ 0x28
 8005404:	2101      	movs	r1, #1
 8005406:	4618      	mov	r0, r3
 8005408:	f001 fa7c 	bl	8006904 <RCCEx_PLL3_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800541e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	2100      	movs	r1, #0
 800542c:	6039      	str	r1, [r7, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005438:	460b      	mov	r3, r1
 800543a:	4313      	orrs	r3, r2
 800543c:	d011      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	3328      	adds	r3, #40	@ 0x28
 8005444:	2102      	movs	r1, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f001 fa5c 	bl	8006904 <RCCEx_PLL3_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800545e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005462:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e000      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
}
 8005470:	4618      	mov	r0, r3
 8005472:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005476:	46bd      	mov	sp, r7
 8005478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800547c:	58024400 	.word	0x58024400

08005480 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b090      	sub	sp, #64	@ 0x40
 8005484:	af00      	add	r7, sp, #0
 8005486:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800548a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800548e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005492:	430b      	orrs	r3, r1
 8005494:	f040 8094 	bne.w	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005498:	4b9e      	ldr	r3, [pc, #632]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800549a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	f200 8087 	bhi.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80054aa:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054c5 	.word	0x080054c5
 80054b4:	080054ed 	.word	0x080054ed
 80054b8:	08005515 	.word	0x08005515
 80054bc:	080055b1 	.word	0x080055b1
 80054c0:	0800553d 	.word	0x0800553d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054c4:	4b93      	ldr	r3, [pc, #588]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054d0:	d108      	bne.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 f810 	bl	80064fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054e0:	f000 bd45 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054e8:	f000 bd41 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054ec:	4b89      	ldr	r3, [pc, #548]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054f8:	d108      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054fa:	f107 0318 	add.w	r3, r7, #24
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fd54 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005508:	f000 bd31 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005510:	f000 bd2d 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005514:	4b7f      	ldr	r3, [pc, #508]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800551c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005520:	d108      	bne.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005522:	f107 030c 	add.w	r3, r7, #12
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fe94 	bl	8006254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005530:	f000 bd1d 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005538:	f000 bd19 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800553c:	4b75      	ldr	r3, [pc, #468]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800553e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005540:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005544:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005546:	4b73      	ldr	r3, [pc, #460]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b04      	cmp	r3, #4
 8005550:	d10c      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005558:	4b6e      	ldr	r3, [pc, #440]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	08db      	lsrs	r3, r3, #3
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	4a6d      	ldr	r2, [pc, #436]	@ (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
 8005568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800556a:	e01f      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800556c:	4b69      	ldr	r3, [pc, #420]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005578:	d106      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800557a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005580:	d102      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005582:	4b66      	ldr	r3, [pc, #408]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005586:	e011      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005588:	4b62      	ldr	r3, [pc, #392]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005590:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005594:	d106      	bne.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800559c:	d102      	bne.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800559e:	4b60      	ldr	r3, [pc, #384]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80055a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055a2:	e003      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80055a8:	f000 bce1 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80055ac:	f000 bcdf 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80055b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055b4:	f000 bcdb 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055bc:	f000 bcd7 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80055c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055c4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80055c8:	430b      	orrs	r3, r1
 80055ca:	f040 80ad 	bne.w	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80055ce:	4b51      	ldr	r3, [pc, #324]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80055d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055de:	d056      	beq.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e6:	f200 8090 	bhi.w	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80055ee:	f000 8088 	beq.w	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80055f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80055f6:	f200 8088 	bhi.w	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	2b80      	cmp	r3, #128	@ 0x80
 80055fe:	d032      	beq.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005602:	2b80      	cmp	r3, #128	@ 0x80
 8005604:	f200 8081 	bhi.w	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005610:	2b40      	cmp	r3, #64	@ 0x40
 8005612:	d014      	beq.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005614:	e079      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005616:	4b3f      	ldr	r3, [pc, #252]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800561e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005622:	d108      	bne.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005628:	4618      	mov	r0, r3
 800562a:	f000 ff67 	bl	80064fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005632:	f000 bc9c 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800563a:	f000 bc98 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800563e:	4b35      	ldr	r3, [pc, #212]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005646:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800564a:	d108      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800564c:	f107 0318 	add.w	r3, r7, #24
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fcab 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800565a:	f000 bc88 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005662:	f000 bc84 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005666:	4b2b      	ldr	r3, [pc, #172]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800566e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005672:	d108      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005674:	f107 030c 	add.w	r3, r7, #12
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fdeb 	bl	8006254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005682:	f000 bc74 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800568a:	f000 bc70 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800568e:	4b21      	ldr	r3, [pc, #132]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005692:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005698:	4b1e      	ldr	r3, [pc, #120]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d10c      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80056a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	08db      	lsrs	r3, r3, #3
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	4a18      	ldr	r2, [pc, #96]	@ (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056b6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056bc:	e01f      	b.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056be:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ca:	d106      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80056cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056d2:	d102      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056d4:	4b11      	ldr	r3, [pc, #68]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80056d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056d8:	e011      	b.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056da:	4b0e      	ldr	r3, [pc, #56]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056e6:	d106      	bne.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80056e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ee:	d102      	bne.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80056f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056f4:	e003      	b.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80056fa:	f000 bc38 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80056fe:	f000 bc36 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005702:	4b08      	ldr	r3, [pc, #32]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005706:	f000 bc32 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800570e:	f000 bc2e 	b.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005712:	bf00      	nop
 8005714:	58024400 	.word	0x58024400
 8005718:	03d09000 	.word	0x03d09000
 800571c:	003d0900 	.word	0x003d0900
 8005720:	017d7840 	.word	0x017d7840
 8005724:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005730:	430b      	orrs	r3, r1
 8005732:	f040 809c 	bne.w	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005736:	4b9e      	ldr	r3, [pc, #632]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800573a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800573e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005742:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005746:	d054      	beq.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800574e:	f200 808b 	bhi.w	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005754:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005758:	f000 8083 	beq.w	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005762:	f200 8081 	bhi.w	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005768:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800576c:	d02f      	beq.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005774:	d878      	bhi.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800577c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005782:	d012      	beq.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005784:	e070      	b.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005786:	4b8a      	ldr	r3, [pc, #552]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800578e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005792:	d107      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005798:	4618      	mov	r0, r3
 800579a:	f000 feaf 	bl	80064fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800579e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057a2:	e3e4      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057a8:	e3e1      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057aa:	4b81      	ldr	r3, [pc, #516]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057b6:	d107      	bne.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057b8:	f107 0318 	add.w	r3, r7, #24
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fbf5 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057c6:	e3d2      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057cc:	e3cf      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057ce:	4b78      	ldr	r3, [pc, #480]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057da:	d107      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057dc:	f107 030c 	add.w	r3, r7, #12
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fd37 	bl	8006254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057ea:	e3c0      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057f0:	e3bd      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057f2:	4b6f      	ldr	r3, [pc, #444]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057fc:	4b6c      	ldr	r3, [pc, #432]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b04      	cmp	r3, #4
 8005806:	d10c      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800580e:	4b68      	ldr	r3, [pc, #416]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	08db      	lsrs	r3, r3, #3
 8005814:	f003 0303 	and.w	r3, r3, #3
 8005818:	4a66      	ldr	r2, [pc, #408]	@ (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800581a:	fa22 f303 	lsr.w	r3, r2, r3
 800581e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005820:	e01e      	b.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005822:	4b63      	ldr	r3, [pc, #396]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800582e:	d106      	bne.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005836:	d102      	bne.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005838:	4b5f      	ldr	r3, [pc, #380]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800583a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800583c:	e010      	b.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800583e:	4b5c      	ldr	r3, [pc, #368]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800584a:	d106      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800584c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005852:	d102      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005854:	4b59      	ldr	r3, [pc, #356]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005858:	e002      	b.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800585e:	e386      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005860:	e385      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005862:	4b57      	ldr	r3, [pc, #348]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005866:	e382      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800586c:	e37f      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800586e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005872:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005876:	430b      	orrs	r3, r1
 8005878:	f040 80a7 	bne.w	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800587c:	4b4c      	ldr	r3, [pc, #304]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800587e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005880:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005884:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800588c:	d055      	beq.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005894:	f200 8096 	bhi.w	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800589e:	f000 8084 	beq.w	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058a8:	f200 808c 	bhi.w	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058b2:	d030      	beq.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058ba:	f200 8083 	bhi.w	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80058be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d004      	beq.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058ca:	d012      	beq.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80058cc:	e07a      	b.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058ce:	4b38      	ldr	r3, [pc, #224]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058da:	d107      	bne.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fe0b 	bl	80064fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058ea:	e340      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058f0:	e33d      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058f2:	4b2f      	ldr	r3, [pc, #188]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058fe:	d107      	bne.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005900:	f107 0318 	add.w	r3, r7, #24
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fb51 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800590e:	e32e      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005914:	e32b      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005916:	4b26      	ldr	r3, [pc, #152]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800591e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005922:	d107      	bne.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005924:	f107 030c 	add.w	r3, r7, #12
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fc93 	bl	8006254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005932:	e31c      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005938:	e319      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800593a:	4b1d      	ldr	r3, [pc, #116]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800593c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800593e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005944:	4b1a      	ldr	r3, [pc, #104]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b04      	cmp	r3, #4
 800594e:	d10c      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005956:	4b16      	ldr	r3, [pc, #88]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	08db      	lsrs	r3, r3, #3
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	4a14      	ldr	r2, [pc, #80]	@ (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005962:	fa22 f303 	lsr.w	r3, r2, r3
 8005966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005968:	e01e      	b.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800596a:	4b11      	ldr	r3, [pc, #68]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005976:	d106      	bne.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800597e:	d102      	bne.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005980:	4b0d      	ldr	r3, [pc, #52]	@ (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005984:	e010      	b.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005986:	4b0a      	ldr	r3, [pc, #40]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800598e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005992:	d106      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800599a:	d102      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800599c:	4b07      	ldr	r3, [pc, #28]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800599e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059a0:	e002      	b.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80059a6:	e2e2      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059a8:	e2e1      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059aa:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80059ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ae:	e2de      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059b0:	58024400 	.word	0x58024400
 80059b4:	03d09000 	.word	0x03d09000
 80059b8:	003d0900 	.word	0x003d0900
 80059bc:	017d7840 	.word	0x017d7840
 80059c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c8:	e2d1      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80059ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80059d2:	430b      	orrs	r3, r1
 80059d4:	f040 809c 	bne.w	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80059d8:	4b93      	ldr	r3, [pc, #588]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80059da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80059e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80059e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059e8:	d054      	beq.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059f0:	f200 808b 	bhi.w	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80059f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059fa:	f000 8083 	beq.w	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80059fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a04:	f200 8081 	bhi.w	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a0e:	d02f      	beq.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a16:	d878      	bhi.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d004      	beq.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a24:	d012      	beq.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005a26:	e070      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a28:	4b7f      	ldr	r3, [pc, #508]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a34:	d107      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fd5e 	bl	80064fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a44:	e293      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a4a:	e290      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a4c:	4b76      	ldr	r3, [pc, #472]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a58:	d107      	bne.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a5a:	f107 0318 	add.w	r3, r7, #24
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 faa4 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a68:	e281      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a6e:	e27e      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a70:	4b6d      	ldr	r3, [pc, #436]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a7c:	d107      	bne.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a7e:	f107 030c 	add.w	r3, r7, #12
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fbe6 	bl	8006254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a8c:	e26f      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a92:	e26c      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a94:	4b64      	ldr	r3, [pc, #400]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a9c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a9e:	4b62      	ldr	r3, [pc, #392]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ab0:	4b5d      	ldr	r3, [pc, #372]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	08db      	lsrs	r3, r3, #3
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	4a5c      	ldr	r2, [pc, #368]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ac2:	e01e      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ac4:	4b58      	ldr	r3, [pc, #352]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad0:	d106      	bne.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ad8:	d102      	bne.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005ada:	4b55      	ldr	r3, [pc, #340]	@ (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ade:	e010      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ae0:	4b51      	ldr	r3, [pc, #324]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ae8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aec:	d106      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005af4:	d102      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005af6:	4b4f      	ldr	r3, [pc, #316]	@ (8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005afa:	e002      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b00:	e235      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b02:	e234      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b04:	4b4c      	ldr	r3, [pc, #304]	@ (8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b08:	e231      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b0e:	e22e      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b14:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	f040 808f 	bne.w	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005b1e:	4b42      	ldr	r3, [pc, #264]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b22:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005b26:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b2e:	d06b      	beq.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b36:	d874      	bhi.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b3e:	d056      	beq.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b46:	d86c      	bhi.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b4e:	d03b      	beq.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b56:	d864      	bhi.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b5e:	d021      	beq.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b66:	d85c      	bhi.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b74:	d004      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005b76:	e054      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005b78:	f7fe fa0a 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 8005b7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b7e:	e1f6      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b80:	4b29      	ldr	r3, [pc, #164]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b8e:	f107 0318 	add.w	r3, r7, #24
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fa0a 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b9c:	e1e7      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba2:	e1e4      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ba4:	4b20      	ldr	r3, [pc, #128]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bb0:	d107      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bb2:	f107 030c 	add.w	r3, r7, #12
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fb4c 	bl	8006254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bc0:	e1d5      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bc6:	e1d2      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bc8:	4b17      	ldr	r3, [pc, #92]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d109      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bd4:	4b14      	ldr	r3, [pc, #80]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	08db      	lsrs	r3, r3, #3
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	4a13      	ldr	r2, [pc, #76]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
 8005be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005be6:	e1c2      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bec:	e1bf      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005bee:	4b0e      	ldr	r3, [pc, #56]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bfa:	d102      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c00:	e1b5      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c06:	e1b2      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c08:	4b07      	ldr	r3, [pc, #28]	@ (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c14:	d102      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005c16:	4b07      	ldr	r3, [pc, #28]	@ (8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c1a:	e1a8      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c20:	e1a5      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c26:	e1a2      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c28:	58024400 	.word	0x58024400
 8005c2c:	03d09000 	.word	0x03d09000
 8005c30:	003d0900 	.word	0x003d0900
 8005c34:	017d7840 	.word	0x017d7840
 8005c38:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c40:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005c44:	430b      	orrs	r3, r1
 8005c46:	d173      	bne.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005c48:	4b9c      	ldr	r3, [pc, #624]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c58:	d02f      	beq.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c60:	d863      	bhi.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d004      	beq.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c6e:	d012      	beq.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005c70:	e05b      	b.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c72:	4b92      	ldr	r3, [pc, #584]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c7e:	d107      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c80:	f107 0318 	add.w	r3, r7, #24
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f991 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c8e:	e16e      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c94:	e16b      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c96:	4b89      	ldr	r3, [pc, #548]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ca4:	f107 030c 	add.w	r3, r7, #12
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fad3 	bl	8006254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cb2:	e15c      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cb8:	e159      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005cba:	4b80      	ldr	r3, [pc, #512]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cc4:	4b7d      	ldr	r3, [pc, #500]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d10c      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cd6:	4b79      	ldr	r3, [pc, #484]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	08db      	lsrs	r3, r3, #3
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	4a77      	ldr	r2, [pc, #476]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ce8:	e01e      	b.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cea:	4b74      	ldr	r3, [pc, #464]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cf6:	d106      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cfe:	d102      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d00:	4b70      	ldr	r3, [pc, #448]	@ (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d04:	e010      	b.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d06:	4b6d      	ldr	r3, [pc, #436]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d12:	d106      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d1a:	d102      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d20:	e002      	b.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005d26:	e122      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d28:	e121      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d2e:	e11e      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d34:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	d133      	bne.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005d3c:	4b5f      	ldr	r3, [pc, #380]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d004      	beq.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d52:	d012      	beq.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005d54:	e023      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d56:	4b59      	ldr	r3, [pc, #356]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d62:	d107      	bne.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fbc7 	bl	80064fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d72:	e0fc      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d78:	e0f9      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d7a:	4b50      	ldr	r3, [pc, #320]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d86:	d107      	bne.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d88:	f107 0318 	add.w	r3, r7, #24
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 f90d 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d96:	e0ea      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d9c:	e0e7      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005da2:	e0e4      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005da8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005dac:	430b      	orrs	r3, r1
 8005dae:	f040 808d 	bne.w	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005db2:	4b42      	ldr	r3, [pc, #264]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005dba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dc2:	d06b      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dca:	d874      	bhi.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd2:	d056      	beq.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dda:	d86c      	bhi.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005de2:	d03b      	beq.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005dea:	d864      	bhi.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005df2:	d021      	beq.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dfa:	d85c      	bhi.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e08:	d004      	beq.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005e0a:	e054      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005e0c:	f000 f8b8 	bl	8005f80 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e10:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e12:	e0ac      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e14:	4b29      	ldr	r3, [pc, #164]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e20:	d107      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e22:	f107 0318 	add.w	r3, r7, #24
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f8c0 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e30:	e09d      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e36:	e09a      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e38:	4b20      	ldr	r3, [pc, #128]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e44:	d107      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e46:	f107 030c 	add.w	r3, r7, #12
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fa02 	bl	8006254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e54:	e08b      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e5a:	e088      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e5c:	4b17      	ldr	r3, [pc, #92]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d109      	bne.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e68:	4b14      	ldr	r3, [pc, #80]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	08db      	lsrs	r3, r3, #3
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	4a13      	ldr	r2, [pc, #76]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005e74:	fa22 f303 	lsr.w	r3, r2, r3
 8005e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e7a:	e078      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e80:	e075      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005e82:	4b0e      	ldr	r3, [pc, #56]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e8e:	d102      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005e90:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e94:	e06b      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e9a:	e068      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e9c:	4b07      	ldr	r3, [pc, #28]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ea8:	d102      	bne.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005eaa:	4b07      	ldr	r3, [pc, #28]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eae:	e05e      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eb4:	e05b      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eba:	e058      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ebc:	58024400 	.word	0x58024400
 8005ec0:	03d09000 	.word	0x03d09000
 8005ec4:	003d0900 	.word	0x003d0900
 8005ec8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	d148      	bne.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005ed8:	4b27      	ldr	r3, [pc, #156]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005edc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ee0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ee8:	d02a      	beq.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef0:	d838      	bhi.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005efe:	d00d      	beq.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005f00:	e030      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f02:	4b1d      	ldr	r3, [pc, #116]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f0e:	d102      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005f10:	4b1a      	ldr	r3, [pc, #104]	@ (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f14:	e02b      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f1a:	e028      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f1c:	4b16      	ldr	r3, [pc, #88]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f28:	d107      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fae4 	bl	80064fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f38:	e019      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f3e:	e016      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f40:	4b0d      	ldr	r3, [pc, #52]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f4c:	d107      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f4e:	f107 0318 	add.w	r3, r7, #24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 f82a 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f5c:	e007      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f62:	e004      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f68:	e001      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3740      	adds	r7, #64	@ 0x40
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	58024400 	.word	0x58024400
 8005f7c:	017d7840 	.word	0x017d7840

08005f80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f84:	f7fd ffd4 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	4b06      	ldr	r3, [pc, #24]	@ (8005fa4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	091b      	lsrs	r3, r3, #4
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	4904      	ldr	r1, [pc, #16]	@ (8005fa8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f96:	5ccb      	ldrb	r3, [r1, r3]
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	58024400 	.word	0x58024400
 8005fa8:	0800c4ac 	.word	0x0800c4ac

08005fac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b089      	sub	sp, #36	@ 0x24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fb4:	4ba1      	ldr	r3, [pc, #644]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005fbe:	4b9f      	ldr	r3, [pc, #636]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	0b1b      	lsrs	r3, r3, #12
 8005fc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005fca:	4b9c      	ldr	r3, [pc, #624]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005fd6:	4b99      	ldr	r3, [pc, #612]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fda:	08db      	lsrs	r3, r3, #3
 8005fdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8111 	beq.w	800621c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	f000 8083 	beq.w	8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b02      	cmp	r3, #2
 8006006:	f200 80a1 	bhi.w	800614c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d056      	beq.n	80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006016:	e099      	b.n	800614c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006018:	4b88      	ldr	r3, [pc, #544]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d02d      	beq.n	8006080 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006024:	4b85      	ldr	r3, [pc, #532]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	08db      	lsrs	r3, r3, #3
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	4a84      	ldr	r2, [pc, #528]	@ (8006240 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
 8006034:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800604e:	4b7b      	ldr	r3, [pc, #492]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006062:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800607e:	e087      	b.n	8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006248 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800608e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006092:	4b6a      	ldr	r3, [pc, #424]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060c2:	e065      	b.n	8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800624c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d6:	4b59      	ldr	r3, [pc, #356]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006106:	e043      	b.n	8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006112:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611a:	4b48      	ldr	r3, [pc, #288]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800611c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612a:	ed97 6a03 	vldr	s12, [r7, #12]
 800612e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800613e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800614a:	e021      	b.n	8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006156:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800624c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800615a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800615e:	4b37      	ldr	r3, [pc, #220]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006172:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800617e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800618e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006190:	4b2a      	ldr	r3, [pc, #168]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	0a5b      	lsrs	r3, r3, #9
 8006196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061b6:	ee17 2a90 	vmov	r2, s15
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80061be:	4b1f      	ldr	r3, [pc, #124]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c2:	0c1b      	lsrs	r3, r3, #16
 80061c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e4:	ee17 2a90 	vmov	r2, s15
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061ec:	4b13      	ldr	r3, [pc, #76]	@ (800623c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f0:	0e1b      	lsrs	r3, r3, #24
 80061f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006206:	edd7 6a07 	vldr	s13, [r7, #28]
 800620a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800620e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006212:	ee17 2a90 	vmov	r2, s15
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800621a:	e008      	b.n	800622e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	609a      	str	r2, [r3, #8]
}
 800622e:	bf00      	nop
 8006230:	3724      	adds	r7, #36	@ 0x24
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	58024400 	.word	0x58024400
 8006240:	03d09000 	.word	0x03d09000
 8006244:	46000000 	.word	0x46000000
 8006248:	4c742400 	.word	0x4c742400
 800624c:	4a742400 	.word	0x4a742400
 8006250:	4bbebc20 	.word	0x4bbebc20

08006254 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006254:	b480      	push	{r7}
 8006256:	b089      	sub	sp, #36	@ 0x24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800625c:	4ba1      	ldr	r3, [pc, #644]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800625e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006260:	f003 0303 	and.w	r3, r3, #3
 8006264:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006266:	4b9f      	ldr	r3, [pc, #636]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626a:	0d1b      	lsrs	r3, r3, #20
 800626c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006270:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006272:	4b9c      	ldr	r3, [pc, #624]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800627e:	4b99      	ldr	r3, [pc, #612]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006282:	08db      	lsrs	r3, r3, #3
 8006284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	fb02 f303 	mul.w	r3, r2, r3
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006296:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8111 	beq.w	80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	f000 8083 	beq.w	80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	f200 80a1 	bhi.w	80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d056      	beq.n	800636c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80062be:	e099      	b.n	80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062c0:	4b88      	ldr	r3, [pc, #544]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d02d      	beq.n	8006328 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062cc:	4b85      	ldr	r3, [pc, #532]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	08db      	lsrs	r3, r3, #3
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	4a84      	ldr	r2, [pc, #528]	@ (80064e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80062d8:	fa22 f303 	lsr.w	r3, r2, r3
 80062dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f6:	4b7b      	ldr	r3, [pc, #492]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006306:	ed97 6a03 	vldr	s12, [r7, #12]
 800630a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800630e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800631a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006322:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006326:	e087      	b.n	8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80064f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633a:	4b6a      	ldr	r3, [pc, #424]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634a:	ed97 6a03 	vldr	s12, [r7, #12]
 800634e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800635e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800636a:	e065      	b.n	8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006376:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800637a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637e:	4b59      	ldr	r3, [pc, #356]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006392:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800639e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ae:	e043      	b.n	8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80063be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c2:	4b48      	ldr	r3, [pc, #288]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063f2:	e021      	b.n	8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006406:	4b37      	ldr	r3, [pc, #220]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006416:	ed97 6a03 	vldr	s12, [r7, #12]
 800641a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800641e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800642a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006436:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006438:	4b2a      	ldr	r3, [pc, #168]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800643a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643c:	0a5b      	lsrs	r3, r3, #9
 800643e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800644e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006452:	edd7 6a07 	vldr	s13, [r7, #28]
 8006456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800645a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800645e:	ee17 2a90 	vmov	r2, s15
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006466:	4b1f      	ldr	r3, [pc, #124]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646a:	0c1b      	lsrs	r3, r3, #16
 800646c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006470:	ee07 3a90 	vmov	s15, r3
 8006474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006478:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800647c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006480:	edd7 6a07 	vldr	s13, [r7, #28]
 8006484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800648c:	ee17 2a90 	vmov	r2, s15
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006494:	4b13      	ldr	r3, [pc, #76]	@ (80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006498:	0e1b      	lsrs	r3, r3, #24
 800649a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80064b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ba:	ee17 2a90 	vmov	r2, s15
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064c2:	e008      	b.n	80064d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	609a      	str	r2, [r3, #8]
}
 80064d6:	bf00      	nop
 80064d8:	3724      	adds	r7, #36	@ 0x24
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	58024400 	.word	0x58024400
 80064e8:	03d09000 	.word	0x03d09000
 80064ec:	46000000 	.word	0x46000000
 80064f0:	4c742400 	.word	0x4c742400
 80064f4:	4a742400 	.word	0x4a742400
 80064f8:	4bbebc20 	.word	0x4bbebc20

080064fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b089      	sub	sp, #36	@ 0x24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006504:	4ba0      	ldr	r3, [pc, #640]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800650e:	4b9e      	ldr	r3, [pc, #632]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006512:	091b      	lsrs	r3, r3, #4
 8006514:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006518:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800651a:	4b9b      	ldr	r3, [pc, #620]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800651c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006524:	4b98      	ldr	r3, [pc, #608]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006528:	08db      	lsrs	r3, r3, #3
 800652a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	fb02 f303 	mul.w	r3, r2, r3
 8006534:	ee07 3a90 	vmov	s15, r3
 8006538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8111 	beq.w	800676a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	2b02      	cmp	r3, #2
 800654c:	f000 8083 	beq.w	8006656 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b02      	cmp	r3, #2
 8006554:	f200 80a1 	bhi.w	800669a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d056      	beq.n	8006612 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006564:	e099      	b.n	800669a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006566:	4b88      	ldr	r3, [pc, #544]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d02d      	beq.n	80065ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006572:	4b85      	ldr	r3, [pc, #532]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	08db      	lsrs	r3, r3, #3
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	4a83      	ldr	r2, [pc, #524]	@ (800678c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800657e:	fa22 f303 	lsr.w	r3, r2, r3
 8006582:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	ee07 3a90 	vmov	s15, r3
 8006594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800659c:	4b7a      	ldr	r3, [pc, #488]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800659e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80065b0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065cc:	e087      	b.n	80066de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006794 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80065dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e0:	4b69      	ldr	r3, [pc, #420]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006600:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006610:	e065      	b.n	80066de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	ee07 3a90 	vmov	s15, r3
 8006618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006624:	4b58      	ldr	r3, [pc, #352]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006634:	ed97 6a03 	vldr	s12, [r7, #12]
 8006638:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800663c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006644:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800664c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006654:	e043      	b.n	80066de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	ee07 3a90 	vmov	s15, r3
 800665c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006660:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800679c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006668:	4b47      	ldr	r3, [pc, #284]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800666a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006670:	ee07 3a90 	vmov	s15, r3
 8006674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006678:	ed97 6a03 	vldr	s12, [r7, #12]
 800667c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800668c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006698:	e021      	b.n	80066de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	ee07 3a90 	vmov	s15, r3
 80066a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006794 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ac:	4b36      	ldr	r3, [pc, #216]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b4:	ee07 3a90 	vmov	s15, r3
 80066b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80066c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80066de:	4b2a      	ldr	r3, [pc, #168]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e2:	0a5b      	lsrs	r3, r3, #9
 80066e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066e8:	ee07 3a90 	vmov	s15, r3
 80066ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80066fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006704:	ee17 2a90 	vmov	r2, s15
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800670c:	4b1e      	ldr	r3, [pc, #120]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800670e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006710:	0c1b      	lsrs	r3, r3, #16
 8006712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006726:	edd7 6a07 	vldr	s13, [r7, #28]
 800672a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800672e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006732:	ee17 2a90 	vmov	r2, s15
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800673a:	4b13      	ldr	r3, [pc, #76]	@ (8006788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800673c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673e:	0e1b      	lsrs	r3, r3, #24
 8006740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006750:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006754:	edd7 6a07 	vldr	s13, [r7, #28]
 8006758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800675c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006760:	ee17 2a90 	vmov	r2, s15
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006768:	e008      	b.n	800677c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	609a      	str	r2, [r3, #8]
}
 800677c:	bf00      	nop
 800677e:	3724      	adds	r7, #36	@ 0x24
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	58024400 	.word	0x58024400
 800678c:	03d09000 	.word	0x03d09000
 8006790:	46000000 	.word	0x46000000
 8006794:	4c742400 	.word	0x4c742400
 8006798:	4a742400 	.word	0x4a742400
 800679c:	4bbebc20 	.word	0x4bbebc20

080067a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067ae:	4b53      	ldr	r3, [pc, #332]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80067b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d101      	bne.n	80067be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e099      	b.n	80068f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80067be:	4b4f      	ldr	r3, [pc, #316]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a4e      	ldr	r2, [pc, #312]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80067c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ca:	f7fa fe8b 	bl	80014e4 <HAL_GetTick>
 80067ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067d0:	e008      	b.n	80067e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067d2:	f7fa fe87 	bl	80014e4 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d901      	bls.n	80067e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e086      	b.n	80068f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067e4:	4b45      	ldr	r3, [pc, #276]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1f0      	bne.n	80067d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067f0:	4b42      	ldr	r3, [pc, #264]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80067f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	031b      	lsls	r3, r3, #12
 80067fe:	493f      	ldr	r1, [pc, #252]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 8006800:	4313      	orrs	r3, r2
 8006802:	628b      	str	r3, [r1, #40]	@ 0x28
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	3b01      	subs	r3, #1
 800680a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	3b01      	subs	r3, #1
 8006814:	025b      	lsls	r3, r3, #9
 8006816:	b29b      	uxth	r3, r3
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	3b01      	subs	r3, #1
 8006820:	041b      	lsls	r3, r3, #16
 8006822:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	3b01      	subs	r3, #1
 800682e:	061b      	lsls	r3, r3, #24
 8006830:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006834:	4931      	ldr	r1, [pc, #196]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 8006836:	4313      	orrs	r3, r2
 8006838:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800683a:	4b30      	ldr	r3, [pc, #192]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	492d      	ldr	r1, [pc, #180]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 8006848:	4313      	orrs	r3, r2
 800684a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800684c:	4b2b      	ldr	r3, [pc, #172]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	f023 0220 	bic.w	r2, r3, #32
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	4928      	ldr	r1, [pc, #160]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 800685a:	4313      	orrs	r3, r2
 800685c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800685e:	4b27      	ldr	r3, [pc, #156]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	4a26      	ldr	r2, [pc, #152]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 8006864:	f023 0310 	bic.w	r3, r3, #16
 8006868:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800686a:	4b24      	ldr	r3, [pc, #144]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 800686c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800686e:	4b24      	ldr	r3, [pc, #144]	@ (8006900 <RCCEx_PLL2_Config+0x160>)
 8006870:	4013      	ands	r3, r2
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	69d2      	ldr	r2, [r2, #28]
 8006876:	00d2      	lsls	r2, r2, #3
 8006878:	4920      	ldr	r1, [pc, #128]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 800687a:	4313      	orrs	r3, r2
 800687c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800687e:	4b1f      	ldr	r3, [pc, #124]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 8006880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006882:	4a1e      	ldr	r2, [pc, #120]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 8006884:	f043 0310 	orr.w	r3, r3, #16
 8006888:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d106      	bne.n	800689e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006890:	4b1a      	ldr	r3, [pc, #104]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 8006892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006894:	4a19      	ldr	r2, [pc, #100]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 8006896:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800689a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800689c:	e00f      	b.n	80068be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d106      	bne.n	80068b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068a4:	4b15      	ldr	r3, [pc, #84]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a8:	4a14      	ldr	r2, [pc, #80]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80068aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068b0:	e005      	b.n	80068be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068b2:	4b12      	ldr	r3, [pc, #72]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80068b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b6:	4a11      	ldr	r2, [pc, #68]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80068b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068be:	4b0f      	ldr	r3, [pc, #60]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a0e      	ldr	r2, [pc, #56]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80068c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ca:	f7fa fe0b 	bl	80014e4 <HAL_GetTick>
 80068ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068d0:	e008      	b.n	80068e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068d2:	f7fa fe07 	bl	80014e4 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d901      	bls.n	80068e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e006      	b.n	80068f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068e4:	4b05      	ldr	r3, [pc, #20]	@ (80068fc <RCCEx_PLL2_Config+0x15c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0f0      	beq.n	80068d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	58024400 	.word	0x58024400
 8006900:	ffff0007 	.word	0xffff0007

08006904 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006912:	4b53      	ldr	r3, [pc, #332]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	2b03      	cmp	r3, #3
 800691c:	d101      	bne.n	8006922 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e099      	b.n	8006a56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006922:	4b4f      	ldr	r3, [pc, #316]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a4e      	ldr	r2, [pc, #312]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800692c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800692e:	f7fa fdd9 	bl	80014e4 <HAL_GetTick>
 8006932:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006934:	e008      	b.n	8006948 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006936:	f7fa fdd5 	bl	80014e4 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e086      	b.n	8006a56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006948:	4b45      	ldr	r3, [pc, #276]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1f0      	bne.n	8006936 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006954:	4b42      	ldr	r3, [pc, #264]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006958:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	051b      	lsls	r3, r3, #20
 8006962:	493f      	ldr	r1, [pc, #252]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006964:	4313      	orrs	r3, r2
 8006966:	628b      	str	r3, [r1, #40]	@ 0x28
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	3b01      	subs	r3, #1
 800696e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	3b01      	subs	r3, #1
 8006978:	025b      	lsls	r3, r3, #9
 800697a:	b29b      	uxth	r3, r3
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	3b01      	subs	r3, #1
 8006984:	041b      	lsls	r3, r3, #16
 8006986:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	3b01      	subs	r3, #1
 8006992:	061b      	lsls	r3, r3, #24
 8006994:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006998:	4931      	ldr	r1, [pc, #196]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 800699a:	4313      	orrs	r3, r2
 800699c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800699e:	4b30      	ldr	r3, [pc, #192]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	492d      	ldr	r1, [pc, #180]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	4928      	ldr	r1, [pc, #160]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069c2:	4b27      	ldr	r3, [pc, #156]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	4a26      	ldr	r2, [pc, #152]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069ce:	4b24      	ldr	r3, [pc, #144]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069d2:	4b24      	ldr	r3, [pc, #144]	@ (8006a64 <RCCEx_PLL3_Config+0x160>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	69d2      	ldr	r2, [r2, #28]
 80069da:	00d2      	lsls	r2, r2, #3
 80069dc:	4920      	ldr	r1, [pc, #128]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	4a19      	ldr	r2, [pc, #100]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 80069fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80069fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a00:	e00f      	b.n	8006a22 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d106      	bne.n	8006a16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a08:	4b15      	ldr	r3, [pc, #84]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	4a14      	ldr	r2, [pc, #80]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006a0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a14:	e005      	b.n	8006a22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a16:	4b12      	ldr	r3, [pc, #72]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1a:	4a11      	ldr	r2, [pc, #68]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006a1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a22:	4b0f      	ldr	r3, [pc, #60]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a0e      	ldr	r2, [pc, #56]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a2e:	f7fa fd59 	bl	80014e4 <HAL_GetTick>
 8006a32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a34:	e008      	b.n	8006a48 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a36:	f7fa fd55 	bl	80014e4 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e006      	b.n	8006a56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a48:	4b05      	ldr	r3, [pc, #20]	@ (8006a60 <RCCEx_PLL3_Config+0x15c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0f0      	beq.n	8006a36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	58024400 	.word	0x58024400
 8006a64:	ffff0007 	.word	0xffff0007

08006a68 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e10f      	b.n	8006c9a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a87      	ldr	r2, [pc, #540]	@ (8006ca4 <HAL_SPI_Init+0x23c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00f      	beq.n	8006aaa <HAL_SPI_Init+0x42>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a86      	ldr	r2, [pc, #536]	@ (8006ca8 <HAL_SPI_Init+0x240>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00a      	beq.n	8006aaa <HAL_SPI_Init+0x42>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a84      	ldr	r2, [pc, #528]	@ (8006cac <HAL_SPI_Init+0x244>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d005      	beq.n	8006aaa <HAL_SPI_Init+0x42>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	2b0f      	cmp	r3, #15
 8006aa4:	d901      	bls.n	8006aaa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e0f7      	b.n	8006c9a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f900 	bl	8006cb0 <SPI_GetPacketSize>
 8006ab0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a7b      	ldr	r2, [pc, #492]	@ (8006ca4 <HAL_SPI_Init+0x23c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00c      	beq.n	8006ad6 <HAL_SPI_Init+0x6e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a79      	ldr	r2, [pc, #484]	@ (8006ca8 <HAL_SPI_Init+0x240>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d007      	beq.n	8006ad6 <HAL_SPI_Init+0x6e>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a78      	ldr	r2, [pc, #480]	@ (8006cac <HAL_SPI_Init+0x244>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d002      	beq.n	8006ad6 <HAL_SPI_Init+0x6e>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d811      	bhi.n	8006afa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006ada:	4a72      	ldr	r2, [pc, #456]	@ (8006ca4 <HAL_SPI_Init+0x23c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d009      	beq.n	8006af4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a70      	ldr	r2, [pc, #448]	@ (8006ca8 <HAL_SPI_Init+0x240>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d004      	beq.n	8006af4 <HAL_SPI_Init+0x8c>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a6f      	ldr	r2, [pc, #444]	@ (8006cac <HAL_SPI_Init+0x244>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d104      	bne.n	8006afe <HAL_SPI_Init+0x96>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b10      	cmp	r3, #16
 8006af8:	d901      	bls.n	8006afe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e0cd      	b.n	8006c9a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fa f9de 	bl	8000ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0201 	bic.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006b3a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b44:	d119      	bne.n	8006b7a <HAL_SPI_Init+0x112>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b4e:	d103      	bne.n	8006b58 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d008      	beq.n	8006b6a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10c      	bne.n	8006b7a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b68:	d107      	bne.n	8006b7a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00f      	beq.n	8006ba6 <HAL_SPI_Init+0x13e>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	2b06      	cmp	r3, #6
 8006b8c:	d90b      	bls.n	8006ba6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	e007      	b.n	8006bb6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006bb4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69da      	ldr	r2, [r3, #28]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc8:	ea42 0103 	orr.w	r1, r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c16:	ea42 0103 	orr.w	r1, r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d113      	bne.n	8006c56 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c40:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c54:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40013000 	.word	0x40013000
 8006ca8:	40003800 	.word	0x40003800
 8006cac:	40003c00 	.word	0x40003c00

08006cb0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	3307      	adds	r3, #7
 8006cce:	08db      	lsrs	r3, r3, #3
 8006cd0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	fb02 f303 	mul.w	r3, r2, r3
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e049      	b.n	8006d8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d106      	bne.n	8006d12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f841 	bl	8006d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4619      	mov	r1, r3
 8006d24:	4610      	mov	r0, r2
 8006d26:	f000 f9e7 	bl	80070f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d001      	beq.n	8006dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e054      	b.n	8006e6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a26      	ldr	r2, [pc, #152]	@ (8006e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d022      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dea:	d01d      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a22      	ldr	r2, [pc, #136]	@ (8006e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d018      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a21      	ldr	r2, [pc, #132]	@ (8006e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d013      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1f      	ldr	r2, [pc, #124]	@ (8006e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00e      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e88 <HAL_TIM_Base_Start_IT+0xe0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d009      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a1c      	ldr	r2, [pc, #112]	@ (8006e8c <HAL_TIM_Base_Start_IT+0xe4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d004      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x80>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1b      	ldr	r2, [pc, #108]	@ (8006e90 <HAL_TIM_Base_Start_IT+0xe8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d115      	bne.n	8006e54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	4b19      	ldr	r3, [pc, #100]	@ (8006e94 <HAL_TIM_Base_Start_IT+0xec>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b06      	cmp	r3, #6
 8006e38:	d015      	beq.n	8006e66 <HAL_TIM_Base_Start_IT+0xbe>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e40:	d011      	beq.n	8006e66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0201 	orr.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e52:	e008      	b.n	8006e66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e000      	b.n	8006e68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	40010000 	.word	0x40010000
 8006e7c:	40000400 	.word	0x40000400
 8006e80:	40000800 	.word	0x40000800
 8006e84:	40000c00 	.word	0x40000c00
 8006e88:	40010400 	.word	0x40010400
 8006e8c:	40001800 	.word	0x40001800
 8006e90:	40014000 	.word	0x40014000
 8006e94:	00010007 	.word	0x00010007

08006e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d020      	beq.n	8006efc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01b      	beq.n	8006efc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0202 	mvn.w	r2, #2
 8006ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8e9 	bl	80070ba <HAL_TIM_IC_CaptureCallback>
 8006ee8:	e005      	b.n	8006ef6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f8db 	bl	80070a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f8ec 	bl	80070ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d020      	beq.n	8006f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01b      	beq.n	8006f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0204 	mvn.w	r2, #4
 8006f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f8c3 	bl	80070ba <HAL_TIM_IC_CaptureCallback>
 8006f34:	e005      	b.n	8006f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f8b5 	bl	80070a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f8c6 	bl	80070ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d020      	beq.n	8006f94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01b      	beq.n	8006f94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0208 	mvn.w	r2, #8
 8006f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f89d 	bl	80070ba <HAL_TIM_IC_CaptureCallback>
 8006f80:	e005      	b.n	8006f8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f88f 	bl	80070a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f8a0 	bl	80070ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f003 0310 	and.w	r3, r3, #16
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d020      	beq.n	8006fe0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01b      	beq.n	8006fe0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0210 	mvn.w	r2, #16
 8006fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f877 	bl	80070ba <HAL_TIM_IC_CaptureCallback>
 8006fcc:	e005      	b.n	8006fda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f869 	bl	80070a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f87a 	bl	80070ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00c      	beq.n	8007004 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0201 	mvn.w	r2, #1
 8006ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7f9 fefa 	bl	8000df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00c      	beq.n	8007032 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701e:	2b00      	cmp	r3, #0
 8007020:	d007      	beq.n	8007032 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800702a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f90d 	bl	800724c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00c      	beq.n	8007056 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800704e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f905 	bl	8007260 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00c      	beq.n	800707a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d007      	beq.n	800707a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f834 	bl	80070e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f003 0320 	and.w	r3, r3, #32
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00c      	beq.n	800709e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f06f 0220 	mvn.w	r2, #32
 8007096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f8cd 	bl	8007238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
	...

080070f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a43      	ldr	r2, [pc, #268]	@ (8007218 <TIM_Base_SetConfig+0x120>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <TIM_Base_SetConfig+0x40>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007116:	d00f      	beq.n	8007138 <TIM_Base_SetConfig+0x40>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a40      	ldr	r2, [pc, #256]	@ (800721c <TIM_Base_SetConfig+0x124>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00b      	beq.n	8007138 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a3f      	ldr	r2, [pc, #252]	@ (8007220 <TIM_Base_SetConfig+0x128>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d007      	beq.n	8007138 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a3e      	ldr	r2, [pc, #248]	@ (8007224 <TIM_Base_SetConfig+0x12c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d003      	beq.n	8007138 <TIM_Base_SetConfig+0x40>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a3d      	ldr	r2, [pc, #244]	@ (8007228 <TIM_Base_SetConfig+0x130>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d108      	bne.n	800714a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a32      	ldr	r2, [pc, #200]	@ (8007218 <TIM_Base_SetConfig+0x120>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01f      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007158:	d01b      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a2f      	ldr	r2, [pc, #188]	@ (800721c <TIM_Base_SetConfig+0x124>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d017      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a2e      	ldr	r2, [pc, #184]	@ (8007220 <TIM_Base_SetConfig+0x128>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a2d      	ldr	r2, [pc, #180]	@ (8007224 <TIM_Base_SetConfig+0x12c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00f      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2c      	ldr	r2, [pc, #176]	@ (8007228 <TIM_Base_SetConfig+0x130>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00b      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a2b      	ldr	r2, [pc, #172]	@ (800722c <TIM_Base_SetConfig+0x134>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d007      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a2a      	ldr	r2, [pc, #168]	@ (8007230 <TIM_Base_SetConfig+0x138>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a29      	ldr	r2, [pc, #164]	@ (8007234 <TIM_Base_SetConfig+0x13c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d108      	bne.n	80071a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a14      	ldr	r2, [pc, #80]	@ (8007218 <TIM_Base_SetConfig+0x120>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00f      	beq.n	80071ea <TIM_Base_SetConfig+0xf2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a16      	ldr	r2, [pc, #88]	@ (8007228 <TIM_Base_SetConfig+0x130>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00b      	beq.n	80071ea <TIM_Base_SetConfig+0xf2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a15      	ldr	r2, [pc, #84]	@ (800722c <TIM_Base_SetConfig+0x134>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d007      	beq.n	80071ea <TIM_Base_SetConfig+0xf2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a14      	ldr	r2, [pc, #80]	@ (8007230 <TIM_Base_SetConfig+0x138>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d003      	beq.n	80071ea <TIM_Base_SetConfig+0xf2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a13      	ldr	r2, [pc, #76]	@ (8007234 <TIM_Base_SetConfig+0x13c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d103      	bne.n	80071f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	691a      	ldr	r2, [r3, #16]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f043 0204 	orr.w	r2, r3, #4
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	601a      	str	r2, [r3, #0]
}
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40010000 	.word	0x40010000
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800
 8007224:	40000c00 	.word	0x40000c00
 8007228:	40010400 	.word	0x40010400
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800

08007238 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e042      	b.n	800730c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7fa f83d 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2224      	movs	r2, #36	@ 0x24
 80072a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0201 	bic.w	r2, r2, #1
 80072b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fe24 	bl	8007f0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f8b9 	bl	800743c <UART_SetConfig>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d101      	bne.n	80072d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e01b      	b.n	800730c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0201 	orr.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fea3 	bl	8008050 <UART_CheckIdleState>
 800730a:	4603      	mov	r3, r0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007314:	b480      	push	{r7}
 8007316:	b091      	sub	sp, #68	@ 0x44
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	4613      	mov	r3, r2
 8007320:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007328:	2b20      	cmp	r3, #32
 800732a:	d178      	bne.n	800741e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <HAL_UART_Transmit_IT+0x24>
 8007332:	88fb      	ldrh	r3, [r7, #6]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e071      	b.n	8007420 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	88fa      	ldrh	r2, [r7, #6]
 8007346:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	88fa      	ldrh	r2, [r7, #6]
 800734e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2221      	movs	r2, #33	@ 0x21
 8007364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800736c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007370:	d12a      	bne.n	80073c8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800737a:	d107      	bne.n	800738c <HAL_UART_Transmit_IT+0x78>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4a29      	ldr	r2, [pc, #164]	@ (800742c <HAL_UART_Transmit_IT+0x118>)
 8007388:	679a      	str	r2, [r3, #120]	@ 0x78
 800738a:	e002      	b.n	8007392 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4a28      	ldr	r2, [pc, #160]	@ (8007430 <HAL_UART_Transmit_IT+0x11c>)
 8007390:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3308      	adds	r3, #8
 8007398:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80073a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073b2:	637a      	str	r2, [r7, #52]	@ 0x34
 80073b4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e5      	bne.n	8007392 <HAL_UART_Transmit_IT+0x7e>
 80073c6:	e028      	b.n	800741a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d0:	d107      	bne.n	80073e2 <HAL_UART_Transmit_IT+0xce>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a15      	ldr	r2, [pc, #84]	@ (8007434 <HAL_UART_Transmit_IT+0x120>)
 80073de:	679a      	str	r2, [r3, #120]	@ 0x78
 80073e0:	e002      	b.n	80073e8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4a14      	ldr	r2, [pc, #80]	@ (8007438 <HAL_UART_Transmit_IT+0x124>)
 80073e6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	613b      	str	r3, [r7, #16]
   return(result);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007406:	623b      	str	r3, [r7, #32]
 8007408:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	69f9      	ldr	r1, [r7, #28]
 800740c:	6a3a      	ldr	r2, [r7, #32]
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	61bb      	str	r3, [r7, #24]
   return(result);
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e6      	bne.n	80073e8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	e000      	b.n	8007420 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800741e:	2302      	movs	r3, #2
  }
}
 8007420:	4618      	mov	r0, r3
 8007422:	3744      	adds	r7, #68	@ 0x44
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	080085a7 	.word	0x080085a7
 8007430:	080084c7 	.word	0x080084c7
 8007434:	08008405 	.word	0x08008405
 8007438:	0800834d 	.word	0x0800834d

0800743c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800743c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007440:	b092      	sub	sp, #72	@ 0x48
 8007442:	af00      	add	r7, sp, #0
 8007444:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	431a      	orrs	r2, r3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	431a      	orrs	r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	4313      	orrs	r3, r2
 8007462:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4bbe      	ldr	r3, [pc, #760]	@ (8007764 <UART_SetConfig+0x328>)
 800746c:	4013      	ands	r3, r2
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	6812      	ldr	r2, [r2, #0]
 8007472:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007474:	430b      	orrs	r3, r1
 8007476:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4ab3      	ldr	r2, [pc, #716]	@ (8007768 <UART_SetConfig+0x32c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d004      	beq.n	80074a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074a4:	4313      	orrs	r3, r2
 80074a6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	4baf      	ldr	r3, [pc, #700]	@ (800776c <UART_SetConfig+0x330>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	6812      	ldr	r2, [r2, #0]
 80074b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074b8:	430b      	orrs	r3, r1
 80074ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c2:	f023 010f 	bic.w	r1, r3, #15
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4aa6      	ldr	r2, [pc, #664]	@ (8007770 <UART_SetConfig+0x334>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d177      	bne.n	80075cc <UART_SetConfig+0x190>
 80074dc:	4ba5      	ldr	r3, [pc, #660]	@ (8007774 <UART_SetConfig+0x338>)
 80074de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074e4:	2b28      	cmp	r3, #40	@ 0x28
 80074e6:	d86d      	bhi.n	80075c4 <UART_SetConfig+0x188>
 80074e8:	a201      	add	r2, pc, #4	@ (adr r2, 80074f0 <UART_SetConfig+0xb4>)
 80074ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ee:	bf00      	nop
 80074f0:	08007595 	.word	0x08007595
 80074f4:	080075c5 	.word	0x080075c5
 80074f8:	080075c5 	.word	0x080075c5
 80074fc:	080075c5 	.word	0x080075c5
 8007500:	080075c5 	.word	0x080075c5
 8007504:	080075c5 	.word	0x080075c5
 8007508:	080075c5 	.word	0x080075c5
 800750c:	080075c5 	.word	0x080075c5
 8007510:	0800759d 	.word	0x0800759d
 8007514:	080075c5 	.word	0x080075c5
 8007518:	080075c5 	.word	0x080075c5
 800751c:	080075c5 	.word	0x080075c5
 8007520:	080075c5 	.word	0x080075c5
 8007524:	080075c5 	.word	0x080075c5
 8007528:	080075c5 	.word	0x080075c5
 800752c:	080075c5 	.word	0x080075c5
 8007530:	080075a5 	.word	0x080075a5
 8007534:	080075c5 	.word	0x080075c5
 8007538:	080075c5 	.word	0x080075c5
 800753c:	080075c5 	.word	0x080075c5
 8007540:	080075c5 	.word	0x080075c5
 8007544:	080075c5 	.word	0x080075c5
 8007548:	080075c5 	.word	0x080075c5
 800754c:	080075c5 	.word	0x080075c5
 8007550:	080075ad 	.word	0x080075ad
 8007554:	080075c5 	.word	0x080075c5
 8007558:	080075c5 	.word	0x080075c5
 800755c:	080075c5 	.word	0x080075c5
 8007560:	080075c5 	.word	0x080075c5
 8007564:	080075c5 	.word	0x080075c5
 8007568:	080075c5 	.word	0x080075c5
 800756c:	080075c5 	.word	0x080075c5
 8007570:	080075b5 	.word	0x080075b5
 8007574:	080075c5 	.word	0x080075c5
 8007578:	080075c5 	.word	0x080075c5
 800757c:	080075c5 	.word	0x080075c5
 8007580:	080075c5 	.word	0x080075c5
 8007584:	080075c5 	.word	0x080075c5
 8007588:	080075c5 	.word	0x080075c5
 800758c:	080075c5 	.word	0x080075c5
 8007590:	080075bd 	.word	0x080075bd
 8007594:	2301      	movs	r3, #1
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759a:	e222      	b.n	80079e2 <UART_SetConfig+0x5a6>
 800759c:	2304      	movs	r3, #4
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a2:	e21e      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80075a4:	2308      	movs	r3, #8
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075aa:	e21a      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80075ac:	2310      	movs	r3, #16
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b2:	e216      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80075b4:	2320      	movs	r3, #32
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ba:	e212      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80075bc:	2340      	movs	r3, #64	@ 0x40
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c2:	e20e      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80075c4:	2380      	movs	r3, #128	@ 0x80
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ca:	e20a      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a69      	ldr	r2, [pc, #420]	@ (8007778 <UART_SetConfig+0x33c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d130      	bne.n	8007638 <UART_SetConfig+0x1fc>
 80075d6:	4b67      	ldr	r3, [pc, #412]	@ (8007774 <UART_SetConfig+0x338>)
 80075d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d826      	bhi.n	8007630 <UART_SetConfig+0x1f4>
 80075e2:	a201      	add	r2, pc, #4	@ (adr r2, 80075e8 <UART_SetConfig+0x1ac>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	08007601 	.word	0x08007601
 80075ec:	08007609 	.word	0x08007609
 80075f0:	08007611 	.word	0x08007611
 80075f4:	08007619 	.word	0x08007619
 80075f8:	08007621 	.word	0x08007621
 80075fc:	08007629 	.word	0x08007629
 8007600:	2300      	movs	r3, #0
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007606:	e1ec      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007608:	2304      	movs	r3, #4
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760e:	e1e8      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007610:	2308      	movs	r3, #8
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007616:	e1e4      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007618:	2310      	movs	r3, #16
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761e:	e1e0      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007620:	2320      	movs	r3, #32
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007626:	e1dc      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007628:	2340      	movs	r3, #64	@ 0x40
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762e:	e1d8      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007630:	2380      	movs	r3, #128	@ 0x80
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007636:	e1d4      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a4f      	ldr	r2, [pc, #316]	@ (800777c <UART_SetConfig+0x340>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d130      	bne.n	80076a4 <UART_SetConfig+0x268>
 8007642:	4b4c      	ldr	r3, [pc, #304]	@ (8007774 <UART_SetConfig+0x338>)
 8007644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	2b05      	cmp	r3, #5
 800764c:	d826      	bhi.n	800769c <UART_SetConfig+0x260>
 800764e:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <UART_SetConfig+0x218>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	0800766d 	.word	0x0800766d
 8007658:	08007675 	.word	0x08007675
 800765c:	0800767d 	.word	0x0800767d
 8007660:	08007685 	.word	0x08007685
 8007664:	0800768d 	.word	0x0800768d
 8007668:	08007695 	.word	0x08007695
 800766c:	2300      	movs	r3, #0
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007672:	e1b6      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007674:	2304      	movs	r3, #4
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767a:	e1b2      	b.n	80079e2 <UART_SetConfig+0x5a6>
 800767c:	2308      	movs	r3, #8
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007682:	e1ae      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007684:	2310      	movs	r3, #16
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768a:	e1aa      	b.n	80079e2 <UART_SetConfig+0x5a6>
 800768c:	2320      	movs	r3, #32
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007692:	e1a6      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007694:	2340      	movs	r3, #64	@ 0x40
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769a:	e1a2      	b.n	80079e2 <UART_SetConfig+0x5a6>
 800769c:	2380      	movs	r3, #128	@ 0x80
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a2:	e19e      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a35      	ldr	r2, [pc, #212]	@ (8007780 <UART_SetConfig+0x344>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d130      	bne.n	8007710 <UART_SetConfig+0x2d4>
 80076ae:	4b31      	ldr	r3, [pc, #196]	@ (8007774 <UART_SetConfig+0x338>)
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	d826      	bhi.n	8007708 <UART_SetConfig+0x2cc>
 80076ba:	a201      	add	r2, pc, #4	@ (adr r2, 80076c0 <UART_SetConfig+0x284>)
 80076bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c0:	080076d9 	.word	0x080076d9
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	080076e9 	.word	0x080076e9
 80076cc:	080076f1 	.word	0x080076f1
 80076d0:	080076f9 	.word	0x080076f9
 80076d4:	08007701 	.word	0x08007701
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076de:	e180      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80076e0:	2304      	movs	r3, #4
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e6:	e17c      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80076e8:	2308      	movs	r3, #8
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ee:	e178      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80076f0:	2310      	movs	r3, #16
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f6:	e174      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80076f8:	2320      	movs	r3, #32
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fe:	e170      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007700:	2340      	movs	r3, #64	@ 0x40
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007706:	e16c      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007708:	2380      	movs	r3, #128	@ 0x80
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770e:	e168      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1b      	ldr	r2, [pc, #108]	@ (8007784 <UART_SetConfig+0x348>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d142      	bne.n	80077a0 <UART_SetConfig+0x364>
 800771a:	4b16      	ldr	r3, [pc, #88]	@ (8007774 <UART_SetConfig+0x338>)
 800771c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	2b05      	cmp	r3, #5
 8007724:	d838      	bhi.n	8007798 <UART_SetConfig+0x35c>
 8007726:	a201      	add	r2, pc, #4	@ (adr r2, 800772c <UART_SetConfig+0x2f0>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	08007745 	.word	0x08007745
 8007730:	0800774d 	.word	0x0800774d
 8007734:	08007755 	.word	0x08007755
 8007738:	0800775d 	.word	0x0800775d
 800773c:	08007789 	.word	0x08007789
 8007740:	08007791 	.word	0x08007791
 8007744:	2300      	movs	r3, #0
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774a:	e14a      	b.n	80079e2 <UART_SetConfig+0x5a6>
 800774c:	2304      	movs	r3, #4
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007752:	e146      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007754:	2308      	movs	r3, #8
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775a:	e142      	b.n	80079e2 <UART_SetConfig+0x5a6>
 800775c:	2310      	movs	r3, #16
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007762:	e13e      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007764:	cfff69f3 	.word	0xcfff69f3
 8007768:	58000c00 	.word	0x58000c00
 800776c:	11fff4ff 	.word	0x11fff4ff
 8007770:	40011000 	.word	0x40011000
 8007774:	58024400 	.word	0x58024400
 8007778:	40004400 	.word	0x40004400
 800777c:	40004800 	.word	0x40004800
 8007780:	40004c00 	.word	0x40004c00
 8007784:	40005000 	.word	0x40005000
 8007788:	2320      	movs	r3, #32
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778e:	e128      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007790:	2340      	movs	r3, #64	@ 0x40
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007796:	e124      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007798:	2380      	movs	r3, #128	@ 0x80
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779e:	e120      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4acb      	ldr	r2, [pc, #812]	@ (8007ad4 <UART_SetConfig+0x698>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d176      	bne.n	8007898 <UART_SetConfig+0x45c>
 80077aa:	4bcb      	ldr	r3, [pc, #812]	@ (8007ad8 <UART_SetConfig+0x69c>)
 80077ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077b2:	2b28      	cmp	r3, #40	@ 0x28
 80077b4:	d86c      	bhi.n	8007890 <UART_SetConfig+0x454>
 80077b6:	a201      	add	r2, pc, #4	@ (adr r2, 80077bc <UART_SetConfig+0x380>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	08007861 	.word	0x08007861
 80077c0:	08007891 	.word	0x08007891
 80077c4:	08007891 	.word	0x08007891
 80077c8:	08007891 	.word	0x08007891
 80077cc:	08007891 	.word	0x08007891
 80077d0:	08007891 	.word	0x08007891
 80077d4:	08007891 	.word	0x08007891
 80077d8:	08007891 	.word	0x08007891
 80077dc:	08007869 	.word	0x08007869
 80077e0:	08007891 	.word	0x08007891
 80077e4:	08007891 	.word	0x08007891
 80077e8:	08007891 	.word	0x08007891
 80077ec:	08007891 	.word	0x08007891
 80077f0:	08007891 	.word	0x08007891
 80077f4:	08007891 	.word	0x08007891
 80077f8:	08007891 	.word	0x08007891
 80077fc:	08007871 	.word	0x08007871
 8007800:	08007891 	.word	0x08007891
 8007804:	08007891 	.word	0x08007891
 8007808:	08007891 	.word	0x08007891
 800780c:	08007891 	.word	0x08007891
 8007810:	08007891 	.word	0x08007891
 8007814:	08007891 	.word	0x08007891
 8007818:	08007891 	.word	0x08007891
 800781c:	08007879 	.word	0x08007879
 8007820:	08007891 	.word	0x08007891
 8007824:	08007891 	.word	0x08007891
 8007828:	08007891 	.word	0x08007891
 800782c:	08007891 	.word	0x08007891
 8007830:	08007891 	.word	0x08007891
 8007834:	08007891 	.word	0x08007891
 8007838:	08007891 	.word	0x08007891
 800783c:	08007881 	.word	0x08007881
 8007840:	08007891 	.word	0x08007891
 8007844:	08007891 	.word	0x08007891
 8007848:	08007891 	.word	0x08007891
 800784c:	08007891 	.word	0x08007891
 8007850:	08007891 	.word	0x08007891
 8007854:	08007891 	.word	0x08007891
 8007858:	08007891 	.word	0x08007891
 800785c:	08007889 	.word	0x08007889
 8007860:	2301      	movs	r3, #1
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007866:	e0bc      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007868:	2304      	movs	r3, #4
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786e:	e0b8      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007870:	2308      	movs	r3, #8
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007876:	e0b4      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007878:	2310      	movs	r3, #16
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787e:	e0b0      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007880:	2320      	movs	r3, #32
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007886:	e0ac      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007888:	2340      	movs	r3, #64	@ 0x40
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788e:	e0a8      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007890:	2380      	movs	r3, #128	@ 0x80
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007896:	e0a4      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a8f      	ldr	r2, [pc, #572]	@ (8007adc <UART_SetConfig+0x6a0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d130      	bne.n	8007904 <UART_SetConfig+0x4c8>
 80078a2:	4b8d      	ldr	r3, [pc, #564]	@ (8007ad8 <UART_SetConfig+0x69c>)
 80078a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	d826      	bhi.n	80078fc <UART_SetConfig+0x4c0>
 80078ae:	a201      	add	r2, pc, #4	@ (adr r2, 80078b4 <UART_SetConfig+0x478>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	080078cd 	.word	0x080078cd
 80078b8:	080078d5 	.word	0x080078d5
 80078bc:	080078dd 	.word	0x080078dd
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	080078ed 	.word	0x080078ed
 80078c8:	080078f5 	.word	0x080078f5
 80078cc:	2300      	movs	r3, #0
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d2:	e086      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80078d4:	2304      	movs	r3, #4
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078da:	e082      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80078dc:	2308      	movs	r3, #8
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e2:	e07e      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80078e4:	2310      	movs	r3, #16
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ea:	e07a      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80078ec:	2320      	movs	r3, #32
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f2:	e076      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80078f4:	2340      	movs	r3, #64	@ 0x40
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fa:	e072      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80078fc:	2380      	movs	r3, #128	@ 0x80
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007902:	e06e      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a75      	ldr	r2, [pc, #468]	@ (8007ae0 <UART_SetConfig+0x6a4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d130      	bne.n	8007970 <UART_SetConfig+0x534>
 800790e:	4b72      	ldr	r3, [pc, #456]	@ (8007ad8 <UART_SetConfig+0x69c>)
 8007910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	2b05      	cmp	r3, #5
 8007918:	d826      	bhi.n	8007968 <UART_SetConfig+0x52c>
 800791a:	a201      	add	r2, pc, #4	@ (adr r2, 8007920 <UART_SetConfig+0x4e4>)
 800791c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007920:	08007939 	.word	0x08007939
 8007924:	08007941 	.word	0x08007941
 8007928:	08007949 	.word	0x08007949
 800792c:	08007951 	.word	0x08007951
 8007930:	08007959 	.word	0x08007959
 8007934:	08007961 	.word	0x08007961
 8007938:	2300      	movs	r3, #0
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e050      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007940:	2304      	movs	r3, #4
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e04c      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007948:	2308      	movs	r3, #8
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e048      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007950:	2310      	movs	r3, #16
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e044      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007958:	2320      	movs	r3, #32
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e040      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007960:	2340      	movs	r3, #64	@ 0x40
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e03c      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007968:	2380      	movs	r3, #128	@ 0x80
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e038      	b.n	80079e2 <UART_SetConfig+0x5a6>
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a5b      	ldr	r2, [pc, #364]	@ (8007ae4 <UART_SetConfig+0x6a8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d130      	bne.n	80079dc <UART_SetConfig+0x5a0>
 800797a:	4b57      	ldr	r3, [pc, #348]	@ (8007ad8 <UART_SetConfig+0x69c>)
 800797c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	2b05      	cmp	r3, #5
 8007984:	d826      	bhi.n	80079d4 <UART_SetConfig+0x598>
 8007986:	a201      	add	r2, pc, #4	@ (adr r2, 800798c <UART_SetConfig+0x550>)
 8007988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798c:	080079a5 	.word	0x080079a5
 8007990:	080079ad 	.word	0x080079ad
 8007994:	080079b5 	.word	0x080079b5
 8007998:	080079bd 	.word	0x080079bd
 800799c:	080079c5 	.word	0x080079c5
 80079a0:	080079cd 	.word	0x080079cd
 80079a4:	2302      	movs	r3, #2
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e01a      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80079ac:	2304      	movs	r3, #4
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e016      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80079b4:	2308      	movs	r3, #8
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ba:	e012      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80079bc:	2310      	movs	r3, #16
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c2:	e00e      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80079c4:	2320      	movs	r3, #32
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ca:	e00a      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80079cc:	2340      	movs	r3, #64	@ 0x40
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d2:	e006      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80079d4:	2380      	movs	r3, #128	@ 0x80
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079da:	e002      	b.n	80079e2 <UART_SetConfig+0x5a6>
 80079dc:	2380      	movs	r3, #128	@ 0x80
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ae4 <UART_SetConfig+0x6a8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	f040 80f8 	bne.w	8007bde <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079f2:	2b20      	cmp	r3, #32
 80079f4:	dc46      	bgt.n	8007a84 <UART_SetConfig+0x648>
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	f2c0 8082 	blt.w	8007b00 <UART_SetConfig+0x6c4>
 80079fc:	3b02      	subs	r3, #2
 80079fe:	2b1e      	cmp	r3, #30
 8007a00:	d87e      	bhi.n	8007b00 <UART_SetConfig+0x6c4>
 8007a02:	a201      	add	r2, pc, #4	@ (adr r2, 8007a08 <UART_SetConfig+0x5cc>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007a8b 	.word	0x08007a8b
 8007a0c:	08007b01 	.word	0x08007b01
 8007a10:	08007a93 	.word	0x08007a93
 8007a14:	08007b01 	.word	0x08007b01
 8007a18:	08007b01 	.word	0x08007b01
 8007a1c:	08007b01 	.word	0x08007b01
 8007a20:	08007aa3 	.word	0x08007aa3
 8007a24:	08007b01 	.word	0x08007b01
 8007a28:	08007b01 	.word	0x08007b01
 8007a2c:	08007b01 	.word	0x08007b01
 8007a30:	08007b01 	.word	0x08007b01
 8007a34:	08007b01 	.word	0x08007b01
 8007a38:	08007b01 	.word	0x08007b01
 8007a3c:	08007b01 	.word	0x08007b01
 8007a40:	08007ab3 	.word	0x08007ab3
 8007a44:	08007b01 	.word	0x08007b01
 8007a48:	08007b01 	.word	0x08007b01
 8007a4c:	08007b01 	.word	0x08007b01
 8007a50:	08007b01 	.word	0x08007b01
 8007a54:	08007b01 	.word	0x08007b01
 8007a58:	08007b01 	.word	0x08007b01
 8007a5c:	08007b01 	.word	0x08007b01
 8007a60:	08007b01 	.word	0x08007b01
 8007a64:	08007b01 	.word	0x08007b01
 8007a68:	08007b01 	.word	0x08007b01
 8007a6c:	08007b01 	.word	0x08007b01
 8007a70:	08007b01 	.word	0x08007b01
 8007a74:	08007b01 	.word	0x08007b01
 8007a78:	08007b01 	.word	0x08007b01
 8007a7c:	08007b01 	.word	0x08007b01
 8007a80:	08007af3 	.word	0x08007af3
 8007a84:	2b40      	cmp	r3, #64	@ 0x40
 8007a86:	d037      	beq.n	8007af8 <UART_SetConfig+0x6bc>
 8007a88:	e03a      	b.n	8007b00 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a8a:	f7fe fa79 	bl	8005f80 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a90:	e03c      	b.n	8007b0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fa88 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa0:	e034      	b.n	8007b0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aa2:	f107 0318 	add.w	r3, r7, #24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe fbd4 	bl	8006254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab0:	e02c      	b.n	8007b0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ab2:	4b09      	ldr	r3, [pc, #36]	@ (8007ad8 <UART_SetConfig+0x69c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d016      	beq.n	8007aec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007abe:	4b06      	ldr	r3, [pc, #24]	@ (8007ad8 <UART_SetConfig+0x69c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	08db      	lsrs	r3, r3, #3
 8007ac4:	f003 0303 	and.w	r3, r3, #3
 8007ac8:	4a07      	ldr	r2, [pc, #28]	@ (8007ae8 <UART_SetConfig+0x6ac>)
 8007aca:	fa22 f303 	lsr.w	r3, r2, r3
 8007ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ad0:	e01c      	b.n	8007b0c <UART_SetConfig+0x6d0>
 8007ad2:	bf00      	nop
 8007ad4:	40011400 	.word	0x40011400
 8007ad8:	58024400 	.word	0x58024400
 8007adc:	40007800 	.word	0x40007800
 8007ae0:	40007c00 	.word	0x40007c00
 8007ae4:	58000c00 	.word	0x58000c00
 8007ae8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007aec:	4b9d      	ldr	r3, [pc, #628]	@ (8007d64 <UART_SetConfig+0x928>)
 8007aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af0:	e00c      	b.n	8007b0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007af2:	4b9d      	ldr	r3, [pc, #628]	@ (8007d68 <UART_SetConfig+0x92c>)
 8007af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af6:	e009      	b.n	8007b0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007af8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007afe:	e005      	b.n	8007b0c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 81de 	beq.w	8007ed0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b18:	4a94      	ldr	r2, [pc, #592]	@ (8007d6c <UART_SetConfig+0x930>)
 8007b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b26:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	4413      	add	r3, r2
 8007b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d305      	bcc.n	8007b44 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d903      	bls.n	8007b4c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b4a:	e1c1      	b.n	8007ed0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b4e:	2200      	movs	r2, #0
 8007b50:	60bb      	str	r3, [r7, #8]
 8007b52:	60fa      	str	r2, [r7, #12]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	4a84      	ldr	r2, [pc, #528]	@ (8007d6c <UART_SetConfig+0x930>)
 8007b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	2200      	movs	r2, #0
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b6e:	f7f8 fc07 	bl	8000380 <__aeabi_uldivmod>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4610      	mov	r0, r2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	f04f 0300 	mov.w	r3, #0
 8007b82:	020b      	lsls	r3, r1, #8
 8007b84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b88:	0202      	lsls	r2, r0, #8
 8007b8a:	6979      	ldr	r1, [r7, #20]
 8007b8c:	6849      	ldr	r1, [r1, #4]
 8007b8e:	0849      	lsrs	r1, r1, #1
 8007b90:	2000      	movs	r0, #0
 8007b92:	460c      	mov	r4, r1
 8007b94:	4605      	mov	r5, r0
 8007b96:	eb12 0804 	adds.w	r8, r2, r4
 8007b9a:	eb43 0905 	adc.w	r9, r3, r5
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	469a      	mov	sl, r3
 8007ba6:	4693      	mov	fp, r2
 8007ba8:	4652      	mov	r2, sl
 8007baa:	465b      	mov	r3, fp
 8007bac:	4640      	mov	r0, r8
 8007bae:	4649      	mov	r1, r9
 8007bb0:	f7f8 fbe6 	bl	8000380 <__aeabi_uldivmod>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4613      	mov	r3, r2
 8007bba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bc2:	d308      	bcc.n	8007bd6 <UART_SetConfig+0x79a>
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bca:	d204      	bcs.n	8007bd6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bd2:	60da      	str	r2, [r3, #12]
 8007bd4:	e17c      	b.n	8007ed0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007bdc:	e178      	b.n	8007ed0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007be6:	f040 80c5 	bne.w	8007d74 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007bea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	dc48      	bgt.n	8007c84 <UART_SetConfig+0x848>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	db7b      	blt.n	8007cee <UART_SetConfig+0x8b2>
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d879      	bhi.n	8007cee <UART_SetConfig+0x8b2>
 8007bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007c00 <UART_SetConfig+0x7c4>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c8b 	.word	0x08007c8b
 8007c04:	08007c93 	.word	0x08007c93
 8007c08:	08007cef 	.word	0x08007cef
 8007c0c:	08007cef 	.word	0x08007cef
 8007c10:	08007c9b 	.word	0x08007c9b
 8007c14:	08007cef 	.word	0x08007cef
 8007c18:	08007cef 	.word	0x08007cef
 8007c1c:	08007cef 	.word	0x08007cef
 8007c20:	08007cab 	.word	0x08007cab
 8007c24:	08007cef 	.word	0x08007cef
 8007c28:	08007cef 	.word	0x08007cef
 8007c2c:	08007cef 	.word	0x08007cef
 8007c30:	08007cef 	.word	0x08007cef
 8007c34:	08007cef 	.word	0x08007cef
 8007c38:	08007cef 	.word	0x08007cef
 8007c3c:	08007cef 	.word	0x08007cef
 8007c40:	08007cbb 	.word	0x08007cbb
 8007c44:	08007cef 	.word	0x08007cef
 8007c48:	08007cef 	.word	0x08007cef
 8007c4c:	08007cef 	.word	0x08007cef
 8007c50:	08007cef 	.word	0x08007cef
 8007c54:	08007cef 	.word	0x08007cef
 8007c58:	08007cef 	.word	0x08007cef
 8007c5c:	08007cef 	.word	0x08007cef
 8007c60:	08007cef 	.word	0x08007cef
 8007c64:	08007cef 	.word	0x08007cef
 8007c68:	08007cef 	.word	0x08007cef
 8007c6c:	08007cef 	.word	0x08007cef
 8007c70:	08007cef 	.word	0x08007cef
 8007c74:	08007cef 	.word	0x08007cef
 8007c78:	08007cef 	.word	0x08007cef
 8007c7c:	08007cef 	.word	0x08007cef
 8007c80:	08007ce1 	.word	0x08007ce1
 8007c84:	2b40      	cmp	r3, #64	@ 0x40
 8007c86:	d02e      	beq.n	8007ce6 <UART_SetConfig+0x8aa>
 8007c88:	e031      	b.n	8007cee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c8a:	f7fc f981 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 8007c8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c90:	e033      	b.n	8007cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c92:	f7fc f993 	bl	8003fbc <HAL_RCC_GetPCLK2Freq>
 8007c96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c98:	e02f      	b.n	8007cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe f984 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ca8:	e027      	b.n	8007cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007caa:	f107 0318 	add.w	r3, r7, #24
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe fad0 	bl	8006254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb8:	e01f      	b.n	8007cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cba:	4b2d      	ldr	r3, [pc, #180]	@ (8007d70 <UART_SetConfig+0x934>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0320 	and.w	r3, r3, #32
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d009      	beq.n	8007cda <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8007d70 <UART_SetConfig+0x934>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	08db      	lsrs	r3, r3, #3
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	4a24      	ldr	r2, [pc, #144]	@ (8007d64 <UART_SetConfig+0x928>)
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cd8:	e00f      	b.n	8007cfa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007cda:	4b22      	ldr	r3, [pc, #136]	@ (8007d64 <UART_SetConfig+0x928>)
 8007cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cde:	e00c      	b.n	8007cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ce0:	4b21      	ldr	r3, [pc, #132]	@ (8007d68 <UART_SetConfig+0x92c>)
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce4:	e009      	b.n	8007cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cec:	e005      	b.n	8007cfa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007cf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 80e7 	beq.w	8007ed0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d06:	4a19      	ldr	r2, [pc, #100]	@ (8007d6c <UART_SetConfig+0x930>)
 8007d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d14:	005a      	lsls	r2, r3, #1
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	085b      	lsrs	r3, r3, #1
 8007d1c:	441a      	add	r2, r3
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2a:	2b0f      	cmp	r3, #15
 8007d2c:	d916      	bls.n	8007d5c <UART_SetConfig+0x920>
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d34:	d212      	bcs.n	8007d5c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	f023 030f 	bic.w	r3, r3, #15
 8007d3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	085b      	lsrs	r3, r3, #1
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d58:	60da      	str	r2, [r3, #12]
 8007d5a:	e0b9      	b.n	8007ed0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d62:	e0b5      	b.n	8007ed0 <UART_SetConfig+0xa94>
 8007d64:	03d09000 	.word	0x03d09000
 8007d68:	003d0900 	.word	0x003d0900
 8007d6c:	0800c5b8 	.word	0x0800c5b8
 8007d70:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	dc49      	bgt.n	8007e10 <UART_SetConfig+0x9d4>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	db7c      	blt.n	8007e7a <UART_SetConfig+0xa3e>
 8007d80:	2b20      	cmp	r3, #32
 8007d82:	d87a      	bhi.n	8007e7a <UART_SetConfig+0xa3e>
 8007d84:	a201      	add	r2, pc, #4	@ (adr r2, 8007d8c <UART_SetConfig+0x950>)
 8007d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8a:	bf00      	nop
 8007d8c:	08007e17 	.word	0x08007e17
 8007d90:	08007e1f 	.word	0x08007e1f
 8007d94:	08007e7b 	.word	0x08007e7b
 8007d98:	08007e7b 	.word	0x08007e7b
 8007d9c:	08007e27 	.word	0x08007e27
 8007da0:	08007e7b 	.word	0x08007e7b
 8007da4:	08007e7b 	.word	0x08007e7b
 8007da8:	08007e7b 	.word	0x08007e7b
 8007dac:	08007e37 	.word	0x08007e37
 8007db0:	08007e7b 	.word	0x08007e7b
 8007db4:	08007e7b 	.word	0x08007e7b
 8007db8:	08007e7b 	.word	0x08007e7b
 8007dbc:	08007e7b 	.word	0x08007e7b
 8007dc0:	08007e7b 	.word	0x08007e7b
 8007dc4:	08007e7b 	.word	0x08007e7b
 8007dc8:	08007e7b 	.word	0x08007e7b
 8007dcc:	08007e47 	.word	0x08007e47
 8007dd0:	08007e7b 	.word	0x08007e7b
 8007dd4:	08007e7b 	.word	0x08007e7b
 8007dd8:	08007e7b 	.word	0x08007e7b
 8007ddc:	08007e7b 	.word	0x08007e7b
 8007de0:	08007e7b 	.word	0x08007e7b
 8007de4:	08007e7b 	.word	0x08007e7b
 8007de8:	08007e7b 	.word	0x08007e7b
 8007dec:	08007e7b 	.word	0x08007e7b
 8007df0:	08007e7b 	.word	0x08007e7b
 8007df4:	08007e7b 	.word	0x08007e7b
 8007df8:	08007e7b 	.word	0x08007e7b
 8007dfc:	08007e7b 	.word	0x08007e7b
 8007e00:	08007e7b 	.word	0x08007e7b
 8007e04:	08007e7b 	.word	0x08007e7b
 8007e08:	08007e7b 	.word	0x08007e7b
 8007e0c:	08007e6d 	.word	0x08007e6d
 8007e10:	2b40      	cmp	r3, #64	@ 0x40
 8007e12:	d02e      	beq.n	8007e72 <UART_SetConfig+0xa36>
 8007e14:	e031      	b.n	8007e7a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e16:	f7fc f8bb 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 8007e1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e1c:	e033      	b.n	8007e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e1e:	f7fc f8cd 	bl	8003fbc <HAL_RCC_GetPCLK2Freq>
 8007e22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e24:	e02f      	b.n	8007e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe f8be 	bl	8005fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e34:	e027      	b.n	8007e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e36:	f107 0318 	add.w	r3, r7, #24
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe fa0a 	bl	8006254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e44:	e01f      	b.n	8007e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e46:	4b2d      	ldr	r3, [pc, #180]	@ (8007efc <UART_SetConfig+0xac0>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d009      	beq.n	8007e66 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e52:	4b2a      	ldr	r3, [pc, #168]	@ (8007efc <UART_SetConfig+0xac0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	08db      	lsrs	r3, r3, #3
 8007e58:	f003 0303 	and.w	r3, r3, #3
 8007e5c:	4a28      	ldr	r2, [pc, #160]	@ (8007f00 <UART_SetConfig+0xac4>)
 8007e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e64:	e00f      	b.n	8007e86 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e66:	4b26      	ldr	r3, [pc, #152]	@ (8007f00 <UART_SetConfig+0xac4>)
 8007e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e6a:	e00c      	b.n	8007e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e6c:	4b25      	ldr	r3, [pc, #148]	@ (8007f04 <UART_SetConfig+0xac8>)
 8007e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e70:	e009      	b.n	8007e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e78:	e005      	b.n	8007e86 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e84:	bf00      	nop
    }

    if (pclk != 0U)
 8007e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d021      	beq.n	8007ed0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e90:	4a1d      	ldr	r2, [pc, #116]	@ (8007f08 <UART_SetConfig+0xacc>)
 8007e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e96:	461a      	mov	r2, r3
 8007e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	085b      	lsrs	r3, r3, #1
 8007ea4:	441a      	add	r2, r3
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb2:	2b0f      	cmp	r3, #15
 8007eb4:	d909      	bls.n	8007eca <UART_SetConfig+0xa8e>
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ebc:	d205      	bcs.n	8007eca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60da      	str	r2, [r3, #12]
 8007ec8:	e002      	b.n	8007ed0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007eec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3748      	adds	r7, #72	@ 0x48
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007efa:	bf00      	nop
 8007efc:	58024400 	.word	0x58024400
 8007f00:	03d09000 	.word	0x03d09000
 8007f04:	003d0900 	.word	0x003d0900
 8007f08:	0800c5b8 	.word	0x0800c5b8

08007f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f18:	f003 0308 	and.w	r3, r3, #8
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00a      	beq.n	8007f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00a      	beq.n	8007f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00a      	beq.n	8007fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01a      	beq.n	8008022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	430a      	orrs	r2, r1
 8008000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800800a:	d10a      	bne.n	8008022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	605a      	str	r2, [r3, #4]
  }
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b098      	sub	sp, #96	@ 0x60
 8008054:	af02      	add	r7, sp, #8
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008060:	f7f9 fa40 	bl	80014e4 <HAL_GetTick>
 8008064:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b08      	cmp	r3, #8
 8008072:	d12f      	bne.n	80080d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008074:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800807c:	2200      	movs	r2, #0
 800807e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f88e 	bl	80081a4 <UART_WaitOnFlagUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d022      	beq.n	80080d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800809c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800809e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	461a      	mov	r2, r3
 80080aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e6      	bne.n	800808e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e063      	b.n	800819c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0304 	and.w	r3, r3, #4
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d149      	bne.n	8008176 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ea:	2200      	movs	r2, #0
 80080ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f857 	bl	80081a4 <UART_WaitOnFlagUntilTimeout>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d03c      	beq.n	8008176 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	623b      	str	r3, [r7, #32]
   return(result);
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800811a:	633b      	str	r3, [r7, #48]	@ 0x30
 800811c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e6      	bne.n	80080fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3308      	adds	r3, #8
 8008134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	60fb      	str	r3, [r7, #12]
   return(result);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f023 0301 	bic.w	r3, r3, #1
 8008144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3308      	adds	r3, #8
 800814c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800814e:	61fa      	str	r2, [r7, #28]
 8008150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	69b9      	ldr	r1, [r7, #24]
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	617b      	str	r3, [r7, #20]
   return(result);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e5      	bne.n	800812e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2220      	movs	r2, #32
 8008166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e012      	b.n	800819c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3758      	adds	r7, #88	@ 0x58
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	4613      	mov	r3, r2
 80081b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081b4:	e04f      	b.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081bc:	d04b      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081be:	f7f9 f991 	bl	80014e4 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d302      	bcc.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e04e      	b.n	8008276 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d037      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b80      	cmp	r3, #128	@ 0x80
 80081ea:	d034      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b40      	cmp	r3, #64	@ 0x40
 80081f0:	d031      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	f003 0308 	and.w	r3, r3, #8
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d110      	bne.n	8008222 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2208      	movs	r2, #8
 8008206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 f839 	bl	8008280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2208      	movs	r2, #8
 8008212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e029      	b.n	8008276 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800822c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008230:	d111      	bne.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800823a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 f81f 	bl	8008280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2220      	movs	r2, #32
 8008246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e00f      	b.n	8008276 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4013      	ands	r3, r2
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	429a      	cmp	r2, r3
 8008264:	bf0c      	ite	eq
 8008266:	2301      	moveq	r3, #1
 8008268:	2300      	movne	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	461a      	mov	r2, r3
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	429a      	cmp	r2, r3
 8008272:	d0a0      	beq.n	80081b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b095      	sub	sp, #84	@ 0x54
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800829c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80082a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e6      	bne.n	8008288 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3308      	adds	r3, #8
 80082c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008348 <UART_EndRxTransfer+0xc8>)
 80082ce:	4013      	ands	r3, r2
 80082d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3308      	adds	r3, #8
 80082d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082e2:	e841 2300 	strex	r3, r2, [r1]
 80082e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1e5      	bne.n	80082ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d118      	bne.n	8008328 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	e853 3f00 	ldrex	r3, [r3]
 8008302:	60bb      	str	r3, [r7, #8]
   return(result);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f023 0310 	bic.w	r3, r3, #16
 800830a:	647b      	str	r3, [r7, #68]	@ 0x44
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	461a      	mov	r2, r3
 8008312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008314:	61bb      	str	r3, [r7, #24]
 8008316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008318:	6979      	ldr	r1, [r7, #20]
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	e841 2300 	strex	r3, r2, [r1]
 8008320:	613b      	str	r3, [r7, #16]
   return(result);
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1e6      	bne.n	80082f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2220      	movs	r2, #32
 800832c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800833c:	bf00      	nop
 800833e:	3754      	adds	r7, #84	@ 0x54
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	effffffe 	.word	0xeffffffe

0800834c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b08f      	sub	sp, #60	@ 0x3c
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800835a:	2b21      	cmp	r3, #33	@ 0x21
 800835c:	d14c      	bne.n	80083f8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008364:	b29b      	uxth	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d132      	bne.n	80083d0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	61fb      	str	r3, [r7, #28]
   return(result);
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800837e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800838a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800838e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e6      	bne.n	800836a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	61bb      	str	r3, [r7, #24]
 80083bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	6979      	ldr	r1, [r7, #20]
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	613b      	str	r3, [r7, #16]
   return(result);
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e6      	bne.n	800839c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80083ce:	e013      	b.n	80083f8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d4:	781a      	ldrb	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	3b01      	subs	r3, #1
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80083f8:	bf00      	nop
 80083fa:	373c      	adds	r7, #60	@ 0x3c
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008404:	b480      	push	{r7}
 8008406:	b091      	sub	sp, #68	@ 0x44
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008412:	2b21      	cmp	r3, #33	@ 0x21
 8008414:	d151      	bne.n	80084ba <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d132      	bne.n	8008488 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	623b      	str	r3, [r7, #32]
   return(result);
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008436:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008440:	633b      	str	r3, [r7, #48]	@ 0x30
 8008442:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800844e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e6      	bne.n	8008422 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	60fb      	str	r3, [r7, #12]
   return(result);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008468:	637b      	str	r3, [r7, #52]	@ 0x34
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	69b9      	ldr	r1, [r7, #24]
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	617b      	str	r3, [r7, #20]
   return(result);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e6      	bne.n	8008454 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008486:	e018      	b.n	80084ba <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800848c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800848e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800849c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a2:	1c9a      	adds	r2, r3, #2
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80084ba:	bf00      	nop
 80084bc:	3744      	adds	r7, #68	@ 0x44
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b091      	sub	sp, #68	@ 0x44
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d4:	2b21      	cmp	r3, #33	@ 0x21
 80084d6:	d160      	bne.n	800859a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80084e0:	e057      	b.n	8008592 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d133      	bne.n	8008556 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3308      	adds	r3, #8
 80084f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	e853 3f00 	ldrex	r3, [r3]
 80084fc:	623b      	str	r3, [r7, #32]
   return(result);
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008504:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3308      	adds	r3, #8
 800850c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800850e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008510:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800851c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e5      	bne.n	80084ee <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008536:	637b      	str	r3, [r7, #52]	@ 0x34
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008540:	61fb      	str	r3, [r7, #28]
 8008542:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	69b9      	ldr	r1, [r7, #24]
 8008546:	69fa      	ldr	r2, [r7, #28]
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	617b      	str	r3, [r7, #20]
   return(result);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e6      	bne.n	8008522 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008554:	e021      	b.n	800859a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008560:	2b00      	cmp	r3, #0
 8008562:	d013      	beq.n	800858c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008568:	781a      	ldrb	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008574:	1c5a      	adds	r2, r3, #1
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	b29a      	uxth	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800858c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800858e:	3b01      	subs	r3, #1
 8008590:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008592:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1a4      	bne.n	80084e2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008598:	e7ff      	b.n	800859a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800859a:	bf00      	nop
 800859c:	3744      	adds	r7, #68	@ 0x44
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b091      	sub	sp, #68	@ 0x44
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085b4:	2b21      	cmp	r3, #33	@ 0x21
 80085b6:	d165      	bne.n	8008684 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80085c0:	e05c      	b.n	800867c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d133      	bne.n	8008636 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3308      	adds	r3, #8
 80085d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80085e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3308      	adds	r3, #8
 80085ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e5      	bne.n	80085ce <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008616:	633b      	str	r3, [r7, #48]	@ 0x30
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008620:	61bb      	str	r3, [r7, #24]
 8008622:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	6979      	ldr	r1, [r7, #20]
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	613b      	str	r3, [r7, #16]
   return(result);
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e6      	bne.n	8008602 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008634:	e026      	b.n	8008684 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008640:	2b00      	cmp	r3, #0
 8008642:	d018      	beq.n	8008676 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008648:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800864a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008658:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800865e:	1c9a      	adds	r2, r3, #2
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800866a:	b29b      	uxth	r3, r3
 800866c:	3b01      	subs	r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008676:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008678:	3b01      	subs	r3, #1
 800867a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800867c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800867e:	2b00      	cmp	r3, #0
 8008680:	d19f      	bne.n	80085c2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008682:	e7ff      	b.n	8008684 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008684:	bf00      	nop
 8008686:	3744      	adds	r7, #68	@ 0x44
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d101      	bne.n	80086a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80086a2:	2302      	movs	r3, #2
 80086a4:	e027      	b.n	80086f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2224      	movs	r2, #36	@ 0x24
 80086b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0201 	bic.w	r2, r2, #1
 80086cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80086d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008716:	2302      	movs	r3, #2
 8008718:	e02d      	b.n	8008776 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2224      	movs	r2, #36	@ 0x24
 8008726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 0201 	bic.w	r2, r2, #1
 8008740:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f850 	bl	80087fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800878e:	2b01      	cmp	r3, #1
 8008790:	d101      	bne.n	8008796 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008792:	2302      	movs	r3, #2
 8008794:	e02d      	b.n	80087f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2224      	movs	r2, #36	@ 0x24
 80087a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 0201 	bic.w	r2, r2, #1
 80087bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f812 	bl	80087fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008808:	2b00      	cmp	r3, #0
 800880a:	d108      	bne.n	800881e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800881c:	e031      	b.n	8008882 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800881e:	2310      	movs	r3, #16
 8008820:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008822:	2310      	movs	r3, #16
 8008824:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	0e5b      	lsrs	r3, r3, #25
 800882e:	b2db      	uxtb	r3, r3
 8008830:	f003 0307 	and.w	r3, r3, #7
 8008834:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	0f5b      	lsrs	r3, r3, #29
 800883e:	b2db      	uxtb	r3, r3
 8008840:	f003 0307 	and.w	r3, r3, #7
 8008844:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	7b3a      	ldrb	r2, [r7, #12]
 800884a:	4911      	ldr	r1, [pc, #68]	@ (8008890 <UARTEx_SetNbDataToProcess+0x94>)
 800884c:	5c8a      	ldrb	r2, [r1, r2]
 800884e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008852:	7b3a      	ldrb	r2, [r7, #12]
 8008854:	490f      	ldr	r1, [pc, #60]	@ (8008894 <UARTEx_SetNbDataToProcess+0x98>)
 8008856:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008858:	fb93 f3f2 	sdiv	r3, r3, r2
 800885c:	b29a      	uxth	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	7b7a      	ldrb	r2, [r7, #13]
 8008868:	4909      	ldr	r1, [pc, #36]	@ (8008890 <UARTEx_SetNbDataToProcess+0x94>)
 800886a:	5c8a      	ldrb	r2, [r1, r2]
 800886c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008870:	7b7a      	ldrb	r2, [r7, #13]
 8008872:	4908      	ldr	r1, [pc, #32]	@ (8008894 <UARTEx_SetNbDataToProcess+0x98>)
 8008874:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008876:	fb93 f3f2 	sdiv	r3, r3, r2
 800887a:	b29a      	uxth	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008882:	bf00      	nop
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	0800c5d0 	.word	0x0800c5d0
 8008894:	0800c5d8 	.word	0x0800c5d8

08008898 <__NVIC_SetPriority>:
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	6039      	str	r1, [r7, #0]
 80088a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80088a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	db0a      	blt.n	80088c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	490c      	ldr	r1, [pc, #48]	@ (80088e4 <__NVIC_SetPriority+0x4c>)
 80088b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088b6:	0112      	lsls	r2, r2, #4
 80088b8:	b2d2      	uxtb	r2, r2
 80088ba:	440b      	add	r3, r1
 80088bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80088c0:	e00a      	b.n	80088d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	4908      	ldr	r1, [pc, #32]	@ (80088e8 <__NVIC_SetPriority+0x50>)
 80088c8:	88fb      	ldrh	r3, [r7, #6]
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	3b04      	subs	r3, #4
 80088d0:	0112      	lsls	r2, r2, #4
 80088d2:	b2d2      	uxtb	r2, r2
 80088d4:	440b      	add	r3, r1
 80088d6:	761a      	strb	r2, [r3, #24]
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	e000e100 	.word	0xe000e100
 80088e8:	e000ed00 	.word	0xe000ed00

080088ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80088ec:	b580      	push	{r7, lr}
 80088ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80088f0:	4b05      	ldr	r3, [pc, #20]	@ (8008908 <SysTick_Handler+0x1c>)
 80088f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80088f4:	f002 f976 	bl	800abe4 <xTaskGetSchedulerState>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d001      	beq.n	8008902 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80088fe:	f000 fdbb 	bl	8009478 <xPortSysTickHandler>
  }
}
 8008902:	bf00      	nop
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	e000e010 	.word	0xe000e010

0800890c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800890c:	b580      	push	{r7, lr}
 800890e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008910:	2100      	movs	r1, #0
 8008912:	f06f 0004 	mvn.w	r0, #4
 8008916:	f7ff ffbf 	bl	8008898 <__NVIC_SetPriority>
#endif
}
 800891a:	bf00      	nop
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008926:	f3ef 8305 	mrs	r3, IPSR
 800892a:	603b      	str	r3, [r7, #0]
  return(result);
 800892c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008932:	f06f 0305 	mvn.w	r3, #5
 8008936:	607b      	str	r3, [r7, #4]
 8008938:	e00c      	b.n	8008954 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800893a:	4b0a      	ldr	r3, [pc, #40]	@ (8008964 <osKernelInitialize+0x44>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d105      	bne.n	800894e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008942:	4b08      	ldr	r3, [pc, #32]	@ (8008964 <osKernelInitialize+0x44>)
 8008944:	2201      	movs	r2, #1
 8008946:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008948:	2300      	movs	r3, #0
 800894a:	607b      	str	r3, [r7, #4]
 800894c:	e002      	b.n	8008954 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800894e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008952:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008954:	687b      	ldr	r3, [r7, #4]
}
 8008956:	4618      	mov	r0, r3
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	2400027c 	.word	0x2400027c

08008968 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800896e:	f3ef 8305 	mrs	r3, IPSR
 8008972:	603b      	str	r3, [r7, #0]
  return(result);
 8008974:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <osKernelStart+0x1a>
    stat = osErrorISR;
 800897a:	f06f 0305 	mvn.w	r3, #5
 800897e:	607b      	str	r3, [r7, #4]
 8008980:	e010      	b.n	80089a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008982:	4b0b      	ldr	r3, [pc, #44]	@ (80089b0 <osKernelStart+0x48>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d109      	bne.n	800899e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800898a:	f7ff ffbf 	bl	800890c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800898e:	4b08      	ldr	r3, [pc, #32]	@ (80089b0 <osKernelStart+0x48>)
 8008990:	2202      	movs	r2, #2
 8008992:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008994:	f001 fcd8 	bl	800a348 <vTaskStartScheduler>
      stat = osOK;
 8008998:	2300      	movs	r3, #0
 800899a:	607b      	str	r3, [r7, #4]
 800899c:	e002      	b.n	80089a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800899e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089a4:	687b      	ldr	r3, [r7, #4]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	2400027c 	.word	0x2400027c

080089b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08e      	sub	sp, #56	@ 0x38
 80089b8:	af04      	add	r7, sp, #16
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089c0:	2300      	movs	r3, #0
 80089c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089c4:	f3ef 8305 	mrs	r3, IPSR
 80089c8:	617b      	str	r3, [r7, #20]
  return(result);
 80089ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d17e      	bne.n	8008ace <osThreadNew+0x11a>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d07b      	beq.n	8008ace <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80089d6:	2380      	movs	r3, #128	@ 0x80
 80089d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80089da:	2318      	movs	r3, #24
 80089dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80089e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d045      	beq.n	8008a7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d002      	beq.n	80089fc <osThreadNew+0x48>
        name = attr->name;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d008      	beq.n	8008a22 <osThreadNew+0x6e>
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	2b38      	cmp	r3, #56	@ 0x38
 8008a14:	d805      	bhi.n	8008a22 <osThreadNew+0x6e>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <osThreadNew+0x72>
        return (NULL);
 8008a22:	2300      	movs	r3, #0
 8008a24:	e054      	b.n	8008ad0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	089b      	lsrs	r3, r3, #2
 8008a34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00e      	beq.n	8008a5c <osThreadNew+0xa8>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	2b5b      	cmp	r3, #91	@ 0x5b
 8008a44:	d90a      	bls.n	8008a5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d006      	beq.n	8008a5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <osThreadNew+0xa8>
        mem = 1;
 8008a56:	2301      	movs	r3, #1
 8008a58:	61bb      	str	r3, [r7, #24]
 8008a5a:	e010      	b.n	8008a7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10c      	bne.n	8008a7e <osThreadNew+0xca>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d108      	bne.n	8008a7e <osThreadNew+0xca>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d104      	bne.n	8008a7e <osThreadNew+0xca>
          mem = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	61bb      	str	r3, [r7, #24]
 8008a78:	e001      	b.n	8008a7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d110      	bne.n	8008aa6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a8c:	9202      	str	r2, [sp, #8]
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	6a3a      	ldr	r2, [r7, #32]
 8008a98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f001 fa78 	bl	8009f90 <xTaskCreateStatic>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	613b      	str	r3, [r7, #16]
 8008aa4:	e013      	b.n	8008ace <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d110      	bne.n	8008ace <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	f107 0310 	add.w	r3, r7, #16
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f001 fac6 	bl	800a050 <xTaskCreate>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d001      	beq.n	8008ace <osThreadNew+0x11a>
            hTask = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008ace:	693b      	ldr	r3, [r7, #16]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3728      	adds	r7, #40	@ 0x28
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ade:	f3ef 8305 	mrs	r3, IPSR
 8008ae2:	603b      	str	r3, [r7, #0]
  return(result);
 8008ae4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <osThreadYield+0x1a>
    stat = osErrorISR;
 8008aea:	f06f 0305 	mvn.w	r3, #5
 8008aee:	607b      	str	r3, [r7, #4]
 8008af0:	e009      	b.n	8008b06 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8008af6:	4b07      	ldr	r3, [pc, #28]	@ (8008b14 <osThreadYield+0x3c>)
 8008af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8008b06:	687b      	ldr	r3, [r7, #4]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	e000ed04 	.word	0xe000ed04

08008b18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b20:	f3ef 8305 	mrs	r3, IPSR
 8008b24:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <osDelay+0x1c>
    stat = osErrorISR;
 8008b2c:	f06f 0305 	mvn.w	r3, #5
 8008b30:	60fb      	str	r3, [r7, #12]
 8008b32:	e007      	b.n	8008b44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f001 fbcc 	bl	800a2dc <vTaskDelay>
    }
  }

  return (stat);
 8008b44:	68fb      	ldr	r3, [r7, #12]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4a07      	ldr	r2, [pc, #28]	@ (8008b7c <vApplicationGetIdleTaskMemory+0x2c>)
 8008b60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	4a06      	ldr	r2, [pc, #24]	@ (8008b80 <vApplicationGetIdleTaskMemory+0x30>)
 8008b66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2280      	movs	r2, #128	@ 0x80
 8008b6c:	601a      	str	r2, [r3, #0]
}
 8008b6e:	bf00      	nop
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	24000280 	.word	0x24000280
 8008b80:	240002dc 	.word	0x240002dc

08008b84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4a07      	ldr	r2, [pc, #28]	@ (8008bb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	4a06      	ldr	r2, [pc, #24]	@ (8008bb4 <vApplicationGetTimerTaskMemory+0x30>)
 8008b9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ba2:	601a      	str	r2, [r3, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	240004dc 	.word	0x240004dc
 8008bb4:	24000538 	.word	0x24000538

08008bb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08a      	sub	sp, #40	@ 0x28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008bc4:	f001 fc28 	bl	800a418 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bc8:	4b5c      	ldr	r3, [pc, #368]	@ (8008d3c <pvPortMalloc+0x184>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008bd0:	f000 f924 	bl	8008e1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bd4:	4b5a      	ldr	r3, [pc, #360]	@ (8008d40 <pvPortMalloc+0x188>)
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f040 8095 	bne.w	8008d0c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d01e      	beq.n	8008c26 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008be8:	2208      	movs	r2, #8
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4413      	add	r3, r2
 8008bee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d015      	beq.n	8008c26 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f023 0307 	bic.w	r3, r3, #7
 8008c00:	3308      	adds	r3, #8
 8008c02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00b      	beq.n	8008c26 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c20:	bf00      	nop
 8008c22:	bf00      	nop
 8008c24:	e7fd      	b.n	8008c22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d06f      	beq.n	8008d0c <pvPortMalloc+0x154>
 8008c2c:	4b45      	ldr	r3, [pc, #276]	@ (8008d44 <pvPortMalloc+0x18c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d86a      	bhi.n	8008d0c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c36:	4b44      	ldr	r3, [pc, #272]	@ (8008d48 <pvPortMalloc+0x190>)
 8008c38:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c3a:	4b43      	ldr	r3, [pc, #268]	@ (8008d48 <pvPortMalloc+0x190>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c40:	e004      	b.n	8008c4c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d903      	bls.n	8008c5e <pvPortMalloc+0xa6>
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1f1      	bne.n	8008c42 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c5e:	4b37      	ldr	r3, [pc, #220]	@ (8008d3c <pvPortMalloc+0x184>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d051      	beq.n	8008d0c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	4413      	add	r3, r2
 8008c70:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	1ad2      	subs	r2, r2, r3
 8008c82:	2308      	movs	r3, #8
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d920      	bls.n	8008ccc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4413      	add	r3, r2
 8008c90:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <pvPortMalloc+0xfc>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	613b      	str	r3, [r7, #16]
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	e7fd      	b.n	8008cb0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	1ad2      	subs	r2, r2, r3
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cc6:	69b8      	ldr	r0, [r7, #24]
 8008cc8:	f000 f90a 	bl	8008ee0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8008d44 <pvPortMalloc+0x18c>)
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8008d44 <pvPortMalloc+0x18c>)
 8008cd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cda:	4b1a      	ldr	r3, [pc, #104]	@ (8008d44 <pvPortMalloc+0x18c>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4b1b      	ldr	r3, [pc, #108]	@ (8008d4c <pvPortMalloc+0x194>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d203      	bcs.n	8008cee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ce6:	4b17      	ldr	r3, [pc, #92]	@ (8008d44 <pvPortMalloc+0x18c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a18      	ldr	r2, [pc, #96]	@ (8008d4c <pvPortMalloc+0x194>)
 8008cec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	4b13      	ldr	r3, [pc, #76]	@ (8008d40 <pvPortMalloc+0x188>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfe:	2200      	movs	r2, #0
 8008d00:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d02:	4b13      	ldr	r3, [pc, #76]	@ (8008d50 <pvPortMalloc+0x198>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3301      	adds	r3, #1
 8008d08:	4a11      	ldr	r2, [pc, #68]	@ (8008d50 <pvPortMalloc+0x198>)
 8008d0a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d0c:	f001 fb92 	bl	800a434 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00b      	beq.n	8008d32 <pvPortMalloc+0x17a>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	60fb      	str	r3, [r7, #12]
}
 8008d2c:	bf00      	nop
 8008d2e:	bf00      	nop
 8008d30:	e7fd      	b.n	8008d2e <pvPortMalloc+0x176>
	return pvReturn;
 8008d32:	69fb      	ldr	r3, [r7, #28]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3728      	adds	r7, #40	@ 0x28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	24004540 	.word	0x24004540
 8008d40:	24004554 	.word	0x24004554
 8008d44:	24004544 	.word	0x24004544
 8008d48:	24004538 	.word	0x24004538
 8008d4c:	24004548 	.word	0x24004548
 8008d50:	2400454c 	.word	0x2400454c

08008d54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d04f      	beq.n	8008e06 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d66:	2308      	movs	r3, #8
 8008d68:	425b      	negs	r3, r3
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	4b25      	ldr	r3, [pc, #148]	@ (8008e10 <vPortFree+0xbc>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10b      	bne.n	8008d9a <vPortFree+0x46>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	60fb      	str	r3, [r7, #12]
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop
 8008d98:	e7fd      	b.n	8008d96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00b      	beq.n	8008dba <vPortFree+0x66>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	60bb      	str	r3, [r7, #8]
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop
 8008db8:	e7fd      	b.n	8008db6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	4b14      	ldr	r3, [pc, #80]	@ (8008e10 <vPortFree+0xbc>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d01e      	beq.n	8008e06 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d11a      	bne.n	8008e06 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e10 <vPortFree+0xbc>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	43db      	mvns	r3, r3
 8008dda:	401a      	ands	r2, r3
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008de0:	f001 fb1a 	bl	800a418 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	4b0a      	ldr	r3, [pc, #40]	@ (8008e14 <vPortFree+0xc0>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4413      	add	r3, r2
 8008dee:	4a09      	ldr	r2, [pc, #36]	@ (8008e14 <vPortFree+0xc0>)
 8008df0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008df2:	6938      	ldr	r0, [r7, #16]
 8008df4:	f000 f874 	bl	8008ee0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008df8:	4b07      	ldr	r3, [pc, #28]	@ (8008e18 <vPortFree+0xc4>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	4a06      	ldr	r2, [pc, #24]	@ (8008e18 <vPortFree+0xc4>)
 8008e00:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e02:	f001 fb17 	bl	800a434 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e06:	bf00      	nop
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	24004554 	.word	0x24004554
 8008e14:	24004544 	.word	0x24004544
 8008e18:	24004550 	.word	0x24004550

08008e1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e22:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008e26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e28:	4b27      	ldr	r3, [pc, #156]	@ (8008ec8 <prvHeapInit+0xac>)
 8008e2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f003 0307 	and.w	r3, r3, #7
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00c      	beq.n	8008e50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3307      	adds	r3, #7
 8008e3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0307 	bic.w	r3, r3, #7
 8008e42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ec8 <prvHeapInit+0xac>)
 8008e4c:	4413      	add	r3, r2
 8008e4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e54:	4a1d      	ldr	r2, [pc, #116]	@ (8008ecc <prvHeapInit+0xb0>)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8008ecc <prvHeapInit+0xb0>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	4413      	add	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e68:	2208      	movs	r2, #8
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	1a9b      	subs	r3, r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f023 0307 	bic.w	r3, r3, #7
 8008e76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4a15      	ldr	r2, [pc, #84]	@ (8008ed0 <prvHeapInit+0xb4>)
 8008e7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e7e:	4b14      	ldr	r3, [pc, #80]	@ (8008ed0 <prvHeapInit+0xb4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2200      	movs	r2, #0
 8008e84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e86:	4b12      	ldr	r3, [pc, #72]	@ (8008ed0 <prvHeapInit+0xb4>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	1ad2      	subs	r2, r2, r3
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed0 <prvHeapInit+0xb4>)
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8008ed4 <prvHeapInit+0xb8>)
 8008eaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	4a09      	ldr	r2, [pc, #36]	@ (8008ed8 <prvHeapInit+0xbc>)
 8008eb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008eb4:	4b09      	ldr	r3, [pc, #36]	@ (8008edc <prvHeapInit+0xc0>)
 8008eb6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008eba:	601a      	str	r2, [r3, #0]
}
 8008ebc:	bf00      	nop
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr
 8008ec8:	24000938 	.word	0x24000938
 8008ecc:	24004538 	.word	0x24004538
 8008ed0:	24004540 	.word	0x24004540
 8008ed4:	24004548 	.word	0x24004548
 8008ed8:	24004544 	.word	0x24004544
 8008edc:	24004554 	.word	0x24004554

08008ee0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ee8:	4b28      	ldr	r3, [pc, #160]	@ (8008f8c <prvInsertBlockIntoFreeList+0xac>)
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	e002      	b.n	8008ef4 <prvInsertBlockIntoFreeList+0x14>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	60fb      	str	r3, [r7, #12]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d8f7      	bhi.n	8008eee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	4413      	add	r3, r2
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d108      	bne.n	8008f22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	441a      	add	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	441a      	add	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d118      	bne.n	8008f68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	4b15      	ldr	r3, [pc, #84]	@ (8008f90 <prvInsertBlockIntoFreeList+0xb0>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d00d      	beq.n	8008f5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	441a      	add	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	e008      	b.n	8008f70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f90 <prvInsertBlockIntoFreeList+0xb0>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	e003      	b.n	8008f70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d002      	beq.n	8008f7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f7e:	bf00      	nop
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	24004538 	.word	0x24004538
 8008f90:	24004540 	.word	0x24004540

08008f94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f103 0208 	add.w	r2, r3, #8
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f103 0208 	add.w	r2, r3, #8
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f103 0208 	add.w	r2, r3, #8
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b085      	sub	sp, #20
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	689a      	ldr	r2, [r3, #8]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	601a      	str	r2, [r3, #0]
}
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009036:	b480      	push	{r7}
 8009038:	b085      	sub	sp, #20
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800904c:	d103      	bne.n	8009056 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	e00c      	b.n	8009070 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	3308      	adds	r3, #8
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	e002      	b.n	8009064 <vListInsert+0x2e>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	429a      	cmp	r2, r3
 800906e:	d2f6      	bcs.n	800905e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	601a      	str	r2, [r3, #0]
}
 800909c:	bf00      	nop
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	6892      	ldr	r2, [r2, #8]
 80090be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	6852      	ldr	r2, [r2, #4]
 80090c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d103      	bne.n	80090dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	1e5a      	subs	r2, r3, #1
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	3b04      	subs	r3, #4
 800910c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	3b04      	subs	r3, #4
 800911a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f023 0201 	bic.w	r2, r3, #1
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3b04      	subs	r3, #4
 800912a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800912c:	4a0c      	ldr	r2, [pc, #48]	@ (8009160 <pxPortInitialiseStack+0x64>)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3b14      	subs	r3, #20
 8009136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3b04      	subs	r3, #4
 8009142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f06f 0202 	mvn.w	r2, #2
 800914a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3b20      	subs	r3, #32
 8009150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009152:	68fb      	ldr	r3, [r7, #12]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	08009165 	.word	0x08009165

08009164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800916e:	4b13      	ldr	r3, [pc, #76]	@ (80091bc <prvTaskExitError+0x58>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009176:	d00b      	beq.n	8009190 <prvTaskExitError+0x2c>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	60fb      	str	r3, [r7, #12]
}
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	e7fd      	b.n	800918c <prvTaskExitError+0x28>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	60bb      	str	r3, [r7, #8]
}
 80091a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091a4:	bf00      	nop
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d0fc      	beq.n	80091a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	24000010 	.word	0x24000010

080091c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091c0:	4b07      	ldr	r3, [pc, #28]	@ (80091e0 <pxCurrentTCBConst2>)
 80091c2:	6819      	ldr	r1, [r3, #0]
 80091c4:	6808      	ldr	r0, [r1, #0]
 80091c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ca:	f380 8809 	msr	PSP, r0
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f04f 0000 	mov.w	r0, #0
 80091d6:	f380 8811 	msr	BASEPRI, r0
 80091da:	4770      	bx	lr
 80091dc:	f3af 8000 	nop.w

080091e0 <pxCurrentTCBConst2>:
 80091e0:	240045a0 	.word	0x240045a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091e4:	bf00      	nop
 80091e6:	bf00      	nop

080091e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80091e8:	4808      	ldr	r0, [pc, #32]	@ (800920c <prvPortStartFirstTask+0x24>)
 80091ea:	6800      	ldr	r0, [r0, #0]
 80091ec:	6800      	ldr	r0, [r0, #0]
 80091ee:	f380 8808 	msr	MSP, r0
 80091f2:	f04f 0000 	mov.w	r0, #0
 80091f6:	f380 8814 	msr	CONTROL, r0
 80091fa:	b662      	cpsie	i
 80091fc:	b661      	cpsie	f
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	df00      	svc	0
 8009208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800920a:	bf00      	nop
 800920c:	e000ed08 	.word	0xe000ed08

08009210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009216:	4b47      	ldr	r3, [pc, #284]	@ (8009334 <xPortStartScheduler+0x124>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a47      	ldr	r2, [pc, #284]	@ (8009338 <xPortStartScheduler+0x128>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d10b      	bne.n	8009238 <xPortStartScheduler+0x28>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	60fb      	str	r3, [r7, #12]
}
 8009232:	bf00      	nop
 8009234:	bf00      	nop
 8009236:	e7fd      	b.n	8009234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009238:	4b3e      	ldr	r3, [pc, #248]	@ (8009334 <xPortStartScheduler+0x124>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a3f      	ldr	r2, [pc, #252]	@ (800933c <xPortStartScheduler+0x12c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d10b      	bne.n	800925a <xPortStartScheduler+0x4a>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	613b      	str	r3, [r7, #16]
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop
 8009258:	e7fd      	b.n	8009256 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800925a:	4b39      	ldr	r3, [pc, #228]	@ (8009340 <xPortStartScheduler+0x130>)
 800925c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	22ff      	movs	r2, #255	@ 0xff
 800926a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	b2db      	uxtb	r3, r3
 8009278:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800927c:	b2da      	uxtb	r2, r3
 800927e:	4b31      	ldr	r3, [pc, #196]	@ (8009344 <xPortStartScheduler+0x134>)
 8009280:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009282:	4b31      	ldr	r3, [pc, #196]	@ (8009348 <xPortStartScheduler+0x138>)
 8009284:	2207      	movs	r2, #7
 8009286:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009288:	e009      	b.n	800929e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800928a:	4b2f      	ldr	r3, [pc, #188]	@ (8009348 <xPortStartScheduler+0x138>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3b01      	subs	r3, #1
 8009290:	4a2d      	ldr	r2, [pc, #180]	@ (8009348 <xPortStartScheduler+0x138>)
 8009292:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	b2db      	uxtb	r3, r3
 800929c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092a6:	2b80      	cmp	r3, #128	@ 0x80
 80092a8:	d0ef      	beq.n	800928a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092aa:	4b27      	ldr	r3, [pc, #156]	@ (8009348 <xPortStartScheduler+0x138>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f1c3 0307 	rsb	r3, r3, #7
 80092b2:	2b04      	cmp	r3, #4
 80092b4:	d00b      	beq.n	80092ce <xPortStartScheduler+0xbe>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	60bb      	str	r3, [r7, #8]
}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	e7fd      	b.n	80092ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009348 <xPortStartScheduler+0x138>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	021b      	lsls	r3, r3, #8
 80092d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009348 <xPortStartScheduler+0x138>)
 80092d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009348 <xPortStartScheduler+0x138>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80092e0:	4a19      	ldr	r2, [pc, #100]	@ (8009348 <xPortStartScheduler+0x138>)
 80092e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092ec:	4b17      	ldr	r3, [pc, #92]	@ (800934c <xPortStartScheduler+0x13c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a16      	ldr	r2, [pc, #88]	@ (800934c <xPortStartScheduler+0x13c>)
 80092f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80092f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092f8:	4b14      	ldr	r3, [pc, #80]	@ (800934c <xPortStartScheduler+0x13c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a13      	ldr	r2, [pc, #76]	@ (800934c <xPortStartScheduler+0x13c>)
 80092fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009302:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009304:	f000 f8da 	bl	80094bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009308:	4b11      	ldr	r3, [pc, #68]	@ (8009350 <xPortStartScheduler+0x140>)
 800930a:	2200      	movs	r2, #0
 800930c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800930e:	f000 f8f9 	bl	8009504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009312:	4b10      	ldr	r3, [pc, #64]	@ (8009354 <xPortStartScheduler+0x144>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a0f      	ldr	r2, [pc, #60]	@ (8009354 <xPortStartScheduler+0x144>)
 8009318:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800931c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800931e:	f7ff ff63 	bl	80091e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009322:	f001 f9ef 	bl	800a704 <vTaskSwitchContext>
	prvTaskExitError();
 8009326:	f7ff ff1d 	bl	8009164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	e000ed00 	.word	0xe000ed00
 8009338:	410fc271 	.word	0x410fc271
 800933c:	410fc270 	.word	0x410fc270
 8009340:	e000e400 	.word	0xe000e400
 8009344:	24004558 	.word	0x24004558
 8009348:	2400455c 	.word	0x2400455c
 800934c:	e000ed20 	.word	0xe000ed20
 8009350:	24000010 	.word	0x24000010
 8009354:	e000ef34 	.word	0xe000ef34

08009358 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	607b      	str	r3, [r7, #4]
}
 8009370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009372:	4b10      	ldr	r3, [pc, #64]	@ (80093b4 <vPortEnterCritical+0x5c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3301      	adds	r3, #1
 8009378:	4a0e      	ldr	r2, [pc, #56]	@ (80093b4 <vPortEnterCritical+0x5c>)
 800937a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800937c:	4b0d      	ldr	r3, [pc, #52]	@ (80093b4 <vPortEnterCritical+0x5c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d110      	bne.n	80093a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009384:	4b0c      	ldr	r3, [pc, #48]	@ (80093b8 <vPortEnterCritical+0x60>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	603b      	str	r3, [r7, #0]
}
 80093a0:	bf00      	nop
 80093a2:	bf00      	nop
 80093a4:	e7fd      	b.n	80093a2 <vPortEnterCritical+0x4a>
	}
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	24000010 	.word	0x24000010
 80093b8:	e000ed04 	.word	0xe000ed04

080093bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093c2:	4b12      	ldr	r3, [pc, #72]	@ (800940c <vPortExitCritical+0x50>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10b      	bne.n	80093e2 <vPortExitCritical+0x26>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	607b      	str	r3, [r7, #4]
}
 80093dc:	bf00      	nop
 80093de:	bf00      	nop
 80093e0:	e7fd      	b.n	80093de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80093e2:	4b0a      	ldr	r3, [pc, #40]	@ (800940c <vPortExitCritical+0x50>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	4a08      	ldr	r2, [pc, #32]	@ (800940c <vPortExitCritical+0x50>)
 80093ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093ec:	4b07      	ldr	r3, [pc, #28]	@ (800940c <vPortExitCritical+0x50>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d105      	bne.n	8009400 <vPortExitCritical+0x44>
 80093f4:	2300      	movs	r3, #0
 80093f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	24000010 	.word	0x24000010

08009410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009410:	f3ef 8009 	mrs	r0, PSP
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	4b15      	ldr	r3, [pc, #84]	@ (8009470 <pxCurrentTCBConst>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	f01e 0f10 	tst.w	lr, #16
 8009420:	bf08      	it	eq
 8009422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942a:	6010      	str	r0, [r2, #0]
 800942c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009430:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009434:	f380 8811 	msr	BASEPRI, r0
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f001 f960 	bl	800a704 <vTaskSwitchContext>
 8009444:	f04f 0000 	mov.w	r0, #0
 8009448:	f380 8811 	msr	BASEPRI, r0
 800944c:	bc09      	pop	{r0, r3}
 800944e:	6819      	ldr	r1, [r3, #0]
 8009450:	6808      	ldr	r0, [r1, #0]
 8009452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009456:	f01e 0f10 	tst.w	lr, #16
 800945a:	bf08      	it	eq
 800945c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009460:	f380 8809 	msr	PSP, r0
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	f3af 8000 	nop.w

08009470 <pxCurrentTCBConst>:
 8009470:	240045a0 	.word	0x240045a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009474:	bf00      	nop
 8009476:	bf00      	nop

08009478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	607b      	str	r3, [r7, #4]
}
 8009490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009492:	f001 f87d 	bl	800a590 <xTaskIncrementTick>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800949c:	4b06      	ldr	r3, [pc, #24]	@ (80094b8 <xPortSysTickHandler+0x40>)
 800949e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	2300      	movs	r3, #0
 80094a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	f383 8811 	msr	BASEPRI, r3
}
 80094ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094b0:	bf00      	nop
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	e000ed04 	.word	0xe000ed04

080094bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094c0:	4b0b      	ldr	r3, [pc, #44]	@ (80094f0 <vPortSetupTimerInterrupt+0x34>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094c6:	4b0b      	ldr	r3, [pc, #44]	@ (80094f4 <vPortSetupTimerInterrupt+0x38>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094cc:	4b0a      	ldr	r3, [pc, #40]	@ (80094f8 <vPortSetupTimerInterrupt+0x3c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a0a      	ldr	r2, [pc, #40]	@ (80094fc <vPortSetupTimerInterrupt+0x40>)
 80094d2:	fba2 2303 	umull	r2, r3, r2, r3
 80094d6:	099b      	lsrs	r3, r3, #6
 80094d8:	4a09      	ldr	r2, [pc, #36]	@ (8009500 <vPortSetupTimerInterrupt+0x44>)
 80094da:	3b01      	subs	r3, #1
 80094dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80094de:	4b04      	ldr	r3, [pc, #16]	@ (80094f0 <vPortSetupTimerInterrupt+0x34>)
 80094e0:	2207      	movs	r2, #7
 80094e2:	601a      	str	r2, [r3, #0]
}
 80094e4:	bf00      	nop
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	e000e010 	.word	0xe000e010
 80094f4:	e000e018 	.word	0xe000e018
 80094f8:	24000000 	.word	0x24000000
 80094fc:	10624dd3 	.word	0x10624dd3
 8009500:	e000e014 	.word	0xe000e014

08009504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009504:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009514 <vPortEnableVFP+0x10>
 8009508:	6801      	ldr	r1, [r0, #0]
 800950a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800950e:	6001      	str	r1, [r0, #0]
 8009510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009512:	bf00      	nop
 8009514:	e000ed88 	.word	0xe000ed88

08009518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800951e:	f3ef 8305 	mrs	r3, IPSR
 8009522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b0f      	cmp	r3, #15
 8009528:	d915      	bls.n	8009556 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800952a:	4a18      	ldr	r2, [pc, #96]	@ (800958c <vPortValidateInterruptPriority+0x74>)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4413      	add	r3, r2
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009534:	4b16      	ldr	r3, [pc, #88]	@ (8009590 <vPortValidateInterruptPriority+0x78>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	7afa      	ldrb	r2, [r7, #11]
 800953a:	429a      	cmp	r2, r3
 800953c:	d20b      	bcs.n	8009556 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	607b      	str	r3, [r7, #4]
}
 8009550:	bf00      	nop
 8009552:	bf00      	nop
 8009554:	e7fd      	b.n	8009552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009556:	4b0f      	ldr	r3, [pc, #60]	@ (8009594 <vPortValidateInterruptPriority+0x7c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800955e:	4b0e      	ldr	r3, [pc, #56]	@ (8009598 <vPortValidateInterruptPriority+0x80>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	429a      	cmp	r2, r3
 8009564:	d90b      	bls.n	800957e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	603b      	str	r3, [r7, #0]
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	e7fd      	b.n	800957a <vPortValidateInterruptPriority+0x62>
	}
 800957e:	bf00      	nop
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	e000e3f0 	.word	0xe000e3f0
 8009590:	24004558 	.word	0x24004558
 8009594:	e000ed0c 	.word	0xe000ed0c
 8009598:	2400455c 	.word	0x2400455c

0800959c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10b      	bne.n	80095c8 <xQueueGenericReset+0x2c>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	60bb      	str	r3, [r7, #8]
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	e7fd      	b.n	80095c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80095c8:	f7ff fec6 	bl	8009358 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095d4:	68f9      	ldr	r1, [r7, #12]
 80095d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80095d8:	fb01 f303 	mul.w	r3, r1, r3
 80095dc:	441a      	add	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f8:	3b01      	subs	r3, #1
 80095fa:	68f9      	ldr	r1, [r7, #12]
 80095fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80095fe:	fb01 f303 	mul.w	r3, r1, r3
 8009602:	441a      	add	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	22ff      	movs	r2, #255	@ 0xff
 800960c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	22ff      	movs	r2, #255	@ 0xff
 8009614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d114      	bne.n	8009648 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01a      	beq.n	800965c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3310      	adds	r3, #16
 800962a:	4618      	mov	r0, r3
 800962c:	f001 f91a 	bl	800a864 <xTaskRemoveFromEventList>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d012      	beq.n	800965c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009636:	4b0d      	ldr	r3, [pc, #52]	@ (800966c <xQueueGenericReset+0xd0>)
 8009638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	e009      	b.n	800965c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3310      	adds	r3, #16
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff fca1 	bl	8008f94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3324      	adds	r3, #36	@ 0x24
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff fc9c 	bl	8008f94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800965c:	f7ff feae 	bl	80093bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009660:	2301      	movs	r3, #1
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	e000ed04 	.word	0xe000ed04

08009670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08e      	sub	sp, #56	@ 0x38
 8009674:	af02      	add	r7, sp, #8
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10b      	bne.n	800969c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009696:	bf00      	nop
 8009698:	bf00      	nop
 800969a:	e7fd      	b.n	8009698 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	e7fd      	b.n	80096b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <xQueueGenericCreateStatic+0x56>
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <xQueueGenericCreateStatic+0x5a>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e000      	b.n	80096cc <xQueueGenericCreateStatic+0x5c>
 80096ca:	2300      	movs	r3, #0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10b      	bne.n	80096e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	623b      	str	r3, [r7, #32]
}
 80096e2:	bf00      	nop
 80096e4:	bf00      	nop
 80096e6:	e7fd      	b.n	80096e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d102      	bne.n	80096f4 <xQueueGenericCreateStatic+0x84>
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <xQueueGenericCreateStatic+0x88>
 80096f4:	2301      	movs	r3, #1
 80096f6:	e000      	b.n	80096fa <xQueueGenericCreateStatic+0x8a>
 80096f8:	2300      	movs	r3, #0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10b      	bne.n	8009716 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	61fb      	str	r3, [r7, #28]
}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	e7fd      	b.n	8009712 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009716:	2350      	movs	r3, #80	@ 0x50
 8009718:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2b50      	cmp	r3, #80	@ 0x50
 800971e:	d00b      	beq.n	8009738 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	61bb      	str	r3, [r7, #24]
}
 8009732:	bf00      	nop
 8009734:	bf00      	nop
 8009736:	e7fd      	b.n	8009734 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009738:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800973e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00d      	beq.n	8009760 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800974c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	4613      	mov	r3, r2
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	68b9      	ldr	r1, [r7, #8]
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 f805 	bl	800976a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009762:	4618      	mov	r0, r3
 8009764:	3730      	adds	r7, #48	@ 0x30
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	60b9      	str	r1, [r7, #8]
 8009774:	607a      	str	r2, [r7, #4]
 8009776:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d103      	bne.n	8009786 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	e002      	b.n	800978c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009798:	2101      	movs	r1, #1
 800979a:	69b8      	ldr	r0, [r7, #24]
 800979c:	f7ff fefe 	bl	800959c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097a8:	bf00      	nop
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08e      	sub	sp, #56	@ 0x38
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097be:	2300      	movs	r3, #0
 80097c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80097c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10b      	bne.n	80097e4 <xQueueGenericSend+0x34>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097de:	bf00      	nop
 80097e0:	bf00      	nop
 80097e2:	e7fd      	b.n	80097e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d103      	bne.n	80097f2 <xQueueGenericSend+0x42>
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <xQueueGenericSend+0x46>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e000      	b.n	80097f8 <xQueueGenericSend+0x48>
 80097f6:	2300      	movs	r3, #0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10b      	bne.n	8009814 <xQueueGenericSend+0x64>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800980e:	bf00      	nop
 8009810:	bf00      	nop
 8009812:	e7fd      	b.n	8009810 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d103      	bne.n	8009822 <xQueueGenericSend+0x72>
 800981a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <xQueueGenericSend+0x76>
 8009822:	2301      	movs	r3, #1
 8009824:	e000      	b.n	8009828 <xQueueGenericSend+0x78>
 8009826:	2300      	movs	r3, #0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10b      	bne.n	8009844 <xQueueGenericSend+0x94>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	623b      	str	r3, [r7, #32]
}
 800983e:	bf00      	nop
 8009840:	bf00      	nop
 8009842:	e7fd      	b.n	8009840 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009844:	f001 f9ce 	bl	800abe4 <xTaskGetSchedulerState>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d102      	bne.n	8009854 <xQueueGenericSend+0xa4>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <xQueueGenericSend+0xa8>
 8009854:	2301      	movs	r3, #1
 8009856:	e000      	b.n	800985a <xQueueGenericSend+0xaa>
 8009858:	2300      	movs	r3, #0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10b      	bne.n	8009876 <xQueueGenericSend+0xc6>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	61fb      	str	r3, [r7, #28]
}
 8009870:	bf00      	nop
 8009872:	bf00      	nop
 8009874:	e7fd      	b.n	8009872 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009876:	f7ff fd6f 	bl	8009358 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009882:	429a      	cmp	r2, r3
 8009884:	d302      	bcc.n	800988c <xQueueGenericSend+0xdc>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d129      	bne.n	80098e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009892:	f000 fa0f 	bl	8009cb4 <prvCopyDataToQueue>
 8009896:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800989c:	2b00      	cmp	r3, #0
 800989e:	d010      	beq.n	80098c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a2:	3324      	adds	r3, #36	@ 0x24
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 ffdd 	bl	800a864 <xTaskRemoveFromEventList>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d013      	beq.n	80098d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098b0:	4b3f      	ldr	r3, [pc, #252]	@ (80099b0 <xQueueGenericSend+0x200>)
 80098b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	e00a      	b.n	80098d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d007      	beq.n	80098d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098c8:	4b39      	ldr	r3, [pc, #228]	@ (80099b0 <xQueueGenericSend+0x200>)
 80098ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098d8:	f7ff fd70 	bl	80093bc <vPortExitCritical>
				return pdPASS;
 80098dc:	2301      	movs	r3, #1
 80098de:	e063      	b.n	80099a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d103      	bne.n	80098ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098e6:	f7ff fd69 	bl	80093bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	e05c      	b.n	80099a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d106      	bne.n	8009902 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098f4:	f107 0314 	add.w	r3, r7, #20
 80098f8:	4618      	mov	r0, r3
 80098fa:	f001 f817 	bl	800a92c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098fe:	2301      	movs	r3, #1
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009902:	f7ff fd5b 	bl	80093bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009906:	f000 fd87 	bl	800a418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800990a:	f7ff fd25 	bl	8009358 <vPortEnterCritical>
 800990e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009914:	b25b      	sxtb	r3, r3
 8009916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800991a:	d103      	bne.n	8009924 <xQueueGenericSend+0x174>
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009926:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800992a:	b25b      	sxtb	r3, r3
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009930:	d103      	bne.n	800993a <xQueueGenericSend+0x18a>
 8009932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800993a:	f7ff fd3f 	bl	80093bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800993e:	1d3a      	adds	r2, r7, #4
 8009940:	f107 0314 	add.w	r3, r7, #20
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f001 f806 	bl	800a958 <xTaskCheckForTimeOut>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d124      	bne.n	800999c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009952:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009954:	f000 faa6 	bl	8009ea4 <prvIsQueueFull>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d018      	beq.n	8009990 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800995e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009960:	3310      	adds	r3, #16
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	4611      	mov	r1, r2
 8009966:	4618      	mov	r0, r3
 8009968:	f000 ff2a 	bl	800a7c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800996c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800996e:	f000 fa31 	bl	8009dd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009972:	f000 fd5f 	bl	800a434 <xTaskResumeAll>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	f47f af7c 	bne.w	8009876 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800997e:	4b0c      	ldr	r3, [pc, #48]	@ (80099b0 <xQueueGenericSend+0x200>)
 8009980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	e772      	b.n	8009876 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009990:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009992:	f000 fa1f 	bl	8009dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009996:	f000 fd4d 	bl	800a434 <xTaskResumeAll>
 800999a:	e76c      	b.n	8009876 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800999c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800999e:	f000 fa19 	bl	8009dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099a2:	f000 fd47 	bl	800a434 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3738      	adds	r7, #56	@ 0x38
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	e000ed04 	.word	0xe000ed04

080099b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b090      	sub	sp, #64	@ 0x40
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80099c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10b      	bne.n	80099e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80099de:	bf00      	nop
 80099e0:	bf00      	nop
 80099e2:	e7fd      	b.n	80099e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d103      	bne.n	80099f2 <xQueueGenericSendFromISR+0x3e>
 80099ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <xQueueGenericSendFromISR+0x42>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e000      	b.n	80099f8 <xQueueGenericSendFromISR+0x44>
 80099f6:	2300      	movs	r3, #0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10b      	bne.n	8009a14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a0e:	bf00      	nop
 8009a10:	bf00      	nop
 8009a12:	e7fd      	b.n	8009a10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d103      	bne.n	8009a22 <xQueueGenericSendFromISR+0x6e>
 8009a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d101      	bne.n	8009a26 <xQueueGenericSendFromISR+0x72>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e000      	b.n	8009a28 <xQueueGenericSendFromISR+0x74>
 8009a26:	2300      	movs	r3, #0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10b      	bne.n	8009a44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	623b      	str	r3, [r7, #32]
}
 8009a3e:	bf00      	nop
 8009a40:	bf00      	nop
 8009a42:	e7fd      	b.n	8009a40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a44:	f7ff fd68 	bl	8009518 <vPortValidateInterruptPriority>
	__asm volatile
 8009a48:	f3ef 8211 	mrs	r2, BASEPRI
 8009a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	61fa      	str	r2, [r7, #28]
 8009a5e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009a60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d302      	bcc.n	8009a76 <xQueueGenericSendFromISR+0xc2>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d12f      	bne.n	8009ad6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	68b9      	ldr	r1, [r7, #8]
 8009a8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009a8c:	f000 f912 	bl	8009cb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009a94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a98:	d112      	bne.n	8009ac0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d016      	beq.n	8009ad0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa4:	3324      	adds	r3, #36	@ 0x24
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fedc 	bl	800a864 <xTaskRemoveFromEventList>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00e      	beq.n	8009ad0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00b      	beq.n	8009ad0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	e007      	b.n	8009ad0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	b25a      	sxtb	r2, r3
 8009aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009ad4:	e001      	b.n	8009ada <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009adc:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f383 8811 	msr	BASEPRI, r3
}
 8009ae4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3740      	adds	r7, #64	@ 0x40
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08c      	sub	sp, #48	@ 0x30
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009afc:	2300      	movs	r3, #0
 8009afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10b      	bne.n	8009b22 <xQueueReceive+0x32>
	__asm volatile
 8009b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	623b      	str	r3, [r7, #32]
}
 8009b1c:	bf00      	nop
 8009b1e:	bf00      	nop
 8009b20:	e7fd      	b.n	8009b1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d103      	bne.n	8009b30 <xQueueReceive+0x40>
 8009b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <xQueueReceive+0x44>
 8009b30:	2301      	movs	r3, #1
 8009b32:	e000      	b.n	8009b36 <xQueueReceive+0x46>
 8009b34:	2300      	movs	r3, #0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10b      	bne.n	8009b52 <xQueueReceive+0x62>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	61fb      	str	r3, [r7, #28]
}
 8009b4c:	bf00      	nop
 8009b4e:	bf00      	nop
 8009b50:	e7fd      	b.n	8009b4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b52:	f001 f847 	bl	800abe4 <xTaskGetSchedulerState>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d102      	bne.n	8009b62 <xQueueReceive+0x72>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <xQueueReceive+0x76>
 8009b62:	2301      	movs	r3, #1
 8009b64:	e000      	b.n	8009b68 <xQueueReceive+0x78>
 8009b66:	2300      	movs	r3, #0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10b      	bne.n	8009b84 <xQueueReceive+0x94>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	61bb      	str	r3, [r7, #24]
}
 8009b7e:	bf00      	nop
 8009b80:	bf00      	nop
 8009b82:	e7fd      	b.n	8009b80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b84:	f7ff fbe8 	bl	8009358 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d01f      	beq.n	8009bd4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b94:	68b9      	ldr	r1, [r7, #8]
 8009b96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b98:	f000 f8f6 	bl	8009d88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9e:	1e5a      	subs	r2, r3, #1
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00f      	beq.n	8009bcc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bae:	3310      	adds	r3, #16
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 fe57 	bl	800a864 <xTaskRemoveFromEventList>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d007      	beq.n	8009bcc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009bbc:	4b3c      	ldr	r3, [pc, #240]	@ (8009cb0 <xQueueReceive+0x1c0>)
 8009bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bcc:	f7ff fbf6 	bl	80093bc <vPortExitCritical>
				return pdPASS;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e069      	b.n	8009ca8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d103      	bne.n	8009be2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bda:	f7ff fbef 	bl	80093bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bde:	2300      	movs	r3, #0
 8009be0:	e062      	b.n	8009ca8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d106      	bne.n	8009bf6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009be8:	f107 0310 	add.w	r3, r7, #16
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 fe9d 	bl	800a92c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bf6:	f7ff fbe1 	bl	80093bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bfa:	f000 fc0d 	bl	800a418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bfe:	f7ff fbab 	bl	8009358 <vPortEnterCritical>
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c08:	b25b      	sxtb	r3, r3
 8009c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c0e:	d103      	bne.n	8009c18 <xQueueReceive+0x128>
 8009c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c1e:	b25b      	sxtb	r3, r3
 8009c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c24:	d103      	bne.n	8009c2e <xQueueReceive+0x13e>
 8009c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c2e:	f7ff fbc5 	bl	80093bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c32:	1d3a      	adds	r2, r7, #4
 8009c34:	f107 0310 	add.w	r3, r7, #16
 8009c38:	4611      	mov	r1, r2
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 fe8c 	bl	800a958 <xTaskCheckForTimeOut>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d123      	bne.n	8009c8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c48:	f000 f916 	bl	8009e78 <prvIsQueueEmpty>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d017      	beq.n	8009c82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c54:	3324      	adds	r3, #36	@ 0x24
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	4611      	mov	r1, r2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f000 fdb0 	bl	800a7c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c62:	f000 f8b7 	bl	8009dd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c66:	f000 fbe5 	bl	800a434 <xTaskResumeAll>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d189      	bne.n	8009b84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009c70:	4b0f      	ldr	r3, [pc, #60]	@ (8009cb0 <xQueueReceive+0x1c0>)
 8009c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c76:	601a      	str	r2, [r3, #0]
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	e780      	b.n	8009b84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c84:	f000 f8a6 	bl	8009dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c88:	f000 fbd4 	bl	800a434 <xTaskResumeAll>
 8009c8c:	e77a      	b.n	8009b84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c90:	f000 f8a0 	bl	8009dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c94:	f000 fbce 	bl	800a434 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c9a:	f000 f8ed 	bl	8009e78 <prvIsQueueEmpty>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f43f af6f 	beq.w	8009b84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ca6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3730      	adds	r7, #48	@ 0x30
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	e000ed04 	.word	0xe000ed04

08009cb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10d      	bne.n	8009cee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d14d      	bne.n	8009d76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 ff9e 	bl	800ac20 <xTaskPriorityDisinherit>
 8009ce4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	609a      	str	r2, [r3, #8]
 8009cec:	e043      	b.n	8009d76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d119      	bne.n	8009d28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6858      	ldr	r0, [r3, #4]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	68b9      	ldr	r1, [r7, #8]
 8009d00:	f001 fdcf 	bl	800b8a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0c:	441a      	add	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d32b      	bcc.n	8009d76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	605a      	str	r2, [r3, #4]
 8009d26:	e026      	b.n	8009d76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	68d8      	ldr	r0, [r3, #12]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d30:	461a      	mov	r2, r3
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	f001 fdb5 	bl	800b8a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	68da      	ldr	r2, [r3, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d40:	425b      	negs	r3, r3
 8009d42:	441a      	add	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d207      	bcs.n	8009d64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	689a      	ldr	r2, [r3, #8]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d5c:	425b      	negs	r3, r3
 8009d5e:	441a      	add	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d105      	bne.n	8009d76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	3b01      	subs	r3, #1
 8009d74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009d7e:	697b      	ldr	r3, [r7, #20]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d018      	beq.n	8009dcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009da2:	441a      	add	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d303      	bcc.n	8009dbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68d9      	ldr	r1, [r3, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6838      	ldr	r0, [r7, #0]
 8009dc8:	f001 fd6b 	bl	800b8a2 <memcpy>
	}
}
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ddc:	f7ff fabc 	bl	8009358 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009de6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009de8:	e011      	b.n	8009e0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d012      	beq.n	8009e18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3324      	adds	r3, #36	@ 0x24
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fd34 	bl	800a864 <xTaskRemoveFromEventList>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e02:	f000 fe0d 	bl	800aa20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dce9      	bgt.n	8009dea <prvUnlockQueue+0x16>
 8009e16:	e000      	b.n	8009e1a <prvUnlockQueue+0x46>
					break;
 8009e18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	22ff      	movs	r2, #255	@ 0xff
 8009e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009e22:	f7ff facb 	bl	80093bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e26:	f7ff fa97 	bl	8009358 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e32:	e011      	b.n	8009e58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d012      	beq.n	8009e62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3310      	adds	r3, #16
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fd0f 	bl	800a864 <xTaskRemoveFromEventList>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e4c:	f000 fde8 	bl	800aa20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dce9      	bgt.n	8009e34 <prvUnlockQueue+0x60>
 8009e60:	e000      	b.n	8009e64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	22ff      	movs	r2, #255	@ 0xff
 8009e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009e6c:	f7ff faa6 	bl	80093bc <vPortExitCritical>
}
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e80:	f7ff fa6a 	bl	8009358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	e001      	b.n	8009e96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e96:	f7ff fa91 	bl	80093bc <vPortExitCritical>

	return xReturn;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eac:	f7ff fa54 	bl	8009358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d102      	bne.n	8009ec2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	e001      	b.n	8009ec6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ec6:	f7ff fa79 	bl	80093bc <vPortExitCritical>

	return xReturn;
 8009eca:	68fb      	ldr	r3, [r7, #12]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	e014      	b.n	8009f0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8009f24 <vQueueAddToRegistry+0x50>)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10b      	bne.n	8009f08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ef0:	490c      	ldr	r1, [pc, #48]	@ (8009f24 <vQueueAddToRegistry+0x50>)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009efa:	4a0a      	ldr	r2, [pc, #40]	@ (8009f24 <vQueueAddToRegistry+0x50>)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	4413      	add	r3, r2
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f06:	e006      	b.n	8009f16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b07      	cmp	r3, #7
 8009f12:	d9e7      	bls.n	8009ee4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	24004560 	.word	0x24004560

08009f28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f38:	f7ff fa0e 	bl	8009358 <vPortEnterCritical>
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f42:	b25b      	sxtb	r3, r3
 8009f44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f48:	d103      	bne.n	8009f52 <vQueueWaitForMessageRestricted+0x2a>
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f58:	b25b      	sxtb	r3, r3
 8009f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f5e:	d103      	bne.n	8009f68 <vQueueWaitForMessageRestricted+0x40>
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f68:	f7ff fa28 	bl	80093bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d106      	bne.n	8009f82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	3324      	adds	r3, #36	@ 0x24
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fc45 	bl	800a80c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f82:	6978      	ldr	r0, [r7, #20]
 8009f84:	f7ff ff26 	bl	8009dd4 <prvUnlockQueue>
	}
 8009f88:	bf00      	nop
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08e      	sub	sp, #56	@ 0x38
 8009f94:	af04      	add	r7, sp, #16
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
 8009f9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10b      	bne.n	8009fbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	623b      	str	r3, [r7, #32]
}
 8009fb6:	bf00      	nop
 8009fb8:	bf00      	nop
 8009fba:	e7fd      	b.n	8009fb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10b      	bne.n	8009fda <xTaskCreateStatic+0x4a>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	61fb      	str	r3, [r7, #28]
}
 8009fd4:	bf00      	nop
 8009fd6:	bf00      	nop
 8009fd8:	e7fd      	b.n	8009fd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009fda:	235c      	movs	r3, #92	@ 0x5c
 8009fdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009fe2:	d00b      	beq.n	8009ffc <xTaskCreateStatic+0x6c>
	__asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	61bb      	str	r3, [r7, #24]
}
 8009ff6:	bf00      	nop
 8009ff8:	bf00      	nop
 8009ffa:	e7fd      	b.n	8009ff8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ffc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a000:	2b00      	cmp	r3, #0
 800a002:	d01e      	beq.n	800a042 <xTaskCreateStatic+0xb2>
 800a004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a006:	2b00      	cmp	r3, #0
 800a008:	d01b      	beq.n	800a042 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a010:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a012:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a016:	2202      	movs	r2, #2
 800a018:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a01c:	2300      	movs	r3, #0
 800a01e:	9303      	str	r3, [sp, #12]
 800a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a022:	9302      	str	r3, [sp, #8]
 800a024:	f107 0314 	add.w	r3, r7, #20
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	68b9      	ldr	r1, [r7, #8]
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f000 f850 	bl	800a0da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a03a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a03c:	f000 f8de 	bl	800a1fc <prvAddNewTaskToReadyList>
 800a040:	e001      	b.n	800a046 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a046:	697b      	ldr	r3, [r7, #20]
	}
 800a048:	4618      	mov	r0, r3
 800a04a:	3728      	adds	r7, #40	@ 0x28
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08c      	sub	sp, #48	@ 0x30
 800a054:	af04      	add	r7, sp, #16
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	4613      	mov	r3, r2
 800a05e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a060:	88fb      	ldrh	r3, [r7, #6]
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4618      	mov	r0, r3
 800a066:	f7fe fda7 	bl	8008bb8 <pvPortMalloc>
 800a06a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00e      	beq.n	800a090 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a072:	205c      	movs	r0, #92	@ 0x5c
 800a074:	f7fe fda0 	bl	8008bb8 <pvPortMalloc>
 800a078:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	631a      	str	r2, [r3, #48]	@ 0x30
 800a086:	e005      	b.n	800a094 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a088:	6978      	ldr	r0, [r7, #20]
 800a08a:	f7fe fe63 	bl	8008d54 <vPortFree>
 800a08e:	e001      	b.n	800a094 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a090:	2300      	movs	r3, #0
 800a092:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d017      	beq.n	800a0ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0a2:	88fa      	ldrh	r2, [r7, #6]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	9303      	str	r3, [sp, #12]
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	9302      	str	r3, [sp, #8]
 800a0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	68b9      	ldr	r1, [r7, #8]
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f000 f80e 	bl	800a0da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0be:	69f8      	ldr	r0, [r7, #28]
 800a0c0:	f000 f89c 	bl	800a1fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	61bb      	str	r3, [r7, #24]
 800a0c8:	e002      	b.n	800a0d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
	}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3720      	adds	r7, #32
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b088      	sub	sp, #32
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	60b9      	str	r1, [r7, #8]
 800a0e4:	607a      	str	r2, [r7, #4]
 800a0e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	21a5      	movs	r1, #165	@ 0xa5
 800a0f4:	f001 fb59 	bl	800b7aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a102:	440b      	add	r3, r1
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	f023 0307 	bic.w	r3, r3, #7
 800a110:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	f003 0307 	and.w	r3, r3, #7
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00b      	beq.n	800a134 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	617b      	str	r3, [r7, #20]
}
 800a12e:	bf00      	nop
 800a130:	bf00      	nop
 800a132:	e7fd      	b.n	800a130 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d01f      	beq.n	800a17a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a13a:	2300      	movs	r3, #0
 800a13c:	61fb      	str	r3, [r7, #28]
 800a13e:	e012      	b.n	800a166 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4413      	add	r3, r2
 800a146:	7819      	ldrb	r1, [r3, #0]
 800a148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	4413      	add	r3, r2
 800a14e:	3334      	adds	r3, #52	@ 0x34
 800a150:	460a      	mov	r2, r1
 800a152:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	4413      	add	r3, r2
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d006      	beq.n	800a16e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	3301      	adds	r3, #1
 800a164:	61fb      	str	r3, [r7, #28]
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	2b0f      	cmp	r3, #15
 800a16a:	d9e9      	bls.n	800a140 <prvInitialiseNewTask+0x66>
 800a16c:	e000      	b.n	800a170 <prvInitialiseNewTask+0x96>
			{
				break;
 800a16e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a178:	e003      	b.n	800a182 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a184:	2b37      	cmp	r3, #55	@ 0x37
 800a186:	d901      	bls.n	800a18c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a188:	2337      	movs	r3, #55	@ 0x37
 800a18a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a190:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a196:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19a:	2200      	movs	r2, #0
 800a19c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe ff16 	bl	8008fd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1aa:	3318      	adds	r3, #24
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fe ff11 	bl	8008fd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	68f9      	ldr	r1, [r7, #12]
 800a1da:	69b8      	ldr	r0, [r7, #24]
 800a1dc:	f7fe ff8e 	bl	80090fc <pxPortInitialiseStack>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d002      	beq.n	800a1f2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1f2:	bf00      	nop
 800a1f4:	3720      	adds	r7, #32
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
	...

0800a1fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a204:	f7ff f8a8 	bl	8009358 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a208:	4b2d      	ldr	r3, [pc, #180]	@ (800a2c0 <prvAddNewTaskToReadyList+0xc4>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3301      	adds	r3, #1
 800a20e:	4a2c      	ldr	r2, [pc, #176]	@ (800a2c0 <prvAddNewTaskToReadyList+0xc4>)
 800a210:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a212:	4b2c      	ldr	r3, [pc, #176]	@ (800a2c4 <prvAddNewTaskToReadyList+0xc8>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d109      	bne.n	800a22e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a21a:	4a2a      	ldr	r2, [pc, #168]	@ (800a2c4 <prvAddNewTaskToReadyList+0xc8>)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a220:	4b27      	ldr	r3, [pc, #156]	@ (800a2c0 <prvAddNewTaskToReadyList+0xc4>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d110      	bne.n	800a24a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a228:	f000 fc1e 	bl	800aa68 <prvInitialiseTaskLists>
 800a22c:	e00d      	b.n	800a24a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a22e:	4b26      	ldr	r3, [pc, #152]	@ (800a2c8 <prvAddNewTaskToReadyList+0xcc>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d109      	bne.n	800a24a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a236:	4b23      	ldr	r3, [pc, #140]	@ (800a2c4 <prvAddNewTaskToReadyList+0xc8>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a240:	429a      	cmp	r2, r3
 800a242:	d802      	bhi.n	800a24a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a244:	4a1f      	ldr	r2, [pc, #124]	@ (800a2c4 <prvAddNewTaskToReadyList+0xc8>)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a24a:	4b20      	ldr	r3, [pc, #128]	@ (800a2cc <prvAddNewTaskToReadyList+0xd0>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3301      	adds	r3, #1
 800a250:	4a1e      	ldr	r2, [pc, #120]	@ (800a2cc <prvAddNewTaskToReadyList+0xd0>)
 800a252:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a254:	4b1d      	ldr	r3, [pc, #116]	@ (800a2cc <prvAddNewTaskToReadyList+0xd0>)
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a260:	4b1b      	ldr	r3, [pc, #108]	@ (800a2d0 <prvAddNewTaskToReadyList+0xd4>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	429a      	cmp	r2, r3
 800a266:	d903      	bls.n	800a270 <prvAddNewTaskToReadyList+0x74>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26c:	4a18      	ldr	r2, [pc, #96]	@ (800a2d0 <prvAddNewTaskToReadyList+0xd4>)
 800a26e:	6013      	str	r3, [r2, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a274:	4613      	mov	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4413      	add	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4a15      	ldr	r2, [pc, #84]	@ (800a2d4 <prvAddNewTaskToReadyList+0xd8>)
 800a27e:	441a      	add	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3304      	adds	r3, #4
 800a284:	4619      	mov	r1, r3
 800a286:	4610      	mov	r0, r2
 800a288:	f7fe feb1 	bl	8008fee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a28c:	f7ff f896 	bl	80093bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a290:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c8 <prvAddNewTaskToReadyList+0xcc>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00e      	beq.n	800a2b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a298:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c4 <prvAddNewTaskToReadyList+0xc8>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d207      	bcs.n	800a2b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d8 <prvAddNewTaskToReadyList+0xdc>)
 800a2a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	24004a74 	.word	0x24004a74
 800a2c4:	240045a0 	.word	0x240045a0
 800a2c8:	24004a80 	.word	0x24004a80
 800a2cc:	24004a90 	.word	0x24004a90
 800a2d0:	24004a7c 	.word	0x24004a7c
 800a2d4:	240045a4 	.word	0x240045a4
 800a2d8:	e000ed04 	.word	0xe000ed04

0800a2dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d018      	beq.n	800a320 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a2ee:	4b14      	ldr	r3, [pc, #80]	@ (800a340 <vTaskDelay+0x64>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00b      	beq.n	800a30e <vTaskDelay+0x32>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	60bb      	str	r3, [r7, #8]
}
 800a308:	bf00      	nop
 800a30a:	bf00      	nop
 800a30c:	e7fd      	b.n	800a30a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a30e:	f000 f883 	bl	800a418 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a312:	2100      	movs	r1, #0
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fcf3 	bl	800ad00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a31a:	f000 f88b 	bl	800a434 <xTaskResumeAll>
 800a31e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d107      	bne.n	800a336 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a326:	4b07      	ldr	r3, [pc, #28]	@ (800a344 <vTaskDelay+0x68>)
 800a328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a336:	bf00      	nop
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	24004a9c 	.word	0x24004a9c
 800a344:	e000ed04 	.word	0xe000ed04

0800a348 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08a      	sub	sp, #40	@ 0x28
 800a34c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a352:	2300      	movs	r3, #0
 800a354:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a356:	463a      	mov	r2, r7
 800a358:	1d39      	adds	r1, r7, #4
 800a35a:	f107 0308 	add.w	r3, r7, #8
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe fbf6 	bl	8008b50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	9202      	str	r2, [sp, #8]
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	2300      	movs	r3, #0
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	2300      	movs	r3, #0
 800a374:	460a      	mov	r2, r1
 800a376:	4922      	ldr	r1, [pc, #136]	@ (800a400 <vTaskStartScheduler+0xb8>)
 800a378:	4822      	ldr	r0, [pc, #136]	@ (800a404 <vTaskStartScheduler+0xbc>)
 800a37a:	f7ff fe09 	bl	8009f90 <xTaskCreateStatic>
 800a37e:	4603      	mov	r3, r0
 800a380:	4a21      	ldr	r2, [pc, #132]	@ (800a408 <vTaskStartScheduler+0xc0>)
 800a382:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a384:	4b20      	ldr	r3, [pc, #128]	@ (800a408 <vTaskStartScheduler+0xc0>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a38c:	2301      	movs	r3, #1
 800a38e:	617b      	str	r3, [r7, #20]
 800a390:	e001      	b.n	800a396 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a392:	2300      	movs	r3, #0
 800a394:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d102      	bne.n	800a3a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a39c:	f000 fd04 	bl	800ada8 <xTimerCreateTimerTask>
 800a3a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d116      	bne.n	800a3d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	613b      	str	r3, [r7, #16]
}
 800a3ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3bc:	4b13      	ldr	r3, [pc, #76]	@ (800a40c <vTaskStartScheduler+0xc4>)
 800a3be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3c4:	4b12      	ldr	r3, [pc, #72]	@ (800a410 <vTaskStartScheduler+0xc8>)
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3ca:	4b12      	ldr	r3, [pc, #72]	@ (800a414 <vTaskStartScheduler+0xcc>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3d0:	f7fe ff1e 	bl	8009210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3d4:	e00f      	b.n	800a3f6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3dc:	d10b      	bne.n	800a3f6 <vTaskStartScheduler+0xae>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	60fb      	str	r3, [r7, #12]
}
 800a3f0:	bf00      	nop
 800a3f2:	bf00      	nop
 800a3f4:	e7fd      	b.n	800a3f2 <vTaskStartScheduler+0xaa>
}
 800a3f6:	bf00      	nop
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	0800c444 	.word	0x0800c444
 800a404:	0800aa39 	.word	0x0800aa39
 800a408:	24004a98 	.word	0x24004a98
 800a40c:	24004a94 	.word	0x24004a94
 800a410:	24004a80 	.word	0x24004a80
 800a414:	24004a78 	.word	0x24004a78

0800a418 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a418:	b480      	push	{r7}
 800a41a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a41c:	4b04      	ldr	r3, [pc, #16]	@ (800a430 <vTaskSuspendAll+0x18>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3301      	adds	r3, #1
 800a422:	4a03      	ldr	r2, [pc, #12]	@ (800a430 <vTaskSuspendAll+0x18>)
 800a424:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a426:	bf00      	nop
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	24004a9c 	.word	0x24004a9c

0800a434 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a43e:	2300      	movs	r3, #0
 800a440:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a442:	4b42      	ldr	r3, [pc, #264]	@ (800a54c <xTaskResumeAll+0x118>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10b      	bne.n	800a462 <xTaskResumeAll+0x2e>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	603b      	str	r3, [r7, #0]
}
 800a45c:	bf00      	nop
 800a45e:	bf00      	nop
 800a460:	e7fd      	b.n	800a45e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a462:	f7fe ff79 	bl	8009358 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a466:	4b39      	ldr	r3, [pc, #228]	@ (800a54c <xTaskResumeAll+0x118>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	4a37      	ldr	r2, [pc, #220]	@ (800a54c <xTaskResumeAll+0x118>)
 800a46e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a470:	4b36      	ldr	r3, [pc, #216]	@ (800a54c <xTaskResumeAll+0x118>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d162      	bne.n	800a53e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a478:	4b35      	ldr	r3, [pc, #212]	@ (800a550 <xTaskResumeAll+0x11c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d05e      	beq.n	800a53e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a480:	e02f      	b.n	800a4e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a482:	4b34      	ldr	r3, [pc, #208]	@ (800a554 <xTaskResumeAll+0x120>)
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3318      	adds	r3, #24
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe fe0a 	bl	80090a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3304      	adds	r3, #4
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fe05 	bl	80090a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4a2:	4b2d      	ldr	r3, [pc, #180]	@ (800a558 <xTaskResumeAll+0x124>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d903      	bls.n	800a4b2 <xTaskResumeAll+0x7e>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a558 <xTaskResumeAll+0x124>)
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4413      	add	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4a27      	ldr	r2, [pc, #156]	@ (800a55c <xTaskResumeAll+0x128>)
 800a4c0:	441a      	add	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	f7fe fd90 	bl	8008fee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4d2:	4b23      	ldr	r3, [pc, #140]	@ (800a560 <xTaskResumeAll+0x12c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d302      	bcc.n	800a4e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a4dc:	4b21      	ldr	r3, [pc, #132]	@ (800a564 <xTaskResumeAll+0x130>)
 800a4de:	2201      	movs	r2, #1
 800a4e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4e2:	4b1c      	ldr	r3, [pc, #112]	@ (800a554 <xTaskResumeAll+0x120>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1cb      	bne.n	800a482 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4f0:	f000 fb58 	bl	800aba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a4f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a568 <xTaskResumeAll+0x134>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d010      	beq.n	800a522 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a500:	f000 f846 	bl	800a590 <xTaskIncrementTick>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d002      	beq.n	800a510 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a50a:	4b16      	ldr	r3, [pc, #88]	@ (800a564 <xTaskResumeAll+0x130>)
 800a50c:	2201      	movs	r2, #1
 800a50e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3b01      	subs	r3, #1
 800a514:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1f1      	bne.n	800a500 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a51c:	4b12      	ldr	r3, [pc, #72]	@ (800a568 <xTaskResumeAll+0x134>)
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a522:	4b10      	ldr	r3, [pc, #64]	@ (800a564 <xTaskResumeAll+0x130>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d009      	beq.n	800a53e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a52a:	2301      	movs	r3, #1
 800a52c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a52e:	4b0f      	ldr	r3, [pc, #60]	@ (800a56c <xTaskResumeAll+0x138>)
 800a530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a53e:	f7fe ff3d 	bl	80093bc <vPortExitCritical>

	return xAlreadyYielded;
 800a542:	68bb      	ldr	r3, [r7, #8]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	24004a9c 	.word	0x24004a9c
 800a550:	24004a74 	.word	0x24004a74
 800a554:	24004a34 	.word	0x24004a34
 800a558:	24004a7c 	.word	0x24004a7c
 800a55c:	240045a4 	.word	0x240045a4
 800a560:	240045a0 	.word	0x240045a0
 800a564:	24004a88 	.word	0x24004a88
 800a568:	24004a84 	.word	0x24004a84
 800a56c:	e000ed04 	.word	0xe000ed04

0800a570 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a576:	4b05      	ldr	r3, [pc, #20]	@ (800a58c <xTaskGetTickCount+0x1c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a57c:	687b      	ldr	r3, [r7, #4]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	370c      	adds	r7, #12
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	24004a78 	.word	0x24004a78

0800a590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a596:	2300      	movs	r3, #0
 800a598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a59a:	4b4f      	ldr	r3, [pc, #316]	@ (800a6d8 <xTaskIncrementTick+0x148>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f040 8090 	bne.w	800a6c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5a4:	4b4d      	ldr	r3, [pc, #308]	@ (800a6dc <xTaskIncrementTick+0x14c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5ac:	4a4b      	ldr	r2, [pc, #300]	@ (800a6dc <xTaskIncrementTick+0x14c>)
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d121      	bne.n	800a5fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5b8:	4b49      	ldr	r3, [pc, #292]	@ (800a6e0 <xTaskIncrementTick+0x150>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00b      	beq.n	800a5da <xTaskIncrementTick+0x4a>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	603b      	str	r3, [r7, #0]
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop
 800a5d8:	e7fd      	b.n	800a5d6 <xTaskIncrementTick+0x46>
 800a5da:	4b41      	ldr	r3, [pc, #260]	@ (800a6e0 <xTaskIncrementTick+0x150>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	4b40      	ldr	r3, [pc, #256]	@ (800a6e4 <xTaskIncrementTick+0x154>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a3e      	ldr	r2, [pc, #248]	@ (800a6e0 <xTaskIncrementTick+0x150>)
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	4a3e      	ldr	r2, [pc, #248]	@ (800a6e4 <xTaskIncrementTick+0x154>)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	4b3e      	ldr	r3, [pc, #248]	@ (800a6e8 <xTaskIncrementTick+0x158>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	4a3c      	ldr	r2, [pc, #240]	@ (800a6e8 <xTaskIncrementTick+0x158>)
 800a5f6:	6013      	str	r3, [r2, #0]
 800a5f8:	f000 fad4 	bl	800aba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a5fc:	4b3b      	ldr	r3, [pc, #236]	@ (800a6ec <xTaskIncrementTick+0x15c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	429a      	cmp	r2, r3
 800a604:	d349      	bcc.n	800a69a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a606:	4b36      	ldr	r3, [pc, #216]	@ (800a6e0 <xTaskIncrementTick+0x150>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d104      	bne.n	800a61a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a610:	4b36      	ldr	r3, [pc, #216]	@ (800a6ec <xTaskIncrementTick+0x15c>)
 800a612:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a616:	601a      	str	r2, [r3, #0]
					break;
 800a618:	e03f      	b.n	800a69a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a61a:	4b31      	ldr	r3, [pc, #196]	@ (800a6e0 <xTaskIncrementTick+0x150>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a62a:	693a      	ldr	r2, [r7, #16]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d203      	bcs.n	800a63a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a632:	4a2e      	ldr	r2, [pc, #184]	@ (800a6ec <xTaskIncrementTick+0x15c>)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a638:	e02f      	b.n	800a69a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	3304      	adds	r3, #4
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe fd32 	bl	80090a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d004      	beq.n	800a656 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	3318      	adds	r3, #24
 800a650:	4618      	mov	r0, r3
 800a652:	f7fe fd29 	bl	80090a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a65a:	4b25      	ldr	r3, [pc, #148]	@ (800a6f0 <xTaskIncrementTick+0x160>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d903      	bls.n	800a66a <xTaskIncrementTick+0xda>
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a666:	4a22      	ldr	r2, [pc, #136]	@ (800a6f0 <xTaskIncrementTick+0x160>)
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66e:	4613      	mov	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4a1f      	ldr	r2, [pc, #124]	@ (800a6f4 <xTaskIncrementTick+0x164>)
 800a678:	441a      	add	r2, r3
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	3304      	adds	r3, #4
 800a67e:	4619      	mov	r1, r3
 800a680:	4610      	mov	r0, r2
 800a682:	f7fe fcb4 	bl	8008fee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a68a:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f8 <xTaskIncrementTick+0x168>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a690:	429a      	cmp	r2, r3
 800a692:	d3b8      	bcc.n	800a606 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a694:	2301      	movs	r3, #1
 800a696:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a698:	e7b5      	b.n	800a606 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a69a:	4b17      	ldr	r3, [pc, #92]	@ (800a6f8 <xTaskIncrementTick+0x168>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6a0:	4914      	ldr	r1, [pc, #80]	@ (800a6f4 <xTaskIncrementTick+0x164>)
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	440b      	add	r3, r1
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d901      	bls.n	800a6b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a6b6:	4b11      	ldr	r3, [pc, #68]	@ (800a6fc <xTaskIncrementTick+0x16c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d007      	beq.n	800a6ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	617b      	str	r3, [r7, #20]
 800a6c2:	e004      	b.n	800a6ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a6c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a700 <xTaskIncrementTick+0x170>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	4a0d      	ldr	r2, [pc, #52]	@ (800a700 <xTaskIncrementTick+0x170>)
 800a6cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a6ce:	697b      	ldr	r3, [r7, #20]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3718      	adds	r7, #24
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	24004a9c 	.word	0x24004a9c
 800a6dc:	24004a78 	.word	0x24004a78
 800a6e0:	24004a2c 	.word	0x24004a2c
 800a6e4:	24004a30 	.word	0x24004a30
 800a6e8:	24004a8c 	.word	0x24004a8c
 800a6ec:	24004a94 	.word	0x24004a94
 800a6f0:	24004a7c 	.word	0x24004a7c
 800a6f4:	240045a4 	.word	0x240045a4
 800a6f8:	240045a0 	.word	0x240045a0
 800a6fc:	24004a88 	.word	0x24004a88
 800a700:	24004a84 	.word	0x24004a84

0800a704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a70a:	4b28      	ldr	r3, [pc, #160]	@ (800a7ac <vTaskSwitchContext+0xa8>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a712:	4b27      	ldr	r3, [pc, #156]	@ (800a7b0 <vTaskSwitchContext+0xac>)
 800a714:	2201      	movs	r2, #1
 800a716:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a718:	e042      	b.n	800a7a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a71a:	4b25      	ldr	r3, [pc, #148]	@ (800a7b0 <vTaskSwitchContext+0xac>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a720:	4b24      	ldr	r3, [pc, #144]	@ (800a7b4 <vTaskSwitchContext+0xb0>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	60fb      	str	r3, [r7, #12]
 800a726:	e011      	b.n	800a74c <vTaskSwitchContext+0x48>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10b      	bne.n	800a746 <vTaskSwitchContext+0x42>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	607b      	str	r3, [r7, #4]
}
 800a740:	bf00      	nop
 800a742:	bf00      	nop
 800a744:	e7fd      	b.n	800a742 <vTaskSwitchContext+0x3e>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3b01      	subs	r3, #1
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	491a      	ldr	r1, [pc, #104]	@ (800a7b8 <vTaskSwitchContext+0xb4>)
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4613      	mov	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	440b      	add	r3, r1
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d0e3      	beq.n	800a728 <vTaskSwitchContext+0x24>
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	4613      	mov	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4a13      	ldr	r2, [pc, #76]	@ (800a7b8 <vTaskSwitchContext+0xb4>)
 800a76c:	4413      	add	r3, r2
 800a76e:	60bb      	str	r3, [r7, #8]
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	605a      	str	r2, [r3, #4]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	3308      	adds	r3, #8
 800a782:	429a      	cmp	r2, r3
 800a784:	d104      	bne.n	800a790 <vTaskSwitchContext+0x8c>
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	605a      	str	r2, [r3, #4]
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	4a09      	ldr	r2, [pc, #36]	@ (800a7bc <vTaskSwitchContext+0xb8>)
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	4a06      	ldr	r2, [pc, #24]	@ (800a7b4 <vTaskSwitchContext+0xb0>)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6013      	str	r3, [r2, #0]
}
 800a7a0:	bf00      	nop
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	24004a9c 	.word	0x24004a9c
 800a7b0:	24004a88 	.word	0x24004a88
 800a7b4:	24004a7c 	.word	0x24004a7c
 800a7b8:	240045a4 	.word	0x240045a4
 800a7bc:	240045a0 	.word	0x240045a0

0800a7c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10b      	bne.n	800a7e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	60fb      	str	r3, [r7, #12]
}
 800a7e2:	bf00      	nop
 800a7e4:	bf00      	nop
 800a7e6:	e7fd      	b.n	800a7e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7e8:	4b07      	ldr	r3, [pc, #28]	@ (800a808 <vTaskPlaceOnEventList+0x48>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3318      	adds	r3, #24
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7fe fc20 	bl	8009036 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	6838      	ldr	r0, [r7, #0]
 800a7fa:	f000 fa81 	bl	800ad00 <prvAddCurrentTaskToDelayedList>
}
 800a7fe:	bf00      	nop
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	240045a0 	.word	0x240045a0

0800a80c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10b      	bne.n	800a836 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	617b      	str	r3, [r7, #20]
}
 800a830:	bf00      	nop
 800a832:	bf00      	nop
 800a834:	e7fd      	b.n	800a832 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a836:	4b0a      	ldr	r3, [pc, #40]	@ (800a860 <vTaskPlaceOnEventListRestricted+0x54>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3318      	adds	r3, #24
 800a83c:	4619      	mov	r1, r3
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f7fe fbd5 	bl	8008fee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a84a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a84e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	68b8      	ldr	r0, [r7, #8]
 800a854:	f000 fa54 	bl	800ad00 <prvAddCurrentTaskToDelayedList>
	}
 800a858:	bf00      	nop
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	240045a0 	.word	0x240045a0

0800a864 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b086      	sub	sp, #24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10b      	bne.n	800a892 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	60fb      	str	r3, [r7, #12]
}
 800a88c:	bf00      	nop
 800a88e:	bf00      	nop
 800a890:	e7fd      	b.n	800a88e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	3318      	adds	r3, #24
 800a896:	4618      	mov	r0, r3
 800a898:	f7fe fc06 	bl	80090a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a89c:	4b1d      	ldr	r3, [pc, #116]	@ (800a914 <xTaskRemoveFromEventList+0xb0>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d11d      	bne.n	800a8e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7fe fbfd 	bl	80090a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8b2:	4b19      	ldr	r3, [pc, #100]	@ (800a918 <xTaskRemoveFromEventList+0xb4>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d903      	bls.n	800a8c2 <xTaskRemoveFromEventList+0x5e>
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8be:	4a16      	ldr	r2, [pc, #88]	@ (800a918 <xTaskRemoveFromEventList+0xb4>)
 800a8c0:	6013      	str	r3, [r2, #0]
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4a13      	ldr	r2, [pc, #76]	@ (800a91c <xTaskRemoveFromEventList+0xb8>)
 800a8d0:	441a      	add	r2, r3
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4610      	mov	r0, r2
 800a8da:	f7fe fb88 	bl	8008fee <vListInsertEnd>
 800a8de:	e005      	b.n	800a8ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	3318      	adds	r3, #24
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	480e      	ldr	r0, [pc, #56]	@ (800a920 <xTaskRemoveFromEventList+0xbc>)
 800a8e8:	f7fe fb81 	bl	8008fee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a924 <xTaskRemoveFromEventList+0xc0>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d905      	bls.n	800a906 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a8fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a928 <xTaskRemoveFromEventList+0xc4>)
 800a900:	2201      	movs	r2, #1
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	e001      	b.n	800a90a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a906:	2300      	movs	r3, #0
 800a908:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a90a:	697b      	ldr	r3, [r7, #20]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	24004a9c 	.word	0x24004a9c
 800a918:	24004a7c 	.word	0x24004a7c
 800a91c:	240045a4 	.word	0x240045a4
 800a920:	24004a34 	.word	0x24004a34
 800a924:	240045a0 	.word	0x240045a0
 800a928:	24004a88 	.word	0x24004a88

0800a92c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a934:	4b06      	ldr	r3, [pc, #24]	@ (800a950 <vTaskInternalSetTimeOutState+0x24>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a93c:	4b05      	ldr	r3, [pc, #20]	@ (800a954 <vTaskInternalSetTimeOutState+0x28>)
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	605a      	str	r2, [r3, #4]
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	24004a8c 	.word	0x24004a8c
 800a954:	24004a78 	.word	0x24004a78

0800a958 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b088      	sub	sp, #32
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10b      	bne.n	800a980 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96c:	f383 8811 	msr	BASEPRI, r3
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	613b      	str	r3, [r7, #16]
}
 800a97a:	bf00      	nop
 800a97c:	bf00      	nop
 800a97e:	e7fd      	b.n	800a97c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10b      	bne.n	800a99e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	60fb      	str	r3, [r7, #12]
}
 800a998:	bf00      	nop
 800a99a:	bf00      	nop
 800a99c:	e7fd      	b.n	800a99a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a99e:	f7fe fcdb 	bl	8009358 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9a2:	4b1d      	ldr	r3, [pc, #116]	@ (800aa18 <xTaskCheckForTimeOut+0xc0>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	69ba      	ldr	r2, [r7, #24]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9ba:	d102      	bne.n	800a9c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	61fb      	str	r3, [r7, #28]
 800a9c0:	e023      	b.n	800aa0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	4b15      	ldr	r3, [pc, #84]	@ (800aa1c <xTaskCheckForTimeOut+0xc4>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d007      	beq.n	800a9de <xTaskCheckForTimeOut+0x86>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	69ba      	ldr	r2, [r7, #24]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d302      	bcc.n	800a9de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	61fb      	str	r3, [r7, #28]
 800a9dc:	e015      	b.n	800aa0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d20b      	bcs.n	800aa00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	1ad2      	subs	r2, r2, r3
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff ff99 	bl	800a92c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	61fb      	str	r3, [r7, #28]
 800a9fe:	e004      	b.n	800aa0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2200      	movs	r2, #0
 800aa04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa06:	2301      	movs	r3, #1
 800aa08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa0a:	f7fe fcd7 	bl	80093bc <vPortExitCritical>

	return xReturn;
 800aa0e:	69fb      	ldr	r3, [r7, #28]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3720      	adds	r7, #32
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	24004a78 	.word	0x24004a78
 800aa1c:	24004a8c 	.word	0x24004a8c

0800aa20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa24:	4b03      	ldr	r3, [pc, #12]	@ (800aa34 <vTaskMissedYield+0x14>)
 800aa26:	2201      	movs	r2, #1
 800aa28:	601a      	str	r2, [r3, #0]
}
 800aa2a:	bf00      	nop
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	24004a88 	.word	0x24004a88

0800aa38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa40:	f000 f852 	bl	800aae8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa44:	4b06      	ldr	r3, [pc, #24]	@ (800aa60 <prvIdleTask+0x28>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d9f9      	bls.n	800aa40 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa4c:	4b05      	ldr	r3, [pc, #20]	@ (800aa64 <prvIdleTask+0x2c>)
 800aa4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa5c:	e7f0      	b.n	800aa40 <prvIdleTask+0x8>
 800aa5e:	bf00      	nop
 800aa60:	240045a4 	.word	0x240045a4
 800aa64:	e000ed04 	.word	0xe000ed04

0800aa68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa6e:	2300      	movs	r3, #0
 800aa70:	607b      	str	r3, [r7, #4]
 800aa72:	e00c      	b.n	800aa8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	4613      	mov	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4a12      	ldr	r2, [pc, #72]	@ (800aac8 <prvInitialiseTaskLists+0x60>)
 800aa80:	4413      	add	r3, r2
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fe fa86 	bl	8008f94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	607b      	str	r3, [r7, #4]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b37      	cmp	r3, #55	@ 0x37
 800aa92:	d9ef      	bls.n	800aa74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa94:	480d      	ldr	r0, [pc, #52]	@ (800aacc <prvInitialiseTaskLists+0x64>)
 800aa96:	f7fe fa7d 	bl	8008f94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa9a:	480d      	ldr	r0, [pc, #52]	@ (800aad0 <prvInitialiseTaskLists+0x68>)
 800aa9c:	f7fe fa7a 	bl	8008f94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aaa0:	480c      	ldr	r0, [pc, #48]	@ (800aad4 <prvInitialiseTaskLists+0x6c>)
 800aaa2:	f7fe fa77 	bl	8008f94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aaa6:	480c      	ldr	r0, [pc, #48]	@ (800aad8 <prvInitialiseTaskLists+0x70>)
 800aaa8:	f7fe fa74 	bl	8008f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aaac:	480b      	ldr	r0, [pc, #44]	@ (800aadc <prvInitialiseTaskLists+0x74>)
 800aaae:	f7fe fa71 	bl	8008f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aab2:	4b0b      	ldr	r3, [pc, #44]	@ (800aae0 <prvInitialiseTaskLists+0x78>)
 800aab4:	4a05      	ldr	r2, [pc, #20]	@ (800aacc <prvInitialiseTaskLists+0x64>)
 800aab6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aab8:	4b0a      	ldr	r3, [pc, #40]	@ (800aae4 <prvInitialiseTaskLists+0x7c>)
 800aaba:	4a05      	ldr	r2, [pc, #20]	@ (800aad0 <prvInitialiseTaskLists+0x68>)
 800aabc:	601a      	str	r2, [r3, #0]
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	240045a4 	.word	0x240045a4
 800aacc:	24004a04 	.word	0x24004a04
 800aad0:	24004a18 	.word	0x24004a18
 800aad4:	24004a34 	.word	0x24004a34
 800aad8:	24004a48 	.word	0x24004a48
 800aadc:	24004a60 	.word	0x24004a60
 800aae0:	24004a2c 	.word	0x24004a2c
 800aae4:	24004a30 	.word	0x24004a30

0800aae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaee:	e019      	b.n	800ab24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aaf0:	f7fe fc32 	bl	8009358 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf4:	4b10      	ldr	r3, [pc, #64]	@ (800ab38 <prvCheckTasksWaitingTermination+0x50>)
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	3304      	adds	r3, #4
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fe fad1 	bl	80090a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab06:	4b0d      	ldr	r3, [pc, #52]	@ (800ab3c <prvCheckTasksWaitingTermination+0x54>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	4a0b      	ldr	r2, [pc, #44]	@ (800ab3c <prvCheckTasksWaitingTermination+0x54>)
 800ab0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab10:	4b0b      	ldr	r3, [pc, #44]	@ (800ab40 <prvCheckTasksWaitingTermination+0x58>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3b01      	subs	r3, #1
 800ab16:	4a0a      	ldr	r2, [pc, #40]	@ (800ab40 <prvCheckTasksWaitingTermination+0x58>)
 800ab18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab1a:	f7fe fc4f 	bl	80093bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f810 	bl	800ab44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab24:	4b06      	ldr	r3, [pc, #24]	@ (800ab40 <prvCheckTasksWaitingTermination+0x58>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e1      	bne.n	800aaf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	24004a48 	.word	0x24004a48
 800ab3c:	24004a74 	.word	0x24004a74
 800ab40:	24004a5c 	.word	0x24004a5c

0800ab44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d108      	bne.n	800ab68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe f8fa 	bl	8008d54 <vPortFree>
				vPortFree( pxTCB );
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7fe f8f7 	bl	8008d54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab66:	e019      	b.n	800ab9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d103      	bne.n	800ab7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7fe f8ee 	bl	8008d54 <vPortFree>
	}
 800ab78:	e010      	b.n	800ab9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d00b      	beq.n	800ab9c <prvDeleteTCB+0x58>
	__asm volatile
 800ab84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	60fb      	str	r3, [r7, #12]
}
 800ab96:	bf00      	nop
 800ab98:	bf00      	nop
 800ab9a:	e7fd      	b.n	800ab98 <prvDeleteTCB+0x54>
	}
 800ab9c:	bf00      	nop
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abaa:	4b0c      	ldr	r3, [pc, #48]	@ (800abdc <prvResetNextTaskUnblockTime+0x38>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d104      	bne.n	800abbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800abb4:	4b0a      	ldr	r3, [pc, #40]	@ (800abe0 <prvResetNextTaskUnblockTime+0x3c>)
 800abb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800abbc:	e008      	b.n	800abd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abbe:	4b07      	ldr	r3, [pc, #28]	@ (800abdc <prvResetNextTaskUnblockTime+0x38>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	4a04      	ldr	r2, [pc, #16]	@ (800abe0 <prvResetNextTaskUnblockTime+0x3c>)
 800abce:	6013      	str	r3, [r2, #0]
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	24004a2c 	.word	0x24004a2c
 800abe0:	24004a94 	.word	0x24004a94

0800abe4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abea:	4b0b      	ldr	r3, [pc, #44]	@ (800ac18 <xTaskGetSchedulerState+0x34>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d102      	bne.n	800abf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abf2:	2301      	movs	r3, #1
 800abf4:	607b      	str	r3, [r7, #4]
 800abf6:	e008      	b.n	800ac0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abf8:	4b08      	ldr	r3, [pc, #32]	@ (800ac1c <xTaskGetSchedulerState+0x38>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d102      	bne.n	800ac06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac00:	2302      	movs	r3, #2
 800ac02:	607b      	str	r3, [r7, #4]
 800ac04:	e001      	b.n	800ac0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac06:	2300      	movs	r3, #0
 800ac08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac0a:	687b      	ldr	r3, [r7, #4]
	}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	24004a80 	.word	0x24004a80
 800ac1c:	24004a9c 	.word	0x24004a9c

0800ac20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d058      	beq.n	800ace8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac36:	4b2f      	ldr	r3, [pc, #188]	@ (800acf4 <xTaskPriorityDisinherit+0xd4>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d00b      	beq.n	800ac58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	60fb      	str	r3, [r7, #12]
}
 800ac52:	bf00      	nop
 800ac54:	bf00      	nop
 800ac56:	e7fd      	b.n	800ac54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10b      	bne.n	800ac78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	60bb      	str	r3, [r7, #8]
}
 800ac72:	bf00      	nop
 800ac74:	bf00      	nop
 800ac76:	e7fd      	b.n	800ac74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac7c:	1e5a      	subs	r2, r3, #1
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d02c      	beq.n	800ace8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d128      	bne.n	800ace8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	3304      	adds	r3, #4
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe fa04 	bl	80090a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acb8:	4b0f      	ldr	r3, [pc, #60]	@ (800acf8 <xTaskPriorityDisinherit+0xd8>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d903      	bls.n	800acc8 <xTaskPriorityDisinherit+0xa8>
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc4:	4a0c      	ldr	r2, [pc, #48]	@ (800acf8 <xTaskPriorityDisinherit+0xd8>)
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800accc:	4613      	mov	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4a09      	ldr	r2, [pc, #36]	@ (800acfc <xTaskPriorityDisinherit+0xdc>)
 800acd6:	441a      	add	r2, r3
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	3304      	adds	r3, #4
 800acdc:	4619      	mov	r1, r3
 800acde:	4610      	mov	r0, r2
 800ace0:	f7fe f985 	bl	8008fee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ace4:	2301      	movs	r3, #1
 800ace6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ace8:	697b      	ldr	r3, [r7, #20]
	}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	240045a0 	.word	0x240045a0
 800acf8:	24004a7c 	.word	0x24004a7c
 800acfc:	240045a4 	.word	0x240045a4

0800ad00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad0a:	4b21      	ldr	r3, [pc, #132]	@ (800ad90 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad10:	4b20      	ldr	r3, [pc, #128]	@ (800ad94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3304      	adds	r3, #4
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe f9c6 	bl	80090a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad22:	d10a      	bne.n	800ad3a <prvAddCurrentTaskToDelayedList+0x3a>
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d007      	beq.n	800ad3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad2a:	4b1a      	ldr	r3, [pc, #104]	@ (800ad94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	4619      	mov	r1, r3
 800ad32:	4819      	ldr	r0, [pc, #100]	@ (800ad98 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad34:	f7fe f95b 	bl	8008fee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad38:	e026      	b.n	800ad88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4413      	add	r3, r2
 800ad40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad42:	4b14      	ldr	r3, [pc, #80]	@ (800ad94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d209      	bcs.n	800ad66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad52:	4b12      	ldr	r3, [pc, #72]	@ (800ad9c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	4b0f      	ldr	r3, [pc, #60]	@ (800ad94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3304      	adds	r3, #4
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	4610      	mov	r0, r2
 800ad60:	f7fe f969 	bl	8009036 <vListInsert>
}
 800ad64:	e010      	b.n	800ad88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad66:	4b0e      	ldr	r3, [pc, #56]	@ (800ada0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad94 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3304      	adds	r3, #4
 800ad70:	4619      	mov	r1, r3
 800ad72:	4610      	mov	r0, r2
 800ad74:	f7fe f95f 	bl	8009036 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad78:	4b0a      	ldr	r3, [pc, #40]	@ (800ada4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d202      	bcs.n	800ad88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad82:	4a08      	ldr	r2, [pc, #32]	@ (800ada4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	6013      	str	r3, [r2, #0]
}
 800ad88:	bf00      	nop
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	24004a78 	.word	0x24004a78
 800ad94:	240045a0 	.word	0x240045a0
 800ad98:	24004a60 	.word	0x24004a60
 800ad9c:	24004a30 	.word	0x24004a30
 800ada0:	24004a2c 	.word	0x24004a2c
 800ada4:	24004a94 	.word	0x24004a94

0800ada8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08a      	sub	sp, #40	@ 0x28
 800adac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800adae:	2300      	movs	r3, #0
 800adb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adb2:	f000 fb13 	bl	800b3dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adb6:	4b1d      	ldr	r3, [pc, #116]	@ (800ae2c <xTimerCreateTimerTask+0x84>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d021      	beq.n	800ae02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800adc2:	2300      	movs	r3, #0
 800adc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800adc6:	1d3a      	adds	r2, r7, #4
 800adc8:	f107 0108 	add.w	r1, r7, #8
 800adcc:	f107 030c 	add.w	r3, r7, #12
 800add0:	4618      	mov	r0, r3
 800add2:	f7fd fed7 	bl	8008b84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	9202      	str	r2, [sp, #8]
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	2302      	movs	r3, #2
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	2300      	movs	r3, #0
 800ade6:	460a      	mov	r2, r1
 800ade8:	4911      	ldr	r1, [pc, #68]	@ (800ae30 <xTimerCreateTimerTask+0x88>)
 800adea:	4812      	ldr	r0, [pc, #72]	@ (800ae34 <xTimerCreateTimerTask+0x8c>)
 800adec:	f7ff f8d0 	bl	8009f90 <xTaskCreateStatic>
 800adf0:	4603      	mov	r3, r0
 800adf2:	4a11      	ldr	r2, [pc, #68]	@ (800ae38 <xTimerCreateTimerTask+0x90>)
 800adf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800adf6:	4b10      	ldr	r3, [pc, #64]	@ (800ae38 <xTimerCreateTimerTask+0x90>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800adfe:	2301      	movs	r3, #1
 800ae00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10b      	bne.n	800ae20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ae08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0c:	f383 8811 	msr	BASEPRI, r3
 800ae10:	f3bf 8f6f 	isb	sy
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	613b      	str	r3, [r7, #16]
}
 800ae1a:	bf00      	nop
 800ae1c:	bf00      	nop
 800ae1e:	e7fd      	b.n	800ae1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae20:	697b      	ldr	r3, [r7, #20]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	24004ad0 	.word	0x24004ad0
 800ae30:	0800c44c 	.word	0x0800c44c
 800ae34:	0800af75 	.word	0x0800af75
 800ae38:	24004ad4 	.word	0x24004ad4

0800ae3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08a      	sub	sp, #40	@ 0x28
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
 800ae48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10b      	bne.n	800ae6c <xTimerGenericCommand+0x30>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	623b      	str	r3, [r7, #32]
}
 800ae66:	bf00      	nop
 800ae68:	bf00      	nop
 800ae6a:	e7fd      	b.n	800ae68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae6c:	4b19      	ldr	r3, [pc, #100]	@ (800aed4 <xTimerGenericCommand+0x98>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d02a      	beq.n	800aeca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	dc18      	bgt.n	800aeb8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae86:	f7ff fead 	bl	800abe4 <xTaskGetSchedulerState>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d109      	bne.n	800aea4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae90:	4b10      	ldr	r3, [pc, #64]	@ (800aed4 <xTimerGenericCommand+0x98>)
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	f107 0110 	add.w	r1, r7, #16
 800ae98:	2300      	movs	r3, #0
 800ae9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae9c:	f7fe fc88 	bl	80097b0 <xQueueGenericSend>
 800aea0:	6278      	str	r0, [r7, #36]	@ 0x24
 800aea2:	e012      	b.n	800aeca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aea4:	4b0b      	ldr	r3, [pc, #44]	@ (800aed4 <xTimerGenericCommand+0x98>)
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	f107 0110 	add.w	r1, r7, #16
 800aeac:	2300      	movs	r3, #0
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f7fe fc7e 	bl	80097b0 <xQueueGenericSend>
 800aeb4:	6278      	str	r0, [r7, #36]	@ 0x24
 800aeb6:	e008      	b.n	800aeca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aeb8:	4b06      	ldr	r3, [pc, #24]	@ (800aed4 <xTimerGenericCommand+0x98>)
 800aeba:	6818      	ldr	r0, [r3, #0]
 800aebc:	f107 0110 	add.w	r1, r7, #16
 800aec0:	2300      	movs	r3, #0
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	f7fe fd76 	bl	80099b4 <xQueueGenericSendFromISR>
 800aec8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3728      	adds	r7, #40	@ 0x28
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	24004ad0 	.word	0x24004ad0

0800aed8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af02      	add	r7, sp, #8
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aee2:	4b23      	ldr	r3, [pc, #140]	@ (800af70 <prvProcessExpiredTimer+0x98>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	3304      	adds	r3, #4
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fe f8d9 	bl	80090a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	d023      	beq.n	800af4c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	699a      	ldr	r2, [r3, #24]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	18d1      	adds	r1, r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	6978      	ldr	r0, [r7, #20]
 800af12:	f000 f8d5 	bl	800b0c0 <prvInsertTimerInActiveList>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d020      	beq.n	800af5e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af1c:	2300      	movs	r3, #0
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	2300      	movs	r3, #0
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	2100      	movs	r1, #0
 800af26:	6978      	ldr	r0, [r7, #20]
 800af28:	f7ff ff88 	bl	800ae3c <xTimerGenericCommand>
 800af2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d114      	bne.n	800af5e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	60fb      	str	r3, [r7, #12]
}
 800af46:	bf00      	nop
 800af48:	bf00      	nop
 800af4a:	e7fd      	b.n	800af48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af52:	f023 0301 	bic.w	r3, r3, #1
 800af56:	b2da      	uxtb	r2, r3
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	6978      	ldr	r0, [r7, #20]
 800af64:	4798      	blx	r3
}
 800af66:	bf00      	nop
 800af68:	3718      	adds	r7, #24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	24004ac8 	.word	0x24004ac8

0800af74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af7c:	f107 0308 	add.w	r3, r7, #8
 800af80:	4618      	mov	r0, r3
 800af82:	f000 f859 	bl	800b038 <prvGetNextExpireTime>
 800af86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	4619      	mov	r1, r3
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f000 f805 	bl	800af9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af92:	f000 f8d7 	bl	800b144 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af96:	bf00      	nop
 800af98:	e7f0      	b.n	800af7c <prvTimerTask+0x8>
	...

0800af9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afa6:	f7ff fa37 	bl	800a418 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afaa:	f107 0308 	add.w	r3, r7, #8
 800afae:	4618      	mov	r0, r3
 800afb0:	f000 f866 	bl	800b080 <prvSampleTimeNow>
 800afb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d130      	bne.n	800b01e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <prvProcessTimerOrBlockTask+0x3c>
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d806      	bhi.n	800afd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800afca:	f7ff fa33 	bl	800a434 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800afce:	68f9      	ldr	r1, [r7, #12]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7ff ff81 	bl	800aed8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800afd6:	e024      	b.n	800b022 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d008      	beq.n	800aff0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800afde:	4b13      	ldr	r3, [pc, #76]	@ (800b02c <prvProcessTimerOrBlockTask+0x90>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <prvProcessTimerOrBlockTask+0x50>
 800afe8:	2301      	movs	r3, #1
 800afea:	e000      	b.n	800afee <prvProcessTimerOrBlockTask+0x52>
 800afec:	2300      	movs	r3, #0
 800afee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aff0:	4b0f      	ldr	r3, [pc, #60]	@ (800b030 <prvProcessTimerOrBlockTask+0x94>)
 800aff2:	6818      	ldr	r0, [r3, #0]
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	4619      	mov	r1, r3
 800affe:	f7fe ff93 	bl	8009f28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b002:	f7ff fa17 	bl	800a434 <xTaskResumeAll>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10a      	bne.n	800b022 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b00c:	4b09      	ldr	r3, [pc, #36]	@ (800b034 <prvProcessTimerOrBlockTask+0x98>)
 800b00e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	f3bf 8f6f 	isb	sy
}
 800b01c:	e001      	b.n	800b022 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b01e:	f7ff fa09 	bl	800a434 <xTaskResumeAll>
}
 800b022:	bf00      	nop
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	24004acc 	.word	0x24004acc
 800b030:	24004ad0 	.word	0x24004ad0
 800b034:	e000ed04 	.word	0xe000ed04

0800b038 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b040:	4b0e      	ldr	r3, [pc, #56]	@ (800b07c <prvGetNextExpireTime+0x44>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <prvGetNextExpireTime+0x16>
 800b04a:	2201      	movs	r2, #1
 800b04c:	e000      	b.n	800b050 <prvGetNextExpireTime+0x18>
 800b04e:	2200      	movs	r2, #0
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d105      	bne.n	800b068 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b05c:	4b07      	ldr	r3, [pc, #28]	@ (800b07c <prvGetNextExpireTime+0x44>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	60fb      	str	r3, [r7, #12]
 800b066:	e001      	b.n	800b06c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b06c:	68fb      	ldr	r3, [r7, #12]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	24004ac8 	.word	0x24004ac8

0800b080 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b088:	f7ff fa72 	bl	800a570 <xTaskGetTickCount>
 800b08c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b08e:	4b0b      	ldr	r3, [pc, #44]	@ (800b0bc <prvSampleTimeNow+0x3c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	429a      	cmp	r2, r3
 800b096:	d205      	bcs.n	800b0a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b098:	f000 f93a 	bl	800b310 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	601a      	str	r2, [r3, #0]
 800b0a2:	e002      	b.n	800b0aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0aa:	4a04      	ldr	r2, [pc, #16]	@ (800b0bc <prvSampleTimeNow+0x3c>)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	24004ad8 	.word	0x24004ad8

0800b0c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d812      	bhi.n	800b10c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	1ad2      	subs	r2, r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	699b      	ldr	r3, [r3, #24]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d302      	bcc.n	800b0fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	617b      	str	r3, [r7, #20]
 800b0f8:	e01b      	b.n	800b132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b0fa:	4b10      	ldr	r3, [pc, #64]	@ (800b13c <prvInsertTimerInActiveList+0x7c>)
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3304      	adds	r3, #4
 800b102:	4619      	mov	r1, r3
 800b104:	4610      	mov	r0, r2
 800b106:	f7fd ff96 	bl	8009036 <vListInsert>
 800b10a:	e012      	b.n	800b132 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	429a      	cmp	r2, r3
 800b112:	d206      	bcs.n	800b122 <prvInsertTimerInActiveList+0x62>
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d302      	bcc.n	800b122 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b11c:	2301      	movs	r3, #1
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	e007      	b.n	800b132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b122:	4b07      	ldr	r3, [pc, #28]	@ (800b140 <prvInsertTimerInActiveList+0x80>)
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	3304      	adds	r3, #4
 800b12a:	4619      	mov	r1, r3
 800b12c:	4610      	mov	r0, r2
 800b12e:	f7fd ff82 	bl	8009036 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b132:	697b      	ldr	r3, [r7, #20]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3718      	adds	r7, #24
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	24004acc 	.word	0x24004acc
 800b140:	24004ac8 	.word	0x24004ac8

0800b144 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08e      	sub	sp, #56	@ 0x38
 800b148:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b14a:	e0ce      	b.n	800b2ea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	da19      	bge.n	800b186 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b152:	1d3b      	adds	r3, r7, #4
 800b154:	3304      	adds	r3, #4
 800b156:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10b      	bne.n	800b176 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	61fb      	str	r3, [r7, #28]
}
 800b170:	bf00      	nop
 800b172:	bf00      	nop
 800b174:	e7fd      	b.n	800b172 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b17c:	6850      	ldr	r0, [r2, #4]
 800b17e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b180:	6892      	ldr	r2, [r2, #8]
 800b182:	4611      	mov	r1, r2
 800b184:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f2c0 80ae 	blt.w	800b2ea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b194:	695b      	ldr	r3, [r3, #20]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d004      	beq.n	800b1a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b19c:	3304      	adds	r3, #4
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fd ff82 	bl	80090a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1a4:	463b      	mov	r3, r7
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff ff6a 	bl	800b080 <prvSampleTimeNow>
 800b1ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b09      	cmp	r3, #9
 800b1b2:	f200 8097 	bhi.w	800b2e4 <prvProcessReceivedCommands+0x1a0>
 800b1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1bc <prvProcessReceivedCommands+0x78>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b1e5 	.word	0x0800b1e5
 800b1c0:	0800b1e5 	.word	0x0800b1e5
 800b1c4:	0800b1e5 	.word	0x0800b1e5
 800b1c8:	0800b25b 	.word	0x0800b25b
 800b1cc:	0800b26f 	.word	0x0800b26f
 800b1d0:	0800b2bb 	.word	0x0800b2bb
 800b1d4:	0800b1e5 	.word	0x0800b1e5
 800b1d8:	0800b1e5 	.word	0x0800b1e5
 800b1dc:	0800b25b 	.word	0x0800b25b
 800b1e0:	0800b26f 	.word	0x0800b26f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1ea:	f043 0301 	orr.w	r3, r3, #1
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fa:	699b      	ldr	r3, [r3, #24]
 800b1fc:	18d1      	adds	r1, r2, r3
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b202:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b204:	f7ff ff5c 	bl	800b0c0 <prvInsertTimerInActiveList>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d06c      	beq.n	800b2e8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b210:	6a1b      	ldr	r3, [r3, #32]
 800b212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b214:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b218:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b21c:	f003 0304 	and.w	r3, r3, #4
 800b220:	2b00      	cmp	r3, #0
 800b222:	d061      	beq.n	800b2e8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b228:	699b      	ldr	r3, [r3, #24]
 800b22a:	441a      	add	r2, r3
 800b22c:	2300      	movs	r3, #0
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	2300      	movs	r3, #0
 800b232:	2100      	movs	r1, #0
 800b234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b236:	f7ff fe01 	bl	800ae3c <xTimerGenericCommand>
 800b23a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b23c:	6a3b      	ldr	r3, [r7, #32]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d152      	bne.n	800b2e8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b246:	f383 8811 	msr	BASEPRI, r3
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	61bb      	str	r3, [r7, #24]
}
 800b254:	bf00      	nop
 800b256:	bf00      	nop
 800b258:	e7fd      	b.n	800b256 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b260:	f023 0301 	bic.w	r3, r3, #1
 800b264:	b2da      	uxtb	r2, r3
 800b266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b268:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b26c:	e03d      	b.n	800b2ea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b274:	f043 0301 	orr.w	r3, r3, #1
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b284:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b288:	699b      	ldr	r3, [r3, #24]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10b      	bne.n	800b2a6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	617b      	str	r3, [r7, #20]
}
 800b2a0:	bf00      	nop
 800b2a2:	bf00      	nop
 800b2a4:	e7fd      	b.n	800b2a2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a8:	699a      	ldr	r2, [r3, #24]
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ac:	18d1      	adds	r1, r2, r3
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2b4:	f7ff ff04 	bl	800b0c0 <prvInsertTimerInActiveList>
					break;
 800b2b8:	e017      	b.n	800b2ea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2c0:	f003 0302 	and.w	r3, r3, #2
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d103      	bne.n	800b2d0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b2c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2ca:	f7fd fd43 	bl	8008d54 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2ce:	e00c      	b.n	800b2ea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2d6:	f023 0301 	bic.w	r3, r3, #1
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b2e2:	e002      	b.n	800b2ea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b2e4:	bf00      	nop
 800b2e6:	e000      	b.n	800b2ea <prvProcessReceivedCommands+0x1a6>
					break;
 800b2e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2ea:	4b08      	ldr	r3, [pc, #32]	@ (800b30c <prvProcessReceivedCommands+0x1c8>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	1d39      	adds	r1, r7, #4
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe fbfc 	bl	8009af0 <xQueueReceive>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f47f af26 	bne.w	800b14c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b300:	bf00      	nop
 800b302:	bf00      	nop
 800b304:	3730      	adds	r7, #48	@ 0x30
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	24004ad0 	.word	0x24004ad0

0800b310 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b316:	e049      	b.n	800b3ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b318:	4b2e      	ldr	r3, [pc, #184]	@ (800b3d4 <prvSwitchTimerLists+0xc4>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b322:	4b2c      	ldr	r3, [pc, #176]	@ (800b3d4 <prvSwitchTimerLists+0xc4>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3304      	adds	r3, #4
 800b330:	4618      	mov	r0, r3
 800b332:	f7fd feb9 	bl	80090a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b344:	f003 0304 	and.w	r3, r3, #4
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d02f      	beq.n	800b3ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	4413      	add	r3, r2
 800b354:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d90e      	bls.n	800b37c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b36a:	4b1a      	ldr	r3, [pc, #104]	@ (800b3d4 <prvSwitchTimerLists+0xc4>)
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3304      	adds	r3, #4
 800b372:	4619      	mov	r1, r3
 800b374:	4610      	mov	r0, r2
 800b376:	f7fd fe5e 	bl	8009036 <vListInsert>
 800b37a:	e017      	b.n	800b3ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b37c:	2300      	movs	r3, #0
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	2300      	movs	r3, #0
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	2100      	movs	r1, #0
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f7ff fd58 	bl	800ae3c <xTimerGenericCommand>
 800b38c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10b      	bne.n	800b3ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	603b      	str	r3, [r7, #0]
}
 800b3a6:	bf00      	nop
 800b3a8:	bf00      	nop
 800b3aa:	e7fd      	b.n	800b3a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3ac:	4b09      	ldr	r3, [pc, #36]	@ (800b3d4 <prvSwitchTimerLists+0xc4>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1b0      	bne.n	800b318 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3b6:	4b07      	ldr	r3, [pc, #28]	@ (800b3d4 <prvSwitchTimerLists+0xc4>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3bc:	4b06      	ldr	r3, [pc, #24]	@ (800b3d8 <prvSwitchTimerLists+0xc8>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a04      	ldr	r2, [pc, #16]	@ (800b3d4 <prvSwitchTimerLists+0xc4>)
 800b3c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3c4:	4a04      	ldr	r2, [pc, #16]	@ (800b3d8 <prvSwitchTimerLists+0xc8>)
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	6013      	str	r3, [r2, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	3718      	adds	r7, #24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	24004ac8 	.word	0x24004ac8
 800b3d8:	24004acc 	.word	0x24004acc

0800b3dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3e2:	f7fd ffb9 	bl	8009358 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3e6:	4b15      	ldr	r3, [pc, #84]	@ (800b43c <prvCheckForValidListAndQueue+0x60>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d120      	bne.n	800b430 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3ee:	4814      	ldr	r0, [pc, #80]	@ (800b440 <prvCheckForValidListAndQueue+0x64>)
 800b3f0:	f7fd fdd0 	bl	8008f94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3f4:	4813      	ldr	r0, [pc, #76]	@ (800b444 <prvCheckForValidListAndQueue+0x68>)
 800b3f6:	f7fd fdcd 	bl	8008f94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3fa:	4b13      	ldr	r3, [pc, #76]	@ (800b448 <prvCheckForValidListAndQueue+0x6c>)
 800b3fc:	4a10      	ldr	r2, [pc, #64]	@ (800b440 <prvCheckForValidListAndQueue+0x64>)
 800b3fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b400:	4b12      	ldr	r3, [pc, #72]	@ (800b44c <prvCheckForValidListAndQueue+0x70>)
 800b402:	4a10      	ldr	r2, [pc, #64]	@ (800b444 <prvCheckForValidListAndQueue+0x68>)
 800b404:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b406:	2300      	movs	r3, #0
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	4b11      	ldr	r3, [pc, #68]	@ (800b450 <prvCheckForValidListAndQueue+0x74>)
 800b40c:	4a11      	ldr	r2, [pc, #68]	@ (800b454 <prvCheckForValidListAndQueue+0x78>)
 800b40e:	2110      	movs	r1, #16
 800b410:	200a      	movs	r0, #10
 800b412:	f7fe f92d 	bl	8009670 <xQueueGenericCreateStatic>
 800b416:	4603      	mov	r3, r0
 800b418:	4a08      	ldr	r2, [pc, #32]	@ (800b43c <prvCheckForValidListAndQueue+0x60>)
 800b41a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b41c:	4b07      	ldr	r3, [pc, #28]	@ (800b43c <prvCheckForValidListAndQueue+0x60>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d005      	beq.n	800b430 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b424:	4b05      	ldr	r3, [pc, #20]	@ (800b43c <prvCheckForValidListAndQueue+0x60>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	490b      	ldr	r1, [pc, #44]	@ (800b458 <prvCheckForValidListAndQueue+0x7c>)
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fe fd52 	bl	8009ed4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b430:	f7fd ffc4 	bl	80093bc <vPortExitCritical>
}
 800b434:	bf00      	nop
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	24004ad0 	.word	0x24004ad0
 800b440:	24004aa0 	.word	0x24004aa0
 800b444:	24004ab4 	.word	0x24004ab4
 800b448:	24004ac8 	.word	0x24004ac8
 800b44c:	24004acc 	.word	0x24004acc
 800b450:	24004b7c 	.word	0x24004b7c
 800b454:	24004adc 	.word	0x24004adc
 800b458:	0800c454 	.word	0x0800c454

0800b45c <idle_task>:
#include "task_header.h"

void idle_task(void *argument)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
	while (1){
 800b464:	bf00      	nop
 800b466:	e7fd      	b.n	800b464 <idle_task+0x8>

0800b468 <batterie_task>:
#include "batteries_task.h"

extern osThreadId_t batterieHandle;

void batterie_task(void *argument)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
	//setup

	int adc_reading = 0;
 800b470:	2300      	movs	r3, #0
 800b472:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_IT(&huart3, "Batt\n", 6);
 800b474:	2206      	movs	r2, #6
 800b476:	490b      	ldr	r1, [pc, #44]	@ (800b4a4 <batterie_task+0x3c>)
 800b478:	480b      	ldr	r0, [pc, #44]	@ (800b4a8 <batterie_task+0x40>)
 800b47a:	f7fb ff4b 	bl	8007314 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		HAL_ADC_Start_IT(&hadc1);
 800b47e:	480b      	ldr	r0, [pc, #44]	@ (800b4ac <batterie_task+0x44>)
 800b480:	f7f6 fbde 	bl	8001c40 <HAL_ADC_Start_IT>
		osThreadYield();
 800b484:	f7fd fb28 	bl	8008ad8 <osThreadYield>

		adc_reading = HAL_ADC_GetValue(&hadc1);
 800b488:	4808      	ldr	r0, [pc, #32]	@ (800b4ac <batterie_task+0x44>)
 800b48a:	f7f6 fd17 	bl	8001ebc <HAL_ADC_GetValue>
 800b48e:	4603      	mov	r3, r0
 800b490:	60fb      	str	r3, [r7, #12]

			// Process ADC value (e.g., print or use)
		printf("ADC Value: %lu\r\n", adc_reading);
 800b492:	68f9      	ldr	r1, [r7, #12]
 800b494:	4806      	ldr	r0, [pc, #24]	@ (800b4b0 <batterie_task+0x48>)
 800b496:	f000 f933 	bl	800b700 <iprintf>

			// Start next conversion
		osDelay(ADC_SAMPLE_PERIOD_UC);
 800b49a:	4806      	ldr	r0, [pc, #24]	@ (800b4b4 <batterie_task+0x4c>)
 800b49c:	f7fd fb3c 	bl	8008b18 <osDelay>
	{
 800b4a0:	bf00      	nop
 800b4a2:	e7ec      	b.n	800b47e <batterie_task+0x16>
 800b4a4:	0800c45c 	.word	0x0800c45c
 800b4a8:	240001e4 	.word	0x240001e4
 800b4ac:	2400008c 	.word	0x2400008c
 800b4b0:	0800c464 	.word	0x0800c464
 800b4b4:	000927c0 	.word	0x000927c0

0800b4b8 <cnss_task>:
 */

#include "cnss_task.h"

void cnss_task(void *argument)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit_IT(&huart3, "Cnss\n", 6);
 800b4c0:	2206      	movs	r2, #6
 800b4c2:	4904      	ldr	r1, [pc, #16]	@ (800b4d4 <cnss_task+0x1c>)
 800b4c4:	4804      	ldr	r0, [pc, #16]	@ (800b4d8 <cnss_task+0x20>)
 800b4c6:	f7fb ff25 	bl	8007314 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 800b4ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4ce:	f7fd fb23 	bl	8008b18 <osDelay>
 800b4d2:	e7fa      	b.n	800b4ca <cnss_task+0x12>
 800b4d4:	0800c478 	.word	0x0800c478
 800b4d8:	240001e4 	.word	0x240001e4

0800b4dc <imu_task>:
 */

#include "imu_task.h"

void imu_task(void *argument)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	//setup
	HAL_UART_Transmit_IT(&huart3, "IMU\n", 5);
 800b4e4:	2205      	movs	r2, #5
 800b4e6:	4907      	ldr	r1, [pc, #28]	@ (800b504 <imu_task+0x28>)
 800b4e8:	4807      	ldr	r0, [pc, #28]	@ (800b508 <imu_task+0x2c>)
 800b4ea:	f7fb ff13 	bl	8007314 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		//to implement yet
		//osDelay(IMU_SAMPLE_PERIOD_UC);
		HAL_UART_Transmit_IT(&huart3, "Test\n", 6);
 800b4ee:	2206      	movs	r2, #6
 800b4f0:	4906      	ldr	r1, [pc, #24]	@ (800b50c <imu_task+0x30>)
 800b4f2:	4805      	ldr	r0, [pc, #20]	@ (800b508 <imu_task+0x2c>)
 800b4f4:	f7fb ff0e 	bl	8007314 <HAL_UART_Transmit_IT>
		osDelay(100);
 800b4f8:	2064      	movs	r0, #100	@ 0x64
 800b4fa:	f7fd fb0d 	bl	8008b18 <osDelay>
		HAL_UART_Transmit_IT(&huart3, "Test\n", 6);
 800b4fe:	bf00      	nop
 800b500:	e7f5      	b.n	800b4ee <imu_task+0x12>
 800b502:	bf00      	nop
 800b504:	0800c480 	.word	0x0800c480
 800b508:	240001e4 	.word	0x240001e4
 800b50c:	0800c488 	.word	0x0800c488

0800b510 <nb_iot_task>:
 */

#include "nb_iot_task.h"

void nb_iot_task(void *argument)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit_IT(&huart3, "NB-Iot\n", 8);
 800b518:	2208      	movs	r2, #8
 800b51a:	4904      	ldr	r1, [pc, #16]	@ (800b52c <nb_iot_task+0x1c>)
 800b51c:	4804      	ldr	r0, [pc, #16]	@ (800b530 <nb_iot_task+0x20>)
 800b51e:	f7fb fef9 	bl	8007314 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 800b522:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b526:	f7fd faf7 	bl	8008b18 <osDelay>
 800b52a:	e7fa      	b.n	800b522 <nb_iot_task+0x12>
 800b52c:	0800c490 	.word	0x0800c490
 800b530:	240001e4 	.word	0x240001e4

0800b534 <sd_card_task>:
 *  Created on: Apr 23, 2025
 *      Author: viny
 */
#include "sd_card_task.h"
void sd_card_task(void *argument)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit_IT(&huart3, "SD-Card\n", 9);
 800b53c:	2209      	movs	r2, #9
 800b53e:	4904      	ldr	r1, [pc, #16]	@ (800b550 <sd_card_task+0x1c>)
 800b540:	4804      	ldr	r0, [pc, #16]	@ (800b554 <sd_card_task+0x20>)
 800b542:	f7fb fee7 	bl	8007314 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 800b546:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b54a:	f7fd fae5 	bl	8008b18 <osDelay>
 800b54e:	e7fa      	b.n	800b546 <sd_card_task+0x12>
 800b550:	0800c498 	.word	0x0800c498
 800b554:	240001e4 	.word	0x240001e4

0800b558 <temp_task>:
 */

#include "temp_task.h"

void temp_task(void *argument)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit_IT(&huart3, "Temp\n", 6);
 800b560:	2206      	movs	r2, #6
 800b562:	4904      	ldr	r1, [pc, #16]	@ (800b574 <temp_task+0x1c>)
 800b564:	4804      	ldr	r0, [pc, #16]	@ (800b578 <temp_task+0x20>)
 800b566:	f7fb fed5 	bl	8007314 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		//one wire comunication
		osDelay(DELAY_MAX);
 800b56a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b56e:	f7fd fad3 	bl	8008b18 <osDelay>
 800b572:	e7fa      	b.n	800b56a <temp_task+0x12>
 800b574:	0800c4a4 	.word	0x0800c4a4
 800b578:	240001e4 	.word	0x240001e4

0800b57c <std>:
 800b57c:	2300      	movs	r3, #0
 800b57e:	b510      	push	{r4, lr}
 800b580:	4604      	mov	r4, r0
 800b582:	e9c0 3300 	strd	r3, r3, [r0]
 800b586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b58a:	6083      	str	r3, [r0, #8]
 800b58c:	8181      	strh	r1, [r0, #12]
 800b58e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b590:	81c2      	strh	r2, [r0, #14]
 800b592:	6183      	str	r3, [r0, #24]
 800b594:	4619      	mov	r1, r3
 800b596:	2208      	movs	r2, #8
 800b598:	305c      	adds	r0, #92	@ 0x5c
 800b59a:	f000 f906 	bl	800b7aa <memset>
 800b59e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d4 <std+0x58>)
 800b5a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800b5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d8 <std+0x5c>)
 800b5a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b5dc <std+0x60>)
 800b5a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b5e0 <std+0x64>)
 800b5ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800b5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b5e4 <std+0x68>)
 800b5b0:	6224      	str	r4, [r4, #32]
 800b5b2:	429c      	cmp	r4, r3
 800b5b4:	d006      	beq.n	800b5c4 <std+0x48>
 800b5b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5ba:	4294      	cmp	r4, r2
 800b5bc:	d002      	beq.n	800b5c4 <std+0x48>
 800b5be:	33d0      	adds	r3, #208	@ 0xd0
 800b5c0:	429c      	cmp	r4, r3
 800b5c2:	d105      	bne.n	800b5d0 <std+0x54>
 800b5c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5cc:	f000 b966 	b.w	800b89c <__retarget_lock_init_recursive>
 800b5d0:	bd10      	pop	{r4, pc}
 800b5d2:	bf00      	nop
 800b5d4:	0800b725 	.word	0x0800b725
 800b5d8:	0800b747 	.word	0x0800b747
 800b5dc:	0800b77f 	.word	0x0800b77f
 800b5e0:	0800b7a3 	.word	0x0800b7a3
 800b5e4:	24004bcc 	.word	0x24004bcc

0800b5e8 <stdio_exit_handler>:
 800b5e8:	4a02      	ldr	r2, [pc, #8]	@ (800b5f4 <stdio_exit_handler+0xc>)
 800b5ea:	4903      	ldr	r1, [pc, #12]	@ (800b5f8 <stdio_exit_handler+0x10>)
 800b5ec:	4803      	ldr	r0, [pc, #12]	@ (800b5fc <stdio_exit_handler+0x14>)
 800b5ee:	f000 b869 	b.w	800b6c4 <_fwalk_sglue>
 800b5f2:	bf00      	nop
 800b5f4:	24000014 	.word	0x24000014
 800b5f8:	0800c155 	.word	0x0800c155
 800b5fc:	24000024 	.word	0x24000024

0800b600 <cleanup_stdio>:
 800b600:	6841      	ldr	r1, [r0, #4]
 800b602:	4b0c      	ldr	r3, [pc, #48]	@ (800b634 <cleanup_stdio+0x34>)
 800b604:	4299      	cmp	r1, r3
 800b606:	b510      	push	{r4, lr}
 800b608:	4604      	mov	r4, r0
 800b60a:	d001      	beq.n	800b610 <cleanup_stdio+0x10>
 800b60c:	f000 fda2 	bl	800c154 <_fflush_r>
 800b610:	68a1      	ldr	r1, [r4, #8]
 800b612:	4b09      	ldr	r3, [pc, #36]	@ (800b638 <cleanup_stdio+0x38>)
 800b614:	4299      	cmp	r1, r3
 800b616:	d002      	beq.n	800b61e <cleanup_stdio+0x1e>
 800b618:	4620      	mov	r0, r4
 800b61a:	f000 fd9b 	bl	800c154 <_fflush_r>
 800b61e:	68e1      	ldr	r1, [r4, #12]
 800b620:	4b06      	ldr	r3, [pc, #24]	@ (800b63c <cleanup_stdio+0x3c>)
 800b622:	4299      	cmp	r1, r3
 800b624:	d004      	beq.n	800b630 <cleanup_stdio+0x30>
 800b626:	4620      	mov	r0, r4
 800b628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b62c:	f000 bd92 	b.w	800c154 <_fflush_r>
 800b630:	bd10      	pop	{r4, pc}
 800b632:	bf00      	nop
 800b634:	24004bcc 	.word	0x24004bcc
 800b638:	24004c34 	.word	0x24004c34
 800b63c:	24004c9c 	.word	0x24004c9c

0800b640 <global_stdio_init.part.0>:
 800b640:	b510      	push	{r4, lr}
 800b642:	4b0b      	ldr	r3, [pc, #44]	@ (800b670 <global_stdio_init.part.0+0x30>)
 800b644:	4c0b      	ldr	r4, [pc, #44]	@ (800b674 <global_stdio_init.part.0+0x34>)
 800b646:	4a0c      	ldr	r2, [pc, #48]	@ (800b678 <global_stdio_init.part.0+0x38>)
 800b648:	601a      	str	r2, [r3, #0]
 800b64a:	4620      	mov	r0, r4
 800b64c:	2200      	movs	r2, #0
 800b64e:	2104      	movs	r1, #4
 800b650:	f7ff ff94 	bl	800b57c <std>
 800b654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b658:	2201      	movs	r2, #1
 800b65a:	2109      	movs	r1, #9
 800b65c:	f7ff ff8e 	bl	800b57c <std>
 800b660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b664:	2202      	movs	r2, #2
 800b666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b66a:	2112      	movs	r1, #18
 800b66c:	f7ff bf86 	b.w	800b57c <std>
 800b670:	24004d04 	.word	0x24004d04
 800b674:	24004bcc 	.word	0x24004bcc
 800b678:	0800b5e9 	.word	0x0800b5e9

0800b67c <__sfp_lock_acquire>:
 800b67c:	4801      	ldr	r0, [pc, #4]	@ (800b684 <__sfp_lock_acquire+0x8>)
 800b67e:	f000 b90e 	b.w	800b89e <__retarget_lock_acquire_recursive>
 800b682:	bf00      	nop
 800b684:	24004d0d 	.word	0x24004d0d

0800b688 <__sfp_lock_release>:
 800b688:	4801      	ldr	r0, [pc, #4]	@ (800b690 <__sfp_lock_release+0x8>)
 800b68a:	f000 b909 	b.w	800b8a0 <__retarget_lock_release_recursive>
 800b68e:	bf00      	nop
 800b690:	24004d0d 	.word	0x24004d0d

0800b694 <__sinit>:
 800b694:	b510      	push	{r4, lr}
 800b696:	4604      	mov	r4, r0
 800b698:	f7ff fff0 	bl	800b67c <__sfp_lock_acquire>
 800b69c:	6a23      	ldr	r3, [r4, #32]
 800b69e:	b11b      	cbz	r3, 800b6a8 <__sinit+0x14>
 800b6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a4:	f7ff bff0 	b.w	800b688 <__sfp_lock_release>
 800b6a8:	4b04      	ldr	r3, [pc, #16]	@ (800b6bc <__sinit+0x28>)
 800b6aa:	6223      	str	r3, [r4, #32]
 800b6ac:	4b04      	ldr	r3, [pc, #16]	@ (800b6c0 <__sinit+0x2c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1f5      	bne.n	800b6a0 <__sinit+0xc>
 800b6b4:	f7ff ffc4 	bl	800b640 <global_stdio_init.part.0>
 800b6b8:	e7f2      	b.n	800b6a0 <__sinit+0xc>
 800b6ba:	bf00      	nop
 800b6bc:	0800b601 	.word	0x0800b601
 800b6c0:	24004d04 	.word	0x24004d04

0800b6c4 <_fwalk_sglue>:
 800b6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6c8:	4607      	mov	r7, r0
 800b6ca:	4688      	mov	r8, r1
 800b6cc:	4614      	mov	r4, r2
 800b6ce:	2600      	movs	r6, #0
 800b6d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6d4:	f1b9 0901 	subs.w	r9, r9, #1
 800b6d8:	d505      	bpl.n	800b6e6 <_fwalk_sglue+0x22>
 800b6da:	6824      	ldr	r4, [r4, #0]
 800b6dc:	2c00      	cmp	r4, #0
 800b6de:	d1f7      	bne.n	800b6d0 <_fwalk_sglue+0xc>
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6e6:	89ab      	ldrh	r3, [r5, #12]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d907      	bls.n	800b6fc <_fwalk_sglue+0x38>
 800b6ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	d003      	beq.n	800b6fc <_fwalk_sglue+0x38>
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	47c0      	blx	r8
 800b6fa:	4306      	orrs	r6, r0
 800b6fc:	3568      	adds	r5, #104	@ 0x68
 800b6fe:	e7e9      	b.n	800b6d4 <_fwalk_sglue+0x10>

0800b700 <iprintf>:
 800b700:	b40f      	push	{r0, r1, r2, r3}
 800b702:	b507      	push	{r0, r1, r2, lr}
 800b704:	4906      	ldr	r1, [pc, #24]	@ (800b720 <iprintf+0x20>)
 800b706:	ab04      	add	r3, sp, #16
 800b708:	6808      	ldr	r0, [r1, #0]
 800b70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b70e:	6881      	ldr	r1, [r0, #8]
 800b710:	9301      	str	r3, [sp, #4]
 800b712:	f000 f9f7 	bl	800bb04 <_vfiprintf_r>
 800b716:	b003      	add	sp, #12
 800b718:	f85d eb04 	ldr.w	lr, [sp], #4
 800b71c:	b004      	add	sp, #16
 800b71e:	4770      	bx	lr
 800b720:	24000020 	.word	0x24000020

0800b724 <__sread>:
 800b724:	b510      	push	{r4, lr}
 800b726:	460c      	mov	r4, r1
 800b728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b72c:	f000 f868 	bl	800b800 <_read_r>
 800b730:	2800      	cmp	r0, #0
 800b732:	bfab      	itete	ge
 800b734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b736:	89a3      	ldrhlt	r3, [r4, #12]
 800b738:	181b      	addge	r3, r3, r0
 800b73a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b73e:	bfac      	ite	ge
 800b740:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b742:	81a3      	strhlt	r3, [r4, #12]
 800b744:	bd10      	pop	{r4, pc}

0800b746 <__swrite>:
 800b746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74a:	461f      	mov	r7, r3
 800b74c:	898b      	ldrh	r3, [r1, #12]
 800b74e:	05db      	lsls	r3, r3, #23
 800b750:	4605      	mov	r5, r0
 800b752:	460c      	mov	r4, r1
 800b754:	4616      	mov	r6, r2
 800b756:	d505      	bpl.n	800b764 <__swrite+0x1e>
 800b758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b75c:	2302      	movs	r3, #2
 800b75e:	2200      	movs	r2, #0
 800b760:	f000 f83c 	bl	800b7dc <_lseek_r>
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b76a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b76e:	81a3      	strh	r3, [r4, #12]
 800b770:	4632      	mov	r2, r6
 800b772:	463b      	mov	r3, r7
 800b774:	4628      	mov	r0, r5
 800b776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b77a:	f000 b853 	b.w	800b824 <_write_r>

0800b77e <__sseek>:
 800b77e:	b510      	push	{r4, lr}
 800b780:	460c      	mov	r4, r1
 800b782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b786:	f000 f829 	bl	800b7dc <_lseek_r>
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	bf15      	itete	ne
 800b790:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b79a:	81a3      	strheq	r3, [r4, #12]
 800b79c:	bf18      	it	ne
 800b79e:	81a3      	strhne	r3, [r4, #12]
 800b7a0:	bd10      	pop	{r4, pc}

0800b7a2 <__sclose>:
 800b7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a6:	f000 b809 	b.w	800b7bc <_close_r>

0800b7aa <memset>:
 800b7aa:	4402      	add	r2, r0
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d100      	bne.n	800b7b4 <memset+0xa>
 800b7b2:	4770      	bx	lr
 800b7b4:	f803 1b01 	strb.w	r1, [r3], #1
 800b7b8:	e7f9      	b.n	800b7ae <memset+0x4>
	...

0800b7bc <_close_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	4d06      	ldr	r5, [pc, #24]	@ (800b7d8 <_close_r+0x1c>)
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	4608      	mov	r0, r1
 800b7c6:	602b      	str	r3, [r5, #0]
 800b7c8:	f7f5 fcef 	bl	80011aa <_close>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	d102      	bne.n	800b7d6 <_close_r+0x1a>
 800b7d0:	682b      	ldr	r3, [r5, #0]
 800b7d2:	b103      	cbz	r3, 800b7d6 <_close_r+0x1a>
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	bd38      	pop	{r3, r4, r5, pc}
 800b7d8:	24004d08 	.word	0x24004d08

0800b7dc <_lseek_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	4d07      	ldr	r5, [pc, #28]	@ (800b7fc <_lseek_r+0x20>)
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	4608      	mov	r0, r1
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	602a      	str	r2, [r5, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	f7f5 fd04 	bl	80011f8 <_lseek>
 800b7f0:	1c43      	adds	r3, r0, #1
 800b7f2:	d102      	bne.n	800b7fa <_lseek_r+0x1e>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	b103      	cbz	r3, 800b7fa <_lseek_r+0x1e>
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
 800b7fc:	24004d08 	.word	0x24004d08

0800b800 <_read_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4d07      	ldr	r5, [pc, #28]	@ (800b820 <_read_r+0x20>)
 800b804:	4604      	mov	r4, r0
 800b806:	4608      	mov	r0, r1
 800b808:	4611      	mov	r1, r2
 800b80a:	2200      	movs	r2, #0
 800b80c:	602a      	str	r2, [r5, #0]
 800b80e:	461a      	mov	r2, r3
 800b810:	f7f5 fc92 	bl	8001138 <_read>
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	d102      	bne.n	800b81e <_read_r+0x1e>
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	b103      	cbz	r3, 800b81e <_read_r+0x1e>
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
 800b820:	24004d08 	.word	0x24004d08

0800b824 <_write_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	4d07      	ldr	r5, [pc, #28]	@ (800b844 <_write_r+0x20>)
 800b828:	4604      	mov	r4, r0
 800b82a:	4608      	mov	r0, r1
 800b82c:	4611      	mov	r1, r2
 800b82e:	2200      	movs	r2, #0
 800b830:	602a      	str	r2, [r5, #0]
 800b832:	461a      	mov	r2, r3
 800b834:	f7f5 fc9d 	bl	8001172 <_write>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d102      	bne.n	800b842 <_write_r+0x1e>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	b103      	cbz	r3, 800b842 <_write_r+0x1e>
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	bd38      	pop	{r3, r4, r5, pc}
 800b844:	24004d08 	.word	0x24004d08

0800b848 <__errno>:
 800b848:	4b01      	ldr	r3, [pc, #4]	@ (800b850 <__errno+0x8>)
 800b84a:	6818      	ldr	r0, [r3, #0]
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	24000020 	.word	0x24000020

0800b854 <__libc_init_array>:
 800b854:	b570      	push	{r4, r5, r6, lr}
 800b856:	4d0d      	ldr	r5, [pc, #52]	@ (800b88c <__libc_init_array+0x38>)
 800b858:	4c0d      	ldr	r4, [pc, #52]	@ (800b890 <__libc_init_array+0x3c>)
 800b85a:	1b64      	subs	r4, r4, r5
 800b85c:	10a4      	asrs	r4, r4, #2
 800b85e:	2600      	movs	r6, #0
 800b860:	42a6      	cmp	r6, r4
 800b862:	d109      	bne.n	800b878 <__libc_init_array+0x24>
 800b864:	4d0b      	ldr	r5, [pc, #44]	@ (800b894 <__libc_init_array+0x40>)
 800b866:	4c0c      	ldr	r4, [pc, #48]	@ (800b898 <__libc_init_array+0x44>)
 800b868:	f000 fdc4 	bl	800c3f4 <_init>
 800b86c:	1b64      	subs	r4, r4, r5
 800b86e:	10a4      	asrs	r4, r4, #2
 800b870:	2600      	movs	r6, #0
 800b872:	42a6      	cmp	r6, r4
 800b874:	d105      	bne.n	800b882 <__libc_init_array+0x2e>
 800b876:	bd70      	pop	{r4, r5, r6, pc}
 800b878:	f855 3b04 	ldr.w	r3, [r5], #4
 800b87c:	4798      	blx	r3
 800b87e:	3601      	adds	r6, #1
 800b880:	e7ee      	b.n	800b860 <__libc_init_array+0xc>
 800b882:	f855 3b04 	ldr.w	r3, [r5], #4
 800b886:	4798      	blx	r3
 800b888:	3601      	adds	r6, #1
 800b88a:	e7f2      	b.n	800b872 <__libc_init_array+0x1e>
 800b88c:	0800c61c 	.word	0x0800c61c
 800b890:	0800c61c 	.word	0x0800c61c
 800b894:	0800c61c 	.word	0x0800c61c
 800b898:	0800c620 	.word	0x0800c620

0800b89c <__retarget_lock_init_recursive>:
 800b89c:	4770      	bx	lr

0800b89e <__retarget_lock_acquire_recursive>:
 800b89e:	4770      	bx	lr

0800b8a0 <__retarget_lock_release_recursive>:
 800b8a0:	4770      	bx	lr

0800b8a2 <memcpy>:
 800b8a2:	440a      	add	r2, r1
 800b8a4:	4291      	cmp	r1, r2
 800b8a6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b8aa:	d100      	bne.n	800b8ae <memcpy+0xc>
 800b8ac:	4770      	bx	lr
 800b8ae:	b510      	push	{r4, lr}
 800b8b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8b8:	4291      	cmp	r1, r2
 800b8ba:	d1f9      	bne.n	800b8b0 <memcpy+0xe>
 800b8bc:	bd10      	pop	{r4, pc}
	...

0800b8c0 <_free_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	4605      	mov	r5, r0
 800b8c4:	2900      	cmp	r1, #0
 800b8c6:	d041      	beq.n	800b94c <_free_r+0x8c>
 800b8c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8cc:	1f0c      	subs	r4, r1, #4
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bfb8      	it	lt
 800b8d2:	18e4      	addlt	r4, r4, r3
 800b8d4:	f000 f8e0 	bl	800ba98 <__malloc_lock>
 800b8d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b950 <_free_r+0x90>)
 800b8da:	6813      	ldr	r3, [r2, #0]
 800b8dc:	b933      	cbnz	r3, 800b8ec <_free_r+0x2c>
 800b8de:	6063      	str	r3, [r4, #4]
 800b8e0:	6014      	str	r4, [r2, #0]
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8e8:	f000 b8dc 	b.w	800baa4 <__malloc_unlock>
 800b8ec:	42a3      	cmp	r3, r4
 800b8ee:	d908      	bls.n	800b902 <_free_r+0x42>
 800b8f0:	6820      	ldr	r0, [r4, #0]
 800b8f2:	1821      	adds	r1, r4, r0
 800b8f4:	428b      	cmp	r3, r1
 800b8f6:	bf01      	itttt	eq
 800b8f8:	6819      	ldreq	r1, [r3, #0]
 800b8fa:	685b      	ldreq	r3, [r3, #4]
 800b8fc:	1809      	addeq	r1, r1, r0
 800b8fe:	6021      	streq	r1, [r4, #0]
 800b900:	e7ed      	b.n	800b8de <_free_r+0x1e>
 800b902:	461a      	mov	r2, r3
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	b10b      	cbz	r3, 800b90c <_free_r+0x4c>
 800b908:	42a3      	cmp	r3, r4
 800b90a:	d9fa      	bls.n	800b902 <_free_r+0x42>
 800b90c:	6811      	ldr	r1, [r2, #0]
 800b90e:	1850      	adds	r0, r2, r1
 800b910:	42a0      	cmp	r0, r4
 800b912:	d10b      	bne.n	800b92c <_free_r+0x6c>
 800b914:	6820      	ldr	r0, [r4, #0]
 800b916:	4401      	add	r1, r0
 800b918:	1850      	adds	r0, r2, r1
 800b91a:	4283      	cmp	r3, r0
 800b91c:	6011      	str	r1, [r2, #0]
 800b91e:	d1e0      	bne.n	800b8e2 <_free_r+0x22>
 800b920:	6818      	ldr	r0, [r3, #0]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	6053      	str	r3, [r2, #4]
 800b926:	4408      	add	r0, r1
 800b928:	6010      	str	r0, [r2, #0]
 800b92a:	e7da      	b.n	800b8e2 <_free_r+0x22>
 800b92c:	d902      	bls.n	800b934 <_free_r+0x74>
 800b92e:	230c      	movs	r3, #12
 800b930:	602b      	str	r3, [r5, #0]
 800b932:	e7d6      	b.n	800b8e2 <_free_r+0x22>
 800b934:	6820      	ldr	r0, [r4, #0]
 800b936:	1821      	adds	r1, r4, r0
 800b938:	428b      	cmp	r3, r1
 800b93a:	bf04      	itt	eq
 800b93c:	6819      	ldreq	r1, [r3, #0]
 800b93e:	685b      	ldreq	r3, [r3, #4]
 800b940:	6063      	str	r3, [r4, #4]
 800b942:	bf04      	itt	eq
 800b944:	1809      	addeq	r1, r1, r0
 800b946:	6021      	streq	r1, [r4, #0]
 800b948:	6054      	str	r4, [r2, #4]
 800b94a:	e7ca      	b.n	800b8e2 <_free_r+0x22>
 800b94c:	bd38      	pop	{r3, r4, r5, pc}
 800b94e:	bf00      	nop
 800b950:	24004d14 	.word	0x24004d14

0800b954 <sbrk_aligned>:
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	4e0f      	ldr	r6, [pc, #60]	@ (800b994 <sbrk_aligned+0x40>)
 800b958:	460c      	mov	r4, r1
 800b95a:	6831      	ldr	r1, [r6, #0]
 800b95c:	4605      	mov	r5, r0
 800b95e:	b911      	cbnz	r1, 800b966 <sbrk_aligned+0x12>
 800b960:	f000 fcb4 	bl	800c2cc <_sbrk_r>
 800b964:	6030      	str	r0, [r6, #0]
 800b966:	4621      	mov	r1, r4
 800b968:	4628      	mov	r0, r5
 800b96a:	f000 fcaf 	bl	800c2cc <_sbrk_r>
 800b96e:	1c43      	adds	r3, r0, #1
 800b970:	d103      	bne.n	800b97a <sbrk_aligned+0x26>
 800b972:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b976:	4620      	mov	r0, r4
 800b978:	bd70      	pop	{r4, r5, r6, pc}
 800b97a:	1cc4      	adds	r4, r0, #3
 800b97c:	f024 0403 	bic.w	r4, r4, #3
 800b980:	42a0      	cmp	r0, r4
 800b982:	d0f8      	beq.n	800b976 <sbrk_aligned+0x22>
 800b984:	1a21      	subs	r1, r4, r0
 800b986:	4628      	mov	r0, r5
 800b988:	f000 fca0 	bl	800c2cc <_sbrk_r>
 800b98c:	3001      	adds	r0, #1
 800b98e:	d1f2      	bne.n	800b976 <sbrk_aligned+0x22>
 800b990:	e7ef      	b.n	800b972 <sbrk_aligned+0x1e>
 800b992:	bf00      	nop
 800b994:	24004d10 	.word	0x24004d10

0800b998 <_malloc_r>:
 800b998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b99c:	1ccd      	adds	r5, r1, #3
 800b99e:	f025 0503 	bic.w	r5, r5, #3
 800b9a2:	3508      	adds	r5, #8
 800b9a4:	2d0c      	cmp	r5, #12
 800b9a6:	bf38      	it	cc
 800b9a8:	250c      	movcc	r5, #12
 800b9aa:	2d00      	cmp	r5, #0
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	db01      	blt.n	800b9b4 <_malloc_r+0x1c>
 800b9b0:	42a9      	cmp	r1, r5
 800b9b2:	d904      	bls.n	800b9be <_malloc_r+0x26>
 800b9b4:	230c      	movs	r3, #12
 800b9b6:	6033      	str	r3, [r6, #0]
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba94 <_malloc_r+0xfc>
 800b9c2:	f000 f869 	bl	800ba98 <__malloc_lock>
 800b9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b9ca:	461c      	mov	r4, r3
 800b9cc:	bb44      	cbnz	r4, 800ba20 <_malloc_r+0x88>
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f7ff ffbf 	bl	800b954 <sbrk_aligned>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	4604      	mov	r4, r0
 800b9da:	d158      	bne.n	800ba8e <_malloc_r+0xf6>
 800b9dc:	f8d8 4000 	ldr.w	r4, [r8]
 800b9e0:	4627      	mov	r7, r4
 800b9e2:	2f00      	cmp	r7, #0
 800b9e4:	d143      	bne.n	800ba6e <_malloc_r+0xd6>
 800b9e6:	2c00      	cmp	r4, #0
 800b9e8:	d04b      	beq.n	800ba82 <_malloc_r+0xea>
 800b9ea:	6823      	ldr	r3, [r4, #0]
 800b9ec:	4639      	mov	r1, r7
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	eb04 0903 	add.w	r9, r4, r3
 800b9f4:	f000 fc6a 	bl	800c2cc <_sbrk_r>
 800b9f8:	4581      	cmp	r9, r0
 800b9fa:	d142      	bne.n	800ba82 <_malloc_r+0xea>
 800b9fc:	6821      	ldr	r1, [r4, #0]
 800b9fe:	1a6d      	subs	r5, r5, r1
 800ba00:	4629      	mov	r1, r5
 800ba02:	4630      	mov	r0, r6
 800ba04:	f7ff ffa6 	bl	800b954 <sbrk_aligned>
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d03a      	beq.n	800ba82 <_malloc_r+0xea>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	442b      	add	r3, r5
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	f8d8 3000 	ldr.w	r3, [r8]
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	bb62      	cbnz	r2, 800ba74 <_malloc_r+0xdc>
 800ba1a:	f8c8 7000 	str.w	r7, [r8]
 800ba1e:	e00f      	b.n	800ba40 <_malloc_r+0xa8>
 800ba20:	6822      	ldr	r2, [r4, #0]
 800ba22:	1b52      	subs	r2, r2, r5
 800ba24:	d420      	bmi.n	800ba68 <_malloc_r+0xd0>
 800ba26:	2a0b      	cmp	r2, #11
 800ba28:	d917      	bls.n	800ba5a <_malloc_r+0xc2>
 800ba2a:	1961      	adds	r1, r4, r5
 800ba2c:	42a3      	cmp	r3, r4
 800ba2e:	6025      	str	r5, [r4, #0]
 800ba30:	bf18      	it	ne
 800ba32:	6059      	strne	r1, [r3, #4]
 800ba34:	6863      	ldr	r3, [r4, #4]
 800ba36:	bf08      	it	eq
 800ba38:	f8c8 1000 	streq.w	r1, [r8]
 800ba3c:	5162      	str	r2, [r4, r5]
 800ba3e:	604b      	str	r3, [r1, #4]
 800ba40:	4630      	mov	r0, r6
 800ba42:	f000 f82f 	bl	800baa4 <__malloc_unlock>
 800ba46:	f104 000b 	add.w	r0, r4, #11
 800ba4a:	1d23      	adds	r3, r4, #4
 800ba4c:	f020 0007 	bic.w	r0, r0, #7
 800ba50:	1ac2      	subs	r2, r0, r3
 800ba52:	bf1c      	itt	ne
 800ba54:	1a1b      	subne	r3, r3, r0
 800ba56:	50a3      	strne	r3, [r4, r2]
 800ba58:	e7af      	b.n	800b9ba <_malloc_r+0x22>
 800ba5a:	6862      	ldr	r2, [r4, #4]
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	bf0c      	ite	eq
 800ba60:	f8c8 2000 	streq.w	r2, [r8]
 800ba64:	605a      	strne	r2, [r3, #4]
 800ba66:	e7eb      	b.n	800ba40 <_malloc_r+0xa8>
 800ba68:	4623      	mov	r3, r4
 800ba6a:	6864      	ldr	r4, [r4, #4]
 800ba6c:	e7ae      	b.n	800b9cc <_malloc_r+0x34>
 800ba6e:	463c      	mov	r4, r7
 800ba70:	687f      	ldr	r7, [r7, #4]
 800ba72:	e7b6      	b.n	800b9e2 <_malloc_r+0x4a>
 800ba74:	461a      	mov	r2, r3
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	42a3      	cmp	r3, r4
 800ba7a:	d1fb      	bne.n	800ba74 <_malloc_r+0xdc>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	6053      	str	r3, [r2, #4]
 800ba80:	e7de      	b.n	800ba40 <_malloc_r+0xa8>
 800ba82:	230c      	movs	r3, #12
 800ba84:	6033      	str	r3, [r6, #0]
 800ba86:	4630      	mov	r0, r6
 800ba88:	f000 f80c 	bl	800baa4 <__malloc_unlock>
 800ba8c:	e794      	b.n	800b9b8 <_malloc_r+0x20>
 800ba8e:	6005      	str	r5, [r0, #0]
 800ba90:	e7d6      	b.n	800ba40 <_malloc_r+0xa8>
 800ba92:	bf00      	nop
 800ba94:	24004d14 	.word	0x24004d14

0800ba98 <__malloc_lock>:
 800ba98:	4801      	ldr	r0, [pc, #4]	@ (800baa0 <__malloc_lock+0x8>)
 800ba9a:	f7ff bf00 	b.w	800b89e <__retarget_lock_acquire_recursive>
 800ba9e:	bf00      	nop
 800baa0:	24004d0c 	.word	0x24004d0c

0800baa4 <__malloc_unlock>:
 800baa4:	4801      	ldr	r0, [pc, #4]	@ (800baac <__malloc_unlock+0x8>)
 800baa6:	f7ff befb 	b.w	800b8a0 <__retarget_lock_release_recursive>
 800baaa:	bf00      	nop
 800baac:	24004d0c 	.word	0x24004d0c

0800bab0 <__sfputc_r>:
 800bab0:	6893      	ldr	r3, [r2, #8]
 800bab2:	3b01      	subs	r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	b410      	push	{r4}
 800bab8:	6093      	str	r3, [r2, #8]
 800baba:	da08      	bge.n	800bace <__sfputc_r+0x1e>
 800babc:	6994      	ldr	r4, [r2, #24]
 800babe:	42a3      	cmp	r3, r4
 800bac0:	db01      	blt.n	800bac6 <__sfputc_r+0x16>
 800bac2:	290a      	cmp	r1, #10
 800bac4:	d103      	bne.n	800bace <__sfputc_r+0x1e>
 800bac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baca:	f000 bb6b 	b.w	800c1a4 <__swbuf_r>
 800bace:	6813      	ldr	r3, [r2, #0]
 800bad0:	1c58      	adds	r0, r3, #1
 800bad2:	6010      	str	r0, [r2, #0]
 800bad4:	7019      	strb	r1, [r3, #0]
 800bad6:	4608      	mov	r0, r1
 800bad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800badc:	4770      	bx	lr

0800bade <__sfputs_r>:
 800bade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae0:	4606      	mov	r6, r0
 800bae2:	460f      	mov	r7, r1
 800bae4:	4614      	mov	r4, r2
 800bae6:	18d5      	adds	r5, r2, r3
 800bae8:	42ac      	cmp	r4, r5
 800baea:	d101      	bne.n	800baf0 <__sfputs_r+0x12>
 800baec:	2000      	movs	r0, #0
 800baee:	e007      	b.n	800bb00 <__sfputs_r+0x22>
 800baf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf4:	463a      	mov	r2, r7
 800baf6:	4630      	mov	r0, r6
 800baf8:	f7ff ffda 	bl	800bab0 <__sfputc_r>
 800bafc:	1c43      	adds	r3, r0, #1
 800bafe:	d1f3      	bne.n	800bae8 <__sfputs_r+0xa>
 800bb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb04 <_vfiprintf_r>:
 800bb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb08:	460d      	mov	r5, r1
 800bb0a:	b09d      	sub	sp, #116	@ 0x74
 800bb0c:	4614      	mov	r4, r2
 800bb0e:	4698      	mov	r8, r3
 800bb10:	4606      	mov	r6, r0
 800bb12:	b118      	cbz	r0, 800bb1c <_vfiprintf_r+0x18>
 800bb14:	6a03      	ldr	r3, [r0, #32]
 800bb16:	b90b      	cbnz	r3, 800bb1c <_vfiprintf_r+0x18>
 800bb18:	f7ff fdbc 	bl	800b694 <__sinit>
 800bb1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb1e:	07d9      	lsls	r1, r3, #31
 800bb20:	d405      	bmi.n	800bb2e <_vfiprintf_r+0x2a>
 800bb22:	89ab      	ldrh	r3, [r5, #12]
 800bb24:	059a      	lsls	r2, r3, #22
 800bb26:	d402      	bmi.n	800bb2e <_vfiprintf_r+0x2a>
 800bb28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb2a:	f7ff feb8 	bl	800b89e <__retarget_lock_acquire_recursive>
 800bb2e:	89ab      	ldrh	r3, [r5, #12]
 800bb30:	071b      	lsls	r3, r3, #28
 800bb32:	d501      	bpl.n	800bb38 <_vfiprintf_r+0x34>
 800bb34:	692b      	ldr	r3, [r5, #16]
 800bb36:	b99b      	cbnz	r3, 800bb60 <_vfiprintf_r+0x5c>
 800bb38:	4629      	mov	r1, r5
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f000 fb70 	bl	800c220 <__swsetup_r>
 800bb40:	b170      	cbz	r0, 800bb60 <_vfiprintf_r+0x5c>
 800bb42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb44:	07dc      	lsls	r4, r3, #31
 800bb46:	d504      	bpl.n	800bb52 <_vfiprintf_r+0x4e>
 800bb48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb4c:	b01d      	add	sp, #116	@ 0x74
 800bb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb52:	89ab      	ldrh	r3, [r5, #12]
 800bb54:	0598      	lsls	r0, r3, #22
 800bb56:	d4f7      	bmi.n	800bb48 <_vfiprintf_r+0x44>
 800bb58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb5a:	f7ff fea1 	bl	800b8a0 <__retarget_lock_release_recursive>
 800bb5e:	e7f3      	b.n	800bb48 <_vfiprintf_r+0x44>
 800bb60:	2300      	movs	r3, #0
 800bb62:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb64:	2320      	movs	r3, #32
 800bb66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb6e:	2330      	movs	r3, #48	@ 0x30
 800bb70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd20 <_vfiprintf_r+0x21c>
 800bb74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb78:	f04f 0901 	mov.w	r9, #1
 800bb7c:	4623      	mov	r3, r4
 800bb7e:	469a      	mov	sl, r3
 800bb80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb84:	b10a      	cbz	r2, 800bb8a <_vfiprintf_r+0x86>
 800bb86:	2a25      	cmp	r2, #37	@ 0x25
 800bb88:	d1f9      	bne.n	800bb7e <_vfiprintf_r+0x7a>
 800bb8a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb8e:	d00b      	beq.n	800bba8 <_vfiprintf_r+0xa4>
 800bb90:	465b      	mov	r3, fp
 800bb92:	4622      	mov	r2, r4
 800bb94:	4629      	mov	r1, r5
 800bb96:	4630      	mov	r0, r6
 800bb98:	f7ff ffa1 	bl	800bade <__sfputs_r>
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	f000 80a7 	beq.w	800bcf0 <_vfiprintf_r+0x1ec>
 800bba2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bba4:	445a      	add	r2, fp
 800bba6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bba8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 809f 	beq.w	800bcf0 <_vfiprintf_r+0x1ec>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbbc:	f10a 0a01 	add.w	sl, sl, #1
 800bbc0:	9304      	str	r3, [sp, #16]
 800bbc2:	9307      	str	r3, [sp, #28]
 800bbc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbc8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbca:	4654      	mov	r4, sl
 800bbcc:	2205      	movs	r2, #5
 800bbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd2:	4853      	ldr	r0, [pc, #332]	@ (800bd20 <_vfiprintf_r+0x21c>)
 800bbd4:	f7f4 fb84 	bl	80002e0 <memchr>
 800bbd8:	9a04      	ldr	r2, [sp, #16]
 800bbda:	b9d8      	cbnz	r0, 800bc14 <_vfiprintf_r+0x110>
 800bbdc:	06d1      	lsls	r1, r2, #27
 800bbde:	bf44      	itt	mi
 800bbe0:	2320      	movmi	r3, #32
 800bbe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbe6:	0713      	lsls	r3, r2, #28
 800bbe8:	bf44      	itt	mi
 800bbea:	232b      	movmi	r3, #43	@ 0x2b
 800bbec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbf0:	f89a 3000 	ldrb.w	r3, [sl]
 800bbf4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbf6:	d015      	beq.n	800bc24 <_vfiprintf_r+0x120>
 800bbf8:	9a07      	ldr	r2, [sp, #28]
 800bbfa:	4654      	mov	r4, sl
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	f04f 0c0a 	mov.w	ip, #10
 800bc02:	4621      	mov	r1, r4
 800bc04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc08:	3b30      	subs	r3, #48	@ 0x30
 800bc0a:	2b09      	cmp	r3, #9
 800bc0c:	d94b      	bls.n	800bca6 <_vfiprintf_r+0x1a2>
 800bc0e:	b1b0      	cbz	r0, 800bc3e <_vfiprintf_r+0x13a>
 800bc10:	9207      	str	r2, [sp, #28]
 800bc12:	e014      	b.n	800bc3e <_vfiprintf_r+0x13a>
 800bc14:	eba0 0308 	sub.w	r3, r0, r8
 800bc18:	fa09 f303 	lsl.w	r3, r9, r3
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	9304      	str	r3, [sp, #16]
 800bc20:	46a2      	mov	sl, r4
 800bc22:	e7d2      	b.n	800bbca <_vfiprintf_r+0xc6>
 800bc24:	9b03      	ldr	r3, [sp, #12]
 800bc26:	1d19      	adds	r1, r3, #4
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	9103      	str	r1, [sp, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	bfbb      	ittet	lt
 800bc30:	425b      	neglt	r3, r3
 800bc32:	f042 0202 	orrlt.w	r2, r2, #2
 800bc36:	9307      	strge	r3, [sp, #28]
 800bc38:	9307      	strlt	r3, [sp, #28]
 800bc3a:	bfb8      	it	lt
 800bc3c:	9204      	strlt	r2, [sp, #16]
 800bc3e:	7823      	ldrb	r3, [r4, #0]
 800bc40:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc42:	d10a      	bne.n	800bc5a <_vfiprintf_r+0x156>
 800bc44:	7863      	ldrb	r3, [r4, #1]
 800bc46:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc48:	d132      	bne.n	800bcb0 <_vfiprintf_r+0x1ac>
 800bc4a:	9b03      	ldr	r3, [sp, #12]
 800bc4c:	1d1a      	adds	r2, r3, #4
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	9203      	str	r2, [sp, #12]
 800bc52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc56:	3402      	adds	r4, #2
 800bc58:	9305      	str	r3, [sp, #20]
 800bc5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd30 <_vfiprintf_r+0x22c>
 800bc5e:	7821      	ldrb	r1, [r4, #0]
 800bc60:	2203      	movs	r2, #3
 800bc62:	4650      	mov	r0, sl
 800bc64:	f7f4 fb3c 	bl	80002e0 <memchr>
 800bc68:	b138      	cbz	r0, 800bc7a <_vfiprintf_r+0x176>
 800bc6a:	9b04      	ldr	r3, [sp, #16]
 800bc6c:	eba0 000a 	sub.w	r0, r0, sl
 800bc70:	2240      	movs	r2, #64	@ 0x40
 800bc72:	4082      	lsls	r2, r0
 800bc74:	4313      	orrs	r3, r2
 800bc76:	3401      	adds	r4, #1
 800bc78:	9304      	str	r3, [sp, #16]
 800bc7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc7e:	4829      	ldr	r0, [pc, #164]	@ (800bd24 <_vfiprintf_r+0x220>)
 800bc80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc84:	2206      	movs	r2, #6
 800bc86:	f7f4 fb2b 	bl	80002e0 <memchr>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d03f      	beq.n	800bd0e <_vfiprintf_r+0x20a>
 800bc8e:	4b26      	ldr	r3, [pc, #152]	@ (800bd28 <_vfiprintf_r+0x224>)
 800bc90:	bb1b      	cbnz	r3, 800bcda <_vfiprintf_r+0x1d6>
 800bc92:	9b03      	ldr	r3, [sp, #12]
 800bc94:	3307      	adds	r3, #7
 800bc96:	f023 0307 	bic.w	r3, r3, #7
 800bc9a:	3308      	adds	r3, #8
 800bc9c:	9303      	str	r3, [sp, #12]
 800bc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca0:	443b      	add	r3, r7
 800bca2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bca4:	e76a      	b.n	800bb7c <_vfiprintf_r+0x78>
 800bca6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcaa:	460c      	mov	r4, r1
 800bcac:	2001      	movs	r0, #1
 800bcae:	e7a8      	b.n	800bc02 <_vfiprintf_r+0xfe>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	3401      	adds	r4, #1
 800bcb4:	9305      	str	r3, [sp, #20]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	f04f 0c0a 	mov.w	ip, #10
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcc2:	3a30      	subs	r2, #48	@ 0x30
 800bcc4:	2a09      	cmp	r2, #9
 800bcc6:	d903      	bls.n	800bcd0 <_vfiprintf_r+0x1cc>
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d0c6      	beq.n	800bc5a <_vfiprintf_r+0x156>
 800bccc:	9105      	str	r1, [sp, #20]
 800bcce:	e7c4      	b.n	800bc5a <_vfiprintf_r+0x156>
 800bcd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e7f0      	b.n	800bcbc <_vfiprintf_r+0x1b8>
 800bcda:	ab03      	add	r3, sp, #12
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	462a      	mov	r2, r5
 800bce0:	4b12      	ldr	r3, [pc, #72]	@ (800bd2c <_vfiprintf_r+0x228>)
 800bce2:	a904      	add	r1, sp, #16
 800bce4:	4630      	mov	r0, r6
 800bce6:	f3af 8000 	nop.w
 800bcea:	4607      	mov	r7, r0
 800bcec:	1c78      	adds	r0, r7, #1
 800bcee:	d1d6      	bne.n	800bc9e <_vfiprintf_r+0x19a>
 800bcf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcf2:	07d9      	lsls	r1, r3, #31
 800bcf4:	d405      	bmi.n	800bd02 <_vfiprintf_r+0x1fe>
 800bcf6:	89ab      	ldrh	r3, [r5, #12]
 800bcf8:	059a      	lsls	r2, r3, #22
 800bcfa:	d402      	bmi.n	800bd02 <_vfiprintf_r+0x1fe>
 800bcfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcfe:	f7ff fdcf 	bl	800b8a0 <__retarget_lock_release_recursive>
 800bd02:	89ab      	ldrh	r3, [r5, #12]
 800bd04:	065b      	lsls	r3, r3, #25
 800bd06:	f53f af1f 	bmi.w	800bb48 <_vfiprintf_r+0x44>
 800bd0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd0c:	e71e      	b.n	800bb4c <_vfiprintf_r+0x48>
 800bd0e:	ab03      	add	r3, sp, #12
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	462a      	mov	r2, r5
 800bd14:	4b05      	ldr	r3, [pc, #20]	@ (800bd2c <_vfiprintf_r+0x228>)
 800bd16:	a904      	add	r1, sp, #16
 800bd18:	4630      	mov	r0, r6
 800bd1a:	f000 f879 	bl	800be10 <_printf_i>
 800bd1e:	e7e4      	b.n	800bcea <_vfiprintf_r+0x1e6>
 800bd20:	0800c5e0 	.word	0x0800c5e0
 800bd24:	0800c5ea 	.word	0x0800c5ea
 800bd28:	00000000 	.word	0x00000000
 800bd2c:	0800badf 	.word	0x0800badf
 800bd30:	0800c5e6 	.word	0x0800c5e6

0800bd34 <_printf_common>:
 800bd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd38:	4616      	mov	r6, r2
 800bd3a:	4698      	mov	r8, r3
 800bd3c:	688a      	ldr	r2, [r1, #8]
 800bd3e:	690b      	ldr	r3, [r1, #16]
 800bd40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd44:	4293      	cmp	r3, r2
 800bd46:	bfb8      	it	lt
 800bd48:	4613      	movlt	r3, r2
 800bd4a:	6033      	str	r3, [r6, #0]
 800bd4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd50:	4607      	mov	r7, r0
 800bd52:	460c      	mov	r4, r1
 800bd54:	b10a      	cbz	r2, 800bd5a <_printf_common+0x26>
 800bd56:	3301      	adds	r3, #1
 800bd58:	6033      	str	r3, [r6, #0]
 800bd5a:	6823      	ldr	r3, [r4, #0]
 800bd5c:	0699      	lsls	r1, r3, #26
 800bd5e:	bf42      	ittt	mi
 800bd60:	6833      	ldrmi	r3, [r6, #0]
 800bd62:	3302      	addmi	r3, #2
 800bd64:	6033      	strmi	r3, [r6, #0]
 800bd66:	6825      	ldr	r5, [r4, #0]
 800bd68:	f015 0506 	ands.w	r5, r5, #6
 800bd6c:	d106      	bne.n	800bd7c <_printf_common+0x48>
 800bd6e:	f104 0a19 	add.w	sl, r4, #25
 800bd72:	68e3      	ldr	r3, [r4, #12]
 800bd74:	6832      	ldr	r2, [r6, #0]
 800bd76:	1a9b      	subs	r3, r3, r2
 800bd78:	42ab      	cmp	r3, r5
 800bd7a:	dc26      	bgt.n	800bdca <_printf_common+0x96>
 800bd7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd80:	6822      	ldr	r2, [r4, #0]
 800bd82:	3b00      	subs	r3, #0
 800bd84:	bf18      	it	ne
 800bd86:	2301      	movne	r3, #1
 800bd88:	0692      	lsls	r2, r2, #26
 800bd8a:	d42b      	bmi.n	800bde4 <_printf_common+0xb0>
 800bd8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd90:	4641      	mov	r1, r8
 800bd92:	4638      	mov	r0, r7
 800bd94:	47c8      	blx	r9
 800bd96:	3001      	adds	r0, #1
 800bd98:	d01e      	beq.n	800bdd8 <_printf_common+0xa4>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	6922      	ldr	r2, [r4, #16]
 800bd9e:	f003 0306 	and.w	r3, r3, #6
 800bda2:	2b04      	cmp	r3, #4
 800bda4:	bf02      	ittt	eq
 800bda6:	68e5      	ldreq	r5, [r4, #12]
 800bda8:	6833      	ldreq	r3, [r6, #0]
 800bdaa:	1aed      	subeq	r5, r5, r3
 800bdac:	68a3      	ldr	r3, [r4, #8]
 800bdae:	bf0c      	ite	eq
 800bdb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdb4:	2500      	movne	r5, #0
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	bfc4      	itt	gt
 800bdba:	1a9b      	subgt	r3, r3, r2
 800bdbc:	18ed      	addgt	r5, r5, r3
 800bdbe:	2600      	movs	r6, #0
 800bdc0:	341a      	adds	r4, #26
 800bdc2:	42b5      	cmp	r5, r6
 800bdc4:	d11a      	bne.n	800bdfc <_printf_common+0xc8>
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	e008      	b.n	800bddc <_printf_common+0xa8>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	4652      	mov	r2, sl
 800bdce:	4641      	mov	r1, r8
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	47c8      	blx	r9
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	d103      	bne.n	800bde0 <_printf_common+0xac>
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde0:	3501      	adds	r5, #1
 800bde2:	e7c6      	b.n	800bd72 <_printf_common+0x3e>
 800bde4:	18e1      	adds	r1, r4, r3
 800bde6:	1c5a      	adds	r2, r3, #1
 800bde8:	2030      	movs	r0, #48	@ 0x30
 800bdea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bdee:	4422      	add	r2, r4
 800bdf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bdf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bdf8:	3302      	adds	r3, #2
 800bdfa:	e7c7      	b.n	800bd8c <_printf_common+0x58>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	4622      	mov	r2, r4
 800be00:	4641      	mov	r1, r8
 800be02:	4638      	mov	r0, r7
 800be04:	47c8      	blx	r9
 800be06:	3001      	adds	r0, #1
 800be08:	d0e6      	beq.n	800bdd8 <_printf_common+0xa4>
 800be0a:	3601      	adds	r6, #1
 800be0c:	e7d9      	b.n	800bdc2 <_printf_common+0x8e>
	...

0800be10 <_printf_i>:
 800be10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be14:	7e0f      	ldrb	r7, [r1, #24]
 800be16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be18:	2f78      	cmp	r7, #120	@ 0x78
 800be1a:	4691      	mov	r9, r2
 800be1c:	4680      	mov	r8, r0
 800be1e:	460c      	mov	r4, r1
 800be20:	469a      	mov	sl, r3
 800be22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be26:	d807      	bhi.n	800be38 <_printf_i+0x28>
 800be28:	2f62      	cmp	r7, #98	@ 0x62
 800be2a:	d80a      	bhi.n	800be42 <_printf_i+0x32>
 800be2c:	2f00      	cmp	r7, #0
 800be2e:	f000 80d1 	beq.w	800bfd4 <_printf_i+0x1c4>
 800be32:	2f58      	cmp	r7, #88	@ 0x58
 800be34:	f000 80b8 	beq.w	800bfa8 <_printf_i+0x198>
 800be38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be40:	e03a      	b.n	800beb8 <_printf_i+0xa8>
 800be42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be46:	2b15      	cmp	r3, #21
 800be48:	d8f6      	bhi.n	800be38 <_printf_i+0x28>
 800be4a:	a101      	add	r1, pc, #4	@ (adr r1, 800be50 <_printf_i+0x40>)
 800be4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be50:	0800bea9 	.word	0x0800bea9
 800be54:	0800bebd 	.word	0x0800bebd
 800be58:	0800be39 	.word	0x0800be39
 800be5c:	0800be39 	.word	0x0800be39
 800be60:	0800be39 	.word	0x0800be39
 800be64:	0800be39 	.word	0x0800be39
 800be68:	0800bebd 	.word	0x0800bebd
 800be6c:	0800be39 	.word	0x0800be39
 800be70:	0800be39 	.word	0x0800be39
 800be74:	0800be39 	.word	0x0800be39
 800be78:	0800be39 	.word	0x0800be39
 800be7c:	0800bfbb 	.word	0x0800bfbb
 800be80:	0800bee7 	.word	0x0800bee7
 800be84:	0800bf75 	.word	0x0800bf75
 800be88:	0800be39 	.word	0x0800be39
 800be8c:	0800be39 	.word	0x0800be39
 800be90:	0800bfdd 	.word	0x0800bfdd
 800be94:	0800be39 	.word	0x0800be39
 800be98:	0800bee7 	.word	0x0800bee7
 800be9c:	0800be39 	.word	0x0800be39
 800bea0:	0800be39 	.word	0x0800be39
 800bea4:	0800bf7d 	.word	0x0800bf7d
 800bea8:	6833      	ldr	r3, [r6, #0]
 800beaa:	1d1a      	adds	r2, r3, #4
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	6032      	str	r2, [r6, #0]
 800beb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800beb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800beb8:	2301      	movs	r3, #1
 800beba:	e09c      	b.n	800bff6 <_printf_i+0x1e6>
 800bebc:	6833      	ldr	r3, [r6, #0]
 800bebe:	6820      	ldr	r0, [r4, #0]
 800bec0:	1d19      	adds	r1, r3, #4
 800bec2:	6031      	str	r1, [r6, #0]
 800bec4:	0606      	lsls	r6, r0, #24
 800bec6:	d501      	bpl.n	800becc <_printf_i+0xbc>
 800bec8:	681d      	ldr	r5, [r3, #0]
 800beca:	e003      	b.n	800bed4 <_printf_i+0xc4>
 800becc:	0645      	lsls	r5, r0, #25
 800bece:	d5fb      	bpl.n	800bec8 <_printf_i+0xb8>
 800bed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bed4:	2d00      	cmp	r5, #0
 800bed6:	da03      	bge.n	800bee0 <_printf_i+0xd0>
 800bed8:	232d      	movs	r3, #45	@ 0x2d
 800beda:	426d      	negs	r5, r5
 800bedc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bee0:	4858      	ldr	r0, [pc, #352]	@ (800c044 <_printf_i+0x234>)
 800bee2:	230a      	movs	r3, #10
 800bee4:	e011      	b.n	800bf0a <_printf_i+0xfa>
 800bee6:	6821      	ldr	r1, [r4, #0]
 800bee8:	6833      	ldr	r3, [r6, #0]
 800beea:	0608      	lsls	r0, r1, #24
 800beec:	f853 5b04 	ldr.w	r5, [r3], #4
 800bef0:	d402      	bmi.n	800bef8 <_printf_i+0xe8>
 800bef2:	0649      	lsls	r1, r1, #25
 800bef4:	bf48      	it	mi
 800bef6:	b2ad      	uxthmi	r5, r5
 800bef8:	2f6f      	cmp	r7, #111	@ 0x6f
 800befa:	4852      	ldr	r0, [pc, #328]	@ (800c044 <_printf_i+0x234>)
 800befc:	6033      	str	r3, [r6, #0]
 800befe:	bf14      	ite	ne
 800bf00:	230a      	movne	r3, #10
 800bf02:	2308      	moveq	r3, #8
 800bf04:	2100      	movs	r1, #0
 800bf06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf0a:	6866      	ldr	r6, [r4, #4]
 800bf0c:	60a6      	str	r6, [r4, #8]
 800bf0e:	2e00      	cmp	r6, #0
 800bf10:	db05      	blt.n	800bf1e <_printf_i+0x10e>
 800bf12:	6821      	ldr	r1, [r4, #0]
 800bf14:	432e      	orrs	r6, r5
 800bf16:	f021 0104 	bic.w	r1, r1, #4
 800bf1a:	6021      	str	r1, [r4, #0]
 800bf1c:	d04b      	beq.n	800bfb6 <_printf_i+0x1a6>
 800bf1e:	4616      	mov	r6, r2
 800bf20:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf24:	fb03 5711 	mls	r7, r3, r1, r5
 800bf28:	5dc7      	ldrb	r7, [r0, r7]
 800bf2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf2e:	462f      	mov	r7, r5
 800bf30:	42bb      	cmp	r3, r7
 800bf32:	460d      	mov	r5, r1
 800bf34:	d9f4      	bls.n	800bf20 <_printf_i+0x110>
 800bf36:	2b08      	cmp	r3, #8
 800bf38:	d10b      	bne.n	800bf52 <_printf_i+0x142>
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	07df      	lsls	r7, r3, #31
 800bf3e:	d508      	bpl.n	800bf52 <_printf_i+0x142>
 800bf40:	6923      	ldr	r3, [r4, #16]
 800bf42:	6861      	ldr	r1, [r4, #4]
 800bf44:	4299      	cmp	r1, r3
 800bf46:	bfde      	ittt	le
 800bf48:	2330      	movle	r3, #48	@ 0x30
 800bf4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf4e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bf52:	1b92      	subs	r2, r2, r6
 800bf54:	6122      	str	r2, [r4, #16]
 800bf56:	f8cd a000 	str.w	sl, [sp]
 800bf5a:	464b      	mov	r3, r9
 800bf5c:	aa03      	add	r2, sp, #12
 800bf5e:	4621      	mov	r1, r4
 800bf60:	4640      	mov	r0, r8
 800bf62:	f7ff fee7 	bl	800bd34 <_printf_common>
 800bf66:	3001      	adds	r0, #1
 800bf68:	d14a      	bne.n	800c000 <_printf_i+0x1f0>
 800bf6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf6e:	b004      	add	sp, #16
 800bf70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	f043 0320 	orr.w	r3, r3, #32
 800bf7a:	6023      	str	r3, [r4, #0]
 800bf7c:	4832      	ldr	r0, [pc, #200]	@ (800c048 <_printf_i+0x238>)
 800bf7e:	2778      	movs	r7, #120	@ 0x78
 800bf80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	6831      	ldr	r1, [r6, #0]
 800bf88:	061f      	lsls	r7, r3, #24
 800bf8a:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf8e:	d402      	bmi.n	800bf96 <_printf_i+0x186>
 800bf90:	065f      	lsls	r7, r3, #25
 800bf92:	bf48      	it	mi
 800bf94:	b2ad      	uxthmi	r5, r5
 800bf96:	6031      	str	r1, [r6, #0]
 800bf98:	07d9      	lsls	r1, r3, #31
 800bf9a:	bf44      	itt	mi
 800bf9c:	f043 0320 	orrmi.w	r3, r3, #32
 800bfa0:	6023      	strmi	r3, [r4, #0]
 800bfa2:	b11d      	cbz	r5, 800bfac <_printf_i+0x19c>
 800bfa4:	2310      	movs	r3, #16
 800bfa6:	e7ad      	b.n	800bf04 <_printf_i+0xf4>
 800bfa8:	4826      	ldr	r0, [pc, #152]	@ (800c044 <_printf_i+0x234>)
 800bfaa:	e7e9      	b.n	800bf80 <_printf_i+0x170>
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	f023 0320 	bic.w	r3, r3, #32
 800bfb2:	6023      	str	r3, [r4, #0]
 800bfb4:	e7f6      	b.n	800bfa4 <_printf_i+0x194>
 800bfb6:	4616      	mov	r6, r2
 800bfb8:	e7bd      	b.n	800bf36 <_printf_i+0x126>
 800bfba:	6833      	ldr	r3, [r6, #0]
 800bfbc:	6825      	ldr	r5, [r4, #0]
 800bfbe:	6961      	ldr	r1, [r4, #20]
 800bfc0:	1d18      	adds	r0, r3, #4
 800bfc2:	6030      	str	r0, [r6, #0]
 800bfc4:	062e      	lsls	r6, r5, #24
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	d501      	bpl.n	800bfce <_printf_i+0x1be>
 800bfca:	6019      	str	r1, [r3, #0]
 800bfcc:	e002      	b.n	800bfd4 <_printf_i+0x1c4>
 800bfce:	0668      	lsls	r0, r5, #25
 800bfd0:	d5fb      	bpl.n	800bfca <_printf_i+0x1ba>
 800bfd2:	8019      	strh	r1, [r3, #0]
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	6123      	str	r3, [r4, #16]
 800bfd8:	4616      	mov	r6, r2
 800bfda:	e7bc      	b.n	800bf56 <_printf_i+0x146>
 800bfdc:	6833      	ldr	r3, [r6, #0]
 800bfde:	1d1a      	adds	r2, r3, #4
 800bfe0:	6032      	str	r2, [r6, #0]
 800bfe2:	681e      	ldr	r6, [r3, #0]
 800bfe4:	6862      	ldr	r2, [r4, #4]
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f7f4 f979 	bl	80002e0 <memchr>
 800bfee:	b108      	cbz	r0, 800bff4 <_printf_i+0x1e4>
 800bff0:	1b80      	subs	r0, r0, r6
 800bff2:	6060      	str	r0, [r4, #4]
 800bff4:	6863      	ldr	r3, [r4, #4]
 800bff6:	6123      	str	r3, [r4, #16]
 800bff8:	2300      	movs	r3, #0
 800bffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bffe:	e7aa      	b.n	800bf56 <_printf_i+0x146>
 800c000:	6923      	ldr	r3, [r4, #16]
 800c002:	4632      	mov	r2, r6
 800c004:	4649      	mov	r1, r9
 800c006:	4640      	mov	r0, r8
 800c008:	47d0      	blx	sl
 800c00a:	3001      	adds	r0, #1
 800c00c:	d0ad      	beq.n	800bf6a <_printf_i+0x15a>
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	079b      	lsls	r3, r3, #30
 800c012:	d413      	bmi.n	800c03c <_printf_i+0x22c>
 800c014:	68e0      	ldr	r0, [r4, #12]
 800c016:	9b03      	ldr	r3, [sp, #12]
 800c018:	4298      	cmp	r0, r3
 800c01a:	bfb8      	it	lt
 800c01c:	4618      	movlt	r0, r3
 800c01e:	e7a6      	b.n	800bf6e <_printf_i+0x15e>
 800c020:	2301      	movs	r3, #1
 800c022:	4632      	mov	r2, r6
 800c024:	4649      	mov	r1, r9
 800c026:	4640      	mov	r0, r8
 800c028:	47d0      	blx	sl
 800c02a:	3001      	adds	r0, #1
 800c02c:	d09d      	beq.n	800bf6a <_printf_i+0x15a>
 800c02e:	3501      	adds	r5, #1
 800c030:	68e3      	ldr	r3, [r4, #12]
 800c032:	9903      	ldr	r1, [sp, #12]
 800c034:	1a5b      	subs	r3, r3, r1
 800c036:	42ab      	cmp	r3, r5
 800c038:	dcf2      	bgt.n	800c020 <_printf_i+0x210>
 800c03a:	e7eb      	b.n	800c014 <_printf_i+0x204>
 800c03c:	2500      	movs	r5, #0
 800c03e:	f104 0619 	add.w	r6, r4, #25
 800c042:	e7f5      	b.n	800c030 <_printf_i+0x220>
 800c044:	0800c5f1 	.word	0x0800c5f1
 800c048:	0800c602 	.word	0x0800c602

0800c04c <__sflush_r>:
 800c04c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c054:	0716      	lsls	r6, r2, #28
 800c056:	4605      	mov	r5, r0
 800c058:	460c      	mov	r4, r1
 800c05a:	d454      	bmi.n	800c106 <__sflush_r+0xba>
 800c05c:	684b      	ldr	r3, [r1, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dc02      	bgt.n	800c068 <__sflush_r+0x1c>
 800c062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c064:	2b00      	cmp	r3, #0
 800c066:	dd48      	ble.n	800c0fa <__sflush_r+0xae>
 800c068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c06a:	2e00      	cmp	r6, #0
 800c06c:	d045      	beq.n	800c0fa <__sflush_r+0xae>
 800c06e:	2300      	movs	r3, #0
 800c070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c074:	682f      	ldr	r7, [r5, #0]
 800c076:	6a21      	ldr	r1, [r4, #32]
 800c078:	602b      	str	r3, [r5, #0]
 800c07a:	d030      	beq.n	800c0de <__sflush_r+0x92>
 800c07c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	0759      	lsls	r1, r3, #29
 800c082:	d505      	bpl.n	800c090 <__sflush_r+0x44>
 800c084:	6863      	ldr	r3, [r4, #4]
 800c086:	1ad2      	subs	r2, r2, r3
 800c088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c08a:	b10b      	cbz	r3, 800c090 <__sflush_r+0x44>
 800c08c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c08e:	1ad2      	subs	r2, r2, r3
 800c090:	2300      	movs	r3, #0
 800c092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c094:	6a21      	ldr	r1, [r4, #32]
 800c096:	4628      	mov	r0, r5
 800c098:	47b0      	blx	r6
 800c09a:	1c43      	adds	r3, r0, #1
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	d106      	bne.n	800c0ae <__sflush_r+0x62>
 800c0a0:	6829      	ldr	r1, [r5, #0]
 800c0a2:	291d      	cmp	r1, #29
 800c0a4:	d82b      	bhi.n	800c0fe <__sflush_r+0xb2>
 800c0a6:	4a2a      	ldr	r2, [pc, #168]	@ (800c150 <__sflush_r+0x104>)
 800c0a8:	40ca      	lsrs	r2, r1
 800c0aa:	07d6      	lsls	r6, r2, #31
 800c0ac:	d527      	bpl.n	800c0fe <__sflush_r+0xb2>
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	6062      	str	r2, [r4, #4]
 800c0b2:	04d9      	lsls	r1, r3, #19
 800c0b4:	6922      	ldr	r2, [r4, #16]
 800c0b6:	6022      	str	r2, [r4, #0]
 800c0b8:	d504      	bpl.n	800c0c4 <__sflush_r+0x78>
 800c0ba:	1c42      	adds	r2, r0, #1
 800c0bc:	d101      	bne.n	800c0c2 <__sflush_r+0x76>
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	b903      	cbnz	r3, 800c0c4 <__sflush_r+0x78>
 800c0c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0c6:	602f      	str	r7, [r5, #0]
 800c0c8:	b1b9      	cbz	r1, 800c0fa <__sflush_r+0xae>
 800c0ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0ce:	4299      	cmp	r1, r3
 800c0d0:	d002      	beq.n	800c0d8 <__sflush_r+0x8c>
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f7ff fbf4 	bl	800b8c0 <_free_r>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0dc:	e00d      	b.n	800c0fa <__sflush_r+0xae>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	47b0      	blx	r6
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	1c50      	adds	r0, r2, #1
 800c0e8:	d1c9      	bne.n	800c07e <__sflush_r+0x32>
 800c0ea:	682b      	ldr	r3, [r5, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0c6      	beq.n	800c07e <__sflush_r+0x32>
 800c0f0:	2b1d      	cmp	r3, #29
 800c0f2:	d001      	beq.n	800c0f8 <__sflush_r+0xac>
 800c0f4:	2b16      	cmp	r3, #22
 800c0f6:	d11e      	bne.n	800c136 <__sflush_r+0xea>
 800c0f8:	602f      	str	r7, [r5, #0]
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	e022      	b.n	800c144 <__sflush_r+0xf8>
 800c0fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c102:	b21b      	sxth	r3, r3
 800c104:	e01b      	b.n	800c13e <__sflush_r+0xf2>
 800c106:	690f      	ldr	r7, [r1, #16]
 800c108:	2f00      	cmp	r7, #0
 800c10a:	d0f6      	beq.n	800c0fa <__sflush_r+0xae>
 800c10c:	0793      	lsls	r3, r2, #30
 800c10e:	680e      	ldr	r6, [r1, #0]
 800c110:	bf08      	it	eq
 800c112:	694b      	ldreq	r3, [r1, #20]
 800c114:	600f      	str	r7, [r1, #0]
 800c116:	bf18      	it	ne
 800c118:	2300      	movne	r3, #0
 800c11a:	eba6 0807 	sub.w	r8, r6, r7
 800c11e:	608b      	str	r3, [r1, #8]
 800c120:	f1b8 0f00 	cmp.w	r8, #0
 800c124:	dde9      	ble.n	800c0fa <__sflush_r+0xae>
 800c126:	6a21      	ldr	r1, [r4, #32]
 800c128:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c12a:	4643      	mov	r3, r8
 800c12c:	463a      	mov	r2, r7
 800c12e:	4628      	mov	r0, r5
 800c130:	47b0      	blx	r6
 800c132:	2800      	cmp	r0, #0
 800c134:	dc08      	bgt.n	800c148 <__sflush_r+0xfc>
 800c136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c13e:	81a3      	strh	r3, [r4, #12]
 800c140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c148:	4407      	add	r7, r0
 800c14a:	eba8 0800 	sub.w	r8, r8, r0
 800c14e:	e7e7      	b.n	800c120 <__sflush_r+0xd4>
 800c150:	20400001 	.word	0x20400001

0800c154 <_fflush_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	690b      	ldr	r3, [r1, #16]
 800c158:	4605      	mov	r5, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	b913      	cbnz	r3, 800c164 <_fflush_r+0x10>
 800c15e:	2500      	movs	r5, #0
 800c160:	4628      	mov	r0, r5
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	b118      	cbz	r0, 800c16e <_fflush_r+0x1a>
 800c166:	6a03      	ldr	r3, [r0, #32]
 800c168:	b90b      	cbnz	r3, 800c16e <_fflush_r+0x1a>
 800c16a:	f7ff fa93 	bl	800b694 <__sinit>
 800c16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0f3      	beq.n	800c15e <_fflush_r+0xa>
 800c176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c178:	07d0      	lsls	r0, r2, #31
 800c17a:	d404      	bmi.n	800c186 <_fflush_r+0x32>
 800c17c:	0599      	lsls	r1, r3, #22
 800c17e:	d402      	bmi.n	800c186 <_fflush_r+0x32>
 800c180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c182:	f7ff fb8c 	bl	800b89e <__retarget_lock_acquire_recursive>
 800c186:	4628      	mov	r0, r5
 800c188:	4621      	mov	r1, r4
 800c18a:	f7ff ff5f 	bl	800c04c <__sflush_r>
 800c18e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c190:	07da      	lsls	r2, r3, #31
 800c192:	4605      	mov	r5, r0
 800c194:	d4e4      	bmi.n	800c160 <_fflush_r+0xc>
 800c196:	89a3      	ldrh	r3, [r4, #12]
 800c198:	059b      	lsls	r3, r3, #22
 800c19a:	d4e1      	bmi.n	800c160 <_fflush_r+0xc>
 800c19c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c19e:	f7ff fb7f 	bl	800b8a0 <__retarget_lock_release_recursive>
 800c1a2:	e7dd      	b.n	800c160 <_fflush_r+0xc>

0800c1a4 <__swbuf_r>:
 800c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a6:	460e      	mov	r6, r1
 800c1a8:	4614      	mov	r4, r2
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	b118      	cbz	r0, 800c1b6 <__swbuf_r+0x12>
 800c1ae:	6a03      	ldr	r3, [r0, #32]
 800c1b0:	b90b      	cbnz	r3, 800c1b6 <__swbuf_r+0x12>
 800c1b2:	f7ff fa6f 	bl	800b694 <__sinit>
 800c1b6:	69a3      	ldr	r3, [r4, #24]
 800c1b8:	60a3      	str	r3, [r4, #8]
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	071a      	lsls	r2, r3, #28
 800c1be:	d501      	bpl.n	800c1c4 <__swbuf_r+0x20>
 800c1c0:	6923      	ldr	r3, [r4, #16]
 800c1c2:	b943      	cbnz	r3, 800c1d6 <__swbuf_r+0x32>
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	f000 f82a 	bl	800c220 <__swsetup_r>
 800c1cc:	b118      	cbz	r0, 800c1d6 <__swbuf_r+0x32>
 800c1ce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c1d2:	4638      	mov	r0, r7
 800c1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	6922      	ldr	r2, [r4, #16]
 800c1da:	1a98      	subs	r0, r3, r2
 800c1dc:	6963      	ldr	r3, [r4, #20]
 800c1de:	b2f6      	uxtb	r6, r6
 800c1e0:	4283      	cmp	r3, r0
 800c1e2:	4637      	mov	r7, r6
 800c1e4:	dc05      	bgt.n	800c1f2 <__swbuf_r+0x4e>
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	f7ff ffb3 	bl	800c154 <_fflush_r>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d1ed      	bne.n	800c1ce <__swbuf_r+0x2a>
 800c1f2:	68a3      	ldr	r3, [r4, #8]
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	60a3      	str	r3, [r4, #8]
 800c1f8:	6823      	ldr	r3, [r4, #0]
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	6022      	str	r2, [r4, #0]
 800c1fe:	701e      	strb	r6, [r3, #0]
 800c200:	6962      	ldr	r2, [r4, #20]
 800c202:	1c43      	adds	r3, r0, #1
 800c204:	429a      	cmp	r2, r3
 800c206:	d004      	beq.n	800c212 <__swbuf_r+0x6e>
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	07db      	lsls	r3, r3, #31
 800c20c:	d5e1      	bpl.n	800c1d2 <__swbuf_r+0x2e>
 800c20e:	2e0a      	cmp	r6, #10
 800c210:	d1df      	bne.n	800c1d2 <__swbuf_r+0x2e>
 800c212:	4621      	mov	r1, r4
 800c214:	4628      	mov	r0, r5
 800c216:	f7ff ff9d 	bl	800c154 <_fflush_r>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d0d9      	beq.n	800c1d2 <__swbuf_r+0x2e>
 800c21e:	e7d6      	b.n	800c1ce <__swbuf_r+0x2a>

0800c220 <__swsetup_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4b29      	ldr	r3, [pc, #164]	@ (800c2c8 <__swsetup_r+0xa8>)
 800c224:	4605      	mov	r5, r0
 800c226:	6818      	ldr	r0, [r3, #0]
 800c228:	460c      	mov	r4, r1
 800c22a:	b118      	cbz	r0, 800c234 <__swsetup_r+0x14>
 800c22c:	6a03      	ldr	r3, [r0, #32]
 800c22e:	b90b      	cbnz	r3, 800c234 <__swsetup_r+0x14>
 800c230:	f7ff fa30 	bl	800b694 <__sinit>
 800c234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c238:	0719      	lsls	r1, r3, #28
 800c23a:	d422      	bmi.n	800c282 <__swsetup_r+0x62>
 800c23c:	06da      	lsls	r2, r3, #27
 800c23e:	d407      	bmi.n	800c250 <__swsetup_r+0x30>
 800c240:	2209      	movs	r2, #9
 800c242:	602a      	str	r2, [r5, #0]
 800c244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c248:	81a3      	strh	r3, [r4, #12]
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c24e:	e033      	b.n	800c2b8 <__swsetup_r+0x98>
 800c250:	0758      	lsls	r0, r3, #29
 800c252:	d512      	bpl.n	800c27a <__swsetup_r+0x5a>
 800c254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c256:	b141      	cbz	r1, 800c26a <__swsetup_r+0x4a>
 800c258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c25c:	4299      	cmp	r1, r3
 800c25e:	d002      	beq.n	800c266 <__swsetup_r+0x46>
 800c260:	4628      	mov	r0, r5
 800c262:	f7ff fb2d 	bl	800b8c0 <_free_r>
 800c266:	2300      	movs	r3, #0
 800c268:	6363      	str	r3, [r4, #52]	@ 0x34
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c270:	81a3      	strh	r3, [r4, #12]
 800c272:	2300      	movs	r3, #0
 800c274:	6063      	str	r3, [r4, #4]
 800c276:	6923      	ldr	r3, [r4, #16]
 800c278:	6023      	str	r3, [r4, #0]
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	f043 0308 	orr.w	r3, r3, #8
 800c280:	81a3      	strh	r3, [r4, #12]
 800c282:	6923      	ldr	r3, [r4, #16]
 800c284:	b94b      	cbnz	r3, 800c29a <__swsetup_r+0x7a>
 800c286:	89a3      	ldrh	r3, [r4, #12]
 800c288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c28c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c290:	d003      	beq.n	800c29a <__swsetup_r+0x7a>
 800c292:	4621      	mov	r1, r4
 800c294:	4628      	mov	r0, r5
 800c296:	f000 f84f 	bl	800c338 <__smakebuf_r>
 800c29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c29e:	f013 0201 	ands.w	r2, r3, #1
 800c2a2:	d00a      	beq.n	800c2ba <__swsetup_r+0x9a>
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	60a2      	str	r2, [r4, #8]
 800c2a8:	6962      	ldr	r2, [r4, #20]
 800c2aa:	4252      	negs	r2, r2
 800c2ac:	61a2      	str	r2, [r4, #24]
 800c2ae:	6922      	ldr	r2, [r4, #16]
 800c2b0:	b942      	cbnz	r2, 800c2c4 <__swsetup_r+0xa4>
 800c2b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2b6:	d1c5      	bne.n	800c244 <__swsetup_r+0x24>
 800c2b8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ba:	0799      	lsls	r1, r3, #30
 800c2bc:	bf58      	it	pl
 800c2be:	6962      	ldrpl	r2, [r4, #20]
 800c2c0:	60a2      	str	r2, [r4, #8]
 800c2c2:	e7f4      	b.n	800c2ae <__swsetup_r+0x8e>
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	e7f7      	b.n	800c2b8 <__swsetup_r+0x98>
 800c2c8:	24000020 	.word	0x24000020

0800c2cc <_sbrk_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d06      	ldr	r5, [pc, #24]	@ (800c2e8 <_sbrk_r+0x1c>)
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4608      	mov	r0, r1
 800c2d6:	602b      	str	r3, [r5, #0]
 800c2d8:	f7f4 ff9c 	bl	8001214 <_sbrk>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d102      	bne.n	800c2e6 <_sbrk_r+0x1a>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	b103      	cbz	r3, 800c2e6 <_sbrk_r+0x1a>
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	24004d08 	.word	0x24004d08

0800c2ec <__swhatbuf_r>:
 800c2ec:	b570      	push	{r4, r5, r6, lr}
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f4:	2900      	cmp	r1, #0
 800c2f6:	b096      	sub	sp, #88	@ 0x58
 800c2f8:	4615      	mov	r5, r2
 800c2fa:	461e      	mov	r6, r3
 800c2fc:	da0d      	bge.n	800c31a <__swhatbuf_r+0x2e>
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c304:	f04f 0100 	mov.w	r1, #0
 800c308:	bf14      	ite	ne
 800c30a:	2340      	movne	r3, #64	@ 0x40
 800c30c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c310:	2000      	movs	r0, #0
 800c312:	6031      	str	r1, [r6, #0]
 800c314:	602b      	str	r3, [r5, #0]
 800c316:	b016      	add	sp, #88	@ 0x58
 800c318:	bd70      	pop	{r4, r5, r6, pc}
 800c31a:	466a      	mov	r2, sp
 800c31c:	f000 f848 	bl	800c3b0 <_fstat_r>
 800c320:	2800      	cmp	r0, #0
 800c322:	dbec      	blt.n	800c2fe <__swhatbuf_r+0x12>
 800c324:	9901      	ldr	r1, [sp, #4]
 800c326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c32a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c32e:	4259      	negs	r1, r3
 800c330:	4159      	adcs	r1, r3
 800c332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c336:	e7eb      	b.n	800c310 <__swhatbuf_r+0x24>

0800c338 <__smakebuf_r>:
 800c338:	898b      	ldrh	r3, [r1, #12]
 800c33a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c33c:	079d      	lsls	r5, r3, #30
 800c33e:	4606      	mov	r6, r0
 800c340:	460c      	mov	r4, r1
 800c342:	d507      	bpl.n	800c354 <__smakebuf_r+0x1c>
 800c344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	6123      	str	r3, [r4, #16]
 800c34c:	2301      	movs	r3, #1
 800c34e:	6163      	str	r3, [r4, #20]
 800c350:	b003      	add	sp, #12
 800c352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c354:	ab01      	add	r3, sp, #4
 800c356:	466a      	mov	r2, sp
 800c358:	f7ff ffc8 	bl	800c2ec <__swhatbuf_r>
 800c35c:	9f00      	ldr	r7, [sp, #0]
 800c35e:	4605      	mov	r5, r0
 800c360:	4639      	mov	r1, r7
 800c362:	4630      	mov	r0, r6
 800c364:	f7ff fb18 	bl	800b998 <_malloc_r>
 800c368:	b948      	cbnz	r0, 800c37e <__smakebuf_r+0x46>
 800c36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c36e:	059a      	lsls	r2, r3, #22
 800c370:	d4ee      	bmi.n	800c350 <__smakebuf_r+0x18>
 800c372:	f023 0303 	bic.w	r3, r3, #3
 800c376:	f043 0302 	orr.w	r3, r3, #2
 800c37a:	81a3      	strh	r3, [r4, #12]
 800c37c:	e7e2      	b.n	800c344 <__smakebuf_r+0xc>
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	6020      	str	r0, [r4, #0]
 800c382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c386:	81a3      	strh	r3, [r4, #12]
 800c388:	9b01      	ldr	r3, [sp, #4]
 800c38a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c38e:	b15b      	cbz	r3, 800c3a8 <__smakebuf_r+0x70>
 800c390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c394:	4630      	mov	r0, r6
 800c396:	f000 f81d 	bl	800c3d4 <_isatty_r>
 800c39a:	b128      	cbz	r0, 800c3a8 <__smakebuf_r+0x70>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	f023 0303 	bic.w	r3, r3, #3
 800c3a2:	f043 0301 	orr.w	r3, r3, #1
 800c3a6:	81a3      	strh	r3, [r4, #12]
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	431d      	orrs	r5, r3
 800c3ac:	81a5      	strh	r5, [r4, #12]
 800c3ae:	e7cf      	b.n	800c350 <__smakebuf_r+0x18>

0800c3b0 <_fstat_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	4d07      	ldr	r5, [pc, #28]	@ (800c3d0 <_fstat_r+0x20>)
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	4608      	mov	r0, r1
 800c3ba:	4611      	mov	r1, r2
 800c3bc:	602b      	str	r3, [r5, #0]
 800c3be:	f7f4 ff00 	bl	80011c2 <_fstat>
 800c3c2:	1c43      	adds	r3, r0, #1
 800c3c4:	d102      	bne.n	800c3cc <_fstat_r+0x1c>
 800c3c6:	682b      	ldr	r3, [r5, #0]
 800c3c8:	b103      	cbz	r3, 800c3cc <_fstat_r+0x1c>
 800c3ca:	6023      	str	r3, [r4, #0]
 800c3cc:	bd38      	pop	{r3, r4, r5, pc}
 800c3ce:	bf00      	nop
 800c3d0:	24004d08 	.word	0x24004d08

0800c3d4 <_isatty_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4d06      	ldr	r5, [pc, #24]	@ (800c3f0 <_isatty_r+0x1c>)
 800c3d8:	2300      	movs	r3, #0
 800c3da:	4604      	mov	r4, r0
 800c3dc:	4608      	mov	r0, r1
 800c3de:	602b      	str	r3, [r5, #0]
 800c3e0:	f7f4 feff 	bl	80011e2 <_isatty>
 800c3e4:	1c43      	adds	r3, r0, #1
 800c3e6:	d102      	bne.n	800c3ee <_isatty_r+0x1a>
 800c3e8:	682b      	ldr	r3, [r5, #0]
 800c3ea:	b103      	cbz	r3, 800c3ee <_isatty_r+0x1a>
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	bd38      	pop	{r3, r4, r5, pc}
 800c3f0:	24004d08 	.word	0x24004d08

0800c3f4 <_init>:
 800c3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f6:	bf00      	nop
 800c3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3fa:	bc08      	pop	{r3}
 800c3fc:	469e      	mov	lr, r3
 800c3fe:	4770      	bx	lr

0800c400 <_fini>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	bf00      	nop
 800c404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c406:	bc08      	pop	{r3}
 800c408:	469e      	mov	lr, r3
 800c40a:	4770      	bx	lr
